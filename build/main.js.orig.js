// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)

if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {
 var loadPackage = function(metadata) {

    var PACKAGE_PATH;
    if (typeof window === 'object') {
      PACKAGE_PATH = window['encodeURIComponent'](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf('/')) + '/');
    } else if (typeof location !== 'undefined') {
      // worker
      PACKAGE_PATH = encodeURIComponent(location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf('/')) + '/');
    } else {
      throw 'using preloaded data can only be done on a web page or in a web worker';
    }
    var PACKAGE_NAME = 'main.data';
    var REMOTE_PACKAGE_BASE = 'main.data';
    if (typeof Module['locateFilePackage'] === 'function' && !Module['locateFile']) {
      Module['locateFile'] = Module['locateFilePackage'];
      Module.printErr('warning: you defined Module.locateFilePackage, that has been renamed to Module.locateFile (using your locateFilePackage for now)');
    }
    var REMOTE_PACKAGE_NAME = typeof Module['locateFile'] === 'function' ?
                              Module['locateFile'](REMOTE_PACKAGE_BASE) :
                              ((Module['filePackagePrefixURL'] || '') + REMOTE_PACKAGE_BASE);
  
    var REMOTE_PACKAGE_SIZE = metadata.remote_package_size;
    var PACKAGE_UUID = metadata.package_uuid;
  
    function fetchRemotePackage(packageName, packageSize, callback, errback) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', packageName, true);
      xhr.responseType = 'arraybuffer';
      xhr.onprogress = function(event) {
        var url = packageName;
        var size = packageSize;
        if (event.total) size = event.total;
        if (event.loaded) {
          if (!xhr.addedTotal) {
            xhr.addedTotal = true;
            if (!Module.dataFileDownloads) Module.dataFileDownloads = {};
            Module.dataFileDownloads[url] = {
              loaded: event.loaded,
              total: size
            };
          } else {
            Module.dataFileDownloads[url].loaded = event.loaded;
          }
          var total = 0;
          var loaded = 0;
          var num = 0;
          for (var download in Module.dataFileDownloads) {
          var data = Module.dataFileDownloads[download];
            total += data.total;
            loaded += data.loaded;
            num++;
          }
          total = Math.ceil(total * Module.expectedDataFileDownloads/num);
          if (Module['setStatus']) Module['setStatus']('Downloading data... (' + loaded + '/' + total + ')');
        } else if (!Module.dataFileDownloads) {
          if (Module['setStatus']) Module['setStatus']('Downloading data...');
        }
      };
      xhr.onerror = function(event) {
        throw new Error("NetworkError for: " + packageName);
      }
      xhr.onload = function(event) {
        if (xhr.status == 200 || xhr.status == 304 || xhr.status == 206 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
          var packageData = xhr.response;
          callback(packageData);
        } else {
          throw new Error(xhr.statusText + " : " + xhr.responseURL);
        }
      };
      xhr.send(null);
    };

    function handleError(error) {
      console.error('package error:', error);
    };
  
      var fetchedCallback = null;
      var fetched = Module['getPreloadedPackage'] ? Module['getPreloadedPackage'](REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE) : null;

      if (!fetched) fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE, function(data) {
        if (fetchedCallback) {
          fetchedCallback(data);
          fetchedCallback = null;
        } else {
          fetched = data;
        }
      }, handleError);
    
  function runWithFS() {

    function assert(check, msg) {
      if (!check) throw msg + new Error().stack;
    }
Module['FS_createPath']('/', 'data', true, true);
Module['FS_createPath']('/data', '3D Road Pack', true, true);
Module['FS_createPath']('/data/3D Road Pack', 'Models', true, true);
Module['FS_createPath']('/data', 'lightmap', true, true);

    function DataRequest(start, end, crunched, audio) {
      this.start = start;
      this.end = end;
      this.crunched = crunched;
      this.audio = audio;
    }
    DataRequest.prototype = {
      requests: {},
      open: function(mode, name) {
        this.name = name;
        this.requests[name] = this;
        Module['addRunDependency']('fp ' + this.name);
      },
      send: function() {},
      onload: function() {
        var byteArray = this.byteArray.subarray(this.start, this.end);

          this.finish(byteArray);

      },
      finish: function(byteArray) {
        var that = this;

        Module['FS_createDataFile'](this.name, null, byteArray, true, true, true); // canOwn this data in the filesystem, it is a slide into the heap that will never change
        Module['removeRunDependency']('fp ' + that.name);

        this.requests[this.name] = null;
      }
    };

        var files = metadata.files;
        for (var i = 0; i < files.length; ++i) {
          new DataRequest(files[i].start, files[i].end, files[i].crunched, files[i].audio).open('GET', files[i].filename);
        }

  
    function processPackageData(arrayBuffer) {
      Module.finishedDataFileDownloads++;
      assert(arrayBuffer, 'Loading data file failed.');
      assert(arrayBuffer instanceof ArrayBuffer, 'bad input to processPackageData');
      var byteArray = new Uint8Array(arrayBuffer);
      var curr;
      
        // Reuse the bytearray from the XHR as the source for file reads.
        DataRequest.prototype.byteArray = byteArray;
  
          var files = metadata.files;
          for (var i = 0; i < files.length; ++i) {
            DataRequest.prototype.requests[files[i].filename].onload();
          }
              Module['removeRunDependency']('datafile_main.data');

    };
    Module['addRunDependency']('datafile_main.data');
  
    if (!Module.preloadResults) Module.preloadResults = {};
  
      Module.preloadResults[PACKAGE_NAME] = {fromCache: false};
      if (fetched) {
        processPackageData(fetched);
        fetched = null;
      } else {
        fetchedCallback = processPackageData;
      }
    
  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

 }
 loadPackage({"files": [{"audio": 0, "start": 0, "crunched": 0, "end": 25205, "filename": "/data/Cliff0.png"}, {"audio": 0, "start": 25205, "crunched": 0, "end": 69086, "filename": "/data/house3.png"}, {"audio": 0, "start": 69086, "crunched": 0, "end": 224607, "filename": "/data/pipe4ways.obj"}, {"audio": 0, "start": 224607, "crunched": 0, "end": 346886, "filename": "/data/HousesPackLowPoly_house5.obj"}, {"audio": 0, "start": 346886, "crunched": 0, "end": 393731, "filename": "/data/comm_s_2.obj"}, {"audio": 0, "start": 393731, "crunched": 0, "end": 447739, "filename": "/data/pipe.obj"}, {"audio": 0, "start": 447739, "crunched": 0, "end": 457528, "filename": "/data/Oak.png"}, {"audio": 0, "start": 457528, "crunched": 0, "end": 467039, "filename": "/data/SchemeUp.png"}, {"audio": 0, "start": 467039, "crunched": 0, "end": 467888, "filename": "/data/EngineHouse.mtl"}, {"audio": 0, "start": 467888, "crunched": 0, "end": 520326, "filename": "/data/comm_m_2.obj"}, {"audio": 0, "start": 520326, "crunched": 0, "end": 525346, "filename": "/data/ring.obj"}, {"audio": 0, "start": 525346, "crunched": 0, "end": 595524, "filename": "/data/pipeT.obj"}, {"audio": 0, "start": 595524, "crunched": 0, "end": 609260, "filename": "/data/comm_s_1.obj"}, {"audio": 0, "start": 609260, "crunched": 0, "end": 609571, "filename": "/data/square.obj"}, {"audio": 0, "start": 609571, "crunched": 0, "end": 637883, "filename": "/data/comm_l_2.png"}, {"audio": 0, "start": 637883, "crunched": 0, "end": 749324, "filename": "/data/comm_l_4.obj"}, {"audio": 0, "start": 749324, "crunched": 0, "end": 785011, "filename": "/data/house4.png"}, {"audio": 0, "start": 785011, "crunched": 0, "end": 827450, "filename": "/data/comm_s_3.obj"}, {"audio": 0, "start": 827450, "crunched": 0, "end": 859237, "filename": "/data/HousesPackLowPoly_house1.obj"}, {"audio": 0, "start": 859237, "crunched": 0, "end": 902412, "filename": "/data/house2.png"}, {"audio": 0, "start": 902412, "crunched": 0, "end": 955176, "filename": "/data/xkcd-script.ttf"}, {"audio": 0, "start": 955176, "crunched": 0, "end": 1000830, "filename": "/data/Generator.obj"}, {"audio": 0, "start": 1000830, "crunched": 0, "end": 1111518, "filename": "/data/HousesPackLowPoly_house2.obj"}, {"audio": 0, "start": 1111518, "crunched": 0, "end": 1159519, "filename": "/data/WaterTank-edit.png"}, {"audio": 0, "start": 1159519, "crunched": 0, "end": 1967022, "filename": "/data/SatReceiver.obj"}, {"audio": 0, "start": 1967022, "crunched": 0, "end": 2009600, "filename": "/data/house1.png"}, {"audio": 0, "start": 2009600, "crunched": 0, "end": 2012532, "filename": "/data/Cliff0.obj"}, {"audio": 0, "start": 2012532, "crunched": 0, "end": 2112031, "filename": "/data/pipebend.obj"}, {"audio": 0, "start": 2112031, "crunched": 0, "end": 2156562, "filename": "/data/comm_l_4.png"}, {"audio": 0, "start": 2156562, "crunched": 0, "end": 2190007, "filename": "/data/comm_l_2.obj"}, {"audio": 0, "start": 2190007, "crunched": 0, "end": 2217213, "filename": "/data/comm_m_1.png"}, {"audio": 0, "start": 2217213, "crunched": 0, "end": 2258259, "filename": "/data/comm_m_3.png"}, {"audio": 0, "start": 2258259, "crunched": 0, "end": 2286071, "filename": "/data/comm_l_1.obj"}, {"audio": 0, "start": 2286071, "crunched": 0, "end": 2298808, "filename": "/data/comm_s_2.png"}, {"audio": 0, "start": 2298808, "crunched": 0, "end": 2354847, "filename": "/data/comm_m_4.obj"}, {"audio": 0, "start": 2354847, "crunched": 0, "end": 2358219, "filename": "/data/CliffBottom0.obj"}, {"audio": 0, "start": 2358219, "crunched": 0, "end": 2398884, "filename": "/data/Pipe.png"}, {"audio": 0, "start": 2398884, "crunched": 0, "end": 2406647, "filename": "/data/SchemeDown.png"}, {"audio": 0, "start": 2406647, "crunched": 0, "end": 2479434, "filename": "/data/SatR.png"}, {"audio": 0, "start": 2479434, "crunched": 0, "end": 2517265, "filename": "/data/PipeBend.png"}, {"audio": 0, "start": 2517265, "crunched": 0, "end": 2562560, "filename": "/data/Pipe4ways.png"}, {"audio": 0, "start": 2562560, "crunched": 0, "end": 2622984, "filename": "/data/HousesPackLowPoly_house4.obj"}, {"audio": 0, "start": 2622984, "crunched": 0, "end": 2641176, "filename": "/data/comm_m_1.obj"}, {"audio": 0, "start": 2641176, "crunched": 0, "end": 2686391, "filename": "/data/house5.png"}, {"audio": 0, "start": 2686391, "crunched": 0, "end": 2726391, "filename": "/data/comm_m_4.png"}, {"audio": 0, "start": 2726391, "crunched": 0, "end": 2766912, "filename": "/data/comm_m_2.png"}, {"audio": 0, "start": 2766912, "crunched": 0, "end": 2818657, "filename": "/data/comm_l_3.obj"}, {"audio": 0, "start": 2818657, "crunched": 0, "end": 2857876, "filename": "/data/comm_l_1.png"}, {"audio": 0, "start": 2857876, "crunched": 0, "end": 2858279, "filename": "/data/RPGTileset.png"}, {"audio": 0, "start": 2858279, "crunched": 0, "end": 2859866, "filename": "/data/SchemeDown.obj"}, {"audio": 0, "start": 2859866, "crunched": 0, "end": 2870604, "filename": "/data/comm_s_3.png"}, {"audio": 0, "start": 2870604, "crunched": 0, "end": 2969048, "filename": "/data/HousesPackLowPoly_house3.obj"}, {"audio": 0, "start": 2969048, "crunched": 0, "end": 2980192, "filename": "/data/comm_s_1.png"}, {"audio": 0, "start": 2980192, "crunched": 0, "end": 2981402, "filename": "/data/CliffBottomCorner0.obj"}, {"audio": 0, "start": 2981402, "crunched": 0, "end": 3042491, "filename": "/data/WaterTank-edit.obj"}, {"audio": 0, "start": 3042491, "crunched": 0, "end": 3044072, "filename": "/data/SchemeUp.obj"}, {"audio": 0, "start": 3044072, "crunched": 0, "end": 3078940, "filename": "/data/EngineHouse.png"}, {"audio": 0, "start": 3078940, "crunched": 0, "end": 3108359, "filename": "/data/cellphone.png"}, {"audio": 0, "start": 3108359, "crunched": 0, "end": 3267791, "filename": "/data/EngineHouse.obj"}, {"audio": 0, "start": 3267791, "crunched": 0, "end": 3280891, "filename": "/data/CliffBottomCorner0.png"}, {"audio": 0, "start": 3280891, "crunched": 0, "end": 3320757, "filename": "/data/PipeT.png"}, {"audio": 0, "start": 3320757, "crunched": 0, "end": 3358390, "filename": "/data/comm_l_3.png"}, {"audio": 0, "start": 3358390, "crunched": 0, "end": 3397472, "filename": "/data/comm_m_3.obj"}, {"audio": 0, "start": 3397472, "crunched": 0, "end": 3401723, "filename": "/data/Oak.obj"}, {"audio": 0, "start": 3401723, "crunched": 0, "end": 3455357, "filename": "/data/Generator.png"}, {"audio": 0, "start": 3455357, "crunched": 0, "end": 3470024, "filename": "/data/cellphone.obj"}, {"audio": 0, "start": 3470024, "crunched": 0, "end": 3470088, "filename": "/data/3D Road Pack/Donate on Steam.url"}, {"audio": 0, "start": 3470088, "crunched": 0, "end": 3470145, "filename": "/data/3D Road Pack/Facebook.url"}, {"audio": 0, "start": 3470145, "crunched": 0, "end": 3470193, "filename": "/data/3D Road Pack/Donate on Itch.io.url"}, {"audio": 0, "start": 3470193, "crunched": 0, "end": 3470704, "filename": "/data/3D Road Pack/License.txt"}, {"audio": 0, "start": 3470704, "crunched": 0, "end": 3478927, "filename": "/data/3D Road Pack/Models/roadTile_260-edit2.obj"}, {"audio": 0, "start": 3478927, "crunched": 0, "end": 3481789, "filename": "/data/3D Road Pack/Models/roadTile_277-edit2.obj"}, {"audio": 0, "start": 3481789, "crunched": 0, "end": 3509405, "filename": "/data/3D Road Pack/Models/roadTile_148-edit2.obj"}, {"audio": 0, "start": 3509405, "crunched": 0, "end": 3526887, "filename": "/data/3D Road Pack/Models/roadTile_299-edit2.obj"}, {"audio": 0, "start": 3526887, "crunched": 0, "end": 3559374, "filename": "/data/lightmap/tree_lightmap.obj"}, {"audio": 0, "start": 3559374, "crunched": 0, "end": 3680634, "filename": "/data/lightmap/lightmap.png"}], "remote_package_size": 3680634, "package_uuid": "f9834303-0e72-40a9-8089-c6b986a468cd"});

})();



// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('Module[\'ENVIRONMENT\'] value is not valid. must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', function(reason, p) {
    Module['printErr']('node.js exiting due to unhandled promise rejection');
    process['exit'](1);
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  Module['setWindowTitle'] = function(title) { document.title = title };
}
else {
  // Unreachable because SHELL is dependent on the others
  throw new Error('unknown runtime environment');
}

// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
Module['print'] = typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null);
Module['printErr'] = typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || Module['print']);

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = setTempRet0 = getTempRet0 = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  assert(!staticSealed);
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  return ret;
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  var ret = size = Math.ceil(size / factor) * factor;
  return ret;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    Module.printErr(text);
  }
}



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// 'sig' parameter is only used on LLVM wasm backend
function addFunction(func, sig) {
  if (typeof sig === 'undefined') {
    Module.printErr('Warning: addFunction: Provide a wasm function signature ' +
                    'string as a second argument');
  }
  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}


function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 1024;



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};
// For fast lookup of conversion functions
var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

// C calling interface.
function ccall (ident, returnType, argTypes, args, opts) {
  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
    assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
  }
  if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
  if (returnType === 'string') ret = Pointer_stringify(ret);
  if (stack !== 0) {
    if (opts && opts.async) {
      EmterpreterAsync.asyncFinalizers.push(function() {
        stackRestore(stack);
      });
      return;
    }
    stackRestore(stack);
  }
  return ret;
}

function cwrap (ident, returnType, argTypes) {
  argTypes = argTypes || [];
  var cfunc = getCFunc(ident);
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs) {
    return cfunc;
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}

if (!Module['reallocBuffer']) Module['reallocBuffer'] = function(size) {
  var ret;
  try {
    if (ArrayBuffer.transfer) {
      ret = ArrayBuffer.transfer(buffer, size);
    } else {
      var oldHEAP8 = HEAP8;
      ret = new ArrayBuffer(size);
      var temp = new Int8Array(ret);
      temp.set(oldHEAP8);
    }
  } catch(e) {
    return false;
  }
  var success = _emscripten_replace_memory(ret);
  if (!success) return false;
  return ret;
};

function enlargeMemory() {
  // TOTAL_MEMORY is the current size of the actual array, and DYNAMICTOP is the new top.
  assert(HEAP32[DYNAMICTOP_PTR>>2] > TOTAL_MEMORY); // This function should only ever be called after the ceiling of the dynamic heap has already been bumped to exceed the current total size of the asm.js heap.


  var PAGE_MULTIPLE = Module["usingWasm"] ? WASM_PAGE_SIZE : ASMJS_PAGE_SIZE; // In wasm, heap size must be a multiple of 64KB. In asm.js, they need to be multiples of 16MB.
  var LIMIT = 2147483648 - PAGE_MULTIPLE; // We can do one page short of 2GB as theoretical maximum.

  if (HEAP32[DYNAMICTOP_PTR>>2] > LIMIT) {
    Module.printErr('Cannot enlarge memory, asked to go up to ' + HEAP32[DYNAMICTOP_PTR>>2] + ' bytes, but the limit is ' + LIMIT + ' bytes!');
    return false;
  }

  var OLD_TOTAL_MEMORY = TOTAL_MEMORY;
  TOTAL_MEMORY = Math.max(TOTAL_MEMORY, MIN_TOTAL_MEMORY); // So the loop below will not be infinite, and minimum asm.js memory size is 16MB.

  while (TOTAL_MEMORY < HEAP32[DYNAMICTOP_PTR>>2]) { // Keep incrementing the heap size as long as it's less than what is requested.
    if (TOTAL_MEMORY <= 536870912) {
      TOTAL_MEMORY = alignUp(2 * TOTAL_MEMORY, PAGE_MULTIPLE); // Simple heuristic: double until 1GB...
    } else {
      TOTAL_MEMORY = Math.min(alignUp((3 * TOTAL_MEMORY + 2147483648) / 4, PAGE_MULTIPLE), LIMIT); // ..., but after that, add smaller increments towards 2GB, which we cannot reach
    }
  }

  var start = Date.now();

  var replacement = Module['reallocBuffer'](TOTAL_MEMORY);
  if (!replacement || replacement.byteLength != TOTAL_MEMORY) {
    Module.printErr('Failed to grow the heap from ' + OLD_TOTAL_MEMORY + ' bytes to ' + TOTAL_MEMORY + ' bytes, not enough memory!');
    if (replacement) {
      Module.printErr('Expected to get back a buffer of size ' + TOTAL_MEMORY + ' bytes, but instead got back a buffer of size ' + replacement.byteLength);
    }
    // restore the state to before this call, we failed
    TOTAL_MEMORY = OLD_TOTAL_MEMORY;
    return false;
  }

  // everything worked

  updateGlobalBuffer(replacement);
  updateGlobalBufferViews();

  Module.printErr('enlarged memory arrays from ' + OLD_TOTAL_MEMORY + ' to ' + TOTAL_MEMORY + ', took ' + (Date.now() - start) + ' ms (has ArrayBuffer.transfer? ' + (!!ArrayBuffer.transfer) + ')');

  if (!Module["usingWasm"]) {
    Module.printErr('Warning: Enlarging memory arrays, this is not fast! ' + [OLD_TOTAL_MEMORY, TOTAL_MEMORY]);
  }


  return true;
}

var byteLength;
try {
  byteLength = Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, 'byteLength').get);
  byteLength(new ArrayBuffer(4)); // can fail on older ie
} catch(e) { // can fail on older node/v8
  byteLength = function(buffer) { return buffer.byteLength; };
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  if (typeof WebAssembly === 'object' && typeof WebAssembly.Memory === 'function') {
    assert(TOTAL_MEMORY % WASM_PAGE_SIZE === 0);
    Module['wasmMemory'] = new WebAssembly.Memory({ 'initial': TOTAL_MEMORY / WASM_PAGE_SIZE });
    buffer = Module['wasmMemory'].buffer;
  } else
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

assert(Math['imul'] && Math['fround'] && Math['clz32'] && Math['trunc'], 'this is a legacy browser, build with LEGACY_VM_SUPPORT');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}




function integrateWasmJS() {
  // wasm.js has several methods for creating the compiled code module here:
  //  * 'native-wasm' : use native WebAssembly support in the browser
  //  * 'interpret-s-expr': load s-expression code from a .wast and interpret
  //  * 'interpret-binary': load binary wasm and interpret
  //  * 'interpret-asm2wasm': load asm.js code, translate to wasm, and interpret
  //  * 'asmjs': no wasm, just load the asm.js code and use that (good for testing)
  // The method is set at compile time (BINARYEN_METHOD)
  // The method can be a comma-separated list, in which case, we will try the
  // options one by one. Some of them can fail gracefully, and then we can try
  // the next.

  // inputs

  var method = 'native-wasm';

  var wasmTextFile = 'main.wast';
  var wasmBinaryFile = 'main.wasm';
  var asmjsCodeFile = 'main.temp.asm.js';

  if (typeof Module['locateFile'] === 'function') {
    if (!isDataURI(wasmTextFile)) {
      wasmTextFile = Module['locateFile'](wasmTextFile);
    }
    if (!isDataURI(wasmBinaryFile)) {
      wasmBinaryFile = Module['locateFile'](wasmBinaryFile);
    }
    if (!isDataURI(asmjsCodeFile)) {
      asmjsCodeFile = Module['locateFile'](asmjsCodeFile);
    }
  }

  // utilities

  var wasmPageSize = 64*1024;

  var info = {
    'global': null,
    'env': null,
    'asm2wasm': { // special asm2wasm imports
      "f64-rem": function(x, y) {
        return x % y;
      },
      "debugger": function() {
        debugger;
      }
    },
    'parent': Module // Module inside wasm-js.cpp refers to wasm-js.cpp; this allows access to the outside program.
  };

  var exports = null;


  function mergeMemory(newBuffer) {
    // The wasm instance creates its memory. But static init code might have written to
    // buffer already, including the mem init file, and we must copy it over in a proper merge.
    // TODO: avoid this copy, by avoiding such static init writes
    // TODO: in shorter term, just copy up to the last static init write
    var oldBuffer = Module['buffer'];
    if (newBuffer.byteLength < oldBuffer.byteLength) {
      Module['printErr']('the new buffer in mergeMemory is smaller than the previous one. in native wasm, we should grow memory here');
    }
    var oldView = new Int8Array(oldBuffer);
    var newView = new Int8Array(newBuffer);


    newView.set(oldView);
    updateGlobalBuffer(newBuffer);
    updateGlobalBufferViews();
  }

  function fixImports(imports) {
    return imports;
  }

  function getBinary() {
    try {
      if (Module['wasmBinary']) {
        return new Uint8Array(Module['wasmBinary']);
      }
      if (Module['readBinary']) {
        return Module['readBinary'](wasmBinaryFile);
      } else {
        throw "on the web, we need the wasm binary to be preloaded and set on Module['wasmBinary']. emcc.py will do that for you when generating HTML (but not JS)";
      }
    }
    catch (err) {
      abort(err);
    }
  }

  function getBinaryPromise() {
    // if we don't have the binary yet, and have the Fetch api, use that
    // in some environments, like Electron's render process, Fetch api may be present, but have a different context than expected, let's only use it on the Web
    if (!Module['wasmBinary'] && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && typeof fetch === 'function') {
      return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
        if (!response['ok']) {
          throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
        }
        return response['arrayBuffer']();
      }).catch(function () {
        return getBinary();
      });
    }
    // Otherwise, getBinary should be able to get it synchronously
    return new Promise(function(resolve, reject) {
      resolve(getBinary());
    });
  }

  // do-method functions


  function doNativeWasm(global, env, providedBuffer) {
    if (typeof WebAssembly !== 'object') {
      Module['printErr']('no native wasm support detected');
      return false;
    }
    // prepare memory import
    if (!(Module['wasmMemory'] instanceof WebAssembly.Memory)) {
      Module['printErr']('no native wasm Memory in use');
      return false;
    }
    env['memory'] = Module['wasmMemory'];
    // Load the wasm module and create an instance of using native support in the JS engine.
    info['global'] = {
      'NaN': NaN,
      'Infinity': Infinity
    };
    info['global.Math'] = Math;
    info['env'] = env;
    // handle a generated wasm instance, receiving its exports and
    // performing other necessary setup
    function receiveInstance(instance, module) {
      exports = instance.exports;
      if (exports.memory) mergeMemory(exports.memory);
      Module['asm'] = exports;
      Module["usingWasm"] = true;
      removeRunDependency('wasm-instantiate');
    }
    addRunDependency('wasm-instantiate');

    // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
    // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
    // to any other async startup actions they are performing.
    if (Module['instantiateWasm']) {
      try {
        return Module['instantiateWasm'](info, receiveInstance);
      } catch(e) {
        Module['printErr']('Module.instantiateWasm callback failed with error: ' + e);
        return false;
      }
    }

    // Async compilation can be confusing when an error on the page overwrites Module
    // (for example, if the order of elements is wrong, and the one defining Module is
    // later), so we save Module and check it later.
    var trueModule = Module;
    function receiveInstantiatedSource(output) {
      // 'output' is a WebAssemblyInstantiatedSource object which has both the module and instance.
      // receiveInstance() will swap in the exports (to Module.asm) so they can be called
      assert(Module === trueModule, 'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?');
      trueModule = null;
      receiveInstance(output['instance'], output['module']);
    }
    function instantiateArrayBuffer(receiver) {
      getBinaryPromise().then(function(binary) {
        return WebAssembly.instantiate(binary, info);
      }).then(receiver).catch(function(reason) {
        Module['printErr']('failed to asynchronously prepare wasm: ' + reason);
        abort(reason);
      });
    }
    // Prefer streaming instantiation if available.
    if (!Module['wasmBinary'] &&
        typeof WebAssembly.instantiateStreaming === 'function' &&
        !isDataURI(wasmBinaryFile) &&
        typeof fetch === 'function') {
      WebAssembly.instantiateStreaming(fetch(wasmBinaryFile, { credentials: 'same-origin' }), info)
        .then(receiveInstantiatedSource)
        .catch(function(reason) {
          // We expect the most common failure cause to be a bad MIME type for the binary,
          // in which case falling back to ArrayBuffer instantiation should work.
          Module['printErr']('wasm streaming compile failed: ' + reason);
          Module['printErr']('falling back to ArrayBuffer instantiation');
          instantiateArrayBuffer(receiveInstantiatedSource);
        });
    } else {
      instantiateArrayBuffer(receiveInstantiatedSource);
    }
    return {}; // no exports yet; we'll fill them in later
  }


  // We may have a preloaded value in Module.asm, save it
  Module['asmPreload'] = Module['asm'];

  // Memory growth integration code

  var asmjsReallocBuffer = Module['reallocBuffer'];

  var wasmReallocBuffer = function(size) {
    var PAGE_MULTIPLE = Module["usingWasm"] ? WASM_PAGE_SIZE : ASMJS_PAGE_SIZE; // In wasm, heap size must be a multiple of 64KB. In asm.js, they need to be multiples of 16MB.
    size = alignUp(size, PAGE_MULTIPLE); // round up to wasm page size
    var old = Module['buffer'];
    var oldSize = old.byteLength;
    if (Module["usingWasm"]) {
      // native wasm support
      try {
        var result = Module['wasmMemory'].grow((size - oldSize) / wasmPageSize); // .grow() takes a delta compared to the previous size
        if (result !== (-1 | 0)) {
          // success in native wasm memory growth, get the buffer from the memory
          return Module['buffer'] = Module['wasmMemory'].buffer;
        } else {
          return null;
        }
      } catch(e) {
        console.error('Module.reallocBuffer: Attempted to grow from ' + oldSize  + ' bytes to ' + size + ' bytes, but got error: ' + e);
        return null;
      }
    }
  };

  Module['reallocBuffer'] = function(size) {
    if (finalMethod === 'asmjs') {
      return asmjsReallocBuffer(size);
    } else {
      return wasmReallocBuffer(size);
    }
  };

  // we may try more than one; this is the final one, that worked and we are using
  var finalMethod = '';

  // Provide an "asm.js function" for the application, called to "link" the asm.js module. We instantiate
  // the wasm module at that time, and it receives imports and provides exports and so forth, the app
  // doesn't need to care that it is wasm or olyfilled wasm or asm.js.

  Module['asm'] = function(global, env, providedBuffer) {
    env = fixImports(env);

    // import table
    if (!env['table']) {
      var TABLE_SIZE = Module['wasmTableSize'];
      if (TABLE_SIZE === undefined) TABLE_SIZE = 1024; // works in binaryen interpreter at least
      var MAX_TABLE_SIZE = Module['wasmMaxTableSize'];
      if (typeof WebAssembly === 'object' && typeof WebAssembly.Table === 'function') {
        if (MAX_TABLE_SIZE !== undefined) {
          env['table'] = new WebAssembly.Table({ 'initial': TABLE_SIZE, 'maximum': MAX_TABLE_SIZE, 'element': 'anyfunc' });
        } else {
          env['table'] = new WebAssembly.Table({ 'initial': TABLE_SIZE, element: 'anyfunc' });
        }
      } else {
        env['table'] = new Array(TABLE_SIZE); // works in binaryen interpreter at least
      }
      Module['wasmTable'] = env['table'];
    }

    if (!env['memoryBase']) {
      env['memoryBase'] = Module['STATIC_BASE']; // tell the memory segments where to place themselves
    }
    if (!env['tableBase']) {
      env['tableBase'] = 0; // table starts at 0 by default, in dynamic linking this will change
    }

    // try the methods. each should return the exports if it succeeded

    var exports;
    exports = doNativeWasm(global, env, providedBuffer);

    if (!exports) abort('no binaryen method succeeded. consider enabling more options, like interpreting, if you want that: https://github.com/kripken/emscripten/wiki/WebAssembly#binaryen-methods');


    return exports;
  };

  var methodHandler = Module['asm']; // note our method handler, as we may modify Module['asm'] later
}

integrateWasmJS();

// === Body ===

var ASM_CONSTS = [function() { FS.mkdir('/working1'); FS.mount(IDBFS, {}, '/working1'); FS.syncfs(true, function (err) { }); },
 function() { FS.syncfs(function (err) { }); }];

function _emscripten_asm_const_i(code) {
  return ASM_CONSTS[code]();
}




STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 5849360;
/* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__I_000101() } }, { func: function() { __GLOBAL__sub_I_main_cpp() } }, { func: function() { __GLOBAL__sub_I_bind_cpp() } }, { func: function() { __GLOBAL__sub_I_iostream_cpp() } });







var STATIC_BUMP = 5849360;
Module["STATIC_BASE"] = STATIC_BASE;
Module["STATIC_BUMP"] = STATIC_BUMP;

/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }

  function ___assert_fail(condition, filename, line, func) {
      abort('Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function']);
    }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  
  
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((setTempRet0(throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }

  function ___gxx_personality_v0() {
    }

  function ___lock() {}

  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }function ___map_file(pathname, size) {
      ___setErrNo(ERRNO_CODES.EPERM);
      return -1;
    }

  
    

  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          try {
            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
            transaction.onerror = function(e) {
              callback(this.error);
              e.preventDefault();
            };
  
            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
            var index = store.index('timestamp');
  
            index.openKeyCursor().onsuccess = function(event) {
              var cursor = event.target.result;
  
              if (!cursor) {
                return callback(null, { type: 'remote', db: db, entries: entries });
              }
  
              entries[cursor.primaryKey] = { timestamp: cursor.key };
  
              cursor.continue();
            };
          } catch (e) {
            return callback(e);
          }
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
        var flags = process["binding"]("constants");
        // Node.js 4 compatibility: it has no namespaces for constants
        if (flags["fs"]) {
          flags = flags["fs"];
        }
        NODEFS.flagsForNodeMap = {
          "1024": flags["O_APPEND"],
          "64": flags["O_CREAT"],
          "128": flags["O_EXCL"],
          "0": flags["O_RDONLY"],
          "2": flags["O_RDWR"],
          "4096": flags["O_SYNC"],
          "512": flags["O_TRUNC"],
          "1": flags["O_WRONLY"]
        };
      },bufferFrom:function (arrayBuffer) {
        // Node.js < 4.5 compatibility: Buffer.from does not support ArrayBuffer
        // Buffer.from before 4.5 was just a method inherited from Uint8Array
        // Buffer.alloc has been added with Buffer.from together, so check it instead
        return Buffer.alloc ? Buffer.from(arrayBuffer) : new Buffer(arrayBuffer);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // Node.js on Windows never represents permission bit 'x', so
            // propagate read bits to execute bits
            stat.mode = stat.mode | ((stat.mode & 292) >> 2);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsForNode:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        var newFlags = 0;
        for (var k in NODEFS.flagsForNodeMap) {
          if (flags & k) {
            newFlags |= NODEFS.flagsForNodeMap[k];
            flags ^= k;
          }
        }
  
        if (!flags) {
          return newFlags;
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsForNode(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // Node.js < 6 compatibility: node errors on 0 length reads
          if (length === 0) return 0;
          try {
            return fs.readSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },write:function (stream, buffer, offset, length, position) {
          try {
            return fs.writeSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto')['randomBytes'](1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          // Node.js compatibility: assigning on this.stack fails on Node 4 (but fixed on Node 8)
          if (this.stack) Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall195(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_stat64
      var path = SYSCALLS.getStr(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.stat, path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall220(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_getdents64
      var stream = SYSCALLS.getStreamFromFD(), dirp = SYSCALLS.get(), count = SYSCALLS.get();
      if (!stream.getdents) {
        stream.getdents = FS.readdir(stream.path);
      }
      var pos = 0;
      while (stream.getdents.length > 0 && pos + 268 <= count) {
        var id;
        var type;
        var name = stream.getdents.pop();
        if (name[0] === '.') {
          id = 1;
          type = 4; // DT_DIR
        } else {
          var child = FS.lookupNode(stream.node, name);
          id = child.id;
          type = FS.isChrdev(child.mode) ? 2 :  // DT_CHR, character device.
                 FS.isDir(child.mode) ? 4 :     // DT_DIR, directory.
                 FS.isLink(child.mode) ? 10 :   // DT_LNK, symbolic link.
                 8;                             // DT_REG, regular file.
        }
        HEAP32[((dirp + pos)>>2)]=id;
        HEAP32[(((dirp + pos)+(4))>>2)]=stream.position;
        HEAP16[(((dirp + pos)+(8))>>1)]=268;
        HEAP8[(((dirp + pos)+(10))>>0)]=type;
        stringToUTF8(name, dirp + pos + 11, 256);
        pos += 268;
      }
      return pos;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall3(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // read
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get();
      return FS.read(stream, HEAP8,buf, count);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall4(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // write
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get();
      return FS.write(stream, HEAP8,buf, count);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall91(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // munmap
      var addr = SYSCALLS.get(), len = SYSCALLS.get();
      // TODO: support unmmap'ing parts of allocations
      var info = SYSCALLS.mappings[addr];
      if (!info) return 0;
      if (len === info.len) {
        var stream = FS.getStream(info.fd);
        SYSCALLS.doMsync(addr, stream, len, info.flags)
        FS.munmap(stream);
        SYSCALLS.mappings[addr] = null;
        if (info.allocated) {
          _free(info.malloc);
        }
      }
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC);function _llvm_cttz_i32(x) {
      x = x|0;
      var ret = 0;
      ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
      if ((ret|0) < 8) return ret|0;
      ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
      if ((ret|0) < 8) return (ret + 8)|0;
      ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
      if ((ret|0) < 8) return (ret + 16)|0;
      return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
    }  

  function ___unlock() {}

   

  
  function getShiftFromSize(size) {
      switch (size) {
          case 1: return 0;
          case 2: return 1;
          case 4: return 2;
          case 8: return 3;
          default:
              throw new TypeError('Unknown type size: ' + size);
      }
    }
  
  
  
  function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }var embind_charCodes=undefined;function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }
  
  
  var awaitingDependencies={};
  
  var registeredTypes={};
  
  var typeDependencies={};
  
  
  
  
  
  
  var char_0=48;
  
  var char_9=57;function makeLegalFunctionName(name) {
      if (undefined === name) {
          return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
          return '_' + name;
      } else {
          return name;
      }
    }function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      /*jshint evil:true*/
      return new Function(
          "body",
          "return function " + name + "() {\n" +
          "    \"use strict\";" +
          "    return body.apply(this, arguments);\n" +
          "};\n"
      )(body);
    }function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
          this.name = errorName;
          this.message = message;
  
          var stack = (new Error(message)).stack;
          if (stack !== undefined) {
              this.stack = this.toString() + '\n' +
                  stack.replace(/^Error(:[^\n]*)?\n/, '');
          }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
          if (this.message === undefined) {
              return this.name;
          } else {
              return this.name + ': ' + this.message;
          }
      };
  
      return errorClass;
    }var BindingError=undefined;function throwBindingError(message) {
      throw new BindingError(message);
    }
  
  
  
  var InternalError=undefined;function throwInternalError(message) {
      throw new InternalError(message);
    }function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
          typeDependencies[type] = dependentTypes;
      });
  
      function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
              throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
          }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function(dt, i) {
          if (registeredTypes.hasOwnProperty(dt)) {
              typeConverters[i] = registeredTypes[dt];
          } else {
              unregisteredTypes.push(dt);
              if (!awaitingDependencies.hasOwnProperty(dt)) {
                  awaitingDependencies[dt] = [];
              }
              awaitingDependencies[dt].push(function() {
                  typeConverters[i] = registeredTypes[dt];
                  ++registered;
                  if (registered === unregisteredTypes.length) {
                      onComplete(typeConverters);
                  }
              });
          }
      });
      if (0 === unregisteredTypes.length) {
          onComplete(typeConverters);
      }
    }function registerType(rawType, registeredInstance, options) {
      options = options || {};
  
      if (!('argPackAdvance' in registeredInstance)) {
          throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
  
      var name = registeredInstance.name;
      if (!rawType) {
          throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
              return;
          } else {
              throwBindingError("Cannot register type '" + name + "' twice");
          }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
          var callbacks = awaitingDependencies[rawType];
          delete awaitingDependencies[rawType];
          callbacks.forEach(function(cb) {
              cb();
          });
      }
    }function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': function(pointer) {
              // TODO: if heap is fixed (like in asm.js) this could be executed outside
              var heap;
              if (size === 1) {
                  heap = HEAP8;
              } else if (size === 2) {
                  heap = HEAP16;
              } else if (size === 4) {
                  heap = HEAP32;
              } else {
                  throw new TypeError("Unknown boolean type size: " + name);
              }
              return this['fromWireType'](heap[pointer >> shift]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    }

  
  
  var emval_free_list=[];
  
  var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
          emval_handle_array[handle] = undefined;
          emval_free_list.push(handle);
      }
    }
  
  
  
  function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              ++count;
          }
      }
      return count;
    }
  
  function get_first_emval() {
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              return emval_handle_array[i];
          }
      }
      return null;
    }function init_emval() {
      Module['count_emval_handles'] = count_emval_handles;
      Module['get_first_emval'] = get_first_emval;
    }function __emval_register(value) {
  
      switch(value){
        case undefined :{ return 1; }
        case null :{ return 2; }
        case true :{ return 3; }
        case false :{ return 4; }
        default:{
          var handle = emval_free_list.length ?
              emval_free_list.pop() :
              emval_handle_array.length;
  
          emval_handle_array[handle] = {refcount: 1, value: value};
          return handle;
          }
        }
    }
  
  function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAPU32[pointer >> 2]);
    }function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(handle) {
              var rv = emval_handle_array[handle].value;
              __emval_decref(handle);
              return rv;
          },
          'toWireType': function(destructors, value) {
              return __emval_register(value);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: null, // This type does not need a destructor
  
          // TODO: do we need a deleteObject here?  write a test where
          // emval is passed into JS via an interface
      });
    }

  
  function _embind_repr(v) {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    }
  
  function floatReadValueFromPointer(name, shift) {
      switch (shift) {
          case 2: return function(pointer) {
              return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
          case 3: return function(pointer) {
              return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
          default:
              throw new TypeError("Unknown float type: " + name);
      }
    }function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following if() and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              return value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': floatReadValueFromPointer(name, shift),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  
  function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
          case 0: return signed ?
              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
          case 1: return signed ?
              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
          case 2: return signed ?
              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
          maxRange = 4294967295;
      }
  
      var shift = getShiftFromSize(size);
  
      var fromWireType = function(value) {
          return value;
      };
  
      if (minRange === 0) {
          var bitshift = 32 - 8*size;
          fromWireType = function(value) {
              return (value << bitshift) >>> bitshift;
          };
      }
  
      var isUnsignedType = (name.indexOf('unsigned') != -1);
  
      registerType(primitiveType, {
          name: name,
          'fromWireType': fromWireType,
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following two if()s and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              if (value < minRange || value > maxRange) {
                  throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
              }
              return isUnsignedType ? (value >>> 0) : (value | 0);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
          Int8Array,
          Uint8Array,
          Int16Array,
          Uint16Array,
          Int32Array,
          Uint32Array,
          Float32Array,
          Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
          handle = handle >> 2;
          var heap = HEAPU32;
          var size = heap[handle]; // in elements
          var data = heap[handle + 1]; // byte offset into emscripten heap
          return new TA(heap['buffer'], data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': decodeMemoryView,
          'argPackAdvance': 8,
          'readValueFromPointer': decodeMemoryView,
      }, {
          ignoreDuplicateRegistrations: true,
      });
    }

  function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              if (value instanceof ArrayBuffer) {
                  value = new Uint8Array(value);
              }
  
              function getTAElement(ta, index) {
                  return ta[index];
              }
              function getStringElement(string, index) {
                  return string.charCodeAt(index);
              }
              var getElement;
              if (value instanceof Uint8Array) {
                  getElement = getTAElement;
              } else if (value instanceof Uint8ClampedArray) {
                  getElement = getTAElement;
              } else if (value instanceof Int8Array) {
                  getElement = getTAElement;
              } else if (typeof value === 'string') {
                  getElement = getStringElement;
              } else {
                  throwBindingError('Cannot pass non-string to std::string');
              }
  
              // assumes 4-byte alignment
              var length = value.length;
              var ptr = _malloc(4 + length);
              HEAPU32[ptr >> 2] = length;
              for (var i = 0; i < length; ++i) {
                  var charCode = getElement(value, i);
                  if (charCode > 255) {
                      _free(ptr);
                      throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                  }
                  HEAPU8[ptr + 4 + i] = charCode;
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_std_wstring(rawType, charSize, name) {
      // nb. do not cache HEAPU16 and HEAPU32, they may be destroyed by enlargeMemory().
      name = readLatin1String(name);
      var getHeap, shift;
      if (charSize === 2) {
          getHeap = function() { return HEAPU16; };
          shift = 1;
      } else if (charSize === 4) {
          getHeap = function() { return HEAPU32; };
          shift = 2;
      }
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var HEAP = getHeap();
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              var start = (value + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAP[start + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              // assumes 4-byte alignment
              var HEAP = getHeap();
              var length = value.length;
              var ptr = _malloc(4 + length * charSize);
              HEAPU32[ptr >> 2] = length;
              var start = (ptr + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  HEAP[start + i] = value.charCodeAt(i);
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name: name,
          'argPackAdvance': 0,
          'fromWireType': function() {
              return undefined;
          },
          'toWireType': function(destructors, o) {
              // TODO: assert if anything else is given?
              return undefined;
          },
      });
    }

  function _abort() {
      Module['abort']();
    }

   

   

  var _emscripten_asm_const_int=true;

  
  
   
  
   function _longjmp(env, value) {
      Module['setThrew'](env, value || 1);
      throw 'longjmp';
    }function _emscripten_longjmp(env, value) {
      _longjmp(env, value);
    }

  
  
  var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === Module['canvas'] ||
                                document['mozPointerLockElement'] === Module['canvas'] ||
                                document['webkitPointerLockElement'] === Module['canvas'] ||
                                document['msPointerLockElement'] === Module['canvas'];
        }
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
                Module['canvas'].requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = document['exitFullscreen'] ||
                                    document['cancelFullScreen'] ||
                                    document['mozCancelFullScreen'] ||
                                    document['msExitFullscreen'] ||
                                    document['webkitCancelFullScreen'] ||
                                    function() {};
            canvas.exitFullscreen = canvas.exitFullscreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) Browser.setFullscreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);
          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? function() { canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullscreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullscreen();
        }
      },requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
          Module.printErr('Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.');
          Browser.requestFullScreen = function(lockPointer, resizeCanvas, vrDevice) {
            return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
          }
          return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
            Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
            Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
            // just add the mouse delta to the current absolut mouse position
            // FIXME: ideally this should be clamped against the canvas size and zero
            Browser.mouseX += Browser.mouseMovementX;
            Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
        Module['readAsync'](url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (dep) removeRunDependency(dep);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (dep) addRunDependency(dep);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (typeof setImmediate === 'undefined') {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = 'setimmediate';
          function Browser_setImmediate_messageHandler(event) {
            // When called in current thread or Worker, the main loop ID is structured slightly different to accommodate for --proxy-to-worker runtime listening to Worker events,
            // so check for both cases.
            if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          addEventListener("message", Browser_setImmediate_messageHandler, true);
          setImmediate = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            if (ENVIRONMENT_IS_WORKER) {
              if (Module['setImmediates'] === undefined) Module['setImmediates'] = [];
              Module['setImmediates'].push(func);
              postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
            } else postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          setImmediate(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }
  
  function _emscripten_get_now() { abort() }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var browserIterationFunc;
      if (typeof arg !== 'undefined') {
        browserIterationFunc = function() {
          Module['dynCall_vi'](func, arg);
        };
      } else {
        browserIterationFunc = function() {
          Module['dynCall_v'](func);
        };
      }
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
          
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
        checkStackCookie();
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  
  
  
  
  var _environ=STATICTOP; STATICTOP += 16;;var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C.UTF-8';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = staticAlloc(TOTAL_ENV_SIZE);
        envPtr = staticAlloc(MAX_ENV_VALUES * 4);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocateUTF8(ENV[name]);
      return _getenv.ret;
    }

  
  var GL={counter:1,lastError:0,buffers:[],mappedBuffers:{},programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],contexts:[],currentContext:null,offscreenCanvases:{},timerQueriesEXT:[],queries:[],samplers:[],transformFeedbacks:[],syncs:[],byteSizeByTypeRoot:5120,byteSizeByType:[1,1,2,2,4,4,4,2,3,4,8],programInfos:{},stringCache:{},stringiCache:{},tempFixedLengthArray:[],packAlignment:4,unpackAlignment:4,init:function () {
        GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i+1);
        }
  
        // For functions such as glDrawBuffers, glInvalidateFramebuffer and glInvalidateSubFramebuffer that need to pass a short array to the WebGL API,
        // create a set of short fixed-length arrays to avoid having to generate any garbage when calling those functions.
        for (var i = 0; i < 32; i++) {
          GL.tempFixedLengthArray.push(new Array(i));
        }
      },recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function (table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MINI_TEMP_BUFFER_SIZE:256,miniTempBuffer:null,miniTempBufferViews:[0],getSource:function (shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var frag;
          if (length) {
            var len = HEAP32[(((length)+(i*4))>>2)];
            if (len < 0) {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
            } else {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)], len);
            }
          } else {
            frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
          }
          source += frag;
        }
        return source;
      },createContext:function (canvas, webGLContextAttributes) {
        if (typeof webGLContextAttributes['majorVersion'] === 'undefined' && typeof webGLContextAttributes['minorVersion'] === 'undefined') {
          // If caller did not specify a context, initialize the best one that is possibly available.
          // To explicitly create a WebGL 1 or a WebGL 2 context, call this function with a specific
          // majorVersion set.
          if (typeof WebGL2RenderingContext !== 'undefined') webGLContextAttributes['majorVersion'] = 2;
          else webGLContextAttributes['majorVersion'] = 1;
          webGLContextAttributes['minorVersion'] = 0;
        }
  
  
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
          try {
            if (webGLContextAttributes['majorVersion'] == 1 && webGLContextAttributes['minorVersion'] == 0) {
              ctx = canvas.getContext("webgl", webGLContextAttributes) || canvas.getContext("experimental-webgl", webGLContextAttributes);
            } else if (webGLContextAttributes['majorVersion'] == 2 && webGLContextAttributes['minorVersion'] == 0) {
              ctx = canvas.getContext("webgl2", webGLContextAttributes);
            } else {
              throw 'Unsupported WebGL context version ' + majorVersion + '.' + minorVersion + '!'
            }
          } finally {
            canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e, JSON.stringify(webGLContextAttributes)]);
          return 0;
        }
  
        if (!ctx) return 0;
        var context = GL.registerContext(ctx, webGLContextAttributes);
        return context;
      },registerContext:function (ctx, webGLContextAttributes) {
        var handle = GL.getNewId(GL.contexts);
        var context = {
          handle: handle,
          attributes: webGLContextAttributes,
          version: webGLContextAttributes['majorVersion'],
          GLctx: ctx
        };
  
        // BUG: Workaround Chrome WebGL 2 issue: the first shipped versions of WebGL 2 in Chrome did not actually implement the new WebGL 2 functions.
        //      Those are supported only in Chrome 58 and newer.
        function getChromeVersion() {
          var raw = navigator.userAgent.match(/Chrom(e|ium)\/([0-9]+)\./);
          return raw ? parseInt(raw[2], 10) : false;
        }
        context.supportsWebGL2EntryPoints = (context.version >= 2) && (getChromeVersion() === false || getChromeVersion() >= 58);
  
        // Store the created context object so that we can access the context given a canvas without having to pass the parameters again.
        if (ctx.canvas) ctx.canvas.GLctxObject = context;
        GL.contexts[handle] = context;
        if (typeof webGLContextAttributes['enableExtensionsByDefault'] === 'undefined' || webGLContextAttributes['enableExtensionsByDefault']) {
          GL.initExtensions(context);
        }
        return handle;
      },makeContextCurrent:function (contextHandle) {
        var context = GL.contexts[contextHandle];
        if (!context) return false;
        GLctx = Module.ctx = context.GLctx; // Active WebGL context object.
        GL.currentContext = context; // Active Emscripten GL layer context object.
        return true;
      },getContext:function (contextHandle) {
        return GL.contexts[contextHandle];
      },deleteContext:function (contextHandle) {
        if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = null;
        if (typeof JSEvents === 'object') JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas); // Release all JS event handlers on the DOM element that the GL context is associated with since the context is now deleted.
        if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined; // Make sure the canvas object no longer refers to the context object so there are no GC surprises.
        GL.contexts[contextHandle] = null;
      },initExtensions:function (context) {
        // If this function is called without a specific context object, init the extensions of the currently active context.
        if (!context) context = GL.currentContext;
  
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
  
        var GLctx = context.GLctx;
  
        context.maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist.
  
        if (context.version < 2) {
          // Extension available from Firefox 26 and Google Chrome 30
          var instancedArraysExt = GLctx.getExtension('ANGLE_instanced_arrays');
          if (instancedArraysExt) {
            GLctx['vertexAttribDivisor'] = function(index, divisor) { instancedArraysExt['vertexAttribDivisorANGLE'](index, divisor); };
            GLctx['drawArraysInstanced'] = function(mode, first, count, primcount) { instancedArraysExt['drawArraysInstancedANGLE'](mode, first, count, primcount); };
            GLctx['drawElementsInstanced'] = function(mode, count, type, indices, primcount) { instancedArraysExt['drawElementsInstancedANGLE'](mode, count, type, indices, primcount); };
          }
  
          // Extension available from Firefox 25 and WebKit
          var vaoExt = GLctx.getExtension('OES_vertex_array_object');
          if (vaoExt) {
            GLctx['createVertexArray'] = function() { return vaoExt['createVertexArrayOES'](); };
            GLctx['deleteVertexArray'] = function(vao) { vaoExt['deleteVertexArrayOES'](vao); };
            GLctx['bindVertexArray'] = function(vao) { vaoExt['bindVertexArrayOES'](vao); };
            GLctx['isVertexArray'] = function(vao) { return vaoExt['isVertexArrayOES'](vao); };
          }
  
          var drawBuffersExt = GLctx.getExtension('WEBGL_draw_buffers');
          if (drawBuffersExt) {
            GLctx['drawBuffers'] = function(n, bufs) { drawBuffersExt['drawBuffersWEBGL'](n, bufs); };
          }
        }
  
        GLctx.disjointTimerQueryExt = GLctx.getExtension("EXT_disjoint_timer_query");
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "ANGLE_instanced_arrays",
                                               "OES_texture_float_linear", "OES_texture_half_float_linear", "WEBGL_compressed_texture_atc",
                                               "WEBKIT_WEBGL_compressed_texture_pvrtc", "WEBGL_compressed_texture_pvrtc",
                                               "EXT_color_buffer_half_float", "WEBGL_color_buffer_float", "EXT_frag_depth", "EXT_sRGB",
                                               "WEBGL_draw_buffers", "WEBGL_shared_resources", "EXT_shader_texture_lod", "EXT_color_buffer_float"];
  
        function shouldEnableAutomatically(extension) {
          var ret = false;
          automaticallyEnabledExtensions.forEach(function(include) {
            if (extension.indexOf(include) != -1) {
              ret = true;
            }
          });
          return ret;
        }
  
        var exts = GLctx.getSupportedExtensions();
        if (exts && exts.length > 0) {
          GLctx.getSupportedExtensions().forEach(function(ext) {
            if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
              GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
            }
          });
        }
      },populateUniformTable:function (program) {
        var p = GL.programs[program];
        GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1, // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
          maxUniformBlockNameLength: -1 // Lazily computed as well
        };
  
        var ptable = GL.programInfos[program];
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, GLctx.ACTIVE_UNIFORMS);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // Strip off any trailing array specifier we might have got, e.g. "[0]".
          if (name.indexOf(']', name.length-1) !== -1) {
            var ls = name.lastIndexOf('[');
            name = name.slice(0, ls);
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          if (loc != null)
          {
            var id = GL.getNewId(GL.uniforms);
            utable[name] = [u.size, id];
            GL.uniforms[id] = loc;
  
            for (var j = 1; j < u.size; ++j) {
              var n = name + '['+j+']';
              loc = GLctx.getUniformLocation(p, n);
              id = GL.getNewId(GL.uniforms);
  
              GL.uniforms[id] = loc;
            }
          }
        }
      }};function _glActiveTexture(x0) { GLctx['activeTexture'](x0) }

  function _glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _glBindAttribLocation(program, index, name) {
      name = Pointer_stringify(name);
      GLctx.bindAttribLocation(GL.programs[program], index, name);
    }

  function _glBindBuffer(target, buffer) {
      var bufferObj = buffer ? GL.buffers[buffer] : null;
  
  
      if (target == 0x88EB /*GL_PIXEL_PACK_BUFFER*/) {
        // In WebGL 2 glReadPixels entry point, we need to use a different WebGL 2 API function call when a buffer is bound to
        // GL_PIXEL_PACK_BUFFER_BINDING point, so must keep track whether that binding point is non-null to know what is
        // the proper API function to call.
        GLctx.currentPixelPackBufferBinding = buffer;
      } else if (target == 0x88EC /*GL_PIXEL_UNPACK_BUFFER*/) {
        // In WebGL 2 glTexImage2D, glTexSubImage2D, glTexImage3D and glTexSubImage3D entry points, we need to use a different WebGL 2 API function
        // call when a buffer is bound to GL_PIXEL_UNPACK_BUFFER_BINDING point, so must keep track whether that binding point is non-null to know what
        // is the proper API function to call.
        GLctx.currentPixelUnpackBufferBinding = buffer;
      }
      GLctx.bindBuffer(target, bufferObj);
    }

  function _glBindTexture(target, texture) {
      GLctx.bindTexture(target, texture ? GL.textures[texture] : null);
    }

  function _glBindVertexArray(vao) {
      GLctx['bindVertexArray'](GL.vaos[vao]);
    }

  function _glBlendEquation(x0) { GLctx['blendEquation'](x0) }

  function _glBlendEquationSeparate(x0, x1) { GLctx['blendEquationSeparate'](x0, x1) }

  function _glBlendFunc(x0, x1) { GLctx['blendFunc'](x0, x1) }

  function _glBlendFuncSeparate(x0, x1, x2, x3) { GLctx['blendFuncSeparate'](x0, x1, x2, x3) }

  function _glBufferData(target, size, data, usage) {
      if (!data) {
        GLctx.bufferData(target, size, usage);
      } else {
        if (GL.currentContext.supportsWebGL2EntryPoints) { // WebGL 2 provides new garbage-free entry points to call to WebGL. Use those always when possible.
          GLctx.bufferData(target, HEAPU8, usage, data, size);
          return;
        }
        GLctx.bufferData(target, HEAPU8.subarray(data, data+size), usage);
      }
    }

  function _glClear(x0) { GLctx['clear'](x0) }

  function _glClearColor(x0, x1, x2, x3) { GLctx['clearColor'](x0, x1, x2, x3) }

  function _glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

  function _glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }

  function _glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

  function _glDeleteProgram(id) {
      if (!id) return;
      var program = GL.programs[id];
      if (!program) { // glDeleteProgram actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[id] = null;
      GL.programInfos[id] = null;
    }

  function _glDeleteShader(id) {
      if (!id) return;
      var shader = GL.shaders[id];
      if (!shader) { // glDeleteShader actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteShader(shader);
      GL.shaders[id] = null;
    }

  function _glDeleteVertexArrays(n, vaos) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((vaos)+(i*4))>>2)];
        GLctx['deleteVertexArray'](GL.vaos[id]);
        GL.vaos[id] = null;
      }
    }

  function _glDepthFunc(x0) { GLctx['depthFunc'](x0) }

  function _glDisable(x0) { GLctx['disable'](x0) }

  function _glDrawElements(mode, count, type, indices) {
  
      GLctx.drawElements(mode, count, type, indices);
  
    }

  function _glEnable(x0) { GLctx['enable'](x0) }

  function _glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }

  function _glGenBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var buffer = GLctx.createBuffer();
        if (!buffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((buffers)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.buffers);
        buffer.name = id;
        GL.buffers[id] = buffer;
        HEAP32[(((buffers)+(i*4))>>2)]=id;
      }
    }

  function _glGenTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var texture = GLctx.createTexture();
        if (!texture) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */); // GLES + EGL specs don't specify what should happen here, so best to issue an error and create IDs with 0.
          while(i < n) HEAP32[(((textures)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.textures);
        texture.name = id;
        GL.textures[id] = texture;
        HEAP32[(((textures)+(i*4))>>2)]=id;
      }
    }

  function _glGenVertexArrays(n, arrays) {
  
      for (var i = 0; i < n; i++) {
        var vao = GLctx['createVertexArray']();
        if (!vao) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((arrays)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.vaos);
        vao.name = id;
        GL.vaos[id] = vao;
        HEAP32[(((arrays)+(i*4))>>2)]=id;
      }
    }

  function _glGenerateMipmap(x0) { GLctx['generateMipmap'](x0) }

  function _glGetAttribLocation(program, name) {
      program = GL.programs[program];
      name = Pointer_stringify(name);
      return GLctx.getAttribLocation(program, name);
    }

  
  function emscriptenWebGLGet(name_, p, type) {
      // Guard against user passing a null pointer.
      // Note that GLES2 spec does not say anything about how passing a null pointer should be treated.
      // Testing on desktop core GL 3, the application crashes on glGetIntegerv to a null pointer, but
      // better to report an error instead of doing anything random.
      if (!p) {
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var ret = undefined;
      switch(name_) { // Handle a few trivial GLES values
        case 0x8DFA: // GL_SHADER_COMPILER
          ret = 1;
          break;
        case 0x8DF8: // GL_SHADER_BINARY_FORMATS
          if (type !== 'Integer' && type !== 'Integer64') {
            GL.recordError(0x0500); // GL_INVALID_ENUM
          }
          return; // Do not write anything to the out pointer, since no binary formats are supported.
        case 0x87FE: // GL_NUM_PROGRAM_BINARY_FORMATS
        case 0x8DF9: // GL_NUM_SHADER_BINARY_FORMATS
          ret = 0;
          break;
        case 0x86A2: // GL_NUM_COMPRESSED_TEXTURE_FORMATS
          // WebGL doesn't have GL_NUM_COMPRESSED_TEXTURE_FORMATS (it's obsolete since GL_COMPRESSED_TEXTURE_FORMATS returns a JS array that can be queried for length),
          // so implement it ourselves to allow C++ GLES2 code get the length.
          var formats = GLctx.getParameter(0x86A3 /*GL_COMPRESSED_TEXTURE_FORMATS*/);
          ret = formats.length;
          break;
        case 0x821D: // GL_NUM_EXTENSIONS
          if (GLctx.canvas.GLctxObject.version < 2) {
            GL.recordError(0x0502 /* GL_INVALID_OPERATION */); // Calling GLES3/WebGL2 function with a GLES2/WebGL1 context
            return;
          }
          var exts = GLctx.getSupportedExtensions();
          ret = 2*exts.length; // each extension is duplicated, first in unprefixed WebGL form, and then a second time with "GL_" prefix.
          break;
        case 0x821B: // GL_MAJOR_VERSION
        case 0x821C: // GL_MINOR_VERSION
          if (GLctx.canvas.GLctxObject.version < 2) {
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return;
          }
          ret = name_ == 0x821B ? 3 : 0; // return version 3.0
          break;
      }
  
      if (ret === undefined) {
        var result = GLctx.getParameter(name_);
        switch (typeof(result)) {
          case "number":
            ret = result;
            break;
          case "boolean":
            ret = result ? 1 : 0;
            break;
          case "string":
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return;
          case "object":
            if (result === null) {
              // null is a valid result for some (e.g., which buffer is bound - perhaps nothing is bound), but otherwise
              // can mean an invalid name_, which we need to report as an error
              switch(name_) {
                case 0x8894: // ARRAY_BUFFER_BINDING
                case 0x8B8D: // CURRENT_PROGRAM
                case 0x8895: // ELEMENT_ARRAY_BUFFER_BINDING
                case 0x8CA6: // FRAMEBUFFER_BINDING
                case 0x8CA7: // RENDERBUFFER_BINDING
                case 0x8069: // TEXTURE_BINDING_2D
                case 0x85B5: // GL_VERTEX_ARRAY_BINDING
                case 0x8919: // GL_SAMPLER_BINDING
                case 0x8E25: // GL_TRANSFORM_FEEDBACK_BINDING
                case 0x8514: { // TEXTURE_BINDING_CUBE_MAP
                  ret = 0;
                  break;
                }
                default: {
                  GL.recordError(0x0500); // GL_INVALID_ENUM
                  return;
                }
              }
            } else if (result instanceof Float32Array ||
                       result instanceof Uint32Array ||
                       result instanceof Int32Array ||
                       result instanceof Array) {
              for (var i = 0; i < result.length; ++i) {
                switch (type) {
                  case 'Integer': HEAP32[(((p)+(i*4))>>2)]=result[i];   break;
                  case 'Float':   HEAPF32[(((p)+(i*4))>>2)]=result[i]; break;
                  case 'Boolean': HEAP8[(((p)+(i))>>0)]=result[i] ? 1 : 0;    break;
                  default: throw 'internal glGet error, bad type: ' + type;
                }
              }
              return;
            } else if (result instanceof WebGLBuffer ||
                       result instanceof WebGLProgram ||
                       result instanceof WebGLFramebuffer ||
                       result instanceof WebGLRenderbuffer ||
                       result instanceof WebGLQuery ||
                       result instanceof WebGLSampler ||
                       result instanceof WebGLSync ||
                       result instanceof WebGLTransformFeedback ||
                       result instanceof WebGLVertexArrayObject ||
                       result instanceof WebGLTexture) {
              ret = result.name | 0;
            } else {
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
            }
            break;
          default:
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return;
        }
      }
  
      switch (type) {
        case 'Integer64': (tempI64 = [ret>>>0,(tempDouble=ret,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((p)>>2)]=tempI64[0],HEAP32[(((p)+(4))>>2)]=tempI64[1]);    break;
        case 'Integer': HEAP32[((p)>>2)]=ret;    break;
        case 'Float':   HEAPF32[((p)>>2)]=ret;  break;
        case 'Boolean': HEAP8[((p)>>0)]=ret ? 1 : 0; break;
        default: throw 'internal glGet error, bad type: ' + type;
      }
    }function _glGetIntegerv(name_, p) {
      emscriptenWebGLGet(name_, p, 'Integer');
    }

  function _glGetProgramiv(program, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      if (program >= GL.counter) {
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        return;
      }
  
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getProgramInfoLog(GL.programs[program]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        HEAP32[((p)>>2)]=ptable.maxUniformLength;
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        if (ptable.maxAttributeLength == -1) {
          program = GL.programs[program];
          var numAttribs = GLctx.getProgramParameter(program, GLctx.ACTIVE_ATTRIBUTES);
          ptable.maxAttributeLength = 0; // Spec says if there are no active attribs, 0 must be returned.
          for (var i = 0; i < numAttribs; ++i) {
            var activeAttrib = GLctx.getActiveAttrib(program, i);
            ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxAttributeLength;
      } else if (pname == 0x8A35 /* GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH */) {
        if (ptable.maxUniformBlockNameLength == -1) {
          program = GL.programs[program];
          var numBlocks = GLctx.getProgramParameter(program, GLctx.ACTIVE_UNIFORM_BLOCKS);
          ptable.maxUniformBlockNameLength = 0;
          for (var i = 0; i < numBlocks; ++i) {
            var activeBlockName = GLctx.getActiveUniformBlockName(program, i);
            ptable.maxUniformBlockNameLength = Math.max(ptable.maxUniformBlockNameLength, activeBlockName.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxUniformBlockNameLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getProgramParameter(GL.programs[program], pname);
      }
    }

  function _glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      if (log === null) log = '(unknown error)';
      if (maxLength > 0 && infoLog) {
        var numBytesWrittenExclNull = stringToUTF8(log, infoLog, maxLength);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _glGetShaderiv(shader, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B88) { // GL_SHADER_SOURCE_LENGTH
        var source = GLctx.getShaderSource(GL.shaders[shader]);
        var sourceLength = (source === null || source.length == 0) ? 0 : source.length + 1;
        HEAP32[((p)>>2)]=sourceLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }

  function _glGetUniformLocation(program, name) {
      name = Pointer_stringify(name);
  
      var arrayOffset = 0;
      // If user passed an array accessor "[index]", parse the array index off the accessor.
      if (name.indexOf(']', name.length-1) !== -1) {
        var ls = name.lastIndexOf('[');
        var arrayIndex = name.slice(ls+1, -1);
        if (arrayIndex.length > 0) {
          arrayOffset = parseInt(arrayIndex);
          if (arrayOffset < 0) {
            return -1;
          }
        }
        name = name.slice(0, ls);
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        return -1;
      }
      var utable = ptable.uniforms;
      var uniformInfo = utable[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
      if (uniformInfo && arrayOffset < uniformInfo[0]) { // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
        return uniformInfo[1]+arrayOffset;
      } else {
        return -1;
      }
    }

  function _glIsEnabled(x0) { return GLctx['isEnabled'](x0) }

  function _glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.programInfos[program] = null; // uniforms no longer keep the same names after linking
      GL.populateUniformTable(program);
    }

  function _glPixelStorei(pname, param) {
      if (pname == 0x0D05 /* GL_PACK_ALIGNMENT */) {
        GL.packAlignment = param;
      } else if (pname == 0x0cf5 /* GL_UNPACK_ALIGNMENT */) {
        GL.unpackAlignment = param;
      }
      GLctx.pixelStorei(pname, param);
    }

  function _glScissor(x0, x1, x2, x3) { GLctx['scissor'](x0, x1, x2, x3) }

  function _glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
  
  
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  
  
  function emscriptenWebGLComputeImageSize(width, height, sizePerPixel, alignment) {
      function roundedToNextMultipleOf(x, y) {
        return Math.floor((x + y - 1) / y) * y
      }
      var plainRowSize = width * sizePerPixel;
      var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
      return (height <= 0) ? 0 :
               ((height - 1) * alignedRowSize + plainRowSize);
    }function emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) {
      var sizePerPixel;
      var numChannels;
      switch(format) {
        case 0x1906 /* GL_ALPHA */:
        case 0x1909 /* GL_LUMINANCE */:
        case 0x1902 /* GL_DEPTH_COMPONENT */:
        case 0x1903 /* GL_RED */:
        case 0x8D94 /* GL_RED_INTEGER */:
          numChannels = 1;
          break;
        case 0x190A /* GL_LUMINANCE_ALPHA */:
        case 0x8227 /* GL_RG */:
        case 0x8228 /* GL_RG_INTEGER*/:
          numChannels = 2;
          break;
        case 0x1907 /* GL_RGB */:
        case 0x8C40 /* GL_SRGB_EXT */:
        case 0x8D98 /* GL_RGB_INTEGER */:
          numChannels = 3;
          break;
        case 0x1908 /* GL_RGBA */:
        case 0x8C42 /* GL_SRGB_ALPHA_EXT */:
        case 0x8D99 /* GL_RGBA_INTEGER */:
          numChannels = 4;
          break;
        default:
          GL.recordError(0x0500); // GL_INVALID_ENUM
          return null;
      }
      switch (type) {
        case 0x1401 /* GL_UNSIGNED_BYTE */:
        case 0x1400 /* GL_BYTE */:
          sizePerPixel = numChannels*1;
          break;
        case 0x1403 /* GL_UNSIGNED_SHORT */:
        case 0x8D61 /* GL_HALF_FLOAT_OES */:
        case 0x140B /* GL_HALF_FLOAT */:
        case 0x1402 /* GL_SHORT */:
          sizePerPixel = numChannels*2;
          break;
        case 0x1405 /* GL_UNSIGNED_INT */:
        case 0x1406 /* GL_FLOAT */:
        case 0x1404 /* GL_INT */:
          sizePerPixel = numChannels*4;
          break;
        case 0x84FA /* GL_UNSIGNED_INT_24_8_WEBGL/GL_UNSIGNED_INT_24_8 */:
        case 0x8C3E /* GL_UNSIGNED_INT_5_9_9_9_REV */:
        case 0x8368 /* GL_UNSIGNED_INT_2_10_10_10_REV */:
        case 0x8C3B /* GL_UNSIGNED_INT_10F_11F_11F_REV */:
        case 0x84FA /* GL_UNSIGNED_INT_24_8 */:
          sizePerPixel = 4;
          break;
        case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
        case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
        case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
          sizePerPixel = 2;
          break;
        default:
          GL.recordError(0x0500); // GL_INVALID_ENUM
          return null;
      }
      var bytes = emscriptenWebGLComputeImageSize(width, height, sizePerPixel, GL.unpackAlignment);
      switch(type) {
        case 0x1400 /* GL_BYTE */:
          return HEAP8.subarray((pixels),(pixels+bytes));
        case 0x1401 /* GL_UNSIGNED_BYTE */:
          return HEAPU8.subarray((pixels),(pixels+bytes));
        case 0x1402 /* GL_SHORT */:
          return HEAP16.subarray((pixels)>>1,(pixels+bytes)>>1);
        case 0x1404 /* GL_INT */:
          return HEAP32.subarray((pixels)>>2,(pixels+bytes)>>2);
        case 0x1406 /* GL_FLOAT */:
          return HEAPF32.subarray((pixels)>>2,(pixels+bytes)>>2);
        case 0x1405 /* GL_UNSIGNED_INT */:
        case 0x84FA /* GL_UNSIGNED_INT_24_8_WEBGL/GL_UNSIGNED_INT_24_8 */:
        case 0x8C3E /* GL_UNSIGNED_INT_5_9_9_9_REV */:
        case 0x8368 /* GL_UNSIGNED_INT_2_10_10_10_REV */:
        case 0x8C3B /* GL_UNSIGNED_INT_10F_11F_11F_REV */:
        case 0x84FA /* GL_UNSIGNED_INT_24_8 */:
          return HEAPU32.subarray((pixels)>>2,(pixels+bytes)>>2);
        case 0x1403 /* GL_UNSIGNED_SHORT */:
        case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
        case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
        case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
        case 0x8D61 /* GL_HALF_FLOAT_OES */:
        case 0x140B /* GL_HALF_FLOAT */:
          return HEAPU16.subarray((pixels)>>1,(pixels+bytes)>>1);
        default:
          GL.recordError(0x0500); // GL_INVALID_ENUM
          return null;
      }
    }
  
  function emscriptenWebGLGetHeapForType(type) {
      switch(type) {
        case 0x1400 /* GL_BYTE */:
          return HEAP8;
        case 0x1401 /* GL_UNSIGNED_BYTE */:
          return HEAPU8;
        case 0x1402 /* GL_SHORT */:
          return HEAP16;
        case 0x1403 /* GL_UNSIGNED_SHORT */:
        case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
        case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
        case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
        case 0x8D61 /* GL_HALF_FLOAT_OES */:
        case 0x140B /* GL_HALF_FLOAT */:
          return HEAPU16;
        case 0x1404 /* GL_INT */:
          return HEAP32;
        case 0x1405 /* GL_UNSIGNED_INT */:
        case 0x84FA /* GL_UNSIGNED_INT_24_8_WEBGL/GL_UNSIGNED_INT_24_8 */:
        case 0x8C3E /* GL_UNSIGNED_INT_5_9_9_9_REV */:
        case 0x8368 /* GL_UNSIGNED_INT_2_10_10_10_REV */:
        case 0x8C3B /* GL_UNSIGNED_INT_10F_11F_11F_REV */:
        case 0x84FA /* GL_UNSIGNED_INT_24_8 */:
          return HEAPU32;
        case 0x1406 /* GL_FLOAT */:
          return HEAPF32;
        default:
          return null;
      }
    }
  
  function emscriptenWebGLGetShiftForType(type) {
      switch(type) {
        case 0x1400 /* GL_BYTE */:
        case 0x1401 /* GL_UNSIGNED_BYTE */:
          return 0;
        case 0x1402 /* GL_SHORT */:
        case 0x1403 /* GL_UNSIGNED_SHORT */:
        case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
        case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
        case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
        case 0x8D61 /* GL_HALF_FLOAT_OES */:
        case 0x140B /* GL_HALF_FLOAT */:
          return 1;
        case 0x1404 /* GL_INT */:
        case 0x1406 /* GL_FLOAT */:
        case 0x1405 /* GL_UNSIGNED_INT */:
        case 0x84FA /* GL_UNSIGNED_INT_24_8_WEBGL/GL_UNSIGNED_INT_24_8 */:
        case 0x8C3E /* GL_UNSIGNED_INT_5_9_9_9_REV */:
        case 0x8368 /* GL_UNSIGNED_INT_2_10_10_10_REV */:
        case 0x8C3B /* GL_UNSIGNED_INT_10F_11F_11F_REV */:
        case 0x84FA /* GL_UNSIGNED_INT_24_8 */:
          return 2;
        default:
          return 0;
      }
    }function _glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
      if (GL.currentContext.supportsWebGL2EntryPoints) {
        // WebGL 2 provides new garbage-free entry points to call to WebGL. Use those always when possible.
        if (GLctx.currentPixelUnpackBufferBinding) {
          GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels);
        } else if (pixels != 0) {
          GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, emscriptenWebGLGetHeapForType(type), pixels >> emscriptenWebGLGetShiftForType(type));
        } else {
          GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, null);
        }
        return;
      }
  
      var pixelData = null;
      if (pixels) pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat);
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixelData);
    }

  function _glTexParameteri(x0, x1, x2) { GLctx['texParameteri'](x0, x1, x2) }

  function _glUniform1i(location, v0) {
      GLctx.uniform1i(GL.uniforms[location], v0);
    }

  function _glUniform3fv(location, count, value) {
  
      if (GL.currentContext.supportsWebGL2EntryPoints) { // WebGL 2 provides new garbage-free entry points to call to WebGL. Use those always when possible.
        GLctx.uniform3fv(GL.uniforms[location], HEAPF32, value>>2, count*3);
        return;
      }
  
      var view;
      if (3*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[3*count-1];
        for (var i = 0; i < 3*count; i += 3) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*12)>>2);
      }
      GLctx.uniform3fv(GL.uniforms[location], view);
    }

  function _glUniformMatrix4fv(location, count, transpose, value) {
  
      if (GL.currentContext.supportsWebGL2EntryPoints) { // WebGL 2 provides new garbage-free entry points to call to WebGL. Use those always when possible.
        GLctx.uniformMatrix4fv(GL.uniforms[location], !!transpose, HEAPF32, value>>2, count*16);
        return;
      }
  
      var view;
      if (16*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[16*count-1];
        for (var i = 0; i < 16*count; i += 16) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
          view[i+4] = HEAPF32[(((value)+(4*i+16))>>2)];
          view[i+5] = HEAPF32[(((value)+(4*i+20))>>2)];
          view[i+6] = HEAPF32[(((value)+(4*i+24))>>2)];
          view[i+7] = HEAPF32[(((value)+(4*i+28))>>2)];
          view[i+8] = HEAPF32[(((value)+(4*i+32))>>2)];
          view[i+9] = HEAPF32[(((value)+(4*i+36))>>2)];
          view[i+10] = HEAPF32[(((value)+(4*i+40))>>2)];
          view[i+11] = HEAPF32[(((value)+(4*i+44))>>2)];
          view[i+12] = HEAPF32[(((value)+(4*i+48))>>2)];
          view[i+13] = HEAPF32[(((value)+(4*i+52))>>2)];
          view[i+14] = HEAPF32[(((value)+(4*i+56))>>2)];
          view[i+15] = HEAPF32[(((value)+(4*i+60))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*64)>>2);
      }
      GLctx.uniformMatrix4fv(GL.uniforms[location], !!transpose, view);
    }

  function _glUseProgram(program) {
      GLctx.useProgram(program ? GL.programs[program] : null);
    }

  function _glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, !!normalized, stride, ptr);
    }

  function _glViewport(x0, x1, x2, x3) { GLctx['viewport'](x0, x1, x2, x3) }

  
  var GLFW={Window:function (id, width, height, title, monitor, share) {
        this.id = id;
        this.x = 0;
        this.y = 0;
        this.fullscreen = false; // Used to determine if app in fullscreen mode
        this.storedX = 0; // Used to store X before fullscreen
        this.storedY = 0; // Used to store Y before fullscreen
        this.width = width;
        this.height = height;
        this.storedWidth = width; // Used to store width before fullscreen
        this.storedHeight = height; // Used to store height before fullscreen
        this.title = title;
        this.monitor = monitor;
        this.share = share;
        this.attributes = GLFW.hints;
        this.inputModes = {
          0x00033001:0x00034001, // GLFW_CURSOR (GLFW_CURSOR_NORMAL)
          0x00033002:0, // GLFW_STICKY_KEYS
          0x00033003:0, // GLFW_STICKY_MOUSE_BUTTONS
        };
        this.buttons = 0;
        this.keys = new Array();
        this.domKeys = new Array();
        this.shouldClose = 0;
        this.title = null;
        this.windowPosFunc = null; // GLFWwindowposfun
        this.windowSizeFunc = null; // GLFWwindowsizefun
        this.windowCloseFunc = null; // GLFWwindowclosefun
        this.windowRefreshFunc = null; // GLFWwindowrefreshfun
        this.windowFocusFunc = null; // GLFWwindowfocusfun
        this.windowIconifyFunc = null; // GLFWwindowiconifyfun
        this.framebufferSizeFunc = null; // GLFWframebuffersizefun
        this.mouseButtonFunc = null; // GLFWmousebuttonfun
        this.cursorPosFunc = null; // GLFWcursorposfun
        this.cursorEnterFunc = null; // GLFWcursorenterfun
        this.scrollFunc = null; // GLFWscrollfun
        this.dropFunc = null; // GLFWdropfun
        this.keyFunc = null; // GLFWkeyfun
        this.charFunc = null; // GLFWcharfun
        this.userptr = null;
      },WindowFromId:function (id) {
        if (id <= 0 || !GLFW.windows) return null;
        return GLFW.windows[id - 1];
      },joystickFunc:null,errorFunc:null,monitorFunc:null,active:null,windows:null,monitors:null,monitorString:null,versionString:null,initialTime:null,extensions:null,hints:null,defaultHints:{131073:0,131074:0,131075:1,131076:1,131077:1,135169:8,135170:8,135171:8,135172:8,135173:24,135174:8,135175:0,135176:0,135177:0,135178:0,135179:0,135180:0,135181:0,135182:0,135183:0,139265:196609,139266:1,139267:0,139268:0,139269:0,139270:0,139271:0,139272:0},DOMToGLFWKeyCode:function (keycode) {
        switch (keycode) {
          // these keycodes are only defined for GLFW3, assume they are the same for GLFW2
          case 0x20:return 32; // DOM_VK_SPACE -> GLFW_KEY_SPACE
          case 0xDE:return 39; // DOM_VK_QUOTE -> GLFW_KEY_APOSTROPHE
          case 0xBC:return 44; // DOM_VK_COMMA -> GLFW_KEY_COMMA
          case 0xAD:return 45; // DOM_VK_HYPHEN_MINUS -> GLFW_KEY_MINUS
          case 0xBD:return 45; // DOM_VK_MINUS -> GLFW_KEY_MINUS
          case 0xBE:return 46; // DOM_VK_PERIOD -> GLFW_KEY_PERIOD
          case 0xBF:return 47; // DOM_VK_SLASH -> GLFW_KEY_SLASH
          case 0x30:return 48; // DOM_VK_0 -> GLFW_KEY_0
          case 0x31:return 49; // DOM_VK_1 -> GLFW_KEY_1
          case 0x32:return 50; // DOM_VK_2 -> GLFW_KEY_2
          case 0x33:return 51; // DOM_VK_3 -> GLFW_KEY_3
          case 0x34:return 52; // DOM_VK_4 -> GLFW_KEY_4
          case 0x35:return 53; // DOM_VK_5 -> GLFW_KEY_5
          case 0x36:return 54; // DOM_VK_6 -> GLFW_KEY_6
          case 0x37:return 55; // DOM_VK_7 -> GLFW_KEY_7
          case 0x38:return 56; // DOM_VK_8 -> GLFW_KEY_8
          case 0x39:return 57; // DOM_VK_9 -> GLFW_KEY_9
          case 0x3B:return 59; // DOM_VK_SEMICOLON -> GLFW_KEY_SEMICOLON
          case 0x3D:return 61; // DOM_VK_EQUALS -> GLFW_KEY_EQUAL
          case 0xBB:return 61; // DOM_VK_EQUALS -> GLFW_KEY_EQUAL
          case 0x41:return 65; // DOM_VK_A -> GLFW_KEY_A
          case 0x42:return 66; // DOM_VK_B -> GLFW_KEY_B
          case 0x43:return 67; // DOM_VK_C -> GLFW_KEY_C
          case 0x44:return 68; // DOM_VK_D -> GLFW_KEY_D
          case 0x45:return 69; // DOM_VK_E -> GLFW_KEY_E
          case 0x46:return 70; // DOM_VK_F -> GLFW_KEY_F
          case 0x47:return 71; // DOM_VK_G -> GLFW_KEY_G
          case 0x48:return 72; // DOM_VK_H -> GLFW_KEY_H
          case 0x49:return 73; // DOM_VK_I -> GLFW_KEY_I
          case 0x4A:return 74; // DOM_VK_J -> GLFW_KEY_J
          case 0x4B:return 75; // DOM_VK_K -> GLFW_KEY_K
          case 0x4C:return 76; // DOM_VK_L -> GLFW_KEY_L
          case 0x4D:return 77; // DOM_VK_M -> GLFW_KEY_M
          case 0x4E:return 78; // DOM_VK_N -> GLFW_KEY_N
          case 0x4F:return 79; // DOM_VK_O -> GLFW_KEY_O
          case 0x50:return 80; // DOM_VK_P -> GLFW_KEY_P
          case 0x51:return 81; // DOM_VK_Q -> GLFW_KEY_Q
          case 0x52:return 82; // DOM_VK_R -> GLFW_KEY_R
          case 0x53:return 83; // DOM_VK_S -> GLFW_KEY_S
          case 0x54:return 84; // DOM_VK_T -> GLFW_KEY_T
          case 0x55:return 85; // DOM_VK_U -> GLFW_KEY_U
          case 0x56:return 86; // DOM_VK_V -> GLFW_KEY_V
          case 0x57:return 87; // DOM_VK_W -> GLFW_KEY_W
          case 0x58:return 88; // DOM_VK_X -> GLFW_KEY_X
          case 0x59:return 89; // DOM_VK_Y -> GLFW_KEY_Y
          case 0x5a:return 90; // DOM_VK_Z -> GLFW_KEY_Z
          case 0xDB:return 91; // DOM_VK_OPEN_BRACKET -> GLFW_KEY_LEFT_BRACKET
          case 0xDC:return 92; // DOM_VK_BACKSLASH -> GLFW_KEY_BACKSLASH
          case 0xDD:return 93; // DOM_VK_CLOSE_BRACKET -> GLFW_KEY_RIGHT_BRACKET
          case 0xC0:return 94; // DOM_VK_BACK_QUOTE -> GLFW_KEY_GRAVE_ACCENT
          
  
          case 0x1B:return 256; // DOM_VK_ESCAPE -> GLFW_KEY_ESCAPE
          case 0x0D:return 257; // DOM_VK_RETURN -> GLFW_KEY_ENTER
          case 0x09:return 258; // DOM_VK_TAB -> GLFW_KEY_TAB
          case 0x08:return 259; // DOM_VK_BACK -> GLFW_KEY_BACKSPACE
          case 0x2D:return 260; // DOM_VK_INSERT -> GLFW_KEY_INSERT
          case 0x2E:return 261; // DOM_VK_DELETE -> GLFW_KEY_DELETE
          case 0x27:return 262; // DOM_VK_RIGHT -> GLFW_KEY_RIGHT
          case 0x25:return 263; // DOM_VK_LEFT -> GLFW_KEY_LEFT
          case 0x28:return 264; // DOM_VK_DOWN -> GLFW_KEY_DOWN
          case 0x26:return 265; // DOM_VK_UP -> GLFW_KEY_UP
          case 0x21:return 266; // DOM_VK_PAGE_UP -> GLFW_KEY_PAGE_UP
          case 0x22:return 267; // DOM_VK_PAGE_DOWN -> GLFW_KEY_PAGE_DOWN
          case 0x24:return 268; // DOM_VK_HOME -> GLFW_KEY_HOME
          case 0x23:return 269; // DOM_VK_END -> GLFW_KEY_END
          case 0x14:return 280; // DOM_VK_CAPS_LOCK -> GLFW_KEY_CAPS_LOCK
          case 0x91:return 281; // DOM_VK_SCROLL_LOCK -> GLFW_KEY_SCROLL_LOCK
          case 0x90:return 282; // DOM_VK_NUM_LOCK -> GLFW_KEY_NUM_LOCK
          case 0x2C:return 283; // DOM_VK_SNAPSHOT -> GLFW_KEY_PRINT_SCREEN
          case 0x13:return 284; // DOM_VK_PAUSE -> GLFW_KEY_PAUSE
          case 0x70:return 290; // DOM_VK_F1 -> GLFW_KEY_F1
          case 0x71:return 291; // DOM_VK_F2 -> GLFW_KEY_F2
          case 0x72:return 292; // DOM_VK_F3 -> GLFW_KEY_F3
          case 0x73:return 293; // DOM_VK_F4 -> GLFW_KEY_F4
          case 0x74:return 294; // DOM_VK_F5 -> GLFW_KEY_F5
          case 0x75:return 295; // DOM_VK_F6 -> GLFW_KEY_F6
          case 0x76:return 296; // DOM_VK_F7 -> GLFW_KEY_F7
          case 0x77:return 297; // DOM_VK_F8 -> GLFW_KEY_F8
          case 0x78:return 298; // DOM_VK_F9 -> GLFW_KEY_F9
          case 0x79:return 299; // DOM_VK_F10 -> GLFW_KEY_F10
          case 0x7A:return 300; // DOM_VK_F11 -> GLFW_KEY_F11
          case 0x7B:return 301; // DOM_VK_F12 -> GLFW_KEY_F12
          case 0x7C:return 302; // DOM_VK_F13 -> GLFW_KEY_F13
          case 0x7D:return 303; // DOM_VK_F14 -> GLFW_KEY_F14
          case 0x7E:return 304; // DOM_VK_F15 -> GLFW_KEY_F15
          case 0x7F:return 305; // DOM_VK_F16 -> GLFW_KEY_F16
          case 0x80:return 306; // DOM_VK_F17 -> GLFW_KEY_F17
          case 0x81:return 307; // DOM_VK_F18 -> GLFW_KEY_F18
          case 0x82:return 308; // DOM_VK_F19 -> GLFW_KEY_F19
          case 0x83:return 309; // DOM_VK_F20 -> GLFW_KEY_F20
          case 0x84:return 310; // DOM_VK_F21 -> GLFW_KEY_F21
          case 0x85:return 311; // DOM_VK_F22 -> GLFW_KEY_F22
          case 0x86:return 312; // DOM_VK_F23 -> GLFW_KEY_F23
          case 0x87:return 313; // DOM_VK_F24 -> GLFW_KEY_F24
          case 0x88:return 314; // 0x88 (not used?) -> GLFW_KEY_F25
          case 0x60:return 320; // DOM_VK_NUMPAD0 -> GLFW_KEY_KP_0
          case 0x61:return 321; // DOM_VK_NUMPAD1 -> GLFW_KEY_KP_1
          case 0x62:return 322; // DOM_VK_NUMPAD2 -> GLFW_KEY_KP_2
          case 0x63:return 323; // DOM_VK_NUMPAD3 -> GLFW_KEY_KP_3
          case 0x64:return 324; // DOM_VK_NUMPAD4 -> GLFW_KEY_KP_4
          case 0x65:return 325; // DOM_VK_NUMPAD5 -> GLFW_KEY_KP_5
          case 0x66:return 326; // DOM_VK_NUMPAD6 -> GLFW_KEY_KP_6
          case 0x67:return 327; // DOM_VK_NUMPAD7 -> GLFW_KEY_KP_7
          case 0x68:return 328; // DOM_VK_NUMPAD8 -> GLFW_KEY_KP_8
          case 0x69:return 329; // DOM_VK_NUMPAD9 -> GLFW_KEY_KP_9
          case 0x6E:return 330; // DOM_VK_DECIMAL -> GLFW_KEY_KP_DECIMAL
          case 0x6F:return 331; // DOM_VK_DIVIDE -> GLFW_KEY_KP_DIVIDE
          case 0x6A:return 332; // DOM_VK_MULTIPLY -> GLFW_KEY_KP_MULTIPLY
          case 0x6D:return 333; // DOM_VK_SUBTRACT -> GLFW_KEY_KP_SUBTRACT
          case 0x6B:return 334; // DOM_VK_ADD -> GLFW_KEY_KP_ADD
          // case 0x0D:return 335; // DOM_VK_RETURN -> GLFW_KEY_KP_ENTER (DOM_KEY_LOCATION_RIGHT)
          // case 0x61:return 336; // DOM_VK_EQUALS -> GLFW_KEY_KP_EQUAL (DOM_KEY_LOCATION_RIGHT)
          case 0x10:return 340; // DOM_VK_SHIFT -> GLFW_KEY_LEFT_SHIFT
          case 0x11:return 341; // DOM_VK_CONTROL -> GLFW_KEY_LEFT_CONTROL
          case 0x12:return 342; // DOM_VK_ALT -> GLFW_KEY_LEFT_ALT
          case 0x5B:return 343; // DOM_VK_WIN -> GLFW_KEY_LEFT_SUPER
          // case 0x10:return 344; // DOM_VK_SHIFT -> GLFW_KEY_RIGHT_SHIFT (DOM_KEY_LOCATION_RIGHT)
          // case 0x11:return 345; // DOM_VK_CONTROL -> GLFW_KEY_RIGHT_CONTROL (DOM_KEY_LOCATION_RIGHT)
          // case 0x12:return 346; // DOM_VK_ALT -> GLFW_KEY_RIGHT_ALT (DOM_KEY_LOCATION_RIGHT)
          // case 0x5B:return 347; // DOM_VK_WIN -> GLFW_KEY_RIGHT_SUPER (DOM_KEY_LOCATION_RIGHT)
          case 0x5D:return 348; // DOM_VK_CONTEXT_MENU -> GLFW_KEY_MENU
          // XXX: GLFW_KEY_WORLD_1, GLFW_KEY_WORLD_2 what are these?
          default:return -1; // GLFW_KEY_UNKNOWN
        };
      },getModBits:function (win) {
        var mod = 0;
        if (win.keys[340]) mod |= 0x0001; // GLFW_MOD_SHIFT
        if (win.keys[341]) mod |= 0x0002; // GLFW_MOD_CONTROL
        if (win.keys[342]) mod |= 0x0004; // GLFW_MOD_ALT
        if (win.keys[343]) mod |= 0x0008; // GLFW_MOD_SUPER
        return mod;
      },onKeyPress:function (event) {
        if (!GLFW.active || !GLFW.active.charFunc) return;
        if (event.ctrlKey || event.metaKey) return;
  
        // correct unicode charCode is only available with onKeyPress event
        var charCode = event.charCode;
        if (charCode == 0 || (charCode >= 0x00 && charCode <= 0x1F)) return;
  
  
        Module['dynCall_vii'](GLFW.active.charFunc, GLFW.active.id, charCode);
      },onKeyChanged:function (keyCode, status) {
        if (!GLFW.active) return;
  
        var key = GLFW.DOMToGLFWKeyCode(keyCode);
        if (key == -1) return;
  
        var repeat = status && GLFW.active.keys[key];
        GLFW.active.keys[key] = status;
        GLFW.active.domKeys[keyCode] = status;
        if (!GLFW.active.keyFunc) return;
  
  
        if (repeat) status = 2; // GLFW_REPEAT
        Module['dynCall_viiiii'](GLFW.active.keyFunc, GLFW.active.id, key, keyCode, status, GLFW.getModBits(GLFW.active));
      },onGamepadConnected:function (event) {
        GLFW.refreshJoysticks();
      },onGamepadDisconnected:function (event) {
        GLFW.refreshJoysticks();
      },onKeydown:function (event) {
        GLFW.onKeyChanged(event.keyCode, 1); // GLFW_PRESS or GLFW_REPEAT
  
        // This logic comes directly from the sdl implementation. We cannot
        // call preventDefault on all keydown events otherwise onKeyPress will
        // not get called
        if (event.keyCode === 8 /* backspace */ || event.keyCode === 9 /* tab */) {
          event.preventDefault();
        }
      },onKeyup:function (event) {
        GLFW.onKeyChanged(event.keyCode, 0); // GLFW_RELEASE
      },onBlur:function (event) {
        if (!GLFW.active) return;
  
        for (var i = 0; i < GLFW.active.domKeys.length; ++i) {
          if (GLFW.active.domKeys[i]) {
            GLFW.onKeyChanged(i, 0); // GLFW_RELEASE
          }
        }
      },onMousemove:function (event) {
        if (!GLFW.active) return;
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorPosFunc) return;
  
  
        Module['dynCall_vidd'](GLFW.active.cursorPosFunc, GLFW.active.id, Browser.mouseX, Browser.mouseY);
      },DOMToGLFWMouseButton:function (event) {
        // DOM and glfw have different button codes.
        // See http://www.w3schools.com/jsref/event_button.asp.
        var eventButton = event['button'];
        if (eventButton > 0) {
          if (eventButton == 1) {
            eventButton = 2;
          } else {
            eventButton = 1;
          }
        }
        return eventButton;
      },onMouseenter:function (event) {
        if (!GLFW.active) return;
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorEnterFunc) return;
  
        Module['dynCall_vii'](GLFW.active.cursorEnterFunc, GLFW.active.id, 1);
      },onMouseleave:function (event) {
        if (!GLFW.active) return;
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorEnterFunc) return;
  
        Module['dynCall_vii'](GLFW.active.cursorEnterFunc, GLFW.active.id, 0);
      },onMouseButtonChanged:function (event, status) {
        if (!GLFW.active) return;
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"]) return;
  
        eventButton = GLFW.DOMToGLFWMouseButton(event);
  
        if (status == 1) { // GLFW_PRESS
          GLFW.active.buttons |= (1 << eventButton);
          try {
            event.target.setCapture();
          } catch (e) {}
        } else {  // GLFW_RELEASE
          GLFW.active.buttons &= ~(1 << eventButton);
        }
  
        if (!GLFW.active.mouseButtonFunc) return;
  
  
        Module['dynCall_viiii'](GLFW.active.mouseButtonFunc, GLFW.active.id, eventButton, status, GLFW.getModBits(GLFW.active));
      },onMouseButtonDown:function (event) {
        if (!GLFW.active) return;
        GLFW.onMouseButtonChanged(event, 1); // GLFW_PRESS
      },onMouseButtonUp:function (event) {
        if (!GLFW.active) return;
        GLFW.onMouseButtonChanged(event, 0); // GLFW_RELEASE
      },onMouseWheel:function (event) {
        // Note the minus sign that flips browser wheel direction (positive direction scrolls page down) to native wheel direction (positive direction is mouse wheel up)
        var delta = -Browser.getMouseWheelDelta(event);
        delta = (delta == 0) ? 0 : (delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1)); // Quantize to integer so that minimum scroll is at least +/- 1.
        GLFW.wheelPos += delta;
  
        if (!GLFW.active || !GLFW.active.scrollFunc || event.target != Module['canvas']) return;
  
  
        var sx = 0;
        var sy = 0;
        if (event.type == 'mousewheel') {
          sx = event.wheelDeltaX;
          sy = event.wheelDeltaY;
        } else {
          sx = event.deltaX;
          sy = event.deltaY;
        }
  
        Module['dynCall_vidd'](GLFW.active.scrollFunc, GLFW.active.id, sx, sy);
  
        event.preventDefault();
      },onCanvasResize:function (width, height) {
        if (!GLFW.active) return;
  
        var resizeNeeded = true;
  
        // If the client is requesting fullscreen mode
        if (document["fullscreen"] || document["fullScreen"] || document["mozFullScreen"] || document["webkitIsFullScreen"]) {
          GLFW.active.storedX = GLFW.active.x;
          GLFW.active.storedY = GLFW.active.y;
          GLFW.active.storedWidth = GLFW.active.width;
          GLFW.active.storedHeight = GLFW.active.height;
          GLFW.active.x = GLFW.active.y = 0;
          GLFW.active.width = screen.width;
          GLFW.active.height = screen.height;
          GLFW.active.fullscreen = true;
  
        // If the client is reverting from fullscreen mode
        } else if (GLFW.active.fullscreen == true) {
          GLFW.active.x = GLFW.active.storedX;
          GLFW.active.y = GLFW.active.storedY;
          GLFW.active.width = GLFW.active.storedWidth;
          GLFW.active.height = GLFW.active.storedHeight;
          GLFW.active.fullscreen = false;
  
        // If the width/height values do not match current active window sizes
        } else if (GLFW.active.width != width || GLFW.active.height != height) {
            GLFW.active.width = width;
            GLFW.active.height = height;
        } else {
          resizeNeeded = false;
        }
  
        // If any of the above conditions were true, we need to resize the canvas
        if (resizeNeeded) {
          // resets the canvas size to counter the aspect preservation of Browser.updateCanvasDimensions
          Browser.setCanvasSize(GLFW.active.width, GLFW.active.height, true);
          // TODO: Client dimensions (clientWidth/clientHeight) vs pixel dimensions (width/height) of
          // the canvas should drive window and framebuffer size respectfully.
          GLFW.onWindowSizeChanged();
          GLFW.onFramebufferSizeChanged();
        }
      },onWindowSizeChanged:function () {
        if (!GLFW.active) return;
  
        if (!GLFW.active.windowSizeFunc) return;
  
  
        Module['dynCall_viii'](GLFW.active.windowSizeFunc, GLFW.active.id, GLFW.active.width, GLFW.active.height);
      },onFramebufferSizeChanged:function () {
        if (!GLFW.active) return;
  
        if (!GLFW.active.framebufferSizeFunc) return;
  
        Module['dynCall_viii'](GLFW.active.framebufferSizeFunc, GLFW.active.id, GLFW.active.width, GLFW.active.height);
      },requestFullscreen:function () {
        var RFS = Module["canvas"]['requestFullscreen'] ||
                  Module["canvas"]['mozRequestFullScreen'] ||
                  Module["canvas"]['webkitRequestFullScreen'] ||
                  (function() {});
        RFS.apply(Module["canvas"], []);
      },requestFullScreen:function () {
        Module.printErr('GLFW.requestFullScreen() is deprecated. Please call GLFW.requestFullscreen instead.');
        GLFW.requestFullScreen = function() {
          return GLFW.requestFullscreen();
        }
        return GLFW.requestFullscreen();
      },exitFullscreen:function () {
        var CFS = document['exitFullscreen'] ||
                  document['cancelFullScreen'] ||
                  document['mozCancelFullScreen'] ||
                  document['webkitCancelFullScreen'] ||
            (function() {});
        CFS.apply(document, []);
      },cancelFullScreen:function () {
        Module.printErr('GLFW.cancelFullScreen() is deprecated. Please call GLFW.exitFullscreen instead.');
        GLFW.cancelFullScreen = function() {
          return GLFW.exitFullscreen();
        }
        return GLFW.exitFullscreen();
      },getTime:function () {
        return _emscripten_get_now() / 1000;
      },setWindowTitle:function (winid, title) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        win.title = Pointer_stringify(title);
        if (GLFW.active.id == win.id) {
          document.title = win.title;
        }
      },setJoystickCallback:function (cbfun) {
        GLFW.joystickFunc = cbfun;
        GLFW.refreshJoysticks();
      },joys:{},lastGamepadState:null,lastGamepadStateFrame:null,refreshJoysticks:function () {
        // Produce a new Gamepad API sample if we are ticking a new game frame, or if not using emscripten_set_main_loop() at all to drive animation.
        if (Browser.mainLoop.currentFrameNumber !== GLFW.lastGamepadStateFrame || !Browser.mainLoop.currentFrameNumber) {
          GLFW.lastGamepadState = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads : null);
          GLFW.lastGamepadStateFrame = Browser.mainLoop.currentFrameNumber;
  
          for (var joy = 0; joy < GLFW.lastGamepadState.length; ++joy) {
            var gamepad = GLFW.lastGamepadState[joy];
  
            if (gamepad) {
              if (!GLFW.joys[joy]) {
                console.log('glfw joystick connected:',joy);
                GLFW.joys[joy] = {
                  id: allocate(intArrayFromString(gamepad.id), 'i8', ALLOC_NORMAL),
                  buttonsCount: gamepad.buttons.length,
                  axesCount: gamepad.axes.length,
                  buttons: allocate(new Array(gamepad.buttons.length), 'i8', ALLOC_NORMAL),
                  axes: allocate(new Array(gamepad.axes.length*4), 'float', ALLOC_NORMAL)
                };
  
                if (GLFW.joystickFunc) {
                  Module['dynCall_vii'](GLFW.joystickFunc, joy, 0x00040001); // GLFW_CONNECTED
                }
              }
  
              var data = GLFW.joys[joy];
  
              for (var i = 0; i < gamepad.buttons.length;  ++i) {
                setValue(data.buttons + i, gamepad.buttons[i].pressed, 'i8');
              }
  
              for (var i = 0; i < gamepad.axes.length; ++i) {
                setValue(data.axes + i*4, gamepad.axes[i], 'float');
              }
            } else {
              if (GLFW.joys[joy]) {
                console.log('glfw joystick disconnected',joy);
  
                if (GLFW.joystickFunc) {
                  Module['dynCall_vii'](GLFW.joystickFunc, joy, 0x00040002); // GLFW_DISCONNECTED
                }
  
                _free(GLFW.joys[joy].id);
                _free(GLFW.joys[joy].buttons);
                _free(GLFW.joys[joy].axes);
  
                delete GLFW.joys[joy];
              }
            }
          }
        }
      },setKeyCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.keyFunc = cbfun;
      },setCharCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.charFunc = cbfun;
      },setMouseButtonCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.mouseButtonFunc = cbfun;
      },setCursorPosCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.cursorPosFunc = cbfun;
      },setScrollCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.scrollFunc = cbfun;
      },setDropCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.dropFunc = cbfun;
      },onDrop:function (event) {
        if (!GLFW.active || !GLFW.active.dropFunc) return;
        if (!event.dataTransfer || !event.dataTransfer.files || event.dataTransfer.files.length == 0) return;
  
        event.preventDefault();
  
        var filenames = allocate(new Array(event.dataTransfer.files.length*4), 'i8*', ALLOC_NORMAL);
        var filenamesArray = [];
        var count = event.dataTransfer.files.length;
  
        // Read and save the files to emscripten's FS
        var written = 0;
        var drop_dir = '.glfw_dropped_files';
        FS.createPath('/', drop_dir);
  
        function save(file) {
          var path = '/' + drop_dir + '/' + file.name.replace(/\//g, '_');
          var reader = new FileReader();
          reader.onloadend = function(e) {
            if (reader.readyState != 2) { // not DONE
              ++written;
              console.log('failed to read dropped file: '+file.name+': '+reader.error);
              return;
            }
  
            var data = e.target.result;
            FS.writeFile(path, new Uint8Array(data));
            if (++written === count) {
              Module['dynCall_viii'](GLFW.active.dropFunc, GLFW.active.id, count, filenames);
  
              for (var i = 0; i < filenamesArray.length; ++i) {
                _free(filenamesArray[i]);
              }
              _free(filenames);
            }
          };
          reader.readAsArrayBuffer(file);
  
          var filename = allocate(intArrayFromString(path), 'i8', ALLOC_NORMAL);
          filenamesArray.push(filename);
          setValue(filenames + i*4, filename, 'i8*');
        }
  
        for (var i = 0; i < count; ++i) {
          save(event.dataTransfer.files[i]);
        }
  
        return false;
      },onDragover:function (event) {
        if (!GLFW.active || !GLFW.active.dropFunc) return;
  
        event.preventDefault();
        return false;
      },setWindowSizeCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.windowSizeFunc = cbfun;
       
      },setWindowCloseCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.windowCloseFunc = cbfun;
      },setWindowRefreshCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.windowRefreshFunc = cbfun;
      },onClickRequestPointerLock:function (e) {
        if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
          Module['canvas'].requestPointerLock();
          e.preventDefault();
        }
      },setInputMode:function (winid, mode, value) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        switch(mode) {
          case 0x00033001: { // GLFW_CURSOR
            switch(value) {
              case 0x00034001: { // GLFW_CURSOR_NORMAL
                win.inputModes[mode] = value;
                Module['canvas'].removeEventListener('click', GLFW.onClickRequestPointerLock, true);
                Module['canvas'].exitPointerLock();
                break;
              }
              case 0x00034002: { // GLFW_CURSOR_HIDDEN
                console.log("glfwSetInputMode called with GLFW_CURSOR_HIDDEN value not implemented.");
                break;
              }
              case 0x00034003: { // GLFW_CURSOR_DISABLED
                win.inputModes[mode] = value;
                Module['canvas'].addEventListener('click', GLFW.onClickRequestPointerLock, true);
                Module['canvas'].requestPointerLock();
                break;
              }
              default: {
                console.log("glfwSetInputMode called with unknown value parameter value: " + value + ".");
                break;
              }
            }
            break;
          }
          case 0x00033002: { // GLFW_STICKY_KEYS
            console.log("glfwSetInputMode called with GLFW_STICKY_KEYS mode not implemented.");
            break;
          }
          case 0x00033003: { // GLFW_STICKY_MOUSE_BUTTONS
            console.log("glfwSetInputMode called with GLFW_STICKY_MOUSE_BUTTONS mode not implemented.");
            break;
          }
          default: {
            console.log("glfwSetInputMode called with unknown mode parameter value: " + mode + ".");
            break;
          }
        }
      },getKey:function (winid, key) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return 0;
        return win.keys[key];
      },getMouseButton:function (winid, button) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return 0;
        return (win.buttons & (1 << button)) > 0;
      },getCursorPos:function (winid, x, y) {
        setValue(x, Browser.mouseX, 'double');
        setValue(y, Browser.mouseY, 'double');
      },getMousePos:function (winid, x, y) {
        setValue(x, Browser.mouseX, 'i32');
        setValue(y, Browser.mouseY, 'i32');
      },setCursorPos:function (winid, x, y) {
      },getWindowPos:function (winid, x, y) {
        var wx = 0;
        var wy = 0;
  
        var win = GLFW.WindowFromId(winid);
        if (win) {
          wx = win.x;
          wy = win.y;
        }
  
        setValue(x, wx, 'i32');
        setValue(y, wy, 'i32');
      },setWindowPos:function (winid, x, y) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.x = x;
        win.y = y;
      },getWindowSize:function (winid, width, height) {
        var ww = 0;
        var wh = 0;
  
        var win = GLFW.WindowFromId(winid);
        if (win) {
          ww = win.width;
          wh = win.height;
        }
  
        setValue(width, ww, 'i32');
        setValue(height, wh, 'i32');
      },setWindowSize:function (winid, width, height) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        if (GLFW.active.id == win.id) {
          if (width == screen.width && height == screen.height) {
            GLFW.requestFullscreen();
          } else {
            GLFW.exitFullscreen();
            Browser.setCanvasSize(width, height);
            win.width = width;
            win.height = height;
          }
        }
  
        if (!win.windowSizeFunc) return;
  
  
        Module['dynCall_viii'](win.windowSizeFunc, win.id, width, height);
      },createWindow:function (width, height, title, monitor, share) {
        var i, id;
        for (i = 0; i < GLFW.windows.length && GLFW.windows[i] !== null; i++);
        if (i > 0) throw "glfwCreateWindow only supports one window at time currently";
  
        // id for window
        id = i + 1;
  
        // not valid
        if (width <= 0 || height <= 0) return 0;
  
        if (monitor) {
          GLFW.requestFullscreen();
        } else {
          Browser.setCanvasSize(width, height);
        }
  
        // Create context when there are no existing alive windows
        for (i = 0; i < GLFW.windows.length && GLFW.windows[i] == null; i++);
        if (i == GLFW.windows.length) {
          var contextAttributes = {
            antialias: (GLFW.hints[0x0002100D] > 1), // GLFW_SAMPLES
            depth: (GLFW.hints[0x00021005] > 0),     // GLFW_DEPTH_BITS
            stencil: (GLFW.hints[0x00021006] > 0),   // GLFW_STENCIL_BITS
            alpha: (GLFW.hints[0x00021004] > 0)      // GLFW_ALPHA_BITS 
          }
          Module.ctx = Browser.createContext(Module['canvas'], true, true, contextAttributes);
        }
  
        // If context creation failed, do not return a valid window
        if (!Module.ctx) return 0;
  
        // Get non alive id
        var win = new GLFW.Window(id, width, height, title, monitor, share);
  
        // Set window to array
        if (id - 1 == GLFW.windows.length) {
          GLFW.windows.push(win);
        } else {
          GLFW.windows[id - 1] = win;
        }
  
        GLFW.active = win;
        return win.id;
      },destroyWindow:function (winid) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        if (win.windowCloseFunc)
          Module['dynCall_vi'](win.windowCloseFunc, win.id);
  
        GLFW.windows[win.id - 1] = null;
        if (GLFW.active.id == win.id)
          GLFW.active = null;
  
        // Destroy context when no alive windows
        for (var i = 0; i < GLFW.windows.length; i++)
          if (GLFW.windows[i] !== null) return;
  
        Module.ctx = Browser.destroyContext(Module['canvas'], true, true);
      },swapBuffers:function (winid) {
      },GLFW2ParamToGLFW3Param:function (param) {
        table = {
          0x00030001:0, // GLFW_MOUSE_CURSOR
          0x00030002:0, // GLFW_STICKY_KEYS
          0x00030003:0, // GLFW_STICKY_MOUSE_BUTTONS
          0x00030004:0, // GLFW_SYSTEM_KEYS
          0x00030005:0, // GLFW_KEY_REPEAT
          0x00030006:0, // GLFW_AUTO_POLL_EVENTS
          0x00020001:0, // GLFW_OPENED
          0x00020002:0, // GLFW_ACTIVE
          0x00020003:0, // GLFW_ICONIFIED
          0x00020004:0, // GLFW_ACCELERATED
          0x00020005:0x00021001, // GLFW_RED_BITS
          0x00020006:0x00021002, // GLFW_GREEN_BITS
          0x00020007:0x00021003, // GLFW_BLUE_BITS
          0x00020008:0x00021004, // GLFW_ALPHA_BITS
          0x00020009:0x00021005, // GLFW_DEPTH_BITS
          0x0002000A:0x00021006, // GLFW_STENCIL_BITS
          0x0002000B:0x0002100F, // GLFW_REFRESH_RATE
          0x0002000C:0x00021007, // GLFW_ACCUM_RED_BITS
          0x0002000D:0x00021008, // GLFW_ACCUM_GREEN_BITS
          0x0002000E:0x00021009, // GLFW_ACCUM_BLUE_BITS
          0x0002000F:0x0002100A, // GLFW_ACCUM_ALPHA_BITS
          0x00020010:0x0002100B, // GLFW_AUX_BUFFERS
          0x00020011:0x0002100C, // GLFW_STEREO
          0x00020012:0, // GLFW_WINDOW_NO_RESIZE
          0x00020013:0x0002100D, // GLFW_FSAA_SAMPLES
          0x00020014:0x00022002, // GLFW_OPENGL_VERSION_MAJOR
          0x00020015:0x00022003, // GLFW_OPENGL_VERSION_MINOR
          0x00020016:0x00022006, // GLFW_OPENGL_FORWARD_COMPAT
          0x00020017:0x00022007, // GLFW_OPENGL_DEBUG_CONTEXT
          0x00020018:0x00022008, // GLFW_OPENGL_PROFILE
        };
        return table[param];
      }};function _glfwCreateStandardCursor(shape) {}

  function _glfwCreateWindow(width, height, title, monitor, share) {
      return GLFW.createWindow(width, height, title, monitor, share);
    }

  function _glfwGetClipboardString(win) {}

  function _glfwGetCursorPos(winid, x, y) {
      GLFW.getCursorPos(winid, x, y);
    }

  function _glfwGetFramebufferSize(winid, width, height) {
      var ww = 0;
      var wh = 0;
  
      var win = GLFW.WindowFromId(winid);
      if (win) {
        ww = win.width;
        wh = win.height;
      }
  
      setValue(width, ww, 'i32');
      setValue(height, wh, 'i32');
    }

  function _glfwGetInputMode(winid, mode) {
      var win = GLFW.WindowFromId(winid);
      if (!win) return;
  
      switch (mode) {
        case 0x00033001: { // GLFW_CURSOR
          if (Browser.pointerLock) {
            win.inputModes[mode] = 0x00034003; // GLFW_CURSOR_DISABLED
          } else {
            win.inputModes[mode] = 0x00034001; // GLFW_CURSOR_NORMAL
          }
        }
      }
  
      return win.inputModes[mode];
    }

  function _glfwGetJoystickAxes(joy, count) {
      GLFW.refreshJoysticks();
  
      var state = GLFW.joys[joy];
      if (!state || !state.axes) {
        setValue(count, 0, 'i32');
        return;
      }
  
      setValue(count, state.axesCount, 'i32');
      return state.axes;
    }

  function _glfwGetJoystickButtons(joy, count) {
      GLFW.refreshJoysticks();
  
      var state = GLFW.joys[joy];
      if (!state || !state.buttons) {
        setValue(count, 0, 'i32');
        return;
      }
  
      setValue(count, state.buttonsCount, 'i32');
      return state.buttons;
    }

  function _glfwGetMouseButton(winid, button) {
      return GLFW.getMouseButton(winid, button);
    }

  function _glfwGetTime() {
      return GLFW.getTime() - GLFW.initialTime;
    }

  function _glfwGetWindowSize(winid, width, height) {
      GLFW.getWindowSize(winid, width, height);
    }

  function _glfwInit() {
      if (GLFW.windows) return 1; // GL_TRUE
  
      GLFW.initialTime = GLFW.getTime();
      GLFW.hints = GLFW.defaultHints;
      GLFW.windows = new Array()
      GLFW.active = null;
  
      window.addEventListener("gamepadconnected", GLFW.onGamepadConnected, true);
      window.addEventListener("gamepaddisconnected", GLFW.onGamepadDisconnected, true);
      window.addEventListener("keydown", GLFW.onKeydown, true);
      window.addEventListener("keypress", GLFW.onKeyPress, true);
      window.addEventListener("keyup", GLFW.onKeyup, true);
      window.addEventListener("blur", GLFW.onBlur, true);
      Module["canvas"].addEventListener("mousemove", GLFW.onMousemove, true);
      Module["canvas"].addEventListener("mousedown", GLFW.onMouseButtonDown, true);
      Module["canvas"].addEventListener("mouseup", GLFW.onMouseButtonUp, true);
      Module["canvas"].addEventListener('wheel', GLFW.onMouseWheel, true);
      Module["canvas"].addEventListener('mousewheel', GLFW.onMouseWheel, true);
      Module["canvas"].addEventListener('mouseenter', GLFW.onMouseenter, true);
      Module["canvas"].addEventListener('mouseleave', GLFW.onMouseleave, true);
      Module["canvas"].addEventListener('drop', GLFW.onDrop, true);
      Module["canvas"].addEventListener('dragover', GLFW.onDragover, true);
  
      Browser.resizeListeners.push(function(width, height) {
         GLFW.onCanvasResize(width, height);
      });
      return 1; // GL_TRUE
    }

  function _glfwMakeContextCurrent(winid) {}

  function _glfwSetCharCallback(winid, cbfun) {
      GLFW.setCharCallback(winid, cbfun);
    }

  function _glfwSetClipboardString(win, string) {}

  function _glfwSetCursor(winid, cursor) {}

  function _glfwSetCursorPos(winid, x, y) {
      GLFW.setCursorPos(winid, x, y);
    }

  function _glfwSetCursorPosCallback(winid, cbfun) {
      GLFW.setCursorPosCallback(winid, cbfun);
    }

  function _glfwSetFramebufferSizeCallback(winid, cbfun) {
      var win = GLFW.WindowFromId(winid);
      if (!win) return;
      win.framebufferSizeFunc = cbfun;
    }

  function _glfwSetInputMode(winid, mode, value) {
      GLFW.setInputMode(winid, mode, value);
    }

  function _glfwSetKeyCallback(winid, cbfun) {
      GLFW.setKeyCallback(winid, cbfun);
    }

  function _glfwSetMouseButtonCallback(winid, cbfun) {
      GLFW.setMouseButtonCallback(winid, cbfun);
    }

  function _glfwSetScrollCallback(winid, cbfun) {
      GLFW.setScrollCallback(winid, cbfun);
    }

  function _glfwSetWindowSizeCallback(winid, cbfun) {
      GLFW.setWindowSizeCallback(winid, cbfun);
    }

  function _glfwTerminate() {
      window.removeEventListener("gamepadconnected", GLFW.onGamepadConnected, true);
      window.removeEventListener("gamepaddisconnected", GLFW.onGamepadDisconnected, true);
      window.removeEventListener("keydown", GLFW.onKeydown, true);
      window.removeEventListener("keypress", GLFW.onKeyPress, true);
      window.removeEventListener("keyup", GLFW.onKeyup, true);
      window.removeEventListener("blur", GLFW.onBlur, true);
      Module["canvas"].removeEventListener("mousemove", GLFW.onMousemove, true);
      Module["canvas"].removeEventListener("mousedown", GLFW.onMouseButtonDown, true);
      Module["canvas"].removeEventListener("mouseup", GLFW.onMouseButtonUp, true);
      Module["canvas"].removeEventListener('wheel', GLFW.onMouseWheel, true);
      Module["canvas"].removeEventListener('mousewheel', GLFW.onMouseWheel, true);
      Module["canvas"].removeEventListener('mouseenter', GLFW.onMouseenter, true);
      Module["canvas"].removeEventListener('mouseleave', GLFW.onMouseleave, true);
      Module["canvas"].removeEventListener('drop', GLFW.onDrop, true);
      Module["canvas"].removeEventListener('dragover', GLFW.onDragover, true);
  
  
      Module["canvas"].width = Module["canvas"].height = 1;
      GLFW.windows = null;
      GLFW.active = null;
    }

  function _glfwWindowHint(target, hint) {
      GLFW.hints[target] = hint;
    }



   

  var _llvm_ctlz_i32=true;

  var _llvm_fabs_f32=Math_abs;

  var _llvm_floor_f64=Math_floor;

  var _llvm_pow_f64=Math_pow;


  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

   

   

   

  function _pthread_cond_wait() { return 0; }

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

   

   

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Module['dynCall_v'](func);
      _pthread_once.seen[ptr] = 1;
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }


   

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? Pointer_stringify(tm_zone) : ''
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S'                  // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          var twelveHour = date.tm_hour;
          if (twelveHour == 0) twelveHour = 12;
          else if (twelveHour > 12) twelveHour -= 12;
          return leadingNulls(twelveHour, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour >= 0 && date.tm_hour < 12) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }


FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
embind_init_charCodes();
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');;
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');;
init_emval();;
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Module.printErr("Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead."); Module["requestFullScreen"] = Module["requestFullscreen"]; Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
    _emscripten_get_now = function() { return self['performance']['now'](); };
  } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
___buildEnvironment(ENV);;
var GLctx; GL.init();
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

var ASSERTIONS = true;

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}



function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vidd(x) { Module["printErr"]("Invalid function pointer called with signature 'vidd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

Module['wasmTableSize'] = 716;

Module['wasmMaxTableSize'] = 716;

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiid(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiid"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiid(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiid"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    return Module["dynCall_iiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vidd(index,a1,a2,a3) {
  try {
    Module["dynCall_vidd"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = {};

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_ii": nullFunc_ii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iiiiid": nullFunc_iiiiid, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_iiiiiid": nullFunc_iiiiiid, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_iiiiiiii": nullFunc_iiiiiiii, "nullFunc_iiiiiiiii": nullFunc_iiiiiiiii, "nullFunc_v": nullFunc_v, "nullFunc_vi": nullFunc_vi, "nullFunc_vidd": nullFunc_vidd, "nullFunc_vii": nullFunc_vii, "nullFunc_viii": nullFunc_viii, "nullFunc_viiii": nullFunc_viiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "invoke_ii": invoke_ii, "invoke_iii": invoke_iii, "invoke_iiii": invoke_iiii, "invoke_iiiii": invoke_iiiii, "invoke_iiiiid": invoke_iiiiid, "invoke_iiiiii": invoke_iiiiii, "invoke_iiiiiid": invoke_iiiiiid, "invoke_iiiiiii": invoke_iiiiiii, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_iiiiiiiii": invoke_iiiiiiiii, "invoke_v": invoke_v, "invoke_vi": invoke_vi, "invoke_vidd": invoke_vidd, "invoke_vii": invoke_vii, "invoke_viii": invoke_viii, "invoke_viiii": invoke_viiii, "invoke_viiiii": invoke_viiiii, "invoke_viiiiii": invoke_viiiiii, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "___assert_fail": ___assert_fail, "___buildEnvironment": ___buildEnvironment, "___cxa_allocate_exception": ___cxa_allocate_exception, "___cxa_begin_catch": ___cxa_begin_catch, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___cxa_throw": ___cxa_throw, "___gxx_personality_v0": ___gxx_personality_v0, "___lock": ___lock, "___map_file": ___map_file, "___resumeException": ___resumeException, "___setErrNo": ___setErrNo, "___syscall140": ___syscall140, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "___syscall195": ___syscall195, "___syscall220": ___syscall220, "___syscall221": ___syscall221, "___syscall3": ___syscall3, "___syscall4": ___syscall4, "___syscall5": ___syscall5, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___syscall91": ___syscall91, "___unlock": ___unlock, "__addDays": __addDays, "__arraySum": __arraySum, "__embind_register_bool": __embind_register_bool, "__embind_register_emval": __embind_register_emval, "__embind_register_float": __embind_register_float, "__embind_register_integer": __embind_register_integer, "__embind_register_memory_view": __embind_register_memory_view, "__embind_register_std_string": __embind_register_std_string, "__embind_register_std_wstring": __embind_register_std_wstring, "__embind_register_void": __embind_register_void, "__emval_decref": __emval_decref, "__emval_register": __emval_register, "__exit": __exit, "__isLeapYear": __isLeapYear, "_abort": _abort, "_embind_repr": _embind_repr, "_emscripten_asm_const_i": _emscripten_asm_const_i, "_emscripten_get_now": _emscripten_get_now, "_emscripten_longjmp": _emscripten_longjmp, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_exit": _exit, "_getenv": _getenv, "_glActiveTexture": _glActiveTexture, "_glAttachShader": _glAttachShader, "_glBindAttribLocation": _glBindAttribLocation, "_glBindBuffer": _glBindBuffer, "_glBindTexture": _glBindTexture, "_glBindVertexArray": _glBindVertexArray, "_glBlendEquation": _glBlendEquation, "_glBlendEquationSeparate": _glBlendEquationSeparate, "_glBlendFunc": _glBlendFunc, "_glBlendFuncSeparate": _glBlendFuncSeparate, "_glBufferData": _glBufferData, "_glClear": _glClear, "_glClearColor": _glClearColor, "_glCompileShader": _glCompileShader, "_glCreateProgram": _glCreateProgram, "_glCreateShader": _glCreateShader, "_glDeleteProgram": _glDeleteProgram, "_glDeleteShader": _glDeleteShader, "_glDeleteVertexArrays": _glDeleteVertexArrays, "_glDepthFunc": _glDepthFunc, "_glDisable": _glDisable, "_glDrawElements": _glDrawElements, "_glEnable": _glEnable, "_glEnableVertexAttribArray": _glEnableVertexAttribArray, "_glGenBuffers": _glGenBuffers, "_glGenTextures": _glGenTextures, "_glGenVertexArrays": _glGenVertexArrays, "_glGenerateMipmap": _glGenerateMipmap, "_glGetAttribLocation": _glGetAttribLocation, "_glGetIntegerv": _glGetIntegerv, "_glGetProgramiv": _glGetProgramiv, "_glGetShaderInfoLog": _glGetShaderInfoLog, "_glGetShaderiv": _glGetShaderiv, "_glGetUniformLocation": _glGetUniformLocation, "_glIsEnabled": _glIsEnabled, "_glLinkProgram": _glLinkProgram, "_glPixelStorei": _glPixelStorei, "_glScissor": _glScissor, "_glShaderSource": _glShaderSource, "_glTexImage2D": _glTexImage2D, "_glTexParameteri": _glTexParameteri, "_glUniform1i": _glUniform1i, "_glUniform3fv": _glUniform3fv, "_glUniformMatrix4fv": _glUniformMatrix4fv, "_glUseProgram": _glUseProgram, "_glVertexAttribPointer": _glVertexAttribPointer, "_glViewport": _glViewport, "_glfwCreateStandardCursor": _glfwCreateStandardCursor, "_glfwCreateWindow": _glfwCreateWindow, "_glfwGetClipboardString": _glfwGetClipboardString, "_glfwGetCursorPos": _glfwGetCursorPos, "_glfwGetFramebufferSize": _glfwGetFramebufferSize, "_glfwGetInputMode": _glfwGetInputMode, "_glfwGetJoystickAxes": _glfwGetJoystickAxes, "_glfwGetJoystickButtons": _glfwGetJoystickButtons, "_glfwGetMouseButton": _glfwGetMouseButton, "_glfwGetTime": _glfwGetTime, "_glfwGetWindowSize": _glfwGetWindowSize, "_glfwInit": _glfwInit, "_glfwMakeContextCurrent": _glfwMakeContextCurrent, "_glfwSetCharCallback": _glfwSetCharCallback, "_glfwSetClipboardString": _glfwSetClipboardString, "_glfwSetCursor": _glfwSetCursor, "_glfwSetCursorPos": _glfwSetCursorPos, "_glfwSetCursorPosCallback": _glfwSetCursorPosCallback, "_glfwSetFramebufferSizeCallback": _glfwSetFramebufferSizeCallback, "_glfwSetInputMode": _glfwSetInputMode, "_glfwSetKeyCallback": _glfwSetKeyCallback, "_glfwSetMouseButtonCallback": _glfwSetMouseButtonCallback, "_glfwSetScrollCallback": _glfwSetScrollCallback, "_glfwSetWindowSizeCallback": _glfwSetWindowSizeCallback, "_glfwTerminate": _glfwTerminate, "_glfwWindowHint": _glfwWindowHint, "_llvm_cttz_i32": _llvm_cttz_i32, "_llvm_fabs_f32": _llvm_fabs_f32, "_llvm_floor_f64": _llvm_floor_f64, "_llvm_pow_f64": _llvm_pow_f64, "_longjmp": _longjmp, "_pthread_cond_wait": _pthread_cond_wait, "_pthread_getspecific": _pthread_getspecific, "_pthread_key_create": _pthread_key_create, "_pthread_once": _pthread_once, "_pthread_setspecific": _pthread_setspecific, "_strftime": _strftime, "_strftime_l": _strftime_l, "count_emval_handles": count_emval_handles, "createNamedFunction": createNamedFunction, "embind_init_charCodes": embind_init_charCodes, "emscriptenWebGLComputeImageSize": emscriptenWebGLComputeImageSize, "emscriptenWebGLGet": emscriptenWebGLGet, "emscriptenWebGLGetHeapForType": emscriptenWebGLGetHeapForType, "emscriptenWebGLGetShiftForType": emscriptenWebGLGetShiftForType, "emscriptenWebGLGetTexPixelData": emscriptenWebGLGetTexPixelData, "extendError": extendError, "floatReadValueFromPointer": floatReadValueFromPointer, "getShiftFromSize": getShiftFromSize, "get_first_emval": get_first_emval, "init_emval": init_emval, "integerReadValueFromPointer": integerReadValueFromPointer, "makeLegalFunctionName": makeLegalFunctionName, "readLatin1String": readLatin1String, "registerType": registerType, "simpleReadValueFromPointer": simpleReadValueFromPointer, "throwBindingError": throwBindingError, "throwInternalError": throwInternalError, "whenDependentTypesAreResolved": whenDependentTypesAreResolved, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'almost asm';


  var Int8View = global.Int8Array;
  var HEAP8 = new Int8View(buffer);
  var Int16View = global.Int16Array;
  var HEAP16 = new Int16View(buffer);
  var Int32View = global.Int32Array;
  var HEAP32 = new Int32View(buffer);
  var Uint8View = global.Uint8Array;
  var HEAPU8 = new Uint8View(buffer);
  var Uint16View = global.Uint16Array;
  var HEAPU16 = new Uint16View(buffer);
  var Uint32View = global.Uint32Array;
  var HEAPU32 = new Uint32View(buffer);
  var Float32View = global.Float32Array;
  var HEAPF32 = new Float32View(buffer);
  var Float64View = global.Float64Array;
  var HEAPF64 = new Float64View(buffer);
  var byteLength = global.byteLength;

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var Math_fround=global.Math.fround;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_iiiiid=env.nullFunc_iiiiid;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_iiiiiid=env.nullFunc_iiiiiid;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_iiiiiiii=env.nullFunc_iiiiiiii;
  var nullFunc_iiiiiiiii=env.nullFunc_iiiiiiiii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vidd=env.nullFunc_vidd;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var invoke_ii=env.invoke_ii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iiiiid=env.invoke_iiiiid;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_iiiiiid=env.invoke_iiiiiid;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_iiiiiiiii=env.invoke_iiiiiiiii;
  var invoke_v=env.invoke_v;
  var invoke_vi=env.invoke_vi;
  var invoke_vidd=env.invoke_vidd;
  var invoke_vii=env.invoke_vii;
  var invoke_viii=env.invoke_viii;
  var invoke_viiii=env.invoke_viiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ___assert_fail=env.___assert_fail;
  var ___buildEnvironment=env.___buildEnvironment;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var ___cxa_throw=env.___cxa_throw;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var ___lock=env.___lock;
  var ___map_file=env.___map_file;
  var ___resumeException=env.___resumeException;
  var ___setErrNo=env.___setErrNo;
  var ___syscall140=env.___syscall140;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var ___syscall195=env.___syscall195;
  var ___syscall220=env.___syscall220;
  var ___syscall221=env.___syscall221;
  var ___syscall3=env.___syscall3;
  var ___syscall4=env.___syscall4;
  var ___syscall5=env.___syscall5;
  var ___syscall54=env.___syscall54;
  var ___syscall6=env.___syscall6;
  var ___syscall91=env.___syscall91;
  var ___unlock=env.___unlock;
  var __addDays=env.__addDays;
  var __arraySum=env.__arraySum;
  var __embind_register_bool=env.__embind_register_bool;
  var __embind_register_emval=env.__embind_register_emval;
  var __embind_register_float=env.__embind_register_float;
  var __embind_register_integer=env.__embind_register_integer;
  var __embind_register_memory_view=env.__embind_register_memory_view;
  var __embind_register_std_string=env.__embind_register_std_string;
  var __embind_register_std_wstring=env.__embind_register_std_wstring;
  var __embind_register_void=env.__embind_register_void;
  var __emval_decref=env.__emval_decref;
  var __emval_register=env.__emval_register;
  var __exit=env.__exit;
  var __isLeapYear=env.__isLeapYear;
  var _abort=env._abort;
  var _embind_repr=env._embind_repr;
  var _emscripten_asm_const_i=env._emscripten_asm_const_i;
  var _emscripten_get_now=env._emscripten_get_now;
  var _emscripten_longjmp=env._emscripten_longjmp;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _exit=env._exit;
  var _getenv=env._getenv;
  var _glActiveTexture=env._glActiveTexture;
  var _glAttachShader=env._glAttachShader;
  var _glBindAttribLocation=env._glBindAttribLocation;
  var _glBindBuffer=env._glBindBuffer;
  var _glBindTexture=env._glBindTexture;
  var _glBindVertexArray=env._glBindVertexArray;
  var _glBlendEquation=env._glBlendEquation;
  var _glBlendEquationSeparate=env._glBlendEquationSeparate;
  var _glBlendFunc=env._glBlendFunc;
  var _glBlendFuncSeparate=env._glBlendFuncSeparate;
  var _glBufferData=env._glBufferData;
  var _glClear=env._glClear;
  var _glClearColor=env._glClearColor;
  var _glCompileShader=env._glCompileShader;
  var _glCreateProgram=env._glCreateProgram;
  var _glCreateShader=env._glCreateShader;
  var _glDeleteProgram=env._glDeleteProgram;
  var _glDeleteShader=env._glDeleteShader;
  var _glDeleteVertexArrays=env._glDeleteVertexArrays;
  var _glDepthFunc=env._glDepthFunc;
  var _glDisable=env._glDisable;
  var _glDrawElements=env._glDrawElements;
  var _glEnable=env._glEnable;
  var _glEnableVertexAttribArray=env._glEnableVertexAttribArray;
  var _glGenBuffers=env._glGenBuffers;
  var _glGenTextures=env._glGenTextures;
  var _glGenVertexArrays=env._glGenVertexArrays;
  var _glGenerateMipmap=env._glGenerateMipmap;
  var _glGetAttribLocation=env._glGetAttribLocation;
  var _glGetIntegerv=env._glGetIntegerv;
  var _glGetProgramiv=env._glGetProgramiv;
  var _glGetShaderInfoLog=env._glGetShaderInfoLog;
  var _glGetShaderiv=env._glGetShaderiv;
  var _glGetUniformLocation=env._glGetUniformLocation;
  var _glIsEnabled=env._glIsEnabled;
  var _glLinkProgram=env._glLinkProgram;
  var _glPixelStorei=env._glPixelStorei;
  var _glScissor=env._glScissor;
  var _glShaderSource=env._glShaderSource;
  var _glTexImage2D=env._glTexImage2D;
  var _glTexParameteri=env._glTexParameteri;
  var _glUniform1i=env._glUniform1i;
  var _glUniform3fv=env._glUniform3fv;
  var _glUniformMatrix4fv=env._glUniformMatrix4fv;
  var _glUseProgram=env._glUseProgram;
  var _glVertexAttribPointer=env._glVertexAttribPointer;
  var _glViewport=env._glViewport;
  var _glfwCreateStandardCursor=env._glfwCreateStandardCursor;
  var _glfwCreateWindow=env._glfwCreateWindow;
  var _glfwGetClipboardString=env._glfwGetClipboardString;
  var _glfwGetCursorPos=env._glfwGetCursorPos;
  var _glfwGetFramebufferSize=env._glfwGetFramebufferSize;
  var _glfwGetInputMode=env._glfwGetInputMode;
  var _glfwGetJoystickAxes=env._glfwGetJoystickAxes;
  var _glfwGetJoystickButtons=env._glfwGetJoystickButtons;
  var _glfwGetMouseButton=env._glfwGetMouseButton;
  var _glfwGetTime=env._glfwGetTime;
  var _glfwGetWindowSize=env._glfwGetWindowSize;
  var _glfwInit=env._glfwInit;
  var _glfwMakeContextCurrent=env._glfwMakeContextCurrent;
  var _glfwSetCharCallback=env._glfwSetCharCallback;
  var _glfwSetClipboardString=env._glfwSetClipboardString;
  var _glfwSetCursor=env._glfwSetCursor;
  var _glfwSetCursorPos=env._glfwSetCursorPos;
  var _glfwSetCursorPosCallback=env._glfwSetCursorPosCallback;
  var _glfwSetFramebufferSizeCallback=env._glfwSetFramebufferSizeCallback;
  var _glfwSetInputMode=env._glfwSetInputMode;
  var _glfwSetKeyCallback=env._glfwSetKeyCallback;
  var _glfwSetMouseButtonCallback=env._glfwSetMouseButtonCallback;
  var _glfwSetScrollCallback=env._glfwSetScrollCallback;
  var _glfwSetWindowSizeCallback=env._glfwSetWindowSizeCallback;
  var _glfwTerminate=env._glfwTerminate;
  var _glfwWindowHint=env._glfwWindowHint;
  var _llvm_cttz_i32=env._llvm_cttz_i32;
  var _llvm_fabs_f32=env._llvm_fabs_f32;
  var _llvm_floor_f64=env._llvm_floor_f64;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _longjmp=env._longjmp;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var _pthread_getspecific=env._pthread_getspecific;
  var _pthread_key_create=env._pthread_key_create;
  var _pthread_once=env._pthread_once;
  var _pthread_setspecific=env._pthread_setspecific;
  var _strftime=env._strftime;
  var _strftime_l=env._strftime_l;
  var count_emval_handles=env.count_emval_handles;
  var createNamedFunction=env.createNamedFunction;
  var embind_init_charCodes=env.embind_init_charCodes;
  var emscriptenWebGLComputeImageSize=env.emscriptenWebGLComputeImageSize;
  var emscriptenWebGLGet=env.emscriptenWebGLGet;
  var emscriptenWebGLGetHeapForType=env.emscriptenWebGLGetHeapForType;
  var emscriptenWebGLGetShiftForType=env.emscriptenWebGLGetShiftForType;
  var emscriptenWebGLGetTexPixelData=env.emscriptenWebGLGetTexPixelData;
  var extendError=env.extendError;
  var floatReadValueFromPointer=env.floatReadValueFromPointer;
  var getShiftFromSize=env.getShiftFromSize;
  var get_first_emval=env.get_first_emval;
  var init_emval=env.init_emval;
  var integerReadValueFromPointer=env.integerReadValueFromPointer;
  var makeLegalFunctionName=env.makeLegalFunctionName;
  var readLatin1String=env.readLatin1String;
  var registerType=env.registerType;
  var simpleReadValueFromPointer=env.simpleReadValueFromPointer;
  var throwBindingError=env.throwBindingError;
  var throwInternalError=env.throwInternalError;
  var whenDependentTypesAreResolved=env.whenDependentTypesAreResolved;
  var tempFloat = Math_fround(0);
  var asyncState = 0;
  const f0 = Math_fround(0);

function _emscripten_replace_memory(newBuffer) {
  if ((byteLength(newBuffer) & 0xffffff || byteLength(newBuffer) <= 0xffffff) || byteLength(newBuffer) > 0x80000000) return false;
  HEAP8 = new Int8View(newBuffer);
  HEAP16 = new Int16View(newBuffer);
  HEAP32 = new Int32View(newBuffer);
  HEAPU8 = new Uint8View(newBuffer);
  HEAPU16 = new Uint16View(newBuffer);
  HEAPU32 = new Uint32View(newBuffer);
  HEAPF32 = new Float32View(newBuffer);
  HEAPF64 = new Float64View(newBuffer);
  buffer = newBuffer;
  return true;
}

// EMSCRIPTEN_START_FUNCS
function __ZN5ImGui5BeginEPKcPbi(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, f35 = f0, f36 = f0, f37 = f0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, f44 = f0, f45 = f0, i46 = 0, i47 = 0, i48 = 0, f49 = f0, f50 = f0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, f68 = f0, f69 = f0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, f77 = f0, f78 = f0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, f89 = f0, f90 = f0, i91 = 0, f92 = f0, i93 = 0, i94 = 0, i95 = 0, i96 = 0, i97 = 0, i98 = 0, i99 = 0, i100 = 0, f101 = f0, i102 = 0, i103 = 0, i104 = 0, i105 = 0, i106 = 0, i107 = 0, i108 = 0, f109 = f0, i110 = 0, i111 = 0, f112 = f0, i113 = 0, i114 = 0, f115 = f0, i116 = 0, f117 = f0, i118 = 0, i119 = 0, i120 = 0, i121 = 0, i122 = 0, f123 = f0, f124 = f0, i125 = 0, i126 = 0, i127 = 0, i128 = 0, i129 = 0, i130 = 0, i131 = 0, i132 = 0, i133 = 0, i134 = 0, i135 = 0, i136 = 0, i137 = 0, i138 = 0, i139 = 0, i140 = 0, i141 = 0, i142 = 0, i143 = 0, i144 = 0, i145 = 0, i146 = 0, i147 = 0, i148 = 0, i149 = 0, f150 = f0, i151 = 0, f152 = f0, f153 = f0, f154 = f0, f155 = f0, f156 = f0, i157 = 0, f158 = f0, i159 = 0, f160 = f0, i161 = 0, i162 = 0, f163 = f0, i164 = 0, i165 = 0, f166 = f0, i167 = 0, f168 = f0, f169 = f0, f170 = f0, f171 = f0, f172 = f0, f173 = f0, f174 = f0, i175 = 0, i176 = 0, i177 = 0, i178 = 0, i179 = 0, i180 = 0, i181 = 0, f182 = f0, f183 = f0, i184 = 0, f185 = f0, f186 = f0, f187 = f0, f188 = f0, f189 = f0, i190 = 0, f191 = f0, i192 = 0, f193 = f0, f194 = f0, i195 = 0, i196 = 0, f197 = f0, f198 = f0, f199 = f0, f200 = f0, i201 = 0, f202 = f0, f203 = f0, i204 = 0, f205 = f0, i206 = 0, f207 = f0, i208 = 0, i209 = 0, f210 = f0, i211 = 0, f212 = f0, f213 = f0, f214 = f0, i215 = 0, i216 = 0, i217 = 0, i218 = 0, i219 = 0, i220 = 0, i221 = 0, i222 = 0, f223 = f0, f224 = f0, f225 = f0, f226 = f0, i227 = 0, f228 = f0, i229 = 0, f230 = f0, f231 = f0, f232 = f0, f233 = f0, f234 = f0, f235 = f0, i236 = 0, i237 = 0, i238 = 0, i239 = 0, i240 = 0, i241 = 0, i242 = 0, i243 = 0, i244 = 0, i245 = 0, i246 = 0, i247 = 0, i248 = 0, i249 = 0, f250 = f0, i251 = 0, i252 = 0, f253 = f0, f254 = f0, f255 = f0, f256 = f0, f257 = f0, i258 = 0, i259 = 0, i260 = 0, i261 = 0, i262 = 0, i263 = 0, i264 = 0, i265 = 0, i266 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176);
 i6 = i5 + 104 | 0;
 i7 = i5 + 88 | 0;
 i8 = i5 + 48 | 0;
 i9 = i5 + 32 | 0;
 i10 = i5 + 16 | 0;
 i11 = i5 + 144 | 0;
 i12 = i5 + 8 | 0;
 i13 = i5 + 136 | 0;
 i14 = i5;
 i15 = i5 + 80 | 0;
 i16 = i5 + 120 | 0;
 i17 = i5 + 72 | 0;
 i18 = i5 + 64 | 0;
 i19 = i5 + 160 | 0;
 i20 = HEAP32[1460598] | 0;
 if (!i1) ___assert_fail(33706, 31803, 6005, 33717);
 if (!(HEAP8[i20 >> 0] | 0)) ___assert_fail(33723, 31803, 6006, 33717);
 i21 = i20 + 6328 | 0;
 if ((HEAP32[i20 + 6332 >> 2] | 0) == (HEAP32[i21 >> 2] | 0)) ___assert_fail(33737, 31803, 6007, 33717);
 i22 = __Z6ImHashPKvij(i1, 0, 0) | 0;
 i23 = HEAP32[i20 + 6384 >> 2] | 0;
 i24 = HEAP32[i20 + 6376 >> 2] | 0;
 i25 = i24 << 3 >> 3;
 if (!i25) i26 = i23; else {
  i27 = i25;
  i25 = i23;
  while (1) {
   i28 = i27 >>> 1;
   i29 = i25 + (i28 << 3) | 0;
   i30 = (HEAP32[i29 >> 2] | 0) >>> 0 < i22 >>> 0;
   i27 = i30 ? i27 + -1 - i28 | 0 : i28;
   i28 = i30 ? i29 + 8 | 0 : i25;
   if (!i27) {
    i26 = i28;
    break;
   } else i25 = i28;
  }
 }
 if ((i26 | 0) == (i23 + (i24 << 3) | 0)) i4 = 12; else if ((HEAP32[i26 >> 2] | 0) == (i22 | 0)) {
  i22 = HEAP32[i26 + 4 >> 2] | 0;
  if (!i22) i4 = 12; else {
   i31 = i22;
   i32 = 1;
  }
 } else i4 = 12;
 if ((i4 | 0) == 12) {
  if (!(HEAP32[i20 + 6540 >> 2] | 0)) {
   i33 = 0;
   i34 = 0;
   f35 = Math_fround(0.0);
   f36 = Math_fround(0.0);
  } else {
   i22 = HEAP32[i20 + 6580 >> 2] | 0;
   f37 = (HEAP32[tempDoublePtr >> 2] = i22, Math_fround(HEAPF32[tempDoublePtr >> 2]));
   i26 = HEAP32[i20 + 6584 >> 2] | 0;
   i33 = i22;
   i34 = i26;
   f35 = f37;
   f36 = (HEAP32[tempDoublePtr >> 2] = i26, Math_fround(HEAPF32[tempDoublePtr >> 2]));
  }
  i26 = HEAP32[1460598] | 0;
  HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
  i22 = __ZL13MallocWrapperjPv(840, 0) | 0;
  __ZN11ImGuiWindowC2EP12ImGuiContextPKc(i22, i26, i1);
  HEAP32[i7 >> 2] = i22;
  HEAP32[i22 + 8 >> 2] = i3;
  i24 = i26 + 6376 | 0;
  i23 = HEAP32[i22 + 4 >> 2] | 0;
  i25 = HEAP32[i26 + 6384 >> 2] | 0;
  i27 = HEAP32[i24 >> 2] | 0;
  i28 = i27 << 3 >> 3;
  i29 = i22;
  if (!i28) i38 = i25; else {
   i30 = i28;
   i28 = i25;
   while (1) {
    i39 = i30 >>> 1;
    i40 = i28 + (i39 << 3) | 0;
    i41 = (HEAP32[i40 >> 2] | 0) >>> 0 < i23 >>> 0;
    i30 = i41 ? i30 + -1 - i39 | 0 : i39;
    i39 = i41 ? i40 + 8 | 0 : i28;
    if (!i30) {
     i38 = i39;
     break;
    } else i28 = i39;
   }
  }
  if ((i38 | 0) == (i25 + (i27 << 3) | 0)) i4 = 18; else if ((HEAP32[i38 >> 2] | 0) == (i23 | 0)) {
   HEAP32[i38 + 4 >> 2] = i22;
   i42 = i29;
   i43 = i22;
  } else i4 = 18;
  if ((i4 | 0) == 18) {
   HEAP32[i6 >> 2] = i23;
   HEAP32[i6 + 4 >> 2] = i22;
   __ZN8ImVectorIN12ImGuiStorage4PairEE6insertEPKS1_RS3_(i24, i38, i6) | 0;
   i38 = HEAP32[i7 >> 2] | 0;
   i42 = i38;
   i43 = i38;
  }
  HEAP32[i43 + 12 >> 2] = 1114636288;
  i38 = i43 + 16 | 0;
  HEAP32[i38 >> 2] = 1114636288;
  L32 : do if (!(i3 & 256)) {
   i24 = HEAP32[i43 + 4 >> 2] | 0;
   i22 = HEAP32[1460598] | 0;
   i23 = HEAP32[i22 + 11080 >> 2] | 0;
   if (!i23) {
    f44 = f35;
    f45 = f36;
    i46 = i33;
    i47 = i34;
   } else {
    i29 = i22 + 11088 | 0;
    i22 = 0;
    while (1) {
     if ((i23 | 0) <= (i22 | 0)) {
      i4 = 25;
      break;
     }
     i48 = HEAP32[i29 >> 2] | 0;
     i27 = i22 + 1 | 0;
     if ((HEAP32[i48 + (i22 * 28 | 0) + 4 >> 2] | 0) == (i24 | 0)) break;
     if ((i27 | 0) == (i23 | 0)) {
      f44 = f35;
      f45 = f36;
      i46 = i33;
      i47 = i34;
      break L32;
     } else i22 = i27;
    }
    if ((i4 | 0) == 25) ___assert_fail(56841, 56850, 1235, 56909);
    i23 = i48 + (i22 * 28 | 0) | 0;
    if (!i23) {
     f44 = f35;
     f45 = f36;
     i46 = i33;
     i47 = i34;
    } else {
     i24 = HEAP32[i26 + 11088 >> 2] | 0;
     if (i24 >>> 0 > i23 >>> 0) ___assert_fail(31883, 56850, 1275, 33771);
     if ((i24 + ((HEAP32[i26 + 11080 >> 2] | 0) * 28 | 0) | 0) >>> 0 < i23 >>> 0) ___assert_fail(31883, 56850, 1275, 33771);
     HEAP32[i43 + 628 >> 2] = (i23 - i24 | 0) / 28 | 0;
     i24 = i43 + 168 | 0;
     HEAP32[i24 >> 2] = HEAP32[i24 >> 2] & -5;
     i24 = i43 + 172 | 0;
     HEAP32[i24 >> 2] = HEAP32[i24 >> 2] & -5;
     i24 = i43 + 176 | 0;
     HEAP32[i24 >> 2] = HEAP32[i24 >> 2] & -5;
     i24 = i48 + (i22 * 28 | 0) | 0;
     f37 = Math_fround(~~Math_fround(HEAPF32[i24 + 8 >> 2]) | 0);
     f49 = Math_fround(~~Math_fround(HEAPF32[i24 + 12 >> 2]) | 0);
     HEAPF32[i43 + 12 >> 2] = f37;
     HEAPF32[i38 >> 2] = f49;
     HEAP8[i43 + 121 >> 0] = HEAP8[i24 + 24 >> 0] | 0;
     f49 = Math_fround(HEAPF32[i24 + 16 >> 2]);
     f37 = Math_fround(f49 * f49);
     f50 = Math_fround(HEAPF32[i24 + 20 >> 2]);
     if (Math_fround(f37 + Math_fround(f50 * f50)) > Math_fround(9.99999974e-06)) {
      f37 = Math_fround(~~f50 | 0);
      i24 = (HEAPF32[tempDoublePtr >> 2] = f37, HEAP32[tempDoublePtr >> 2] | 0);
      f50 = Math_fround(~~f49 | 0);
      f44 = f50;
      f45 = f37;
      i46 = (HEAPF32[tempDoublePtr >> 2] = f50, HEAP32[tempDoublePtr >> 2] | 0);
      i47 = i24;
     } else {
      f44 = f35;
      f45 = f36;
      i46 = i33;
      i47 = i34;
     }
    }
   }
  } else {
   f44 = f35;
   f45 = f36;
   i46 = i33;
   i47 = i34;
  } while (0);
  HEAPF32[i43 + 36 >> 2] = f44;
  HEAPF32[i43 + 40 >> 2] = f45;
  HEAP32[i43 + 28 >> 2] = i46;
  HEAP32[i43 + 32 >> 2] = i47;
  HEAP32[i43 + 20 >> 2] = i46;
  HEAP32[i43 + 24 >> 2] = i47;
  if (!(i3 & 64)) {
   if (f44 <= Math_fround(0.0)) HEAP32[i43 + 144 >> 2] = 2;
   if (f45 <= Math_fround(0.0)) HEAP32[i43 + 148 >> 2] = 2;
   if ((HEAP32[i43 + 144 >> 2] | 0) > 0) i51 = 1; else i51 = (HEAP32[i43 + 148 >> 2] | 0) > 0 & 1;
  } else {
   HEAP32[i43 + 148 >> 2] = 2;
   HEAP32[i43 + 144 >> 2] = 2;
   i51 = 0;
  }
  HEAP8[i43 + 152 >> 0] = i51;
  i51 = i26 + 6340 | 0;
  if (!(i3 & 8192)) {
   i43 = HEAP32[i51 >> 2] | 0;
   i47 = i26 + 6344 | 0;
   if ((i43 | 0) == (HEAP32[i47 >> 2] | 0)) {
    i46 = i43 + 1 | 0;
    if (!i43) i52 = 8; else i52 = ((i43 | 0) / 2 | 0) + i43 | 0;
    i34 = (i52 | 0) > (i46 | 0) ? i52 : i46;
    if ((i43 | 0) < (i34 | 0)) {
     HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
     i46 = __ZL13MallocWrapperjPv(i34 << 2, 0) | 0;
     i52 = i26 + 6348 | 0;
     i33 = HEAP32[i52 >> 2] | 0;
     if (!i33) i53 = i52; else {
      _memcpy(i46 | 0, i33 | 0, HEAP32[i51 >> 2] << 2 | 0) | 0;
      i33 = HEAP32[i52 >> 2] | 0;
      if (i33 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
      __ZL11FreeWrapperPvS_(i33, 0);
      i53 = i52;
     }
     HEAP32[i53 >> 2] = i46;
     HEAP32[i47 >> 2] = i34;
     i54 = HEAP32[i51 >> 2] | 0;
     i55 = HEAP32[i7 >> 2] | 0;
    } else {
     i54 = i43;
     i55 = i42;
    }
   } else {
    i54 = i43;
    i55 = i42;
   }
   HEAP32[(HEAP32[i26 + 6348 >> 2] | 0) + (i54 << 2) >> 2] = i55;
   HEAP32[i51 >> 2] = (HEAP32[i51 >> 2] | 0) + 1;
  } else __ZN8ImVectorIP11ImGuiWindowE6insertEPKS1_RS3_(i51, HEAP32[i26 + 6348 >> 2] | 0, i7) | 0;
  i31 = HEAP32[i7 >> 2] | 0;
  i32 = 0;
 }
 i26 = (i3 & 512 | 0) == 0 ? i3 : i3 | 6;
 if ((i26 & 25165824 | 0) == 8388608) ___assert_fail(33790, 31803, 6023, 33717);
 i3 = HEAP32[i21 >> 2] | 0;
 i21 = i31;
 i51 = i21 + 544 | 0;
 i55 = HEAP32[i51 >> 2] | 0;
 i54 = (i55 | 0) != (i3 | 0);
 i42 = i21 + 8 | 0;
 if (i54) {
  HEAP32[i42 >> 2] = i26;
  i56 = i26;
 } else i56 = HEAP32[i42 >> 2] | 0;
 i26 = (i55 | 0) < (i3 + -1 | 0);
 i55 = i21 + 164 | 0;
 i43 = (HEAP32[i55 >> 2] | 0) > 0;
 i34 = (i56 & 67108864 | 0) != 0;
 do if (i34) {
  i47 = HEAP32[i20 + 6524 >> 2] | 0;
  if ((HEAP32[i20 + 6512 >> 2] | 0) > (i47 | 0)) {
   i46 = HEAP32[i20 + 6520 >> 2] | 0;
   i53 = i46 + (i47 * 36 | 0) | 0;
   i57 = i26 | (HEAP32[i21 + 140 >> 2] | 0) != (HEAP32[i53 >> 2] | 0) | (HEAP32[i53 + 4 >> 2] | 0) != (i21 | 0);
   break;
  } else ___assert_fail(56841, 56850, 1235, 56909);
 } else i57 = i26; while (0);
 i26 = i43 | i57;
 i53 = i21 + 124 | 0;
 HEAP8[i53 >> 0] = i26 & 1;
 i47 = (i2 | 0) != 0;
 HEAP8[i21 + 125 >> 0] = i47 & 1;
 if (i26) {
  i26 = i21 + 168 | 0;
  HEAP32[i26 >> 2] = HEAP32[i26 >> 2] | 8;
  i26 = i21 + 172 | 0;
  HEAP32[i26 >> 2] = HEAP32[i26 >> 2] | 8;
  i26 = i21 + 176 | 0;
  HEAP32[i26 >> 2] = HEAP32[i26 >> 2] | 8;
 }
 i26 = i20 + 6364 | 0;
 i46 = HEAP32[i26 >> 2] | 0;
 i52 = (i46 | 0) == 0;
 do if (i52) i58 = 0; else if ((i46 | 0) > 0) {
  i58 = HEAP32[(HEAP32[i20 + 6372 >> 2] | 0) + (i46 + -1 << 2) >> 2] | 0;
  break;
 } else ___assert_fail(38278, 56850, 1245, 38287); while (0);
 if (i54) i59 = i56 & 83886080 | 0 ? i58 : 0; else i59 = HEAP32[i21 + 752 >> 2] | 0;
 i58 = (i59 | 0) != 0;
 i33 = i56 & 16777216;
 i38 = (i33 | 0) == 0;
 if (!(i38 | i58)) ___assert_fail(33827, 31803, 6049, 33717);
 i48 = i20 + 6368 | 0;
 if ((i46 | 0) == (HEAP32[i48 >> 2] | 0)) {
  i24 = i46 + 1 | 0;
  i23 = i52 ? 8 : (i46 >>> 1) + i46 | 0;
  i52 = (i23 | 0) > (i24 | 0) ? i23 : i24;
  if ((i46 | 0) < (i52 | 0)) {
   HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
   i24 = __ZL13MallocWrapperjPv(i52 << 2, 0) | 0;
   i23 = i20 + 6372 | 0;
   i29 = HEAP32[i23 >> 2] | 0;
   if (!i29) i60 = i23; else {
    _memcpy(i24 | 0, i29 | 0, HEAP32[i26 >> 2] << 2 | 0) | 0;
    i29 = HEAP32[i23 >> 2] | 0;
    if (i29 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
    __ZL11FreeWrapperPvS_(i29, 0);
    i60 = i23;
   }
   HEAP32[i60 >> 2] = i24;
   HEAP32[i48 >> 2] = i52;
   i61 = HEAP32[i26 >> 2] | 0;
  } else i61 = i46;
 } else i61 = i46;
 HEAP32[(HEAP32[i20 + 6372 >> 2] | 0) + (i61 << 2) >> 2] = i31;
 HEAP32[i26 >> 2] = (HEAP32[i26 >> 2] | 0) + 1;
 i26 = HEAP32[1460598] | 0;
 HEAP32[i26 + 6392 >> 2] = i21;
 f45 = Math_fround(HEAPF32[i26 + 6188 >> 2]);
 i61 = i21 + 624 | 0;
 f44 = Math_fround(f45 * Math_fround(HEAPF32[i61 >> 2]));
 HEAPF32[i26 + 6204 >> 2] = f44;
 HEAPF32[i26 + 6184 >> 2] = f44;
 i46 = i21 + 452 | 0;
 HEAP32[i21 + 412 >> 2] = HEAP32[i46 >> 2];
 HEAP32[i21 + 416 >> 2] = HEAP32[i21 + 400 >> 2];
 HEAP32[i21 + 420 >> 2] = HEAP32[i26 + 6524 >> 2];
 HEAP32[i21 + 424 >> 2] = HEAP32[i26 + 6476 >> 2];
 HEAP32[i21 + 428 >> 2] = HEAP32[i26 + 6488 >> 2];
 HEAP32[i21 + 432 >> 2] = HEAP32[i26 + 6500 >> 2];
 if (i34) {
  i26 = i20 + 6524 | 0;
  i52 = HEAP32[i26 >> 2] | 0;
  if ((HEAP32[i20 + 6512 >> 2] | 0) <= (i52 | 0)) ___assert_fail(56841, 56850, 1235, 56909);
  i48 = HEAP32[i20 + 6520 >> 2] | 0;
  i24 = i48 + (i52 * 36 | 0) | 0;
  i48 = i24 | 0;
  HEAP32[i24 + 4 >> 2] = i31;
  i24 = i20 + 6528 | 0;
  if ((i52 | 0) == (HEAP32[i24 >> 2] | 0)) {
   i60 = i52 + 1 | 0;
   if (!i52) i62 = 8; else i62 = ((i52 | 0) / 2 | 0) + i52 | 0;
   i23 = (i62 | 0) > (i60 | 0) ? i62 : i60;
   if ((i52 | 0) < (i23 | 0)) {
    HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
    i60 = __ZL13MallocWrapperjPv(i23 * 36 | 0, 0) | 0;
    i62 = i20 + 6532 | 0;
    i29 = HEAP32[i62 >> 2] | 0;
    if (!i29) i63 = i62; else {
     _memcpy(i60 | 0, i29 | 0, (HEAP32[i26 >> 2] | 0) * 36 | 0) | 0;
     i29 = HEAP32[i62 >> 2] | 0;
     if (i29 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
     __ZL11FreeWrapperPvS_(i29, 0);
     i63 = i62;
    }
    HEAP32[i63 >> 2] = i60;
    HEAP32[i24 >> 2] = i23;
    i64 = HEAP32[i26 >> 2] | 0;
   } else i64 = i52;
  } else i64 = i52;
  i52 = (HEAP32[i20 + 6532 >> 2] | 0) + (i64 * 36 | 0) | 0;
  i64 = i48;
  i23 = i52 + 36 | 0;
  do {
   HEAP32[i52 >> 2] = HEAP32[i64 >> 2];
   i52 = i52 + 4 | 0;
   i64 = i64 + 4 | 0;
  } while ((i52 | 0) < (i23 | 0));
  HEAP32[i26 >> 2] = (HEAP32[i26 >> 2] | 0) + 1;
  HEAP32[i21 + 140 >> 2] = HEAP32[i48 >> 2];
 }
 if (i38 & i43) HEAP32[i21 + 776 >> 2] = 0;
 i48 = i20 + 6536 | 0;
 i26 = HEAP32[i48 >> 2] | 0;
 do if (!i26) i65 = 0; else {
  i64 = i21 + 168 | 0;
  i52 = HEAP32[i64 >> 2] | 0;
  if (!(i52 & i26)) i65 = 0; else {
   i23 = i20 + 6572 | 0;
   f44 = Math_fround(HEAPF32[i23 >> 2]);
   f45 = Math_fround(f44 * f44);
   f44 = Math_fround(HEAPF32[i20 + 6576 >> 2]);
   if (Math_fround(f45 + Math_fround(f44 * f44)) > Math_fround(9.99999974e-06)) {
    i24 = i20 + 6564 | 0;
    i60 = HEAP32[i24 + 4 >> 2] | 0;
    i63 = i21 + 180 | 0;
    HEAP32[i63 >> 2] = HEAP32[i24 >> 2];
    HEAP32[i63 + 4 >> 2] = i60;
    i60 = i23;
    i23 = HEAP32[i60 + 4 >> 2] | 0;
    i63 = i21 + 188 | 0;
    HEAP32[i63 >> 2] = HEAP32[i60 >> 2];
    HEAP32[i63 + 4 >> 2] = i23;
    HEAP32[i64 >> 2] = i52 & -15;
    i65 = 1;
    break;
   }
   if (!(i26 + -1 & i26)) {
    HEAP32[i64 >> 2] = i52 & -15;
    HEAP32[i21 + 180 >> 2] = 2139095039;
    HEAP32[i21 + 184 >> 2] = 2139095039;
    i52 = i21 + 12 | 0;
    f44 = Math_fround(HEAPF32[i52 >> 2]);
    i64 = i21 + 16 | 0;
    f45 = Math_fround(HEAPF32[i64 >> 2]);
    f36 = Math_fround(~~Math_fround(HEAPF32[i20 + 6564 >> 2]) | 0);
    f35 = Math_fround(~~Math_fround(HEAPF32[i20 + 6568 >> 2]) | 0);
    HEAPF32[i52 >> 2] = f36;
    HEAPF32[i64 >> 2] = f35;
    f50 = Math_fround(f36 - f44);
    f44 = Math_fround(f35 - f45);
    i64 = i21 + 196 | 0;
    f45 = Math_fround(f50 + Math_fround(HEAPF32[i64 >> 2]));
    HEAPF32[i64 >> 2] = f45;
    i64 = i21 + 200 | 0;
    f45 = Math_fround(f44 + Math_fround(HEAPF32[i64 >> 2]));
    HEAPF32[i64 >> 2] = f45;
    i64 = i21 + 220 | 0;
    f45 = Math_fround(f50 + Math_fround(HEAPF32[i64 >> 2]));
    HEAPF32[i64 >> 2] = f45;
    i64 = i21 + 224 | 0;
    f45 = Math_fround(f44 + Math_fround(HEAPF32[i64 >> 2]));
    HEAPF32[i64 >> 2] = f45;
    i65 = 1;
    break;
   } else ___assert_fail(33890, 31803, 7239, 33924);
  }
 } while (0);
 i26 = HEAP32[i20 + 6540 >> 2] | 0;
 do if (!i26) {
  i66 = 0;
  i67 = 0;
 } else {
  i64 = i21 + 172 | 0;
  i52 = HEAP32[i64 >> 2] | 0;
  if (!(i52 & i26)) {
   i66 = 0;
   i67 = 0;
  } else {
   i23 = Math_fround(HEAPF32[i20 + 6580 >> 2]) > Math_fround(0.0);
   i63 = Math_fround(HEAPF32[i20 + 6584 >> 2]) > Math_fround(0.0);
   if (i26 + -1 & i26 | 0) ___assert_fail(33890, 31803, 7274, 33937);
   HEAP32[i64 >> 2] = i52 & -15;
   f45 = Math_fround(HEAPF32[i20 + 6580 >> 2]);
   i52 = i21 + 144 | 0;
   if (f45 > Math_fround(0.0)) {
    HEAP32[i52 >> 2] = 0;
    HEAPF32[i21 + 28 >> 2] = f45;
   } else {
    HEAP32[i52 >> 2] = 2;
    HEAP8[i21 + 152 >> 0] = 0;
   }
   f45 = Math_fround(HEAPF32[i20 + 6584 >> 2]);
   i52 = i21 + 148 | 0;
   if (f45 > Math_fround(0.0)) {
    HEAP32[i52 >> 2] = 0;
    HEAPF32[i21 + 32 >> 2] = f45;
    i66 = i23;
    i67 = i63;
    break;
   } else {
    HEAP32[i52 >> 2] = 2;
    HEAP8[i21 + 152 >> 0] = 0;
    i66 = i23;
    i67 = i63;
    break;
   }
  }
 } while (0);
 if (!(HEAP32[i20 + 6544 >> 2] | 0)) {
  if (i54) {
   HEAP32[i21 + 52 >> 2] = 0;
   HEAP32[i21 + 56 >> 2] = 0;
  }
 } else {
  i26 = i20 + 6588 | 0;
  i63 = HEAP32[i26 + 4 >> 2] | 0;
  i23 = i21 + 52 | 0;
  HEAP32[i23 >> 2] = HEAP32[i26 >> 2];
  HEAP32[i23 + 4 >> 2] = i63;
  i23 = i21 + 56 | 0;
  f45 = (HEAP32[tempDoublePtr >> 2] = i63, Math_fround(HEAPF32[tempDoublePtr >> 2]));
  if (f45 != Math_fround(0.0)) {
   i63 = HEAP32[i42 >> 2] | 0;
   if (!(i63 & 1)) {
    i26 = HEAP32[1460598] | 0;
    f44 = Math_fround(HEAPF32[i26 + 6188 >> 2]);
    f50 = Math_fround(f44 * Math_fround(HEAPF32[i61 >> 2]));
    f68 = Math_fround(f50 + Math_fround(Math_fround(HEAPF32[i26 + 5412 >> 2]) * Math_fround(2.0)));
   } else f68 = Math_fround(0.0);
   if (!(i63 & 1024)) f69 = Math_fround(0.0); else {
    f50 = Math_fround(HEAPF32[i21 + 324 >> 2]);
    i63 = HEAP32[1460598] | 0;
    f44 = Math_fround(HEAPF32[i63 + 6188 >> 2]);
    f35 = Math_fround(f50 + Math_fround(f44 * Math_fround(HEAPF32[i61 >> 2])));
    f69 = Math_fround(f35 + Math_fround(Math_fround(HEAPF32[i63 + 5412 >> 2]) * Math_fround(2.0)));
   }
   f35 = Math_fround(Math_fround(f68 + f69) + f45);
   HEAPF32[i23 >> 2] = f35;
  }
 }
 i23 = HEAP32[i20 + 6548 >> 2] | 0;
 do if (i23 | 0) {
  i63 = i21 + 176 | 0;
  i26 = HEAP32[i63 >> 2] | 0;
  if (!(i26 & i23)) break;
  i52 = HEAP8[i20 + 6596 >> 0] | 0;
  HEAP32[i63 >> 2] = i26 & -15;
  HEAP8[i21 + 121 >> 0] = i52;
 } while (0);
 if (HEAP32[i20 + 6556 >> 2] | 0) __ZN5ImGui11FocusWindowEP11ImGuiWindow(i21);
 if (HEAP8[i53 >> 0] | 0) {
  i53 = i21 + 168 | 0;
  HEAP32[i53 >> 2] = HEAP32[i53 >> 2] & -9;
  i53 = i21 + 172 | 0;
  HEAP32[i53 >> 2] = HEAP32[i53 >> 2] & -9;
  i53 = i21 + 176 | 0;
  HEAP32[i53 >> 2] = HEAP32[i53 >> 2] & -9;
 }
 do if (i54) {
  i53 = (i33 | 0) != 0;
  i23 = i56 & 33554432;
  i52 = i56 & 50331648;
  i26 = (i52 | 0) == 50331648;
  HEAP32[i21 + 752 >> 2] = i59;
  i63 = i21 + 768 | 0;
  HEAP32[i63 >> 2] = i21;
  i64 = i21 + 764 | 0;
  HEAP32[i64 >> 2] = i21;
  i60 = i21 + 760 | 0;
  HEAP32[i60 >> 2] = i21;
  i24 = i21 + 756 | 0;
  HEAP32[i24 >> 2] = i21;
  i62 = i53 ^ 1;
  if (!(i26 | (i62 | i58 ^ 1))) HEAP32[i24 >> 2] = HEAP32[i59 + 756 >> 2];
  i24 = (i56 & 134217728 | 0) == 0;
  if ((i56 & 83886080 | 0) == 0 | i24 & i58 ^ 1) i70 = i21; else {
   i29 = HEAP32[i59 + 760 >> 2] | 0;
   HEAP32[i64 >> 2] = i29;
   i71 = i29;
   i72 = i60;
   i4 = 137;
  }
  while (1) {
   if ((i4 | 0) == 137) {
    i4 = 0;
    HEAP32[i72 >> 2] = i71;
    i70 = HEAP32[i63 >> 2] | 0;
   }
   if (!(HEAP32[i70 + 8 >> 2] & 8388608)) break;
   i71 = HEAP32[i70 + 752 >> 2] | 0;
   i72 = i63;
   i4 = 137;
  }
  HEAP8[i21 + 118 >> 0] = 1;
  i63 = i21 + 128 | 0;
  HEAP32[i63 >> 2] = 0;
  i22 = i20 + 6388 | 0;
  i29 = HEAP32[i22 >> 2] | 0;
  HEAP32[i22 >> 2] = i29 + 1;
  HEAP32[i21 + 132 >> 2] = i29;
  i29 = i21 + 136 | 0;
  HEAP32[i29 >> 2] = 0;
  i22 = i21 + 464 | 0;
  HEAP32[i22 >> 2] = -8388609;
  i64 = i21 + 468 | 0;
  HEAP32[i64 >> 2] = -8388609;
  i27 = i21 + 472 | 0;
  HEAP32[i27 >> 2] = 2139095039;
  i25 = i21 + 476 | 0;
  HEAP32[i25 >> 2] = 2139095039;
  HEAP32[i51 >> 2] = i3;
  i28 = i21 + 452 | 0;
  i30 = i21 + 456 | 0;
  i39 = HEAP32[i30 >> 2] | 0;
  do if ((i39 | 0) < 1) {
   if (!i39) i73 = 8; else i73 = ((i39 | 0) / 2 | 0) + i39 | 0;
   i40 = (i73 | 0) > 1 ? i73 : 1;
   if ((i39 | 0) >= (i40 | 0)) break;
   HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
   i41 = __ZL13MallocWrapperjPv(i40 << 2, 0) | 0;
   i74 = i21 + 460 | 0;
   i75 = HEAP32[i74 >> 2] | 0;
   if (!i75) i76 = i74; else {
    _memcpy(i41 | 0, i75 | 0, HEAP32[i28 >> 2] << 2 | 0) | 0;
    i75 = HEAP32[i74 >> 2] | 0;
    if (i75 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
    __ZL11FreeWrapperPvS_(i75, 0);
    i76 = i74;
   }
   HEAP32[i76 >> 2] = i41;
   HEAP32[i30 >> 2] = i40;
  } while (0);
  HEAP32[i28 >> 2] = 1;
  i30 = i21 + 52 | 0;
  f35 = Math_fround(HEAPF32[i30 >> 2]);
  if (f35 != Math_fround(0.0)) f77 = f35; else {
   f35 = Math_fround(HEAPF32[i21 + 220 >> 2]);
   f45 = Math_fround(f35 - Math_fround(HEAPF32[i21 + 12 >> 2]));
   f77 = Math_fround(f45 + Math_fround(HEAPF32[i21 + 84 >> 2]));
  }
  f45 = Math_fround(~~f77 | 0);
  i39 = i21 + 56 | 0;
  f35 = Math_fround(HEAPF32[i39 >> 2]);
  if (f35 != Math_fround(0.0)) f78 = f35; else {
   f35 = Math_fround(HEAPF32[i21 + 224 >> 2]);
   f69 = Math_fround(f35 - Math_fround(HEAPF32[i21 + 16 >> 2]));
   f78 = Math_fround(f69 + Math_fround(HEAPF32[i21 + 88 >> 2]));
  }
  f69 = Math_fround(~~f78 | 0);
  i40 = i21 + 60 | 0;
  f35 = Math_fround(Math_fround(HEAPF32[i40 >> 2]) + f45);
  i41 = i21 + 64 | 0;
  f45 = Math_fround(Math_fround(HEAPF32[i41 >> 2]) + f69);
  i74 = i21 + 44 | 0;
  HEAPF32[i74 >> 2] = f35;
  i75 = i21 + 48 | 0;
  HEAPF32[i75 >> 2] = f45;
  i79 = HEAP32[i55 >> 2] | 0;
  i80 = i32 | i67 & i66;
  if ((i79 | 0) > 0 | i80 ^ 1) HEAP32[i55 >> 2] = i80 ? i79 + -1 | 0 : 1;
  i79 = i56 & 100663296;
  i80 = (i79 | 0) == 0;
  do if (!(i80 | i57 ^ 1)) {
   HEAP32[i55 >> 2] = 1;
   if (!(i56 & 64)) break;
   if (!i66) {
    HEAPF32[i21 + 28 >> 2] = Math_fround(0.0);
    HEAPF32[i21 + 20 >> 2] = Math_fround(0.0);
   }
   if (!i67) {
    HEAPF32[i21 + 32 >> 2] = Math_fround(0.0);
    HEAPF32[i21 + 24 >> 2] = Math_fround(0.0);
   }
   HEAP32[i74 >> 2] = 0;
   HEAP32[i75 >> 2] = 0;
  } while (0);
  i28 = HEAP32[1460598] | 0;
  i81 = i28 + 6392 | 0;
  HEAP32[i81 >> 2] = i21;
  i82 = i28 + 6188 | 0;
  f45 = Math_fround(HEAPF32[i82 >> 2]);
  f35 = Math_fround(HEAPF32[i61 >> 2]);
  f69 = Math_fround(f45 * f35);
  HEAPF32[i28 + 6204 >> 2] = f69;
  HEAPF32[i28 + 6184 >> 2] = f69;
  do if (i53) i83 = i20 + 5396 | 0; else if ((i79 | 0) != 0 & i24) {
   i83 = i20 + 5404 | 0;
   break;
  } else {
   i83 = i20 + 5372 | 0;
   break;
  } while (0);
  i79 = HEAP32[i83 >> 2] | 0;
  i84 = i21 + 72 | 0;
  HEAP32[i84 >> 2] = i79;
  i85 = i21 + 60 | 0;
  i86 = i20 + 5360 | 0;
  i87 = HEAP32[i86 >> 2] | 0;
  i88 = HEAP32[i86 + 4 >> 2] | 0;
  i86 = i85;
  HEAP32[i86 >> 2] = i87;
  HEAP32[i86 + 4 >> 2] = i88;
  f69 = (HEAP32[tempDoublePtr >> 2] = i87, Math_fround(HEAPF32[tempDoublePtr >> 2]));
  if ((i56 & 83951616 | 0) == 16777216 & (HEAP32[tempDoublePtr >> 2] = i79, Math_fround(HEAPF32[tempDoublePtr >> 2])) == Math_fround(0.0)) {
   if (!(i56 & 1024)) f89 = Math_fround(0.0); else f89 = Math_fround(HEAPF32[i20 + 5364 >> 2]);
   HEAP32[i85 >> 2] = 0;
   HEAPF32[i41 >> 2] = f89;
   f90 = Math_fround(0.0);
  } else f90 = f69;
  i85 = i20 + 5424 | 0;
  f69 = Math_fround(HEAPF32[i85 >> 2]);
  f45 = f90 >= f69 ? f90 : f69;
  f69 = Math_fround(HEAPF32[i20 + 6628 >> 2]);
  HEAPF32[i21 + 320 >> 2] = f45 >= f69 ? f45 : f69;
  i79 = i21 + 324 | 0;
  HEAP32[i79 >> 2] = HEAP32[i20 + 6632 >> 2];
  i87 = (i56 & 1 | 0) != 0;
  i88 = i87 ^ 1;
  i86 = i56 & 32;
  do if ((i86 | 0) == 0 & i88) {
   i91 = i21 + 12 | 0;
   f69 = Math_fround(HEAPF32[i91 >> 2]);
   f45 = Math_fround(f69 + Math_fround(HEAPF32[i21 + 28 >> 2]));
   f69 = Math_fround(HEAPF32[i21 + 16 >> 2]);
   if (!(HEAP32[i42 >> 2] & 1)) {
    f68 = Math_fround(Math_fround(HEAPF32[i82 >> 2]) * f35);
    f92 = Math_fround(f68 + Math_fround(Math_fround(HEAPF32[i28 + 5412 >> 2]) * Math_fround(2.0)));
   } else f92 = Math_fround(0.0);
   f68 = Math_fround(f69 + f92);
   i93 = i91;
   i91 = HEAP32[i93 >> 2] | 0;
   i94 = HEAP32[i93 + 4 >> 2] | 0;
   do if ((HEAP32[i20 + 6396 >> 2] | 0) == (i21 | 0)) {
    if (HEAP32[i20 + 6404 >> 2] | 0) break;
    if (HEAP32[i20 + 6412 >> 2] | 0) break;
    i93 = i6;
    HEAP32[i93 >> 2] = i91;
    HEAP32[i93 + 4 >> 2] = i94;
    i93 = i6 + 8 | 0;
    f69 = Math_fround(f45);
    f44 = Math_fround(f68);
    i95 = i93;
    HEAPF32[i95 >> 2] = f69;
    HEAPF32[i95 + 4 >> 2] = f44;
    f44 = (HEAP32[tempDoublePtr >> 2] = i91, Math_fround(HEAPF32[tempDoublePtr >> 2]));
    f69 = (HEAP32[tempDoublePtr >> 2] = i94, Math_fround(HEAPF32[tempDoublePtr >> 2]));
    i95 = HEAP32[i81 >> 2] | 0;
    i96 = i95 + 464 | 0;
    i97 = Math_fround(HEAPF32[i96 >> 2]) <= f44;
    i98 = HEAP32[(i97 ? i6 : i96) >> 2] | 0;
    i97 = Math_fround(HEAPF32[i95 + 468 >> 2]) <= f69;
    i99 = HEAP32[(i97 ? i6 : i96) + 4 >> 2] | 0;
    i96 = i6;
    HEAP32[i96 >> 2] = i98;
    HEAP32[i96 + 4 >> 2] = i99;
    i96 = i95 + 472 | 0;
    i97 = Math_fround(HEAPF32[i96 >> 2]) > f45;
    i100 = HEAP32[(i97 ? i93 : i96) >> 2] | 0;
    i97 = Math_fround(HEAPF32[i95 + 476 >> 2]) > f68;
    i95 = HEAP32[(i97 ? i93 : i96) + 4 >> 2] | 0;
    i96 = i93;
    HEAP32[i96 >> 2] = i100;
    HEAP32[i96 + 4 >> 2] = i95;
    f69 = (HEAP32[tempDoublePtr >> 2] = i98, Math_fround(HEAPF32[tempDoublePtr >> 2]));
    f44 = Math_fround(HEAPF32[i28 + 5440 >> 2]);
    f50 = Math_fround(f69 - f44);
    f69 = Math_fround(HEAPF32[i28 + 5444 >> 2]);
    f36 = Math_fround(HEAPF32[i28 + 212 >> 2]);
    if (!(f36 >= f50)) break;
    f50 = (HEAP32[tempDoublePtr >> 2] = i99, Math_fround(HEAPF32[tempDoublePtr >> 2]));
    f37 = (HEAP32[tempDoublePtr >> 2] = i100, Math_fround(HEAPF32[tempDoublePtr >> 2]));
    f49 = Math_fround(f69 + (HEAP32[tempDoublePtr >> 2] = i95, Math_fround(HEAPF32[tempDoublePtr >> 2])));
    f101 = Math_fround(f44 + f37);
    f37 = Math_fround(f50 - f69);
    f69 = Math_fround(HEAPF32[i28 + 216 >> 2]);
    if (!(f69 < f49 & (f36 < f101 & f69 >= f37))) break;
    if (!(HEAP8[i20 + 977 >> 0] | 0)) break;
    HEAP8[i21 + 122 >> 0] = 1;
   } while (0);
   i94 = i21 + 122 | 0;
   if (!(HEAP8[i94 >> 0] | 0)) {
    i102 = i94;
    break;
   }
   i91 = i21 + 121 | 0;
   HEAP8[i91 >> 0] = HEAP8[i91 >> 0] ^ 1;
   do if (!(HEAP32[i42 >> 2] & 256)) {
    i91 = i28 + 11052 | 0;
    if (!(Math_fround(HEAPF32[i91 >> 2]) <= Math_fround(0.0))) break;
    HEAP32[i91 >> 2] = HEAP32[i28 + 24 >> 2];
   } while (0);
   __ZN5ImGui11FocusWindowEP11ImGuiWindow(i21);
   i102 = i94;
  } else {
   HEAP8[i21 + 121 >> 0] = 0;
   i102 = i21 + 122 | 0;
  } while (0);
  HEAP8[i102 >> 0] = 0;
  __ZL15CalcSizeAutoFitP11ImGuiWindowRK6ImVec2(i14, i21, i74);
  do if (!(i56 & 64)) i4 = 195; else {
   i28 = i21 + 121 | 0;
   if (HEAP8[i28 >> 0] | 0) {
    i4 = 195;
    break;
   }
   if (i66) i103 = 2139095039; else {
    i81 = HEAP32[i14 >> 2] | 0;
    HEAP32[i21 + 28 >> 2] = i81;
    i103 = i81;
   }
   if (i67) {
    i104 = i28;
    i105 = i103;
    i106 = 2139095039;
    break;
   }
   i81 = HEAP32[i14 + 4 >> 2] | 0;
   HEAP32[i21 + 32 >> 2] = i81;
   i104 = i28;
   i105 = i103;
   i106 = i81;
  } while (0);
  L278 : do if ((i4 | 0) == 195) {
   i74 = (HEAP32[i21 + 144 >> 2] | 0) > 0;
   do if (!i74) {
    if ((HEAP32[i21 + 148 >> 2] | 0) > 0) break;
    i104 = i21 + 121 | 0;
    i105 = 2139095039;
    i106 = 2139095039;
    break L278;
   } while (0);
   if (i66 | i74 ^ 1) i107 = 2139095039; else {
    if (!(HEAP8[i21 + 152 >> 0] | 0)) {
     i108 = i21 + 28 | 0;
     f109 = Math_fround(HEAPF32[i14 >> 2]);
    } else {
     i94 = i21 + 28 | 0;
     f35 = Math_fround(HEAPF32[i94 >> 2]);
     f68 = Math_fround(HEAPF32[i14 >> 2]);
     i108 = i94;
     f109 = f35 >= f68 ? f35 : f68;
    }
    i94 = (HEAPF32[tempDoublePtr >> 2] = f109, HEAP32[tempDoublePtr >> 2] | 0);
    HEAPF32[i108 >> 2] = f109;
    i107 = i94;
   }
   do if (i67) i110 = 2139095039; else {
    if ((HEAP32[i21 + 148 >> 2] | 0) <= 0) {
     i110 = 2139095039;
     break;
    }
    if (!(HEAP8[i21 + 152 >> 0] | 0)) {
     i111 = i21 + 32 | 0;
     f112 = Math_fround(HEAPF32[i14 + 4 >> 2]);
    } else {
     i94 = i21 + 32 | 0;
     f68 = Math_fround(HEAPF32[i94 >> 2]);
     f35 = Math_fround(HEAPF32[i14 + 4 >> 2]);
     i111 = i94;
     f112 = f68 >= f35 ? f68 : f35;
    }
    i94 = (HEAPF32[tempDoublePtr >> 2] = f112, HEAP32[tempDoublePtr >> 2] | 0);
    HEAPF32[i111 >> 2] = f112;
    i110 = i94;
   } while (0);
   i74 = i21 + 121 | 0;
   if (HEAP8[i74 >> 0] | 0) {
    i104 = i74;
    i105 = i107;
    i106 = i110;
    break;
   }
   i94 = HEAP32[1460598] | 0;
   if (HEAP32[i42 >> 2] & 256 | 0) {
    i104 = i74;
    i105 = i107;
    i106 = i110;
    break;
   }
   i81 = i94 + 11052 | 0;
   if (!(Math_fround(HEAPF32[i81 >> 2]) <= Math_fround(0.0))) {
    i104 = i74;
    i105 = i107;
    i106 = i110;
    break;
   }
   HEAP32[i81 >> 2] = HEAP32[i94 + 24 >> 2];
   i104 = i74;
   i105 = i107;
   i106 = i110;
  } while (0);
  i74 = i21 + 28 | 0;
  i94 = i74;
  i81 = HEAP32[i94 + 4 >> 2] | 0;
  i28 = i15;
  HEAP32[i28 >> 2] = HEAP32[i94 >> 2];
  HEAP32[i28 + 4 >> 2] = i81;
  HEAP32[i6 >> 2] = HEAP32[i15 >> 2];
  HEAP32[i6 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
  __ZL23CalcSizeAfterConstraintP11ImGuiWindow6ImVec2(i7, i21, i6);
  i81 = i7;
  i28 = HEAP32[i81 >> 2] | 0;
  i94 = HEAP32[i81 + 4 >> 2] | 0;
  i81 = i74;
  HEAP32[i81 >> 2] = i28;
  HEAP32[i81 + 4 >> 2] = i94;
  i81 = (HEAP8[i104 >> 0] | 0) == 0;
  if (i53 | i81) {
   i113 = i94;
   i114 = i28;
  } else {
   f35 = (HEAP32[tempDoublePtr >> 2] = i28, Math_fround(HEAPF32[tempDoublePtr >> 2]));
   f68 = Math_fround(HEAPF32[i21 + 12 >> 2]);
   f45 = Math_fround(f68 + f35);
   f35 = Math_fround(HEAPF32[i21 + 16 >> 2]);
   if (!(HEAP32[i42 >> 2] & 1)) {
    i28 = HEAP32[1460598] | 0;
    f37 = Math_fround(HEAPF32[i28 + 6188 >> 2]);
    f69 = Math_fround(f37 * Math_fround(HEAPF32[i61 >> 2]));
    f115 = Math_fround(f69 + Math_fround(Math_fround(HEAPF32[i28 + 5412 >> 2]) * Math_fround(2.0)));
   } else f115 = Math_fround(0.0);
   f69 = Math_fround(f45 - f68);
   f68 = Math_fround(Math_fround(f35 + f115) - f35);
   i28 = (HEAPF32[tempDoublePtr >> 2] = f69, HEAP32[tempDoublePtr >> 2] | 0);
   i113 = (HEAPF32[tempDoublePtr >> 2] = f68, HEAP32[tempDoublePtr >> 2] | 0);
   i114 = i28;
  }
  i28 = i21 + 20 | 0;
  HEAP32[i28 >> 2] = i114;
  i94 = i21 + 24 | 0;
  HEAP32[i94 >> 2] = i113;
  if (i81) {
   i81 = (HEAP32[tempDoublePtr >> 2] = i105, Math_fround(HEAPF32[tempDoublePtr >> 2])) != Math_fround(3402823469999999843913219.0e14);
   i82 = i21 + 36 | 0;
   f68 = Math_fround(HEAPF32[(i81 ? i74 : i82) >> 2]);
   i81 = (HEAP32[tempDoublePtr >> 2] = i106, Math_fround(HEAPF32[tempDoublePtr >> 2])) != Math_fround(3402823469999999843913219.0e14);
   f69 = Math_fround(HEAPF32[(i81 ? i74 : i82) + 4 >> 2]);
   do if (!(i56 & 16384)) {
    if (!(Math_fround(HEAPF32[i75 >> 2]) > f69)) {
     i116 = 0;
     break;
    }
    i116 = (i56 & 8 | 0) == 0;
   } else i116 = 1; while (0);
   i82 = i21 + 117 | 0;
   i81 = i116 & 1;
   HEAP8[i82 >> 0] = i81;
   do if (!(i56 & 32768)) {
    f35 = Math_fround(HEAPF32[i21 + 44 >> 2]);
    if (i116) f117 = Math_fround(HEAPF32[i20 + 5456 >> 2]); else f117 = Math_fround(0.0);
    i91 = i56 & 2048;
    i95 = i21 + 116 | 0;
    if ((i56 & 8 | 0) == 0 & f35 > Math_fround(f68 - f117)) {
     i100 = i91 >>> 11 & 255;
     HEAP8[i95 >> 0] = i100;
     if (!i91) {
      i118 = i100;
      i119 = i81;
      i4 = 231;
      break;
     } else {
      i120 = i100;
      i4 = 229;
      break;
     }
    } else {
     HEAP8[i95 >> 0] = 0;
     i118 = 0;
     i119 = i81;
     i4 = 231;
     break;
    }
   } else {
    HEAP8[i21 + 116 >> 0] = 1;
    i120 = 1;
    i4 = 229;
   } while (0);
   do if ((i4 | 0) == 229) {
    if (i116) {
     i121 = i120;
     i4 = 232;
     break;
    }
    f68 = Math_fround(HEAPF32[i75 >> 2]);
    i81 = ((i56 & 8 | 0) == 0 ? f68 > Math_fround(f69 - Math_fround(HEAPF32[i20 + 5456 >> 2])) : 0) & 1;
    HEAP8[i82 >> 0] = i81;
    i118 = i120;
    i119 = i81;
    i4 = 231;
   } while (0);
   if ((i4 | 0) == 231) if (!(i119 << 24 >> 24)) {
    i122 = i118;
    f123 = Math_fround(0.0);
   } else {
    i121 = i118;
    i4 = 232;
   }
   if ((i4 | 0) == 232) {
    i122 = i121;
    f123 = Math_fround(HEAPF32[i20 + 5456 >> 2]);
   }
   if (!(i122 << 24 >> 24)) f124 = Math_fround(0.0); else f124 = Math_fround(HEAPF32[i20 + 5456 >> 2]);
   HEAPF32[i21 + 108 >> 2] = f123;
   HEAPF32[i21 + 112 >> 2] = f124;
  }
  do if (i57) {
   HEAP32[i21 + 160 >> 2] = -1;
   if (i65 | i34 ^ 1) break;
   i82 = HEAP32[i20 + 6524 >> 2] | 0;
   if ((i82 | 0) > 0) {
    i75 = (HEAP32[i20 + 6532 >> 2] | 0) + ((i82 + -1 | 0) * 36 | 0) + 20 | 0;
    i82 = HEAP32[i75 + 4 >> 2] | 0;
    i81 = i21 + 12 | 0;
    HEAP32[i81 >> 2] = HEAP32[i75 >> 2];
    HEAP32[i81 + 4 >> 2] = i82;
    break;
   } else ___assert_fail(38278, 56850, 1245, 38287);
  } while (0);
  do if (i53) {
   i82 = i59 + 328 | 0;
   i81 = HEAP32[i82 >> 2] | 0;
   HEAP32[i63 >> 2] = i81;
   i75 = i59 + 332 | 0;
   do if ((i81 | 0) == (HEAP32[i75 >> 2] | 0)) {
    i95 = i81 + 1 | 0;
    if (!i81) i125 = 8; else i125 = ((i81 | 0) / 2 | 0) + i81 | 0;
    i100 = (i125 | 0) > (i95 | 0) ? i125 : i95;
    if ((i81 | 0) >= (i100 | 0)) {
     i126 = i81;
     break;
    }
    HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
    i95 = __ZL13MallocWrapperjPv(i100 << 2, 0) | 0;
    i91 = i59 + 336 | 0;
    i99 = HEAP32[i91 >> 2] | 0;
    if (!i99) i127 = i91; else {
     _memcpy(i95 | 0, i99 | 0, HEAP32[i82 >> 2] << 2 | 0) | 0;
     i99 = HEAP32[i91 >> 2] | 0;
     if (i99 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
     __ZL11FreeWrapperPvS_(i99, 0);
     i127 = i91;
    }
    HEAP32[i127 >> 2] = i95;
    HEAP32[i75 >> 2] = i100;
    i126 = HEAP32[i82 >> 2] | 0;
   } else i126 = i81; while (0);
   HEAP32[(HEAP32[i59 + 336 >> 2] | 0) + (i126 << 2) >> 2] = i31;
   HEAP32[i82 >> 2] = (HEAP32[i82 >> 2] | 0) + 1;
   if (i26 | (i34 | i65)) break;
   i81 = i59 + 196 | 0;
   i75 = HEAP32[i81 + 4 >> 2] | 0;
   i100 = i21 + 12 | 0;
   HEAP32[i100 >> 2] = HEAP32[i81 >> 2];
   HEAP32[i100 + 4 >> 2] = i75;
  } while (0);
  f69 = Math_fround(HEAPF32[i21 + 180 >> 2]);
  do if (f69 != Math_fround(3402823469999999843913219.0e14)) {
   if (HEAP32[i55 >> 2] | 0) {
    i4 = 257;
    break;
   }
   i63 = i20 + 5488 | 0;
   f68 = Math_fround(HEAPF32[i74 >> 2]);
   f35 = Math_fround(f68 * Math_fround(HEAPF32[i21 + 188 >> 2]));
   f68 = Math_fround(HEAPF32[i21 + 32 >> 2]);
   f45 = Math_fround(f68 * Math_fround(HEAPF32[i21 + 192 >> 2]));
   f68 = Math_fround(f69 - f35);
   i75 = i21 + 184 | 0;
   f35 = Math_fround(Math_fround(HEAPF32[i75 >> 2]) - f45);
   HEAPF32[i6 >> 2] = f68;
   HEAPF32[i6 + 4 >> 2] = f35;
   i100 = Math_fround(HEAPF32[i63 >> 2]) >= f68;
   f68 = Math_fround(HEAPF32[(i100 ? i63 : i6) >> 2]);
   i100 = Math_fround(HEAPF32[i20 + 5492 >> 2]) >= f35;
   f35 = Math_fround(HEAPF32[(i100 ? i63 : i6) + 4 >> 2]);
   i63 = i21 + 168 | 0;
   HEAP32[i63 >> 2] = HEAP32[i63 >> 2] & -15;
   HEAP32[i21 + 180 >> 2] = 2139095039;
   HEAP32[i75 >> 2] = 2139095039;
   i75 = i21 + 12 | 0;
   f45 = Math_fround(HEAPF32[i75 >> 2]);
   i63 = i21 + 16 | 0;
   f37 = Math_fround(HEAPF32[i63 >> 2]);
   f101 = Math_fround(~~f68 | 0);
   f68 = Math_fround(~~f35 | 0);
   HEAPF32[i75 >> 2] = f101;
   HEAPF32[i63 >> 2] = f68;
   f35 = Math_fround(f101 - f45);
   f45 = Math_fround(f68 - f37);
   i63 = i21 + 196 | 0;
   f37 = Math_fround(f35 + Math_fround(HEAPF32[i63 >> 2]));
   HEAPF32[i63 >> 2] = f37;
   i63 = i21 + 200 | 0;
   f37 = Math_fround(f45 + Math_fround(HEAPF32[i63 >> 2]));
   HEAPF32[i63 >> 2] = f37;
   i63 = i21 + 220 | 0;
   f37 = Math_fround(f35 + Math_fround(HEAPF32[i63 >> 2]));
   HEAPF32[i63 >> 2] = f37;
   i63 = i21 + 224 | 0;
   f37 = Math_fround(f45 + Math_fround(HEAPF32[i63 >> 2]));
   HEAPF32[i63 >> 2] = f37;
  } else i4 = 257; while (0);
  do if ((i4 | 0) == 257) {
   if (i56 & 268435456 | 0) {
    __ZL25FindBestWindowPosForPopupP11ImGuiWindow(i6, i21);
    i63 = i6;
    i75 = HEAP32[i63 + 4 >> 2] | 0;
    i100 = i21 + 12 | 0;
    HEAP32[i100 >> 2] = HEAP32[i63 >> 2];
    HEAP32[i100 + 4 >> 2] = i75;
    break;
   }
   if (!(i65 | i34 ^ 1 | i43 ^ 1)) {
    __ZL25FindBestWindowPosForPopupP11ImGuiWindow(i6, i21);
    i75 = i6;
    i100 = HEAP32[i75 + 4 >> 2] | 0;
    i63 = i21 + 12 | 0;
    HEAP32[i63 >> 2] = HEAP32[i75 >> 2];
    HEAP32[i63 + 4 >> 2] = i100;
    break;
   }
   if (i26 | ((i23 | 0) == 0 | i65)) break;
   __ZL25FindBestWindowPosForPopupP11ImGuiWindow(i6, i21);
   i100 = i6;
   i63 = HEAP32[i100 + 4 >> 2] | 0;
   i75 = i21 + 12 | 0;
   HEAP32[i75 >> 2] = HEAP32[i100 >> 2];
   HEAP32[i75 + 4 >> 2] = i63;
  } while (0);
  do if (!(i53 | i65)) {
   if ((HEAP32[i21 + 144 >> 2] | 0) >= 1) break;
   if ((HEAP32[i21 + 148 >> 2] | 0) >= 1) break;
   i23 = i20 + 12 | 0;
   if (!(Math_fround(HEAPF32[i23 >> 2]) > Math_fround(0.0))) break;
   i63 = i20 + 16 | 0;
   if (!(Math_fround(HEAPF32[i63 >> 2]) > Math_fround(0.0))) break;
   i75 = i20 + 5480 | 0;
   i100 = i20 + 5488 | 0;
   f69 = Math_fround(HEAPF32[i75 >> 2]);
   i81 = f69 >= Math_fround(HEAPF32[i100 >> 2]);
   i95 = HEAP32[(i81 ? i75 : i100) >> 2] | 0;
   f69 = Math_fround(HEAPF32[i20 + 5484 >> 2]);
   i81 = f69 >= Math_fround(HEAPF32[i20 + 5492 >> 2]);
   i91 = HEAP32[(i81 ? i75 : i100) + 4 >> 2] | 0;
   HEAP32[i6 >> 2] = i95;
   HEAP32[i6 + 4 >> 2] = i91;
   i100 = i21 + 12 | 0;
   f69 = Math_fround(HEAPF32[i100 >> 2]);
   f37 = Math_fround(HEAPF32[i21 + 20 >> 2]);
   f45 = Math_fround(f69 + f37);
   i75 = i21 + 16 | 0;
   f69 = Math_fround(HEAPF32[i75 >> 2]);
   f35 = Math_fround(HEAPF32[i94 >> 2]);
   f68 = Math_fround(f69 + f35);
   HEAPF32[i7 >> 2] = f45;
   HEAPF32[i7 + 4 >> 2] = f68;
   f69 = (HEAP32[tempDoublePtr >> 2] = i95, Math_fround(HEAPF32[tempDoublePtr >> 2]));
   f101 = Math_fround(HEAPF32[(f45 >= f69 ? i7 : i6) >> 2]);
   f45 = (HEAP32[tempDoublePtr >> 2] = i91, Math_fround(HEAPF32[tempDoublePtr >> 2]));
   f36 = Math_fround(f101 - f37);
   f37 = Math_fround(Math_fround(HEAPF32[(f68 >= f45 ? i7 : i6) + 4 >> 2]) - f35);
   HEAPF32[i100 >> 2] = f36;
   HEAPF32[i75 >> 2] = f37;
   f35 = Math_fround(Math_fround(HEAPF32[i23 >> 2]) - f69);
   f69 = Math_fround(Math_fround(HEAPF32[i63 >> 2]) - f45);
   HEAPF32[i7 >> 2] = f35;
   HEAPF32[i7 + 4 >> 2] = f69;
   i63 = HEAP32[(f37 < f69 ? i100 : i7) + 4 >> 2] | 0;
   i23 = i100;
   HEAP32[i23 >> 2] = HEAP32[(f36 < f35 ? i100 : i7) >> 2];
   HEAP32[i23 + 4 >> 2] = i63;
  } while (0);
  i63 = i21 + 12 | 0;
  f35 = Math_fround(~~Math_fround(HEAPF32[i63 >> 2]) | 0);
  i23 = i21 + 16 | 0;
  f36 = Math_fround(~~Math_fround(HEAPF32[i23 >> 2]) | 0);
  HEAPF32[i63 >> 2] = f35;
  HEAPF32[i23 >> 2] = f36;
  do if (i53) i128 = i20 + 5392 | 0; else if ((i56 & 201326592 | 0) == 67108864) {
   i128 = i20 + 5400 | 0;
   break;
  } else {
   i128 = i20 + 5368 | 0;
   break;
  } while (0);
  i100 = i21 + 68 | 0;
  HEAP32[i100 >> 2] = HEAP32[i128 >> 2];
  i75 = i21 + 832 | 0;
  i91 = HEAP32[i75 >> 2] | 0;
  do if ((i91 | 0) == 2147483647) i129 = 2147483647; else {
   i95 = HEAP32[i21 + 816 >> 2] | 0;
   i81 = i95 + 1 | 0;
   if ((i95 | 0) == -1) {
    i129 = 2147483647;
    break;
   }
   i129 = (i81 + i91 | 0) % (i81 | 0) | 0;
  } while (0);
  HEAP32[i21 + 824 >> 2] = i129;
  i91 = i21 + 836 | 0;
  i81 = HEAP32[i91 >> 2] | 0;
  i95 = i21 + 820 | 0;
  do if ((i81 | 0) == 2147483647) i130 = 2147483647; else {
   i99 = HEAP32[i95 >> 2] | 0;
   i98 = i99 + 1 | 0;
   if ((i99 | 0) == -1) {
    i130 = 2147483647;
    break;
   }
   i130 = (i98 + i81 | 0) % (i98 | 0) | 0;
  } while (0);
  HEAP32[i21 + 828 >> 2] = i130;
  HEAP32[i95 >> 2] = -1;
  HEAP32[i21 + 816 >> 2] = -1;
  HEAP32[i91 >> 2] = 2147483647;
  HEAP32[i75 >> 2] = 2147483647;
  __ZL38CalcNextScrollFromScrollTargetAndClampP11ImGuiWindowb(i6, i21, 1);
  i81 = i6;
  i98 = HEAP32[i81 + 4 >> 2] | 0;
  i99 = i21 + 84 | 0;
  HEAP32[i99 >> 2] = HEAP32[i81 >> 2];
  HEAP32[i99 + 4 >> 2] = i98;
  HEAP32[i21 + 92 >> 2] = 2139095039;
  HEAP32[i21 + 96 >> 2] = 2139095039;
  i98 = ((i52 | 0) == 0 | i34) & ((i56 & 4096 | 0) == 0 & i57);
  HEAP32[i16 >> 2] = 0;
  HEAP32[i16 + 4 >> 2] = 0;
  HEAP32[i16 + 8 >> 2] = 0;
  HEAP32[i16 + 12 >> 2] = 0;
  i99 = i56 >>> 17 & 1;
  i81 = i20 + 6184 | 0;
  f36 = Math_fround(HEAPF32[i81 >> 2]);
  f35 = Math_fround(f36 * Math_fround(1.35000002));
  f69 = Math_fround(Math_fround(HEAPF32[i100 >> 2]) + Math_fround(1.0));
  f37 = Math_fround(Math_fround(f36 * Math_fround(.200000003)) + f69);
  f36 = Math_fround(~~(f35 >= f37 ? f35 : f37) | 0);
  if (!(HEAP8[i104 >> 0] | 0)) {
   i96 = HEAP32[1460598] | 0;
   i93 = HEAP32[i42 >> 2] | 0;
   do if (!(i93 & 66)) {
    if ((HEAP32[i21 + 144 >> 2] | 0) > 0) {
     i131 = -1;
     break;
    }
    if ((HEAP32[i21 + 148 >> 2] | 0) > 0) {
     i131 = -1;
     break;
    }
    i97 = i93 >>> 15 & 4;
    f37 = Math_fround(HEAPF32[i96 + 6184 >> 2]);
    f35 = Math_fround(f37 * Math_fround(1.35000002));
    f45 = Math_fround(Math_fround(f37 * Math_fround(.200000003)) + f69);
    f37 = Math_fround(~~Math_fround(Math_fround(~~(f35 >= f45 ? f35 : f45) | 0) * Math_fround(.75)) | 0);
    __ZN5ImGui6PushIDEPKc(33951);
    i132 = i21 + 12 | 0;
    i133 = i21 + 20 | 0;
    i134 = i9 + 4 | 0;
    i135 = i9 + 8 | 0;
    i136 = i9 + 12 | 0;
    i137 = i21 + 460 | 0;
    i138 = i96 + 977 | 0;
    i139 = i7 + 4 | 0;
    i140 = i96 + 212 | 0;
    i141 = i96 + 6444 | 0;
    i142 = i96 + 216 | 0;
    i143 = i96 + 6448 | 0;
    i144 = i8 + 4 | 0;
    i145 = i7 + 4 | 0;
    i146 = i7 + 4 | 0;
    i147 = i96 + 7068 | 0;
    i148 = 0;
    f45 = Math_fround(3402823469999999843913219.0e14);
    i149 = 2139095039;
    f35 = Math_fround(3402823469999999843913219.0e14);
    f68 = Math_fround(3402823469999999843913219.0e14);
    while (1) {
     f101 = Math_fround(HEAPF32[i132 >> 2]);
     f49 = Math_fround(f101 + Math_fround(HEAPF32[i133 >> 2]));
     f50 = Math_fround(HEAPF32[i23 >> 2]);
     f44 = Math_fround(f50 + Math_fround(HEAPF32[i94 >> 2]));
     f150 = Math_fround(f49 - f101);
     i151 = 4160 + (i148 * 24 | 0) | 0;
     f49 = Math_fround(HEAPF32[i151 >> 2]);
     f152 = Math_fround(f101 + Math_fround(f150 * f49));
     f150 = Math_fround(f44 - f50);
     f44 = Math_fround(HEAPF32[i151 + 4 >> 2]);
     f101 = Math_fround(f50 + Math_fround(f150 * f44));
     f150 = Math_fround(Math_fround(HEAPF32[i151 + 8 >> 2]) * f37);
     f50 = Math_fround(f152 + f150);
     f150 = Math_fround(f101 + Math_fround(Math_fround(HEAPF32[i151 + 12 >> 2]) * f37));
     HEAPF32[i9 >> 2] = f152;
     HEAPF32[i134 >> 2] = f101;
     HEAPF32[i135 >> 2] = f50;
     HEAPF32[i136 >> 2] = f150;
     if (f152 > f50) {
      HEAPF32[i9 >> 2] = f50;
      HEAPF32[i135 >> 2] = f152;
      f153 = f50;
      f154 = f152;
     } else {
      f153 = f152;
      f154 = f50;
     }
     if (f101 > f150) {
      HEAPF32[i134 >> 2] = f150;
      HEAPF32[i136 >> 2] = f101;
      f155 = f150;
      f156 = f101;
     } else {
      f155 = f101;
      f156 = f150;
     }
     HEAP32[i6 >> 2] = i148;
     i151 = HEAP32[i46 >> 2] | 0;
     if ((i151 | 0) <= 0) {
      i4 = 292;
      break;
     }
     i157 = __Z6ImHashPKvij(i6, 4, HEAP32[(HEAP32[i137 >> 2] | 0) + (i151 + -1 << 2) >> 2] | 0) | 0;
     i151 = HEAP32[1460598] | 0;
     if ((HEAP32[i151 + 6420 >> 2] | 0) == (i157 | 0)) HEAP8[i151 + 6432 >> 0] = 1;
     if ((HEAP32[i151 + 6424 >> 2] | 0) == (i157 | 0)) HEAP8[i151 + 6436 >> 0] = 1;
     __ZN5ImGui14ButtonBehaviorERK6ImRectjPbS3_i(i9, i157, i10, i11, 8224) | 0;
     i157 = HEAP8[i10 >> 0] | 0;
     i151 = HEAP8[i11 >> 0] | 0;
     if ((i151 | i157) << 24 >> 24) HEAP32[i147 >> 2] = 6 - i148;
     if (!(i151 << 24 >> 24)) {
      f158 = f45;
      i159 = i149;
      f160 = f35;
      i161 = i157;
      i162 = 0;
      f163 = f68;
     } else {
      if ((i148 | 0) == 0 & (HEAP8[i138 >> 0] | 0) != 0) {
       i157 = i14;
       i151 = HEAP32[i157 + 4 >> 2] | 0;
       i164 = i12;
       HEAP32[i164 >> 2] = HEAP32[i157 >> 2];
       HEAP32[i164 + 4 >> 2] = i151;
       HEAP32[i6 >> 2] = HEAP32[i12 >> 2];
       HEAP32[i6 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
       __ZL23CalcSizeAfterConstraintP11ImGuiWindow6ImVec2(i7, i21, i6);
       f150 = Math_fround(HEAPF32[i7 >> 2]);
       i151 = HEAP32[i139 >> 2] | 0;
       i164 = HEAP32[1460598] | 0;
       i157 = i164 + 6420 | 0;
       i165 = (HEAP32[i157 >> 2] | 0) != 0;
       HEAP8[i164 + 6433 >> 0] = i165 & 1;
       if (i165) {
        HEAPF32[i164 + 6428 >> 2] = Math_fround(0.0);
        HEAP8[i164 + 6435 >> 0] = 0;
       }
       HEAP32[i157 >> 2] = 0;
       HEAP32[i164 + 6440 >> 2] = 0;
       HEAP8[i164 + 6434 >> 0] = 0;
       HEAP32[i164 + 6452 >> 2] = 0;
       f166 = f45;
       i167 = i151;
       f168 = f35;
       f169 = f150;
      } else {
       f150 = Math_fround(HEAPF32[i140 >> 2]);
       f101 = Math_fround(f150 - Math_fround(HEAPF32[i141 >> 2]));
       f150 = Math_fround(HEAPF32[i142 >> 2]);
       f50 = Math_fround(Math_fround(f49 * Math_fround(f154 - f153)) + f101);
       f101 = Math_fround(Math_fround(f44 * Math_fround(f156 - f155)) + Math_fround(f150 - Math_fround(HEAPF32[i143 >> 2])));
       f150 = Math_fround(HEAPF32[i132 >> 2]);
       f152 = Math_fround(f50 + Math_fround(f49 * Math_fround(f150 - f50)));
       f170 = Math_fround(HEAPF32[i23 >> 2]);
       f171 = Math_fround(f101 + Math_fround(f44 * Math_fround(f170 - f101)));
       f172 = Math_fround(f150 + Math_fround(HEAPF32[i133 >> 2]));
       f150 = Math_fround(f170 + Math_fround(HEAPF32[i94 >> 2]));
       f170 = Math_fround(Math_fround(f172 + Math_fround(f49 * Math_fround(f50 - f172))) - f152);
       f172 = Math_fround(Math_fround(f150 + Math_fround(f44 * Math_fround(f101 - f150))) - f171);
       HEAPF32[i8 >> 2] = f170;
       HEAPF32[i144 >> 2] = f172;
       HEAP32[i6 >> 2] = HEAP32[i8 >> 2];
       HEAP32[i6 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
       __ZL23CalcSizeAfterConstraintP11ImGuiWindow6ImVec2(i7, i21, i6);
       if ((i148 + -1 | 0) >>> 0 < 2) f173 = Math_fround(f152 - Math_fround(Math_fround(HEAPF32[i7 >> 2]) - f170)); else f173 = f152;
       if ((i148 | 1 | 0) == 3) {
        f152 = Math_fround(HEAPF32[i145 >> 2]);
        f170 = Math_fround(f171 - Math_fround(f152 - f172));
        f174 = f170;
        i175 = (HEAPF32[tempDoublePtr >> 2] = f152, HEAP32[tempDoublePtr >> 2] | 0);
       } else {
        f174 = f171;
        i175 = HEAP32[i146 >> 2] | 0;
       }
       f166 = f173;
       i167 = i175;
       f168 = f174;
       f169 = Math_fround(HEAPF32[i7 >> 2]);
      }
      f158 = f166;
      i159 = i167;
      f160 = f168;
      i161 = HEAP8[i10 >> 0] | 0;
      i162 = HEAP8[i11 >> 0] | 0;
      f163 = f169;
     }
     if (!((i148 | 0) != 0 & (i162 | i161) << 24 >> 24 == 0)) {
      i151 = i162 << 24 >> 24 == 0 ? (i161 << 24 >> 24 ? 31 : 30) : 32;
      i164 = HEAP32[1460598] | 0;
      i157 = i164 + 5508 + (i151 << 4) | 0;
      f171 = Math_fround(HEAPF32[i157 >> 2]);
      f152 = Math_fround(HEAPF32[i157 + 4 >> 2]);
      f170 = Math_fround(HEAPF32[i157 + 8 >> 2]);
      f172 = Math_fround(HEAPF32[i157 + 12 >> 2]);
      f150 = Math_fround(f172 * Math_fround(HEAPF32[i164 + 5356 >> 2]));
      i164 = f171 < Math_fround(0.0);
      i157 = f171 > Math_fround(1.0);
      i151 = ~~Math_fround(Math_fround((i157 ? Math_fround(1.0) : f171) * Math_fround(255.0)) + Math_fround(.5));
      i157 = f152 < Math_fround(0.0);
      i165 = f152 > Math_fround(1.0);
      i176 = ~~Math_fround(Math_fround((i165 ? Math_fround(1.0) : f152) * Math_fround(255.0)) + Math_fround(.5)) << 8;
      i165 = f170 < Math_fround(0.0);
      i177 = f170 > Math_fround(1.0);
      i178 = ~~Math_fround(Math_fround((i177 ? Math_fround(1.0) : f170) * Math_fround(255.0)) + Math_fround(.5)) << 16;
      i177 = f150 < Math_fround(0.0);
      i179 = f150 > Math_fround(1.0);
      i180 = ~~Math_fround(Math_fround((i179 ? Math_fround(1.0) : f150) * Math_fround(255.0)) + Math_fround(.5)) << 24;
      HEAP32[i16 + (i148 << 2) >> 2] = (i157 ? 0 : i176) | (i164 ? 0 : i151) | (i165 ? 0 : i178) | (i177 ? 0 : i180);
     }
     if ((i148 | 0) < (i99 | 0)) {
      i148 = i148 + 1 | 0;
      f45 = f158;
      i149 = i159;
      f35 = f160;
      f68 = f163;
     } else break;
    }
    if ((i4 | 0) == 292) ___assert_fail(38278, 56850, 1245, 38287);
    L444 : do if (!i97) {
     i181 = -1;
     f182 = f163;
     f183 = f158;
     i184 = i159;
     f185 = f160;
    } else {
     i149 = i11 + 4 | 0;
     i148 = i11 + 8 | 0;
     i146 = i11 + 12 | 0;
     i145 = i8 + 4 | 0;
     i144 = i7 + 4 | 0;
     i139 = i7 + 4 | 0;
     i138 = i96 + 6416 | 0;
     i136 = 0;
     i134 = -1;
     f68 = f158;
     i135 = i159;
     f35 = f160;
     f45 = f163;
     L446 : while (1) {
      f150 = Math_fround(HEAPF32[i132 >> 2]);
      f170 = Math_fround(HEAPF32[i23 >> 2]);
      f152 = Math_fround(f150 + Math_fround(HEAPF32[i133 >> 2]));
      f171 = Math_fround(f170 + Math_fround(HEAPF32[i94 >> 2]));
      switch (i136 | 0) {
      case 0:
       {
        f186 = Math_fround(f170 + Math_fround(5.0));
        f187 = Math_fround(f152 - f37);
        f188 = f170;
        f189 = Math_fround(f150 + f37);
        break;
       }
      case 1:
       {
        f186 = Math_fround(f171 - f37);
        f187 = f152;
        f188 = Math_fround(f170 + f37);
        f189 = Math_fround(f152 + Math_fround(-5.0));
        break;
       }
      case 2:
       {
        f186 = f171;
        f187 = Math_fround(f152 - f37);
        f188 = Math_fround(f171 + Math_fround(-5.0));
        f189 = Math_fround(f150 + f37);
        break;
       }
      case 3:
       {
        f186 = Math_fround(f171 - f37);
        f187 = Math_fround(f150 + Math_fround(5.0));
        f188 = Math_fround(f170 + f37);
        f189 = f150;
        break;
       }
      default:
       {
        i4 = 322;
        break L446;
       }
      }
      HEAPF32[i11 >> 2] = f189;
      HEAPF32[i149 >> 2] = f188;
      HEAPF32[i148 >> 2] = f187;
      HEAPF32[i146 >> 2] = f186;
      HEAP32[i6 >> 2] = i136 + 4;
      i82 = HEAP32[i46 >> 2] | 0;
      if ((i82 | 0) <= 0) {
       i4 = 324;
       break;
      }
      i180 = __Z6ImHashPKvij(i6, 4, HEAP32[(HEAP32[i137 >> 2] | 0) + (i82 + -1 << 2) >> 2] | 0) | 0;
      i82 = HEAP32[1460598] | 0;
      if ((HEAP32[i82 + 6420 >> 2] | 0) == (i180 | 0)) HEAP8[i82 + 6432 >> 0] = 1;
      if ((HEAP32[i82 + 6424 >> 2] | 0) == (i180 | 0)) HEAP8[i82 + 6436 >> 0] = 1;
      __ZN5ImGui14ButtonBehaviorERK6ImRectjPbS3_i(i11, i180, i9, i10, 32) | 0;
      do if (!(HEAP8[i9 >> 0] | 0)) {
       if (!(HEAP8[i10 >> 0] | 0)) {
        i190 = i134;
        f191 = f68;
        i192 = i135;
        f193 = f35;
        f194 = f45;
        break;
       }
       HEAP32[i147 >> 2] = (i136 & 1) + 3;
       i4 = 334;
      } else {
       i180 = !(Math_fround(HEAPF32[i138 >> 2]) > Math_fround(.0500000007));
       i82 = (HEAP8[i10 >> 0] | 0) == 0;
       if (i180 & i82) {
        i190 = i134;
        f191 = f68;
        i192 = i135;
        f193 = f35;
        f194 = f45;
        break;
       }
       HEAP32[i147 >> 2] = (i136 & 1) + 3;
       if (i82) {
        i190 = i134;
        f191 = f68;
        i192 = i135;
        f193 = f35;
        f194 = f45;
       } else i4 = 334;
      } while (0);
      if ((i4 | 0) == 334) {
       i4 = 0;
       i82 = HEAP32[i63 >> 2] | 0;
       i180 = HEAP32[i23 >> 2] | 0;
       f150 = (HEAP32[tempDoublePtr >> 2] = i82, Math_fround(HEAPF32[tempDoublePtr >> 2]));
       f170 = (HEAP32[tempDoublePtr >> 2] = i180, Math_fround(HEAPF32[tempDoublePtr >> 2]));
       switch (i136 | 0) {
       case 0:
        {
         f171 = Math_fround(Math_fround(HEAPF32[i142 >> 2]) - Math_fround(HEAPF32[i143 >> 2]));
         i195 = i82;
         i196 = (HEAPF32[tempDoublePtr >> 2] = f171, HEAP32[tempDoublePtr >> 2] | 0);
         f197 = Math_fround(0.0);
         f198 = Math_fround(0.0);
         break;
        }
       case 1:
        {
         f171 = Math_fround(Math_fround(Math_fround(HEAPF32[i140 >> 2]) - Math_fround(HEAPF32[i141 >> 2])) + Math_fround(5.0));
         i195 = (HEAPF32[tempDoublePtr >> 2] = f171, HEAP32[tempDoublePtr >> 2] | 0);
         i196 = i180;
         f197 = Math_fround(1.0);
         f198 = Math_fround(0.0);
         break;
        }
       case 2:
        {
         f171 = Math_fround(Math_fround(Math_fround(HEAPF32[i142 >> 2]) - Math_fround(HEAPF32[i143 >> 2])) + Math_fround(5.0));
         i195 = i82;
         i196 = (HEAPF32[tempDoublePtr >> 2] = f171, HEAP32[tempDoublePtr >> 2] | 0);
         f197 = Math_fround(0.0);
         f198 = Math_fround(1.0);
         break;
        }
       case 3:
        {
         f171 = Math_fround(Math_fround(HEAPF32[i140 >> 2]) - Math_fround(HEAPF32[i141 >> 2]));
         i195 = (HEAPF32[tempDoublePtr >> 2] = f171, HEAP32[tempDoublePtr >> 2] | 0);
         i196 = i180;
         f197 = Math_fround(0.0);
         f198 = Math_fround(0.0);
         break;
        }
       default:
        {
         i195 = i82;
         i196 = i180;
         f197 = Math_fround(0.0);
         f198 = Math_fround(0.0);
        }
       }
       f171 = (HEAP32[tempDoublePtr >> 2] = i195, Math_fround(HEAPF32[tempDoublePtr >> 2]));
       f152 = Math_fround(Math_fround(f197 * Math_fround(f150 - f171)) + f171);
       f172 = (HEAP32[tempDoublePtr >> 2] = i196, Math_fround(HEAPF32[tempDoublePtr >> 2]));
       f101 = Math_fround(Math_fround(f198 * Math_fround(f170 - f172)) + f172);
       f44 = Math_fround(Math_fround(HEAPF32[i133 >> 2]) + f150);
       f150 = Math_fround(Math_fround(HEAPF32[i94 >> 2]) + f170);
       f170 = Math_fround(Math_fround(f44 + Math_fround(f197 * Math_fround(f171 - f44))) - f152);
       f44 = Math_fround(Math_fround(f150 + Math_fround(f198 * Math_fround(f172 - f150))) - f101);
       HEAPF32[i8 >> 2] = f170;
       HEAPF32[i145 >> 2] = f44;
       HEAP32[i6 >> 2] = HEAP32[i8 >> 2];
       HEAP32[i6 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
       __ZL23CalcSizeAfterConstraintP11ImGuiWindow6ImVec2(i7, i21, i6);
       if (f197 == Math_fround(0.0)) f199 = Math_fround(f152 - Math_fround(Math_fround(HEAPF32[i7 >> 2]) - f170)); else f199 = f152;
       if (f198 == Math_fround(0.0)) {
        f152 = Math_fround(HEAPF32[i144 >> 2]);
        f170 = Math_fround(f101 - Math_fround(f152 - f44));
        f200 = f170;
        i201 = (HEAPF32[tempDoublePtr >> 2] = f152, HEAP32[tempDoublePtr >> 2] | 0);
       } else {
        f200 = f101;
        i201 = HEAP32[i139 >> 2] | 0;
       }
       i190 = i136;
       f191 = f199;
       i192 = i201;
       f193 = f200;
       f194 = Math_fround(HEAPF32[i7 >> 2]);
      }
      i136 = i136 + 1 | 0;
      if ((i136 | 0) >= (i97 | 0)) {
       i181 = i190;
       f182 = f194;
       f183 = f191;
       i184 = i192;
       f185 = f193;
       break L444;
      } else {
       i134 = i190;
       f68 = f191;
       i135 = i192;
       f35 = f193;
       f45 = f194;
      }
     }
     if ((i4 | 0) == 322) ___assert_fail(54909, 31803, 5883, 33959); else if ((i4 | 0) == 324) ___assert_fail(38278, 56850, 1245, 38287);
    } while (0);
    i97 = HEAP32[1460598] | 0;
    i133 = (HEAP32[i97 + 6392 >> 2] | 0) + 452 | 0;
    i141 = HEAP32[i133 >> 2] | 0;
    if ((i141 | 0) <= 0) ___assert_fail(38278, 56850, 1268, 31920);
    HEAP32[i133 >> 2] = i141 + -1;
    do if ((HEAP32[i96 + 6704 >> 2] | 0) == (i21 | 0)) {
     L491 : do switch (HEAP32[i96 + 6680 >> 2] | 0) {
     case 3:
      {
       if (!(HEAP8[i96 + 238 >> 0] | 0)) {
        f202 = Math_fround(0.0);
        f203 = Math_fround(0.0);
        break L491;
       }
       f202 = Math_fround(Math_fround(Math_fround(HEAPF32[i97 + 860 >> 2]) - Math_fround(HEAPF32[i97 + 856 >> 2])) + Math_fround(0.0));
       f203 = Math_fround(Math_fround(Math_fround(HEAPF32[i97 + 868 >> 2]) - Math_fround(HEAPF32[i97 + 864 >> 2])) + Math_fround(0.0));
       break;
      }
     case 4:
      {
       f202 = Math_fround(Math_fround(Math_fround(HEAPF32[i97 + 808 >> 2]) - Math_fround(HEAPF32[i97 + 804 >> 2])) + Math_fround(0.0));
       f203 = Math_fround(Math_fround(Math_fround(HEAPF32[i97 + 816 >> 2]) - Math_fround(HEAPF32[i97 + 812 >> 2])) + Math_fround(0.0));
       break;
      }
     default:
      {
       f202 = Math_fround(0.0);
       f203 = Math_fround(0.0);
      }
     } while (0);
     if (!(f203 != Math_fround(0.0) | f202 != Math_fround(0.0))) {
      i204 = i184;
      f205 = f182;
      break;
     }
     f37 = Math_fround(Math_fround(HEAPF32[i96 + 20 >> 2]) * Math_fround(600.0));
     f45 = Math_fround(HEAPF32[i96 + 160 >> 2]);
     f35 = Math_fround(HEAPF32[i96 + 164 >> 2]);
     f68 = Math_fround(~~Math_fround(f37 * (f45 < f35 ? f45 : f35)) | 0);
     f35 = Math_fround(f202 * f68);
     f45 = Math_fround(f203 * f68);
     HEAP8[i96 + 6716 >> 0] = 0;
     HEAP8[i96 + 6731 >> 0] = 1;
     f68 = Math_fround(HEAPF32[i97 + 6020 >> 2]);
     f37 = Math_fround(HEAPF32[i97 + 6024 >> 2]);
     f101 = Math_fround(HEAPF32[i97 + 6028 >> 2]);
     f152 = Math_fround(HEAPF32[i97 + 6032 >> 2]);
     f170 = Math_fround(f152 * Math_fround(HEAPF32[i97 + 5356 >> 2]));
     i141 = f68 < Math_fround(0.0);
     i133 = f68 > Math_fround(1.0);
     i140 = ~~Math_fround(Math_fround((i133 ? Math_fround(1.0) : f68) * Math_fround(255.0)) + Math_fround(.5));
     i133 = f37 < Math_fround(0.0);
     i143 = f37 > Math_fround(1.0);
     i142 = ~~Math_fround(Math_fround((i143 ? Math_fround(1.0) : f37) * Math_fround(255.0)) + Math_fround(.5)) << 8;
     i143 = f101 < Math_fround(0.0);
     i147 = f101 > Math_fround(1.0);
     i137 = ~~Math_fround(Math_fround((i147 ? Math_fround(1.0) : f101) * Math_fround(255.0)) + Math_fround(.5)) << 16;
     i147 = f170 < Math_fround(0.0);
     i135 = f170 > Math_fround(1.0);
     i134 = ~~Math_fround(Math_fround((i135 ? Math_fround(1.0) : f170) * Math_fround(255.0)) + Math_fround(.5)) << 24;
     HEAP32[i16 >> 2] = (i133 ? 0 : i142) | (i141 ? 0 : i140) | (i143 ? 0 : i137) | (i147 ? 0 : i134);
     f170 = Math_fround(f35 + Math_fround(HEAPF32[i21 + 28 >> 2]));
     f35 = Math_fround(f45 + Math_fround(HEAPF32[i21 + 32 >> 2]));
     HEAPF32[i13 >> 2] = f170;
     HEAPF32[i13 + 4 >> 2] = f35;
     HEAP32[i6 >> 2] = HEAP32[i13 >> 2];
     HEAP32[i6 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
     __ZL23CalcSizeAfterConstraintP11ImGuiWindow6ImVec2(i7, i21, i6);
     f35 = Math_fround(HEAPF32[i7 >> 2]);
     i204 = HEAP32[i7 + 4 >> 2] | 0;
     f205 = f35;
    } else {
     i204 = i184;
     f205 = f182;
    } while (0);
    do if (f205 != Math_fround(3402823469999999843913219.0e14)) {
     HEAPF32[i21 + 28 >> 2] = f205;
     HEAP32[i21 + 32 >> 2] = i204;
     i97 = HEAP32[1460598] | 0;
     if (HEAP32[i42 >> 2] & 256 | 0) break;
     i134 = i97 + 11052 | 0;
     if (!(Math_fround(HEAPF32[i134 >> 2]) <= Math_fround(0.0))) break;
     HEAP32[i134 >> 2] = HEAP32[i97 + 24 >> 2];
    } while (0);
    do if (f183 != Math_fround(3402823469999999843913219.0e14)) {
     f35 = Math_fround(~~f183 | 0);
     f170 = Math_fround(~~f185 | 0);
     HEAPF32[i132 >> 2] = f35;
     HEAPF32[i23 >> 2] = f170;
     i97 = HEAP32[1460598] | 0;
     if (HEAP32[i42 >> 2] & 256 | 0) break;
     i134 = i97 + 11052 | 0;
     if (!(Math_fround(HEAPF32[i134 >> 2]) <= Math_fround(0.0))) break;
     HEAP32[i134 >> 2] = HEAP32[i97 + 24 >> 2];
    } while (0);
    i132 = i74;
    i97 = HEAP32[i132 + 4 >> 2] | 0;
    i134 = i28;
    HEAP32[i134 >> 2] = HEAP32[i132 >> 2];
    HEAP32[i134 + 4 >> 2] = i97;
    i131 = i181;
   } else i131 = -1; while (0);
   i206 = i131;
  } else i206 = -1;
  i28 = i21 + 20 | 0;
  f69 = Math_fround(HEAPF32[i28 >> 2]);
  if ((i56 & 33554496 | 0) != 0 | !(f69 > Math_fround(0.0))) f207 = Math_fround(Math_fround(HEAPF32[i81 >> 2]) * Math_fround(16.0)); else f207 = Math_fround(f69 * Math_fround(.649999976));
  f69 = Math_fround(~~f207 | 0);
  i96 = i21 + 548 | 0;
  HEAPF32[i96 >> 2] = f69;
  i93 = i21 + 632 | 0;
  __ZN10ImDrawList5ClearEv(HEAP32[i93 >> 2] | 0);
  i52 = HEAP32[i93 >> 2] | 0;
  HEAP32[i52 + 36 >> 2] = (HEAP8[i20 + 5501 >> 0] | 0 ? 2 : 0) | HEAPU8[i20 + 5500 >> 0];
  __ZN10ImDrawList13PushTextureIDEPv(i52, HEAP32[(HEAP32[(HEAP32[i20 + 6180 >> 2] | 0) + 68 >> 2] | 0) + 4 >> 2] | 0);
  i52 = HEAP32[1460598] | 0;
  i75 = i52 + 168 | 0;
  f69 = Math_fround(HEAPF32[i75 >> 2]);
  i91 = i52 + 176 | 0;
  do if (f69 != Math_fround(HEAPF32[i91 >> 2])) {
   f170 = Math_fround(HEAPF32[i52 + 172 >> 2]);
   if (!(f170 != Math_fround(HEAPF32[i52 + 180 >> 2]))) {
    i4 = 368;
    break;
   }
   i95 = i75;
   i97 = HEAP32[i95 + 4 >> 2] | 0;
   i134 = i10;
   HEAP32[i134 >> 2] = HEAP32[i95 >> 2];
   HEAP32[i134 + 4 >> 2] = i97;
   i97 = i91;
   i134 = HEAP32[i97 + 4 >> 2] | 0;
   i95 = i10 + 8 | 0;
   HEAP32[i95 >> 2] = HEAP32[i97 >> 2];
   HEAP32[i95 + 4 >> 2] = i134;
  } else i4 = 368; while (0);
  if ((i4 | 0) == 368) {
   i91 = HEAP32[i52 + 12 >> 2] | 0;
   i75 = HEAP32[i52 + 16 >> 2] | 0;
   HEAPF32[i10 >> 2] = Math_fround(0.0);
   HEAPF32[i10 + 4 >> 2] = Math_fround(0.0);
   HEAP32[i10 + 8 >> 2] = i91;
   HEAP32[i10 + 12 >> 2] = i75;
  }
  do if (i26 | (i34 | i62)) {
   i75 = HEAP32[i52 + 6392 >> 2] | 0;
   HEAP8[i75 + 120 >> 0] = 1;
   i91 = i75 + 632 | 0;
   i134 = HEAP32[i91 >> 2] | 0;
   i95 = i10;
   i97 = HEAP32[i95 + 4 >> 2] | 0;
   i132 = i8;
   HEAP32[i132 >> 2] = HEAP32[i95 >> 2];
   HEAP32[i132 + 4 >> 2] = i97;
   i97 = i10 + 8 | 0;
   i132 = HEAP32[i97 + 4 >> 2] | 0;
   i95 = i9;
   HEAP32[i95 >> 2] = HEAP32[i97 >> 2];
   HEAP32[i95 + 4 >> 2] = i132;
   HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
   HEAP32[i7 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
   HEAP32[i6 >> 2] = HEAP32[i9 >> 2];
   HEAP32[i6 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
   __ZN10ImDrawList12PushClipRectE6ImVec2S0_b(i134, i7, i6, 1);
   i134 = HEAP32[i91 >> 2] | 0;
   i91 = HEAP32[i134 + 60 >> 2] | 0;
   if ((i91 | 0) > 0) {
    i132 = HEAP32[i134 + 68 >> 2] | 0;
    i134 = i91 + -1 | 0;
    i91 = i132 + (i134 << 4) | 0;
    i134 = HEAP32[i91 + 4 >> 2] | 0;
    i132 = HEAP32[i91 + 8 >> 2] | 0;
    i95 = HEAP32[i91 + 12 >> 2] | 0;
    HEAP32[i75 + 464 >> 2] = HEAP32[i91 >> 2];
    HEAP32[i75 + 468 >> 2] = i134;
    HEAP32[i75 + 472 >> 2] = i132;
    HEAP32[i75 + 476 >> 2] = i95;
    break;
   } else ___assert_fail(38278, 56850, 1245, 38287);
  } else {
   i95 = HEAP32[i52 + 6392 >> 2] | 0;
   HEAP8[i95 + 120 >> 0] = 1;
   i75 = i95 + 632 | 0;
   i132 = HEAP32[i75 >> 2] | 0;
   i134 = i59 + 464 | 0;
   i91 = HEAP32[i134 + 4 >> 2] | 0;
   i97 = i8;
   HEAP32[i97 >> 2] = HEAP32[i134 >> 2];
   HEAP32[i97 + 4 >> 2] = i91;
   i91 = i59 + 472 | 0;
   i97 = HEAP32[i91 + 4 >> 2] | 0;
   i134 = i9;
   HEAP32[i134 >> 2] = HEAP32[i91 >> 2];
   HEAP32[i134 + 4 >> 2] = i97;
   HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
   HEAP32[i7 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
   HEAP32[i6 >> 2] = HEAP32[i9 >> 2];
   HEAP32[i6 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
   __ZN10ImDrawList12PushClipRectE6ImVec2S0_b(i132, i7, i6, 1);
   i132 = HEAP32[i75 >> 2] | 0;
   i75 = HEAP32[i132 + 60 >> 2] | 0;
   if ((i75 | 0) > 0) {
    i97 = HEAP32[i132 + 68 >> 2] | 0;
    i132 = i75 + -1 | 0;
    i75 = i97 + (i132 << 4) | 0;
    i132 = HEAP32[i75 + 4 >> 2] | 0;
    i97 = HEAP32[i75 + 8 >> 2] | 0;
    i134 = HEAP32[i75 + 12 >> 2] | 0;
    HEAP32[i95 + 464 >> 2] = HEAP32[i75 >> 2];
    HEAP32[i95 + 468 >> 2] = i132;
    HEAP32[i95 + 472 >> 2] = i97;
    HEAP32[i95 + 476 >> 2] = i134;
    break;
   } else ___assert_fail(38278, 56850, 1245, 38287);
  } while (0);
  do if (!i24) {
   i52 = HEAP32[1460598] | 0;
   i62 = HEAP32[i52 + 6512 >> 2] | 0;
   L532 : do if ((i62 | 0) > 0) {
    i26 = HEAP32[i52 + 6520 >> 2] | 0;
    i134 = i62;
    while (1) {
     i95 = i134;
     i134 = i134 + -1 | 0;
     i97 = HEAP32[i26 + (i134 * 36 | 0) + 4 >> 2] | 0;
     if (i97 | 0) if (HEAP32[i97 + 8 >> 2] & 134217728 | 0) {
      i208 = i97;
      break L532;
     }
     if ((i95 | 0) <= 1) {
      i208 = 0;
      break;
     }
    }
   } else i208 = 0; while (0);
   if ((i208 | 0) != (i21 | 0)) break;
   f69 = Math_fround(HEAPF32[i20 + 6948 >> 2]);
   f170 = Math_fround(HEAPF32[i52 + 6116 >> 2]);
   f35 = Math_fround(HEAPF32[i52 + 6120 >> 2]);
   f45 = Math_fround(HEAPF32[i52 + 6124 >> 2]);
   f101 = Math_fround(HEAPF32[i52 + 6128 >> 2]);
   f37 = Math_fround(f101 * Math_fround(f69 * Math_fround(HEAPF32[i52 + 5356 >> 2])));
   i62 = f170 < Math_fround(0.0);
   i134 = f170 > Math_fround(1.0);
   i26 = ~~Math_fround(Math_fround((i134 ? Math_fround(1.0) : f170) * Math_fround(255.0)) + Math_fround(.5));
   i134 = f35 < Math_fround(0.0);
   i95 = f35 > Math_fround(1.0);
   i97 = ~~Math_fround(Math_fround((i95 ? Math_fround(1.0) : f35) * Math_fround(255.0)) + Math_fround(.5)) << 8;
   i95 = f45 < Math_fround(0.0);
   i132 = f45 > Math_fround(1.0);
   i75 = ~~Math_fround(Math_fround((i132 ? Math_fround(1.0) : f45) * Math_fround(255.0)) + Math_fround(.5)) << 16;
   i132 = f37 < Math_fround(0.0);
   i91 = f37 > Math_fround(1.0);
   i147 = ~~Math_fround(Math_fround((i91 ? Math_fround(1.0) : f37) * Math_fround(255.0)) + Math_fround(.5)) << 24;
   __ZN10ImDrawList13AddRectFilledERK6ImVec2S2_jfi(HEAP32[i93 >> 2] | 0, i10, i10 + 8 | 0, (i134 ? 0 : i97) | (i62 ? 0 : i26) | (i95 ? 0 : i75) | (i132 ? 0 : i147), Math_fround(0.0), 15);
  } while (0);
  i24 = i20 + 6704 | 0;
  if ((HEAP32[i24 >> 2] | 0) == (i21 | 0)) {
   f37 = Math_fround(HEAPF32[i21 + 12 >> 2]);
   f45 = Math_fround(HEAPF32[i23 >> 2]);
   f35 = Math_fround(f37 + Math_fround(HEAPF32[i28 >> 2]));
   f170 = Math_fround(f45 + Math_fround(HEAPF32[i94 >> 2]));
   f69 = Math_fround(HEAPF32[i81 >> 2]);
   f101 = Math_fround(f37 - f69);
   HEAPF32[i6 >> 2] = f101;
   f37 = Math_fround(f45 - f69);
   HEAPF32[i6 + 4 >> 2] = f37;
   f45 = Math_fround(f69 + f35);
   HEAPF32[i6 + 8 >> 2] = f45;
   f35 = Math_fround(f69 + f170);
   HEAPF32[i6 + 12 >> 2] = f35;
   do if (!(Math_fround(HEAPF32[i10 >> 2]) >= f101)) i4 = 389; else {
    if (!(Math_fround(HEAPF32[i10 + 4 >> 2]) >= f37)) {
     i4 = 389;
     break;
    }
    if (!(Math_fround(HEAPF32[i10 + 8 >> 2]) <= f45)) {
     i4 = 389;
     break;
    }
    if (!(Math_fround(HEAPF32[i10 + 12 >> 2]) <= f35)) i4 = 389;
   } while (0);
   if ((i4 | 0) == 389) {
    f35 = Math_fround(Math_fround(HEAPF32[i20 + 6712 >> 2]) * Math_fround(.25));
    i147 = HEAP32[1460598] | 0;
    f45 = Math_fround(HEAPF32[i147 + 6164 >> 2]);
    f37 = Math_fround(HEAPF32[i147 + 6168 >> 2]);
    f101 = Math_fround(HEAPF32[i147 + 6172 >> 2]);
    f170 = Math_fround(HEAPF32[i147 + 6176 >> 2]);
    f69 = Math_fround(f170 * Math_fround(f35 * Math_fround(HEAPF32[i147 + 5356 >> 2])));
    i147 = f45 < Math_fround(0.0);
    i132 = f45 > Math_fround(1.0);
    i75 = ~~Math_fround(Math_fround((i132 ? Math_fround(1.0) : f45) * Math_fround(255.0)) + Math_fround(.5));
    i132 = f37 < Math_fround(0.0);
    i95 = f37 > Math_fround(1.0);
    i26 = ~~Math_fround(Math_fround((i95 ? Math_fround(1.0) : f37) * Math_fround(255.0)) + Math_fround(.5)) << 8;
    i95 = f101 < Math_fround(0.0);
    i62 = f101 > Math_fround(1.0);
    i97 = ~~Math_fround(Math_fround((i62 ? Math_fround(1.0) : f101) * Math_fround(255.0)) + Math_fround(.5)) << 16;
    i62 = f69 < Math_fround(0.0);
    i134 = f69 > Math_fround(1.0);
    i91 = ~~Math_fround(Math_fround((i134 ? Math_fround(1.0) : f69) * Math_fround(255.0)) + Math_fround(.5)) << 24;
    __ZN10ImDrawList13AddRectFilledERK6ImVec2S2_jfi(HEAP32[i93 >> 2] | 0, i6, i6 + 8 | 0, (i132 ? 0 : i26) | (i147 ? 0 : i75) | (i95 ? 0 : i97) | (i62 ? 0 : i91), Math_fround(HEAPF32[i20 + 5368 >> 2]), 15);
   }
  }
  f69 = Math_fround(HEAPF32[i100 >> 2]);
  f101 = Math_fround(HEAPF32[i84 >> 2]);
  do if (i98) i209 = 1; else {
   i91 = HEAP32[i20 + 6644 >> 2] | 0;
   if (!i91) {
    i209 = 0;
    break;
   }
   i209 = (HEAP32[i60 >> 2] | 0) == (HEAP32[i91 + 760 >> 2] | 0);
  } while (0);
  f37 = Math_fround(HEAPF32[i63 >> 2]);
  i60 = i21 + 28 | 0;
  f45 = Math_fround(f37 + Math_fround(HEAPF32[i60 >> 2]));
  f37 = Math_fround(HEAPF32[i23 >> 2]);
  if (!(HEAP32[i42 >> 2] & 1)) {
   i91 = HEAP32[1460598] | 0;
   f35 = Math_fround(HEAPF32[i91 + 6188 >> 2]);
   f170 = Math_fround(f35 * Math_fround(HEAPF32[i61 >> 2]));
   f210 = Math_fround(f170 + Math_fround(Math_fround(HEAPF32[i91 + 5412 >> 2]) * Math_fround(2.0)));
  } else f210 = Math_fround(0.0);
  f170 = Math_fround(f37 + f210);
  i91 = i63;
  i62 = HEAP32[i91 >> 2] | 0;
  i97 = HEAP32[i91 + 4 >> 2] | 0;
  i91 = i8;
  HEAP32[i91 >> 2] = i62;
  HEAP32[i91 + 4 >> 2] = i97;
  i91 = i8 + 8 | 0;
  HEAPF32[i91 >> 2] = f45;
  i95 = i8 + 12 | 0;
  HEAPF32[i95 >> 2] = f170;
  do if (!(HEAP8[i104 >> 0] | 0)) {
   i75 = i80 ? i56 >>> 24 & 1 | 2 : 4;
   i147 = HEAP32[1460598] | 0;
   i26 = i147 + 5508 + (i75 << 4) | 0;
   f170 = Math_fround(HEAPF32[i26 >> 2]);
   f45 = Math_fround(HEAPF32[i26 + 4 >> 2]);
   f37 = Math_fround(HEAPF32[i26 + 8 >> 2]);
   f35 = Math_fround(HEAPF32[i26 + 12 >> 2]);
   f68 = Math_fround(f35 * Math_fround(HEAPF32[i147 + 5356 >> 2]));
   i26 = f170 < Math_fround(0.0);
   i75 = f170 > Math_fround(1.0);
   i132 = ~~Math_fround(Math_fround((i75 ? Math_fround(1.0) : f170) * Math_fround(255.0)) + Math_fround(.5));
   i75 = f45 < Math_fround(0.0);
   i134 = f45 > Math_fround(1.0);
   i137 = ~~Math_fround(Math_fround((i134 ? Math_fround(1.0) : f45) * Math_fround(255.0)) + Math_fround(.5)) << 8;
   i134 = f37 < Math_fround(0.0);
   i143 = f37 > Math_fround(1.0);
   i140 = ~~Math_fround(Math_fround((i143 ? Math_fround(1.0) : f37) * Math_fround(255.0)) + Math_fround(.5)) << 16;
   i143 = (i75 ? 0 : i137) | (i26 ? 0 : i132) | (i134 ? 0 : i140);
   i140 = f68 < Math_fround(0.0);
   i134 = f68 > Math_fround(1.0);
   i132 = ~~Math_fround(Math_fround((i134 ? Math_fround(1.0) : f68) * Math_fround(255.0)) + Math_fround(.5)) << 24;
   i134 = i20 + 6560 | 0;
   if (!(HEAP32[i134 >> 2] | 0)) i211 = (i140 ? 0 : i132) | i143; else {
    f68 = Math_fround(HEAPF32[i20 + 6624 >> 2]);
    i132 = f68 < Math_fround(0.0);
    i140 = f68 > Math_fround(1.0);
    i26 = ~~Math_fround(Math_fround((i140 ? Math_fround(1.0) : f68) * Math_fround(255.0)) + Math_fround(.5)) << 24;
    HEAP32[i134 >> 2] = 0;
    i211 = (i132 ? 0 : i26) | i143 & 16777215;
   }
   i143 = HEAP32[i93 >> 2] | 0;
   if (!(HEAP32[i42 >> 2] & 1)) {
    f68 = Math_fround(HEAPF32[i147 + 6188 >> 2]);
    f37 = Math_fround(f68 * Math_fround(HEAPF32[i61 >> 2]));
    f212 = Math_fround(f37 + Math_fround(Math_fround(HEAPF32[i147 + 5412 >> 2]) * Math_fround(2.0)));
   } else f212 = Math_fround(0.0);
   f37 = Math_fround(HEAPF32[i63 >> 2]);
   f68 = Math_fround(f37 + Math_fround(0.0));
   f45 = Math_fround(HEAPF32[i23 >> 2]);
   f170 = Math_fround(f212 + f45);
   HEAPF32[i6 >> 2] = f68;
   HEAPF32[i6 + 4 >> 2] = f170;
   f170 = Math_fround(f37 + Math_fround(HEAPF32[i28 >> 2]));
   f37 = Math_fround(f45 + Math_fround(HEAPF32[i94 >> 2]));
   HEAPF32[i7 >> 2] = f170;
   HEAPF32[i7 + 4 >> 2] = f37;
   __ZN10ImDrawList13AddRectFilledERK6ImVec2S2_jfi(i143, i6, i7, i211, f69, i87 ? 15 : 12);
   i143 = (HEAP8[i104 >> 0] | 0) == 0 ? (i209 ? 11 : 10) : 12;
   i147 = HEAP32[1460598] | 0;
   i26 = i147 + 5508 + (i143 << 4) | 0;
   f37 = Math_fround(HEAPF32[i26 >> 2]);
   f170 = Math_fround(HEAPF32[i26 + 4 >> 2]);
   f45 = Math_fround(HEAPF32[i26 + 8 >> 2]);
   f68 = Math_fround(HEAPF32[i26 + 12 >> 2]);
   f35 = Math_fround(f68 * Math_fround(HEAPF32[i147 + 5356 >> 2]));
   if (!i87) {
    i147 = f170 < Math_fround(0.0);
    i26 = f170 > Math_fround(1.0);
    i143 = ~~Math_fround(Math_fround((i26 ? Math_fround(1.0) : f170) * Math_fround(255.0)) + Math_fround(.5)) << 8;
    i26 = f37 < Math_fround(0.0);
    i132 = f37 > Math_fround(1.0);
    i134 = ~~Math_fround(Math_fround((i132 ? Math_fround(1.0) : f37) * Math_fround(255.0)) + Math_fround(.5));
    i132 = f45 < Math_fround(0.0);
    i140 = f45 > Math_fround(1.0);
    i137 = ~~Math_fround(Math_fround((i140 ? Math_fround(1.0) : f45) * Math_fround(255.0)) + Math_fround(.5)) << 16;
    i140 = f35 < Math_fround(0.0);
    i75 = f35 > Math_fround(1.0);
    i141 = ~~Math_fround(Math_fround((i75 ? Math_fround(1.0) : f35) * Math_fround(255.0)) + Math_fround(.5)) << 24;
    __ZN10ImDrawList13AddRectFilledERK6ImVec2S2_jfi(HEAP32[i93 >> 2] | 0, i8, i8 + 8 | 0, (i147 ? 0 : i143) | (i26 ? 0 : i134) | (i132 ? 0 : i137) | (i140 ? 0 : i141), f69, 3);
   }
   if (i56 & 1024 | 0) {
    f35 = Math_fround(HEAPF32[i23 >> 2]);
    i141 = HEAP32[i42 >> 2] | 0;
    if (!(i141 & 1)) {
     i140 = HEAP32[1460598] | 0;
     f45 = Math_fround(HEAPF32[i140 + 6188 >> 2]);
     f37 = Math_fround(f45 * Math_fround(HEAPF32[i61 >> 2]));
     f213 = Math_fround(f37 + Math_fround(Math_fround(HEAPF32[i140 + 5412 >> 2]) * Math_fround(2.0)));
    } else f213 = Math_fround(0.0);
    f37 = Math_fround(f35 + f213);
    f45 = Math_fround(HEAPF32[i21 + 12 >> 2]);
    f170 = Math_fround(f45 + Math_fround(HEAPF32[i60 >> 2]));
    if (!(i141 & 1024)) {
     f214 = Math_fround(0.0);
     i215 = HEAP32[1460598] | 0;
    } else {
     f68 = Math_fround(HEAPF32[i79 >> 2]);
     i141 = HEAP32[1460598] | 0;
     f152 = Math_fround(HEAPF32[i141 + 6188 >> 2]);
     f44 = Math_fround(f68 + Math_fround(f152 * Math_fround(HEAPF32[i61 >> 2])));
     f214 = Math_fround(f44 + Math_fround(Math_fround(HEAPF32[i141 + 5412 >> 2]) * Math_fround(2.0)));
     i215 = i141;
    }
    f44 = Math_fround(f37 + f214);
    HEAPF32[i6 >> 2] = f45;
    HEAPF32[i6 + 4 >> 2] = f37;
    HEAPF32[i6 + 8 >> 2] = f170;
    i141 = i6 + 12 | 0;
    HEAPF32[i141 >> 2] = f44;
    f152 = Math_fround(f45 + Math_fround(HEAPF32[i28 >> 2]));
    f68 = Math_fround(f35 + Math_fround(HEAPF32[i94 >> 2]));
    HEAPF32[i7 >> 2] = f45;
    HEAPF32[i7 + 4 >> 2] = f35;
    HEAPF32[i7 + 8 >> 2] = f152;
    HEAPF32[i7 + 12 >> 2] = f68;
    i140 = f45 == f45 & Math_fround(0.0) == Math_fround(0.0);
    i137 = HEAP32[(f37 >= f35 ? i6 : i7) + 4 >> 2] | 0;
    i132 = i6;
    HEAP32[i132 >> 2] = HEAP32[(i140 ? i6 : i7) >> 2];
    HEAP32[i132 + 4 >> 2] = i137;
    i137 = i6 + 8 | 0;
    i132 = i7 + 8 | 0;
    i140 = HEAP32[(f44 < f68 ? i137 : i132) + 4 >> 2] | 0;
    i134 = i137;
    HEAP32[i134 >> 2] = HEAP32[(f170 < f152 ? i137 : i132) >> 2];
    HEAP32[i134 + 4 >> 2] = i140;
    f152 = Math_fround(HEAPF32[i215 + 5716 >> 2]);
    f170 = Math_fround(HEAPF32[i215 + 5720 >> 2]);
    f68 = Math_fround(HEAPF32[i215 + 5724 >> 2]);
    f44 = Math_fround(HEAPF32[i215 + 5728 >> 2]);
    f35 = Math_fround(f44 * Math_fround(HEAPF32[i215 + 5356 >> 2]));
    i140 = f152 < Math_fround(0.0);
    i134 = f152 > Math_fround(1.0);
    i132 = ~~Math_fround(Math_fround((i134 ? Math_fround(1.0) : f152) * Math_fround(255.0)) + Math_fround(.5));
    i134 = f170 < Math_fround(0.0);
    i26 = f170 > Math_fround(1.0);
    i143 = ~~Math_fround(Math_fround((i26 ? Math_fround(1.0) : f170) * Math_fround(255.0)) + Math_fround(.5)) << 8;
    i26 = f68 < Math_fround(0.0);
    i147 = f68 > Math_fround(1.0);
    i75 = ~~Math_fround(Math_fround((i147 ? Math_fround(1.0) : f68) * Math_fround(255.0)) + Math_fround(.5)) << 16;
    i147 = f35 < Math_fround(0.0);
    i142 = f35 > Math_fround(1.0);
    i133 = ~~Math_fround(Math_fround((i142 ? Math_fround(1.0) : f35) * Math_fround(255.0)) + Math_fround(.5)) << 24;
    __ZN10ImDrawList13AddRectFilledERK6ImVec2S2_jfi(HEAP32[i93 >> 2] | 0, i6, i137, (i134 ? 0 : i143) | (i140 ? 0 : i132) | (i26 ? 0 : i75) | (i147 ? 0 : i133), i87 ? f69 : Math_fround(0.0), 3);
    f35 = Math_fround(HEAPF32[i20 + 5420 >> 2]);
    do if (f35 > Math_fround(0.0)) {
     f68 = Math_fround(HEAPF32[i141 >> 2]);
     f170 = Math_fround(HEAPF32[i23 >> 2]);
     if (!(f68 < Math_fround(f170 + Math_fround(HEAPF32[i94 >> 2])))) break;
     i133 = HEAP32[i93 >> 2] | 0;
     HEAP32[i7 >> 2] = HEAP32[i6 >> 2];
     HEAPF32[i7 + 4 >> 2] = f68;
     i147 = i137;
     i75 = HEAP32[i147 + 4 >> 2] | 0;
     i26 = i9;
     HEAP32[i26 >> 2] = HEAP32[i147 >> 2];
     HEAP32[i26 + 4 >> 2] = i75;
     i75 = HEAP32[1460598] | 0;
     f68 = Math_fround(HEAPF32[i75 + 5588 >> 2]);
     f170 = Math_fround(HEAPF32[i75 + 5592 >> 2]);
     f152 = Math_fround(HEAPF32[i75 + 5596 >> 2]);
     f44 = Math_fround(HEAPF32[i75 + 5600 >> 2]);
     f37 = Math_fround(f44 * Math_fround(HEAPF32[i75 + 5356 >> 2]));
     i75 = f68 < Math_fround(0.0);
     i26 = f68 > Math_fround(1.0);
     i147 = ~~Math_fround(Math_fround((i26 ? Math_fround(1.0) : f68) * Math_fround(255.0)) + Math_fround(.5));
     i26 = f170 < Math_fround(0.0);
     i132 = f170 > Math_fround(1.0);
     i140 = ~~Math_fround(Math_fround((i132 ? Math_fround(1.0) : f170) * Math_fround(255.0)) + Math_fround(.5)) << 8;
     i132 = f152 < Math_fround(0.0);
     i143 = f152 > Math_fround(1.0);
     i134 = ~~Math_fround(Math_fround((i143 ? Math_fround(1.0) : f152) * Math_fround(255.0)) + Math_fround(.5)) << 16;
     i143 = f37 < Math_fround(0.0);
     i142 = f37 > Math_fround(1.0);
     i135 = ~~Math_fround(Math_fround((i142 ? Math_fround(1.0) : f37) * Math_fround(255.0)) + Math_fround(.5)) << 24;
     __ZN10ImDrawList7AddLineERK6ImVec2S2_jf(i133, i7, i9, (i26 ? 0 : i140) | (i75 ? 0 : i147) | (i132 ? 0 : i134) | (i143 ? 0 : i135), f35);
    } while (0);
   }
   if (HEAP8[i21 + 116 >> 0] | 0) __ZN5ImGui9ScrollbarEi(1);
   if (HEAP8[i21 + 117 >> 0] | 0) __ZN5ImGui9ScrollbarEi(0);
   if (!(i56 & 2)) {
    f35 = Math_fround(f69 + f101);
    i137 = i6 + 4 | 0;
    i141 = 0;
    while (1) {
     f37 = Math_fround(HEAPF32[i63 >> 2]);
     f152 = Math_fround(f37 + Math_fround(HEAPF32[i28 >> 2]));
     f170 = Math_fround(HEAPF32[i23 >> 2]);
     f68 = Math_fround(f170 + Math_fround(HEAPF32[i94 >> 2]));
     f44 = Math_fround(f152 - f37);
     i52 = 4160 + (i141 * 24 | 0) | 0;
     f152 = Math_fround(f37 + Math_fround(f44 * Math_fround(HEAPF32[i52 >> 2])));
     f44 = Math_fround(f68 - f170);
     f68 = Math_fround(f170 + Math_fround(f44 * Math_fround(HEAPF32[i52 + 4 >> 2])));
     i135 = HEAP32[i93 >> 2] | 0;
     i143 = (i141 | 0) != 0;
     f44 = i143 ? f101 : f36;
     f170 = i143 ? f36 : f101;
     f37 = Math_fround(HEAPF32[i52 + 8 >> 2]);
     f45 = Math_fround(f44 * f37);
     f150 = Math_fround(HEAPF32[i52 + 12 >> 2]);
     f172 = Math_fround(f152 + f45);
     f45 = Math_fround(f68 + Math_fround(f170 * f150));
     i52 = i135 + 84 | 0;
     i143 = HEAP32[i52 >> 2] | 0;
     i134 = i135 + 88 | 0;
     do if ((i143 | 0) == (HEAP32[i134 >> 2] | 0)) {
      i132 = i143 + 1 | 0;
      if (!i143) i216 = 8; else i216 = ((i143 | 0) / 2 | 0) + i143 | 0;
      i147 = (i216 | 0) > (i132 | 0) ? i216 : i132;
      if ((i143 | 0) >= (i147 | 0)) {
       i217 = i143;
       break;
      }
      HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
      i132 = __ZL13MallocWrapperjPv(i147 << 3, 0) | 0;
      i75 = i135 + 92 | 0;
      i140 = HEAP32[i75 >> 2] | 0;
      if (!i140) i218 = i75; else {
       _memcpy(i132 | 0, i140 | 0, HEAP32[i52 >> 2] << 3 | 0) | 0;
       i140 = HEAP32[i75 >> 2] | 0;
       if (i140 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
       __ZL11FreeWrapperPvS_(i140, 0);
       i218 = i75;
      }
      HEAP32[i218 >> 2] = i132;
      HEAP32[i134 >> 2] = i147;
      i217 = HEAP32[i52 >> 2] | 0;
     } else i217 = i143; while (0);
     i143 = HEAP32[i135 + 92 >> 2] | 0;
     i134 = i143 + (i217 << 3) | 0;
     HEAPF32[i134 >> 2] = f172;
     HEAPF32[i134 + 4 >> 2] = f45;
     HEAP32[i52 >> 2] = (HEAP32[i52 >> 2] | 0) + 1;
     i134 = HEAP32[i93 >> 2] | 0;
     f171 = Math_fround(f152 + Math_fround(f170 * f37));
     f50 = Math_fround(f68 + Math_fround(f44 * f150));
     i143 = i134 + 84 | 0;
     i147 = HEAP32[i143 >> 2] | 0;
     i132 = i134 + 88 | 0;
     do if ((i147 | 0) == (HEAP32[i132 >> 2] | 0)) {
      i75 = i147 + 1 | 0;
      if (!i147) i219 = 8; else i219 = ((i147 | 0) / 2 | 0) + i147 | 0;
      i140 = (i219 | 0) > (i75 | 0) ? i219 : i75;
      if ((i147 | 0) >= (i140 | 0)) {
       i220 = i147;
       break;
      }
      HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
      i75 = __ZL13MallocWrapperjPv(i140 << 3, 0) | 0;
      i26 = i134 + 92 | 0;
      i133 = HEAP32[i26 >> 2] | 0;
      if (!i133) i221 = i26; else {
       _memcpy(i75 | 0, i133 | 0, HEAP32[i143 >> 2] << 3 | 0) | 0;
       i133 = HEAP32[i26 >> 2] | 0;
       if (i133 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
       __ZL11FreeWrapperPvS_(i133, 0);
       i221 = i26;
      }
      HEAP32[i221 >> 2] = i75;
      HEAP32[i132 >> 2] = i140;
      i220 = HEAP32[i143 >> 2] | 0;
     } else i220 = i147; while (0);
     i147 = HEAP32[i134 + 92 >> 2] | 0;
     i132 = i147 + (i220 << 3) | 0;
     HEAPF32[i132 >> 2] = f171;
     HEAPF32[i132 + 4 >> 2] = f50;
     HEAP32[i143 >> 2] = (HEAP32[i143 >> 2] | 0) + 1;
     i132 = HEAP32[i93 >> 2] | 0;
     f44 = Math_fround(f152 + Math_fround(f35 * f37));
     f170 = Math_fround(f68 + Math_fround(f35 * f150));
     HEAPF32[i6 >> 2] = f44;
     HEAPF32[i137 >> 2] = f170;
     i147 = 4160 + (i141 * 24 | 0) | 0;
     __ZN10ImDrawList13PathArcToFastERK6ImVec2fii(i132, i6, f69, HEAP32[i147 + 16 >> 2] | 0, HEAP32[i147 + 20 >> 2] | 0);
     i147 = HEAP32[i93 >> 2] | 0;
     i132 = i147 + 92 | 0;
     __ZN10ImDrawList19AddConvexPolyFilledEPK6ImVec2ij(i147, HEAP32[i132 >> 2] | 0, HEAP32[i147 + 84 >> 2] | 0, HEAP32[i16 + (i141 << 2) >> 2] | 0);
     i52 = i147 + 84 | 0;
     i135 = i147 + 88 | 0;
     i147 = HEAP32[i135 >> 2] | 0;
     do if ((i147 | 0) < 0) {
      i140 = ((i147 | 0) / 2 | 0) + i147 | 0;
      i75 = (i140 | 0) > 0 ? i140 : 0;
      if ((i147 | 0) >= (i75 | 0)) break;
      HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
      i140 = __ZL13MallocWrapperjPv(i75 << 3, 0) | 0;
      i26 = HEAP32[i132 >> 2] | 0;
      if (!i26) i222 = i132; else {
       _memcpy(i140 | 0, i26 | 0, HEAP32[i52 >> 2] << 3 | 0) | 0;
       i26 = HEAP32[i132 >> 2] | 0;
       if (i26 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
       __ZL11FreeWrapperPvS_(i26, 0);
       i222 = i132;
      }
      HEAP32[i222 >> 2] = i140;
      HEAP32[i135 >> 2] = i75;
     } while (0);
     HEAP32[i52 >> 2] = 0;
     if ((i141 | 0) == (i99 | 0)) break; else i141 = i141 + 1 | 0;
    }
   }
   if (f101 > Math_fround(0.0)) {
    i141 = HEAP32[i93 >> 2] | 0;
    f35 = Math_fround(HEAPF32[i63 >> 2]);
    f150 = Math_fround(f35 + Math_fround(HEAPF32[i28 >> 2]));
    f35 = Math_fround(HEAPF32[i23 >> 2]);
    f68 = Math_fround(f35 + Math_fround(HEAPF32[i94 >> 2]));
    HEAPF32[i6 >> 2] = f150;
    HEAPF32[i6 + 4 >> 2] = f68;
    i137 = HEAP32[1460598] | 0;
    f68 = Math_fround(HEAPF32[i137 + 5588 >> 2]);
    f150 = Math_fround(HEAPF32[i137 + 5592 >> 2]);
    f35 = Math_fround(HEAPF32[i137 + 5596 >> 2]);
    f37 = Math_fround(HEAPF32[i137 + 5600 >> 2]);
    f152 = Math_fround(f37 * Math_fround(HEAPF32[i137 + 5356 >> 2]));
    i137 = f68 < Math_fround(0.0);
    i135 = f68 > Math_fround(1.0);
    i132 = ~~Math_fround(Math_fround((i135 ? Math_fround(1.0) : f68) * Math_fround(255.0)) + Math_fround(.5));
    i135 = f150 < Math_fround(0.0);
    i147 = f150 > Math_fround(1.0);
    i143 = ~~Math_fround(Math_fround((i147 ? Math_fround(1.0) : f150) * Math_fround(255.0)) + Math_fround(.5)) << 8;
    i147 = f35 < Math_fround(0.0);
    i134 = f35 > Math_fround(1.0);
    i75 = ~~Math_fround(Math_fround((i134 ? Math_fround(1.0) : f35) * Math_fround(255.0)) + Math_fround(.5)) << 16;
    i134 = f152 < Math_fround(0.0);
    i140 = f152 > Math_fround(1.0);
    i26 = ~~Math_fround(Math_fround((i140 ? Math_fround(1.0) : f152) * Math_fround(255.0)) + Math_fround(.5)) << 24;
    __ZN10ImDrawList7AddRectERK6ImVec2S2_jfif(i141, i63, i6, (i135 ? 0 : i143) | (i137 ? 0 : i132) | (i147 ? 0 : i75) | (i134 ? 0 : i26), f69, 15, f101);
   }
   if ((i206 | 0) != -1) {
    f152 = Math_fround(HEAPF32[i21 + 12 >> 2]);
    f35 = Math_fround(HEAPF32[i23 >> 2]);
    f150 = Math_fround(f152 + Math_fround(HEAPF32[i28 >> 2]));
    f68 = Math_fround(f150 + Math_fround(-1.0));
    f150 = Math_fround(Math_fround(f35 + Math_fround(HEAPF32[i94 >> 2])) + Math_fround(-1.0));
    switch (i206 | 0) {
    case 0:
     {
      f223 = Math_fround(f35 + Math_fround(0.0));
      f224 = Math_fround(f68 - f36);
      f225 = f35;
      f226 = Math_fround(f152 + f36);
      break;
     }
    case 1:
     {
      f223 = Math_fround(f150 - f36);
      f224 = f68;
      f225 = Math_fround(f35 + f36);
      f226 = f68;
      break;
     }
    case 2:
     {
      f223 = f150;
      f224 = Math_fround(f68 - f36);
      f225 = f150;
      f226 = Math_fround(f152 + f36);
      break;
     }
    case 3:
     {
      f223 = Math_fround(f150 - f36);
      f224 = Math_fround(f152 + Math_fround(0.0));
      f225 = Math_fround(f35 + f36);
      f226 = f152;
      break;
     }
    default:
     ___assert_fail(54909, 31803, 5883, 33959);
    }
    HEAPF32[i6 >> 2] = f226;
    HEAPF32[i6 + 4 >> 2] = f225;
    HEAPF32[i6 + 8 >> 2] = f224;
    HEAPF32[i6 + 12 >> 2] = f223;
    i26 = HEAP32[1460598] | 0;
    f152 = Math_fround(HEAPF32[i26 + 5972 >> 2]);
    f35 = Math_fround(HEAPF32[i26 + 5976 >> 2]);
    f150 = Math_fround(HEAPF32[i26 + 5980 >> 2]);
    f68 = Math_fround(HEAPF32[i26 + 5984 >> 2]);
    f37 = Math_fround(f68 * Math_fround(HEAPF32[i26 + 5356 >> 2]));
    i26 = f152 < Math_fround(0.0);
    i134 = f152 > Math_fround(1.0);
    i75 = ~~Math_fround(Math_fround((i134 ? Math_fround(1.0) : f152) * Math_fround(255.0)) + Math_fround(.5));
    i134 = f35 < Math_fround(0.0);
    i147 = f35 > Math_fround(1.0);
    i132 = ~~Math_fround(Math_fround((i147 ? Math_fround(1.0) : f35) * Math_fround(255.0)) + Math_fround(.5)) << 8;
    i147 = f150 < Math_fround(0.0);
    i137 = f150 > Math_fround(1.0);
    i143 = ~~Math_fround(Math_fround((i137 ? Math_fround(1.0) : f150) * Math_fround(255.0)) + Math_fround(.5)) << 16;
    i137 = f37 < Math_fround(0.0);
    i135 = f37 > Math_fround(1.0);
    i141 = ~~Math_fround(Math_fround((i135 ? Math_fround(1.0) : f37) * Math_fround(255.0)) + Math_fround(.5)) << 24;
    i135 = f101 <= Math_fround(1.0);
    __ZN10ImDrawList7AddLineERK6ImVec2S2_jf(HEAP32[i93 >> 2] | 0, i6, i6 + 8 | 0, (i134 ? 0 : i132) | (i26 ? 0 : i75) | (i147 ? 0 : i143) | (i137 ? 0 : i141), i135 ? Math_fround(1.0) : f101);
   }
   f37 = Math_fround(HEAPF32[i20 + 5420 >> 2]);
   if (i87 | !(f37 > Math_fround(0.0))) break;
   i135 = HEAP32[i93 >> 2] | 0;
   f150 = Math_fround(HEAPF32[i8 >> 2]);
   f35 = Math_fround(HEAPF32[i95 >> 2]);
   f152 = Math_fround(HEAPF32[i20 + 5372 >> 2]);
   f68 = Math_fround(f150 + f152);
   f150 = Math_fround(f35 + Math_fround(-1.0));
   HEAPF32[i6 >> 2] = f68;
   HEAPF32[i6 + 4 >> 2] = f150;
   f68 = Math_fround(Math_fround(HEAPF32[i91 >> 2]) - f152);
   HEAPF32[i7 >> 2] = f68;
   HEAPF32[i7 + 4 >> 2] = f150;
   i141 = HEAP32[1460598] | 0;
   f150 = Math_fround(HEAPF32[i141 + 5588 >> 2]);
   f68 = Math_fround(HEAPF32[i141 + 5592 >> 2]);
   f152 = Math_fround(HEAPF32[i141 + 5596 >> 2]);
   f35 = Math_fround(HEAPF32[i141 + 5600 >> 2]);
   f50 = Math_fround(f35 * Math_fround(HEAPF32[i141 + 5356 >> 2]));
   i141 = f150 < Math_fround(0.0);
   i137 = f150 > Math_fround(1.0);
   i143 = ~~Math_fround(Math_fround((i137 ? Math_fround(1.0) : f150) * Math_fround(255.0)) + Math_fround(.5));
   i137 = f68 < Math_fround(0.0);
   i147 = f68 > Math_fround(1.0);
   i75 = ~~Math_fround(Math_fround((i147 ? Math_fround(1.0) : f68) * Math_fround(255.0)) + Math_fround(.5)) << 8;
   i147 = f152 < Math_fround(0.0);
   i26 = f152 > Math_fround(1.0);
   i132 = ~~Math_fround(Math_fround((i26 ? Math_fround(1.0) : f152) * Math_fround(255.0)) + Math_fround(.5)) << 16;
   i26 = f50 < Math_fround(0.0);
   i134 = f50 > Math_fround(1.0);
   i140 = ~~Math_fround(Math_fround((i134 ? Math_fround(1.0) : f50) * Math_fround(255.0)) + Math_fround(.5)) << 24;
   __ZN10ImDrawList7AddLineERK6ImVec2S2_jf(i135, i6, i7, (i137 ? 0 : i75) | (i141 ? 0 : i143) | (i147 ? 0 : i132) | (i26 ? 0 : i140), f37);
  } else {
   i140 = i20 + 5420 | 0;
   i26 = HEAP32[i140 >> 2] | 0;
   HEAPF32[i140 >> 2] = f101;
   if (i209) i227 = (HEAP8[i20 + 6730 >> 0] | 0) == 0 ? 11 : 12; else i227 = 12;
   i132 = HEAP32[1460598] | 0;
   i147 = i132 + 5508 + (i227 << 4) | 0;
   f37 = Math_fround(HEAPF32[i147 >> 2]);
   f50 = Math_fround(HEAPF32[i147 + 4 >> 2]);
   f152 = Math_fround(HEAPF32[i147 + 8 >> 2]);
   f68 = Math_fround(HEAPF32[i147 + 12 >> 2]);
   f150 = Math_fround(f68 * Math_fround(HEAPF32[i132 + 5356 >> 2]));
   i132 = f37 < Math_fround(0.0);
   i147 = f37 > Math_fround(1.0);
   i143 = ~~Math_fround(Math_fround((i147 ? Math_fround(1.0) : f37) * Math_fround(255.0)) + Math_fround(.5));
   i147 = f50 < Math_fround(0.0);
   i141 = f50 > Math_fround(1.0);
   i75 = ~~Math_fround(Math_fround((i141 ? Math_fround(1.0) : f50) * Math_fround(255.0)) + Math_fround(.5)) << 8;
   i141 = f152 < Math_fround(0.0);
   i137 = f152 > Math_fround(1.0);
   i135 = ~~Math_fround(Math_fround((i137 ? Math_fround(1.0) : f152) * Math_fround(255.0)) + Math_fround(.5)) << 16;
   i137 = f150 < Math_fround(0.0);
   i134 = f150 > Math_fround(1.0);
   i133 = ~~Math_fround(Math_fround((i134 ? Math_fround(1.0) : f150) * Math_fround(255.0)) + Math_fround(.5)) << 24;
   i134 = i17;
   HEAP32[i134 >> 2] = i62;
   HEAP32[i134 + 4 >> 2] = i97;
   i134 = i8 + 8 | 0;
   i142 = HEAP32[i134 + 4 >> 2] | 0;
   i136 = i18;
   HEAP32[i136 >> 2] = HEAP32[i134 >> 2];
   HEAP32[i136 + 4 >> 2] = i142;
   HEAP32[i7 >> 2] = HEAP32[i17 >> 2];
   HEAP32[i7 + 4 >> 2] = HEAP32[i17 + 4 >> 2];
   HEAP32[i6 >> 2] = HEAP32[i18 >> 2];
   HEAP32[i6 + 4 >> 2] = HEAP32[i18 + 4 >> 2];
   __ZN5ImGui11RenderFrameE6ImVec2S0_jbf(i7, i6, (i147 ? 0 : i75) | (i132 ? 0 : i143) | (i141 ? 0 : i135) | (i137 ? 0 : i133), 1, f69);
   HEAP32[i140 >> 2] = i26;
  } while (0);
  if ((HEAP32[i24 >> 2] | 0) == (i21 | 0)) {
   f69 = Math_fround(HEAPF32[i100 >> 2]);
   f101 = Math_fround(HEAPF32[i20 + 5368 >> 2]);
   f36 = f69 >= f101 ? f69 : f101;
   i97 = i21 + 12 | 0;
   f101 = Math_fround(HEAPF32[i97 >> 2]);
   f150 = Math_fround(HEAPF32[i23 >> 2]);
   f152 = Math_fround(f101 + Math_fround(HEAPF32[i28 >> 2]));
   f50 = Math_fround(f150 + Math_fround(HEAPF32[i94 >> 2]));
   i62 = i6 + 4 | 0;
   i91 = i6 + 8 | 0;
   i99 = i6 + 12 | 0;
   f37 = Math_fround(HEAPF32[i81 >> 2]);
   f68 = Math_fround(f101 - f37);
   HEAPF32[i6 >> 2] = f68;
   f101 = Math_fround(f150 - f37);
   HEAPF32[i62 >> 2] = f101;
   f150 = Math_fround(f37 + f152);
   HEAPF32[i91 >> 2] = f150;
   f152 = Math_fround(f37 + f50);
   HEAPF32[i99 >> 2] = f152;
   do if (!(Math_fround(HEAPF32[i10 >> 2]) >= f68)) f228 = f36; else {
    if (!(Math_fround(HEAPF32[i10 + 4 >> 2]) >= f101)) {
     f228 = f36;
     break;
    }
    if (!(Math_fround(HEAPF32[i10 + 8 >> 2]) <= f150)) {
     f228 = f36;
     break;
    }
    if (!(Math_fround(HEAPF32[i10 + 12 >> 2]) <= f152)) {
     f228 = f36;
     break;
    }
    f50 = Math_fround(Math_fround(-1.0) - f37);
    f35 = Math_fround(f68 - f50);
    HEAPF32[i6 >> 2] = f35;
    f35 = Math_fround(f101 - f50);
    HEAPF32[i62 >> 2] = f35;
    f35 = Math_fround(f50 + f150);
    HEAPF32[i91 >> 2] = f35;
    f35 = Math_fround(f50 + f152);
    HEAPF32[i99 >> 2] = f35;
    f228 = f69;
   } while (0);
   f69 = Math_fround(HEAPF32[i20 + 6712 >> 2]);
   i99 = HEAP32[1460598] | 0;
   f152 = Math_fround(HEAPF32[i99 + 6164 >> 2]);
   f150 = Math_fround(HEAPF32[i99 + 6168 >> 2]);
   f101 = Math_fround(HEAPF32[i99 + 6172 >> 2]);
   f68 = Math_fround(HEAPF32[i99 + 6176 >> 2]);
   f37 = Math_fround(f68 * Math_fround(f69 * Math_fround(HEAPF32[i99 + 5356 >> 2])));
   i99 = f152 < Math_fround(0.0);
   i91 = f152 > Math_fround(1.0);
   i62 = ~~Math_fround(Math_fround((i91 ? Math_fround(1.0) : f152) * Math_fround(255.0)) + Math_fround(.5));
   i91 = f150 < Math_fround(0.0);
   i100 = f150 > Math_fround(1.0);
   i24 = ~~Math_fround(Math_fround((i100 ? Math_fround(1.0) : f150) * Math_fround(255.0)) + Math_fround(.5)) << 8;
   i100 = f101 < Math_fround(0.0);
   i60 = f101 > Math_fround(1.0);
   i80 = ~~Math_fround(Math_fround((i60 ? Math_fround(1.0) : f101) * Math_fround(255.0)) + Math_fround(.5)) << 16;
   i60 = f37 < Math_fround(0.0);
   i26 = f37 > Math_fround(1.0);
   i140 = ~~Math_fround(Math_fround((i26 ? Math_fround(1.0) : f37) * Math_fround(255.0)) + Math_fround(.5)) << 24;
   __ZN10ImDrawList7AddRectERK6ImVec2S2_jfif(HEAP32[i93 >> 2] | 0, i6, i6 + 8 | 0, (i91 ? 0 : i24) | (i99 ? 0 : i62) | (i100 ? 0 : i80) | (i60 ? 0 : i140), f228, -1, Math_fround(3.0));
   i229 = i97;
  } else i229 = i21 + 12 | 0;
  i140 = i74;
  i60 = HEAP32[i140 + 4 >> 2] | 0;
  i80 = i21 + 36 | 0;
  HEAP32[i80 >> 2] = HEAP32[i140 >> 2];
  HEAP32[i80 + 4 >> 2] = i60;
  f37 = Math_fround(HEAPF32[i229 >> 2]);
  f101 = Math_fround(HEAPF32[i21 + 84 >> 2]);
  f150 = Math_fround(f37 - f101);
  f152 = Math_fround(HEAPF32[i40 >> 2]);
  f69 = Math_fround(f150 + f152);
  HEAPF32[i21 + 528 >> 2] = f69;
  f69 = Math_fround(HEAPF32[i23 >> 2]);
  f68 = Math_fround(HEAPF32[i21 + 88 >> 2]);
  f36 = Math_fround(f69 - f68);
  f35 = Math_fround(HEAPF32[i41 >> 2]);
  f50 = Math_fround(f36 + f35);
  i60 = HEAP32[i42 >> 2] | 0;
  i80 = (i60 & 1 | 0) == 0;
  if (i80) {
   i140 = HEAP32[1460598] | 0;
   f171 = Math_fround(HEAPF32[i140 + 6188 >> 2]);
   f170 = Math_fround(f171 * Math_fround(HEAPF32[i61 >> 2]));
   f230 = Math_fround(f170 + Math_fround(Math_fround(HEAPF32[i140 + 5412 >> 2]) * Math_fround(2.0)));
  } else f230 = Math_fround(0.0);
  f170 = Math_fround(f50 + f230);
  i140 = (i60 & 1024 | 0) == 0;
  if (i140) f231 = Math_fround(0.0); else {
   f50 = Math_fround(HEAPF32[i79 >> 2]);
   i60 = HEAP32[1460598] | 0;
   f171 = Math_fround(HEAPF32[i60 + 6188 >> 2]);
   f44 = Math_fround(f50 + Math_fround(f171 * Math_fround(HEAPF32[i61 >> 2])));
   f231 = Math_fround(f44 + Math_fround(Math_fround(HEAPF32[i60 + 5412 >> 2]) * Math_fround(2.0)));
  }
  f44 = Math_fround(f170 + f231);
  HEAPF32[i21 + 532 >> 2] = f44;
  f44 = Math_fround(f150 - f152);
  f150 = Math_fround(HEAPF32[i30 >> 2]);
  if (f150 != Math_fround(0.0)) f232 = f150; else {
   f150 = Math_fround(HEAPF32[i28 >> 2]);
   f232 = Math_fround(f150 - Math_fround(HEAPF32[i21 + 108 >> 2]));
  }
  f150 = Math_fround(f44 + f232);
  HEAPF32[i21 + 536 >> 2] = f150;
  f150 = Math_fround(f36 - f35);
  f36 = Math_fround(HEAPF32[i39 >> 2]);
  if (f36 != Math_fround(0.0)) f233 = f36; else {
   f36 = Math_fround(HEAPF32[i94 >> 2]);
   f233 = Math_fround(f36 - Math_fround(HEAPF32[i21 + 112 >> 2]));
  }
  f36 = Math_fround(f150 + f233);
  HEAPF32[i21 + 540 >> 2] = f36;
  f36 = Math_fround(Math_fround(f152 + Math_fround(0.0)) - f101);
  HEAPF32[i21 + 436 >> 2] = f36;
  HEAPF32[i21 + 440 >> 2] = Math_fround(0.0);
  HEAPF32[i21 + 444 >> 2] = Math_fround(0.0);
  f101 = Math_fround(f36 + Math_fround(0.0));
  if (i80) {
   i80 = HEAP32[1460598] | 0;
   f36 = Math_fround(HEAPF32[i80 + 6188 >> 2]);
   f152 = Math_fround(f36 * Math_fround(HEAPF32[i61 >> 2]));
   f234 = Math_fround(f152 + Math_fround(Math_fround(HEAPF32[i80 + 5412 >> 2]) * Math_fround(2.0)));
  } else f234 = Math_fround(0.0);
  if (i140) {
   f235 = Math_fround(0.0);
   i236 = HEAP32[1460598] | 0;
  } else {
   f152 = Math_fround(HEAPF32[i79 >> 2]);
   i140 = HEAP32[1460598] | 0;
   f36 = Math_fround(HEAPF32[i140 + 6188 >> 2]);
   f150 = Math_fround(f152 + Math_fround(f36 * Math_fround(HEAPF32[i61 >> 2])));
   f235 = Math_fround(f150 + Math_fround(Math_fround(HEAPF32[i140 + 5412 >> 2]) * Math_fround(2.0)));
   i236 = i140;
  }
  f150 = Math_fround(f101 + f37);
  f37 = Math_fround(Math_fround(Math_fround(Math_fround(f234 + f235) + f35) - f68) + f69);
  i140 = i21 + 212 | 0;
  HEAPF32[i140 >> 2] = f150;
  HEAPF32[i21 + 216 >> 2] = f37;
  i80 = i140;
  i140 = HEAP32[i80 >> 2] | 0;
  i60 = HEAP32[i80 + 4 >> 2] | 0;
  i80 = i21 + 196 | 0;
  HEAP32[i80 >> 2] = i140;
  HEAP32[i80 + 4 >> 2] = i60;
  i80 = i21 + 204 | 0;
  HEAP32[i80 >> 2] = i140;
  HEAP32[i80 + 4 >> 2] = i60;
  i80 = i21 + 220 | 0;
  HEAP32[i80 >> 2] = i140;
  HEAP32[i80 + 4 >> 2] = i60;
  i80 = i21 + 228 | 0;
  HEAP8[i21 + 296 >> 0] = 0;
  HEAP32[i80 >> 2] = 0;
  HEAP32[i80 + 4 >> 2] = 0;
  HEAP32[i80 + 8 >> 2] = 0;
  HEAP32[i80 + 12 >> 2] = 0;
  i80 = HEAP32[i236 + 6392 >> 2] | 0;
  f37 = Math_fround(HEAPF32[i80 + 48 >> 2]);
  f150 = Math_fround(HEAPF32[i80 + 32 >> 2]);
  f69 = Math_fround(f37 - Math_fround(f150 - Math_fround(HEAPF32[i80 + 112 >> 2])));
  i80 = f69 <= Math_fround(0.0);
  i140 = (i80 ? Math_fround(0.0) : f69) > Math_fround(0.0) & 1;
  HEAP8[i21 + 297 >> 0] = i140;
  i140 = i21 + 312 | 0;
  HEAP32[i21 + 308 >> 2] = HEAP32[i140 >> 2];
  HEAP32[i140 >> 2] = 0;
  HEAP8[i21 + 316 >> 0] = 0;
  f69 = Math_fround((HEAP32[tempDoublePtr >> 2] = i60, Math_fround(HEAPF32[tempDoublePtr >> 2])) + Math_fround(-9999.0));
  HEAPF32[i21 + 244 >> 2] = f69;
  i60 = i21 + 328 | 0;
  i140 = i21 + 332 | 0;
  i80 = HEAP32[i140 >> 2] | 0;
  do if ((i80 | 0) < 0) {
   i100 = ((i80 | 0) / 2 | 0) + i80 | 0;
   i62 = (i100 | 0) > 0 ? i100 : 0;
   if ((i80 | 0) >= (i62 | 0)) break;
   HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
   i100 = __ZL13MallocWrapperjPv(i62 << 2, 0) | 0;
   i99 = i21 + 336 | 0;
   i24 = HEAP32[i99 >> 2] | 0;
   if (!i24) i237 = i99; else {
    _memcpy(i100 | 0, i24 | 0, HEAP32[i60 >> 2] << 2 | 0) | 0;
    i24 = HEAP32[i99 >> 2] | 0;
    if (i24 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
    __ZL11FreeWrapperPvS_(i24, 0);
    i237 = i99;
   }
   HEAP32[i237 >> 2] = i100;
   HEAP32[i140 >> 2] = i62;
  } while (0);
  HEAP32[i60 >> 2] = 0;
  HEAP32[i21 + 344 >> 2] = 0;
  if (i58) {
   i238 = HEAP32[i59 + 344 >> 2] | 0;
   i239 = HEAP32[i59 + 352 >> 2] | 0;
  } else {
   i238 = 0;
   i239 = 1;
  }
  HEAP32[i21 + 348 >> 2] = i238;
  i140 = i21 + 352 | 0;
  HEAP32[i140 >> 2] = i239;
  HEAP32[i21 + 356 >> 2] = HEAP32[i96 >> 2];
  HEAPF32[i21 + 360 >> 2] = Math_fround(-1.0);
  i80 = i21 + 364 | 0;
  i39 = i21 + 368 | 0;
  i30 = HEAP32[i39 >> 2] | 0;
  do if ((i30 | 0) < 0) {
   i41 = ((i30 | 0) / 2 | 0) + i30 | 0;
   i74 = (i41 | 0) > 0 ? i41 : 0;
   if ((i30 | 0) >= (i74 | 0)) break;
   HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
   i41 = __ZL13MallocWrapperjPv(i74 << 2, 0) | 0;
   i97 = i21 + 372 | 0;
   i93 = HEAP32[i97 >> 2] | 0;
   if (!i93) i240 = i97; else {
    _memcpy(i41 | 0, i93 | 0, HEAP32[i80 >> 2] << 2 | 0) | 0;
    i93 = HEAP32[i97 >> 2] | 0;
    if (i93 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
    __ZL11FreeWrapperPvS_(i93, 0);
    i240 = i97;
   }
   HEAP32[i240 >> 2] = i41;
   HEAP32[i39 >> 2] = i74;
  } while (0);
  HEAP32[i80 >> 2] = 0;
  i30 = i21 + 376 | 0;
  i96 = i21 + 380 | 0;
  i60 = HEAP32[i96 >> 2] | 0;
  do if ((i60 | 0) < 0) {
   i74 = ((i60 | 0) / 2 | 0) + i60 | 0;
   i41 = (i74 | 0) > 0 ? i74 : 0;
   if ((i60 | 0) >= (i41 | 0)) break;
   HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
   i74 = __ZL13MallocWrapperjPv(i41 << 2, 0) | 0;
   i97 = i21 + 384 | 0;
   i93 = HEAP32[i97 >> 2] | 0;
   if (!i93) i241 = i97; else {
    _memcpy(i74 | 0, i93 | 0, HEAP32[i30 >> 2] << 2 | 0) | 0;
    i93 = HEAP32[i97 >> 2] | 0;
    if (i93 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
    __ZL11FreeWrapperPvS_(i93, 0);
    i241 = i97;
   }
   HEAP32[i241 >> 2] = i74;
   HEAP32[i96 >> 2] = i41;
  } while (0);
  HEAP32[i30 >> 2] = 0;
  i96 = i21 + 388 | 0;
  i60 = i21 + 392 | 0;
  i41 = HEAP32[i60 >> 2] | 0;
  do if ((i41 | 0) < 0) {
   i74 = ((i41 | 0) / 2 | 0) + i41 | 0;
   i97 = (i74 | 0) > 0 ? i74 : 0;
   if ((i41 | 0) >= (i97 | 0)) break;
   HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
   i74 = __ZL13MallocWrapperjPv(i97 << 2, 0) | 0;
   i93 = i21 + 396 | 0;
   i62 = HEAP32[i93 >> 2] | 0;
   if (!i62) i242 = i93; else {
    _memcpy(i74 | 0, i62 | 0, HEAP32[i96 >> 2] << 2 | 0) | 0;
    i62 = HEAP32[i93 >> 2] | 0;
    if (i62 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
    __ZL11FreeWrapperPvS_(i62, 0);
    i242 = i93;
   }
   HEAP32[i242 >> 2] = i74;
   HEAP32[i60 >> 2] = i97;
  } while (0);
  HEAP32[i96 >> 2] = 0;
  HEAP32[i21 + 448 >> 2] = 0;
  HEAP32[i21 + 248 >> 2] = 0;
  HEAP32[i21 + 252 >> 2] = 0;
  HEAP32[i21 + 340 >> 2] = i21 + 600;
  i60 = i21 + 400 | 0;
  i41 = i21 + 404 | 0;
  i30 = HEAP32[i41 >> 2] | 0;
  do if ((i30 | 0) < 0) {
   i97 = ((i30 | 0) / 2 | 0) + i30 | 0;
   i74 = (i97 | 0) > 0 ? i97 : 0;
   if ((i30 | 0) >= (i74 | 0)) break;
   HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
   i97 = __ZL13MallocWrapperjPv(i74 * 40 | 0, 0) | 0;
   i93 = i21 + 408 | 0;
   i62 = HEAP32[i93 >> 2] | 0;
   if (!i62) i243 = i93; else {
    _memcpy(i97 | 0, i62 | 0, (HEAP32[i60 >> 2] | 0) * 40 | 0) | 0;
    i62 = HEAP32[i93 >> 2] | 0;
    if (i62 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
    __ZL11FreeWrapperPvS_(i62, 0);
    i243 = i93;
   }
   HEAP32[i243 >> 2] = i97;
   HEAP32[i41 >> 2] = i74;
  } while (0);
  HEAP32[i60 >> 2] = 0;
  i41 = i21 + 552 | 0;
  if ((HEAP32[i41 >> 2] | 0) >= 5) ___assert_fail(33973, 31803, 1927, 34016);
  i30 = HEAP32[i85 >> 2] | 0;
  HEAP32[i41 >> 2] = 3;
  HEAPF32[i21 + 564 >> 2] = Math_fround(0.0);
  i96 = i21 + 560 | 0;
  HEAPF32[i96 >> 2] = Math_fround(0.0);
  i74 = i21 + 556 | 0;
  HEAP32[i74 >> 2] = i30;
  if (i57) {
   i30 = i21 + 584 | 0;
   HEAP32[i30 >> 2] = 0;
   HEAP32[i30 + 4 >> 2] = 0;
   HEAP32[i30 + 8 >> 2] = 0;
   HEAP32[i30 + 12 >> 2] = 0;
   i244 = 0;
  } else i244 = 0;
  do {
   i30 = i21 + 584 + (i244 << 2) | 0;
   do if ((i244 | 0) > 0) {
    if (!(Math_fround(HEAPF32[i30 >> 2]) > Math_fround(0.0))) break;
    f69 = Math_fround(HEAPF32[i74 >> 2]);
    f150 = Math_fround(f69 + Math_fround(HEAPF32[i96 >> 2]));
    HEAPF32[i96 >> 2] = f150;
   } while (0);
   f150 = Math_fround(~~Math_fround(HEAPF32[i96 >> 2]) | 0);
   HEAPF32[i21 + 568 + (i244 << 2) >> 2] = f150;
   f150 = Math_fround(HEAPF32[i30 >> 2]);
   f69 = Math_fround(f150 + Math_fround(HEAPF32[i96 >> 2]));
   HEAPF32[i96 >> 2] = f69;
   HEAPF32[i30 >> 2] = Math_fround(0.0);
   i244 = i244 + 1 | 0;
  } while ((i244 | 0) < (HEAP32[i41 >> 2] | 0));
  do if (i53) {
   i41 = HEAP32[i59 + 352 >> 2] | 0;
   if ((HEAP32[i140 >> 2] | 0) == (i41 | 0)) break;
   HEAP32[i140 >> 2] = i41;
   i96 = HEAP32[i80 >> 2] | 0;
   do if ((i96 | 0) == (HEAP32[i39 >> 2] | 0)) {
    i74 = i96 + 1 | 0;
    if (!i96) i245 = 8; else i245 = ((i96 | 0) / 2 | 0) + i96 | 0;
    i85 = (i245 | 0) > (i74 | 0) ? i245 : i74;
    if ((i96 | 0) >= (i85 | 0)) {
     i246 = i96;
     i247 = i41;
     break;
    }
    HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
    i74 = __ZL13MallocWrapperjPv(i85 << 2, 0) | 0;
    i60 = i21 + 372 | 0;
    i97 = HEAP32[i60 >> 2] | 0;
    if (!i97) i248 = i60; else {
     _memcpy(i74 | 0, i97 | 0, HEAP32[i80 >> 2] << 2 | 0) | 0;
     i97 = HEAP32[i60 >> 2] | 0;
     if (i97 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
     __ZL11FreeWrapperPvS_(i97, 0);
     i248 = i60;
    }
    HEAP32[i248 >> 2] = i74;
    HEAP32[i39 >> 2] = i85;
    i246 = HEAP32[i80 >> 2] | 0;
    i247 = HEAP32[i140 >> 2] | 0;
   } else {
    i246 = i96;
    i247 = i41;
   } while (0);
   HEAP32[(HEAP32[i21 + 372 >> 2] | 0) + (i246 << 2) >> 2] = i247;
   HEAP32[i80 >> 2] = (HEAP32[i80 >> 2] | 0) + 1;
  } while (0);
  i80 = i21 + 144 | 0;
  i39 = HEAP32[i80 >> 2] | 0;
  if ((i39 | 0) > 0) HEAP32[i80 >> 2] = i39 + -1;
  i39 = i21 + 148 | 0;
  i80 = HEAP32[i39 >> 2] | 0;
  if ((i80 | 0) > 0) HEAP32[i39 >> 2] = i80 + -1;
  L776 : do if (i98) {
   __ZN5ImGui11FocusWindowEP11ImGuiWindow(i21);
   i80 = HEAP32[1460598] | 0;
   if ((HEAP32[i80 + 6644 >> 2] | 0) != (i21 | 0)) ___assert_fail(33628, 31803, 2895, 33650);
   i39 = HEAP32[i42 >> 2] | 0;
   do if (!(i39 & 262144)) {
    if ((i39 & 83886080 | 0) == 16777216) {
     i53 = HEAP32[i21 + 776 >> 2] | 0;
     if (i53 | 0) {
      i249 = i53;
      break;
     }
    }
    i53 = HEAP32[i80 + 6720 >> 2] | 0;
    if (i53 >>> 0 < 2) {
     HEAP32[i80 + 6648 >> 2] = 0;
     HEAP32[i21 + 776 + (i53 << 2) >> 2] = 0;
     HEAP8[i80 + 6733 >> 0] = 1;
     HEAP8[i80 + 6734 >> 0] = 0;
     HEAP32[i80 + 6736 >> 2] = 0;
     HEAPF32[i80 + 6740 >> 2] = Math_fround(3402823469999999843913219.0e14);
     HEAPF32[i80 + 6744 >> 2] = Math_fround(3402823469999999843913219.0e14);
     HEAPF32[i80 + 6748 >> 2] = Math_fround(-3402823469999999843913219.0e14);
     HEAPF32[i80 + 6752 >> 2] = Math_fround(-3402823469999999843913219.0e14);
     HEAP8[i80 + 6732 >> 0] = 1;
     break L776;
    } else ___assert_fail(33664, 31803, 2163, 33697);
   } else i249 = HEAP32[i21 + 776 >> 2] | 0; while (0);
   HEAP32[i80 + 6648 >> 2] = i249;
  } while (0);
  if (!i87) {
   i98 = HEAP32[i140 >> 2] | 0;
   HEAP32[i140 >> 2] = i98 | 16;
   i39 = i21 + 300 | 0;
   HEAP32[i39 >> 2] = (HEAP32[i39 >> 2] | 0) + 1;
   i53 = i21 + 304 | 0;
   HEAP32[i53 >> 2] = HEAP32[i53 >> 2] << 1;
   i41 = (i86 | 0) != 0;
   if (!i41) {
    i96 = HEAP32[i46 >> 2] | 0;
    if ((i96 | 0) <= 0) ___assert_fail(38278, 56850, 1245, 38287);
    i30 = __Z6ImHashPKvij(34023, 0, HEAP32[(HEAP32[i21 + 460 >> 2] | 0) + (i96 + -1 << 2) >> 2] | 0) | 0;
    i96 = HEAP32[1460598] | 0;
    if ((HEAP32[i96 + 6420 >> 2] | 0) == (i30 | 0)) HEAP8[i96 + 6432 >> 0] = 1;
    if ((HEAP32[i96 + 6424 >> 2] | 0) == (i30 | 0)) HEAP8[i96 + 6436 >> 0] = 1;
    f69 = Math_fround(HEAPF32[i63 >> 2]);
    i96 = i20 + 5408 | 0;
    f150 = Math_fround(f69 + Math_fround(HEAPF32[i96 >> 2]));
    f69 = Math_fround(HEAPF32[i23 >> 2]);
    i85 = i20 + 5412 | 0;
    f37 = Math_fround(f69 + Math_fround(HEAPF32[i85 >> 2]));
    f69 = Math_fround(f150 + Math_fround(1.0));
    f68 = Math_fround(f37 + Math_fround(1.0));
    f35 = Math_fround(HEAPF32[i81 >> 2]);
    f101 = Math_fround(Math_fround(f150 + f35) + Math_fround(-1.0));
    f150 = Math_fround(Math_fround(f37 + f35) + Math_fround(-1.0));
    HEAPF32[i7 >> 2] = f69;
    HEAPF32[i7 + 4 >> 2] = f68;
    HEAPF32[i7 + 8 >> 2] = f101;
    HEAPF32[i7 + 12 >> 2] = f150;
    __ZN5ImGui7ItemAddERK6ImRectjPS1_(i7, i30, 0) | 0;
    if (__ZN5ImGui14ButtonBehaviorERK6ImRectjPbS3_i(i7, i30, 0, 0, 0) | 0) HEAP8[i102 >> 0] = 1;
    __ZN5ImGui18RenderNavHighlightERK6ImRectji(i7, i30, 1);
    f150 = Math_fround(HEAPF32[i63 >> 2]);
    f101 = Math_fround(f150 + Math_fround(HEAPF32[i96 >> 2]));
    f150 = Math_fround(HEAPF32[i23 >> 2]);
    f68 = Math_fround(f150 + Math_fround(HEAPF32[i85 >> 2]));
    HEAPF32[i19 >> 2] = f101;
    HEAPF32[i19 + 4 >> 2] = f68;
    i85 = HEAP8[i104 >> 0] | 0 ? 1 : 3;
    HEAP32[i6 >> 2] = HEAP32[i19 >> 2];
    HEAP32[i6 + 4 >> 2] = HEAP32[i19 + 4 >> 2];
    __ZN5ImGui11RenderArrowE6ImVec2if(i6, i85, Math_fround(1.0));
   }
   do if (i47) {
    f68 = Math_fround(HEAPF32[i20 + 5412 >> 2]);
    f101 = Math_fround(Math_fround(HEAPF32[i81 >> 2]) * Math_fround(.5));
    i85 = HEAP32[i46 >> 2] | 0;
    if ((i85 | 0) <= 0) ___assert_fail(38278, 56850, 1245, 38287);
    i96 = __Z6ImHashPKvij(34033, 0, HEAP32[(HEAP32[i21 + 460 >> 2] | 0) + (i85 + -1 << 2) >> 2] | 0) | 0;
    i85 = HEAP32[1460598] | 0;
    if ((HEAP32[i85 + 6420 >> 2] | 0) == (i96 | 0)) HEAP8[i85 + 6432 >> 0] = 1;
    if ((HEAP32[i85 + 6424 >> 2] | 0) == (i96 | 0)) HEAP8[i85 + 6436 >> 0] = 1;
    f150 = Math_fround(HEAPF32[i229 >> 2]);
    f69 = Math_fround(HEAPF32[i23 >> 2]);
    f35 = Math_fround(Math_fround(Math_fround(-f68) - f101) + Math_fround(f150 + Math_fround(HEAPF32[i28 >> 2])));
    f150 = Math_fround(Math_fround(f68 + f101) + f69);
    HEAPF32[i6 >> 2] = f35;
    HEAPF32[i6 + 4 >> 2] = f150;
    if (!(__ZN5ImGui11CloseButtonEjRK6ImVec2f(i96, i6, Math_fround(f101 + Math_fround(1.0))) | 0)) break;
    HEAP8[i2 >> 0] = 0;
   } while (0);
   HEAP32[i39 >> 2] = (HEAP32[i39 >> 2] | 0) + -1;
   HEAP32[i53 >> 2] = HEAP32[i53 >> 2] >> 1;
   HEAP32[i140 >> 2] = i98;
   i63 = HEAP32[1460598] | 0;
   do if ((i1 | 0) == (-1 | 0)) {
    f250 = Math_fround(HEAPF32[i63 + 6184 >> 2]);
    i4 = 589;
   } else {
    i86 = i1;
    L824 : while (1) {
     switch (HEAP8[i86 >> 0] | 0) {
     case 0:
      {
       i251 = i86;
       break L824;
       break;
      }
     case 35:
      {
       i87 = i86 + 1 | 0;
       if ((HEAP8[i87 >> 0] | 0) == 35) {
        i251 = i86;
        break L824;
       } else i252 = i87;
       break;
      }
     default:
      i252 = i86 + 1 | 0;
     }
     if ((i252 | 0) == (-1 | 0)) {
      i251 = -1;
      break;
     } else i86 = i252;
    }
    i86 = HEAP32[i63 + 6180 >> 2] | 0;
    f101 = Math_fround(HEAPF32[i63 + 6184 >> 2]);
    if ((i251 | 0) == (i1 | 0)) {
     f250 = f101;
     i4 = 589;
     break;
    }
    __ZNK6ImFont13CalcTextSizeAEfffPKcS1_PS1_(i6, i86, f101, Math_fround(3402823469999999843913219.0e14), Math_fround(-1.0), i1, i251, 0);
    f150 = Math_fround(HEAPF32[i6 >> 2]);
    if (f150 > Math_fround(0.0)) {
     f35 = Math_fround(f150 - Math_fround(f101 / Math_fround(HEAPF32[i86 >> 2])));
     HEAPF32[i6 >> 2] = f35;
     f253 = f35;
    } else f253 = f150;
    f150 = Math_fround(~~Math_fround(f253 + Math_fround(.949999988)) | 0);
    HEAPF32[i6 >> 2] = f150;
    i86 = i6;
    i80 = HEAP32[i86 + 4 >> 2] | 0;
    i87 = i7;
    HEAP32[i87 >> 2] = HEAP32[i86 >> 2];
    HEAP32[i87 + 4 >> 2] = i80;
   } while (0);
   if ((i4 | 0) == 589) {
    HEAPF32[i7 >> 2] = Math_fround(0.0);
    HEAPF32[i7 + 4 >> 2] = f250;
   };
   HEAP32[i6 >> 2] = HEAP32[i8 >> 2];
   HEAP32[i6 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
   HEAP32[i6 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
   HEAP32[i6 + 12 >> 2] = HEAP32[i8 + 12 >> 2];
   f150 = Math_fround(HEAPF32[i20 + 5408 >> 2]);
   if (i41) f254 = f150; else {
    f35 = Math_fround(f150 + Math_fround(HEAPF32[i81 >> 2]));
    f254 = Math_fround(f35 + Math_fround(HEAPF32[i20 + 5432 >> 2]));
   }
   if (!i2) f255 = f150; else {
    f35 = Math_fround(f150 + Math_fround(HEAPF32[i81 >> 2]));
    f255 = Math_fround(f35 + Math_fround(HEAPF32[i20 + 5432 >> 2]));
   }
   i63 = i20 + 5384 | 0;
   f35 = Math_fround(HEAPF32[i63 >> 2]);
   i98 = f35 > Math_fround(0.0);
   f101 = Math_fround(f255 + Math_fround(Math_fround(f254 - f255) * f35));
   f35 = Math_fround(f254 + Math_fround(HEAPF32[i6 >> 2]));
   HEAPF32[i6 >> 2] = f35;
   i140 = i6 + 8 | 0;
   f35 = Math_fround(Math_fround(HEAPF32[i140 >> 2]) - (i98 ? f101 : f255));
   HEAPF32[i140 >> 2] = f35;
   HEAP32[i9 >> 2] = HEAP32[i6 >> 2];
   HEAP32[i9 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
   HEAP32[i9 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
   HEAP32[i9 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
   f35 = Math_fround(HEAPF32[i229 >> 2]);
   f101 = Math_fround(f35 + Math_fround(HEAPF32[i28 >> 2]));
   if (i47) {
    f35 = Math_fround(HEAPF32[i95 >> 2]);
    f256 = Math_fround(Math_fround(f35 - Math_fround(HEAPF32[i8 + 4 >> 2])) + Math_fround(-3.0));
   } else f256 = f150;
   f150 = Math_fround(f101 - f256);
   HEAPF32[i9 + 8 >> 2] = f150;
   __ZN5ImGui17RenderTextClippedERK6ImVec2S2_PKcS4_PS1_S2_PK6ImRect(i6, i140, i1, 0, i7, i63, i9);
  }
  f150 = Math_fround(HEAPF32[i229 >> 2]);
  f101 = Math_fround(HEAPF32[i23 >> 2]);
  f35 = Math_fround(f150 + Math_fround(HEAPF32[i28 >> 2]));
  f69 = Math_fround(f101 + Math_fround(HEAPF32[i94 >> 2]));
  HEAPF32[i21 + 480 >> 2] = f150;
  HEAPF32[i21 + 484 >> 2] = f101;
  HEAPF32[i21 + 488 >> 2] = f35;
  HEAPF32[i21 + 492 >> 2] = f69;
  i63 = i21 + 480 | 0;
  i140 = f150 >= Math_fround(HEAPF32[i22 >> 2]);
  i98 = f101 >= Math_fround(HEAPF32[i64 >> 2]);
  i53 = HEAP32[(i98 ? i63 : i22) + 4 >> 2] | 0;
  i98 = i63;
  HEAP32[i98 >> 2] = HEAP32[(i140 ? i63 : i22) >> 2];
  HEAP32[i98 + 4 >> 2] = i53;
  i53 = i21 + 488 | 0;
  i98 = f35 < Math_fround(HEAPF32[i27 >> 2]);
  i63 = f69 < Math_fround(HEAPF32[i25 >> 2]);
  i140 = HEAP32[(i63 ? i53 : i27) + 4 >> 2] | 0;
  i63 = i53;
  HEAP32[i63 >> 2] = HEAP32[(i98 ? i53 : i27) >> 2];
  HEAP32[i63 + 4 >> 2] = i140;
  f101 = Math_fround(HEAPF32[i8 >> 2]);
  f150 = Math_fround(HEAPF32[i84 >> 2]);
  f68 = Math_fround(f101 + f150);
  HEAPF32[i21 + 496 >> 2] = f68;
  f101 = Math_fround(HEAPF32[i95 >> 2]);
  if (!(HEAP32[i42 >> 2] & 1024)) {
   f257 = Math_fround(0.0);
   i258 = HEAP32[1460598] | 0;
  } else {
   f37 = Math_fround(HEAPF32[i79 >> 2]);
   i140 = HEAP32[1460598] | 0;
   f36 = Math_fround(HEAPF32[i140 + 6188 >> 2]);
   f152 = Math_fround(f37 + Math_fround(f36 * Math_fround(HEAPF32[i61 >> 2])));
   f257 = Math_fround(f152 + Math_fround(Math_fround(HEAPF32[i140 + 5412 >> 2]) * Math_fround(2.0)));
   i258 = i140;
  }
  f152 = Math_fround(f101 + f257);
  f101 = Math_fround(f152 + Math_fround(HEAPF32[((i56 & 1024 | 0) != 0 | i88 ? i20 + 5420 | 0 : i84) >> 2]));
  HEAPF32[i21 + 500 >> 2] = f101;
  f152 = Math_fround(Math_fround(f35 - Math_fround(HEAPF32[i21 + 108 >> 2])) - f150);
  HEAPF32[i21 + 504 >> 2] = f152;
  f35 = Math_fround(Math_fround(f69 - Math_fround(HEAPF32[i21 + 112 >> 2])) - f150);
  HEAPF32[i21 + 508 >> 2] = f35;
  f69 = Math_fround(f68 + Math_fround(.5));
  f68 = Math_fround(~~Math_fround(Math_fround(Math_fround(HEAPF32[i40 >> 2]) * Math_fround(.5)) - f150) | 0);
  i140 = f68 <= Math_fround(0.0);
  f150 = i140 ? Math_fround(0.0) : f68;
  f68 = Math_fround(~~Math_fround(f69 + f150) | 0);
  HEAPF32[i21 + 512 >> 2] = f68;
  f68 = Math_fround(~~Math_fround(f101 + Math_fround(.5)) | 0);
  HEAPF32[i21 + 516 >> 2] = f68;
  f68 = Math_fround(~~Math_fround(Math_fround(f152 + Math_fround(.5)) - f150) | 0);
  HEAPF32[i21 + 520 >> 2] = f68;
  f68 = Math_fround(~~Math_fround(f35 + Math_fround(.5)) | 0);
  HEAPF32[i21 + 524 >> 2] = f68;
  HEAP32[i21 + 256 >> 2] = HEAP32[i21 + 76 >> 2];
  i140 = i8;
  i63 = i8 + 8 | 0;
  f68 = Math_fround(HEAPF32[i140 >> 2]);
  f35 = Math_fround(HEAPF32[i258 + 5440 >> 2]);
  f150 = Math_fround(f68 - f35);
  f68 = Math_fround(HEAPF32[i258 + 5444 >> 2]);
  f152 = Math_fround(HEAPF32[i258 + 212 >> 2]);
  if (!(f152 >= f150)) i259 = 0; else {
   f150 = Math_fround(HEAPF32[i63 + 4 >> 2]);
   f101 = Math_fround(HEAPF32[i63 >> 2]);
   f69 = Math_fround(f68 + f150);
   f150 = Math_fround(f35 + f101);
   f101 = Math_fround(Math_fround(HEAPF32[i140 + 4 >> 2]) - f68);
   f68 = Math_fround(HEAPF32[i258 + 216 >> 2]);
   i259 = f68 < f69 & (f152 < f150 & f68 >= f101) & 1;
  }
  HEAP32[i21 + 260 >> 2] = i259;
  i140 = i21 + 264 | 0;
  HEAP32[i140 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i140 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
  HEAP32[i140 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
  HEAP32[i140 + 12 >> 2] = HEAP32[i8 + 12 >> 2];
  i140 = HEAP32[i258 + 6392 >> 2] | 0;
  HEAP8[i140 + 120 >> 0] = 1;
  i63 = i140 + 632 | 0;
  i53 = HEAP32[i63 >> 2] | 0;
  i98 = i21 + 512 | 0;
  i39 = HEAP32[i98 + 4 >> 2] | 0;
  i80 = i8;
  HEAP32[i80 >> 2] = HEAP32[i98 >> 2];
  HEAP32[i80 + 4 >> 2] = i39;
  i39 = i21 + 520 | 0;
  i80 = HEAP32[i39 + 4 >> 2] | 0;
  i98 = i9;
  HEAP32[i98 >> 2] = HEAP32[i39 >> 2];
  HEAP32[i98 + 4 >> 2] = i80;
  HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i7 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
  HEAP32[i6 >> 2] = HEAP32[i9 >> 2];
  HEAP32[i6 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
  __ZN10ImDrawList12PushClipRectE6ImVec2S0_b(i53, i7, i6, 1);
  i53 = HEAP32[i63 >> 2] | 0;
  i63 = HEAP32[i53 + 60 >> 2] | 0;
  if ((i63 | 0) > 0) {
   i80 = HEAP32[i53 + 68 >> 2] | 0;
   i53 = i63 + -1 | 0;
   i63 = i80 + (i53 << 4) | 0;
   i53 = HEAP32[i63 + 4 >> 2] | 0;
   i80 = HEAP32[i63 + 8 >> 2] | 0;
   i98 = HEAP32[i63 + 12 >> 2] | 0;
   HEAP32[i140 + 464 >> 2] = HEAP32[i63 >> 2];
   HEAP32[i140 + 468 >> 2] = i53;
   HEAP32[i140 + 472 >> 2] = i80;
   HEAP32[i140 + 476 >> 2] = i98;
   HEAP8[i21 + 120 >> 0] = 0;
   i260 = i29;
   break;
  } else ___assert_fail(38278, 56850, 1245, 38287);
 } else {
  i98 = HEAP32[(HEAP32[1460598] | 0) + 6392 >> 2] | 0;
  HEAP8[i98 + 120 >> 0] = 1;
  i140 = i98 + 632 | 0;
  i80 = HEAP32[i140 >> 2] | 0;
  i53 = i21 + 512 | 0;
  i63 = HEAP32[i53 + 4 >> 2] | 0;
  i39 = i8;
  HEAP32[i39 >> 2] = HEAP32[i53 >> 2];
  HEAP32[i39 + 4 >> 2] = i63;
  i63 = i21 + 520 | 0;
  i39 = HEAP32[i63 + 4 >> 2] | 0;
  i53 = i9;
  HEAP32[i53 >> 2] = HEAP32[i63 >> 2];
  HEAP32[i53 + 4 >> 2] = i39;
  HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i7 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
  HEAP32[i6 >> 2] = HEAP32[i9 >> 2];
  HEAP32[i6 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
  __ZN10ImDrawList12PushClipRectE6ImVec2S0_b(i80, i7, i6, 1);
  i80 = HEAP32[i140 >> 2] | 0;
  i140 = HEAP32[i80 + 60 >> 2] | 0;
  if ((i140 | 0) > 0) {
   i39 = HEAP32[i80 + 68 >> 2] | 0;
   i80 = i140 + -1 | 0;
   i140 = i39 + (i80 << 4) | 0;
   i80 = HEAP32[i140 + 4 >> 2] | 0;
   i39 = HEAP32[i140 + 8 >> 2] | 0;
   i53 = HEAP32[i140 + 12 >> 2] | 0;
   HEAP32[i98 + 464 >> 2] = HEAP32[i140 >> 2];
   HEAP32[i98 + 468 >> 2] = i80;
   HEAP32[i98 + 472 >> 2] = i39;
   HEAP32[i98 + 476 >> 2] = i53;
   i260 = i21 + 136 | 0;
   break;
  } else ___assert_fail(38278, 56850, 1245, 38287);
 } while (0);
 HEAP32[i260 >> 2] = (HEAP32[i260 >> 2] | 0) + 1;
 HEAP32[i48 >> 2] = 0;
 HEAP32[i48 + 4 >> 2] = 0;
 HEAP32[i48 + 8 >> 2] = 0;
 HEAP32[i48 + 12 >> 2] = 0;
 HEAP32[i48 + 16 >> 2] = 0;
 HEAP32[i48 + 20 >> 2] = 0;
 HEAP32[i48 + 24 >> 2] = 0;
 do if (!i38) {
  if (!(i56 & 1)) ___assert_fail(34040, 31803, 6575, 33717);
  if (i58) i261 = HEAP8[i59 + 121 >> 0] | 0; else i261 = 0;
  i48 = i21 + 121 | 0;
  HEAP8[i48 >> 0] = i261;
  do if (!(i56 & 64)) {
   if ((HEAP32[i21 + 144 >> 2] | 0) >= 1) {
    i262 = i261;
    break;
   }
   if ((HEAP32[i21 + 148 >> 2] | 0) >= 1) {
    i262 = i261;
    break;
   }
   f257 = Math_fround(HEAPF32[i21 + 480 >> 2]);
   if (!(f257 >= Math_fround(HEAPF32[i21 + 488 >> 2]))) {
    f257 = Math_fround(HEAPF32[i21 + 484 >> 2]);
    i263 = f257 >= Math_fround(HEAPF32[i21 + 492 >> 2]) & 1;
   } else i263 = 1;
   i260 = (i263 | i261 & 255) & 255;
   HEAP8[i48 >> 0] = i260;
   i262 = i260;
  } else i262 = i261; while (0);
  if (!(i262 << 24 >> 24)) break;
  HEAP8[i21 + 118 >> 0] = 0;
 } while (0);
 if (Math_fround(HEAPF32[i20 + 5356 >> 2]) <= Math_fround(0.0)) HEAP8[i21 + 118 >> 0] = 0;
 do if (!(HEAP8[i21 + 121 >> 0] | 0)) {
  if (!(HEAP8[i21 + 118 >> 0] | 0)) break; else i264 = 0;
  i265 = i21 + 123 | 0;
  HEAP8[i265 >> 0] = i264;
  i266 = i264 << 24 >> 24 == 0;
  STACKTOP = i5;
  return i266 | 0;
 } while (0);
 if ((HEAP32[i21 + 144 >> 2] | 0) >= 1) {
  i264 = 0;
  i265 = i21 + 123 | 0;
  HEAP8[i265 >> 0] = i264;
  i266 = i264 << 24 >> 24 == 0;
  STACKTOP = i5;
  return i266 | 0;
 }
 i264 = (HEAP32[i21 + 148 >> 2] | 0) < 1 & 1;
 i265 = i21 + 123 | 0;
 HEAP8[i265 >> 0] = i264;
 i266 = i264 << 24 >> 24 == 0;
 STACKTOP = i5;
 return i266 | 0;
}

function __ZN5ImGui11InputTextExEPKcPciRK6ImVec2iPFiP25ImGuiTextEditCallbackDataEPv(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, f33 = f0, f34 = f0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, f40 = f0, f41 = f0, f42 = f0, f43 = f0, f44 = f0, f45 = f0, f46 = f0, f47 = f0, f48 = f0, f49 = f0, i50 = 0, i51 = 0, f52 = f0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, f90 = f0, f91 = f0, f92 = f0, i93 = 0, i94 = 0, i95 = 0, i96 = 0, i97 = 0, i98 = 0, i99 = 0, i100 = 0, i101 = 0, i102 = 0, i103 = 0, i104 = 0, i105 = 0, i106 = 0, i107 = 0, i108 = 0, i109 = 0, i110 = 0, i111 = 0, i112 = 0, i113 = 0, i114 = 0, i115 = 0, i116 = 0, i117 = 0, i118 = 0, i119 = 0, i120 = 0, i121 = 0, i122 = 0, i123 = 0, i124 = 0, i125 = 0, i126 = 0, i127 = 0, i128 = 0, i129 = 0, i130 = 0, i131 = 0, i132 = 0, i133 = 0, i134 = 0, i135 = 0, i136 = 0, i137 = 0, i138 = 0, i139 = 0, i140 = 0, i141 = 0, i142 = 0, i143 = 0, i144 = 0, i145 = 0, i146 = 0, i147 = 0, i148 = 0, i149 = 0, i150 = 0, i151 = 0, i152 = 0, i153 = 0, i154 = 0, i155 = 0, i156 = 0, i157 = 0, i158 = 0, i159 = 0, i160 = 0, i161 = 0, i162 = 0, i163 = 0, i164 = 0, i165 = 0, i166 = 0, i167 = 0, i168 = 0, i169 = 0, i170 = 0, i171 = 0, i172 = 0, i173 = 0, i174 = 0, i175 = 0, i176 = 0, i177 = 0, i178 = 0, i179 = 0, i180 = 0, i181 = 0, i182 = 0, i183 = 0, i184 = 0, i185 = 0, i186 = 0, i187 = 0, i188 = 0, i189 = 0, i190 = 0, i191 = 0, i192 = 0, i193 = 0, i194 = 0, i195 = 0, i196 = 0, i197 = 0, i198 = 0, i199 = 0, i200 = 0, i201 = 0, i202 = 0, i203 = 0, i204 = 0, i205 = 0, i206 = 0, i207 = 0, i208 = 0, i209 = 0, i210 = 0, i211 = 0, i212 = 0, i213 = 0, i214 = 0, i215 = 0, i216 = 0, i217 = 0, i218 = 0, i219 = 0, i220 = 0, i221 = 0, i222 = 0, i223 = 0, i224 = 0, i225 = 0, i226 = 0, i227 = 0, i228 = 0, i229 = 0, i230 = 0, i231 = 0, i232 = 0, i233 = 0, i234 = 0, i235 = 0, i236 = 0, i237 = 0, i238 = 0, i239 = 0, i240 = 0, i241 = 0, i242 = 0, i243 = 0, i244 = 0, i245 = 0, i246 = 0, i247 = 0, i248 = 0, i249 = 0, i250 = 0, i251 = 0, i252 = 0, i253 = 0, i254 = 0, i255 = 0, i256 = 0, i257 = 0, i258 = 0, i259 = 0, i260 = 0, i261 = 0, i262 = 0, i263 = 0, i264 = 0, i265 = 0, i266 = 0, i267 = 0, i268 = 0, i269 = 0, i270 = 0, i271 = 0, i272 = 0, i273 = 0, i274 = 0, i275 = 0, i276 = 0, i277 = 0, i278 = 0, i279 = 0, i280 = 0, i281 = 0, i282 = 0, i283 = 0, i284 = 0, i285 = 0, i286 = 0, i287 = 0, i288 = 0, i289 = 0, i290 = 0, i291 = 0, i292 = 0, i293 = 0, i294 = 0, i295 = 0, i296 = 0, i297 = 0, i298 = 0, i299 = 0, i300 = 0, i301 = 0, i302 = 0, i303 = 0, i304 = 0, i305 = 0, i306 = 0, i307 = 0, i308 = 0, i309 = 0, i310 = 0, i311 = 0, i312 = 0, i313 = 0, i314 = 0, i315 = 0, i316 = 0, i317 = 0, i318 = 0, i319 = 0, i320 = 0, i321 = 0, i322 = 0, i323 = 0, i324 = 0, i325 = 0, i326 = 0, i327 = 0, i328 = 0, i329 = 0, i330 = 0, i331 = 0, f332 = f0, i333 = 0, i334 = 0, i335 = 0, i336 = 0, f337 = f0, f338 = f0, i339 = 0, i340 = 0, i341 = 0, f342 = f0, f343 = f0, f344 = f0, f345 = f0, f346 = f0, f347 = f0, i348 = 0, f349 = f0, f350 = f0, i351 = 0, f352 = f0, f353 = f0, i354 = 0, f355 = f0, f356 = f0, i357 = 0, i358 = 0, i359 = 0, f360 = f0, i361 = 0, f362 = f0, f363 = f0, i364 = 0, f365 = f0, f366 = f0, i367 = 0, i368 = 0, i369 = 0, f370 = f0, f371 = f0, f372 = f0;
 i8 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160);
 i10 = i9 + 64 | 0;
 i11 = i9 + 112 | 0;
 i12 = i9 + 96 | 0;
 i13 = i9 + 56 | 0;
 i14 = i9 + 24 | 0;
 i15 = i9 + 8 | 0;
 i16 = i9 + 48 | 0;
 i17 = i9 + 40 | 0;
 i18 = i9;
 i19 = i9 + 80 | 0;
 i20 = i9 + 104 | 0;
 i21 = HEAP32[1460598] | 0;
 i22 = HEAP32[i21 + 6392 >> 2] | 0;
 HEAP8[i22 + 120 >> 0] = 1;
 if (HEAP8[i22 + 123 >> 0] | 0) {
  i23 = 0;
  STACKTOP = i9;
  return i23 | 0;
 }
 i24 = (i5 & 128 | 0) != 0;
 i25 = i5 & 1048576;
 if (!((i25 | 0) == 0 | i24 ^ 1)) ___assert_fail(31929, 31803, 10426, 32021);
 i26 = (i5 & 64 | 0) != 0;
 i27 = (i5 & 1024 | 0) == 0;
 if (!(i27 | i26 ^ 1)) ___assert_fail(32033, 31803, 10427, 32021);
 i28 = (i25 | 0) != 0;
 i29 = (i5 & 16384 | 0) == 0;
 i30 = (i5 & 32768 | 0) != 0;
 if (i28) __ZN5ImGui10BeginGroupEv();
 i31 = HEAP32[i22 + 452 >> 2] | 0;
 if ((i31 | 0) <= 0) ___assert_fail(38278, 56850, 1245, 38287);
 i32 = __Z6ImHashPKvij(i1, 0, HEAP32[(HEAP32[i22 + 460 >> 2] | 0) + (i31 + -1 << 2) >> 2] | 0) | 0;
 i31 = HEAP32[1460598] | 0;
 if ((HEAP32[i31 + 6420 >> 2] | 0) == (i32 | 0)) HEAP8[i31 + 6432 >> 0] = 1;
 if ((HEAP32[i31 + 6424 >> 2] | 0) == (i32 | 0)) HEAP8[i31 + 6436 >> 0] = 1;
 if ((i1 | 0) == (-1 | 0)) {
  f33 = Math_fround(0.0);
  f34 = Math_fround(HEAPF32[i31 + 6184 >> 2]);
  i35 = i31;
 } else {
  i36 = i1;
  L24 : while (1) {
   switch (HEAP8[i36 >> 0] | 0) {
   case 0:
    {
     i37 = i36;
     break L24;
     break;
    }
   case 35:
    {
     i38 = i36 + 1 | 0;
     if ((HEAP8[i38 >> 0] | 0) == 35) {
      i37 = i36;
      break L24;
     } else i39 = i38;
     break;
    }
   default:
    i39 = i36 + 1 | 0;
   }
   if ((i39 | 0) == (-1 | 0)) {
    i37 = -1;
    break;
   } else i36 = i39;
  }
  i39 = HEAP32[i31 + 6180 >> 2] | 0;
  f40 = Math_fround(HEAPF32[i31 + 6184 >> 2]);
  if ((i37 | 0) == (i1 | 0)) {
   f33 = Math_fround(0.0);
   f34 = f40;
   i35 = i31;
  } else {
   __ZNK6ImFont13CalcTextSizeAEfffPKcS1_PS1_(i10, i39, f40, Math_fround(3402823469999999843913219.0e14), Math_fround(-1.0), i1, i37, 0);
   f41 = Math_fround(HEAPF32[i10 >> 2]);
   if (f41 > Math_fround(0.0)) {
    f42 = Math_fround(f41 - Math_fround(f40 / Math_fround(HEAPF32[i39 >> 2])));
    HEAPF32[i10 >> 2] = f42;
    f43 = f42;
   } else f43 = f41;
   f41 = Math_fround(~~Math_fround(f43 + Math_fround(.949999988)) | 0);
   HEAPF32[i10 >> 2] = f41;
   f43 = Math_fround(HEAPF32[i10 + 4 >> 2]);
   f33 = f41;
   f34 = f43;
   i35 = HEAP32[1460598] | 0;
  }
 }
 i39 = i4;
 i4 = HEAP32[i39 + 4 >> 2] | 0;
 i37 = i13;
 HEAP32[i37 >> 2] = HEAP32[i39 >> 2];
 HEAP32[i37 + 4 >> 2] = i4;
 i4 = HEAP32[i35 + 6392 >> 2] | 0;
 f43 = Math_fround(HEAPF32[i4 + 356 >> 2]);
 if (f43 < Math_fround(0.0)) {
  f41 = Math_fround(HEAPF32[i4 + 536 >> 2]);
  f42 = Math_fround(HEAPF32[i4 + 12 >> 2]);
  f40 = Math_fround(f41 - f42);
  i37 = HEAP32[i4 + 448 >> 2] | 0;
  do if (!i37) f44 = f40; else {
   i39 = HEAP32[i37 + 12 >> 2] | 0;
   i31 = i39 + ((i39 | 0) > -2 & 1) | 0;
   if ((i31 | 0) < (HEAP32[i37 + 44 >> 2] | 0)) {
    f41 = Math_fround(HEAPF32[(HEAP32[i37 + 52 >> 2] | 0) + (i31 * 28 | 0) >> 2]);
    f45 = Math_fround(HEAPF32[i37 + 20 >> 2]);
    f46 = Math_fround(f45 + Math_fround(f41 * Math_fround(Math_fround(HEAPF32[i37 + 24 >> 2]) - f45)));
    f44 = Math_fround(f46 - Math_fround(HEAPF32[i4 + 60 >> 2]));
    break;
   } else ___assert_fail(32132, 31803, 13059, 32169);
  } while (0);
  f40 = Math_fround(f43 + Math_fround(f44 - Math_fround(Math_fround(HEAPF32[i4 + 196 >> 2]) - f42)));
  i4 = f40 <= Math_fround(1.0);
  f47 = i4 ? Math_fround(1.0) : f40;
 } else f47 = f43;
 f43 = Math_fround(~~f47 | 0);
 if (i28) f48 = Math_fround(Math_fround(HEAPF32[i35 + 6184 >> 2]) * Math_fround(8.0)); else f48 = f34;
 i35 = i21 + 5408 | 0;
 i4 = i21 + 5412 | 0;
 f34 = Math_fround(f48 + Math_fround(Math_fround(HEAPF32[i4 >> 2]) * Math_fround(2.0)));
 HEAP32[i10 >> 2] = HEAP32[i13 >> 2];
 HEAP32[i10 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
 __ZN5ImGui12CalcItemSizeE6ImVec2ff(i12, i10, f43, f34);
 i13 = i22 + 196 | 0;
 f34 = Math_fround(HEAPF32[i13 >> 2]);
 f43 = Math_fround(HEAPF32[i12 >> 2]);
 f48 = Math_fround(f34 + f43);
 f34 = Math_fround(HEAPF32[i22 + 200 >> 2]);
 f47 = Math_fround(HEAPF32[i12 + 4 >> 2]);
 f40 = Math_fround(f34 + f47);
 i37 = i13;
 i13 = HEAP32[i37 >> 2] | 0;
 i31 = HEAP32[i37 + 4 >> 2] | 0;
 i37 = i14;
 HEAP32[i37 >> 2] = i13;
 HEAP32[i37 + 4 >> 2] = i31;
 i37 = i14 + 8 | 0;
 HEAPF32[i37 >> 2] = f48;
 i39 = i14 + 12 | 0;
 HEAPF32[i39 >> 2] = f40;
 i36 = f33 > Math_fround(0.0);
 if (i36) f49 = Math_fround(f33 + Math_fround(HEAPF32[i21 + 5432 >> 2])); else f49 = Math_fround(0.0);
 f33 = Math_fround(f49 + f48);
 f48 = Math_fround(f40 + Math_fround(0.0));
 i38 = i15;
 HEAP32[i38 >> 2] = i13;
 HEAP32[i38 + 4 >> 2] = i31;
 HEAPF32[i15 + 8 >> 2] = f33;
 HEAPF32[i15 + 12 >> 2] = f48;
 do if (i28) {
  __ZN5ImGui7ItemAddERK6ImRectjPS1_(i15, i32, i14) | 0;
  f40 = Math_fround(HEAPF32[i14 + 8 >> 2]);
  f49 = Math_fround(f40 - Math_fround(HEAPF32[i14 >> 2]));
  f40 = Math_fround(HEAPF32[i39 >> 2]);
  f34 = Math_fround(f40 - Math_fround(HEAPF32[i14 + 4 >> 2]));
  HEAPF32[i10 >> 2] = f49;
  HEAPF32[i10 + 4 >> 2] = f34;
  if (__ZN5ImGui15BeginChildFrameEjRK6ImVec2i(i32, i10, 0) | 0) {
   i38 = HEAP32[(HEAP32[1460598] | 0) + 6392 >> 2] | 0;
   HEAP8[i38 + 120 >> 0] = 1;
   i50 = i38 + 312 | 0;
   HEAP32[i50 >> 2] = HEAP32[i50 >> 2] | HEAP32[i38 + 304 >> 2];
   f34 = Math_fround(f43 - Math_fround(HEAPF32[i38 + 108 >> 2]));
   HEAPF32[i12 >> 2] = f34;
   i51 = i38;
   f52 = f34;
   i8 = 39;
   break;
  } else {
   __ZN5ImGui8EndChildEv();
   __ZN5ImGui8EndGroupEv();
   i53 = 0;
   break;
  }
 } else {
  f34 = (HEAP32[tempDoublePtr >> 2] = i31, Math_fround(HEAPF32[tempDoublePtr >> 2]));
  f49 = (HEAP32[tempDoublePtr >> 2] = i13, Math_fround(HEAPF32[tempDoublePtr >> 2]));
  f40 = Math_fround(HEAPF32[i4 >> 2]);
  f42 = Math_fround(f33 - f49);
  f49 = Math_fround(f48 - f34);
  HEAPF32[i10 >> 2] = f42;
  HEAPF32[i10 + 4 >> 2] = f49;
  __ZN5ImGui8ItemSizeERK6ImVec2f(i10, f40);
  if (__ZN5ImGui7ItemAddERK6ImRectjPS1_(i15, i32, i14) | 0) {
   i51 = i22;
   f52 = f43;
   i8 = 39;
  } else i53 = 0;
 } while (0);
 if ((i8 | 0) == 39) {
  i15 = __ZN5ImGui13ItemHoverableERK6ImRectj(i14, i32) | 0;
  if (i15) HEAP32[i21 + 7068 >> 2] = 1;
  do if (i30) {
   i13 = i21 + 6180 | 0;
   i31 = __ZNK6ImFont9FindGlyphEt(HEAP32[i13 >> 2] | 0, 42) | 0;
   i12 = i21 + 10884 | 0;
   i39 = HEAP32[i13 >> 2] | 0;
   HEAP32[i12 >> 2] = HEAP32[i39 >> 2];
   HEAP32[i21 + 10888 >> 2] = HEAP32[i39 + 4 >> 2];
   i13 = i39 + 8 | 0;
   i38 = HEAP32[i13 + 4 >> 2] | 0;
   i50 = i21 + 10892 | 0;
   HEAP32[i50 >> 2] = HEAP32[i13 >> 2];
   HEAP32[i50 + 4 >> 2] = i38;
   HEAP32[i21 + 10956 >> 2] = HEAP32[i39 + 72 >> 2];
   HEAP32[i21 + 10960 >> 2] = HEAP32[i39 + 76 >> 2];
   HEAP32[i21 + 10952 >> 2] = HEAP32[i39 + 68 >> 2];
   HEAP32[i21 + 10936 >> 2] = i31;
   HEAP32[i21 + 10940 >> 2] = HEAP32[i31 + 4 >> 2];
   if (HEAP32[i21 + 10900 >> 2] | 0) ___assert_fail(32185, 31803, 10483, 32021);
   if (HEAP32[i21 + 10912 >> 2] | 0) ___assert_fail(32185, 31803, 10483, 32021);
   if (!(HEAP32[i21 + 10924 >> 2] | 0)) {
    __ZN5ImGui8PushFontEP6ImFont(i12);
    break;
   } else ___assert_fail(32185, 31803, 10483, 32021);
  } while (0);
  i12 = i21 + 7200 | 0;
  i31 = __ZN5ImGui21FocusableItemRegisterEP11ImGuiWindowjb(i22, i32, (i5 & 1088 | 0) == 0) | 0;
  if (i31) i54 = (HEAP32[i22 + 816 >> 2] | 0) == (HEAP32[i22 + 824 >> 2] | 0); else i54 = 0;
  i39 = i31 & (i54 ^ 1);
  if (i15) i55 = (HEAP8[i21 + 972 >> 0] | 0) != 0; else i55 = 0;
  i38 = i21 + 6420 | 0;
  do if (i28) if (!(HEAP32[i38 >> 2] | 0)) {
   if ((HEAP32[i12 >> 2] | 0) != (i32 | 0)) {
    i56 = 0;
    break;
   }
   i50 = HEAP32[i51 + 452 >> 2] | 0;
   if ((i50 | 0) > 0) {
    i13 = HEAP32[i21 + 6424 >> 2] | 0;
    i56 = (i13 | 0) == (__Z6ImHashPKvij(32293, 0, HEAP32[(HEAP32[i51 + 460 >> 2] | 0) + (i50 + -1 << 2) >> 2] | 0) | 0);
    break;
   } else ___assert_fail(38278, 56850, 1245, 38287);
  } else i56 = 0; else i56 = 0; while (0);
  i50 = HEAP32[i38 >> 2] | 0;
  i13 = (i50 | 0) == (i32 | 0);
  do if (i13) i57 = 0; else {
   if ((HEAP32[i21 + 6664 >> 2] | 0) == (i32 | 0)) {
    i57 = 1;
    break;
   }
   if ((HEAP32[i21 + 6652 >> 2] | 0) != (i32 | 0)) {
    i57 = 0;
    break;
   }
   i57 = (HEAP32[i21 + 6680 >> 2] | 0) == 3;
  } while (0);
  i58 = i28 ^ 1;
  i59 = ((i5 & 16 | 0) != 0 | i57) & i58 & (i50 | 0) != (i32 | 0);
  i50 = i59 & 1;
  do if (i31 | i55 | i56 | i57) {
   do if (i13) i60 = i50; else {
    i61 = i21 + 7244 | 0;
    i62 = HEAP32[i61 >> 2] | 0;
    i63 = i21 + 7204 | 0;
    i64 = i3 + 1 | 0;
    i65 = i21 + 7208 | 0;
    i66 = HEAP32[i65 >> 2] | 0;
    do if ((i66 | 0) <= (i3 | 0)) {
     if (!i66) i67 = 8; else i67 = ((i66 | 0) / 2 | 0) + i66 | 0;
     i68 = (i67 | 0) > (i64 | 0) ? i67 : i64;
     if ((i66 | 0) >= (i68 | 0)) break;
     HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
     i69 = __ZL13MallocWrapperjPv(i68 << 1, 0) | 0;
     i70 = i21 + 7212 | 0;
     i71 = HEAP32[i70 >> 2] | 0;
     if (!i71) i72 = i70; else {
      _memcpy(i69 | 0, i71 | 0, HEAP32[i63 >> 2] << 1 | 0) | 0;
      i71 = HEAP32[i70 >> 2] | 0;
      if (i71 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
      __ZL11FreeWrapperPvS_(i71, 0);
      i72 = i70;
     }
     HEAP32[i72 >> 2] = i69;
     HEAP32[i65 >> 2] = i68;
    } while (0);
    HEAP32[i63 >> 2] = i64;
    i65 = i21 + 7216 | 0;
    i66 = i21 + 7220 | 0;
    i68 = HEAP32[i66 >> 2] | 0;
    do if ((i68 | 0) <= (i3 | 0)) {
     if (!i68) i73 = 8; else i73 = ((i68 | 0) / 2 | 0) + i68 | 0;
     i69 = (i73 | 0) > (i64 | 0) ? i73 : i64;
     if ((i68 | 0) >= (i69 | 0)) break;
     HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
     i70 = __ZL13MallocWrapperjPv(i69, 0) | 0;
     i71 = i21 + 7224 | 0;
     i74 = HEAP32[i71 >> 2] | 0;
     if (i74 | 0) {
      _memcpy(i70 | 0, i74 | 0, HEAP32[i65 >> 2] | 0) | 0;
      i74 = HEAP32[i71 >> 2] | 0;
      if (i74 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
      __ZL11FreeWrapperPvS_(i74, 0);
     }
     HEAP32[i71 >> 2] = i70;
     HEAP32[i66 >> 2] = i69;
    } while (0);
    HEAP32[i65 >> 2] = i64;
    i66 = HEAP32[i21 + 7224 >> 2] | 0;
    if (i64 | 0) {
     _strncpy(i66, i2, i64) | 0;
     HEAP8[i66 + i3 >> 0] = 0;
    }
    i66 = HEAP32[i21 + 7212 >> 2] | 0;
    i68 = i66 + (HEAP32[i63 >> 2] << 1) + -2 | 0;
    L127 : do if (i68 >>> 0 > i66 >>> 0) {
     i69 = i2;
     i70 = i66;
     while (1) {
      if (!(HEAP8[i69 >> 0] | 0)) {
       i75 = i70;
       i76 = i69;
       break L127;
      }
      i77 = i69 + (__Z18ImTextCharFromUtf8PjPKcS1_(i10, i69, 0) | 0) | 0;
      i71 = HEAP32[i10 >> 2] | 0;
      if (!i71) break;
      if (i71 >>> 0 < 65536) {
       HEAP16[i70 >> 1] = i71;
       i78 = i70 + 2 | 0;
      } else i78 = i70;
      if (i78 >>> 0 < i68 >>> 0) {
       i69 = i77;
       i70 = i78;
      } else {
       i75 = i78;
       i76 = i77;
       break L127;
      }
     }
     i75 = i70;
     i76 = i77;
    } else {
     i75 = i66;
     i76 = i2;
    } while (0);
    HEAP16[i75 >> 1] = 0;
    i68 = i75 - i66 >> 1;
    HEAP32[i61 >> 2] = i68;
    HEAP32[i21 + 7240 >> 2] = i76 - i2;
    HEAPF32[i21 + 10876 >> 2] = Math_fround(-.300000012);
    if ((i62 | 0) == (i68 | 0) ? (HEAP32[i12 >> 2] | 0) == (i32 | 0) : 0) {
     i68 = i21 + 7256 | 0;
     i63 = HEAP32[i68 >> 2] | 0;
     HEAP32[i68 >> 2] = (i63 | 0) < (i62 | 0) ? i63 : i62;
     i63 = i21 + 7260 | 0;
     i68 = HEAP32[i63 >> 2] | 0;
     HEAP32[i63 >> 2] = (i68 | 0) < (i62 | 0) ? i68 : i62;
     i68 = i21 + 7264 | 0;
     i63 = HEAP32[i68 >> 2] | 0;
     HEAP32[i68 >> 2] = (i63 | 0) < (i62 | 0) ? i63 : i62;
     i79 = i50;
    } else {
     HEAP32[i12 >> 2] = i32;
     HEAPF32[i21 + 7252 >> 2] = Math_fround(0.0);
     HEAP16[i21 + 10862 >> 1] = 0;
     HEAP32[i21 + 10868 >> 2] = 0;
     HEAP16[i21 + 10864 >> 1] = 99;
     HEAP32[i21 + 10872 >> 2] = 999;
     HEAP32[i21 + 7260 >> 2] = 0;
     HEAP32[i21 + 7264 >> 2] = 0;
     HEAP32[i21 + 7256 >> 2] = 0;
     HEAP8[i21 + 7271 >> 0] = 0;
     HEAPF32[i21 + 7276 >> 2] = Math_fround(0.0);
     HEAP8[i21 + 7269 >> 0] = 0;
     HEAP8[i21 + 7270 >> 0] = 1;
     HEAP8[i21 + 7272 >> 0] = i58 & 1;
     HEAP8[i21 + 7268 >> 0] = 0;
     i79 = i28 ? i50 : (i54 | i59) & 1;
    }
    if (i5 & 8192 | 0) HEAP8[i21 + 7268 >> 0] = 1;
    if (i28) {
     i60 = i79;
     break;
    }
    if (!i39) {
     if (!i55) {
      i60 = i79;
      break;
     }
     if (!(HEAP8[i21 + 237 >> 0] | 0)) {
      i60 = i79;
      break;
     }
    }
    i60 = 1;
   } while (0);
   i63 = HEAP32[1460598] | 0;
   i68 = i63 + 6420 | 0;
   i64 = (HEAP32[i68 >> 2] | 0) != (i32 | 0);
   HEAP8[i63 + 6433 >> 0] = i64 & 1;
   do if (i64) {
    HEAPF32[i63 + 6428 >> 2] = Math_fround(0.0);
    HEAP8[i63 + 6435 >> 0] = 0;
    if (!i32) break;
    HEAP32[i63 + 6464 >> 2] = i32;
    HEAPF32[i63 + 6468 >> 2] = Math_fround(0.0);
   } while (0);
   HEAP32[i68 >> 2] = i32;
   HEAP32[i63 + 6440 >> 2] = 0;
   HEAP8[i63 + 6434 >> 0] = 0;
   HEAP32[i63 + 6452 >> 2] = i22;
   if (!i32) ___assert_fail(32302, 31803, 2206, 32310);
   HEAP8[i63 + 6432 >> 0] = 1;
   do if ((HEAP32[i63 + 6652 >> 2] | 0) == (i32 | 0)) i80 = 2; else {
    if ((HEAP32[i63 + 6664 >> 2] | 0) == (i32 | 0)) {
     i80 = 2;
     break;
    }
    if ((HEAP32[i63 + 6668 >> 2] | 0) == (i32 | 0)) {
     i80 = 2;
     break;
    }
    i80 = (HEAP32[i63 + 6672 >> 2] | 0) == (i32 | 0) ? 2 : 1;
   } while (0);
   i68 = i63 + 6460 | 0;
   HEAP32[i68 >> 2] = i80;
   i64 = HEAP32[i22 + 300 >> 2] | 0;
   i65 = i63 + 6644 | 0;
   if ((HEAP32[i65 >> 2] | 0) != (i22 | 0)) HEAP8[i63 + 6733 >> 0] = 0;
   HEAP32[i63 + 6648 >> 2] = i32;
   HEAP32[i65 >> 2] = i22;
   HEAP32[i63 + 6720 >> 2] = i64;
   HEAP32[i22 + 776 + (i64 << 2) >> 2] = i32;
   if ((HEAP32[i22 + 256 >> 2] | 0) == (i32 | 0)) {
    f43 = Math_fround(HEAPF32[i22 + 264 >> 2]);
    f48 = Math_fround(HEAPF32[i22 + 12 >> 2]);
    f33 = Math_fround(f43 - f48);
    f43 = Math_fround(HEAPF32[i22 + 268 >> 2]);
    f40 = Math_fround(HEAPF32[i22 + 16 >> 2]);
    f49 = Math_fround(f43 - f40);
    f43 = Math_fround(Math_fround(HEAPF32[i22 + 272 >> 2]) - f48);
    f48 = Math_fround(Math_fround(HEAPF32[i22 + 276 >> 2]) - f40);
    i65 = i22 + 784 + (i64 << 4) | 0;
    HEAPF32[i65 >> 2] = f33;
    HEAPF32[i65 + 4 >> 2] = f49;
    HEAPF32[i65 + 8 >> 2] = f43;
    HEAPF32[i65 + 12 >> 2] = f48;
    i81 = HEAP32[i68 >> 2] | 0;
   } else i81 = i80;
   if ((i81 | 0) == 2) HEAP8[i63 + 6731 >> 0] = 1; else HEAP8[i63 + 6730 >> 0] = 1;
   __ZN5ImGui11FocusWindowEP11ImGuiWindow(i22);
   i68 = (i60 & 1) != 0;
   if (i5 & 1048704 | 0) {
    i82 = 0;
    i83 = i68;
    break;
   }
   i65 = i21 + 6440 | 0;
   HEAP32[i65 >> 2] = HEAP32[i65 >> 2] | 12;
   i82 = 0;
   i83 = i68;
  } else {
   i82 = (HEAP8[i21 + 972 >> 0] | 0) != 0;
   i83 = i59;
  } while (0);
  do if ((HEAP32[i38 >> 2] | 0) == (i32 | 0)) {
   do if (!i29) {
    if (HEAP8[i21 + 6433 >> 0] | 0) break;
    i59 = i21 + 7204 | 0;
    i60 = i3 + 1 | 0;
    i22 = i21 + 7208 | 0;
    i81 = HEAP32[i22 >> 2] | 0;
    do if ((i81 | 0) <= (i3 | 0)) {
     if (!i81) i84 = 8; else i84 = ((i81 | 0) / 2 | 0) + i81 | 0;
     i80 = (i84 | 0) > (i60 | 0) ? i84 : i60;
     if ((i81 | 0) >= (i80 | 0)) break;
     HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
     i79 = __ZL13MallocWrapperjPv(i80 << 1, 0) | 0;
     i55 = i21 + 7212 | 0;
     i39 = HEAP32[i55 >> 2] | 0;
     if (!i39) i85 = i55; else {
      _memcpy(i79 | 0, i39 | 0, HEAP32[i59 >> 2] << 1 | 0) | 0;
      i39 = HEAP32[i55 >> 2] | 0;
      if (i39 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
      __ZL11FreeWrapperPvS_(i39, 0);
      i85 = i55;
     }
     HEAP32[i85 >> 2] = i79;
     HEAP32[i22 >> 2] = i80;
    } while (0);
    HEAP32[i59 >> 2] = i60;
    i22 = HEAP32[i21 + 7212 >> 2] | 0;
    i81 = i22 + (i3 << 1) | 0;
    L195 : do if ((i3 | 0) > 0) {
     i62 = i2;
     i61 = i22;
     while (1) {
      if (!(HEAP8[i62 >> 0] | 0)) {
       i86 = i61;
       i87 = i62;
       break L195;
      }
      i88 = i62 + (__Z18ImTextCharFromUtf8PjPKcS1_(i10, i62, 0) | 0) | 0;
      i66 = HEAP32[i10 >> 2] | 0;
      if (!i66) break;
      if (i66 >>> 0 < 65536) {
       HEAP16[i61 >> 1] = i66;
       i89 = i61 + 2 | 0;
      } else i89 = i61;
      if (i89 >>> 0 < i81 >>> 0) {
       i62 = i88;
       i61 = i89;
      } else {
       i86 = i89;
       i87 = i88;
       break L195;
      }
     }
     i86 = i61;
     i87 = i88;
    } else {
     i86 = i22;
     i87 = i2;
    } while (0);
    HEAP16[i86 >> 1] = 0;
    i81 = i86 - i22 >> 1;
    HEAP32[i21 + 7244 >> 2] = i81;
    HEAP32[i21 + 7240 >> 2] = i87 - i2;
    i60 = i21 + 7256 | 0;
    i59 = HEAP32[i60 >> 2] | 0;
    HEAP32[i60 >> 2] = (i59 | 0) < (i81 | 0) ? i59 : i81;
    i59 = i21 + 7260 | 0;
    i60 = HEAP32[i59 >> 2] | 0;
    HEAP32[i59 >> 2] = (i60 | 0) < (i81 | 0) ? i60 : i81;
    i60 = i21 + 7264 | 0;
    i59 = HEAP32[i60 >> 2] | 0;
    HEAP32[i60 >> 2] = (i59 | 0) < (i81 | 0) ? i59 : i81;
   } while (0);
   HEAP32[i21 + 7248 >> 2] = i3;
   i63 = i21 + 220 | 0;
   i81 = HEAP8[i63 >> 0] | 0;
   HEAP8[i21 + 6434 >> 0] = i81 ^ 1;
   HEAP32[i21 + 11616 >> 2] = 1;
   f48 = Math_fround(HEAPF32[i21 + 212 >> 2]);
   f43 = Math_fround(f48 - Math_fround(HEAPF32[i14 >> 2]));
   f48 = Math_fround(f43 - Math_fround(HEAPF32[i35 >> 2]));
   f43 = Math_fround(f48 + Math_fround(HEAPF32[i21 + 7252 >> 2]));
   if (i28) {
    f48 = Math_fround(HEAPF32[i21 + 216 >> 2]);
    f49 = Math_fround(f48 - Math_fround(HEAPF32[i51 + 200 >> 2]));
    f90 = Math_fround(f49 - Math_fround(HEAPF32[i4 >> 2]));
   } else f90 = Math_fround(Math_fround(HEAPF32[i21 + 6184 >> 2]) * Math_fround(.5));
   i59 = (HEAP8[i21 + 184 >> 0] | 0) != 0;
   L211 : do if (i83) i8 = 149; else {
    i60 = i15 ^ 1;
    if (!(i59 | i60)) if (HEAP8[i21 + 977 >> 0] | 0) {
     i8 = 149;
     break;
    }
    do if (!(i60 | i59 ^ 1)) {
     if (!(HEAP8[i21 + 977 >> 0] | 0)) break;
     __ZN18ImGuiTextEditState12OnKeyPressedEi(i12, 65548);
     __ZN18ImGuiTextEditState12OnKeyPressedEi(i12, 196621);
     break L211;
    } while (0);
    do if (HEAP8[i21 + 972 >> 0] | 0) {
     if (HEAP8[i21 + 10881 >> 0] | 0) break;
     if (!i15) break L211;
     L224 : do if (!(HEAP8[i21 + 7272 >> 0] | 0)) f91 = f90; else {
      i60 = HEAP32[i21 + 7212 >> 2] | 0;
      i22 = i60 + (HEAP32[i21 + 7244 >> 2] << 1) | 0;
      i62 = i60;
      L226 : while (1) {
       i60 = i62;
       while (1) {
        if (i60 >>> 0 >= i22 >>> 0) {
         f91 = Math_fround(0.0);
         break L224;
        }
        i70 = i60 + 2 | 0;
        switch (HEAP16[i60 >> 1] | 0) {
        case 10:
         {
          f91 = Math_fround(0.0);
          break L224;
          break;
         }
        case 13:
         {
          i60 = i70;
          break;
         }
        default:
         {
          i62 = i70;
          continue L226;
         }
        }
       }
      }
     } while (0);
     i61 = __ZN8ImGuiStbL21stb_text_locate_coordEP18ImGuiTextEditStateff(i12, f43, f91) | 0;
     HEAP32[i21 + 7256 >> 2] = i61;
     HEAP32[i21 + 7260 >> 2] = i61;
     HEAP32[i21 + 7264 >> 2] = i61;
     HEAP8[i21 + 7271 >> 0] = 0;
     HEAPF32[i21 + 10876 >> 2] = Math_fround(-.300000012);
     break L211;
    } while (0);
    if (!(i81 << 24 >> 24)) break;
    if (HEAP8[i21 + 10881 >> 0] | 0) break;
    if (!(Math_fround(HEAPF32[i21 + 896 >> 2]) != Math_fround(0.0))) if (!(Math_fround(HEAPF32[i21 + 900 >> 2]) != Math_fround(0.0))) break;
    L238 : do if (!(HEAP8[i21 + 7272 >> 0] | 0)) f92 = f90; else {
     i61 = HEAP32[i21 + 7212 >> 2] | 0;
     i62 = i61 + (HEAP32[i21 + 7244 >> 2] << 1) | 0;
     i22 = i61;
     L240 : while (1) {
      i61 = i22;
      while (1) {
       if (i61 >>> 0 >= i62 >>> 0) {
        f92 = Math_fround(0.0);
        break L238;
       }
       i60 = i61 + 2 | 0;
       switch (HEAP16[i61 >> 1] | 0) {
       case 10:
        {
         f92 = Math_fround(0.0);
         break L238;
         break;
        }
       case 13:
        {
         i61 = i60;
         break;
        }
       default:
        {
         i22 = i60;
         continue L240;
        }
       }
      }
     }
    } while (0);
    i22 = i21 + 7260 | 0;
    i62 = i21 + 7264 | 0;
    i61 = i21 + 7256 | 0;
    if ((HEAP32[i22 >> 2] | 0) == (HEAP32[i62 >> 2] | 0)) HEAP32[i22 >> 2] = HEAP32[i61 >> 2];
    i22 = __ZN8ImGuiStbL21stb_text_locate_coordEP18ImGuiTextEditStateff(i12, f43, f92) | 0;
    HEAP32[i62 >> 2] = i22;
    HEAP32[i61 >> 2] = i22;
    HEAPF32[i21 + 10876 >> 2] = Math_fround(-.300000012);
    HEAP8[i21 + 10880 >> 0] = 1;
   } while (0);
   if ((i8 | 0) == 149) {
    HEAP32[i21 + 7260 >> 2] = 0;
    i81 = HEAP32[i21 + 7244 >> 2] | 0;
    HEAP32[i21 + 7264 >> 2] = i81;
    HEAP32[i21 + 7256 >> 2] = i81;
    HEAP8[i21 + 7271 >> 0] = 0;
    HEAP8[i21 + 10881 >> 0] = 1;
   }
   i81 = i21 + 10881 | 0;
   do if (HEAP8[i81 >> 0] | 0) {
    if (HEAP8[i63 >> 0] | 0) break;
    HEAP8[i81 >> 0] = 0;
   } while (0);
   i81 = i21 + 754 | 0;
   if (!(HEAP16[i81 >> 1] | 0)) break;
   do if (!(HEAP8[i21 + 237 >> 0] | 0)) {
    if (i59) {
     i8 = 181;
     break;
    }
    if (!(i57 | i29 ^ 1)) i8 = 184;
   } else {
    i63 = (HEAP8[i21 + 239 >> 0] | 0) == 0;
    if (i63 | i59 ^ 1) {
     i93 = i63;
     i8 = 182;
    } else i8 = 181;
   } while (0);
   if ((i8 | 0) == 181) {
    i93 = (HEAP8[i21 + 240 >> 0] | 0) != 0;
    i8 = 182;
   }
   if ((i8 | 0) == 182) if (!(i57 | (i93 | i29 ^ 1))) i8 = 184;
   L265 : do if ((i8 | 0) == 184) {
    i59 = 0;
    while (1) {
     i63 = HEAP16[i21 + 754 + (i59 << 1) >> 1] | 0;
     if (!(i63 << 16 >> 16)) break L265;
     HEAP32[i10 >> 2] = i63 & 65535;
     if (__ZL24InputTextFilterCharacterPjiPFiP25ImGuiTextEditCallbackDataEPv(i10, i5, i6, i7) | 0) __ZN18ImGuiTextEditState12OnKeyPressedEi(i12, HEAP32[i10 >> 2] | 0);
     if ((i59 | 0) < 16) i59 = i59 + 1 | 0; else break;
    }
   } while (0);
   i94 = i81;
   i95 = i94 + 34 | 0;
   do {
    HEAP16[i94 >> 1] = 0;
    i94 = i94 + 2 | 0;
   } while ((i94 | 0) < (i95 | 0));
  } while (0);
  L275 : do if ((HEAP32[i38 >> 2] | 0) == (i32 | 0)) {
   if (i82 | (HEAP8[i21 + 6433 >> 0] | 0) != 0) {
    i96 = 1;
    i97 = 0;
    i98 = i82;
    break;
   }
   i93 = HEAP8[i21 + 238 >> 0] | 0;
   i57 = i93 << 24 >> 24 ? 131072 : 0;
   i15 = (HEAP8[i21 + 184 >> 0] | 0) != 0;
   do if (i15) {
    if (!(HEAP8[i21 + 240 >> 0] | 0)) {
     i99 = 0;
     i8 = 203;
     break;
    }
    if (!(HEAP8[i21 + 237 >> 0] | 0)) {
     i100 = 0;
     i101 = 1;
     i8 = 197;
    } else {
     i102 = 0;
     i8 = 199;
    }
   } else {
    if (!(HEAP8[i21 + 237 >> 0] | 0)) {
     i103 = 0;
     i104 = 0;
     i8 = 202;
     break;
    }
    if (!(HEAP8[i21 + 240 >> 0] | 0)) {
     i100 = 1;
     i101 = 0;
     i8 = 197;
    } else {
     i103 = 1;
     i104 = 0;
     i8 = 202;
    }
   } while (0);
   do if ((i8 | 0) == 197) {
    i83 = (HEAP8[i21 + 239 >> 0] | i93) << 24 >> 24 == 0;
    if (!i15) {
     i103 = i100;
     i104 = i83;
     i8 = 202;
     break;
    }
    if (!(i101 << 24 >> 24)) {
     i99 = i83;
     i8 = 203;
    } else {
     i102 = i83;
     i8 = 199;
    }
   } while (0);
   do if ((i8 | 0) == 199) {
    do if (!(i93 << 24 >> 24)) i8 = 204; else {
     if (HEAP8[i21 + 237 >> 0] | 0) {
      i8 = 204;
      break;
     }
     i83 = HEAP8[i21 + 239 >> 0] | 0;
     i105 = i83 << 24 >> 24 == 0;
     i106 = i83;
     i107 = i21 + 239 | 0;
    } while (0);
    if ((i8 | 0) == 204) {
     i83 = i21 + 239 | 0;
     i105 = 0;
     i106 = HEAP8[i83 >> 0] | 0;
     i107 = i83;
    }
    i83 = i106 << 24 >> 24 != 0;
    if (HEAP8[i21 + 237 >> 0] | 0) {
     i108 = 1;
     i109 = i102;
     i110 = i105;
     i111 = i83;
     i112 = i107;
     i8 = 208;
     break;
    }
    i113 = i106 << 24 >> 24 == 0;
    i114 = i102;
    i115 = i105;
    i116 = i83;
    i117 = i107;
    i8 = 212;
   } else if ((i8 | 0) == 202) {
    i118 = i103;
    i119 = i21 + 239 | 0;
    i120 = i104;
    i121 = i103;
    i8 = 207;
   } else if ((i8 | 0) == 203) {
    i83 = i21 + 239 | 0;
    i118 = HEAP8[i83 >> 0] | 0;
    i119 = i83;
    i120 = i99;
    i121 = HEAP8[i21 + 237 >> 0] | 0;
    i8 = 207;
   } while (0);
   if ((i8 | 0) == 207) {
    i83 = i118 << 24 >> 24 != 0;
    if (!(i121 << 24 >> 24)) {
     i113 = 0;
     i114 = i120;
     i115 = 0;
     i116 = i83;
     i117 = i119;
     i8 = 212;
    } else {
     i108 = i121;
     i109 = i120;
     i110 = 0;
     i111 = i83;
     i112 = i119;
     i8 = 208;
    }
   }
   L299 : do if ((i8 | 0) == 208) {
    if (i93 << 24 >> 24) if (i109) {
     i122 = 0;
     i123 = i108;
     i124 = 0;
     i125 = i110;
     i126 = i112;
     i127 = i111;
     i128 = 0;
     i129 = 0;
     i8 = 217;
     break;
    } else {
     i130 = i108;
     i131 = 0;
     i132 = i110;
     i133 = i112;
     i134 = i111;
     i135 = 0;
     i8 = 224;
     break;
    }
    if (!(HEAP8[i112 >> 0] | 0)) i136 = (HEAP8[i21 + 240 >> 0] | 0) == 0; else i136 = 0;
    if (i109) {
     i122 = 0;
     i123 = i108;
     i124 = 0;
     i125 = i110;
     i126 = i112;
     i127 = i111;
     i128 = i136;
     i129 = 1;
     i8 = 217;
     break;
    }
    if (i136) {
     i137 = 0;
     i138 = 0;
     i139 = 1;
     i140 = i111;
     i141 = i112;
     i142 = i110;
     i143 = 0;
     i144 = i108;
     i145 = 0;
     i8 = 250;
     break;
    }
    if (i110) {
     i146 = 0;
     i147 = i108;
     i148 = 0;
     i149 = i112;
     i150 = i111;
     i151 = 1;
     i152 = 0;
     i153 = 0;
     i154 = 0;
     i155 = 0;
     i8 = 297;
    } else {
     i156 = 0;
     i157 = i108;
     i158 = 0;
     i159 = i112;
     i160 = i111;
     i161 = 1;
     i162 = 0;
     i163 = 0;
     i164 = 0;
     i165 = 0;
     i8 = 296;
    }
   } else if ((i8 | 0) == 212) {
    do if (!(i93 << 24 >> 24)) i166 = 1; else {
     if (HEAP8[i117 >> 0] | 0) {
      i166 = 0;
      break;
     }
     i83 = (HEAP8[i21 + 240 >> 0] | 0) == 0;
     if (i114) {
      i122 = i83;
      i123 = 0;
      i124 = i113;
      i125 = i115;
      i126 = i117;
      i127 = i116;
      i128 = 0;
      i129 = 0;
      i8 = 217;
      break L299;
     } else {
      i167 = i83;
      i168 = 0;
      i169 = i113;
      i170 = 0;
      i171 = i115;
      i172 = i117;
      i173 = i116;
      i174 = 0;
      i175 = 0;
      i8 = 227;
      break L299;
     }
    } while (0);
    if (i114) {
     i122 = 0;
     i123 = 0;
     i124 = i113;
     i125 = i115;
     i126 = i117;
     i127 = i116;
     i128 = 0;
     i129 = i166;
     i8 = 217;
    } else {
     i130 = 0;
     i131 = i113;
     i132 = i115;
     i133 = i117;
     i134 = i116;
     i135 = i166;
     i8 = 224;
    }
   } while (0);
   do if ((i8 | 0) == 217) {
    i93 = HEAP32[1460598] | 0;
    i83 = HEAP32[i93 + 120 >> 2] | 0;
    if ((i83 | 0) <= -1) {
     i167 = i122;
     i168 = i123;
     i169 = i124;
     i170 = 1;
     i171 = i125;
     i172 = i126;
     i173 = i127;
     i174 = i128;
     i175 = i129;
     i8 = 227;
     break;
    }
    if ((i83 | 0) >= 512) ___assert_fail(32321, 31803, 4844, 32415);
    f92 = Math_fround(HEAPF32[i93 + 1092 + (i83 << 2) >> 2]);
    if (!(f92 == Math_fround(0.0))) {
     f90 = Math_fround(HEAPF32[i93 + 132 >> 2]);
     if (!(f92 > f90)) {
      i167 = i122;
      i168 = i123;
      i169 = i124;
      i170 = 1;
      i171 = i125;
      i172 = i126;
      i173 = i127;
      i174 = i128;
      i175 = i129;
      i8 = 227;
      break;
     }
     f91 = Math_fround(HEAPF32[i93 + 136 >> 2]);
     if (f92 <= f90 | f91 <= Math_fround(0.0)) {
      i167 = i122;
      i168 = i123;
      i169 = i124;
      i170 = 1;
      i171 = i125;
      i172 = i126;
      i173 = i127;
      i174 = i128;
      i175 = i129;
      i8 = 227;
      break;
     }
     if ((~~Math_fround(Math_fround(f92 - f90) / f91) | 0) <= (~~Math_fround(Math_fround(Math_fround(f92 - Math_fround(HEAPF32[i93 + 20 >> 2])) - f90) / f91) | 0)) {
      i167 = i122;
      i168 = i123;
      i169 = i124;
      i170 = 1;
      i171 = i125;
      i172 = i126;
      i173 = i127;
      i174 = i128;
      i175 = i129;
      i8 = 227;
      break;
     }
    }
    i83 = i30 | i29 ^ 1;
    if (i83 | i58) {
     i176 = i122;
     i177 = i123;
     i178 = i124;
     i179 = i125;
     i180 = i126;
     i181 = i127;
     i182 = i128;
     i183 = i129;
     i184 = i83 ^ 1;
     i185 = i93;
     i8 = 242;
     break;
    }
    i186 = (HEAP32[i21 + 7260 >> 2] | 0) != (HEAP32[i21 + 7264 >> 2] | 0);
    i187 = i129;
    i188 = i128;
    i189 = i127;
    i190 = i126;
    i191 = i125;
    i192 = i124;
    i193 = i123;
    i194 = i122;
    i8 = 241;
   } else if ((i8 | 0) == 224) if (i132) {
    i146 = 0;
    i147 = i130;
    i148 = i131;
    i149 = i133;
    i150 = i134;
    i151 = i135;
    i152 = 0;
    i153 = 0;
    i154 = 0;
    i155 = 0;
    i8 = 297;
   } else {
    i156 = 0;
    i157 = i130;
    i158 = i131;
    i159 = i133;
    i160 = i134;
    i161 = i135;
    i162 = 0;
    i163 = 0;
    i164 = 0;
    i165 = 0;
    i8 = 296;
   } while (0);
   L327 : do if ((i8 | 0) == 227) {
    L329 : do if (i167) {
     i93 = HEAP32[1460598] | 0;
     i83 = HEAP32[i93 + 88 >> 2] | 0;
     do if ((i83 | 0) > -1) {
      if ((i83 | 0) >= 512) ___assert_fail(32321, 31803, 4844, 32415);
      f91 = Math_fround(HEAPF32[i93 + 1092 + (i83 << 2) >> 2]);
      if (f91 == Math_fround(0.0)) i195 = 1; else {
       f90 = Math_fround(HEAPF32[i93 + 132 >> 2]);
       if (!(f91 > f90)) break;
       f92 = Math_fround(HEAPF32[i93 + 136 >> 2]);
       if (f91 <= f90 | f92 <= Math_fround(0.0)) break;
       i195 = (~~Math_fround(Math_fround(f91 - f90) / f92) | 0) > (~~Math_fround(Math_fround(Math_fround(f91 - Math_fround(HEAPF32[i93 + 20 >> 2])) - f90) / f92) | 0);
      }
      i87 = i30 | i29 & i195 ^ 1;
      if (i87 | i58) {
       i196 = 1;
       i197 = i87 ^ 1;
       break L329;
      }
      i87 = (HEAP32[i21 + 7260 >> 2] | 0) != (HEAP32[i21 + 7264 >> 2] | 0);
      if (i170) {
       i186 = i87;
       i187 = i175;
       i188 = i174;
       i189 = i173;
       i190 = i172;
       i191 = i171;
       i192 = i169;
       i193 = i168;
       i194 = 1;
       i8 = 241;
       break L327;
      } else {
       i198 = 1;
       i199 = i168;
       i200 = i169;
       i201 = i171;
       i202 = i172;
       i203 = i173;
       i204 = i174;
       i205 = i175;
       i206 = 0;
       i207 = i87;
       i8 = 249;
       break L327;
      }
     } while (0);
     if (i170) {
      i186 = 0;
      i187 = i175;
      i188 = i174;
      i189 = i173;
      i190 = i172;
      i191 = i171;
      i192 = i169;
      i193 = i168;
      i194 = 1;
      i8 = 241;
      break L327;
     } else {
      i198 = 1;
      i199 = i168;
      i200 = i169;
      i201 = i171;
      i202 = i172;
      i203 = i173;
      i204 = i174;
      i205 = i175;
      i206 = 0;
      i207 = 0;
      i8 = 249;
      break L327;
     }
    } else {
     i196 = 0;
     i197 = 0;
    } while (0);
    if (i170) {
     i186 = i197;
     i187 = i175;
     i188 = i174;
     i189 = i173;
     i190 = i172;
     i191 = i171;
     i192 = i169;
     i193 = i168;
     i194 = i196;
     i8 = 241;
    } else {
     i198 = i196;
     i199 = i168;
     i200 = i169;
     i201 = i171;
     i202 = i172;
     i203 = i173;
     i204 = i174;
     i205 = i175;
     i206 = 0;
     i207 = i197;
     i8 = 249;
    }
   } while (0);
   if ((i8 | 0) == 241) {
    i176 = i194;
    i177 = i193;
    i178 = i192;
    i179 = i191;
    i180 = i190;
    i181 = i189;
    i182 = i188;
    i183 = i187;
    i184 = i186;
    i185 = HEAP32[1460598] | 0;
    i8 = 242;
   }
   do if ((i8 | 0) == 242) {
    i93 = HEAP32[i185 + 112 >> 2] | 0;
    if ((i93 | 0) <= -1) {
     i198 = i176;
     i199 = i177;
     i200 = i178;
     i201 = i179;
     i202 = i180;
     i203 = i181;
     i204 = i182;
     i205 = i183;
     i206 = 1;
     i207 = i184;
     i8 = 249;
     break;
    }
    if ((i93 | 0) >= 512) ___assert_fail(32321, 31803, 4844, 32415);
    f92 = Math_fround(HEAPF32[i185 + 1092 + (i93 << 2) >> 2]);
    if (!(f92 == Math_fround(0.0))) {
     f90 = Math_fround(HEAPF32[i185 + 132 >> 2]);
     if (!(f92 > f90)) {
      i198 = i176;
      i199 = i177;
      i200 = i178;
      i201 = i179;
      i202 = i180;
      i203 = i181;
      i204 = i182;
      i205 = i183;
      i206 = 1;
      i207 = i184;
      i8 = 249;
      break;
     }
     f91 = Math_fround(HEAPF32[i185 + 136 >> 2]);
     if (f92 <= f90 | f91 <= Math_fround(0.0)) {
      i198 = i176;
      i199 = i177;
      i200 = i178;
      i201 = i179;
      i202 = i180;
      i203 = i181;
      i204 = i182;
      i205 = i183;
      i206 = 1;
      i207 = i184;
      i8 = 249;
      break;
     }
     if ((~~Math_fround(Math_fround(f92 - f90) / f91) | 0) <= (~~Math_fround(Math_fround(Math_fround(f92 - Math_fround(HEAPF32[i185 + 20 >> 2])) - f90) / f91) | 0)) {
      i198 = i176;
      i199 = i177;
      i200 = i178;
      i201 = i179;
      i202 = i180;
      i203 = i181;
      i204 = i182;
      i205 = i183;
      i206 = 1;
      i207 = i184;
      i8 = 249;
      break;
     }
    }
    if (i30 | i58) {
     i208 = i176;
     i209 = i177;
     i210 = i178;
     i211 = i179;
     i212 = i180;
     i213 = i181;
     i214 = i183;
     i215 = i30 ^ 1;
     i216 = i184;
     i217 = i185;
     i8 = 263;
     break;
    }
    i218 = (HEAP32[i21 + 7260 >> 2] | 0) != (HEAP32[i21 + 7264 >> 2] | 0);
    i219 = i184;
    i220 = i183;
    i221 = i181;
    i222 = i180;
    i223 = i179;
    i224 = i178;
    i225 = i177;
    i226 = i176;
    i8 = 262;
   } while (0);
   if ((i8 | 0) == 249) if (i204) {
    i137 = i207;
    i138 = i206;
    i139 = i205;
    i140 = i203;
    i141 = i202;
    i142 = i201;
    i143 = i200;
    i144 = i199;
    i145 = i198;
    i8 = 250;
   } else {
    i227 = i198;
    i228 = i199;
    i229 = i200;
    i230 = i201;
    i231 = i202;
    i232 = i203;
    i233 = i205;
    i234 = i206;
    i235 = i207;
    i236 = 0;
    i8 = 261;
   }
   do if ((i8 | 0) == 250) {
    i93 = HEAP32[1460598] | 0;
    i83 = HEAP32[i93 + 84 >> 2] | 0;
    if ((i83 | 0) <= -1) {
     i227 = i145;
     i228 = i144;
     i229 = i143;
     i230 = i142;
     i231 = i141;
     i232 = i140;
     i233 = i139;
     i234 = i138;
     i235 = i137;
     i236 = 0;
     i8 = 261;
     break;
    }
    if ((i83 | 0) >= 512) ___assert_fail(32321, 31803, 4844, 32415);
    f91 = Math_fround(HEAPF32[i93 + 1092 + (i83 << 2) >> 2]);
    if (f91 == Math_fround(0.0)) i237 = 1; else {
     f90 = Math_fround(HEAPF32[i93 + 132 >> 2]);
     if (!(f91 > f90)) {
      i227 = i145;
      i228 = i144;
      i229 = i143;
      i230 = i142;
      i231 = i141;
      i232 = i140;
      i233 = i139;
      i234 = i138;
      i235 = i137;
      i236 = 0;
      i8 = 261;
      break;
     }
     f92 = Math_fround(HEAPF32[i93 + 136 >> 2]);
     if (f91 <= f90 | f92 <= Math_fround(0.0)) {
      i227 = i145;
      i228 = i144;
      i229 = i143;
      i230 = i142;
      i231 = i141;
      i232 = i140;
      i233 = i139;
      i234 = i138;
      i235 = i137;
      i236 = 0;
      i8 = 261;
      break;
     }
     i237 = (~~Math_fround(Math_fround(f91 - f90) / f92) | 0) > (~~Math_fround(Math_fround(Math_fround(f91 - Math_fround(HEAPF32[i93 + 20 >> 2])) - f90) / f92) | 0);
    }
    i93 = i30 | i237 ^ 1;
    if (i93 | i58) {
     i227 = i145;
     i228 = i144;
     i229 = i143;
     i230 = i142;
     i231 = i141;
     i232 = i140;
     i233 = i139;
     i234 = i138;
     i235 = i137;
     i236 = i93 ^ 1;
     i8 = 261;
     break;
    }
    i93 = (HEAP32[i21 + 7260 >> 2] | 0) != (HEAP32[i21 + 7264 >> 2] | 0);
    if (i138) {
     i218 = i93;
     i219 = i137;
     i220 = i139;
     i221 = i140;
     i222 = i141;
     i223 = i142;
     i224 = i143;
     i225 = i144;
     i226 = i145;
     i8 = 262;
    } else {
     i238 = i145;
     i239 = i144;
     i240 = i143;
     i241 = i142;
     i242 = i141;
     i243 = i140;
     i244 = i139;
     i245 = 0;
     i246 = i93;
     i247 = i137;
     i8 = 270;
    }
   } while (0);
   if ((i8 | 0) == 261) if (i234) {
    i218 = i236;
    i219 = i235;
    i220 = i233;
    i221 = i232;
    i222 = i231;
    i223 = i230;
    i224 = i229;
    i225 = i228;
    i226 = i227;
    i8 = 262;
   } else {
    i238 = i227;
    i239 = i228;
    i240 = i229;
    i241 = i230;
    i242 = i231;
    i243 = i232;
    i244 = i233;
    i245 = 0;
    i246 = i236;
    i247 = i235;
    i8 = 270;
   }
   if ((i8 | 0) == 262) {
    i208 = i226;
    i209 = i225;
    i210 = i224;
    i211 = i223;
    i212 = i222;
    i213 = i221;
    i214 = i220;
    i215 = i218;
    i216 = i219;
    i217 = HEAP32[1460598] | 0;
    i8 = 263;
   }
   do if ((i8 | 0) == 263) {
    i93 = HEAP32[i217 + 116 >> 2] | 0;
    if ((i93 | 0) <= -1) {
     i238 = i208;
     i239 = i209;
     i240 = i210;
     i241 = i211;
     i242 = i212;
     i243 = i213;
     i244 = i214;
     i245 = 1;
     i246 = i215;
     i247 = i216;
     i8 = 270;
     break;
    }
    if ((i93 | 0) >= 512) ___assert_fail(32321, 31803, 4844, 32415);
    f92 = Math_fround(HEAPF32[i217 + 1092 + (i93 << 2) >> 2]);
    if (f92 == Math_fround(0.0)) {
     i248 = i29;
     i249 = i216;
     i250 = i215;
     i251 = i214;
     i252 = i213;
     i253 = i212;
     i254 = i211;
     i255 = i210;
     i256 = i209;
     i8 = 280;
     break;
    }
    f90 = Math_fround(HEAPF32[i217 + 132 >> 2]);
    if (!(f92 > f90)) {
     i238 = i208;
     i239 = i209;
     i240 = i210;
     i241 = i211;
     i242 = i212;
     i243 = i213;
     i244 = i214;
     i245 = 1;
     i246 = i215;
     i247 = i216;
     i8 = 270;
     break;
    }
    f91 = Math_fround(HEAPF32[i217 + 136 >> 2]);
    if (f92 <= f90 | f91 <= Math_fround(0.0)) {
     i238 = i208;
     i239 = i209;
     i240 = i210;
     i241 = i211;
     i242 = i212;
     i243 = i213;
     i244 = i214;
     i245 = 1;
     i246 = i215;
     i247 = i216;
     i8 = 270;
     break;
    }
    if ((~~Math_fround(Math_fround(f92 - f90) / f91) | 0) > (~~Math_fround(Math_fround(Math_fround(f92 - Math_fround(HEAPF32[i217 + 20 >> 2])) - f90) / f91) | 0)) {
     i248 = i29;
     i249 = i216;
     i250 = i215;
     i251 = i214;
     i252 = i213;
     i253 = i212;
     i254 = i211;
     i255 = i210;
     i256 = i209;
     i8 = 280;
    } else {
     i238 = i208;
     i239 = i209;
     i240 = i210;
     i241 = i211;
     i242 = i212;
     i243 = i213;
     i244 = i214;
     i245 = 1;
     i246 = i215;
     i247 = i216;
     i8 = 270;
    }
   } while (0);
   L385 : do if ((i8 | 0) == 270) {
    do if (i238) {
     i93 = HEAP32[1460598] | 0;
     i83 = HEAP32[i93 + 84 >> 2] | 0;
     if ((i83 | 0) <= -1) break;
     if ((i83 | 0) >= 512) ___assert_fail(32321, 31803, 4844, 32415);
     f91 = Math_fround(HEAPF32[i93 + 1092 + (i83 << 2) >> 2]);
     if (!(f91 == Math_fround(0.0))) {
      f90 = Math_fround(HEAPF32[i93 + 132 >> 2]);
      if (!(f91 > f90)) break;
      f92 = Math_fround(HEAPF32[i93 + 136 >> 2]);
      if (f91 <= f90 | f92 <= Math_fround(0.0)) break;
      if ((~~Math_fround(Math_fround(f91 - f90) / f92) | 0) <= (~~Math_fround(Math_fround(Math_fround(f91 - Math_fround(HEAPF32[i93 + 20 >> 2])) - f90) / f92) | 0)) break;
     }
     if (i245) {
      i248 = i29;
      i249 = i247;
      i250 = i246;
      i251 = i244;
      i252 = i243;
      i253 = i242;
      i254 = i241;
      i255 = i240;
      i256 = i239;
      i8 = 280;
      break L385;
     } else {
      i257 = i29;
      i258 = i247;
      i259 = i246;
      i260 = 0;
      i261 = i244;
      i262 = i243;
      i263 = i242;
      i264 = i241;
      i265 = i240;
      i266 = i239;
      i267 = 0;
      i8 = 295;
      break L385;
     }
    } while (0);
    if (i245) {
     i248 = 0;
     i249 = i247;
     i250 = i246;
     i251 = i244;
     i252 = i243;
     i253 = i242;
     i254 = i241;
     i255 = i240;
     i256 = i239;
     i8 = 280;
    } else {
     i257 = 0;
     i258 = i247;
     i259 = i246;
     i260 = 0;
     i261 = i244;
     i262 = i243;
     i263 = i242;
     i264 = i241;
     i265 = i240;
     i266 = i239;
     i267 = 0;
     i8 = 295;
    }
   } while (0);
   do if ((i8 | 0) == 280) {
    i93 = HEAP32[1460598] | 0;
    i83 = HEAP32[i93 + 128 >> 2] | 0;
    do if ((i83 | 0) > -1) {
     if ((i83 | 0) >= 512) ___assert_fail(32321, 31803, 4844, 32415);
     f92 = Math_fround(HEAPF32[i93 + 1092 + (i83 << 2) >> 2]);
     if (!(f92 == Math_fround(0.0))) {
      f90 = Math_fround(HEAPF32[i93 + 132 >> 2]);
      if (!(f92 > f90)) {
       i268 = 0;
       break;
      }
      f91 = Math_fround(HEAPF32[i93 + 136 >> 2]);
      if (f92 <= f90 | f91 <= Math_fround(0.0)) {
       i268 = 0;
       break;
      }
      if ((~~Math_fround(Math_fround(f92 - f90) / f91) | 0) <= (~~Math_fround(Math_fround(Math_fround(f92 - Math_fround(HEAPF32[i93 + 20 >> 2])) - f90) / f91) | 0)) {
       i268 = 0;
       break;
      }
     }
     i268 = (i5 & 81920 | 0) == 0;
    } else i268 = 0; while (0);
    i83 = HEAP32[i93 + 124 >> 2] | 0;
    if ((i83 | 0) <= -1) {
     i257 = i248;
     i258 = i249;
     i259 = i250;
     i260 = 1;
     i261 = i251;
     i262 = i252;
     i263 = i253;
     i264 = i254;
     i265 = i255;
     i266 = i256;
     i267 = i268;
     i8 = 295;
     break;
    }
    if ((i83 | 0) >= 512) ___assert_fail(32321, 31803, 4844, 32415);
    f91 = Math_fround(HEAPF32[i93 + 1092 + (i83 << 2) >> 2]);
    if (f91 == Math_fround(0.0)) {
     i269 = i248;
     i270 = i249;
     i271 = i250;
     i272 = 1;
     i273 = i251;
     i274 = i252;
     i275 = i253;
     i276 = i255;
     i277 = i256;
     i278 = i93;
     i279 = i268;
     i8 = 304;
     break;
    }
    f90 = Math_fround(HEAPF32[i93 + 132 >> 2]);
    if (!(f91 > f90)) {
     i257 = i248;
     i258 = i249;
     i259 = i250;
     i260 = 1;
     i261 = i251;
     i262 = i252;
     i263 = i253;
     i264 = i254;
     i265 = i255;
     i266 = i256;
     i267 = i268;
     i8 = 295;
     break;
    }
    f92 = Math_fround(HEAPF32[i93 + 136 >> 2]);
    if (f91 <= f90 | f92 <= Math_fround(0.0)) {
     i257 = i248;
     i258 = i249;
     i259 = i250;
     i260 = 1;
     i261 = i251;
     i262 = i252;
     i263 = i253;
     i264 = i254;
     i265 = i255;
     i266 = i256;
     i267 = i268;
     i8 = 295;
     break;
    }
    if ((~~Math_fround(Math_fround(f91 - f90) / f92) | 0) > (~~Math_fround(Math_fround(Math_fround(f91 - Math_fround(HEAPF32[i93 + 20 >> 2])) - f90) / f92) | 0)) {
     i269 = i248;
     i270 = i249;
     i271 = i250;
     i272 = 1;
     i273 = i251;
     i274 = i252;
     i275 = i253;
     i276 = i255;
     i277 = i256;
     i278 = i93;
     i279 = i268;
     i8 = 304;
    } else {
     i257 = i248;
     i258 = i249;
     i259 = i250;
     i260 = 1;
     i261 = i251;
     i262 = i252;
     i263 = i253;
     i264 = i254;
     i265 = i255;
     i266 = i256;
     i267 = i268;
     i8 = 295;
    }
   } while (0);
   if ((i8 | 0) == 295) if (i264) {
    i146 = i267;
    i147 = i266;
    i148 = i265;
    i149 = i263;
    i150 = i262;
    i151 = i261;
    i152 = i260;
    i153 = i259;
    i154 = i258;
    i155 = i257;
    i8 = 297;
   } else {
    i156 = i267;
    i157 = i266;
    i158 = i265;
    i159 = i263;
    i160 = i262;
    i161 = i261;
    i162 = i260;
    i163 = i259;
    i164 = i258;
    i165 = i257;
    i8 = 296;
   }
   do if ((i8 | 0) == 296) {
    i280 = i160;
    i281 = i158;
    i282 = i157;
    i283 = i159;
    i284 = i161;
    i285 = 0;
    i286 = i156;
    i287 = i164;
    i288 = i163;
    i289 = i165;
    i290 = i162;
    i291 = HEAP32[1460598] | 0;
   } else if ((i8 | 0) == 297) {
    i83 = HEAP32[1460598] | 0;
    i87 = HEAP32[i83 + 128 >> 2] | 0;
    if ((i87 | 0) <= -1) {
     i280 = i150;
     i281 = i148;
     i282 = i147;
     i283 = i149;
     i284 = i151;
     i285 = 0;
     i286 = i146;
     i287 = i154;
     i288 = i153;
     i289 = i155;
     i290 = i152;
     i291 = i83;
     break;
    }
    if ((i87 | 0) >= 512) ___assert_fail(32321, 31803, 4844, 32415);
    f92 = Math_fround(HEAPF32[i83 + 1092 + (i87 << 2) >> 2]);
    if (f92 == Math_fround(0.0)) {
     i269 = i155;
     i270 = i154;
     i271 = i153;
     i272 = i152;
     i273 = i151;
     i274 = i150;
     i275 = i149;
     i276 = i148;
     i277 = i147;
     i278 = i83;
     i279 = i146;
     i8 = 304;
     break;
    }
    f90 = Math_fround(HEAPF32[i83 + 132 >> 2]);
    if (!(f92 > f90)) {
     i280 = i150;
     i281 = i148;
     i282 = i147;
     i283 = i149;
     i284 = i151;
     i285 = 0;
     i286 = i146;
     i287 = i154;
     i288 = i153;
     i289 = i155;
     i290 = i152;
     i291 = i83;
     break;
    }
    f91 = Math_fround(HEAPF32[i83 + 136 >> 2]);
    if (f92 <= f90 | f91 <= Math_fround(0.0)) {
     i280 = i150;
     i281 = i148;
     i282 = i147;
     i283 = i149;
     i284 = i151;
     i285 = 0;
     i286 = i146;
     i287 = i154;
     i288 = i153;
     i289 = i155;
     i290 = i152;
     i291 = i83;
     break;
    }
    if ((~~Math_fround(Math_fround(f92 - f90) / f91) | 0) > (~~Math_fround(Math_fround(Math_fround(f92 - Math_fround(HEAPF32[i83 + 20 >> 2])) - f90) / f91) | 0)) {
     i269 = i155;
     i270 = i154;
     i271 = i153;
     i272 = i152;
     i273 = i151;
     i274 = i150;
     i275 = i149;
     i276 = i148;
     i277 = i147;
     i278 = i83;
     i279 = i146;
     i8 = 304;
    } else {
     i280 = i150;
     i281 = i148;
     i282 = i147;
     i283 = i149;
     i284 = i151;
     i285 = 0;
     i286 = i146;
     i287 = i154;
     i288 = i153;
     i289 = i155;
     i290 = i152;
     i291 = i83;
    }
   } while (0);
   if ((i8 | 0) == 304) {
    i280 = i274;
    i281 = i276;
    i282 = i277;
    i283 = i275;
    i284 = i273;
    i285 = (i5 & 81920 | 0) == 0;
    i286 = i279;
    i287 = i270;
    i288 = i271;
    i289 = i269;
    i290 = i272;
    i291 = i278;
   }
   i83 = HEAP32[i291 + 52 >> 2] | 0;
   do if ((i83 | 0) > -1) {
    if ((i83 | 0) >= 512) ___assert_fail(32321, 31803, 4844, 32415);
    f91 = Math_fround(HEAPF32[i291 + 1092 + (i83 << 2) >> 2]);
    if (!(f91 == Math_fround(0.0))) {
     f90 = Math_fround(HEAPF32[i291 + 132 >> 2]);
     if (!(f91 > f90)) break;
     f92 = Math_fround(HEAPF32[i291 + 136 >> 2]);
     if (f91 <= f90 | f92 <= Math_fround(0.0)) break;
     if ((~~Math_fround(Math_fround(f91 - f90) / f92) | 0) <= (~~Math_fround(Math_fround(Math_fround(f91 - Math_fround(HEAPF32[i291 + 20 >> 2])) - f90) / f92) | 0)) break;
    }
    __ZN18ImGuiTextEditState12OnKeyPressedEi(i12, (i281 ? 65540 : i280 ? 65548 : 65536) | i57);
    i96 = 1;
    i97 = 0;
    i98 = 0;
    break L275;
   } while (0);
   i83 = HEAP32[i291 + 56 >> 2] | 0;
   do if ((i83 | 0) > -1) {
    if ((i83 | 0) >= 512) ___assert_fail(32321, 31803, 4844, 32415);
    f92 = Math_fround(HEAPF32[i291 + 1092 + (i83 << 2) >> 2]);
    if (!(f92 == Math_fround(0.0))) {
     f90 = Math_fround(HEAPF32[i291 + 132 >> 2]);
     if (!(f92 > f90)) break;
     f91 = Math_fround(HEAPF32[i291 + 136 >> 2]);
     if (f92 <= f90 | f91 <= Math_fround(0.0)) break;
     if ((~~Math_fround(Math_fround(f92 - f90) / f91) | 0) <= (~~Math_fround(Math_fround(Math_fround(f92 - Math_fround(HEAPF32[i291 + 20 >> 2])) - f90) / f91) | 0)) break;
    }
    __ZN18ImGuiTextEditState12OnKeyPressedEi(i12, (i281 ? 65541 : i280 ? 65549 : 65537) | i57);
    i96 = 1;
    i97 = 0;
    i98 = 0;
    break L275;
   } while (0);
   i83 = HEAP32[i291 + 60 >> 2] | 0;
   do if ((i83 | 0) > -1) {
    if ((i83 | 0) >= 512) ___assert_fail(32321, 31803, 4844, 32415);
    f91 = Math_fround(HEAPF32[i291 + 1092 + (i83 << 2) >> 2]);
    if (f91 == Math_fround(0.0)) i292 = 1; else {
     f90 = Math_fround(HEAPF32[i291 + 132 >> 2]);
     if (!(f91 > f90)) break;
     f92 = Math_fround(HEAPF32[i291 + 136 >> 2]);
     if (f91 <= f90 | f92 <= Math_fround(0.0)) break;
     i292 = (~~Math_fround(Math_fround(f91 - f90) / f92) | 0) > (~~Math_fround(Math_fround(Math_fround(f91 - Math_fround(HEAPF32[i291 + 20 >> 2])) - f90) / f92) | 0);
    }
    if (i58 | i292 ^ 1) break;
    if (!(i282 << 24 >> 24)) {
     __ZN18ImGuiTextEditState12OnKeyPressedEi(i12, (i281 ? 65542 : 65538) | i57);
     i96 = 1;
     i97 = 0;
     i98 = 0;
     break L275;
    } else {
     i87 = i51 + 88 | 0;
     f92 = Math_fround(HEAPF32[i87 >> 2]);
     f90 = Math_fround(f92 - Math_fround(HEAPF32[i21 + 6184 >> 2]));
     i86 = f90 >= Math_fround(0.0);
     f91 = i86 ? f90 : Math_fround(0.0);
     i86 = i51 + 224 | 0;
     f90 = Math_fround(f92 + Math_fround(HEAPF32[i86 >> 2]));
     HEAPF32[i87 >> 2] = f91;
     f92 = Math_fround(f90 - f91);
     HEAPF32[i86 >> 2] = f92;
     i96 = 1;
     i97 = 0;
     i98 = 0;
     break L275;
    }
   } while (0);
   i83 = HEAP32[i291 + 64 >> 2] | 0;
   do if ((i83 | 0) > -1) {
    if ((i83 | 0) >= 512) ___assert_fail(32321, 31803, 4844, 32415);
    f92 = Math_fround(HEAPF32[i291 + 1092 + (i83 << 2) >> 2]);
    if (f92 == Math_fround(0.0)) i293 = 1; else {
     f91 = Math_fround(HEAPF32[i291 + 132 >> 2]);
     if (!(f92 > f91)) break;
     f90 = Math_fround(HEAPF32[i291 + 136 >> 2]);
     if (f92 <= f91 | f90 <= Math_fround(0.0)) break;
     i293 = (~~Math_fround(Math_fround(f92 - f91) / f90) | 0) > (~~Math_fround(Math_fround(Math_fround(f92 - Math_fround(HEAPF32[i291 + 20 >> 2])) - f91) / f90) | 0);
    }
    if (i58 | i293 ^ 1) break;
    if (!(i282 << 24 >> 24)) {
     __ZN18ImGuiTextEditState12OnKeyPressedEi(i12, (i281 ? 65543 : 65539) | i57);
     i96 = 1;
     i97 = 0;
     i98 = 0;
     break L275;
    } else {
     i86 = i51 + 88 | 0;
     f90 = Math_fround(HEAPF32[i86 >> 2]);
     f91 = Math_fround(f90 + Math_fround(HEAPF32[i21 + 6184 >> 2]));
     i87 = HEAP32[i291 + 6392 >> 2] | 0;
     f92 = Math_fround(HEAPF32[i87 + 48 >> 2]);
     f43 = Math_fround(HEAPF32[i87 + 32 >> 2]);
     f49 = Math_fround(f92 - Math_fround(f43 - Math_fround(HEAPF32[i87 + 112 >> 2])));
     i87 = f49 <= Math_fround(0.0);
     f43 = i87 ? Math_fround(0.0) : f49;
     f49 = f91 < f43 ? f91 : f43;
     i87 = i51 + 224 | 0;
     f43 = Math_fround(f90 + Math_fround(HEAPF32[i87 >> 2]));
     HEAPF32[i86 >> 2] = f49;
     f90 = Math_fround(f43 - f49);
     HEAPF32[i87 >> 2] = f90;
     i96 = 1;
     i97 = 0;
     i98 = 0;
     break L275;
    }
   } while (0);
   i83 = HEAP32[i291 + 76 >> 2] | 0;
   do if ((i83 | 0) > -1) {
    if ((i83 | 0) >= 512) ___assert_fail(32321, 31803, 4844, 32415);
    f90 = Math_fround(HEAPF32[i291 + 1092 + (i83 << 2) >> 2]);
    if (!(f90 == Math_fround(0.0))) {
     f49 = Math_fround(HEAPF32[i291 + 132 >> 2]);
     if (!(f90 > f49)) break;
     f43 = Math_fround(HEAPF32[i291 + 136 >> 2]);
     if (f90 <= f49 | f43 <= Math_fround(0.0)) break;
     if ((~~Math_fround(Math_fround(f90 - f49) / f43) | 0) <= (~~Math_fround(Math_fround(Math_fround(f90 - Math_fround(HEAPF32[i291 + 20 >> 2])) - f49) / f43) | 0)) break;
    }
    __ZN18ImGuiTextEditState12OnKeyPressedEi(i12, (i282 << 24 >> 24 ? 65542 : 65540) | i57);
    i96 = 1;
    i97 = 0;
    i98 = 0;
    break L275;
   } while (0);
   i83 = HEAP32[i291 + 80 >> 2] | 0;
   do if ((i83 | 0) > -1) {
    if ((i83 | 0) >= 512) ___assert_fail(32321, 31803, 4844, 32415);
    f43 = Math_fround(HEAPF32[i291 + 1092 + (i83 << 2) >> 2]);
    if (!(f43 == Math_fround(0.0))) {
     f49 = Math_fround(HEAPF32[i291 + 132 >> 2]);
     if (!(f43 > f49)) break;
     f90 = Math_fround(HEAPF32[i291 + 136 >> 2]);
     if (f43 <= f49 | f90 <= Math_fround(0.0)) break;
     if ((~~Math_fround(Math_fround(f43 - f49) / f90) | 0) <= (~~Math_fround(Math_fround(Math_fround(f43 - Math_fround(HEAPF32[i291 + 20 >> 2])) - f49) / f90) | 0)) break;
    }
    __ZN18ImGuiTextEditState12OnKeyPressedEi(i12, (i282 << 24 >> 24 ? 65543 : 65541) | i57);
    i96 = 1;
    i97 = 0;
    i98 = 0;
    break L275;
   } while (0);
   i83 = HEAP32[i291 + 88 >> 2] | 0;
   do if ((i83 | 0) > -1) {
    if ((i83 | 0) >= 512) ___assert_fail(32321, 31803, 4844, 32415);
    f90 = Math_fround(HEAPF32[i291 + 1092 + (i83 << 2) >> 2]);
    if (f90 == Math_fround(0.0)) i294 = 1; else {
     f49 = Math_fround(HEAPF32[i291 + 132 >> 2]);
     if (!(f90 > f49)) {
      i8 = 366;
      break;
     }
     f43 = Math_fround(HEAPF32[i291 + 136 >> 2]);
     if (f90 <= f49 | f43 <= Math_fround(0.0)) {
      i8 = 366;
      break;
     }
     i294 = (~~Math_fround(Math_fround(f90 - f49) / f43) | 0) > (~~Math_fround(Math_fround(Math_fround(f90 - Math_fround(HEAPF32[i291 + 20 >> 2])) - f49) / f43) | 0);
    }
    i87 = i29 ^ 1;
    if (i87 | i294 ^ 1) {
     i295 = i87;
     break;
    }
    __ZN18ImGuiTextEditState12OnKeyPressedEi(i12, i57 | 65544);
    i96 = 1;
    i97 = 0;
    i98 = 0;
    break L275;
   } else i8 = 366; while (0);
   if ((i8 | 0) == 366) i295 = i29 ^ 1;
   i83 = HEAP32[i291 + 92 >> 2] | 0;
   do if ((i83 | 0) > -1) {
    if ((i83 | 0) >= 512) ___assert_fail(32321, 31803, 4844, 32415);
    f43 = Math_fround(HEAPF32[i291 + 1092 + (i83 << 2) >> 2]);
    if (f43 == Math_fround(0.0)) i296 = 1; else {
     f49 = Math_fround(HEAPF32[i291 + 132 >> 2]);
     if (!(f43 > f49)) break;
     f90 = Math_fround(HEAPF32[i291 + 136 >> 2]);
     if (f43 <= f49 | f90 <= Math_fround(0.0)) break;
     i296 = (~~Math_fround(Math_fround(f43 - f49) / f90) | 0) > (~~Math_fround(Math_fround(Math_fround(f43 - Math_fround(HEAPF32[i291 + 20 >> 2])) - f49) / f90) | 0);
    }
    if (i295 | i296 ^ 1) break;
    do if ((HEAP32[i21 + 7260 >> 2] | 0) == (HEAP32[i21 + 7264 >> 2] | 0)) {
     if (i280) {
      __ZN18ImGuiTextEditState12OnKeyPressedEi(i12, 196620);
      break;
     }
     if (!i15) break;
     if (!(HEAP8[i21 + 240 >> 0] | 0)) break;
     if ((HEAP8[i283 >> 0] | i282) << 24 >> 24) break;
     __ZN18ImGuiTextEditState12OnKeyPressedEi(i12, 196612);
    } while (0);
    __ZN18ImGuiTextEditState12OnKeyPressedEi(i12, i57 | 65545);
    i96 = 1;
    i97 = 0;
    i98 = 0;
    break L275;
   } while (0);
   i57 = HEAP32[i291 + 100 >> 2] | 0;
   do if ((i57 | 0) > -1) {
    if ((i57 | 0) >= 512) ___assert_fail(32321, 31803, 4844, 32415);
    f90 = Math_fround(HEAPF32[i291 + 1092 + (i57 << 2) >> 2]);
    if (!(f90 == Math_fround(0.0))) {
     f49 = Math_fround(HEAPF32[i291 + 132 >> 2]);
     if (!(f90 > f49)) break;
     f43 = Math_fround(HEAPF32[i291 + 136 >> 2]);
     if (f90 <= f49 | f43 <= Math_fround(0.0)) break;
     if ((~~Math_fround(Math_fround(f90 - f49) / f43) | 0) <= (~~Math_fround(Math_fround(Math_fround(f90 - Math_fround(HEAPF32[i291 + 20 >> 2])) - f49) / f43) | 0)) break;
    }
    if (!i28) {
     i96 = 1;
     i97 = 1;
     i98 = 1;
     break L275;
    }
    i15 = i282 << 24 >> 24 == 0;
    if (!(i5 & 2048)) {
     i83 = i15 ^ 1;
     if (i295 | i83) {
      i96 = 1;
      i97 = i83;
      i98 = i83;
      break L275;
     }
    } else if (i15 | i29 ^ 1) {
     i96 = 1;
     i97 = i15;
     i98 = i15;
     break L275;
    }
    HEAP32[i10 >> 2] = 10;
    if (__ZL24InputTextFilterCharacterPjiPFiP25ImGuiTextEditCallbackDataEPv(i10, i5, i6, i7) | 0) __ZN18ImGuiTextEditState12OnKeyPressedEi(i12, HEAP32[i10 >> 2] | 0);
    i96 = 1;
    i97 = 0;
    i98 = 0;
    break L275;
   } while (0);
   do if (!i27) {
    i57 = HEAP32[i291 + 48 >> 2] | 0;
    if ((i57 | 0) <= -1) break;
    if ((i57 | 0) >= 512) ___assert_fail(32321, 31803, 4844, 32415);
    f43 = Math_fround(HEAPF32[i291 + 1092 + (i57 << 2) >> 2]);
    if (f43 == Math_fround(0.0)) {
     if (i282 << 24 >> 24 != 0 | i284 ^ 1) break;
    } else {
     f49 = Math_fround(HEAPF32[i291 + 132 >> 2]);
     if (!(f43 > f49)) break;
     f90 = Math_fround(HEAPF32[i291 + 136 >> 2]);
     if (f43 <= f49 | f90 <= Math_fround(0.0)) break;
     if ((i282 << 24 >> 24 ? 1 : (~~Math_fround(Math_fround(f43 - f49) / f90) | 0) <= (~~Math_fround(Math_fround(Math_fround(f43 - Math_fround(HEAPF32[i291 + 20 >> 2])) - f49) / f90) | 0)) | i284 ^ 1) break;
    }
    if (i295 | (HEAP8[i283 >> 0] | 0) != 0) break;
    HEAP32[i10 >> 2] = 9;
    if (__ZL24InputTextFilterCharacterPjiPFiP25ImGuiTextEditCallbackDataEPv(i10, i5, i6, i7) | 0) __ZN18ImGuiTextEditState12OnKeyPressedEi(i12, HEAP32[i10 >> 2] | 0);
    i96 = 1;
    i97 = 0;
    i98 = 0;
    break L275;
   } while (0);
   i57 = HEAP32[i291 + 104 >> 2] | 0;
   do if ((i57 | 0) > -1) {
    if ((i57 | 0) >= 512) ___assert_fail(32321, 31803, 4844, 32415);
    f90 = Math_fround(HEAPF32[i291 + 1092 + (i57 << 2) >> 2]);
    if (f90 == Math_fround(0.0)) {
     i96 = 0;
     i97 = 0;
     i98 = 1;
     break L275;
    }
    f49 = Math_fround(HEAPF32[i291 + 132 >> 2]);
    if (!(f90 > f49)) break;
    f43 = Math_fround(HEAPF32[i291 + 136 >> 2]);
    if (f90 <= f49 | f43 <= Math_fround(0.0)) break;
    if ((~~Math_fround(Math_fround(f90 - f49) / f43) | 0) > (~~Math_fround(Math_fround(Math_fround(f90 - Math_fround(HEAPF32[i291 + 20 >> 2])) - f49) / f43) | 0)) {
     i96 = 0;
     i97 = 0;
     i98 = 1;
     break L275;
    }
   } while (0);
   if (i286 | i285) {
    __ZN18ImGuiTextEditState12OnKeyPressedEi(i12, i286 ? 65546 : 65547);
    i57 = HEAP32[i21 + 7256 >> 2] | 0;
    HEAP32[i21 + 7264 >> 2] = i57;
    HEAP32[i21 + 7260 >> 2] = i57;
    i96 = 1;
    i97 = 0;
    i98 = 0;
    break;
   }
   do if (i290) {
    i57 = HEAP32[i291 + 108 >> 2] | 0;
    if ((i57 | 0) <= -1) break;
    if ((i57 | 0) >= 512) ___assert_fail(32321, 31803, 4844, 32415);
    f43 = Math_fround(HEAPF32[i291 + 1092 + (i57 << 2) >> 2]);
    if (!(f43 == Math_fround(0.0))) {
     f49 = Math_fround(HEAPF32[i291 + 132 >> 2]);
     if (!(f43 > f49)) break;
     f90 = Math_fround(HEAPF32[i291 + 136 >> 2]);
     if (f43 <= f49 | f90 <= Math_fround(0.0)) break;
     if ((~~Math_fround(Math_fround(f43 - f49) / f90) | 0) <= (~~Math_fround(Math_fround(Math_fround(f43 - Math_fround(HEAPF32[i291 + 20 >> 2])) - f49) / f90) | 0)) break;
    }
    HEAP32[i21 + 7260 >> 2] = 0;
    i57 = HEAP32[i21 + 7244 >> 2] | 0;
    HEAP32[i21 + 7264 >> 2] = i57;
    HEAP32[i21 + 7256 >> 2] = i57;
    HEAP8[i21 + 7271 >> 0] = 0;
    HEAP8[i21 + 10880 >> 0] = 1;
    i96 = 1;
    i97 = 0;
    i98 = 0;
    break L275;
   } while (0);
   if (i288 | i287) {
    do if (HEAP32[i21 + 192 >> 2] | 0) {
     i57 = HEAP32[i21 + 7260 >> 2] | 0;
     i15 = HEAP32[i21 + 7264 >> 2] | 0;
     if ((i57 | 0) == (i15 | 0)) {
      i297 = 0;
      i298 = HEAP32[i21 + 7244 >> 2] | 0;
     } else {
      i297 = (i57 | 0) < (i15 | 0) ? i57 : i15;
      i298 = (i57 | 0) >= (i15 | 0) ? i57 : i15;
     }
     i15 = i21 + 7228 | 0;
     i57 = i298 - i297 << 2 | 1;
     i83 = i21 + 7232 | 0;
     i93 = HEAP32[i83 >> 2] | 0;
     do if ((i93 | 0) < (i57 | 0)) {
      if (!i93) i299 = 8; else i299 = ((i93 | 0) / 2 | 0) + i93 | 0;
      i87 = (i299 | 0) > (i57 | 0) ? i299 : i57;
      if ((i93 | 0) >= (i87 | 0)) break;
      HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
      i86 = __ZL13MallocWrapperjPv(i87, 0) | 0;
      i88 = i21 + 7236 | 0;
      i89 = HEAP32[i88 >> 2] | 0;
      if (i89 | 0) {
       _memcpy(i86 | 0, i89 | 0, HEAP32[i15 >> 2] | 0) | 0;
       i89 = HEAP32[i88 >> 2] | 0;
       if (i89 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
       __ZL11FreeWrapperPvS_(i89, 0);
      }
      HEAP32[i88 >> 2] = i86;
      HEAP32[i83 >> 2] = i87;
     } while (0);
     HEAP32[i15 >> 2] = i57;
     i83 = i21 + 7236 | 0;
     i93 = HEAP32[i21 + 7212 >> 2] | 0;
     __Z15ImTextStrToUtf8PciPKtS1_(HEAP32[i83 >> 2] | 0, i57, i93 + (i297 << 1) | 0, i93 + (i298 << 1) | 0) | 0;
     i93 = HEAP32[1460598] | 0;
     i87 = HEAP32[i93 + 192 >> 2] | 0;
     if (!i87) break;
     FUNCTION_TABLE_vii[i87 & 63](HEAP32[i93 + 196 >> 2] | 0, HEAP32[i83 >> 2] | 0);
    } while (0);
    if (!i287) {
     i96 = 1;
     i97 = 0;
     i98 = 0;
     break;
    }
    i83 = i21 + 7260 | 0;
    i93 = HEAP32[i83 >> 2] | 0;
    i87 = i21 + 7264 | 0;
    i86 = HEAP32[i87 >> 2] | 0;
    if ((i93 | 0) == (i86 | 0)) {
     HEAP32[i83 >> 2] = 0;
     i83 = HEAP32[i21 + 7244 >> 2] | 0;
     HEAP32[i87 >> 2] = i83;
     HEAP32[i21 + 7256 >> 2] = i83;
     HEAP8[i21 + 7271 >> 0] = 0;
     i300 = 0;
     i301 = i83;
    } else {
     i300 = i93;
     i301 = i86;
    }
    HEAP8[i21 + 10880 >> 0] = 1;
    if ((i300 | 0) == (i301 | 0)) {
     i96 = 1;
     i97 = 0;
     i98 = 0;
     break;
    }
    __ZN8ImGuiStbL29stb_textedit_delete_selectionEP18ImGuiTextEditStatePNS_17STB_TexteditStateE(i12, i21 + 7256 | 0);
    HEAP8[i21 + 7271 >> 0] = 0;
    i96 = 1;
    i97 = 0;
    i98 = 0;
    break;
   }
   if (!i289) {
    i96 = 1;
    i97 = 0;
    i98 = 0;
    break;
   }
   i86 = HEAP32[i291 + 188 >> 2] | 0;
   if (!i86) i302 = 5849359; else {
    i93 = FUNCTION_TABLE_ii[i86 & 127](HEAP32[i291 + 196 >> 2] | 0) | 0;
    if (!i93) {
     i96 = 1;
     i97 = 0;
     i98 = 0;
     break;
    } else i302 = i93;
   }
   i93 = ((_strlen(i302) | 0) << 1) + 2 | 0;
   HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
   i86 = __ZL13MallocWrapperjPv(i93, 0) | 0;
   do if (!(HEAP8[i302 >> 0] | 0)) HEAP16[i86 >> 1] = 0; else {
    i93 = 0;
    i83 = i302;
    while (1) {
     i83 = i83 + (__Z18ImTextCharFromUtf8PjPKcS1_(i10, i83, 0) | 0) | 0;
     i87 = HEAP32[i10 >> 2] | 0;
     if (!i87) {
      i8 = 462;
      break;
     }
     do if (i87 >>> 0 > 65535) i303 = i93; else {
      if (!(__ZL24InputTextFilterCharacterPjiPFiP25ImGuiTextEditCallbackDataEPv(i10, i5, i6, i7) | 0)) {
       i303 = i93;
       break;
      }
      HEAP16[i86 + (i93 << 1) >> 1] = HEAP32[i10 >> 2];
      i303 = i93 + 1 | 0;
     } while (0);
     if (!(HEAP8[i83 >> 0] | 0)) {
      i304 = i303;
      break;
     } else i93 = i303;
    }
    if ((i8 | 0) == 462) i304 = i93;
    HEAP16[i86 + (i304 << 1) >> 1] = 0;
    if ((i304 | 0) <= 0) break;
    i83 = i21 + 7256 | 0;
    i57 = HEAP32[i21 + 7244 >> 2] | 0;
    i15 = i21 + 7260 | 0;
    i87 = HEAP32[i15 >> 2] | 0;
    i88 = i21 + 7264 | 0;
    i89 = HEAP32[i88 >> 2] | 0;
    do if ((i87 | 0) != (i89 | 0)) {
     if ((i87 | 0) > (i57 | 0)) {
      HEAP32[i15 >> 2] = i57;
      i305 = i57;
     } else i305 = i87;
     if ((i89 | 0) > (i57 | 0)) {
      HEAP32[i88 >> 2] = i57;
      i306 = i57;
     } else i306 = i89;
     if ((i305 | 0) != (i306 | 0)) break;
     HEAP32[i83 >> 2] = i305;
    } while (0);
    if ((HEAP32[i83 >> 2] | 0) > (i57 | 0)) HEAP32[i83 >> 2] = i57;
    __ZN8ImGuiStbL29stb_textedit_delete_selectionEP18ImGuiTextEditStatePNS_17STB_TexteditStateE(i12, i83);
    do if (__ZN8ImGuiStbL24STB_TEXTEDIT_INSERTCHARSEP18ImGuiTextEditStateiPKti(i12, HEAP32[i83 >> 2] | 0, i86, i304) | 0) {
     __ZN8ImGuiStbL19stb_text_createundoEPNS_12StbUndoStateEiii(i21 + 7280 | 0, HEAP32[i83 >> 2] | 0, 0, i304) | 0;
     HEAP32[i83 >> 2] = (HEAP32[i83 >> 2] | 0) + i304;
     HEAP8[i21 + 7271 >> 0] = 0;
    } else {
     i89 = i21 + 10862 | 0;
     i88 = HEAP16[i89 >> 1] | 0;
     if (!(i88 << 16 >> 16)) break;
     HEAP16[i89 >> 1] = i88 + -1 << 16 >> 16;
    } while (0);
    HEAP8[i21 + 10880 >> 0] = 1;
   } while (0);
   HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
   __ZL11FreeWrapperPvS_(i86, 0);
   i96 = 1;
   i97 = 0;
   i98 = 0;
  } else {
   i96 = 1;
   i97 = 0;
   i98 = i82;
  } while (0);
  if ((HEAP32[i38 >> 2] | 0) == (i32 | 0)) {
   i82 = i29 ^ 1;
   do if (i96 | i82) i307 = 0; else {
    i304 = HEAP32[i21 + 7224 >> 2] | 0;
    if (!(_strncmp(i2, i304, i3) | 0)) {
     i307 = 0;
     break;
    }
    if (!i3) {
     i307 = 1;
     break;
    }
    _strncpy(i2, i304, i3) | 0;
    HEAP8[i2 + (i3 + -1) >> 0] = 0;
    i307 = 1;
   } while (0);
   if (i96 | i97 ^ 1) if (i96) i8 = 487; else i308 = i307; else if (!(i5 & 32)) i308 = i307; else i8 = 487;
   do if ((i8 | 0) == 487) {
    if (i29) {
     i96 = i21 + 7228 | 0;
     i304 = HEAP32[i21 + 7204 >> 2] << 2;
     i305 = i21 + 7232 | 0;
     i306 = HEAP32[i305 >> 2] | 0;
     do if ((i306 | 0) < (i304 | 0)) {
      if (!i306) i309 = 8; else i309 = ((i306 | 0) / 2 | 0) + i306 | 0;
      i303 = (i309 | 0) > (i304 | 0) ? i309 : i304;
      if ((i306 | 0) >= (i303 | 0)) break;
      HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
      i302 = __ZL13MallocWrapperjPv(i303, 0) | 0;
      i291 = i21 + 7236 | 0;
      i289 = HEAP32[i291 >> 2] | 0;
      if (i289 | 0) {
       _memcpy(i302 | 0, i289 | 0, HEAP32[i96 >> 2] | 0) | 0;
       i289 = HEAP32[i291 >> 2] | 0;
       if (i289 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
       __ZL11FreeWrapperPvS_(i289, 0);
      }
      HEAP32[i291 >> 2] = i302;
      HEAP32[i305 >> 2] = i303;
     } while (0);
     HEAP32[i96 >> 2] = i304;
     __Z15ImTextStrToUtf8PciPKtS1_(HEAP32[i21 + 7236 >> 2] | 0, i304, HEAP32[i21 + 7212 >> 2] | 0, 0) | 0;
    }
    L698 : do if (i5 & 448 | 0) {
     if (!i6) ___assert_fail(32428, 31803, 10772, 32021);
     do if (i26) {
      i305 = HEAP32[1460598] | 0;
      i306 = HEAP32[i305 + 48 >> 2] | 0;
      if ((i306 | 0) <= -1) {
       i8 = 509;
       break;
      }
      if ((i306 | 0) >= 512) ___assert_fail(32321, 31803, 4844, 32415);
      f90 = Math_fround(HEAPF32[i305 + 1092 + (i306 << 2) >> 2]);
      if (f90 == Math_fround(0.0)) {
       i310 = 64;
       i311 = 0;
       break;
      }
      f49 = Math_fround(HEAPF32[i305 + 132 >> 2]);
      if (!(f90 > f49)) {
       i8 = 509;
       break;
      }
      f43 = Math_fround(HEAPF32[i305 + 136 >> 2]);
      if (f90 <= f49 | f43 <= Math_fround(0.0)) {
       i8 = 509;
       break;
      }
      if ((~~Math_fround(Math_fround(f90 - f49) / f43) | 0) > (~~Math_fround(Math_fround(Math_fround(f90 - Math_fround(HEAPF32[i305 + 20 >> 2])) - f49) / f43) | 0)) {
       i310 = 64;
       i311 = 0;
      } else i8 = 509;
     } else i8 = 509; while (0);
     L712 : do if ((i8 | 0) == 509) {
      do if (i24) {
       i305 = HEAP32[1460598] | 0;
       i306 = HEAP32[i305 + 60 >> 2] | 0;
       do if ((i306 | 0) > -1) {
        if ((i306 | 0) >= 512) ___assert_fail(32321, 31803, 4844, 32415);
        f43 = Math_fround(HEAPF32[i305 + 1092 + (i306 << 2) >> 2]);
        if (f43 == Math_fround(0.0)) {
         i310 = 128;
         i311 = 3;
         break L712;
        }
        f49 = Math_fround(HEAPF32[i305 + 132 >> 2]);
        if (!(f43 > f49)) break;
        f90 = Math_fround(HEAPF32[i305 + 136 >> 2]);
        if (f43 <= f49 | f90 <= Math_fround(0.0)) break;
        if ((~~Math_fround(Math_fround(f43 - f49) / f90) | 0) > (~~Math_fround(Math_fround(Math_fround(f43 - Math_fround(HEAPF32[i305 + 20 >> 2])) - f49) / f90) | 0)) {
         i310 = 128;
         i311 = 3;
         break L712;
        }
       } while (0);
       i306 = HEAP32[i305 + 64 >> 2] | 0;
       if ((i306 | 0) <= -1) break;
       if ((i306 | 0) >= 512) ___assert_fail(32321, 31803, 4844, 32415);
       f90 = Math_fround(HEAPF32[i305 + 1092 + (i306 << 2) >> 2]);
       if (f90 == Math_fround(0.0)) {
        i310 = 128;
        i311 = 4;
        break L712;
       }
       f49 = Math_fround(HEAPF32[i305 + 132 >> 2]);
       if (!(f90 > f49)) break;
       f43 = Math_fround(HEAPF32[i305 + 136 >> 2]);
       if (f90 <= f49 | f43 <= Math_fround(0.0)) break;
       if ((~~Math_fround(Math_fround(f90 - f49) / f43) | 0) > (~~Math_fround(Math_fround(Math_fround(f90 - Math_fround(HEAPF32[i305 + 20 >> 2])) - f49) / f43) | 0)) {
        i310 = 128;
        i311 = 4;
        break L712;
       }
      } while (0);
      if (!(i5 & 256)) break L698; else {
       i310 = 256;
       i311 = 21;
      }
     } while (0);
     i94 = i11;
     i95 = i94 + 48 | 0;
     do {
      HEAP32[i94 >> 2] = 0;
      i94 = i94 + 4 | 0;
     } while ((i94 | 0) < (i95 | 0));
     HEAP32[i11 >> 2] = i310;
     i306 = i11 + 4 | 0;
     HEAP32[i306 >> 2] = i5;
     HEAP32[i11 + 8 >> 2] = i7;
     HEAP8[i11 + 12 >> 0] = i82 & 1;
     HEAP32[i11 + 16 >> 2] = i311;
     i86 = i21 + 7236 | 0;
     i303 = i11 + 20 | 0;
     HEAP32[i303 >> 2] = HEAP32[i86 >> 2];
     i302 = i21 + 7240 | 0;
     i291 = i11 + 24 | 0;
     HEAP32[i291 >> 2] = HEAP32[i302 >> 2];
     i289 = i21 + 7248 | 0;
     i301 = i11 + 28 | 0;
     HEAP32[i301 >> 2] = HEAP32[i289 >> 2];
     i300 = i11 + 32 | 0;
     HEAP8[i300 >> 0] = 0;
     i287 = i21 + 7212 | 0;
     i298 = HEAP32[i287 >> 2] | 0;
     i297 = i21 + 7256 | 0;
     i299 = HEAP32[i297 >> 2] | 0;
     i288 = i298 + (i299 << 1) | 0;
     i290 = (i288 | 0) == 0;
     L734 : do if ((i299 | 0) > 0 | i290) {
      i286 = 0;
      i285 = i298;
      while (1) {
       i283 = HEAP16[i285 >> 1] | 0;
       if (!(i283 << 16 >> 16)) {
        i312 = i286;
        break L734;
       }
       i285 = i285 + 2 | 0;
       if ((i283 & 65535) < 128) i313 = 1; else {
        i295 = i283 & -1024;
        i284 = i295 << 16 >> 16 | 0;
        i313 = (i283 & 65535) < 2048 ? 2 : (i284 | 0) == -9216 ? 0 : (i284 | 0) == -10240 ? 4 : 3;
       }
       i284 = i313 + i286 | 0;
       if (!(i290 | i285 >>> 0 < i288 >>> 0)) {
        i312 = i284;
        break;
       } else i286 = i284;
      }
     } else i312 = 0; while (0);
     i288 = i11 + 36 | 0;
     HEAP32[i288 >> 2] = i312;
     i290 = i21 + 7260 | 0;
     i299 = HEAP32[i290 >> 2] | 0;
     i286 = i298 + (i299 << 1) | 0;
     i285 = (i286 | 0) == 0;
     L742 : do if ((i299 | 0) > 0 | i285) {
      i284 = 0;
      i283 = i298;
      while (1) {
       i295 = HEAP16[i283 >> 1] | 0;
       if (!(i295 << 16 >> 16)) {
        i314 = i284;
        break L742;
       }
       i283 = i283 + 2 | 0;
       if ((i295 & 65535) < 128) i315 = 1; else {
        i282 = i295 & -1024;
        i27 = i282 << 16 >> 16 | 0;
        i315 = (i295 & 65535) < 2048 ? 2 : (i27 | 0) == -9216 ? 0 : (i27 | 0) == -10240 ? 4 : 3;
       }
       i27 = i315 + i284 | 0;
       if (!(i285 | i283 >>> 0 < i286 >>> 0)) {
        i314 = i27;
        break;
       } else i284 = i27;
      }
     } else i314 = 0; while (0);
     i286 = i11 + 40 | 0;
     HEAP32[i286 >> 2] = i314;
     i285 = i21 + 7264 | 0;
     i299 = HEAP32[i285 >> 2] | 0;
     i284 = i298 + (i299 << 1) | 0;
     i283 = (i284 | 0) == 0;
     L750 : do if ((i299 | 0) > 0 | i283) {
      i27 = 0;
      i295 = i298;
      while (1) {
       i282 = HEAP16[i295 >> 1] | 0;
       if (!(i282 << 16 >> 16)) {
        i316 = i27;
        break L750;
       }
       i295 = i295 + 2 | 0;
       if ((i282 & 65535) < 128) i317 = 1; else {
        i280 = i282 & -1024;
        i296 = i280 << 16 >> 16 | 0;
        i317 = (i282 & 65535) < 2048 ? 2 : (i296 | 0) == -9216 ? 0 : (i296 | 0) == -10240 ? 4 : 3;
       }
       i296 = i317 + i27 | 0;
       if (!(i283 | i295 >>> 0 < i284 >>> 0)) {
        i316 = i296;
        break;
       } else i27 = i296;
      }
     } else i316 = 0; while (0);
     i284 = i11 + 44 | 0;
     HEAP32[i284 >> 2] = i316;
     FUNCTION_TABLE_ii[i6 & 127](i11) | 0;
     i283 = HEAP32[i303 >> 2] | 0;
     if ((i283 | 0) != (HEAP32[i86 >> 2] | 0)) ___assert_fail(32443, 31803, 10820, 32021);
     if ((HEAP32[i301 >> 2] | 0) != (HEAP32[i289 >> 2] | 0)) ___assert_fail(32495, 31803, 10821, 32021);
     if ((HEAP32[i306 >> 2] | 0) != (i5 | 0)) ___assert_fail(32540, 31803, 10822, 32021);
     i298 = HEAP32[i288 >> 2] | 0;
     if ((i298 | 0) != (i312 | 0)) {
      i299 = i283 + i298 | 0;
      i298 = (i299 | 0) == 0;
      i27 = 0;
      i295 = i283;
      while (1) {
       if (!(i298 | i295 >>> 0 < i299 >>> 0)) break;
       if (!(HEAP8[i295 >> 0] | 0)) break;
       i295 = i295 + (__Z18ImTextCharFromUtf8PjPKcS1_(i10, i295, i299) | 0) | 0;
       i283 = HEAP32[i10 >> 2] | 0;
       if (!i283) break; else i27 = i27 + (i283 >>> 0 < 65536 & 1) | 0;
      }
      HEAP32[i297 >> 2] = i27;
     }
     i299 = HEAP32[i286 >> 2] | 0;
     if ((i299 | 0) != (i314 | 0)) {
      i295 = HEAP32[i303 >> 2] | 0;
      i298 = i295 + i299 | 0;
      i299 = (i298 | 0) == 0;
      i288 = 0;
      i306 = i295;
      while (1) {
       if (!(i299 | i306 >>> 0 < i298 >>> 0)) break;
       if (!(HEAP8[i306 >> 0] | 0)) break;
       i306 = i306 + (__Z18ImTextCharFromUtf8PjPKcS1_(i10, i306, i298) | 0) | 0;
       i295 = HEAP32[i10 >> 2] | 0;
       if (!i295) break; else i288 = i288 + (i295 >>> 0 < 65536 & 1) | 0;
      }
      HEAP32[i290 >> 2] = i288;
     }
     i298 = HEAP32[i284 >> 2] | 0;
     if ((i298 | 0) != (i316 | 0)) {
      i306 = HEAP32[i303 >> 2] | 0;
      i299 = i306 + i298 | 0;
      i298 = (i299 | 0) == 0;
      i286 = 0;
      i27 = i306;
      while (1) {
       if (!(i298 | i27 >>> 0 < i299 >>> 0)) break;
       if (!(HEAP8[i27 >> 0] | 0)) break;
       i27 = i27 + (__Z18ImTextCharFromUtf8PjPKcS1_(i10, i27, i299) | 0) | 0;
       i306 = HEAP32[i10 >> 2] | 0;
       if (!i306) break; else i286 = i286 + (i306 >>> 0 < 65536 & 1) | 0;
      }
      HEAP32[i285 >> 2] = i286;
     }
     if (HEAP8[i300 >> 0] | 0) {
      i299 = HEAP32[i291 >> 2] | 0;
      i27 = HEAP32[i303 >> 2] | 0;
      if ((i299 | 0) != (_strlen(i27) | 0)) ___assert_fail(32569, 31803, 10828, 32021);
      i299 = HEAP32[i287 >> 2] | 0;
      i298 = i299 + (HEAP32[i21 + 7204 >> 2] << 1) + -2 | 0;
      L796 : do if (i298 >>> 0 > i299 >>> 0) {
       i284 = i27;
       i288 = i299;
       while (1) {
        if (!(HEAP8[i284 >> 0] | 0)) {
         i318 = i288;
         break L796;
        }
        i284 = i284 + (__Z18ImTextCharFromUtf8PjPKcS1_(i10, i284, 0) | 0) | 0;
        i290 = HEAP32[i10 >> 2] | 0;
        if (!i290) break;
        if (i290 >>> 0 < 65536) {
         HEAP16[i288 >> 1] = i290;
         i319 = i288 + 2 | 0;
        } else i319 = i288;
        if (i319 >>> 0 >= i298 >>> 0) {
         i318 = i319;
         break L796;
        } else i288 = i319;
       }
       i318 = i288;
      } else i318 = i299; while (0);
      HEAP16[i318 >> 1] = 0;
      HEAP32[i21 + 7244 >> 2] = i318 - i299 >> 1;
      HEAP32[i302 >> 2] = HEAP32[i291 >> 2];
      HEAPF32[i21 + 10876 >> 2] = Math_fround(-.300000012);
     }
    } while (0);
    if (!i29) {
     i308 = i307;
     break;
    }
    i304 = HEAP32[i21 + 7236 >> 2] | 0;
    if (!(_strcmp(i304, i2) | 0)) {
     i308 = i307;
     break;
    }
    if (!i3) {
     i308 = 1;
     break;
    }
    _strncpy(i2, i304, i3) | 0;
    HEAP8[i2 + (i3 + -1) >> 0] = 0;
    i308 = 1;
   } while (0);
   i320 = (i308 & 1) != 0;
  } else i320 = 0;
  do if (i98) {
   if ((HEAP32[i38 >> 2] | 0) != (i32 | 0)) break;
   i308 = HEAP32[1460598] | 0;
   i3 = i308 + 6420 | 0;
   i307 = (HEAP32[i3 >> 2] | 0) != 0;
   HEAP8[i308 + 6433 >> 0] = i307 & 1;
   if (i307) {
    HEAPF32[i308 + 6428 >> 2] = Math_fround(0.0);
    HEAP8[i308 + 6435 >> 0] = 0;
   }
   HEAP32[i3 >> 2] = 0;
   HEAP32[i308 + 6440 >> 2] = 0;
   HEAP8[i308 + 6434 >> 0] = 0;
   HEAP32[i308 + 6452 >> 2] = 0;
  } while (0);
  if ((HEAP32[i38 >> 2] | 0) != (i32 | 0) | i29 ^ 1) i321 = i2; else i321 = HEAP32[i21 + 7236 >> 2] | 0;
  if (!i28) {
   __ZN5ImGui18RenderNavHighlightERK6ImRectji(i14, i32, 1);
   i2 = i14;
   i98 = HEAP32[i2 + 4 >> 2] | 0;
   i308 = i16;
   HEAP32[i308 >> 2] = HEAP32[i2 >> 2];
   HEAP32[i308 + 4 >> 2] = i98;
   i98 = i37;
   i308 = HEAP32[i98 + 4 >> 2] | 0;
   i2 = i17;
   HEAP32[i2 >> 2] = HEAP32[i98 >> 2];
   HEAP32[i2 + 4 >> 2] = i308;
   i308 = HEAP32[1460598] | 0;
   f43 = Math_fround(HEAPF32[i308 + 5620 >> 2]);
   f49 = Math_fround(HEAPF32[i308 + 5624 >> 2]);
   f90 = Math_fround(HEAPF32[i308 + 5628 >> 2]);
   f91 = Math_fround(HEAPF32[i308 + 5632 >> 2]);
   f92 = Math_fround(f91 * Math_fround(HEAPF32[i308 + 5356 >> 2]));
   i308 = f43 < Math_fround(0.0);
   i2 = f43 > Math_fround(1.0);
   i98 = ~~Math_fround(Math_fround((i2 ? Math_fround(1.0) : f43) * Math_fround(255.0)) + Math_fround(.5));
   i2 = f49 < Math_fround(0.0);
   i3 = f49 > Math_fround(1.0);
   i307 = ~~Math_fround(Math_fround((i3 ? Math_fround(1.0) : f49) * Math_fround(255.0)) + Math_fround(.5)) << 8;
   i3 = f90 < Math_fround(0.0);
   i318 = f90 > Math_fround(1.0);
   i319 = ~~Math_fround(Math_fround((i318 ? Math_fround(1.0) : f90) * Math_fround(255.0)) + Math_fround(.5)) << 16;
   i318 = f92 < Math_fround(0.0);
   i316 = f92 > Math_fround(1.0);
   i314 = ~~Math_fround(Math_fround((i316 ? Math_fround(1.0) : f92) * Math_fround(255.0)) + Math_fround(.5)) << 24;
   f92 = Math_fround(HEAPF32[i21 + 5416 >> 2]);
   HEAP32[i11 >> 2] = HEAP32[i16 >> 2];
   HEAP32[i11 + 4 >> 2] = HEAP32[i16 + 4 >> 2];
   HEAP32[i10 >> 2] = HEAP32[i17 >> 2];
   HEAP32[i10 + 4 >> 2] = HEAP32[i17 + 4 >> 2];
   __ZN5ImGui11RenderFrameE6ImVec2S0_jbf(i11, i10, (i2 ? 0 : i307) | (i308 ? 0 : i98) | (i3 ? 0 : i319) | (i318 ? 0 : i314), 1, f92);
  }
  f92 = Math_fround(HEAPF32[i14 >> 2]);
  i314 = i14 + 4 | 0;
  f90 = Math_fround(HEAPF32[i314 >> 2]);
  f49 = Math_fround(f92 + f52);
  f43 = Math_fround(f90 + f47);
  HEAPF32[i11 >> 2] = f92;
  i14 = i11 + 4 | 0;
  HEAPF32[i14 >> 2] = f90;
  i318 = i11 + 8 | 0;
  HEAPF32[i318 >> 2] = f49;
  i319 = i11 + 12 | 0;
  HEAPF32[i319 >> 2] = f43;
  do if (i28) {
   i3 = i51 + 196 | 0;
   i98 = HEAP32[i3 + 4 >> 2] | 0;
   i308 = i18;
   HEAP32[i308 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i308 + 4 >> 2] = i98;
   if ((HEAP32[i12 >> 2] | 0) != (i32 | 0)) {
    i322 = 0;
    break;
   }
   i98 = HEAP32[i51 + 452 >> 2] | 0;
   if ((i98 | 0) > 0) {
    i308 = HEAP32[i38 >> 2] | 0;
    i322 = (i308 | 0) == (__Z6ImHashPKvij(32293, 0, HEAP32[(HEAP32[i51 + 460 >> 2] | 0) + (i98 + -1 << 2) >> 2] | 0) | 0);
    break;
   } else ___assert_fail(38278, 56850, 1245, 38287);
  } else {
   f43 = Math_fround(f92 + Math_fround(HEAPF32[i35 >> 2]));
   f49 = Math_fround(f90 + Math_fround(HEAPF32[i4 >> 2]));
   HEAPF32[i18 >> 2] = f43;
   HEAPF32[i18 + 4 >> 2] = f49;
   i322 = 0;
  } while (0);
  if (i322 | (HEAP32[i38 >> 2] | 0) == (i32 | 0)) {
   f90 = Math_fround(HEAPF32[i21 + 20 >> 2]);
   i38 = i21 + 10876 | 0;
   f92 = Math_fround(f90 + Math_fround(HEAPF32[i38 >> 2]));
   HEAPF32[i38 >> 2] = f92;
   i322 = HEAP32[i21 + 7212 >> 2] | 0;
   i35 = i322 + (HEAP32[i21 + 7256 >> 2] << 1) | 0;
   i12 = HEAP32[i21 + 7260 >> 2] | 0;
   i98 = HEAP32[i21 + 7264 >> 2] | 0;
   i308 = (i12 | 0) == (i98 | 0);
   i3 = (i12 | 0) < (i98 | 0) ? i12 : i98;
   i307 = i322 + (i3 << 1) | 0;
   i2 = i308 ? 0 : i307;
   i17 = i322;
   i16 = 0;
   i316 = (i308 ? 1 : 2) + (i25 >>> 20) | 0;
   i25 = -1;
   i312 = i308 ? -999 : -1;
   L837 : while (1) {
    L839 : do switch (HEAP16[i17 >> 1] | 0) {
    case 0:
     {
      i323 = i16;
      i324 = i25;
      i325 = i312;
      break L837;
      break;
     }
    case 10:
     {
      i6 = i16 + 1 | 0;
      if ((i25 | 0) != -1 | i17 >>> 0 < i35 >>> 0) {
       i326 = i316;
       i327 = i25;
      } else if ((i316 | 0) < 2) {
       i323 = i6;
       i324 = i6;
       i325 = i312;
       break L837;
      } else {
       i326 = i316 + -1 | 0;
       i327 = i6;
      }
      if ((i312 | 0) != -1 | i17 >>> 0 < i2 >>> 0) {
       i328 = i6;
       i329 = i326;
       i330 = i327;
       i331 = i312;
       break L839;
      }
      if ((i326 | 0) < 2) {
       i323 = i6;
       i324 = i327;
       i325 = i6;
       break L837;
      } else {
       i328 = i6;
       i329 = i326 + -1 | 0;
       i330 = i327;
       i331 = i6;
      }
      break;
     }
    default:
     {
      i328 = i16;
      i329 = i316;
      i330 = i25;
      i331 = i312;
     }
    } while (0);
    i17 = i17 + 2 | 0;
    i16 = i328;
    i316 = i329;
    i25 = i330;
    i312 = i331;
   }
   i331 = i323 + 1 | 0;
   i323 = (i324 | 0) == -1 ? i331 : i324;
   i324 = (i325 | 0) == -1 ? i331 : i325;
   i325 = i35;
   while (1) {
    if (i325 >>> 0 <= i322 >>> 0) break;
    i312 = i325 + -2 | 0;
    if ((HEAP16[i312 >> 1] | 0) == 10) break; else i325 = i312;
   }
   i312 = HEAP32[1460598] | 0;
   i330 = HEAP32[i312 + 6180 >> 2] | 0;
   f92 = Math_fround(HEAPF32[i312 + 6184 >> 2]);
   f90 = Math_fround(f92 / Math_fround(HEAPF32[i330 >> 2]));
   i25 = i330 + 28 | 0;
   i329 = i330 + 36 | 0;
   i316 = i330 + 56 | 0;
   i330 = i325;
   f92 = Math_fround(0.0);
   i325 = 0;
   L851 : while (1) {
    f332 = Math_fround(0.0);
    i328 = i330;
    L853 : while (1) {
     i16 = i328;
     L855 : while (1) {
      if (i16 >>> 0 >= i35 >>> 0) break L851;
      i333 = i16 + 2 | 0;
      i334 = HEAP16[i16 >> 1] | 0;
      switch (i334 << 16 >> 16) {
      case 10:
       {
        break L853;
        break;
       }
      case 13:
       {
        i16 = i333;
        break;
       }
      default:
       break L855;
      }
     }
     i16 = i334 & 65535;
     if ((HEAP32[i25 >> 2] | 0) > (i16 | 0)) i335 = (HEAP32[i329 >> 2] | 0) + (i16 << 2) | 0; else i335 = i316;
     f332 = Math_fround(f332 + Math_fround(f90 * Math_fround(HEAPF32[i335 >> 2])));
     i328 = i333;
    }
    f49 = f92 >= f332 ? f92 : f332;
    i330 = i333;
    f92 = f49;
    i325 = (HEAPF32[tempDoublePtr >> 2] = f49, HEAP32[tempDoublePtr >> 2] | 0);
   }
   i333 = f92 < f332 ? (HEAPF32[tempDoublePtr >> 2] = f332, HEAP32[tempDoublePtr >> 2] | 0) : i325;
   f332 = Math_fround(i323 | 0);
   i323 = i21 + 6184 | 0;
   f92 = Math_fround(HEAPF32[i323 >> 2]);
   f49 = Math_fround(f92 * f332);
   if ((i324 | 0) > -1) {
    i325 = i2;
    while (1) {
     if (i325 >>> 0 <= i322 >>> 0) {
      i336 = i325;
      f337 = Math_fround(0.0);
      break;
     }
     i330 = i325 + -2 | 0;
     if ((HEAP16[i330 >> 1] | 0) == 10) {
      i336 = i325;
      f337 = Math_fround(0.0);
      break;
     } else i325 = i330;
    }
    L868 : while (1) {
     f338 = Math_fround(0.0);
     i325 = i336;
     L870 : while (1) {
      i330 = i325;
      L872 : while (1) {
       if (i330 >>> 0 >= i2 >>> 0) break L868;
       i339 = i330 + 2 | 0;
       i340 = HEAP16[i330 >> 1] | 0;
       switch (i340 << 16 >> 16) {
       case 10:
        {
         break L870;
         break;
        }
       case 13:
        {
         i330 = i339;
         break;
        }
       default:
        break L872;
       }
      }
      i330 = i340 & 65535;
      if ((HEAP32[i25 >> 2] | 0) > (i330 | 0)) i341 = (HEAP32[i329 >> 2] | 0) + (i330 << 2) | 0; else i341 = i316;
      f338 = Math_fround(f338 + Math_fround(f90 * Math_fround(HEAPF32[i341 >> 2])));
      i325 = i339;
     }
     i336 = i339;
     f337 = f337 >= f338 ? f337 : f338;
    }
    f90 = Math_fround(f92 * Math_fround(i324 | 0));
    f342 = f337 < f338 ? f338 : f337;
    f343 = f90;
   } else {
    f342 = Math_fround(0.0);
    f343 = Math_fround(0.0);
   }
   f90 = Math_fround(f92 * Math_fround(i331 | 0));
   f337 = i28 ? f52 : Math_fround(0.0);
   f338 = i28 ? f90 : Math_fround(0.0);
   i331 = i21 + 10880 | 0;
   do if (!(HEAP8[i331 >> 0] | 0)) f344 = Math_fround(HEAPF32[i21 + 7252 >> 2]); else {
    do if (!(i5 & 4096)) {
     f90 = Math_fround(f52 * Math_fround(.25));
     f332 = (HEAP32[tempDoublePtr >> 2] = i333, Math_fround(HEAPF32[tempDoublePtr >> 2]));
     i324 = i21 + 7252 | 0;
     f43 = Math_fround(HEAPF32[i324 >> 2]);
     if (f43 > f332) {
      f91 = Math_fround(f332 - f90);
      i339 = f91 <= Math_fround(0.0);
      f345 = i339 ? Math_fround(0.0) : f91;
     } else {
      f91 = Math_fround(f332 - f52);
      if (!(f91 >= f43)) {
       f346 = f43;
       break;
      }
      f345 = Math_fround(f91 + f90);
     }
     f90 = Math_fround(~~f345 | 0);
     HEAPF32[i324 >> 2] = f90;
     f346 = f90;
    } else {
     HEAPF32[i21 + 7252 >> 2] = Math_fround(0.0);
     f346 = Math_fround(0.0);
    } while (0);
    if (!i28) {
     f344 = f346;
     break;
    }
    i324 = i51 + 88 | 0;
    f90 = Math_fround(HEAPF32[i324 >> 2]);
    f91 = Math_fround(f49 - f92);
    do if (f91 < f90) {
     i339 = f91 <= Math_fround(0.0);
     f347 = i339 ? Math_fround(0.0) : f91;
    } else {
     f43 = Math_fround(f49 - f47);
     if (!(f43 >= f90)) {
      f347 = f90;
      break;
     }
     f347 = f43;
    } while (0);
    f91 = Math_fround(f90 - f347);
    i339 = i51 + 200 | 0;
    f43 = Math_fround(Math_fround(HEAPF32[i339 >> 2]) + f91);
    HEAPF32[i339 >> 2] = f43;
    HEAPF32[i324 >> 2] = f347;
    HEAPF32[i18 + 4 >> 2] = f43;
    f344 = f346;
   } while (0);
   HEAP8[i331 >> 0] = 0;
   do if (i308) {
    i348 = i312;
    f349 = f92;
   } else {
    i331 = (i12 | 0) >= (i98 | 0) ? i12 : i98;
    i339 = i322 + (i331 << 1) | 0;
    f346 = i28 ? Math_fround(0.0) : Math_fround(-1.0);
    f347 = i28 ? Math_fround(0.0) : Math_fround(2.0);
    f47 = Math_fround(HEAPF32[i312 + 6100 >> 2]);
    f345 = Math_fround(HEAPF32[i312 + 6104 >> 2]);
    f43 = Math_fround(HEAPF32[i312 + 6108 >> 2]);
    f91 = Math_fround(HEAPF32[i312 + 6112 >> 2]);
    f332 = Math_fround(f91 * Math_fround(HEAPF32[i312 + 5356 >> 2]));
    i336 = f47 < Math_fround(0.0);
    i341 = f47 > Math_fround(1.0);
    i316 = ~~Math_fround(Math_fround((i341 ? Math_fround(1.0) : f47) * Math_fround(255.0)) + Math_fround(.5));
    i341 = f345 < Math_fround(0.0);
    i329 = f345 > Math_fround(1.0);
    i25 = ~~Math_fround(Math_fround((i329 ? Math_fround(1.0) : f345) * Math_fround(255.0)) + Math_fround(.5)) << 8;
    i329 = f43 < Math_fround(0.0);
    i340 = f43 > Math_fround(1.0);
    i2 = ~~Math_fround(Math_fround((i340 ? Math_fround(1.0) : f43) * Math_fround(255.0)) + Math_fround(.5)) << 16;
    i340 = f332 < Math_fround(0.0);
    i325 = f332 > Math_fround(1.0);
    i330 = ~~Math_fround(Math_fround((i325 ? Math_fround(1.0) : f332) * Math_fround(255.0)) + Math_fround(.5)) << 24;
    i325 = (i341 ? 0 : i25) | (i336 ? 0 : i316) | (i329 ? 0 : i2) | (i340 ? 0 : i330);
    if ((i3 | 0) >= (i331 | 0)) {
     i348 = i312;
     f349 = f92;
     break;
    }
    f332 = Math_fround(HEAPF32[i18 >> 2]);
    f43 = Math_fround(f332 + f342);
    i331 = i10 + 4 | 0;
    i330 = i10 + 8 | 0;
    i340 = i10 + 12 | 0;
    i2 = i19 + 4 | 0;
    i329 = i19 + 8 | 0;
    i316 = i19 + 12 | 0;
    i336 = i51 + 632 | 0;
    i25 = i21 + 6180 | 0;
    i341 = i307;
    f345 = f43;
    f43 = f92;
    f47 = Math_fround(f343 + Math_fround(HEAPF32[i18 + 4 >> 2]));
    f91 = f332;
    while (1) {
     f332 = Math_fround(f345 - f344);
     f48 = Math_fround(HEAPF32[i319 >> 2]);
     if (f47 > Math_fround(f48 + f43)) {
      f350 = f43;
      break;
     }
     f33 = Math_fround(HEAPF32[i14 >> 2]);
     L907 : do if (f47 < f33) {
      i335 = i341;
      while (1) {
       if (i335 >>> 0 >= i339 >>> 0) {
        i351 = i335;
        f352 = f43;
        f353 = f91;
        break L907;
       }
       i334 = i335 + 2 | 0;
       if ((HEAP16[i335 >> 1] | 0) == 10) {
        i351 = i334;
        f352 = f43;
        f353 = f91;
        break;
       } else i335 = i334;
      }
     } else {
      i335 = HEAP32[1460598] | 0;
      i288 = HEAP32[i335 + 6180 >> 2] | 0;
      f40 = Math_fround(HEAPF32[i335 + 6184 >> 2]);
      f42 = Math_fround(f40 / Math_fround(HEAPF32[i288 >> 2]));
      i335 = i288 + 28 | 0;
      i334 = i288 + 36 | 0;
      i35 = i288 + 56 | 0;
      f40 = Math_fround(0.0);
      i288 = i341;
      L912 : while (1) {
       i328 = i288;
       L914 : while (1) {
        if (i328 >>> 0 >= i339 >>> 0) {
         i354 = i328;
         f355 = f40;
         f356 = Math_fround(0.0);
         break L912;
        }
        i357 = i328 + 2 | 0;
        i358 = HEAP16[i328 >> 1] | 0;
        switch (i358 << 16 >> 16) {
        case 10:
         {
          i8 = 658;
          break L912;
          break;
         }
        case 13:
         {
          i328 = i357;
          break;
         }
        default:
         break L914;
        }
       }
       i328 = i358 & 65535;
       if ((HEAP32[i335 >> 2] | 0) > (i328 | 0)) i359 = (HEAP32[i334 >> 2] | 0) + (i328 << 2) | 0; else i359 = i35;
       f40 = Math_fround(f40 + Math_fround(f42 * Math_fround(HEAPF32[i359 >> 2])));
       i288 = i357;
      }
      if ((i8 | 0) == 658) {
       i8 = 0;
       i288 = f40 <= Math_fround(0.0);
       i354 = i357;
       f355 = Math_fround(0.0);
       f356 = i288 ? Math_fround(0.0) : f40;
      }
      f42 = f356 < f355 ? f355 : f356;
      if (!(f42 <= Math_fround(0.0))) f360 = f42; else {
       i288 = HEAP32[i25 >> 2] | 0;
       if ((HEAP32[i288 + 28 >> 2] | 0) > 32) i361 = (HEAP32[i288 + 36 >> 2] | 0) + 128 | 0; else i361 = i288 + 56 | 0;
       f360 = Math_fround(~~Math_fround(Math_fround(HEAPF32[i361 >> 2]) * Math_fround(.5)) | 0);
      }
      f42 = Math_fround(f332 + Math_fround(0.0));
      f34 = Math_fround(f47 + Math_fround(f346 - f43));
      f44 = Math_fround(f332 + f360);
      f46 = Math_fround(f347 + f47);
      HEAPF32[i10 >> 2] = f42;
      HEAPF32[i331 >> 2] = f34;
      HEAPF32[i330 >> 2] = f44;
      HEAPF32[i340 >> 2] = f46;
      i288 = HEAP32[i11 >> 2] | 0;
      HEAP32[i19 >> 2] = i288;
      HEAPF32[i2 >> 2] = f33;
      i35 = HEAP32[i318 >> 2] | 0;
      HEAP32[i329 >> 2] = i35;
      HEAPF32[i316 >> 2] = f48;
      f45 = (HEAP32[tempDoublePtr >> 2] = i288, Math_fround(HEAPF32[tempDoublePtr >> 2]));
      i288 = HEAP32[(f42 >= f45 ? i10 : i19) >> 2] | 0;
      i334 = HEAP32[(f34 >= f33 ? i10 : i19) + 4 >> 2] | 0;
      i335 = i10;
      HEAP32[i335 >> 2] = i288;
      HEAP32[i335 + 4 >> 2] = i334;
      f34 = (HEAP32[tempDoublePtr >> 2] = i35, Math_fround(HEAPF32[tempDoublePtr >> 2]));
      i35 = HEAP32[(f44 < f34 ? i330 : i329) >> 2] | 0;
      i335 = HEAP32[(f46 < f48 ? i330 : i329) + 4 >> 2] | 0;
      i328 = i330;
      HEAP32[i328 >> 2] = i35;
      HEAP32[i328 + 4 >> 2] = i335;
      i328 = f33 < (HEAP32[tempDoublePtr >> 2] = i335, Math_fround(HEAPF32[tempDoublePtr >> 2]));
      do if (i328 & f48 > (HEAP32[tempDoublePtr >> 2] = i334, Math_fround(HEAPF32[tempDoublePtr >> 2]))) {
       f46 = (HEAP32[tempDoublePtr >> 2] = i288, Math_fround(HEAPF32[tempDoublePtr >> 2]));
       if (!(f45 < (HEAP32[tempDoublePtr >> 2] = i35, Math_fround(HEAPF32[tempDoublePtr >> 2])) & f34 > f46)) {
        f362 = f91;
        f363 = f43;
        break;
       }
       __ZN10ImDrawList13AddRectFilledERK6ImVec2S2_jfi(HEAP32[i336 >> 2] | 0, i10, i330, i325, Math_fround(0.0), 15);
       f46 = Math_fround(HEAPF32[i18 >> 2]);
       f362 = f46;
       f363 = Math_fround(HEAPF32[i323 >> 2]);
      } else {
       f362 = f91;
       f363 = f43;
      } while (0);
      i351 = i354;
      f352 = f363;
      f353 = f362;
     } while (0);
     f47 = Math_fround(f352 + f47);
     if (i351 >>> 0 >= i339 >>> 0) {
      f350 = f352;
      break;
     } else {
      i341 = i351;
      f345 = f353;
      f43 = f352;
      f91 = f353;
     }
    }
    i348 = HEAP32[1460598] | 0;
    f349 = f350;
   } while (0);
   i351 = i51 + 632 | 0;
   i354 = HEAP32[i351 >> 2] | 0;
   i361 = HEAP32[i21 + 6180 >> 2] | 0;
   f350 = Math_fround(Math_fround(HEAPF32[i18 >> 2]) - f344);
   i357 = i18 + 4 | 0;
   i8 = HEAP32[i357 >> 2] | 0;
   HEAPF32[i10 >> 2] = f350;
   HEAP32[i10 + 4 >> 2] = i8;
   f350 = Math_fround(HEAPF32[i348 + 5508 >> 2]);
   f353 = Math_fround(HEAPF32[i348 + 5512 >> 2]);
   f352 = Math_fround(HEAPF32[i348 + 5516 >> 2]);
   f362 = Math_fround(HEAPF32[i348 + 5520 >> 2]);
   f363 = Math_fround(f362 * Math_fround(HEAPF32[i348 + 5356 >> 2]));
   i348 = f350 < Math_fround(0.0);
   i8 = f350 > Math_fround(1.0);
   i359 = ~~Math_fround(Math_fround((i8 ? Math_fround(1.0) : f350) * Math_fround(255.0)) + Math_fround(.5));
   i8 = f353 < Math_fround(0.0);
   i358 = f353 > Math_fround(1.0);
   i307 = ~~Math_fround(Math_fround((i358 ? Math_fround(1.0) : f353) * Math_fround(255.0)) + Math_fround(.5)) << 8;
   i358 = f352 < Math_fround(0.0);
   i312 = f352 > Math_fround(1.0);
   i3 = ~~Math_fround(Math_fround((i312 ? Math_fround(1.0) : f352) * Math_fround(255.0)) + Math_fround(.5)) << 16;
   i312 = f363 < Math_fround(0.0);
   i322 = f363 > Math_fround(1.0);
   i98 = ~~Math_fround(Math_fround((i322 ? Math_fround(1.0) : f363) * Math_fround(255.0)) + Math_fround(.5)) << 24;
   __ZN10ImDrawList7AddTextEPK6ImFontfRK6ImVec2jPKcS7_fPK6ImVec4(i354, i361, f349, i10, (i8 ? 0 : i307) | (i348 ? 0 : i359) | (i358 ? 0 : i3) | (i312 ? 0 : i98), i321, i321 + (HEAP32[i21 + 7240 >> 2] | 0) | 0, Math_fround(0.0), i28 ? 0 : i11);
   do if (!(HEAP8[i21 + 185 >> 0] | 0)) i364 = 1; else {
    f349 = Math_fround(HEAPF32[i38 >> 2]);
    if (f349 <= Math_fround(0.0)) {
     i364 = 1;
     break;
    }
    i364 = Math_fround(_fmodf(f349, Math_fround(1.20000005))) <= Math_fround(.800000011);
   } while (0);
   f349 = Math_fround(HEAPF32[i18 >> 2]);
   f363 = Math_fround(f349 + (HEAP32[tempDoublePtr >> 2] = i333, Math_fround(HEAPF32[tempDoublePtr >> 2])));
   f349 = Math_fround(f49 + Math_fround(HEAPF32[i357 >> 2]));
   f49 = Math_fround(f363 - f344);
   f344 = Math_fround(Math_fround(f349 - Math_fround(HEAPF32[i323 >> 2])) + Math_fround(.5));
   f363 = Math_fround(f49 + Math_fround(1.0));
   f352 = Math_fround(f349 + Math_fround(-1.5));
   HEAPF32[i10 >> 2] = f49;
   HEAPF32[i10 + 4 >> 2] = f344;
   HEAPF32[i10 + 8 >> 2] = f363;
   HEAPF32[i10 + 12 >> 2] = f352;
   do if (i364) {
    i357 = Math_fround(HEAPF32[i14 >> 2]) < f352;
    if (!(i357 & Math_fround(HEAPF32[i319 >> 2]) > f344)) break;
    f353 = Math_fround(HEAPF32[i318 >> 2]);
    if (!(f353 > f49 ? Math_fround(HEAPF32[i11 >> 2]) < f363 : 0)) break;
    i357 = HEAP32[i351 >> 2] | 0;
    HEAPF32[i19 >> 2] = f49;
    HEAPF32[i19 + 4 >> 2] = f352;
    i333 = HEAP32[1460598] | 0;
    f353 = Math_fround(HEAPF32[i333 + 5508 >> 2]);
    f350 = Math_fround(HEAPF32[i333 + 5512 >> 2]);
    f362 = Math_fround(HEAPF32[i333 + 5516 >> 2]);
    f360 = Math_fround(HEAPF32[i333 + 5520 >> 2]);
    f356 = Math_fround(f360 * Math_fround(HEAPF32[i333 + 5356 >> 2]));
    i333 = f353 < Math_fround(0.0);
    i38 = f353 > Math_fround(1.0);
    i98 = ~~Math_fround(Math_fround((i38 ? Math_fround(1.0) : f353) * Math_fround(255.0)) + Math_fround(.5));
    i38 = f350 < Math_fround(0.0);
    i312 = f350 > Math_fround(1.0);
    i3 = ~~Math_fround(Math_fround((i312 ? Math_fround(1.0) : f350) * Math_fround(255.0)) + Math_fround(.5)) << 8;
    i312 = f362 < Math_fround(0.0);
    i358 = f362 > Math_fround(1.0);
    i359 = ~~Math_fround(Math_fround((i358 ? Math_fround(1.0) : f362) * Math_fround(255.0)) + Math_fround(.5)) << 16;
    i358 = f356 < Math_fround(0.0);
    i348 = f356 > Math_fround(1.0);
    i307 = ~~Math_fround(Math_fround((i348 ? Math_fround(1.0) : f356) * Math_fround(255.0)) + Math_fround(.5)) << 24;
    __ZN10ImDrawList7AddLineERK6ImVec2S2_jf(i357, i10, i19, (i38 ? 0 : i3) | (i333 ? 0 : i98) | (i312 ? 0 : i359) | (i358 ? 0 : i307), Math_fround(1.0));
   } while (0);
   if (i29) {
    f352 = Math_fround(f49 + Math_fround(-1.0));
    f49 = Math_fround(f349 - Math_fround(HEAPF32[i323 >> 2]));
    HEAPF32[i21 + 11032 >> 2] = f352;
    HEAPF32[i21 + 11036 >> 2] = f49;
   }
   f365 = f337;
   f366 = f338;
  } else {
   if (i28) {
    i323 = 0;
    i29 = i321;
    L952 : while (1) {
     i367 = i29;
     L954 : while (1) {
      i368 = i367 + 1 | 0;
      switch (HEAP8[i367 >> 0] | 0) {
      case 0:
       {
        break L952;
        break;
       }
      case 10:
       {
        break L954;
        break;
       }
      default:
       i367 = i368;
      }
     }
     i323 = i323 + 1 | 0;
     i29 = i368;
    }
    f338 = Math_fround(i323 + 1 | 0);
    f337 = Math_fround(HEAPF32[i21 + 6184 >> 2]);
    i369 = i367;
    f370 = f337;
    f371 = f52;
    f372 = Math_fround(f337 * f338);
   } else {
    i369 = 0;
    f370 = Math_fround(HEAPF32[i21 + 6184 >> 2]);
    f371 = Math_fround(0.0);
    f372 = Math_fround(0.0);
   }
   i367 = HEAP32[1460598] | 0;
   f338 = Math_fround(HEAPF32[i367 + 5508 >> 2]);
   f337 = Math_fround(HEAPF32[i367 + 5512 >> 2]);
   f52 = Math_fround(HEAPF32[i367 + 5516 >> 2]);
   f49 = Math_fround(HEAPF32[i367 + 5520 >> 2]);
   f352 = Math_fround(f49 * Math_fround(HEAPF32[i367 + 5356 >> 2]));
   i367 = f338 < Math_fround(0.0);
   i323 = f338 > Math_fround(1.0);
   i368 = ~~Math_fround(Math_fround((i323 ? Math_fround(1.0) : f338) * Math_fround(255.0)) + Math_fround(.5));
   i323 = f337 < Math_fround(0.0);
   i29 = f337 > Math_fround(1.0);
   i19 = ~~Math_fround(Math_fround((i29 ? Math_fround(1.0) : f337) * Math_fround(255.0)) + Math_fround(.5)) << 8;
   i29 = f52 < Math_fround(0.0);
   i351 = f52 > Math_fround(1.0);
   i318 = ~~Math_fround(Math_fround((i351 ? Math_fround(1.0) : f52) * Math_fround(255.0)) + Math_fround(.5)) << 16;
   i351 = f352 < Math_fround(0.0);
   i319 = f352 > Math_fround(1.0);
   i14 = ~~Math_fround(Math_fround((i319 ? Math_fround(1.0) : f352) * Math_fround(255.0)) + Math_fround(.5)) << 24;
   __ZN10ImDrawList7AddTextEPK6ImFontfRK6ImVec2jPKcS7_fPK6ImVec4(HEAP32[i51 + 632 >> 2] | 0, HEAP32[i21 + 6180 >> 2] | 0, f370, i18, (i323 ? 0 : i19) | (i367 ? 0 : i368) | (i29 ? 0 : i318) | (i351 ? 0 : i14), i321, i369, Math_fround(0.0), i28 ? 0 : i11);
   f365 = f371;
   f366 = f372;
  }
  if (i28) {
   f372 = Math_fround(f365 + Math_fround(0.0));
   f365 = Math_fround(f366 + Math_fround(HEAPF32[i21 + 6184 >> 2]));
   HEAPF32[i10 >> 2] = f372;
   HEAPF32[i10 + 4 >> 2] = f365;
   __ZN5ImGui5DummyERK6ImVec2(i10);
   __ZN5ImGui8EndChildEv();
   __ZN5ImGui8EndGroupEv();
  }
  do if (i30) __ZN5ImGui7PopFontEv(); else {
   if (!(HEAP8[i21 + 11092 >> 0] | 0)) break;
   __ZL15LogRenderedTextPK6ImVec2PKcS3_(i18, i321, 0);
  } while (0);
  if (i36) {
   f365 = Math_fround(HEAPF32[i37 >> 2]);
   f372 = Math_fround(f365 + Math_fround(HEAPF32[i21 + 5432 >> 2]));
   f365 = Math_fround(HEAPF32[i314 >> 2]);
   f366 = Math_fround(f365 + Math_fround(HEAPF32[i4 >> 2]));
   HEAPF32[i20 >> 2] = f372;
   HEAPF32[i20 + 4 >> 2] = f366;
   HEAP32[i10 >> 2] = HEAP32[i20 >> 2];
   HEAP32[i10 + 4 >> 2] = HEAP32[i20 + 4 >> 2];
   __ZN5ImGui10RenderTextE6ImVec2PKcS2_b(i10, i1, 0, 1);
  }
  do if (i320) {
   i1 = HEAP32[1460598] | 0;
   i10 = HEAP32[i1 + 6420 >> 2] | 0;
   if ((i10 | 0) == (i32 | 0) | (i10 | 0) == 0) {
    HEAP8[i1 + 6435 >> 0] = 1;
    break;
   } else ___assert_fail(32628, 31803, 2259, 32664);
  } while (0);
  i53 = (i5 & 32 | 0) == 0 ? i320 : i97;
 }
 i23 = i53;
 STACKTOP = i9;
 return i23 | 0;
}

function __ZN15CityMapRenderer8drawTileER8CityTileRN3glm3matILi4ELi4EfLNS2_9qualifierE0EEE(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, f50 = f0, f51 = f0, f52 = f0, f53 = f0, f54 = f0, f55 = f0, f56 = f0, f57 = f0, f58 = f0, f59 = f0, f60 = f0, f61 = f0, f62 = f0, f63 = f0, f64 = f0, f65 = f0, f66 = f0, f67 = f0, f68 = f0, f69 = f0, f70 = f0, f71 = f0, f72 = f0, f73 = f0, f74 = f0, f75 = f0, f76 = f0, f77 = f0, f78 = f0, f79 = f0, f80 = f0, f81 = f0, f82 = f0, f83 = f0, f84 = f0, f85 = f0, f86 = f0, f87 = f0, f88 = f0, i89 = 0, i90 = 0, i91 = 0, f92 = f0, f93 = f0, f94 = f0, f95 = f0, i96 = 0, i97 = 0, i98 = 0, i99 = 0, i100 = 0, i101 = 0, i102 = 0, i103 = 0, i104 = 0, i105 = 0, i106 = 0, i107 = 0, i108 = 0, i109 = 0, i110 = 0, i111 = 0, i112 = 0, i113 = 0, i114 = 0, i115 = 0, i116 = 0, i117 = 0, i118 = 0, i119 = 0, i120 = 0, i121 = 0, i122 = 0, i123 = 0, i124 = 0, i125 = 0, i126 = 0, i127 = 0, i128 = 0, i129 = 0, i130 = 0, i131 = 0, i132 = 0, i133 = 0, i134 = 0, i135 = 0, i136 = 0, i137 = 0, i138 = 0, i139 = 0, i140 = 0, i141 = 0, i142 = 0, i143 = 0, i144 = 0, i145 = 0, i146 = 0, i147 = 0, i148 = 0, i149 = 0, i150 = 0, i151 = 0, i152 = 0, i153 = 0, i154 = 0, i155 = 0, i156 = 0, i157 = 0, i158 = 0, i159 = 0, i160 = 0, i161 = 0, i162 = 0, i163 = 0, i164 = 0, i165 = 0, i166 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 1968 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1968);
 i6 = i5 + 1896 | 0;
 i7 = i5 + 1832 | 0;
 i8 = i5 + 1768 | 0;
 i9 = i5 + 1704 | 0;
 i10 = i5 + 1640 | 0;
 i11 = i5;
 i12 = i5 + 1576 | 0;
 i13 = i5 + 1512 | 0;
 i14 = i5 + 1448 | 0;
 i15 = i5 + 1384 | 0;
 i16 = i5 + 1320 | 0;
 i17 = i5 + 1256 | 0;
 i18 = i5 + 480 | 0;
 i19 = i5 + 1240 | 0;
 i20 = i5 + 1176 | 0;
 i21 = i5 + 1160 | 0;
 i22 = i5 + 1096 | 0;
 i23 = i5 + 1080 | 0;
 i24 = i5 + 1016 | 0;
 i25 = i5 + 1e3 | 0;
 i26 = i5 + 936 | 0;
 i27 = i5 + 920 | 0;
 i28 = i5 + 856 | 0;
 i29 = i5 + 792 | 0;
 i30 = i5 + 728 | 0;
 i31 = i5 + 664 | 0;
 i32 = i5 + 648 | 0;
 i33 = i5 + 584 | 0;
 i34 = i5 + 568 | 0;
 i35 = i5 + 504 | 0;
 i36 = i5 + 492 | 0;
 i37 = i5 + 416 | 0;
 i38 = i5 + 400 | 0;
 i39 = i5 + 336 | 0;
 i40 = i5 + 320 | 0;
 i41 = i5 + 256 | 0;
 i42 = i5 + 240 | 0;
 i43 = i5 + 176 | 0;
 i44 = i5 + 160 | 0;
 i45 = i5 + 96 | 0;
 i46 = i5 + 80 | 0;
 i47 = i5 + 16 | 0;
 i48 = i2 + 12 | 0;
 if ((HEAP32[i48 >> 2] | 0) == 1) {
  __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i1 + 252 >> 2] | 0) + 40 >> 2] | 0);
  i49 = i2 + 28 | 0;
  if ((HEAP32[i49 >> 2] | 0) == 1) if ((HEAP32[i2 + 32 >> 2] | 0) == 1) if ((HEAP32[i2 + 36 >> 2] | 0) == 1) if ((HEAP32[i2 + 40 >> 2] | 0) == 1) __ZN11RenderQueue7setMeshEi(i1, 38); else i4 = 7; else i4 = 7; else i4 = 7; else i4 = 7;
  if ((i4 | 0) == 7) __ZN11RenderQueue7setMeshEi(i1, 1);
  f50 = Math_fround(HEAPF32[i3 >> 2]);
  f51 = Math_fround(HEAPF32[i3 + 4 >> 2]);
  f52 = Math_fround(HEAPF32[i3 + 8 >> 2]);
  f53 = Math_fround(f50 * Math_fround(.25));
  f50 = Math_fround(f51 * Math_fround(.25));
  f51 = Math_fround(f52 * Math_fround(.25));
  f52 = Math_fround(Math_fround(HEAPF32[i3 + 12 >> 2]) * Math_fround(.25));
  f54 = Math_fround(HEAPF32[i3 + 16 >> 2]);
  f55 = Math_fround(HEAPF32[i3 + 20 >> 2]);
  f56 = Math_fround(HEAPF32[i3 + 24 >> 2]);
  f57 = Math_fround(f54 * Math_fround(.25));
  f54 = Math_fround(f55 * Math_fround(.25));
  f55 = Math_fround(f56 * Math_fround(.25));
  f56 = Math_fround(Math_fround(HEAPF32[i3 + 28 >> 2]) * Math_fround(.25));
  f58 = Math_fround(HEAPF32[i3 + 32 >> 2]);
  f59 = Math_fround(HEAPF32[i3 + 36 >> 2]);
  f60 = Math_fround(HEAPF32[i3 + 40 >> 2]);
  f61 = Math_fround(f58 * Math_fround(.25));
  f58 = Math_fround(f59 * Math_fround(.25));
  f59 = Math_fround(f60 * Math_fround(.25));
  f60 = Math_fround(Math_fround(HEAPF32[i3 + 44 >> 2]) * Math_fround(.25));
  f62 = Math_fround(HEAPF32[i3 + 48 >> 2]);
  f63 = Math_fround(HEAPF32[i3 + 52 >> 2]);
  f64 = Math_fround(HEAPF32[i3 + 56 >> 2]);
  f65 = Math_fround(HEAPF32[i3 + 60 >> 2]);
  f66 = Math_fround(f61 * Math_fround(0.0));
  f67 = Math_fround(f58 * Math_fround(0.0));
  f68 = Math_fround(f59 * Math_fround(0.0));
  f69 = Math_fround(f60 * Math_fround(0.0));
  i4 = HEAP32[i49 >> 2] | 0;
  if (i4 | 0) {
   f70 = Math_fround(Math_fround(Math_fround(f52 + f56) + f69) + f65);
   f71 = Math_fround(Math_fround(Math_fround(f51 + f55) + f68) + f64);
   f72 = Math_fround(Math_fround(Math_fround(f50 + f54) + f67) + f63);
   f73 = Math_fround(Math_fround(Math_fround(f53 + f57) + f66) + f62);
   f74 = Math_fround(Math_fround(i4 | 0) * Math_fround(.00150000001));
   f75 = Math_fround(_cosf(f74));
   f76 = Math_fround(_sinf(f74));
   f74 = Math_fround(Math_fround(1.0) - f75);
   f77 = Math_fround(f74 * Math_fround(0.0));
   f78 = Math_fround(f77 * Math_fround(0.0));
   f79 = Math_fround(f75 + f78);
   f80 = Math_fround(f76 + f78);
   f81 = Math_fround(f76 * Math_fround(0.0));
   f82 = Math_fround(f77 - f81);
   f83 = Math_fround(f78 - f76);
   f76 = Math_fround(f81 + f77);
   f77 = Math_fround(f75 + f74);
   f74 = Math_fround(Math_fround(Math_fround(f61 * f82) + Math_fround(Math_fround(f53 * f79) + Math_fround(f57 * f80))) * Math_fround(.449999988));
   f75 = Math_fround(Math_fround(Math_fround(f58 * f82) + Math_fround(Math_fround(f50 * f79) + Math_fround(f54 * f80))) * Math_fround(.449999988));
   f81 = Math_fround(Math_fround(Math_fround(f59 * f82) + Math_fround(Math_fround(f51 * f79) + Math_fround(f55 * f80))) * Math_fround(.449999988));
   f78 = Math_fround(Math_fround(Math_fround(f60 * f82) + Math_fround(Math_fround(f52 * f79) + Math_fround(f56 * f80))) * Math_fround(.449999988));
   f80 = Math_fround(Math_fround(Math_fround(f61 * f76) + Math_fround(Math_fround(f53 * f83) + Math_fround(f57 * f79))) * Math_fround(.449999988));
   f84 = Math_fround(Math_fround(Math_fround(f58 * f76) + Math_fround(Math_fround(f50 * f83) + Math_fround(f54 * f79))) * Math_fround(.449999988));
   f85 = Math_fround(Math_fround(Math_fround(f59 * f76) + Math_fround(Math_fround(f51 * f83) + Math_fround(f55 * f79))) * Math_fround(.449999988));
   f86 = Math_fround(Math_fround(Math_fround(f60 * f76) + Math_fround(Math_fround(f52 * f83) + Math_fround(f56 * f79))) * Math_fround(.449999988));
   f79 = Math_fround(Math_fround(Math_fround(f61 * f77) + Math_fround(Math_fround(f53 * f76) + Math_fround(f57 * f82))) * Math_fround(.449999988));
   f83 = Math_fround(Math_fround(Math_fround(f58 * f77) + Math_fround(Math_fround(f50 * f76) + Math_fround(f54 * f82))) * Math_fround(.449999988));
   f87 = Math_fround(Math_fround(Math_fround(f59 * f77) + Math_fround(Math_fround(f51 * f76) + Math_fround(f55 * f82))) * Math_fround(.449999988));
   f88 = Math_fround(Math_fround(Math_fround(f60 * f77) + Math_fround(Math_fround(f52 * f76) + Math_fround(f56 * f82))) * Math_fround(.449999988));
   HEAPF32[i7 >> 2] = f74;
   HEAPF32[i7 + 4 >> 2] = f75;
   HEAPF32[i7 + 8 >> 2] = f81;
   HEAPF32[i7 + 12 >> 2] = f78;
   HEAPF32[i7 + 16 >> 2] = f80;
   HEAPF32[i7 + 20 >> 2] = f84;
   HEAPF32[i7 + 24 >> 2] = f85;
   HEAPF32[i7 + 28 >> 2] = f86;
   HEAPF32[i7 + 32 >> 2] = f79;
   HEAPF32[i7 + 36 >> 2] = f83;
   HEAPF32[i7 + 40 >> 2] = f87;
   HEAPF32[i7 + 44 >> 2] = f88;
   HEAPF32[i7 + 48 >> 2] = f73;
   HEAPF32[i7 + 52 >> 2] = f72;
   HEAPF32[i7 + 56 >> 2] = f71;
   HEAPF32[i7 + 60 >> 2] = f70;
   i89 = i6;
   i90 = i7;
   i91 = i89 + 64 | 0;
   do {
    HEAP32[i89 >> 2] = HEAP32[i90 >> 2];
    i89 = i89 + 4 | 0;
    i90 = i90 + 4 | 0;
   } while ((i89 | 0) < (i91 | 0));
   __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i6);
  }
  f70 = Math_fround(-f57);
  f71 = Math_fround(-f54);
  f72 = Math_fround(-f55);
  f73 = Math_fround(-f56);
  i7 = HEAP32[i2 + 32 >> 2] | 0;
  if (i7 | 0) {
   f88 = Math_fround(Math_fround(Math_fround(f52 - f56) + f69) + f65);
   f87 = Math_fround(Math_fround(Math_fround(f51 - f55) + f68) + f64);
   f83 = Math_fround(Math_fround(Math_fround(f50 - f54) + f67) + f63);
   f79 = Math_fround(Math_fround(Math_fround(f53 - f57) + f66) + f62);
   f86 = Math_fround(Math_fround(i7 | 0) * Math_fround(.00150000001));
   f85 = Math_fround(_cosf(f86));
   f84 = Math_fround(_sinf(f86));
   f86 = Math_fround(Math_fround(1.0) - f85);
   f80 = Math_fround(f86 * Math_fround(0.0));
   f78 = Math_fround(f80 * Math_fround(0.0));
   f81 = Math_fround(f85 + f78);
   f75 = Math_fround(f84 + f78);
   f74 = Math_fround(f84 * Math_fround(0.0));
   f82 = Math_fround(f80 - f74);
   f76 = Math_fround(f78 - f84);
   f84 = Math_fround(f74 + f80);
   f80 = Math_fround(f85 + f86);
   f86 = Math_fround(Math_fround(Math_fround(f61 * f82) + Math_fround(Math_fround(f53 * f81) + Math_fround(f57 * f75))) * Math_fround(.449999988));
   f85 = Math_fround(Math_fround(Math_fround(f58 * f82) + Math_fround(Math_fround(f50 * f81) + Math_fround(f54 * f75))) * Math_fround(.449999988));
   f74 = Math_fround(Math_fround(Math_fround(f59 * f82) + Math_fround(Math_fround(f51 * f81) + Math_fround(f55 * f75))) * Math_fround(.449999988));
   f78 = Math_fround(Math_fround(Math_fround(f60 * f82) + Math_fround(Math_fround(f52 * f81) + Math_fround(f56 * f75))) * Math_fround(.449999988));
   f75 = Math_fround(Math_fround(Math_fround(f61 * f84) + Math_fround(Math_fround(f53 * f76) + Math_fround(f57 * f81))) * Math_fround(.449999988));
   f77 = Math_fround(Math_fround(Math_fround(f58 * f84) + Math_fround(Math_fround(f50 * f76) + Math_fround(f54 * f81))) * Math_fround(.449999988));
   f92 = Math_fround(Math_fround(Math_fround(f59 * f84) + Math_fround(Math_fround(f51 * f76) + Math_fround(f55 * f81))) * Math_fround(.449999988));
   f93 = Math_fround(Math_fround(Math_fround(f60 * f84) + Math_fround(Math_fround(f52 * f76) + Math_fround(f56 * f81))) * Math_fround(.449999988));
   f81 = Math_fround(Math_fround(Math_fround(f61 * f80) + Math_fround(Math_fround(f53 * f84) + Math_fround(f57 * f82))) * Math_fround(.449999988));
   f76 = Math_fround(Math_fround(Math_fround(f58 * f80) + Math_fround(Math_fround(f50 * f84) + Math_fround(f54 * f82))) * Math_fround(.449999988));
   f94 = Math_fround(Math_fround(Math_fround(f59 * f80) + Math_fround(Math_fround(f51 * f84) + Math_fround(f55 * f82))) * Math_fround(.449999988));
   f95 = Math_fround(Math_fround(Math_fround(f60 * f80) + Math_fround(Math_fround(f52 * f84) + Math_fround(f56 * f82))) * Math_fround(.449999988));
   HEAPF32[i8 >> 2] = f86;
   HEAPF32[i8 + 4 >> 2] = f85;
   HEAPF32[i8 + 8 >> 2] = f74;
   HEAPF32[i8 + 12 >> 2] = f78;
   HEAPF32[i8 + 16 >> 2] = f75;
   HEAPF32[i8 + 20 >> 2] = f77;
   HEAPF32[i8 + 24 >> 2] = f92;
   HEAPF32[i8 + 28 >> 2] = f93;
   HEAPF32[i8 + 32 >> 2] = f81;
   HEAPF32[i8 + 36 >> 2] = f76;
   HEAPF32[i8 + 40 >> 2] = f94;
   HEAPF32[i8 + 44 >> 2] = f95;
   HEAPF32[i8 + 48 >> 2] = f79;
   HEAPF32[i8 + 52 >> 2] = f83;
   HEAPF32[i8 + 56 >> 2] = f87;
   HEAPF32[i8 + 60 >> 2] = f88;
   i89 = i6;
   i90 = i8;
   i91 = i89 + 64 | 0;
   do {
    HEAP32[i89 >> 2] = HEAP32[i90 >> 2];
    i89 = i89 + 4 | 0;
    i90 = i90 + 4 | 0;
   } while ((i89 | 0) < (i91 | 0));
   __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i6);
  }
  i8 = HEAP32[i2 + 36 >> 2] | 0;
  if (i8 | 0) {
   f88 = Math_fround(Math_fround(Math_fround(f56 - f52) + f69) + f65);
   f87 = Math_fround(Math_fround(Math_fround(f55 - f51) + f68) + f64);
   f83 = Math_fround(Math_fround(Math_fround(f54 - f50) + f67) + f63);
   f79 = Math_fround(Math_fround(Math_fround(f57 - f53) + f66) + f62);
   f95 = Math_fround(Math_fround(i8 | 0) * Math_fround(.00150000001));
   f94 = Math_fround(_cosf(f95));
   f76 = Math_fround(_sinf(f95));
   f95 = Math_fround(Math_fround(1.0) - f94);
   f81 = Math_fround(f95 * Math_fround(0.0));
   f93 = Math_fround(f81 * Math_fround(0.0));
   f92 = Math_fround(f94 + f93);
   f77 = Math_fround(f76 + f93);
   f75 = Math_fround(f76 * Math_fround(0.0));
   f78 = Math_fround(f81 - f75);
   f74 = Math_fround(f93 - f76);
   f76 = Math_fround(f75 + f81);
   f81 = Math_fround(f94 + f95);
   f95 = Math_fround(Math_fround(Math_fround(f61 * f78) + Math_fround(Math_fround(f53 * f92) + Math_fround(f57 * f77))) * Math_fround(.449999988));
   f94 = Math_fround(Math_fround(Math_fround(f58 * f78) + Math_fround(Math_fround(f50 * f92) + Math_fround(f54 * f77))) * Math_fround(.449999988));
   f75 = Math_fround(Math_fround(Math_fround(f59 * f78) + Math_fround(Math_fround(f51 * f92) + Math_fround(f55 * f77))) * Math_fround(.449999988));
   f93 = Math_fround(Math_fround(Math_fround(f60 * f78) + Math_fround(Math_fround(f52 * f92) + Math_fround(f56 * f77))) * Math_fround(.449999988));
   f77 = Math_fround(Math_fround(Math_fround(f61 * f76) + Math_fround(Math_fround(f53 * f74) + Math_fround(f57 * f92))) * Math_fround(.449999988));
   f85 = Math_fround(Math_fround(Math_fround(f58 * f76) + Math_fround(Math_fround(f50 * f74) + Math_fround(f54 * f92))) * Math_fround(.449999988));
   f86 = Math_fround(Math_fround(Math_fround(f59 * f76) + Math_fround(Math_fround(f51 * f74) + Math_fround(f55 * f92))) * Math_fround(.449999988));
   f82 = Math_fround(Math_fround(Math_fround(f60 * f76) + Math_fround(Math_fround(f52 * f74) + Math_fround(f56 * f92))) * Math_fround(.449999988));
   f92 = Math_fround(Math_fround(Math_fround(f61 * f81) + Math_fround(Math_fround(f53 * f76) + Math_fround(f57 * f78))) * Math_fround(.449999988));
   f74 = Math_fround(Math_fround(Math_fround(f58 * f81) + Math_fround(Math_fround(f50 * f76) + Math_fround(f54 * f78))) * Math_fround(.449999988));
   f84 = Math_fround(Math_fround(Math_fround(f59 * f81) + Math_fround(Math_fround(f51 * f76) + Math_fround(f55 * f78))) * Math_fround(.449999988));
   f80 = Math_fround(Math_fround(Math_fround(f60 * f81) + Math_fround(Math_fround(f52 * f76) + Math_fround(f56 * f78))) * Math_fround(.449999988));
   HEAPF32[i9 >> 2] = f95;
   HEAPF32[i9 + 4 >> 2] = f94;
   HEAPF32[i9 + 8 >> 2] = f75;
   HEAPF32[i9 + 12 >> 2] = f93;
   HEAPF32[i9 + 16 >> 2] = f77;
   HEAPF32[i9 + 20 >> 2] = f85;
   HEAPF32[i9 + 24 >> 2] = f86;
   HEAPF32[i9 + 28 >> 2] = f82;
   HEAPF32[i9 + 32 >> 2] = f92;
   HEAPF32[i9 + 36 >> 2] = f74;
   HEAPF32[i9 + 40 >> 2] = f84;
   HEAPF32[i9 + 44 >> 2] = f80;
   HEAPF32[i9 + 48 >> 2] = f79;
   HEAPF32[i9 + 52 >> 2] = f83;
   HEAPF32[i9 + 56 >> 2] = f87;
   HEAPF32[i9 + 60 >> 2] = f88;
   i89 = i6;
   i90 = i9;
   i91 = i89 + 64 | 0;
   do {
    HEAP32[i89 >> 2] = HEAP32[i90 >> 2];
    i89 = i89 + 4 | 0;
    i90 = i90 + 4 | 0;
   } while ((i89 | 0) < (i91 | 0));
   __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i6);
  }
  i9 = HEAP32[i2 + 40 >> 2] | 0;
  if (i9 | 0) {
   f88 = Math_fround(Math_fround(Math_fround(f73 - f52) + f69) + f65);
   f65 = Math_fround(Math_fround(Math_fround(f72 - f51) + f68) + f64);
   f64 = Math_fround(Math_fround(Math_fround(f71 - f50) + f67) + f63);
   f63 = Math_fround(Math_fround(Math_fround(f70 - f53) + f66) + f62);
   f62 = Math_fround(Math_fround(i9 | 0) * Math_fround(.00150000001));
   f66 = Math_fround(_cosf(f62));
   f70 = Math_fround(_sinf(f62));
   f62 = Math_fround(Math_fround(1.0) - f66);
   f67 = Math_fround(f62 * Math_fround(0.0));
   f71 = Math_fround(f67 * Math_fround(0.0));
   f68 = Math_fround(f66 + f71);
   f72 = Math_fround(f70 + f71);
   f69 = Math_fround(f70 * Math_fround(0.0));
   f73 = Math_fround(f67 - f69);
   f87 = Math_fround(f71 - f70);
   f70 = Math_fround(f69 + f67);
   f67 = Math_fround(f66 + f62);
   f62 = Math_fround(Math_fround(Math_fround(f61 * f73) + Math_fround(Math_fround(f53 * f68) + Math_fround(f57 * f72))) * Math_fround(.449999988));
   f66 = Math_fround(Math_fround(Math_fround(f58 * f73) + Math_fround(Math_fround(f50 * f68) + Math_fround(f54 * f72))) * Math_fround(.449999988));
   f69 = Math_fround(Math_fround(Math_fround(f59 * f73) + Math_fround(Math_fround(f51 * f68) + Math_fround(f55 * f72))) * Math_fround(.449999988));
   f71 = Math_fround(Math_fround(Math_fround(f60 * f73) + Math_fround(Math_fround(f52 * f68) + Math_fround(f56 * f72))) * Math_fround(.449999988));
   f72 = Math_fround(Math_fround(Math_fround(f61 * f70) + Math_fround(Math_fround(f53 * f87) + Math_fround(f57 * f68))) * Math_fround(.449999988));
   f83 = Math_fround(Math_fround(Math_fround(f58 * f70) + Math_fround(Math_fround(f50 * f87) + Math_fround(f54 * f68))) * Math_fround(.449999988));
   f79 = Math_fround(Math_fround(Math_fround(f59 * f70) + Math_fround(Math_fround(f51 * f87) + Math_fround(f55 * f68))) * Math_fround(.449999988));
   f80 = Math_fround(Math_fround(Math_fround(f60 * f70) + Math_fround(Math_fround(f52 * f87) + Math_fround(f56 * f68))) * Math_fround(.449999988));
   f68 = Math_fround(Math_fround(Math_fround(f61 * f67) + Math_fround(Math_fround(f53 * f70) + Math_fround(f57 * f73))) * Math_fround(.449999988));
   f57 = Math_fround(Math_fround(Math_fround(f58 * f67) + Math_fround(Math_fround(f50 * f70) + Math_fround(f54 * f73))) * Math_fround(.449999988));
   f54 = Math_fround(Math_fround(Math_fround(f59 * f67) + Math_fround(Math_fround(f51 * f70) + Math_fround(f55 * f73))) * Math_fround(.449999988));
   f55 = Math_fround(Math_fround(Math_fround(f60 * f67) + Math_fround(Math_fround(f52 * f70) + Math_fround(f56 * f73))) * Math_fround(.449999988));
   HEAPF32[i10 >> 2] = f62;
   HEAPF32[i10 + 4 >> 2] = f66;
   HEAPF32[i10 + 8 >> 2] = f69;
   HEAPF32[i10 + 12 >> 2] = f71;
   HEAPF32[i10 + 16 >> 2] = f72;
   HEAPF32[i10 + 20 >> 2] = f83;
   HEAPF32[i10 + 24 >> 2] = f79;
   HEAPF32[i10 + 28 >> 2] = f80;
   HEAPF32[i10 + 32 >> 2] = f68;
   HEAPF32[i10 + 36 >> 2] = f57;
   HEAPF32[i10 + 40 >> 2] = f54;
   HEAPF32[i10 + 44 >> 2] = f55;
   HEAPF32[i10 + 48 >> 2] = f63;
   HEAPF32[i10 + 52 >> 2] = f64;
   HEAPF32[i10 + 56 >> 2] = f65;
   HEAPF32[i10 + 60 >> 2] = f88;
   i89 = i6;
   i90 = i10;
   i91 = i89 + 64 | 0;
   do {
    HEAP32[i89 >> 2] = HEAP32[i90 >> 2];
    i89 = i89 + 4 | 0;
    i90 = i90 + 4 | 0;
   } while ((i89 | 0) < (i91 | 0));
   __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i6);
  }
 }
 if (HEAP32[i2 + 16 >> 2] | 0) {
  f88 = Math_fround(HEAPF32[i3 >> 2]);
  f65 = Math_fround(HEAPF32[i3 + 4 >> 2]);
  f64 = Math_fround(HEAPF32[i3 + 8 >> 2]);
  f63 = Math_fround(f88 * Math_fround(.330000013));
  f88 = Math_fround(f65 * Math_fround(.330000013));
  f65 = Math_fround(f64 * Math_fround(.330000013));
  f64 = Math_fround(Math_fround(HEAPF32[i3 + 12 >> 2]) * Math_fround(.330000013));
  f55 = Math_fround(HEAPF32[i3 + 16 >> 2]);
  f54 = Math_fround(HEAPF32[i3 + 20 >> 2]);
  f57 = Math_fround(HEAPF32[i3 + 24 >> 2]);
  f68 = Math_fround(f55 * Math_fround(.330000013));
  f55 = Math_fround(f54 * Math_fround(.330000013));
  f54 = Math_fround(f57 * Math_fround(.330000013));
  f57 = Math_fround(Math_fround(HEAPF32[i3 + 28 >> 2]) * Math_fround(.330000013));
  f80 = Math_fround(HEAPF32[i3 + 32 >> 2]);
  f79 = Math_fround(HEAPF32[i3 + 36 >> 2]);
  f83 = Math_fround(HEAPF32[i3 + 40 >> 2]);
  f72 = Math_fround(f80 * Math_fround(.330000013));
  f80 = Math_fround(f79 * Math_fround(.330000013));
  f79 = Math_fround(f83 * Math_fround(.330000013));
  f83 = Math_fround(Math_fround(HEAPF32[i3 + 44 >> 2]) * Math_fround(.330000013));
  i10 = i3 + 48 | 0;
  HEAP32[i11 >> 2] = HEAP32[i10 >> 2];
  HEAP32[i11 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
  HEAP32[i11 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
  HEAP32[i11 + 12 >> 2] = HEAP32[i10 + 12 >> 2];
  f71 = Math_fround(Math_fround(HEAP32[i2 + 24 >> 2] | 0) * Math_fround(1.57079637));
  f69 = Math_fround(_cosf(f71));
  f66 = Math_fround(_sinf(f71));
  f71 = Math_fround(Math_fround(1.0) - f69);
  f62 = Math_fround(f71 * Math_fround(0.0));
  f73 = Math_fround(f62 * Math_fround(0.0));
  f56 = Math_fround(f69 + f73);
  f70 = Math_fround(f66 + f73);
  f52 = Math_fround(f66 * Math_fround(0.0));
  f67 = Math_fround(f62 - f52);
  f60 = Math_fround(f73 - f66);
  f66 = Math_fround(f52 + f62);
  f62 = Math_fround(f69 + f71);
  f71 = Math_fround(Math_fround(f72 * f67) + Math_fround(Math_fround(f63 * f56) + Math_fround(f68 * f70)));
  f69 = Math_fround(Math_fround(f80 * f67) + Math_fround(Math_fround(f88 * f56) + Math_fround(f55 * f70)));
  f52 = Math_fround(Math_fround(f79 * f67) + Math_fround(Math_fround(f65 * f56) + Math_fround(f54 * f70)));
  f73 = Math_fround(Math_fround(f83 * f67) + Math_fround(Math_fround(f64 * f56) + Math_fround(f57 * f70)));
  f70 = Math_fround(Math_fround(f72 * f66) + Math_fround(Math_fround(f63 * f60) + Math_fround(f68 * f56)));
  f51 = Math_fround(Math_fround(f80 * f66) + Math_fround(Math_fround(f88 * f60) + Math_fround(f55 * f56)));
  f59 = Math_fround(Math_fround(f79 * f66) + Math_fround(Math_fround(f65 * f60) + Math_fround(f54 * f56)));
  f50 = Math_fround(Math_fround(f83 * f66) + Math_fround(Math_fround(f64 * f60) + Math_fround(f57 * f56)));
  f56 = Math_fround(Math_fround(f72 * f62) + Math_fround(Math_fround(f63 * f66) + Math_fround(f68 * f67)));
  f68 = Math_fround(Math_fround(f80 * f62) + Math_fround(Math_fround(f88 * f66) + Math_fround(f55 * f67)));
  f55 = Math_fround(Math_fround(f79 * f62) + Math_fround(Math_fround(f65 * f66) + Math_fround(f54 * f67)));
  f54 = Math_fround(Math_fround(f83 * f62) + Math_fround(Math_fround(f64 * f66) + Math_fround(f57 * f67)));
  __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i1 + 252 >> 2] | 0) + 44 >> 2] | 0);
  __ZN11RenderQueue7setMeshEi(i1, (HEAP32[i2 + 20 >> 2] | 0) + 3 | 0);
  HEAPF32[i12 >> 2] = f71;
  HEAPF32[i12 + 4 >> 2] = f69;
  HEAPF32[i12 + 8 >> 2] = f52;
  HEAPF32[i12 + 12 >> 2] = f73;
  HEAPF32[i12 + 16 >> 2] = f70;
  HEAPF32[i12 + 20 >> 2] = f51;
  HEAPF32[i12 + 24 >> 2] = f59;
  HEAPF32[i12 + 28 >> 2] = f50;
  HEAPF32[i12 + 32 >> 2] = f56;
  HEAPF32[i12 + 36 >> 2] = f68;
  HEAPF32[i12 + 40 >> 2] = f55;
  HEAPF32[i12 + 44 >> 2] = f54;
  i10 = i12 + 48 | 0;
  HEAP32[i10 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i10 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i10 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  HEAP32[i10 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
  i89 = i6;
  i90 = i12;
  i91 = i89 + 64 | 0;
  do {
   HEAP32[i89 >> 2] = HEAP32[i90 >> 2];
   i89 = i89 + 4 | 0;
   i90 = i90 + 4 | 0;
  } while ((i89 | 0) < (i91 | 0));
  __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i6);
 }
 i12 = HEAP32[i48 >> 2] | 0;
 if ((i12 | 0) == 2) {
  __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i1 + 252 >> 2] | 0) + 40 >> 2] | 0);
  __ZN11RenderQueue7setMeshEi(i1, 13);
  f54 = Math_fround(HEAPF32[i3 >> 2]);
  f55 = Math_fround(HEAPF32[i3 + 4 >> 2]);
  f68 = Math_fround(HEAPF32[i3 + 8 >> 2]);
  f56 = Math_fround(f54 * Math_fround(.75));
  f54 = Math_fround(f55 * Math_fround(.75));
  f55 = Math_fround(f68 * Math_fround(.75));
  f68 = Math_fround(Math_fround(HEAPF32[i3 + 12 >> 2]) * Math_fround(.75));
  f50 = Math_fround(HEAPF32[i3 + 16 >> 2]);
  f59 = Math_fround(HEAPF32[i3 + 20 >> 2]);
  f51 = Math_fround(HEAPF32[i3 + 24 >> 2]);
  f70 = Math_fround(f50 * Math_fround(.75));
  f50 = Math_fround(f59 * Math_fround(.75));
  f59 = Math_fround(f51 * Math_fround(.75));
  f51 = Math_fround(Math_fround(HEAPF32[i3 + 28 >> 2]) * Math_fround(.75));
  f73 = Math_fround(HEAPF32[i3 + 32 >> 2]);
  f52 = Math_fround(HEAPF32[i3 + 36 >> 2]);
  f69 = Math_fround(HEAPF32[i3 + 40 >> 2]);
  f71 = Math_fround(f73 * Math_fround(.75));
  f73 = Math_fround(f52 * Math_fround(.75));
  f52 = Math_fround(f69 * Math_fround(.75));
  f69 = Math_fround(Math_fround(HEAPF32[i3 + 44 >> 2]) * Math_fround(.75));
  i10 = i3 + 48 | 0;
  HEAPF32[i13 >> 2] = f56;
  HEAPF32[i13 + 4 >> 2] = f54;
  HEAPF32[i13 + 8 >> 2] = f55;
  HEAPF32[i13 + 12 >> 2] = f68;
  HEAPF32[i13 + 16 >> 2] = f70;
  HEAPF32[i13 + 20 >> 2] = f50;
  HEAPF32[i13 + 24 >> 2] = f59;
  HEAPF32[i13 + 28 >> 2] = f51;
  HEAPF32[i13 + 32 >> 2] = f71;
  HEAPF32[i13 + 36 >> 2] = f73;
  HEAPF32[i13 + 40 >> 2] = f52;
  HEAPF32[i13 + 44 >> 2] = f69;
  i9 = i13 + 48 | 0;
  HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
  HEAP32[i9 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
  HEAP32[i9 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
  HEAP32[i9 + 12 >> 2] = HEAP32[i10 + 12 >> 2];
  i89 = i6;
  i90 = i13;
  i91 = i89 + 64 | 0;
  do {
   HEAP32[i89 >> 2] = HEAP32[i90 >> 2];
   i89 = i89 + 4 | 0;
   i90 = i90 + 4 | 0;
  } while ((i89 | 0) < (i91 | 0));
  __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i6);
  i96 = HEAP32[i48 >> 2] | 0;
 } else i96 = i12;
 if ((i96 | 0) == 3) {
  __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i1 + 252 >> 2] | 0) + 40 >> 2] | 0);
  __ZN11RenderQueue7setMeshEi(i1, 14);
  f69 = Math_fround(HEAPF32[i3 >> 2]);
  f52 = Math_fround(HEAPF32[i3 + 4 >> 2]);
  f73 = Math_fround(HEAPF32[i3 + 8 >> 2]);
  f71 = Math_fround(f69 * Math_fround(.639999986));
  f69 = Math_fround(f52 * Math_fround(.639999986));
  f52 = Math_fround(f73 * Math_fround(.639999986));
  f73 = Math_fround(Math_fround(HEAPF32[i3 + 12 >> 2]) * Math_fround(.639999986));
  f51 = Math_fround(HEAPF32[i3 + 16 >> 2]);
  f59 = Math_fround(HEAPF32[i3 + 20 >> 2]);
  f50 = Math_fround(HEAPF32[i3 + 24 >> 2]);
  f70 = Math_fround(f51 * Math_fround(.639999986));
  f51 = Math_fround(f59 * Math_fround(.639999986));
  f59 = Math_fround(f50 * Math_fround(.639999986));
  f50 = Math_fround(Math_fround(HEAPF32[i3 + 28 >> 2]) * Math_fround(.639999986));
  f68 = Math_fround(HEAPF32[i3 + 32 >> 2]);
  f55 = Math_fround(HEAPF32[i3 + 36 >> 2]);
  f54 = Math_fround(HEAPF32[i3 + 40 >> 2]);
  f56 = Math_fround(f68 * Math_fround(.639999986));
  f68 = Math_fround(f55 * Math_fround(.639999986));
  f55 = Math_fround(f54 * Math_fround(.639999986));
  f54 = Math_fround(Math_fround(HEAPF32[i3 + 44 >> 2]) * Math_fround(.639999986));
  i12 = i3 + 48 | 0;
  HEAPF32[i14 >> 2] = f71;
  HEAPF32[i14 + 4 >> 2] = f69;
  HEAPF32[i14 + 8 >> 2] = f52;
  HEAPF32[i14 + 12 >> 2] = f73;
  HEAPF32[i14 + 16 >> 2] = f70;
  HEAPF32[i14 + 20 >> 2] = f51;
  HEAPF32[i14 + 24 >> 2] = f59;
  HEAPF32[i14 + 28 >> 2] = f50;
  HEAPF32[i14 + 32 >> 2] = f56;
  HEAPF32[i14 + 36 >> 2] = f68;
  HEAPF32[i14 + 40 >> 2] = f55;
  HEAPF32[i14 + 44 >> 2] = f54;
  i13 = i14 + 48 | 0;
  HEAP32[i13 >> 2] = HEAP32[i12 >> 2];
  HEAP32[i13 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
  HEAP32[i13 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
  HEAP32[i13 + 12 >> 2] = HEAP32[i12 + 12 >> 2];
  i89 = i6;
  i90 = i14;
  i91 = i89 + 64 | 0;
  do {
   HEAP32[i89 >> 2] = HEAP32[i90 >> 2];
   i89 = i89 + 4 | 0;
   i90 = i90 + 4 | 0;
  } while ((i89 | 0) < (i91 | 0));
  __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i6);
  i97 = HEAP32[i48 >> 2] | 0;
 } else i97 = i96;
 if ((i97 | 0) == 4) {
  __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i1 + 252 >> 2] | 0) + 40 >> 2] | 0);
  __ZN11RenderQueue7setMeshEi(i1, 15);
  f54 = Math_fround(HEAPF32[i3 >> 2]);
  f55 = Math_fround(HEAPF32[i3 + 4 >> 2]);
  f68 = Math_fround(HEAPF32[i3 + 8 >> 2]);
  f56 = Math_fround(f54 * Math_fround(.159999996));
  f54 = Math_fround(f55 * Math_fround(.159999996));
  f55 = Math_fround(f68 * Math_fround(.159999996));
  f68 = Math_fround(Math_fround(HEAPF32[i3 + 12 >> 2]) * Math_fround(.159999996));
  f50 = Math_fround(HEAPF32[i3 + 16 >> 2]);
  f59 = Math_fround(HEAPF32[i3 + 20 >> 2]);
  f51 = Math_fround(HEAPF32[i3 + 24 >> 2]);
  f70 = Math_fround(f50 * Math_fround(.159999996));
  f50 = Math_fround(f59 * Math_fround(.159999996));
  f59 = Math_fround(f51 * Math_fround(.159999996));
  f51 = Math_fround(Math_fround(HEAPF32[i3 + 28 >> 2]) * Math_fround(.159999996));
  f73 = Math_fround(HEAPF32[i3 + 32 >> 2]);
  f52 = Math_fround(HEAPF32[i3 + 36 >> 2]);
  f69 = Math_fround(HEAPF32[i3 + 40 >> 2]);
  f71 = Math_fround(f73 * Math_fround(.159999996));
  f73 = Math_fround(f52 * Math_fround(.159999996));
  f52 = Math_fround(f69 * Math_fround(.159999996));
  f69 = Math_fround(Math_fround(HEAPF32[i3 + 44 >> 2]) * Math_fround(.159999996));
  i96 = i3 + 48 | 0;
  HEAPF32[i15 >> 2] = f56;
  HEAPF32[i15 + 4 >> 2] = f54;
  HEAPF32[i15 + 8 >> 2] = f55;
  HEAPF32[i15 + 12 >> 2] = f68;
  HEAPF32[i15 + 16 >> 2] = f70;
  HEAPF32[i15 + 20 >> 2] = f50;
  HEAPF32[i15 + 24 >> 2] = f59;
  HEAPF32[i15 + 28 >> 2] = f51;
  HEAPF32[i15 + 32 >> 2] = f71;
  HEAPF32[i15 + 36 >> 2] = f73;
  HEAPF32[i15 + 40 >> 2] = f52;
  HEAPF32[i15 + 44 >> 2] = f69;
  i14 = i15 + 48 | 0;
  HEAP32[i14 >> 2] = HEAP32[i96 >> 2];
  HEAP32[i14 + 4 >> 2] = HEAP32[i96 + 4 >> 2];
  HEAP32[i14 + 8 >> 2] = HEAP32[i96 + 8 >> 2];
  HEAP32[i14 + 12 >> 2] = HEAP32[i96 + 12 >> 2];
  i89 = i6;
  i90 = i15;
  i91 = i89 + 64 | 0;
  do {
   HEAP32[i89 >> 2] = HEAP32[i90 >> 2];
   i89 = i89 + 4 | 0;
   i90 = i90 + 4 | 0;
  } while ((i89 | 0) < (i91 | 0));
  __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i6);
  i98 = HEAP32[i48 >> 2] | 0;
 } else i98 = i97;
 if ((i98 | 0) == 5) {
  __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i1 + 252 >> 2] | 0) + 40 >> 2] | 0);
  __ZN11RenderQueue7setMeshEi(i1, 16);
  f69 = Math_fround(HEAPF32[i3 >> 2]);
  f52 = Math_fround(HEAPF32[i3 + 4 >> 2]);
  f73 = Math_fround(HEAPF32[i3 + 8 >> 2]);
  f71 = Math_fround(f69 * Math_fround(.75));
  f69 = Math_fround(f52 * Math_fround(.75));
  f52 = Math_fround(f73 * Math_fround(.75));
  f73 = Math_fround(Math_fround(HEAPF32[i3 + 12 >> 2]) * Math_fround(.75));
  f51 = Math_fround(HEAPF32[i3 + 16 >> 2]);
  f59 = Math_fround(HEAPF32[i3 + 20 >> 2]);
  f50 = Math_fround(HEAPF32[i3 + 24 >> 2]);
  f70 = Math_fround(f51 * Math_fround(.75));
  f51 = Math_fround(f59 * Math_fround(.75));
  f59 = Math_fround(f50 * Math_fround(.75));
  f50 = Math_fround(Math_fround(HEAPF32[i3 + 28 >> 2]) * Math_fround(.75));
  f68 = Math_fround(HEAPF32[i3 + 32 >> 2]);
  f55 = Math_fround(HEAPF32[i3 + 36 >> 2]);
  f54 = Math_fround(HEAPF32[i3 + 40 >> 2]);
  f56 = Math_fround(f68 * Math_fround(.75));
  f68 = Math_fround(f55 * Math_fround(.75));
  f55 = Math_fround(f54 * Math_fround(.75));
  f54 = Math_fround(Math_fround(HEAPF32[i3 + 44 >> 2]) * Math_fround(.75));
  i97 = i3 + 48 | 0;
  HEAPF32[i16 >> 2] = f71;
  HEAPF32[i16 + 4 >> 2] = f69;
  HEAPF32[i16 + 8 >> 2] = f52;
  HEAPF32[i16 + 12 >> 2] = f73;
  HEAPF32[i16 + 16 >> 2] = f70;
  HEAPF32[i16 + 20 >> 2] = f51;
  HEAPF32[i16 + 24 >> 2] = f59;
  HEAPF32[i16 + 28 >> 2] = f50;
  HEAPF32[i16 + 32 >> 2] = f56;
  HEAPF32[i16 + 36 >> 2] = f68;
  HEAPF32[i16 + 40 >> 2] = f55;
  HEAPF32[i16 + 44 >> 2] = f54;
  i15 = i16 + 48 | 0;
  HEAP32[i15 >> 2] = HEAP32[i97 >> 2];
  HEAP32[i15 + 4 >> 2] = HEAP32[i97 + 4 >> 2];
  HEAP32[i15 + 8 >> 2] = HEAP32[i97 + 8 >> 2];
  HEAP32[i15 + 12 >> 2] = HEAP32[i97 + 12 >> 2];
  i89 = i6;
  i90 = i16;
  i91 = i89 + 64 | 0;
  do {
   HEAP32[i89 >> 2] = HEAP32[i90 >> 2];
   i89 = i89 + 4 | 0;
   i90 = i90 + 4 | 0;
  } while ((i89 | 0) < (i91 | 0));
  __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i6);
  i99 = HEAP32[i48 >> 2] | 0;
 } else i99 = i98;
 if ((i99 | 0) == 6) {
  __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i1 + 252 >> 2] | 0) + 40 >> 2] | 0);
  __ZN11RenderQueue7setMeshEi(i1, 17);
  f54 = Math_fround(HEAPF32[i3 >> 2]);
  f55 = Math_fround(HEAPF32[i3 + 4 >> 2]);
  f68 = Math_fround(HEAPF32[i3 + 8 >> 2]);
  f56 = Math_fround(f54 * Math_fround(.5));
  f54 = Math_fround(f55 * Math_fround(.5));
  f55 = Math_fround(f68 * Math_fround(.5));
  f68 = Math_fround(Math_fround(HEAPF32[i3 + 12 >> 2]) * Math_fround(.5));
  f50 = Math_fround(HEAPF32[i3 + 16 >> 2]);
  f59 = Math_fround(HEAPF32[i3 + 20 >> 2]);
  f51 = Math_fround(HEAPF32[i3 + 24 >> 2]);
  f70 = Math_fround(f50 * Math_fround(.5));
  f50 = Math_fround(f59 * Math_fround(.5));
  f59 = Math_fround(f51 * Math_fround(.5));
  f51 = Math_fround(Math_fround(HEAPF32[i3 + 28 >> 2]) * Math_fround(.5));
  f73 = Math_fround(HEAPF32[i3 + 32 >> 2]);
  f52 = Math_fround(HEAPF32[i3 + 36 >> 2]);
  f69 = Math_fround(HEAPF32[i3 + 40 >> 2]);
  f71 = Math_fround(f73 * Math_fround(.5));
  f73 = Math_fround(f52 * Math_fround(.5));
  f52 = Math_fround(f69 * Math_fround(.5));
  f69 = Math_fround(Math_fround(HEAPF32[i3 + 44 >> 2]) * Math_fround(.5));
  i99 = i3 + 48 | 0;
  HEAPF32[i17 >> 2] = f56;
  HEAPF32[i17 + 4 >> 2] = f54;
  HEAPF32[i17 + 8 >> 2] = f55;
  HEAPF32[i17 + 12 >> 2] = f68;
  HEAPF32[i17 + 16 >> 2] = f70;
  HEAPF32[i17 + 20 >> 2] = f50;
  HEAPF32[i17 + 24 >> 2] = f59;
  HEAPF32[i17 + 28 >> 2] = f51;
  HEAPF32[i17 + 32 >> 2] = f71;
  HEAPF32[i17 + 36 >> 2] = f73;
  HEAPF32[i17 + 40 >> 2] = f52;
  HEAPF32[i17 + 44 >> 2] = f69;
  i98 = i17 + 48 | 0;
  HEAP32[i98 >> 2] = HEAP32[i99 >> 2];
  HEAP32[i98 + 4 >> 2] = HEAP32[i99 + 4 >> 2];
  HEAP32[i98 + 8 >> 2] = HEAP32[i99 + 8 >> 2];
  HEAP32[i98 + 12 >> 2] = HEAP32[i99 + 12 >> 2];
  i89 = i6;
  i90 = i17;
  i91 = i89 + 64 | 0;
  do {
   HEAP32[i89 >> 2] = HEAP32[i90 >> 2];
   i89 = i89 + 4 | 0;
   i90 = i90 + 4 | 0;
  } while ((i89 | 0) < (i91 | 0));
  __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i6);
 }
 f69 = Math_fround(Math_fround(HEAP32[i2 + 36 >> 2] | 0) * Math_fround(1.57079637));
 HEAPF32[i11 >> 2] = Math_fround(0.0);
 HEAPF32[i11 + 4 >> 2] = Math_fround(0.0);
 HEAPF32[i11 + 8 >> 2] = Math_fround(1.0);
 __ZN3glm6rotateIfLNS_9qualifierE0EEENS_3matILi4ELi4ET_XT0_EEERKS4_S3_RKNS_3vecILi3ES3_XT0_EEE(i6, i3, f69, i11);
 i89 = i3;
 i90 = i6;
 i91 = i89 + 64 | 0;
 do {
  HEAP32[i89 >> 2] = HEAP32[i90 >> 2];
  i89 = i89 + 4 | 0;
  i90 = i90 + 4 | 0;
 } while ((i89 | 0) < (i91 | 0));
 i2 = HEAP32[i48 >> 2] | 0;
 if ((i2 | 0) == 101) {
  __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i1 + 252 >> 2] | 0) + 40 >> 2] | 0);
  __ZN11RenderQueue7setMeshEi(i1, 2);
  f69 = Math_fround(HEAPF32[i3 >> 2]);
  f52 = Math_fround(HEAPF32[i3 + 4 >> 2]);
  f73 = Math_fround(HEAPF32[i3 + 8 >> 2]);
  f71 = Math_fround(f69 * Math_fround(.100000001));
  f69 = Math_fround(f52 * Math_fround(.100000001));
  f52 = Math_fround(f73 * Math_fround(.100000001));
  f73 = Math_fround(Math_fround(HEAPF32[i3 + 12 >> 2]) * Math_fround(.100000001));
  f51 = Math_fround(HEAPF32[i3 + 16 >> 2]);
  f59 = Math_fround(HEAPF32[i3 + 20 >> 2]);
  f50 = Math_fround(HEAPF32[i3 + 24 >> 2]);
  f70 = Math_fround(f51 * Math_fround(.100000001));
  f51 = Math_fround(f59 * Math_fround(.100000001));
  f59 = Math_fround(f50 * Math_fround(.100000001));
  f50 = Math_fround(Math_fround(HEAPF32[i3 + 28 >> 2]) * Math_fround(.100000001));
  f68 = Math_fround(HEAPF32[i3 + 32 >> 2]);
  f55 = Math_fround(HEAPF32[i3 + 36 >> 2]);
  f54 = Math_fround(HEAPF32[i3 + 40 >> 2]);
  f56 = Math_fround(f68 * Math_fround(.100000001));
  f68 = Math_fround(f55 * Math_fround(.100000001));
  f55 = Math_fround(f54 * Math_fround(.100000001));
  f54 = Math_fround(Math_fround(HEAPF32[i3 + 44 >> 2]) * Math_fround(.100000001));
  i17 = i3 + 48 | 0;
  HEAP32[i11 >> 2] = HEAP32[i17 >> 2];
  HEAP32[i11 + 4 >> 2] = HEAP32[i17 + 4 >> 2];
  HEAP32[i11 + 8 >> 2] = HEAP32[i17 + 8 >> 2];
  HEAP32[i11 + 12 >> 2] = HEAP32[i17 + 12 >> 2];
  i99 = ~~Math_fround(HEAPF32[i17 >> 2]);
  i98 = ~~Math_fround(HEAPF32[i17 + 4 >> 2]);
  i17 = ((Math_imul(i99, i99) | 0) + i99 + (Math_imul(i98, i98) | 0) | 0) % 5 | 0;
  HEAP32[i18 >> 2] = 0;
  i16 = i18 + 4 | 0;
  HEAP32[i16 >> 2] = 0;
  HEAP32[i18 + 8 >> 2] = 0;
  HEAP32[i6 >> 2] = i17 + 20;
  i97 = i18 + 8 | 0;
  __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_(i18, i6);
  i15 = HEAP32[i16 >> 2] | 0;
  i96 = HEAP32[i97 >> 2] | 0;
  i14 = (((Math_imul(i98, i99) | 0) + i99 | 0) % 2 | 0) + 12 | 0;
  HEAP32[i6 >> 2] = i14;
  if (i15 >>> 0 < i96 >>> 0) {
   HEAP32[i15 >> 2] = i14;
   i14 = i15 + 4 | 0;
   HEAP32[i16 >> 2] = i14;
   i100 = i14;
   i101 = i96;
  } else {
   __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_(i18, i6);
   i100 = HEAP32[i16 >> 2] | 0;
   i101 = HEAP32[i97 >> 2] | 0;
  }
  i96 = i17 + 25 | 0;
  HEAP32[i6 >> 2] = i96;
  if (i100 >>> 0 < i101 >>> 0) {
   HEAP32[i100 >> 2] = i96;
   i96 = i100 + 4 | 0;
   HEAP32[i16 >> 2] = i96;
   i102 = i96;
   i103 = i101;
  } else {
   __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_(i18, i6);
   i102 = HEAP32[i16 >> 2] | 0;
   i103 = HEAP32[i97 >> 2] | 0;
  }
  HEAP32[i6 >> 2] = 11;
  if (i102 >>> 0 < i103 >>> 0) {
   HEAP32[i102 >> 2] = 11;
   HEAP32[i16 >> 2] = i102 + 4;
  } else __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_(i18, i6);
  __ZNSt3__26vectorIiNS_9allocatorIiEEEC2ERKS3_(i19, i18);
  __ZN11RenderQueue11setPalletteENSt3__26vectorIiNS0_9allocatorIiEEEE(i1, i19);
  i102 = HEAP32[i19 >> 2] | 0;
  if (i102 | 0) {
   i103 = i19 + 4 | 0;
   i19 = HEAP32[i103 >> 2] | 0;
   if ((i19 | 0) != (i102 | 0)) HEAP32[i103 >> 2] = i19 + (~((i19 + -4 - i102 | 0) >>> 2) << 2);
   __ZdlPv(i102);
  }
  HEAPF32[i20 >> 2] = f71;
  HEAPF32[i20 + 4 >> 2] = f69;
  HEAPF32[i20 + 8 >> 2] = f52;
  HEAPF32[i20 + 12 >> 2] = f73;
  HEAPF32[i20 + 16 >> 2] = f70;
  HEAPF32[i20 + 20 >> 2] = f51;
  HEAPF32[i20 + 24 >> 2] = f59;
  HEAPF32[i20 + 28 >> 2] = f50;
  HEAPF32[i20 + 32 >> 2] = f56;
  HEAPF32[i20 + 36 >> 2] = f68;
  HEAPF32[i20 + 40 >> 2] = f55;
  HEAPF32[i20 + 44 >> 2] = f54;
  i102 = i20 + 48 | 0;
  HEAP32[i102 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i102 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i102 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  HEAP32[i102 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
  i89 = i6;
  i90 = i20;
  i91 = i89 + 64 | 0;
  do {
   HEAP32[i89 >> 2] = HEAP32[i90 >> 2];
   i89 = i89 + 4 | 0;
   i90 = i90 + 4 | 0;
  } while ((i89 | 0) < (i91 | 0));
  __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i6);
  i20 = HEAP32[i18 >> 2] | 0;
  if (i20 | 0) {
   i102 = HEAP32[i16 >> 2] | 0;
   if ((i102 | 0) != (i20 | 0)) HEAP32[i16 >> 2] = i102 + (~((i102 + -4 - i20 | 0) >>> 2) << 2);
   __ZdlPv(i20);
  }
  i104 = HEAP32[i48 >> 2] | 0;
 } else i104 = i2;
 if ((i104 | 0) == 102) {
  __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i1 + 252 >> 2] | 0) + 40 >> 2] | 0);
  __ZN11RenderQueue7setMeshEi(i1, 9);
  f54 = Math_fround(HEAPF32[i3 >> 2]);
  f55 = Math_fround(HEAPF32[i3 + 4 >> 2]);
  f68 = Math_fround(HEAPF32[i3 + 8 >> 2]);
  f56 = Math_fround(f54 * Math_fround(.100000001));
  f54 = Math_fround(f55 * Math_fround(.100000001));
  f55 = Math_fround(f68 * Math_fround(.100000001));
  f68 = Math_fround(Math_fround(HEAPF32[i3 + 12 >> 2]) * Math_fround(.100000001));
  f50 = Math_fround(HEAPF32[i3 + 16 >> 2]);
  f59 = Math_fround(HEAPF32[i3 + 20 >> 2]);
  f51 = Math_fround(HEAPF32[i3 + 24 >> 2]);
  f70 = Math_fround(f50 * Math_fround(.100000001));
  f50 = Math_fround(f59 * Math_fround(.100000001));
  f59 = Math_fround(f51 * Math_fround(.100000001));
  f51 = Math_fround(Math_fround(HEAPF32[i3 + 28 >> 2]) * Math_fround(.100000001));
  f73 = Math_fround(HEAPF32[i3 + 32 >> 2]);
  f52 = Math_fround(HEAPF32[i3 + 36 >> 2]);
  f69 = Math_fround(HEAPF32[i3 + 40 >> 2]);
  f71 = Math_fround(f73 * Math_fround(.100000001));
  f73 = Math_fround(f52 * Math_fround(.100000001));
  f52 = Math_fround(f69 * Math_fround(.100000001));
  f69 = Math_fround(Math_fround(HEAPF32[i3 + 44 >> 2]) * Math_fround(.100000001));
  i2 = i3 + 48 | 0;
  HEAP32[i11 >> 2] = HEAP32[i2 >> 2];
  HEAP32[i11 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
  HEAP32[i11 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
  HEAP32[i11 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
  i20 = ~~Math_fround(HEAPF32[i2 >> 2]);
  i102 = ~~Math_fround(HEAPF32[i2 + 4 >> 2]);
  i2 = ((Math_imul(i20, i20) | 0) + i20 + (Math_imul(i102, i102) | 0) | 0) % 5 | 0;
  HEAP32[i18 >> 2] = 0;
  i16 = i18 + 4 | 0;
  HEAP32[i16 >> 2] = 0;
  HEAP32[i18 + 8 >> 2] = 0;
  HEAP32[i6 >> 2] = i2 + 20;
  i19 = i18 + 8 | 0;
  __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_(i18, i6);
  i103 = HEAP32[i16 >> 2] | 0;
  i97 = HEAP32[i19 >> 2] | 0;
  i101 = (((Math_imul(i102, i20) | 0) + i20 | 0) % 2 | 0) + 12 | 0;
  HEAP32[i6 >> 2] = i101;
  if (i103 >>> 0 < i97 >>> 0) {
   HEAP32[i103 >> 2] = i101;
   i101 = i103 + 4 | 0;
   HEAP32[i16 >> 2] = i101;
   i105 = i101;
   i106 = i97;
  } else {
   __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_(i18, i6);
   i105 = HEAP32[i16 >> 2] | 0;
   i106 = HEAP32[i19 >> 2] | 0;
  }
  i97 = i2 + 25 | 0;
  HEAP32[i6 >> 2] = i97;
  if (i105 >>> 0 < i106 >>> 0) {
   HEAP32[i105 >> 2] = i97;
   i97 = i105 + 4 | 0;
   HEAP32[i16 >> 2] = i97;
   i107 = i97;
   i108 = i106;
  } else {
   __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_(i18, i6);
   i107 = HEAP32[i16 >> 2] | 0;
   i108 = HEAP32[i19 >> 2] | 0;
  }
  HEAP32[i6 >> 2] = 11;
  if (i107 >>> 0 < i108 >>> 0) {
   HEAP32[i107 >> 2] = 11;
   HEAP32[i16 >> 2] = i107 + 4;
  } else __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_(i18, i6);
  __ZNSt3__26vectorIiNS_9allocatorIiEEEC2ERKS3_(i21, i18);
  __ZN11RenderQueue11setPalletteENSt3__26vectorIiNS0_9allocatorIiEEEE(i1, i21);
  i107 = HEAP32[i21 >> 2] | 0;
  if (i107 | 0) {
   i108 = i21 + 4 | 0;
   i21 = HEAP32[i108 >> 2] | 0;
   if ((i21 | 0) != (i107 | 0)) HEAP32[i108 >> 2] = i21 + (~((i21 + -4 - i107 | 0) >>> 2) << 2);
   __ZdlPv(i107);
  }
  HEAPF32[i22 >> 2] = f56;
  HEAPF32[i22 + 4 >> 2] = f54;
  HEAPF32[i22 + 8 >> 2] = f55;
  HEAPF32[i22 + 12 >> 2] = f68;
  HEAPF32[i22 + 16 >> 2] = f70;
  HEAPF32[i22 + 20 >> 2] = f50;
  HEAPF32[i22 + 24 >> 2] = f59;
  HEAPF32[i22 + 28 >> 2] = f51;
  HEAPF32[i22 + 32 >> 2] = f71;
  HEAPF32[i22 + 36 >> 2] = f73;
  HEAPF32[i22 + 40 >> 2] = f52;
  HEAPF32[i22 + 44 >> 2] = f69;
  i107 = i22 + 48 | 0;
  HEAP32[i107 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i107 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i107 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  HEAP32[i107 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
  i89 = i6;
  i90 = i22;
  i91 = i89 + 64 | 0;
  do {
   HEAP32[i89 >> 2] = HEAP32[i90 >> 2];
   i89 = i89 + 4 | 0;
   i90 = i90 + 4 | 0;
  } while ((i89 | 0) < (i91 | 0));
  __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i6);
  i22 = HEAP32[i18 >> 2] | 0;
  if (i22 | 0) {
   i107 = HEAP32[i16 >> 2] | 0;
   if ((i107 | 0) != (i22 | 0)) HEAP32[i16 >> 2] = i107 + (~((i107 + -4 - i22 | 0) >>> 2) << 2);
   __ZdlPv(i22);
  }
  i109 = HEAP32[i48 >> 2] | 0;
 } else i109 = i104;
 if ((i109 | 0) == 103) {
  __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i1 + 252 >> 2] | 0) + 40 >> 2] | 0);
  __ZN11RenderQueue7setMeshEi(i1, 10);
  f69 = Math_fround(HEAPF32[i3 >> 2]);
  f52 = Math_fround(HEAPF32[i3 + 4 >> 2]);
  f73 = Math_fround(HEAPF32[i3 + 8 >> 2]);
  f71 = Math_fround(f69 * Math_fround(.100000001));
  f69 = Math_fround(f52 * Math_fround(.100000001));
  f52 = Math_fround(f73 * Math_fround(.100000001));
  f73 = Math_fround(Math_fround(HEAPF32[i3 + 12 >> 2]) * Math_fround(.100000001));
  f51 = Math_fround(HEAPF32[i3 + 16 >> 2]);
  f59 = Math_fround(HEAPF32[i3 + 20 >> 2]);
  f50 = Math_fround(HEAPF32[i3 + 24 >> 2]);
  f70 = Math_fround(f51 * Math_fround(.100000001));
  f51 = Math_fround(f59 * Math_fround(.100000001));
  f59 = Math_fround(f50 * Math_fround(.100000001));
  f50 = Math_fround(Math_fround(HEAPF32[i3 + 28 >> 2]) * Math_fround(.100000001));
  f68 = Math_fround(HEAPF32[i3 + 32 >> 2]);
  f55 = Math_fround(HEAPF32[i3 + 36 >> 2]);
  f54 = Math_fround(HEAPF32[i3 + 40 >> 2]);
  f56 = Math_fround(f68 * Math_fround(.100000001));
  f68 = Math_fround(f55 * Math_fround(.100000001));
  f55 = Math_fround(f54 * Math_fround(.100000001));
  f54 = Math_fround(Math_fround(HEAPF32[i3 + 44 >> 2]) * Math_fround(.100000001));
  i104 = i3 + 48 | 0;
  HEAP32[i11 >> 2] = HEAP32[i104 >> 2];
  HEAP32[i11 + 4 >> 2] = HEAP32[i104 + 4 >> 2];
  HEAP32[i11 + 8 >> 2] = HEAP32[i104 + 8 >> 2];
  HEAP32[i11 + 12 >> 2] = HEAP32[i104 + 12 >> 2];
  i22 = ~~Math_fround(HEAPF32[i104 >> 2]);
  i107 = ~~Math_fround(HEAPF32[i104 + 4 >> 2]);
  i104 = ((Math_imul(i22, i22) | 0) + i22 + (Math_imul(i107, i107) | 0) | 0) % 5 | 0;
  HEAP32[i18 >> 2] = 0;
  i16 = i18 + 4 | 0;
  HEAP32[i16 >> 2] = 0;
  HEAP32[i18 + 8 >> 2] = 0;
  HEAP32[i6 >> 2] = i104 + 20;
  i21 = i18 + 8 | 0;
  __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_(i18, i6);
  i108 = HEAP32[i16 >> 2] | 0;
  i19 = HEAP32[i21 >> 2] | 0;
  i106 = (((Math_imul(i107, i22) | 0) + i22 | 0) % 2 | 0) + 12 | 0;
  HEAP32[i6 >> 2] = i106;
  if (i108 >>> 0 < i19 >>> 0) {
   HEAP32[i108 >> 2] = i106;
   i106 = i108 + 4 | 0;
   HEAP32[i16 >> 2] = i106;
   i110 = i106;
   i111 = i19;
  } else {
   __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_(i18, i6);
   i110 = HEAP32[i16 >> 2] | 0;
   i111 = HEAP32[i21 >> 2] | 0;
  }
  i19 = i104 + 25 | 0;
  HEAP32[i6 >> 2] = i19;
  if (i110 >>> 0 < i111 >>> 0) {
   HEAP32[i110 >> 2] = i19;
   i19 = i110 + 4 | 0;
   HEAP32[i16 >> 2] = i19;
   i112 = i19;
   i113 = i111;
  } else {
   __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_(i18, i6);
   i112 = HEAP32[i16 >> 2] | 0;
   i113 = HEAP32[i21 >> 2] | 0;
  }
  HEAP32[i6 >> 2] = 11;
  if (i112 >>> 0 < i113 >>> 0) {
   HEAP32[i112 >> 2] = 11;
   HEAP32[i16 >> 2] = i112 + 4;
  } else __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_(i18, i6);
  __ZNSt3__26vectorIiNS_9allocatorIiEEEC2ERKS3_(i23, i18);
  __ZN11RenderQueue11setPalletteENSt3__26vectorIiNS0_9allocatorIiEEEE(i1, i23);
  i112 = HEAP32[i23 >> 2] | 0;
  if (i112 | 0) {
   i113 = i23 + 4 | 0;
   i23 = HEAP32[i113 >> 2] | 0;
   if ((i23 | 0) != (i112 | 0)) HEAP32[i113 >> 2] = i23 + (~((i23 + -4 - i112 | 0) >>> 2) << 2);
   __ZdlPv(i112);
  }
  HEAPF32[i24 >> 2] = f71;
  HEAPF32[i24 + 4 >> 2] = f69;
  HEAPF32[i24 + 8 >> 2] = f52;
  HEAPF32[i24 + 12 >> 2] = f73;
  HEAPF32[i24 + 16 >> 2] = f70;
  HEAPF32[i24 + 20 >> 2] = f51;
  HEAPF32[i24 + 24 >> 2] = f59;
  HEAPF32[i24 + 28 >> 2] = f50;
  HEAPF32[i24 + 32 >> 2] = f56;
  HEAPF32[i24 + 36 >> 2] = f68;
  HEAPF32[i24 + 40 >> 2] = f55;
  HEAPF32[i24 + 44 >> 2] = f54;
  i112 = i24 + 48 | 0;
  HEAP32[i112 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i112 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i112 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  HEAP32[i112 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
  i89 = i6;
  i90 = i24;
  i91 = i89 + 64 | 0;
  do {
   HEAP32[i89 >> 2] = HEAP32[i90 >> 2];
   i89 = i89 + 4 | 0;
   i90 = i90 + 4 | 0;
  } while ((i89 | 0) < (i91 | 0));
  __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i6);
  i24 = HEAP32[i18 >> 2] | 0;
  if (i24 | 0) {
   i112 = HEAP32[i16 >> 2] | 0;
   if ((i112 | 0) != (i24 | 0)) HEAP32[i16 >> 2] = i112 + (~((i112 + -4 - i24 | 0) >>> 2) << 2);
   __ZdlPv(i24);
  }
  i114 = HEAP32[i48 >> 2] | 0;
 } else i114 = i109;
 if ((i114 | 0) == 104) {
  __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i1 + 252 >> 2] | 0) + 40 >> 2] | 0);
  __ZN11RenderQueue7setMeshEi(i1, 11);
  f54 = Math_fround(HEAPF32[i3 >> 2]);
  f55 = Math_fround(HEAPF32[i3 + 4 >> 2]);
  f68 = Math_fround(HEAPF32[i3 + 8 >> 2]);
  f56 = Math_fround(f54 * Math_fround(.100000001));
  f54 = Math_fround(f55 * Math_fround(.100000001));
  f55 = Math_fround(f68 * Math_fround(.100000001));
  f68 = Math_fround(Math_fround(HEAPF32[i3 + 12 >> 2]) * Math_fround(.100000001));
  f50 = Math_fround(HEAPF32[i3 + 16 >> 2]);
  f59 = Math_fround(HEAPF32[i3 + 20 >> 2]);
  f51 = Math_fround(HEAPF32[i3 + 24 >> 2]);
  f70 = Math_fround(f50 * Math_fround(.100000001));
  f50 = Math_fround(f59 * Math_fround(.100000001));
  f59 = Math_fround(f51 * Math_fround(.100000001));
  f51 = Math_fround(Math_fround(HEAPF32[i3 + 28 >> 2]) * Math_fround(.100000001));
  f73 = Math_fround(HEAPF32[i3 + 32 >> 2]);
  f52 = Math_fround(HEAPF32[i3 + 36 >> 2]);
  f69 = Math_fround(HEAPF32[i3 + 40 >> 2]);
  f71 = Math_fround(f73 * Math_fround(.100000001));
  f73 = Math_fround(f52 * Math_fround(.100000001));
  f52 = Math_fround(f69 * Math_fround(.100000001));
  f69 = Math_fround(Math_fround(HEAPF32[i3 + 44 >> 2]) * Math_fround(.100000001));
  i109 = i3 + 48 | 0;
  HEAP32[i11 >> 2] = HEAP32[i109 >> 2];
  HEAP32[i11 + 4 >> 2] = HEAP32[i109 + 4 >> 2];
  HEAP32[i11 + 8 >> 2] = HEAP32[i109 + 8 >> 2];
  HEAP32[i11 + 12 >> 2] = HEAP32[i109 + 12 >> 2];
  i24 = ~~Math_fround(HEAPF32[i109 >> 2]);
  i112 = ~~Math_fround(HEAPF32[i109 + 4 >> 2]);
  i109 = Math_imul(i24, i24) | 0;
  i16 = Math_imul(i112, i112) | 0;
  i23 = (i109 + i24 + i16 | 0) % 11 | 0;
  HEAP32[i18 >> 2] = 0;
  i113 = i18 + 4 | 0;
  HEAP32[i113 >> 2] = 0;
  HEAP32[i18 + 8 >> 2] = 0;
  HEAP32[i6 >> 2] = ((i109 + i112 + i16 | 0) % 4 | 0) + 6;
  i16 = i18 + 8 | 0;
  __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_(i18, i6);
  i109 = HEAP32[i113 >> 2] | 0;
  i21 = HEAP32[i16 >> 2] | 0;
  i111 = (((Math_imul(i112, i24) | 0) + i24 | 0) % 3 | 0) + 12 | 0;
  HEAP32[i6 >> 2] = i111;
  if (i109 >>> 0 < i21 >>> 0) {
   HEAP32[i109 >> 2] = i111;
   i111 = i109 + 4 | 0;
   HEAP32[i113 >> 2] = i111;
   i115 = i111;
   i116 = i21;
  } else {
   __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_(i18, i6);
   i115 = HEAP32[i113 >> 2] | 0;
   i116 = HEAP32[i16 >> 2] | 0;
  }
  HEAP32[i6 >> 2] = i23;
  if (i115 >>> 0 < i116 >>> 0) {
   HEAP32[i115 >> 2] = i23;
   i23 = i115 + 4 | 0;
   HEAP32[i113 >> 2] = i23;
   i117 = i23;
   i118 = i116;
  } else {
   __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_(i18, i6);
   i117 = HEAP32[i113 >> 2] | 0;
   i118 = HEAP32[i16 >> 2] | 0;
  }
  HEAP32[i6 >> 2] = 11;
  if (i117 >>> 0 < i118 >>> 0) {
   HEAP32[i117 >> 2] = 11;
   HEAP32[i113 >> 2] = i117 + 4;
  } else __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_(i18, i6);
  __ZNSt3__26vectorIiNS_9allocatorIiEEEC2ERKS3_(i25, i18);
  __ZN11RenderQueue11setPalletteENSt3__26vectorIiNS0_9allocatorIiEEEE(i1, i25);
  i117 = HEAP32[i25 >> 2] | 0;
  if (i117 | 0) {
   i118 = i25 + 4 | 0;
   i25 = HEAP32[i118 >> 2] | 0;
   if ((i25 | 0) != (i117 | 0)) HEAP32[i118 >> 2] = i25 + (~((i25 + -4 - i117 | 0) >>> 2) << 2);
   __ZdlPv(i117);
  }
  HEAPF32[i26 >> 2] = f56;
  HEAPF32[i26 + 4 >> 2] = f54;
  HEAPF32[i26 + 8 >> 2] = f55;
  HEAPF32[i26 + 12 >> 2] = f68;
  HEAPF32[i26 + 16 >> 2] = f70;
  HEAPF32[i26 + 20 >> 2] = f50;
  HEAPF32[i26 + 24 >> 2] = f59;
  HEAPF32[i26 + 28 >> 2] = f51;
  HEAPF32[i26 + 32 >> 2] = f71;
  HEAPF32[i26 + 36 >> 2] = f73;
  HEAPF32[i26 + 40 >> 2] = f52;
  HEAPF32[i26 + 44 >> 2] = f69;
  i117 = i26 + 48 | 0;
  HEAP32[i117 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i117 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i117 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  HEAP32[i117 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
  i89 = i6;
  i90 = i26;
  i91 = i89 + 64 | 0;
  do {
   HEAP32[i89 >> 2] = HEAP32[i90 >> 2];
   i89 = i89 + 4 | 0;
   i90 = i90 + 4 | 0;
  } while ((i89 | 0) < (i91 | 0));
  __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i6);
  i26 = HEAP32[i18 >> 2] | 0;
  if (i26 | 0) {
   i117 = HEAP32[i113 >> 2] | 0;
   if ((i117 | 0) != (i26 | 0)) HEAP32[i113 >> 2] = i117 + (~((i117 + -4 - i26 | 0) >>> 2) << 2);
   __ZdlPv(i26);
  }
  i119 = HEAP32[i48 >> 2] | 0;
 } else i119 = i114;
 if ((i119 | 0) == 105) {
  __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i1 + 252 >> 2] | 0) + 40 >> 2] | 0);
  __ZN11RenderQueue7setMeshEi(i1, 12);
  f69 = Math_fround(HEAPF32[i3 >> 2]);
  f52 = Math_fround(HEAPF32[i3 + 4 >> 2]);
  f73 = Math_fround(HEAPF32[i3 + 8 >> 2]);
  f71 = Math_fround(f69 * Math_fround(.100000001));
  f69 = Math_fround(f52 * Math_fround(.100000001));
  f52 = Math_fround(f73 * Math_fround(.100000001));
  f73 = Math_fround(Math_fround(HEAPF32[i3 + 12 >> 2]) * Math_fround(.100000001));
  f51 = Math_fround(HEAPF32[i3 + 16 >> 2]);
  f59 = Math_fround(HEAPF32[i3 + 20 >> 2]);
  f50 = Math_fround(HEAPF32[i3 + 24 >> 2]);
  f70 = Math_fround(f51 * Math_fround(.100000001));
  f51 = Math_fround(f59 * Math_fround(.100000001));
  f59 = Math_fround(f50 * Math_fround(.100000001));
  f50 = Math_fround(Math_fround(HEAPF32[i3 + 28 >> 2]) * Math_fround(.100000001));
  f68 = Math_fround(HEAPF32[i3 + 32 >> 2]);
  f55 = Math_fround(HEAPF32[i3 + 36 >> 2]);
  f54 = Math_fround(HEAPF32[i3 + 40 >> 2]);
  f56 = Math_fround(f68 * Math_fround(.100000001));
  f68 = Math_fround(f55 * Math_fround(.100000001));
  f55 = Math_fround(f54 * Math_fround(.100000001));
  f54 = Math_fround(Math_fround(HEAPF32[i3 + 44 >> 2]) * Math_fround(.100000001));
  i114 = i3 + 48 | 0;
  HEAP32[i11 >> 2] = HEAP32[i114 >> 2];
  HEAP32[i11 + 4 >> 2] = HEAP32[i114 + 4 >> 2];
  HEAP32[i11 + 8 >> 2] = HEAP32[i114 + 8 >> 2];
  HEAP32[i11 + 12 >> 2] = HEAP32[i114 + 12 >> 2];
  i26 = ~~Math_fround(HEAPF32[i114 >> 2]);
  i117 = ~~Math_fround(HEAPF32[i114 + 4 >> 2]);
  i114 = Math_imul(i26, i26) | 0;
  i113 = Math_imul(i117, i117) | 0;
  i25 = (i114 + i26 + i113 | 0) % 11 | 0;
  HEAP32[i18 >> 2] = 0;
  i118 = i18 + 4 | 0;
  HEAP32[i118 >> 2] = 0;
  HEAP32[i18 + 8 >> 2] = 0;
  HEAP32[i6 >> 2] = ((i114 + i117 + i113 | 0) % 4 | 0) + 6;
  i113 = i18 + 8 | 0;
  __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_(i18, i6);
  i114 = HEAP32[i118 >> 2] | 0;
  i16 = HEAP32[i113 >> 2] | 0;
  i116 = (((Math_imul(i117, i26) | 0) + i26 | 0) % 3 | 0) + 12 | 0;
  HEAP32[i6 >> 2] = i116;
  if (i114 >>> 0 < i16 >>> 0) {
   HEAP32[i114 >> 2] = i116;
   i116 = i114 + 4 | 0;
   HEAP32[i118 >> 2] = i116;
   i120 = i116;
   i121 = i16;
  } else {
   __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_(i18, i6);
   i120 = HEAP32[i118 >> 2] | 0;
   i121 = HEAP32[i113 >> 2] | 0;
  }
  HEAP32[i6 >> 2] = i25;
  if (i120 >>> 0 < i121 >>> 0) {
   HEAP32[i120 >> 2] = i25;
   i25 = i120 + 4 | 0;
   HEAP32[i118 >> 2] = i25;
   i122 = i25;
   i123 = i121;
  } else {
   __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_(i18, i6);
   i122 = HEAP32[i118 >> 2] | 0;
   i123 = HEAP32[i113 >> 2] | 0;
  }
  HEAP32[i6 >> 2] = 11;
  if (i122 >>> 0 < i123 >>> 0) {
   HEAP32[i122 >> 2] = 11;
   HEAP32[i118 >> 2] = i122 + 4;
  } else __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_(i18, i6);
  __ZNSt3__26vectorIiNS_9allocatorIiEEEC2ERKS3_(i27, i18);
  __ZN11RenderQueue11setPalletteENSt3__26vectorIiNS0_9allocatorIiEEEE(i1, i27);
  i122 = HEAP32[i27 >> 2] | 0;
  if (i122 | 0) {
   i123 = i27 + 4 | 0;
   i27 = HEAP32[i123 >> 2] | 0;
   if ((i27 | 0) != (i122 | 0)) HEAP32[i123 >> 2] = i27 + (~((i27 + -4 - i122 | 0) >>> 2) << 2);
   __ZdlPv(i122);
  }
  HEAPF32[i28 >> 2] = f71;
  HEAPF32[i28 + 4 >> 2] = f69;
  HEAPF32[i28 + 8 >> 2] = f52;
  HEAPF32[i28 + 12 >> 2] = f73;
  HEAPF32[i28 + 16 >> 2] = f70;
  HEAPF32[i28 + 20 >> 2] = f51;
  HEAPF32[i28 + 24 >> 2] = f59;
  HEAPF32[i28 + 28 >> 2] = f50;
  HEAPF32[i28 + 32 >> 2] = f56;
  HEAPF32[i28 + 36 >> 2] = f68;
  HEAPF32[i28 + 40 >> 2] = f55;
  HEAPF32[i28 + 44 >> 2] = f54;
  i122 = i28 + 48 | 0;
  HEAP32[i122 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i122 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i122 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  HEAP32[i122 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
  i89 = i6;
  i90 = i28;
  i91 = i89 + 64 | 0;
  do {
   HEAP32[i89 >> 2] = HEAP32[i90 >> 2];
   i89 = i89 + 4 | 0;
   i90 = i90 + 4 | 0;
  } while ((i89 | 0) < (i91 | 0));
  __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i6);
  i28 = HEAP32[i18 >> 2] | 0;
  if (i28 | 0) {
   i122 = HEAP32[i118 >> 2] | 0;
   if ((i122 | 0) != (i28 | 0)) HEAP32[i118 >> 2] = i122 + (~((i122 + -4 - i28 | 0) >>> 2) << 2);
   __ZdlPv(i28);
  }
  i124 = HEAP32[i48 >> 2] | 0;
 } else i124 = i119;
 if ((i124 | 0) == 200) {
  __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i1 + 252 >> 2] | 0) + 40 >> 2] | 0);
  __ZN11RenderQueue7setMeshEi(i1, 26);
  f54 = Math_fround(HEAPF32[i3 >> 2]);
  f55 = Math_fround(HEAPF32[i3 + 4 >> 2]);
  f68 = Math_fround(HEAPF32[i3 + 8 >> 2]);
  f56 = Math_fround(f54 * Math_fround(.100000001));
  f54 = Math_fround(f55 * Math_fround(.100000001));
  f55 = Math_fround(f68 * Math_fround(.100000001));
  f68 = Math_fround(Math_fround(HEAPF32[i3 + 12 >> 2]) * Math_fround(.100000001));
  f50 = Math_fround(HEAPF32[i3 + 16 >> 2]);
  f59 = Math_fround(HEAPF32[i3 + 20 >> 2]);
  f51 = Math_fround(HEAPF32[i3 + 24 >> 2]);
  f70 = Math_fround(f50 * Math_fround(.100000001));
  f50 = Math_fround(f59 * Math_fround(.100000001));
  f59 = Math_fround(f51 * Math_fround(.100000001));
  f51 = Math_fround(Math_fround(HEAPF32[i3 + 28 >> 2]) * Math_fround(.100000001));
  f73 = Math_fround(HEAPF32[i3 + 32 >> 2]);
  f52 = Math_fround(HEAPF32[i3 + 36 >> 2]);
  f69 = Math_fround(HEAPF32[i3 + 40 >> 2]);
  f71 = Math_fround(f73 * Math_fround(.100000001));
  f73 = Math_fround(f52 * Math_fround(.100000001));
  f52 = Math_fround(f69 * Math_fround(.100000001));
  f69 = Math_fround(Math_fround(HEAPF32[i3 + 44 >> 2]) * Math_fround(.100000001));
  i119 = i3 + 48 | 0;
  HEAPF32[i29 >> 2] = f56;
  HEAPF32[i29 + 4 >> 2] = f54;
  HEAPF32[i29 + 8 >> 2] = f55;
  HEAPF32[i29 + 12 >> 2] = f68;
  HEAPF32[i29 + 16 >> 2] = f70;
  HEAPF32[i29 + 20 >> 2] = f50;
  HEAPF32[i29 + 24 >> 2] = f59;
  HEAPF32[i29 + 28 >> 2] = f51;
  HEAPF32[i29 + 32 >> 2] = f71;
  HEAPF32[i29 + 36 >> 2] = f73;
  HEAPF32[i29 + 40 >> 2] = f52;
  HEAPF32[i29 + 44 >> 2] = f69;
  i28 = i29 + 48 | 0;
  HEAP32[i28 >> 2] = HEAP32[i119 >> 2];
  HEAP32[i28 + 4 >> 2] = HEAP32[i119 + 4 >> 2];
  HEAP32[i28 + 8 >> 2] = HEAP32[i119 + 8 >> 2];
  HEAP32[i28 + 12 >> 2] = HEAP32[i119 + 12 >> 2];
  i89 = i6;
  i90 = i29;
  i91 = i89 + 64 | 0;
  do {
   HEAP32[i89 >> 2] = HEAP32[i90 >> 2];
   i89 = i89 + 4 | 0;
   i90 = i90 + 4 | 0;
  } while ((i89 | 0) < (i91 | 0));
  __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i6);
  i125 = HEAP32[i48 >> 2] | 0;
 } else i125 = i124;
 if ((i125 | 0) == 201) {
  __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i1 + 252 >> 2] | 0) + 40 >> 2] | 0);
  __ZN11RenderQueue7setMeshEi(i1, 27);
  f69 = Math_fround(HEAPF32[i3 >> 2]);
  f52 = Math_fround(HEAPF32[i3 + 4 >> 2]);
  f73 = Math_fround(HEAPF32[i3 + 8 >> 2]);
  f71 = Math_fround(f69 * Math_fround(.100000001));
  f69 = Math_fround(f52 * Math_fround(.100000001));
  f52 = Math_fround(f73 * Math_fround(.100000001));
  f73 = Math_fround(Math_fround(HEAPF32[i3 + 12 >> 2]) * Math_fround(.100000001));
  f51 = Math_fround(HEAPF32[i3 + 16 >> 2]);
  f59 = Math_fround(HEAPF32[i3 + 20 >> 2]);
  f50 = Math_fround(HEAPF32[i3 + 24 >> 2]);
  f70 = Math_fround(f51 * Math_fround(.100000001));
  f51 = Math_fround(f59 * Math_fround(.100000001));
  f59 = Math_fround(f50 * Math_fround(.100000001));
  f50 = Math_fround(Math_fround(HEAPF32[i3 + 28 >> 2]) * Math_fround(.100000001));
  f68 = Math_fround(HEAPF32[i3 + 32 >> 2]);
  f55 = Math_fround(HEAPF32[i3 + 36 >> 2]);
  f54 = Math_fround(HEAPF32[i3 + 40 >> 2]);
  f56 = Math_fround(f68 * Math_fround(.100000001));
  f68 = Math_fround(f55 * Math_fround(.100000001));
  f55 = Math_fround(f54 * Math_fround(.100000001));
  f54 = Math_fround(Math_fround(HEAPF32[i3 + 44 >> 2]) * Math_fround(.100000001));
  i124 = i3 + 48 | 0;
  HEAPF32[i30 >> 2] = f71;
  HEAPF32[i30 + 4 >> 2] = f69;
  HEAPF32[i30 + 8 >> 2] = f52;
  HEAPF32[i30 + 12 >> 2] = f73;
  HEAPF32[i30 + 16 >> 2] = f70;
  HEAPF32[i30 + 20 >> 2] = f51;
  HEAPF32[i30 + 24 >> 2] = f59;
  HEAPF32[i30 + 28 >> 2] = f50;
  HEAPF32[i30 + 32 >> 2] = f56;
  HEAPF32[i30 + 36 >> 2] = f68;
  HEAPF32[i30 + 40 >> 2] = f55;
  HEAPF32[i30 + 44 >> 2] = f54;
  i29 = i30 + 48 | 0;
  HEAP32[i29 >> 2] = HEAP32[i124 >> 2];
  HEAP32[i29 + 4 >> 2] = HEAP32[i124 + 4 >> 2];
  HEAP32[i29 + 8 >> 2] = HEAP32[i124 + 8 >> 2];
  HEAP32[i29 + 12 >> 2] = HEAP32[i124 + 12 >> 2];
  i89 = i6;
  i90 = i30;
  i91 = i89 + 64 | 0;
  do {
   HEAP32[i89 >> 2] = HEAP32[i90 >> 2];
   i89 = i89 + 4 | 0;
   i90 = i90 + 4 | 0;
  } while ((i89 | 0) < (i91 | 0));
  __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i6);
  i126 = HEAP32[i48 >> 2] | 0;
 } else i126 = i125;
 if ((i126 | 0) == 202) {
  __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i1 + 252 >> 2] | 0) + 40 >> 2] | 0);
  __ZN11RenderQueue7setMeshEi(i1, 28);
  f54 = Math_fround(HEAPF32[i3 >> 2]);
  f55 = Math_fround(HEAPF32[i3 + 4 >> 2]);
  f68 = Math_fround(HEAPF32[i3 + 8 >> 2]);
  f56 = Math_fround(f54 * Math_fround(.100000001));
  f54 = Math_fround(f55 * Math_fround(.100000001));
  f55 = Math_fround(f68 * Math_fround(.100000001));
  f68 = Math_fround(Math_fround(HEAPF32[i3 + 12 >> 2]) * Math_fround(.100000001));
  f50 = Math_fround(HEAPF32[i3 + 16 >> 2]);
  f59 = Math_fround(HEAPF32[i3 + 20 >> 2]);
  f51 = Math_fround(HEAPF32[i3 + 24 >> 2]);
  f70 = Math_fround(f50 * Math_fround(.100000001));
  f50 = Math_fround(f59 * Math_fround(.100000001));
  f59 = Math_fround(f51 * Math_fround(.100000001));
  f51 = Math_fround(Math_fround(HEAPF32[i3 + 28 >> 2]) * Math_fround(.100000001));
  f73 = Math_fround(HEAPF32[i3 + 32 >> 2]);
  f52 = Math_fround(HEAPF32[i3 + 36 >> 2]);
  f69 = Math_fround(HEAPF32[i3 + 40 >> 2]);
  f71 = Math_fround(f73 * Math_fround(.100000001));
  f73 = Math_fround(f52 * Math_fround(.100000001));
  f52 = Math_fround(f69 * Math_fround(.100000001));
  f69 = Math_fround(Math_fround(HEAPF32[i3 + 44 >> 2]) * Math_fround(.100000001));
  i125 = i3 + 48 | 0;
  HEAPF32[i31 >> 2] = f56;
  HEAPF32[i31 + 4 >> 2] = f54;
  HEAPF32[i31 + 8 >> 2] = f55;
  HEAPF32[i31 + 12 >> 2] = f68;
  HEAPF32[i31 + 16 >> 2] = f70;
  HEAPF32[i31 + 20 >> 2] = f50;
  HEAPF32[i31 + 24 >> 2] = f59;
  HEAPF32[i31 + 28 >> 2] = f51;
  HEAPF32[i31 + 32 >> 2] = f71;
  HEAPF32[i31 + 36 >> 2] = f73;
  HEAPF32[i31 + 40 >> 2] = f52;
  HEAPF32[i31 + 44 >> 2] = f69;
  i30 = i31 + 48 | 0;
  HEAP32[i30 >> 2] = HEAP32[i125 >> 2];
  HEAP32[i30 + 4 >> 2] = HEAP32[i125 + 4 >> 2];
  HEAP32[i30 + 8 >> 2] = HEAP32[i125 + 8 >> 2];
  HEAP32[i30 + 12 >> 2] = HEAP32[i125 + 12 >> 2];
  i89 = i6;
  i90 = i31;
  i91 = i89 + 64 | 0;
  do {
   HEAP32[i89 >> 2] = HEAP32[i90 >> 2];
   i89 = i89 + 4 | 0;
   i90 = i90 + 4 | 0;
  } while ((i89 | 0) < (i91 | 0));
  __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i6);
  i127 = HEAP32[i48 >> 2] | 0;
 } else i127 = i126;
 if ((i127 | 0) == 210) {
  __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i1 + 252 >> 2] | 0) + 40 >> 2] | 0);
  __ZN11RenderQueue7setMeshEi(i1, 29);
  f69 = Math_fround(HEAPF32[i3 >> 2]);
  f52 = Math_fround(HEAPF32[i3 + 4 >> 2]);
  f73 = Math_fround(HEAPF32[i3 + 8 >> 2]);
  f71 = Math_fround(f69 * Math_fround(.100000001));
  f69 = Math_fround(f52 * Math_fround(.100000001));
  f52 = Math_fround(f73 * Math_fround(.100000001));
  f73 = Math_fround(Math_fround(HEAPF32[i3 + 12 >> 2]) * Math_fround(.100000001));
  f51 = Math_fround(HEAPF32[i3 + 16 >> 2]);
  f59 = Math_fround(HEAPF32[i3 + 20 >> 2]);
  f50 = Math_fround(HEAPF32[i3 + 24 >> 2]);
  f70 = Math_fround(f51 * Math_fround(.100000001));
  f51 = Math_fround(f59 * Math_fround(.100000001));
  f59 = Math_fround(f50 * Math_fround(.100000001));
  f50 = Math_fround(Math_fround(HEAPF32[i3 + 28 >> 2]) * Math_fround(.100000001));
  f68 = Math_fround(HEAPF32[i3 + 32 >> 2]);
  f55 = Math_fround(HEAPF32[i3 + 36 >> 2]);
  f54 = Math_fround(HEAPF32[i3 + 40 >> 2]);
  f56 = Math_fround(f68 * Math_fround(.100000001));
  f68 = Math_fround(f55 * Math_fround(.100000001));
  f55 = Math_fround(f54 * Math_fround(.100000001));
  f54 = Math_fround(Math_fround(HEAPF32[i3 + 44 >> 2]) * Math_fround(.100000001));
  i126 = i3 + 48 | 0;
  HEAP32[i11 >> 2] = HEAP32[i126 >> 2];
  HEAP32[i11 + 4 >> 2] = HEAP32[i126 + 4 >> 2];
  HEAP32[i11 + 8 >> 2] = HEAP32[i126 + 8 >> 2];
  HEAP32[i11 + 12 >> 2] = HEAP32[i126 + 12 >> 2];
  i31 = ~~Math_fround(HEAPF32[i126 >> 2]);
  i125 = ~~Math_fround(HEAPF32[i126 + 4 >> 2]);
  i126 = Math_imul(i31, i31) | 0;
  i30 = Math_imul(i125, i125) | 0;
  HEAP32[i18 >> 2] = 0;
  i124 = i18 + 4 | 0;
  HEAP32[i124 >> 2] = 0;
  HEAP32[i18 + 8 >> 2] = 0;
  HEAP32[i6 >> 2] = 0;
  i29 = i18 + 8 | 0;
  __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_(i18, i6);
  i119 = HEAP32[i124 >> 2] | 0;
  i28 = HEAP32[i29 >> 2] | 0;
  i122 = ((i126 + i31 + i30 | 0) % 3 | 0) + 1 | 0;
  HEAP32[i6 >> 2] = i122;
  if (i119 >>> 0 < i28 >>> 0) {
   HEAP32[i119 >> 2] = i122;
   i122 = i119 + 4 | 0;
   HEAP32[i124 >> 2] = i122;
   i128 = i122;
   i129 = i28;
  } else {
   __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_(i18, i6);
   i128 = HEAP32[i124 >> 2] | 0;
   i129 = HEAP32[i29 >> 2] | 0;
  }
  HEAP32[i6 >> 2] = 4;
  if (i128 >>> 0 < i129 >>> 0) {
   HEAP32[i128 >> 2] = 4;
   i28 = i128 + 4 | 0;
   HEAP32[i124 >> 2] = i28;
   i130 = i28;
   i131 = i129;
  } else {
   __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_(i18, i6);
   i130 = HEAP32[i124 >> 2] | 0;
   i131 = HEAP32[i29 >> 2] | 0;
  }
  i29 = ((i126 + i125 + i30 | 0) % 3 | 0) + 5 | 0;
  HEAP32[i6 >> 2] = i29;
  if (i130 >>> 0 < i131 >>> 0) {
   HEAP32[i130 >> 2] = i29;
   HEAP32[i124 >> 2] = i130 + 4;
  } else __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_(i18, i6);
  __ZNSt3__26vectorIiNS_9allocatorIiEEEC2ERKS3_(i32, i18);
  __ZN11RenderQueue11setPalletteENSt3__26vectorIiNS0_9allocatorIiEEEE(i1, i32);
  i130 = HEAP32[i32 >> 2] | 0;
  if (i130 | 0) {
   i29 = i32 + 4 | 0;
   i32 = HEAP32[i29 >> 2] | 0;
   if ((i32 | 0) != (i130 | 0)) HEAP32[i29 >> 2] = i32 + (~((i32 + -4 - i130 | 0) >>> 2) << 2);
   __ZdlPv(i130);
  }
  HEAPF32[i33 >> 2] = f71;
  HEAPF32[i33 + 4 >> 2] = f69;
  HEAPF32[i33 + 8 >> 2] = f52;
  HEAPF32[i33 + 12 >> 2] = f73;
  HEAPF32[i33 + 16 >> 2] = f70;
  HEAPF32[i33 + 20 >> 2] = f51;
  HEAPF32[i33 + 24 >> 2] = f59;
  HEAPF32[i33 + 28 >> 2] = f50;
  HEAPF32[i33 + 32 >> 2] = f56;
  HEAPF32[i33 + 36 >> 2] = f68;
  HEAPF32[i33 + 40 >> 2] = f55;
  HEAPF32[i33 + 44 >> 2] = f54;
  i130 = i33 + 48 | 0;
  HEAP32[i130 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i130 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i130 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  HEAP32[i130 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
  i89 = i6;
  i90 = i33;
  i91 = i89 + 64 | 0;
  do {
   HEAP32[i89 >> 2] = HEAP32[i90 >> 2];
   i89 = i89 + 4 | 0;
   i90 = i90 + 4 | 0;
  } while ((i89 | 0) < (i91 | 0));
  __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i6);
  i33 = HEAP32[i18 >> 2] | 0;
  if (i33 | 0) {
   i130 = HEAP32[i124 >> 2] | 0;
   if ((i130 | 0) != (i33 | 0)) HEAP32[i124 >> 2] = i130 + (~((i130 + -4 - i33 | 0) >>> 2) << 2);
   __ZdlPv(i33);
  }
  i132 = HEAP32[i48 >> 2] | 0;
 } else i132 = i127;
 if ((i132 | 0) == 211) {
  __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i1 + 252 >> 2] | 0) + 40 >> 2] | 0);
  __ZN11RenderQueue7setMeshEi(i1, 30);
  f54 = Math_fround(HEAPF32[i3 >> 2]);
  f55 = Math_fround(HEAPF32[i3 + 4 >> 2]);
  f68 = Math_fround(HEAPF32[i3 + 8 >> 2]);
  f56 = Math_fround(f54 * Math_fround(.100000001));
  f54 = Math_fround(f55 * Math_fround(.100000001));
  f55 = Math_fround(f68 * Math_fround(.100000001));
  f68 = Math_fround(Math_fround(HEAPF32[i3 + 12 >> 2]) * Math_fround(.100000001));
  f50 = Math_fround(HEAPF32[i3 + 16 >> 2]);
  f59 = Math_fround(HEAPF32[i3 + 20 >> 2]);
  f51 = Math_fround(HEAPF32[i3 + 24 >> 2]);
  f70 = Math_fround(f50 * Math_fround(.100000001));
  f50 = Math_fround(f59 * Math_fround(.100000001));
  f59 = Math_fround(f51 * Math_fround(.100000001));
  f51 = Math_fround(Math_fround(HEAPF32[i3 + 28 >> 2]) * Math_fround(.100000001));
  f73 = Math_fround(HEAPF32[i3 + 32 >> 2]);
  f52 = Math_fround(HEAPF32[i3 + 36 >> 2]);
  f69 = Math_fround(HEAPF32[i3 + 40 >> 2]);
  f71 = Math_fround(f73 * Math_fround(.100000001));
  f73 = Math_fround(f52 * Math_fround(.100000001));
  f52 = Math_fround(f69 * Math_fround(.100000001));
  f69 = Math_fround(Math_fround(HEAPF32[i3 + 44 >> 2]) * Math_fround(.100000001));
  i127 = i3 + 48 | 0;
  HEAP32[i11 >> 2] = HEAP32[i127 >> 2];
  HEAP32[i11 + 4 >> 2] = HEAP32[i127 + 4 >> 2];
  HEAP32[i11 + 8 >> 2] = HEAP32[i127 + 8 >> 2];
  HEAP32[i11 + 12 >> 2] = HEAP32[i127 + 12 >> 2];
  i33 = ~~Math_fround(HEAPF32[i127 >> 2]);
  i130 = ~~Math_fround(HEAPF32[i127 + 4 >> 2]);
  i127 = Math_imul(i33, i33) | 0;
  i124 = Math_imul(i130, i130) | 0;
  HEAP32[i18 >> 2] = 0;
  i32 = i18 + 4 | 0;
  HEAP32[i32 >> 2] = 0;
  HEAP32[i18 + 8 >> 2] = 0;
  HEAP32[i6 >> 2] = 0;
  i29 = i18 + 8 | 0;
  __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_(i18, i6);
  i131 = HEAP32[i32 >> 2] | 0;
  i30 = HEAP32[i29 >> 2] | 0;
  i125 = ((i127 + i130 + i124 | 0) % 3 | 0) + 5 | 0;
  HEAP32[i6 >> 2] = i125;
  if (i131 >>> 0 < i30 >>> 0) {
   HEAP32[i131 >> 2] = i125;
   i125 = i131 + 4 | 0;
   HEAP32[i32 >> 2] = i125;
   i133 = i125;
   i134 = i30;
  } else {
   __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_(i18, i6);
   i133 = HEAP32[i32 >> 2] | 0;
   i134 = HEAP32[i29 >> 2] | 0;
  }
  i30 = ((i127 + i33 + i124 | 0) % 3 | 0) + 1 | 0;
  HEAP32[i6 >> 2] = i30;
  if (i133 >>> 0 < i134 >>> 0) {
   HEAP32[i133 >> 2] = i30;
   i30 = i133 + 4 | 0;
   HEAP32[i32 >> 2] = i30;
   i135 = i30;
   i136 = i134;
  } else {
   __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_(i18, i6);
   i135 = HEAP32[i32 >> 2] | 0;
   i136 = HEAP32[i29 >> 2] | 0;
  }
  HEAP32[i6 >> 2] = 4;
  if (i135 >>> 0 < i136 >>> 0) {
   HEAP32[i135 >> 2] = 4;
   HEAP32[i32 >> 2] = i135 + 4;
  } else __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_(i18, i6);
  __ZNSt3__26vectorIiNS_9allocatorIiEEEC2ERKS3_(i34, i18);
  __ZN11RenderQueue11setPalletteENSt3__26vectorIiNS0_9allocatorIiEEEE(i1, i34);
  i135 = HEAP32[i34 >> 2] | 0;
  if (i135 | 0) {
   i136 = i34 + 4 | 0;
   i34 = HEAP32[i136 >> 2] | 0;
   if ((i34 | 0) != (i135 | 0)) HEAP32[i136 >> 2] = i34 + (~((i34 + -4 - i135 | 0) >>> 2) << 2);
   __ZdlPv(i135);
  }
  HEAPF32[i35 >> 2] = f56;
  HEAPF32[i35 + 4 >> 2] = f54;
  HEAPF32[i35 + 8 >> 2] = f55;
  HEAPF32[i35 + 12 >> 2] = f68;
  HEAPF32[i35 + 16 >> 2] = f70;
  HEAPF32[i35 + 20 >> 2] = f50;
  HEAPF32[i35 + 24 >> 2] = f59;
  HEAPF32[i35 + 28 >> 2] = f51;
  HEAPF32[i35 + 32 >> 2] = f71;
  HEAPF32[i35 + 36 >> 2] = f73;
  HEAPF32[i35 + 40 >> 2] = f52;
  HEAPF32[i35 + 44 >> 2] = f69;
  i135 = i35 + 48 | 0;
  HEAP32[i135 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i135 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i135 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  HEAP32[i135 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
  i89 = i6;
  i90 = i35;
  i91 = i89 + 64 | 0;
  do {
   HEAP32[i89 >> 2] = HEAP32[i90 >> 2];
   i89 = i89 + 4 | 0;
   i90 = i90 + 4 | 0;
  } while ((i89 | 0) < (i91 | 0));
  __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i6);
  i35 = HEAP32[i18 >> 2] | 0;
  if (i35 | 0) {
   i135 = HEAP32[i32 >> 2] | 0;
   if ((i135 | 0) != (i35 | 0)) HEAP32[i32 >> 2] = i135 + (~((i135 + -4 - i35 | 0) >>> 2) << 2);
   __ZdlPv(i35);
  }
  i137 = HEAP32[i48 >> 2] | 0;
 } else i137 = i132;
 if ((i137 | 0) == 212) {
  __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i1 + 252 >> 2] | 0) + 40 >> 2] | 0);
  __ZN11RenderQueue7setMeshEi(i1, 31);
  f69 = Math_fround(HEAPF32[i3 >> 2]);
  f52 = Math_fround(HEAPF32[i3 + 4 >> 2]);
  f73 = Math_fround(HEAPF32[i3 + 8 >> 2]);
  f71 = Math_fround(f69 * Math_fround(.100000001));
  f69 = Math_fround(f52 * Math_fround(.100000001));
  f52 = Math_fround(f73 * Math_fround(.100000001));
  f73 = Math_fround(Math_fround(HEAPF32[i3 + 12 >> 2]) * Math_fround(.100000001));
  f51 = Math_fround(HEAPF32[i3 + 16 >> 2]);
  f59 = Math_fround(HEAPF32[i3 + 20 >> 2]);
  f50 = Math_fround(HEAPF32[i3 + 24 >> 2]);
  f70 = Math_fround(f51 * Math_fround(.100000001));
  f51 = Math_fround(f59 * Math_fround(.100000001));
  f59 = Math_fround(f50 * Math_fround(.100000001));
  f50 = Math_fround(Math_fround(HEAPF32[i3 + 28 >> 2]) * Math_fround(.100000001));
  f68 = Math_fround(HEAPF32[i3 + 32 >> 2]);
  f55 = Math_fround(HEAPF32[i3 + 36 >> 2]);
  f54 = Math_fround(HEAPF32[i3 + 40 >> 2]);
  f56 = Math_fround(f68 * Math_fround(.100000001));
  f68 = Math_fround(f55 * Math_fround(.100000001));
  f55 = Math_fround(f54 * Math_fround(.100000001));
  f54 = Math_fround(Math_fround(HEAPF32[i3 + 44 >> 2]) * Math_fround(.100000001));
  i132 = i3 + 48 | 0;
  HEAP32[i11 >> 2] = HEAP32[i132 >> 2];
  HEAP32[i11 + 4 >> 2] = HEAP32[i132 + 4 >> 2];
  HEAP32[i11 + 8 >> 2] = HEAP32[i132 + 8 >> 2];
  HEAP32[i11 + 12 >> 2] = HEAP32[i132 + 12 >> 2];
  i35 = ~~Math_fround(HEAPF32[i132 >> 2]);
  i135 = ~~Math_fround(HEAPF32[i132 + 4 >> 2]);
  i132 = Math_imul(i35, i35) | 0;
  i32 = Math_imul(i135, i135) | 0;
  HEAP32[i18 >> 2] = 0;
  i34 = i18 + 4 | 0;
  HEAP32[i34 >> 2] = 0;
  HEAP32[i18 + 8 >> 2] = 0;
  HEAP32[i6 >> 2] = 0;
  i136 = i18 + 8 | 0;
  __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_(i18, i6);
  i29 = HEAP32[i34 >> 2] | 0;
  i134 = HEAP32[i136 >> 2] | 0;
  i30 = ((i132 + i35 + i32 | 0) % 3 | 0) + 1 | 0;
  HEAP32[i6 >> 2] = i30;
  if (i29 >>> 0 < i134 >>> 0) {
   HEAP32[i29 >> 2] = i30;
   i30 = i29 + 4 | 0;
   HEAP32[i34 >> 2] = i30;
   i138 = i30;
   i139 = i134;
  } else {
   __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_(i18, i6);
   i138 = HEAP32[i34 >> 2] | 0;
   i139 = HEAP32[i136 >> 2] | 0;
  }
  HEAP32[i6 >> 2] = 4;
  if (i138 >>> 0 < i139 >>> 0) {
   HEAP32[i138 >> 2] = 4;
   i134 = i138 + 4 | 0;
   HEAP32[i34 >> 2] = i134;
   i140 = i134;
   i141 = i139;
  } else {
   __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_(i18, i6);
   i140 = HEAP32[i34 >> 2] | 0;
   i141 = HEAP32[i136 >> 2] | 0;
  }
  i136 = ((i132 + i135 + i32 | 0) % 3 | 0) + 5 | 0;
  HEAP32[i6 >> 2] = i136;
  if (i140 >>> 0 < i141 >>> 0) {
   HEAP32[i140 >> 2] = i136;
   HEAP32[i34 >> 2] = i140 + 4;
  } else __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_(i18, i6);
  __ZNSt3__26vectorIiNS_9allocatorIiEEEC2ERKS3_(i36, i18);
  __ZN11RenderQueue11setPalletteENSt3__26vectorIiNS0_9allocatorIiEEEE(i1, i36);
  i140 = HEAP32[i36 >> 2] | 0;
  if (i140 | 0) {
   i136 = i36 + 4 | 0;
   i36 = HEAP32[i136 >> 2] | 0;
   if ((i36 | 0) != (i140 | 0)) HEAP32[i136 >> 2] = i36 + (~((i36 + -4 - i140 | 0) >>> 2) << 2);
   __ZdlPv(i140);
  }
  HEAPF32[i37 >> 2] = f71;
  HEAPF32[i37 + 4 >> 2] = f69;
  HEAPF32[i37 + 8 >> 2] = f52;
  HEAPF32[i37 + 12 >> 2] = f73;
  HEAPF32[i37 + 16 >> 2] = f70;
  HEAPF32[i37 + 20 >> 2] = f51;
  HEAPF32[i37 + 24 >> 2] = f59;
  HEAPF32[i37 + 28 >> 2] = f50;
  HEAPF32[i37 + 32 >> 2] = f56;
  HEAPF32[i37 + 36 >> 2] = f68;
  HEAPF32[i37 + 40 >> 2] = f55;
  HEAPF32[i37 + 44 >> 2] = f54;
  i140 = i37 + 48 | 0;
  HEAP32[i140 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i140 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i140 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  HEAP32[i140 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
  i89 = i6;
  i90 = i37;
  i91 = i89 + 64 | 0;
  do {
   HEAP32[i89 >> 2] = HEAP32[i90 >> 2];
   i89 = i89 + 4 | 0;
   i90 = i90 + 4 | 0;
  } while ((i89 | 0) < (i91 | 0));
  __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i6);
  i37 = HEAP32[i18 >> 2] | 0;
  if (i37 | 0) {
   i140 = HEAP32[i34 >> 2] | 0;
   if ((i140 | 0) != (i37 | 0)) HEAP32[i34 >> 2] = i140 + (~((i140 + -4 - i37 | 0) >>> 2) << 2);
   __ZdlPv(i37);
  }
  i142 = HEAP32[i48 >> 2] | 0;
 } else i142 = i137;
 if ((i142 | 0) == 213) {
  __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i1 + 252 >> 2] | 0) + 40 >> 2] | 0);
  __ZN11RenderQueue7setMeshEi(i1, 32);
  f54 = Math_fround(HEAPF32[i3 >> 2]);
  f55 = Math_fround(HEAPF32[i3 + 4 >> 2]);
  f68 = Math_fround(HEAPF32[i3 + 8 >> 2]);
  f56 = Math_fround(f54 * Math_fround(.100000001));
  f54 = Math_fround(f55 * Math_fround(.100000001));
  f55 = Math_fround(f68 * Math_fround(.100000001));
  f68 = Math_fround(Math_fround(HEAPF32[i3 + 12 >> 2]) * Math_fround(.100000001));
  f50 = Math_fround(HEAPF32[i3 + 16 >> 2]);
  f59 = Math_fround(HEAPF32[i3 + 20 >> 2]);
  f51 = Math_fround(HEAPF32[i3 + 24 >> 2]);
  f70 = Math_fround(f50 * Math_fround(.100000001));
  f50 = Math_fround(f59 * Math_fround(.100000001));
  f59 = Math_fround(f51 * Math_fround(.100000001));
  f51 = Math_fround(Math_fround(HEAPF32[i3 + 28 >> 2]) * Math_fround(.100000001));
  f73 = Math_fround(HEAPF32[i3 + 32 >> 2]);
  f52 = Math_fround(HEAPF32[i3 + 36 >> 2]);
  f69 = Math_fround(HEAPF32[i3 + 40 >> 2]);
  f71 = Math_fround(f73 * Math_fround(.100000001));
  f73 = Math_fround(f52 * Math_fround(.100000001));
  f52 = Math_fround(f69 * Math_fround(.100000001));
  f69 = Math_fround(Math_fround(HEAPF32[i3 + 44 >> 2]) * Math_fround(.100000001));
  i137 = i3 + 48 | 0;
  HEAP32[i11 >> 2] = HEAP32[i137 >> 2];
  HEAP32[i11 + 4 >> 2] = HEAP32[i137 + 4 >> 2];
  HEAP32[i11 + 8 >> 2] = HEAP32[i137 + 8 >> 2];
  HEAP32[i11 + 12 >> 2] = HEAP32[i137 + 12 >> 2];
  i37 = ~~Math_fround(HEAPF32[i137 >> 2]);
  i140 = ~~Math_fround(HEAPF32[i137 + 4 >> 2]);
  i137 = Math_imul(i37, i37) | 0;
  i34 = Math_imul(i140, i140) | 0;
  HEAP32[i18 >> 2] = 0;
  i36 = i18 + 4 | 0;
  HEAP32[i36 >> 2] = 0;
  HEAP32[i18 + 8 >> 2] = 0;
  HEAP32[i6 >> 2] = 0;
  i136 = i18 + 8 | 0;
  __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_(i18, i6);
  i141 = HEAP32[i36 >> 2] | 0;
  i32 = HEAP32[i136 >> 2] | 0;
  i135 = ((i137 + i37 + i34 | 0) % 3 | 0) + 1 | 0;
  HEAP32[i6 >> 2] = i135;
  if (i141 >>> 0 < i32 >>> 0) {
   HEAP32[i141 >> 2] = i135;
   i135 = i141 + 4 | 0;
   HEAP32[i36 >> 2] = i135;
   i143 = i135;
   i144 = i32;
  } else {
   __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_(i18, i6);
   i143 = HEAP32[i36 >> 2] | 0;
   i144 = HEAP32[i136 >> 2] | 0;
  }
  HEAP32[i6 >> 2] = 4;
  if (i143 >>> 0 < i144 >>> 0) {
   HEAP32[i143 >> 2] = 4;
   i32 = i143 + 4 | 0;
   HEAP32[i36 >> 2] = i32;
   i145 = i32;
   i146 = i144;
  } else {
   __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_(i18, i6);
   i145 = HEAP32[i36 >> 2] | 0;
   i146 = HEAP32[i136 >> 2] | 0;
  }
  i136 = ((i137 + i140 + i34 | 0) % 3 | 0) + 5 | 0;
  HEAP32[i6 >> 2] = i136;
  if (i145 >>> 0 < i146 >>> 0) {
   HEAP32[i145 >> 2] = i136;
   HEAP32[i36 >> 2] = i145 + 4;
  } else __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_(i18, i6);
  __ZNSt3__26vectorIiNS_9allocatorIiEEEC2ERKS3_(i38, i18);
  __ZN11RenderQueue11setPalletteENSt3__26vectorIiNS0_9allocatorIiEEEE(i1, i38);
  i145 = HEAP32[i38 >> 2] | 0;
  if (i145 | 0) {
   i136 = i38 + 4 | 0;
   i38 = HEAP32[i136 >> 2] | 0;
   if ((i38 | 0) != (i145 | 0)) HEAP32[i136 >> 2] = i38 + (~((i38 + -4 - i145 | 0) >>> 2) << 2);
   __ZdlPv(i145);
  }
  HEAPF32[i39 >> 2] = f56;
  HEAPF32[i39 + 4 >> 2] = f54;
  HEAPF32[i39 + 8 >> 2] = f55;
  HEAPF32[i39 + 12 >> 2] = f68;
  HEAPF32[i39 + 16 >> 2] = f70;
  HEAPF32[i39 + 20 >> 2] = f50;
  HEAPF32[i39 + 24 >> 2] = f59;
  HEAPF32[i39 + 28 >> 2] = f51;
  HEAPF32[i39 + 32 >> 2] = f71;
  HEAPF32[i39 + 36 >> 2] = f73;
  HEAPF32[i39 + 40 >> 2] = f52;
  HEAPF32[i39 + 44 >> 2] = f69;
  i145 = i39 + 48 | 0;
  HEAP32[i145 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i145 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i145 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  HEAP32[i145 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
  i89 = i6;
  i90 = i39;
  i91 = i89 + 64 | 0;
  do {
   HEAP32[i89 >> 2] = HEAP32[i90 >> 2];
   i89 = i89 + 4 | 0;
   i90 = i90 + 4 | 0;
  } while ((i89 | 0) < (i91 | 0));
  __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i6);
  i39 = HEAP32[i18 >> 2] | 0;
  if (i39 | 0) {
   i145 = HEAP32[i36 >> 2] | 0;
   if ((i145 | 0) != (i39 | 0)) HEAP32[i36 >> 2] = i145 + (~((i145 + -4 - i39 | 0) >>> 2) << 2);
   __ZdlPv(i39);
  }
  i147 = HEAP32[i48 >> 2] | 0;
 } else i147 = i142;
 if ((i147 | 0) == 220) {
  __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i1 + 252 >> 2] | 0) + 40 >> 2] | 0);
  __ZN11RenderQueue7setMeshEi(i1, 33);
  f69 = Math_fround(HEAPF32[i3 >> 2]);
  f52 = Math_fround(HEAPF32[i3 + 4 >> 2]);
  f73 = Math_fround(HEAPF32[i3 + 8 >> 2]);
  f71 = Math_fround(f69 * Math_fround(.100000001));
  f69 = Math_fround(f52 * Math_fround(.100000001));
  f52 = Math_fround(f73 * Math_fround(.100000001));
  f73 = Math_fround(Math_fround(HEAPF32[i3 + 12 >> 2]) * Math_fround(.100000001));
  f51 = Math_fround(HEAPF32[i3 + 16 >> 2]);
  f59 = Math_fround(HEAPF32[i3 + 20 >> 2]);
  f50 = Math_fround(HEAPF32[i3 + 24 >> 2]);
  f70 = Math_fround(f51 * Math_fround(.100000001));
  f51 = Math_fround(f59 * Math_fround(.100000001));
  f59 = Math_fround(f50 * Math_fround(.100000001));
  f50 = Math_fround(Math_fround(HEAPF32[i3 + 28 >> 2]) * Math_fround(.100000001));
  f68 = Math_fround(HEAPF32[i3 + 32 >> 2]);
  f55 = Math_fround(HEAPF32[i3 + 36 >> 2]);
  f54 = Math_fround(HEAPF32[i3 + 40 >> 2]);
  f56 = Math_fround(f68 * Math_fround(.100000001));
  f68 = Math_fround(f55 * Math_fround(.100000001));
  f55 = Math_fround(f54 * Math_fround(.100000001));
  f54 = Math_fround(Math_fround(HEAPF32[i3 + 44 >> 2]) * Math_fround(.100000001));
  i142 = i3 + 48 | 0;
  HEAP32[i11 >> 2] = HEAP32[i142 >> 2];
  HEAP32[i11 + 4 >> 2] = HEAP32[i142 + 4 >> 2];
  HEAP32[i11 + 8 >> 2] = HEAP32[i142 + 8 >> 2];
  HEAP32[i11 + 12 >> 2] = HEAP32[i142 + 12 >> 2];
  i39 = ~~Math_fround(HEAPF32[i142 >> 2]);
  i145 = ~~Math_fround(HEAPF32[i142 + 4 >> 2]);
  i142 = Math_imul(i39, i39) | 0;
  i36 = Math_imul(i145, i145) | 0;
  HEAP32[i18 >> 2] = 0;
  i38 = i18 + 4 | 0;
  HEAP32[i38 >> 2] = 0;
  HEAP32[i18 + 8 >> 2] = 0;
  HEAP32[i6 >> 2] = 0;
  i136 = i18 + 8 | 0;
  __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_(i18, i6);
  i146 = HEAP32[i38 >> 2] | 0;
  i34 = HEAP32[i136 >> 2] | 0;
  i140 = ((i142 + i39 + i36 | 0) % 3 | 0) + 1 | 0;
  HEAP32[i6 >> 2] = i140;
  if (i146 >>> 0 < i34 >>> 0) {
   HEAP32[i146 >> 2] = i140;
   i140 = i146 + 4 | 0;
   HEAP32[i38 >> 2] = i140;
   i148 = i140;
   i149 = i34;
  } else {
   __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_(i18, i6);
   i148 = HEAP32[i38 >> 2] | 0;
   i149 = HEAP32[i136 >> 2] | 0;
  }
  HEAP32[i6 >> 2] = 4;
  if (i148 >>> 0 < i149 >>> 0) {
   HEAP32[i148 >> 2] = 4;
   i34 = i148 + 4 | 0;
   HEAP32[i38 >> 2] = i34;
   i150 = i34;
   i151 = i149;
  } else {
   __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_(i18, i6);
   i150 = HEAP32[i38 >> 2] | 0;
   i151 = HEAP32[i136 >> 2] | 0;
  }
  i136 = ((i142 + i145 + i36 | 0) % 3 | 0) + 5 | 0;
  HEAP32[i6 >> 2] = i136;
  if (i150 >>> 0 < i151 >>> 0) {
   HEAP32[i150 >> 2] = i136;
   HEAP32[i38 >> 2] = i150 + 4;
  } else __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_(i18, i6);
  __ZNSt3__26vectorIiNS_9allocatorIiEEEC2ERKS3_(i40, i18);
  __ZN11RenderQueue11setPalletteENSt3__26vectorIiNS0_9allocatorIiEEEE(i1, i40);
  i150 = HEAP32[i40 >> 2] | 0;
  if (i150 | 0) {
   i136 = i40 + 4 | 0;
   i40 = HEAP32[i136 >> 2] | 0;
   if ((i40 | 0) != (i150 | 0)) HEAP32[i136 >> 2] = i40 + (~((i40 + -4 - i150 | 0) >>> 2) << 2);
   __ZdlPv(i150);
  }
  HEAPF32[i41 >> 2] = f71;
  HEAPF32[i41 + 4 >> 2] = f69;
  HEAPF32[i41 + 8 >> 2] = f52;
  HEAPF32[i41 + 12 >> 2] = f73;
  HEAPF32[i41 + 16 >> 2] = f70;
  HEAPF32[i41 + 20 >> 2] = f51;
  HEAPF32[i41 + 24 >> 2] = f59;
  HEAPF32[i41 + 28 >> 2] = f50;
  HEAPF32[i41 + 32 >> 2] = f56;
  HEAPF32[i41 + 36 >> 2] = f68;
  HEAPF32[i41 + 40 >> 2] = f55;
  HEAPF32[i41 + 44 >> 2] = f54;
  i150 = i41 + 48 | 0;
  HEAP32[i150 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i150 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i150 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  HEAP32[i150 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
  i89 = i6;
  i90 = i41;
  i91 = i89 + 64 | 0;
  do {
   HEAP32[i89 >> 2] = HEAP32[i90 >> 2];
   i89 = i89 + 4 | 0;
   i90 = i90 + 4 | 0;
  } while ((i89 | 0) < (i91 | 0));
  __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i6);
  i41 = HEAP32[i18 >> 2] | 0;
  if (i41 | 0) {
   i150 = HEAP32[i38 >> 2] | 0;
   if ((i150 | 0) != (i41 | 0)) HEAP32[i38 >> 2] = i150 + (~((i150 + -4 - i41 | 0) >>> 2) << 2);
   __ZdlPv(i41);
  }
  i152 = HEAP32[i48 >> 2] | 0;
 } else i152 = i147;
 if ((i152 | 0) == 221) {
  __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i1 + 252 >> 2] | 0) + 40 >> 2] | 0);
  __ZN11RenderQueue7setMeshEi(i1, 34);
  f54 = Math_fround(HEAPF32[i3 >> 2]);
  f55 = Math_fround(HEAPF32[i3 + 4 >> 2]);
  f68 = Math_fround(HEAPF32[i3 + 8 >> 2]);
  f56 = Math_fround(f54 * Math_fround(.100000001));
  f54 = Math_fround(f55 * Math_fround(.100000001));
  f55 = Math_fround(f68 * Math_fround(.100000001));
  f68 = Math_fround(Math_fround(HEAPF32[i3 + 12 >> 2]) * Math_fround(.100000001));
  f50 = Math_fround(HEAPF32[i3 + 16 >> 2]);
  f59 = Math_fround(HEAPF32[i3 + 20 >> 2]);
  f51 = Math_fround(HEAPF32[i3 + 24 >> 2]);
  f70 = Math_fround(f50 * Math_fround(.100000001));
  f50 = Math_fround(f59 * Math_fround(.100000001));
  f59 = Math_fround(f51 * Math_fround(.100000001));
  f51 = Math_fround(Math_fround(HEAPF32[i3 + 28 >> 2]) * Math_fround(.100000001));
  f73 = Math_fround(HEAPF32[i3 + 32 >> 2]);
  f52 = Math_fround(HEAPF32[i3 + 36 >> 2]);
  f69 = Math_fround(HEAPF32[i3 + 40 >> 2]);
  f71 = Math_fround(f73 * Math_fround(.100000001));
  f73 = Math_fround(f52 * Math_fround(.100000001));
  f52 = Math_fround(f69 * Math_fround(.100000001));
  f69 = Math_fround(Math_fround(HEAPF32[i3 + 44 >> 2]) * Math_fround(.100000001));
  i147 = i3 + 48 | 0;
  HEAP32[i11 >> 2] = HEAP32[i147 >> 2];
  HEAP32[i11 + 4 >> 2] = HEAP32[i147 + 4 >> 2];
  HEAP32[i11 + 8 >> 2] = HEAP32[i147 + 8 >> 2];
  HEAP32[i11 + 12 >> 2] = HEAP32[i147 + 12 >> 2];
  i41 = ~~Math_fround(HEAPF32[i147 >> 2]);
  i150 = ~~Math_fround(HEAPF32[i147 + 4 >> 2]);
  i147 = Math_imul(i41, i41) | 0;
  i38 = Math_imul(i150, i150) | 0;
  HEAP32[i18 >> 2] = 0;
  i40 = i18 + 4 | 0;
  HEAP32[i40 >> 2] = 0;
  HEAP32[i18 + 8 >> 2] = 0;
  HEAP32[i6 >> 2] = 0;
  i136 = i18 + 8 | 0;
  __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_(i18, i6);
  i151 = HEAP32[i40 >> 2] | 0;
  i36 = HEAP32[i136 >> 2] | 0;
  i145 = ((i147 + i41 + i38 | 0) % 3 | 0) + 1 | 0;
  HEAP32[i6 >> 2] = i145;
  if (i151 >>> 0 < i36 >>> 0) {
   HEAP32[i151 >> 2] = i145;
   i145 = i151 + 4 | 0;
   HEAP32[i40 >> 2] = i145;
   i153 = i145;
   i154 = i36;
  } else {
   __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_(i18, i6);
   i153 = HEAP32[i40 >> 2] | 0;
   i154 = HEAP32[i136 >> 2] | 0;
  }
  HEAP32[i6 >> 2] = 4;
  if (i153 >>> 0 < i154 >>> 0) {
   HEAP32[i153 >> 2] = 4;
   i36 = i153 + 4 | 0;
   HEAP32[i40 >> 2] = i36;
   i155 = i36;
   i156 = i154;
  } else {
   __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_(i18, i6);
   i155 = HEAP32[i40 >> 2] | 0;
   i156 = HEAP32[i136 >> 2] | 0;
  }
  i136 = ((i147 + i150 + i38 | 0) % 3 | 0) + 5 | 0;
  HEAP32[i6 >> 2] = i136;
  if (i155 >>> 0 < i156 >>> 0) {
   HEAP32[i155 >> 2] = i136;
   HEAP32[i40 >> 2] = i155 + 4;
  } else __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_(i18, i6);
  __ZNSt3__26vectorIiNS_9allocatorIiEEEC2ERKS3_(i42, i18);
  __ZN11RenderQueue11setPalletteENSt3__26vectorIiNS0_9allocatorIiEEEE(i1, i42);
  i155 = HEAP32[i42 >> 2] | 0;
  if (i155 | 0) {
   i136 = i42 + 4 | 0;
   i42 = HEAP32[i136 >> 2] | 0;
   if ((i42 | 0) != (i155 | 0)) HEAP32[i136 >> 2] = i42 + (~((i42 + -4 - i155 | 0) >>> 2) << 2);
   __ZdlPv(i155);
  }
  HEAPF32[i43 >> 2] = f56;
  HEAPF32[i43 + 4 >> 2] = f54;
  HEAPF32[i43 + 8 >> 2] = f55;
  HEAPF32[i43 + 12 >> 2] = f68;
  HEAPF32[i43 + 16 >> 2] = f70;
  HEAPF32[i43 + 20 >> 2] = f50;
  HEAPF32[i43 + 24 >> 2] = f59;
  HEAPF32[i43 + 28 >> 2] = f51;
  HEAPF32[i43 + 32 >> 2] = f71;
  HEAPF32[i43 + 36 >> 2] = f73;
  HEAPF32[i43 + 40 >> 2] = f52;
  HEAPF32[i43 + 44 >> 2] = f69;
  i155 = i43 + 48 | 0;
  HEAP32[i155 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i155 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i155 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  HEAP32[i155 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
  i89 = i6;
  i90 = i43;
  i91 = i89 + 64 | 0;
  do {
   HEAP32[i89 >> 2] = HEAP32[i90 >> 2];
   i89 = i89 + 4 | 0;
   i90 = i90 + 4 | 0;
  } while ((i89 | 0) < (i91 | 0));
  __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i6);
  i43 = HEAP32[i18 >> 2] | 0;
  if (i43 | 0) {
   i155 = HEAP32[i40 >> 2] | 0;
   if ((i155 | 0) != (i43 | 0)) HEAP32[i40 >> 2] = i155 + (~((i155 + -4 - i43 | 0) >>> 2) << 2);
   __ZdlPv(i43);
  }
  i157 = HEAP32[i48 >> 2] | 0;
 } else i157 = i152;
 if ((i157 | 0) == 222) {
  __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i1 + 252 >> 2] | 0) + 40 >> 2] | 0);
  __ZN11RenderQueue7setMeshEi(i1, 35);
  f69 = Math_fround(HEAPF32[i3 >> 2]);
  f52 = Math_fround(HEAPF32[i3 + 4 >> 2]);
  f73 = Math_fround(HEAPF32[i3 + 8 >> 2]);
  f71 = Math_fround(f69 * Math_fround(.100000001));
  f69 = Math_fround(f52 * Math_fround(.100000001));
  f52 = Math_fround(f73 * Math_fround(.100000001));
  f73 = Math_fround(Math_fround(HEAPF32[i3 + 12 >> 2]) * Math_fround(.100000001));
  f51 = Math_fround(HEAPF32[i3 + 16 >> 2]);
  f59 = Math_fround(HEAPF32[i3 + 20 >> 2]);
  f50 = Math_fround(HEAPF32[i3 + 24 >> 2]);
  f70 = Math_fround(f51 * Math_fround(.100000001));
  f51 = Math_fround(f59 * Math_fround(.100000001));
  f59 = Math_fround(f50 * Math_fround(.100000001));
  f50 = Math_fround(Math_fround(HEAPF32[i3 + 28 >> 2]) * Math_fround(.100000001));
  f68 = Math_fround(HEAPF32[i3 + 32 >> 2]);
  f55 = Math_fround(HEAPF32[i3 + 36 >> 2]);
  f54 = Math_fround(HEAPF32[i3 + 40 >> 2]);
  f56 = Math_fround(f68 * Math_fround(.100000001));
  f68 = Math_fround(f55 * Math_fround(.100000001));
  f55 = Math_fround(f54 * Math_fround(.100000001));
  f54 = Math_fround(Math_fround(HEAPF32[i3 + 44 >> 2]) * Math_fround(.100000001));
  i152 = i3 + 48 | 0;
  HEAP32[i11 >> 2] = HEAP32[i152 >> 2];
  HEAP32[i11 + 4 >> 2] = HEAP32[i152 + 4 >> 2];
  HEAP32[i11 + 8 >> 2] = HEAP32[i152 + 8 >> 2];
  HEAP32[i11 + 12 >> 2] = HEAP32[i152 + 12 >> 2];
  i43 = ~~Math_fround(HEAPF32[i152 >> 2]);
  i155 = ~~Math_fround(HEAPF32[i152 + 4 >> 2]);
  i152 = Math_imul(i43, i43) | 0;
  i40 = Math_imul(i155, i155) | 0;
  HEAP32[i18 >> 2] = 0;
  i42 = i18 + 4 | 0;
  HEAP32[i42 >> 2] = 0;
  HEAP32[i18 + 8 >> 2] = 0;
  HEAP32[i6 >> 2] = 0;
  i136 = i18 + 8 | 0;
  __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_(i18, i6);
  i156 = HEAP32[i42 >> 2] | 0;
  i38 = HEAP32[i136 >> 2] | 0;
  i150 = ((i152 + i155 + i40 | 0) % 3 | 0) + 5 | 0;
  HEAP32[i6 >> 2] = i150;
  if (i156 >>> 0 < i38 >>> 0) {
   HEAP32[i156 >> 2] = i150;
   i150 = i156 + 4 | 0;
   HEAP32[i42 >> 2] = i150;
   i158 = i150;
   i159 = i38;
  } else {
   __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_(i18, i6);
   i158 = HEAP32[i42 >> 2] | 0;
   i159 = HEAP32[i136 >> 2] | 0;
  }
  i38 = ((i152 + i43 + i40 | 0) % 3 | 0) + 1 | 0;
  HEAP32[i6 >> 2] = i38;
  if (i158 >>> 0 < i159 >>> 0) {
   HEAP32[i158 >> 2] = i38;
   i38 = i158 + 4 | 0;
   HEAP32[i42 >> 2] = i38;
   i160 = i38;
   i161 = i159;
  } else {
   __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_(i18, i6);
   i160 = HEAP32[i42 >> 2] | 0;
   i161 = HEAP32[i136 >> 2] | 0;
  }
  HEAP32[i6 >> 2] = 4;
  if (i160 >>> 0 < i161 >>> 0) {
   HEAP32[i160 >> 2] = 4;
   HEAP32[i42 >> 2] = i160 + 4;
  } else __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_(i18, i6);
  __ZNSt3__26vectorIiNS_9allocatorIiEEEC2ERKS3_(i44, i18);
  __ZN11RenderQueue11setPalletteENSt3__26vectorIiNS0_9allocatorIiEEEE(i1, i44);
  i160 = HEAP32[i44 >> 2] | 0;
  if (i160 | 0) {
   i161 = i44 + 4 | 0;
   i44 = HEAP32[i161 >> 2] | 0;
   if ((i44 | 0) != (i160 | 0)) HEAP32[i161 >> 2] = i44 + (~((i44 + -4 - i160 | 0) >>> 2) << 2);
   __ZdlPv(i160);
  }
  HEAPF32[i45 >> 2] = f71;
  HEAPF32[i45 + 4 >> 2] = f69;
  HEAPF32[i45 + 8 >> 2] = f52;
  HEAPF32[i45 + 12 >> 2] = f73;
  HEAPF32[i45 + 16 >> 2] = f70;
  HEAPF32[i45 + 20 >> 2] = f51;
  HEAPF32[i45 + 24 >> 2] = f59;
  HEAPF32[i45 + 28 >> 2] = f50;
  HEAPF32[i45 + 32 >> 2] = f56;
  HEAPF32[i45 + 36 >> 2] = f68;
  HEAPF32[i45 + 40 >> 2] = f55;
  HEAPF32[i45 + 44 >> 2] = f54;
  i160 = i45 + 48 | 0;
  HEAP32[i160 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i160 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i160 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  HEAP32[i160 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
  i89 = i6;
  i90 = i45;
  i91 = i89 + 64 | 0;
  do {
   HEAP32[i89 >> 2] = HEAP32[i90 >> 2];
   i89 = i89 + 4 | 0;
   i90 = i90 + 4 | 0;
  } while ((i89 | 0) < (i91 | 0));
  __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i6);
  i45 = HEAP32[i18 >> 2] | 0;
  if (i45 | 0) {
   i160 = HEAP32[i42 >> 2] | 0;
   if ((i160 | 0) != (i45 | 0)) HEAP32[i42 >> 2] = i160 + (~((i160 + -4 - i45 | 0) >>> 2) << 2);
   __ZdlPv(i45);
  }
  i162 = HEAP32[i48 >> 2] | 0;
 } else i162 = i157;
 if ((i162 | 0) != 223) {
  STACKTOP = i5;
  return;
 }
 __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i1 + 252 >> 2] | 0) + 40 >> 2] | 0);
 __ZN11RenderQueue7setMeshEi(i1, 36);
 f54 = Math_fround(HEAPF32[i3 >> 2]);
 f55 = Math_fround(HEAPF32[i3 + 4 >> 2]);
 f68 = Math_fround(HEAPF32[i3 + 8 >> 2]);
 f56 = Math_fround(f54 * Math_fround(.100000001));
 f54 = Math_fround(f55 * Math_fround(.100000001));
 f55 = Math_fround(f68 * Math_fround(.100000001));
 f68 = Math_fround(Math_fround(HEAPF32[i3 + 12 >> 2]) * Math_fround(.100000001));
 f50 = Math_fround(HEAPF32[i3 + 16 >> 2]);
 f59 = Math_fround(HEAPF32[i3 + 20 >> 2]);
 f51 = Math_fround(HEAPF32[i3 + 24 >> 2]);
 f70 = Math_fround(f50 * Math_fround(.100000001));
 f50 = Math_fround(f59 * Math_fround(.100000001));
 f59 = Math_fround(f51 * Math_fround(.100000001));
 f51 = Math_fround(Math_fround(HEAPF32[i3 + 28 >> 2]) * Math_fround(.100000001));
 f73 = Math_fround(HEAPF32[i3 + 32 >> 2]);
 f52 = Math_fround(HEAPF32[i3 + 36 >> 2]);
 f69 = Math_fround(HEAPF32[i3 + 40 >> 2]);
 f71 = Math_fround(f73 * Math_fround(.100000001));
 f73 = Math_fround(f52 * Math_fround(.100000001));
 f52 = Math_fround(f69 * Math_fround(.100000001));
 f69 = Math_fround(Math_fround(HEAPF32[i3 + 44 >> 2]) * Math_fround(.100000001));
 i162 = i3 + 48 | 0;
 HEAP32[i11 >> 2] = HEAP32[i162 >> 2];
 HEAP32[i11 + 4 >> 2] = HEAP32[i162 + 4 >> 2];
 HEAP32[i11 + 8 >> 2] = HEAP32[i162 + 8 >> 2];
 HEAP32[i11 + 12 >> 2] = HEAP32[i162 + 12 >> 2];
 i3 = ~~Math_fround(HEAPF32[i162 >> 2]);
 i157 = ~~Math_fround(HEAPF32[i162 + 4 >> 2]);
 i162 = Math_imul(i3, i3) | 0;
 i48 = Math_imul(i157, i157) | 0;
 HEAP32[i18 >> 2] = 0;
 i45 = i18 + 4 | 0;
 HEAP32[i45 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 HEAP32[i6 >> 2] = 0;
 i160 = i18 + 8 | 0;
 __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_(i18, i6);
 i42 = HEAP32[i45 >> 2] | 0;
 i44 = HEAP32[i160 >> 2] | 0;
 i161 = ((i162 + i3 + i48 | 0) % 3 | 0) + 1 | 0;
 HEAP32[i6 >> 2] = i161;
 if (i42 >>> 0 < i44 >>> 0) {
  HEAP32[i42 >> 2] = i161;
  i161 = i42 + 4 | 0;
  HEAP32[i45 >> 2] = i161;
  i163 = i161;
  i164 = i44;
 } else {
  __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_(i18, i6);
  i163 = HEAP32[i45 >> 2] | 0;
  i164 = HEAP32[i160 >> 2] | 0;
 }
 HEAP32[i6 >> 2] = 4;
 if (i163 >>> 0 < i164 >>> 0) {
  HEAP32[i163 >> 2] = 4;
  i44 = i163 + 4 | 0;
  HEAP32[i45 >> 2] = i44;
  i165 = i44;
  i166 = i164;
 } else {
  __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_(i18, i6);
  i165 = HEAP32[i45 >> 2] | 0;
  i166 = HEAP32[i160 >> 2] | 0;
 }
 i160 = ((i162 + i157 + i48 | 0) % 3 | 0) + 5 | 0;
 HEAP32[i6 >> 2] = i160;
 if (i165 >>> 0 < i166 >>> 0) {
  HEAP32[i165 >> 2] = i160;
  HEAP32[i45 >> 2] = i165 + 4;
 } else __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_(i18, i6);
 __ZNSt3__26vectorIiNS_9allocatorIiEEEC2ERKS3_(i46, i18);
 __ZN11RenderQueue11setPalletteENSt3__26vectorIiNS0_9allocatorIiEEEE(i1, i46);
 i165 = HEAP32[i46 >> 2] | 0;
 if (i165 | 0) {
  i160 = i46 + 4 | 0;
  i46 = HEAP32[i160 >> 2] | 0;
  if ((i46 | 0) != (i165 | 0)) HEAP32[i160 >> 2] = i46 + (~((i46 + -4 - i165 | 0) >>> 2) << 2);
  __ZdlPv(i165);
 }
 HEAPF32[i47 >> 2] = f56;
 HEAPF32[i47 + 4 >> 2] = f54;
 HEAPF32[i47 + 8 >> 2] = f55;
 HEAPF32[i47 + 12 >> 2] = f68;
 HEAPF32[i47 + 16 >> 2] = f70;
 HEAPF32[i47 + 20 >> 2] = f50;
 HEAPF32[i47 + 24 >> 2] = f59;
 HEAPF32[i47 + 28 >> 2] = f51;
 HEAPF32[i47 + 32 >> 2] = f71;
 HEAPF32[i47 + 36 >> 2] = f73;
 HEAPF32[i47 + 40 >> 2] = f52;
 HEAPF32[i47 + 44 >> 2] = f69;
 i165 = i47 + 48 | 0;
 HEAP32[i165 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i165 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
 HEAP32[i165 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
 HEAP32[i165 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
 i89 = i6;
 i90 = i47;
 i91 = i89 + 64 | 0;
 do {
  HEAP32[i89 >> 2] = HEAP32[i90 >> 2];
  i89 = i89 + 4 | 0;
  i90 = i90 + 4 | 0;
 } while ((i89 | 0) < (i91 | 0));
 __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i6);
 i6 = HEAP32[i18 >> 2] | 0;
 if (i6 | 0) {
  i18 = HEAP32[i45 >> 2] | 0;
  if ((i18 | 0) != (i6 | 0)) HEAP32[i45 >> 2] = i18 + (~((i18 + -4 - i6 | 0) >>> 2) << 2);
  __ZdlPv(i6);
 }
 STACKTOP = i5;
 return;
}

function __ZN5ImGui8NewFrameEv() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, f12 = f0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, f17 = f0, i18 = 0, i19 = 0, f20 = f0, f21 = f0, i22 = 0, i23 = 0, i24 = 0, f25 = f0, i26 = 0, f27 = f0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, f38 = f0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, f47 = f0, f48 = f0, i49 = 0, f50 = f0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, f58 = f0, f59 = f0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, f86 = f0, f87 = f0, i88 = 0, f89 = f0, f90 = f0, i91 = 0, f92 = f0, f93 = f0, f94 = f0, f95 = f0, i96 = 0, f97 = f0, i98 = 0, f99 = f0, i100 = 0, i101 = 0, i102 = 0, i103 = 0, f104 = f0, i105 = 0, i106 = 0, i107 = 0, i108 = 0, i109 = 0, i110 = 0, i111 = 0, f112 = f0, f113 = f0, f114 = f0, f115 = f0, f116 = f0, f117 = f0, i118 = 0, i119 = 0, i120 = 0, i121 = 0, f122 = f0, f123 = f0, f124 = f0, f125 = f0, f126 = f0, f127 = f0, f128 = f0, i129 = 0, f130 = f0, i131 = 0, i132 = 0, i133 = 0, i134 = 0, i135 = 0, i136 = 0, i137 = 0, i138 = 0, i139 = 0, i140 = 0, i141 = 0;
 i1 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i3 = i2;
 i4 = i2 + 32 | 0;
 i5 = i2 + 16 | 0;
 i6 = HEAP32[1460598] | 0;
 if (!i6) ___assert_fail(35015, 31803, 3656, 35199);
 if (!(HEAP8[i6 >> 0] | 0)) ___assert_fail(33723, 31803, 3661, 35199);
 i7 = i6 + 20 | 0;
 if (!(Math_fround(HEAPF32[i7 >> 2]) >= Math_fround(0.0))) ___assert_fail(35208, 31803, 3662, 35199);
 i8 = i6 + 12 | 0;
 if (!(Math_fround(HEAPF32[i8 >> 2]) >= Math_fround(0.0))) ___assert_fail(35316, 31803, 3663, 35199);
 i9 = i6 + 16 | 0;
 if (!(Math_fround(HEAPF32[i9 >> 2]) >= Math_fround(0.0))) ___assert_fail(35316, 31803, 3663, 35199);
 i10 = i6 + 144 | 0;
 i11 = HEAP32[i10 >> 2] | 0;
 if ((HEAP32[i11 + 48 >> 2] | 0) <= 0) ___assert_fail(35404, 31803, 3664, 35199);
 if (!(HEAP32[(HEAP32[HEAP32[i11 + 56 >> 2] >> 2] | 0) + 68 >> 2] | 0)) ___assert_fail(35527, 31803, 3665, 35199);
 i11 = i6 + 5504 | 0;
 if (!(Math_fround(HEAPF32[i11 >> 2]) > Math_fround(0.0))) ___assert_fail(35656, 31803, 3666, 35199);
 f12 = Math_fround(HEAPF32[i6 + 5356 >> 2]);
 if (!(f12 >= Math_fround(0.0)) | !(f12 <= Math_fround(1.0))) ___assert_fail(35719, 31803, 3667, 35199);
 i13 = i6 + 6328 | 0;
 i14 = HEAP32[i13 >> 2] | 0;
 if (i14 | 0) if ((HEAP32[i6 + 6332 >> 2] | 0) != (i14 | 0)) ___assert_fail(35875, 31803, 3668, 35199);
 if (((HEAP32[i6 + 48 >> 2] | 0) + 1 | 0) >>> 0 >= 513) ___assert_fail(36009, 31803, 3670, 35199);
 if (((HEAP32[i6 + 52 >> 2] | 0) + 1 | 0) >>> 0 >= 513) ___assert_fail(36009, 31803, 3670, 35199);
 if (((HEAP32[i6 + 56 >> 2] | 0) + 1 | 0) >>> 0 >= 513) ___assert_fail(36009, 31803, 3670, 35199);
 if (((HEAP32[i6 + 60 >> 2] | 0) + 1 | 0) >>> 0 >= 513) ___assert_fail(36009, 31803, 3670, 35199);
 if (((HEAP32[i6 + 64 >> 2] | 0) + 1 | 0) >>> 0 >= 513) ___assert_fail(36009, 31803, 3670, 35199);
 if (((HEAP32[i6 + 68 >> 2] | 0) + 1 | 0) >>> 0 >= 513) ___assert_fail(36009, 31803, 3670, 35199);
 if (((HEAP32[i6 + 72 >> 2] | 0) + 1 | 0) >>> 0 >= 513) ___assert_fail(36009, 31803, 3670, 35199);
 if (((HEAP32[i6 + 76 >> 2] | 0) + 1 | 0) >>> 0 >= 513) ___assert_fail(36009, 31803, 3670, 35199);
 if (((HEAP32[i6 + 80 >> 2] | 0) + 1 | 0) >>> 0 >= 513) ___assert_fail(36009, 31803, 3670, 35199);
 if (((HEAP32[i6 + 84 >> 2] | 0) + 1 | 0) >>> 0 >= 513) ___assert_fail(36009, 31803, 3670, 35199);
 if (((HEAP32[i6 + 88 >> 2] | 0) + 1 | 0) >>> 0 >= 513) ___assert_fail(36009, 31803, 3670, 35199);
 if (((HEAP32[i6 + 92 >> 2] | 0) + 1 | 0) >>> 0 >= 513) ___assert_fail(36009, 31803, 3670, 35199);
 i14 = HEAP32[i6 + 96 >> 2] | 0;
 if ((i14 + 1 | 0) >>> 0 >= 513) ___assert_fail(36009, 31803, 3670, 35199);
 if (((HEAP32[i6 + 100 >> 2] | 0) + 1 | 0) >>> 0 >= 513) ___assert_fail(36009, 31803, 3670, 35199);
 if (((HEAP32[i6 + 104 >> 2] | 0) + 1 | 0) >>> 0 >= 513) ___assert_fail(36009, 31803, 3670, 35199);
 if (((HEAP32[i6 + 108 >> 2] | 0) + 1 | 0) >>> 0 >= 513) ___assert_fail(36009, 31803, 3670, 35199);
 if (((HEAP32[i6 + 112 >> 2] | 0) + 1 | 0) >>> 0 >= 513) ___assert_fail(36009, 31803, 3670, 35199);
 if (((HEAP32[i6 + 116 >> 2] | 0) + 1 | 0) >>> 0 >= 513) ___assert_fail(36009, 31803, 3670, 35199);
 if (((HEAP32[i6 + 120 >> 2] | 0) + 1 | 0) >>> 0 >= 513) ___assert_fail(36009, 31803, 3670, 35199);
 if (((HEAP32[i6 + 124 >> 2] | 0) + 1 | 0) >>> 0 >= 513) ___assert_fail(36009, 31803, 3670, 35199);
 if (((HEAP32[i6 + 128 >> 2] | 0) + 1 | 0) >>> 0 >= 513) ___assert_fail(36009, 31803, 3670, 35199);
 if ((i14 | 0) == -1 ? (HEAP32[i6 + 4 >> 2] & 1 | 0) != 0 : 0) ___assert_fail(36196, 31803, 3674, 35199);
 i14 = i6 + 11048 | 0;
 if (!(HEAP8[i14 >> 0] | 0)) {
  if (HEAP32[i6 + 11080 >> 2] | 0) ___assert_fail(36299, 31803, 3679, 35199);
  i15 = HEAP32[i6 + 28 >> 2] | 0;
  if (i15 | 0) {
   HEAP32[i3 >> 2] = 0;
   i16 = __Z18ImFileLoadToMemoryPKcS0_Pji(i15, 64903, i3, 0) | 0;
   if (i16 | 0) {
    __ZN5ImGui25LoadIniSettingsFromMemoryEPKcj(i16, HEAP32[i3 >> 2] | 0);
    HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
    __ZL11FreeWrapperPvS_(i16, 0);
   }
  }
  HEAP8[i14 >> 0] = 1;
 }
 i14 = i6 + 11052 | 0;
 f12 = Math_fround(HEAPF32[i14 >> 2]);
 do if (f12 > Math_fround(0.0)) {
  f17 = Math_fround(f12 - Math_fround(HEAPF32[i7 >> 2]));
  HEAPF32[i14 >> 2] = f17;
  if (!(f17 <= Math_fround(0.0))) break;
  i16 = HEAP32[i6 + 28 >> 2] | 0;
  if (!i16) HEAP8[i6 + 876 >> 0] = 1; else {
   HEAPF32[(HEAP32[1460598] | 0) + 11052 >> 2] = Math_fround(0.0);
   HEAP32[i3 >> 2] = 0;
   i15 = __ZN5ImGui23SaveIniSettingsToMemoryEPj(i3) | 0;
   i18 = _fopen(i16, 35012) | 0;
   if (i18 | 0) {
    _fwrite(i15, 1, HEAP32[i3 >> 2] | 0, i18) | 0;
    _fclose(i18) | 0;
   }
  }
  HEAPF32[i14 >> 2] = Math_fround(0.0);
 } while (0);
 f12 = Math_fround(HEAPF32[i7 >> 2]);
 i14 = i6 + 6324 | 0;
 f17 = Math_fround(f12 + Math_fround(HEAPF32[i14 >> 2]));
 HEAPF32[i14 >> 2] = f17;
 HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
 HEAP32[i6 + 11016 >> 2] = 0;
 HEAP32[i6 + 6388 >> 2] = 0;
 i14 = HEAP32[1460598] | 0;
 i18 = HEAP32[i14 + 156 >> 2] | 0;
 do if (!i18) {
  i15 = HEAP32[i14 + 144 >> 2] | 0;
  if ((HEAP32[i15 + 48 >> 2] | 0) <= 0) ___assert_fail(56841, 56850, 1235, 56909);
  i16 = HEAP32[HEAP32[i15 + 56 >> 2] >> 2] | 0;
  if (i16 | 0) {
   i19 = i16;
   break;
  }
  ___assert_fail(32700, 31803, 6868, 32725);
 } else i19 = i18; while (0);
 i18 = HEAP32[i19 + 68 >> 2] | 0;
 if (!i18) ___assert_fail(32700, 31803, 6868, 32725);
 f17 = Math_fround(HEAPF32[i19 + 4 >> 2]);
 if (!(f17 > Math_fround(0.0))) ___assert_fail(32740, 31803, 6869, 32725);
 HEAP32[i14 + 6180 >> 2] = i19;
 f12 = Math_fround(HEAPF32[i14 + 148 >> 2]);
 f20 = Math_fround(f17 * Math_fround(f12 * Math_fround(HEAPF32[i19 >> 2])));
 HEAPF32[i14 + 6188 >> 2] = f20;
 i16 = HEAP32[i14 + 6392 >> 2] | 0;
 if (!i16) f21 = Math_fround(0.0); else f21 = Math_fround(f20 * Math_fround(HEAPF32[i16 + 624 >> 2]));
 HEAPF32[i14 + 6184 >> 2] = f21;
 i16 = i18 + 40 | 0;
 i18 = HEAP32[i16 + 4 >> 2] | 0;
 i15 = i14 + 6192 | 0;
 HEAP32[i15 >> 2] = HEAP32[i16 >> 2];
 HEAP32[i15 + 4 >> 2] = i18;
 HEAP32[i14 + 6200 >> 2] = i19;
 HEAPF32[i14 + 6204 >> 2] = f21;
 if (!(HEAP32[(HEAP32[i6 + 6180 >> 2] | 0) + 68 >> 2] | 0)) ___assert_fail(36325, 31803, 3705, 35199);
 i14 = HEAP32[i8 >> 2] | 0;
 i8 = HEAP32[i9 >> 2] | 0;
 HEAPF32[i6 + 6212 >> 2] = Math_fround(0.0);
 HEAPF32[i6 + 6216 >> 2] = Math_fround(0.0);
 HEAP32[i6 + 6220 >> 2] = i14;
 HEAP32[i6 + 6224 >> 2] = i8;
 HEAP32[i6 + 6208 >> 2] = HEAP32[i11 >> 2];
 i11 = i6 + 6952 | 0;
 __ZN10ImDrawList5ClearEv(i11);
 __ZN10ImDrawList13PushTextureIDEPv(i11, HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0);
 __ZN10ImDrawList22PushClipRectFullScreenEv(i11);
 HEAP32[i6 + 6988 >> 2] = (HEAP8[i6 + 5501 >> 0] | 0 ? 2 : 0) | HEAPU8[i6 + 5500 >> 0];
 HEAP8[i6 + 6888 >> 0] = 0;
 i11 = i6 + 6892 | 0;
 HEAP32[i11 >> 2] = 0;
 HEAP32[i11 + 4 >> 2] = 0;
 HEAP32[i11 + 8 >> 2] = 0;
 HEAP32[i11 + 12 >> 2] = 0;
 HEAP32[i11 + 16 >> 2] = 0;
 HEAP32[i11 + 20 >> 2] = 0;
 HEAP32[i11 + 24 >> 2] = 0;
 HEAP32[i11 + 28 >> 2] = 0;
 i11 = i6 + 6412 | 0;
 if (!(HEAP32[i11 >> 2] | 0)) HEAPF32[i6 + 6416 >> 2] = Math_fround(0.0);
 i10 = i6 + 6404 | 0;
 HEAP32[i11 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i10 >> 2] = 0;
 HEAP8[i6 + 6408 >> 0] = 0;
 i10 = i6 + 6432 | 0;
 do if (!(HEAP8[i10 >> 0] | 0)) {
  i11 = i6 + 6420 | 0;
  i8 = HEAP32[i11 >> 2] | 0;
  if ((i8 | 0) == 0 ? 1 : (HEAP32[i6 + 6424 >> 2] | 0) != (i8 | 0)) {
   i22 = i11;
   i23 = i8;
   break;
  }
  i8 = HEAP32[1460598] | 0;
  i14 = i8 + 6420 | 0;
  i9 = (HEAP32[i14 >> 2] | 0) != 0;
  HEAP8[i8 + 6433 >> 0] = i9 & 1;
  if (i9) {
   HEAPF32[i8 + 6428 >> 2] = Math_fround(0.0);
   HEAP8[i8 + 6435 >> 0] = 0;
  }
  HEAP32[i14 >> 2] = 0;
  HEAP32[i8 + 6440 >> 2] = 0;
  HEAP8[i8 + 6434 >> 0] = 0;
  HEAP32[i8 + 6452 >> 2] = 0;
  i24 = i11;
  i1 = 61;
 } else {
  i24 = i6 + 6420 | 0;
  i1 = 61;
 } while (0);
 if ((i1 | 0) == 61) {
  i22 = i24;
  i23 = HEAP32[i24 >> 2] | 0;
 }
 f21 = Math_fround(HEAPF32[i7 >> 2]);
 if (i23 | 0) {
  i24 = i6 + 6428 | 0;
  f20 = Math_fround(f21 + Math_fround(HEAPF32[i24 >> 2]));
  HEAPF32[i24 >> 2] = f20;
 }
 i24 = i6 + 6468 | 0;
 f20 = Math_fround(f21 + Math_fround(HEAPF32[i24 >> 2]));
 HEAPF32[i24 >> 2] = f20;
 HEAP32[i6 + 6424 >> 2] = i23;
 HEAP32[i6 + 6456 >> 2] = HEAP32[i6 + 6452 >> 2];
 HEAP8[i6 + 6437 >> 0] = HEAP8[i6 + 6435 >> 0] | 0;
 HEAP8[i6 + 6436 >> 0] = 0;
 HEAP8[i10 >> 0] = 0;
 HEAP8[i6 + 6433 >> 0] = 0;
 i10 = i6 + 10972 | 0;
 i24 = HEAP32[i10 >> 2] | 0;
 if (!((i24 | 0) == 0 | (i23 | 0) == (i24 | 0))) HEAP32[i10 >> 2] = 0;
 do if (HEAP8[i6 + 7072 >> 0] | 0) {
  if (((HEAP32[i6 + 7100 >> 2] | 0) + 1 | 0) >= (HEAP32[i13 >> 2] | 0)) break;
  i10 = HEAP32[1460598] | 0;
  HEAP8[i10 + 7072 >> 0] = 0;
  i24 = i10 + 7084 | 0;
  i23 = i10 + 7104 | 0;
  HEAP32[i23 >> 2] = 0;
  HEAP32[i23 + 4 >> 2] = 0;
  HEAP32[i23 + 8 >> 2] = 0;
  HEAP32[i23 + 12 >> 2] = 0;
  HEAP32[i23 + 16 >> 2] = 0;
  HEAP32[i23 + 20 >> 2] = 0;
  HEAP32[i23 + 24 >> 2] = 0;
  HEAP32[i23 + 28 >> 2] = 0;
  HEAP8[i23 + 32 >> 0] = 0;
  HEAP32[i24 >> 2] = 0;
  HEAP32[i24 + 4 >> 2] = 0;
  HEAP32[i24 + 8 >> 2] = 0;
  HEAP32[i24 + 12 >> 2] = 0;
  HEAP32[i10 + 7100 >> 2] = -1;
  HEAP8[i10 + 7138 >> 0] = 0;
  HEAP8[i10 + 7137 >> 0] = 0;
  HEAP32[i10 + 7160 >> 2] = 0;
  HEAP32[i10 + 7172 >> 2] = 0;
  HEAP32[i10 + 7168 >> 2] = 0;
  HEAPF32[i10 + 7164 >> 2] = Math_fround(3402823469999999843913219.0e14);
  HEAP32[i10 + 7176 >> 2] = -1;
  i10 = i6 + 7188 | 0;
  i24 = HEAP32[i10 >> 2] | 0;
  if (i24 | 0) {
   HEAP32[i6 + 7184 >> 2] = 0;
   HEAP32[i6 + 7180 >> 2] = 0;
   HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
   __ZL11FreeWrapperPvS_(i24, 0);
   HEAP32[i10 >> 2] = 0;
  }
  i10 = i6 + 7192 | 0;
  HEAP32[i10 >> 2] = 0;
  HEAP32[i10 + 4 >> 2] = 0;
 } while (0);
 i13 = i6 + 7168 | 0;
 HEAP32[i6 + 7172 >> 2] = HEAP32[i13 >> 2];
 HEAP32[i13 >> 2] = 0;
 HEAPF32[i6 + 7164 >> 2] = Math_fround(3402823469999999843913219.0e14);
 _memcpy(i6 + 3140 | 0, i6 + 1092 | 0, 2048) | 0;
 i13 = 0;
 do {
  i10 = i6 + 1092 + (i13 << 2) | 0;
  do if (!(HEAP8[i6 + 241 + i13 >> 0] | 0)) f25 = Math_fround(-1.0); else {
   f20 = Math_fround(HEAPF32[i10 >> 2]);
   if (f20 < Math_fround(0.0)) {
    f25 = Math_fround(0.0);
    break;
   }
   f25 = Math_fround(f20 + Math_fround(HEAPF32[i7 >> 2]));
  } while (0);
  HEAPF32[i10 >> 2] = f25;
  i13 = i13 + 1 | 0;
 } while ((i13 | 0) != 512);
 i13 = HEAP32[1460598] | 0;
 i24 = i13 + 875 | 0;
 HEAP8[i24 >> 0] = 0;
 i23 = i13 + 4 | 0;
 i11 = HEAP32[i23 >> 2] | 0;
 i8 = (i11 & 1 | 0) != 0;
 L173 : do if (!(i11 & 2)) i26 = 0; else {
  if (!(HEAP32[i13 + 8 >> 2] & 1)) {
   i26 = 0;
   break;
  }
  do if (!(Math_fround(HEAPF32[i13 + 788 >> 2]) > Math_fround(0.0))) {
   if (Math_fround(HEAPF32[i13 + 796 >> 2]) > Math_fround(0.0)) break;
   if (Math_fround(HEAPF32[i13 + 792 >> 2]) > Math_fround(0.0)) break;
   if (!(Math_fround(HEAPF32[i13 + 800 >> 2]) > Math_fround(0.0))) {
    i26 = 1;
    break L173;
   }
  } while (0);
  HEAP32[i13 + 6680 >> 2] = 4;
  i26 = 1;
 } while (0);
 do if (i8) {
  i11 = HEAP32[i13 + 96 >> 2] | 0;
  do if ((i11 | 0) >= 0) {
   if ((i11 | 0) >= 512) ___assert_fail(36344, 31803, 4817, 36450);
   if (!(HEAP8[i13 + 241 + i11 >> 0] | 0)) break;
   HEAPF32[i13 + 788 >> 2] = Math_fround(1.0);
   HEAP32[i13 + 6680 >> 2] = 3;
  } while (0);
  i11 = HEAP32[i13 + 100 >> 2] | 0;
  do if ((i11 | 0) >= 0) {
   if ((i11 | 0) >= 512) ___assert_fail(36344, 31803, 4817, 36450);
   if (!(HEAP8[i13 + 241 + i11 >> 0] | 0)) break;
   HEAPF32[i13 + 796 >> 2] = Math_fround(1.0);
   HEAP32[i13 + 6680 >> 2] = 3;
  } while (0);
  i11 = HEAP32[i13 + 104 >> 2] | 0;
  do if ((i11 | 0) >= 0) {
   if ((i11 | 0) >= 512) ___assert_fail(36344, 31803, 4817, 36450);
   if (!(HEAP8[i13 + 241 + i11 >> 0] | 0)) break;
   HEAPF32[i13 + 792 >> 2] = Math_fround(1.0);
   HEAP32[i13 + 6680 >> 2] = 3;
  } while (0);
  i11 = HEAP32[i13 + 52 >> 2] | 0;
  do if ((i11 | 0) >= 0) {
   if ((i11 | 0) >= 512) ___assert_fail(36344, 31803, 4817, 36450);
   if (!(HEAP8[i13 + 241 + i11 >> 0] | 0)) break;
   HEAPF32[i13 + 856 >> 2] = Math_fround(1.0);
   HEAP32[i13 + 6680 >> 2] = 3;
  } while (0);
  i11 = HEAP32[i13 + 56 >> 2] | 0;
  do if ((i11 | 0) >= 0) {
   if ((i11 | 0) >= 512) ___assert_fail(36344, 31803, 4817, 36450);
   if (!(HEAP8[i13 + 241 + i11 >> 0] | 0)) break;
   HEAPF32[i13 + 860 >> 2] = Math_fround(1.0);
   HEAP32[i13 + 6680 >> 2] = 3;
  } while (0);
  i11 = HEAP32[i13 + 60 >> 2] | 0;
  do if ((i11 | 0) >= 0) {
   if ((i11 | 0) >= 512) ___assert_fail(36344, 31803, 4817, 36450);
   if (!(HEAP8[i13 + 241 + i11 >> 0] | 0)) break;
   HEAPF32[i13 + 864 >> 2] = Math_fround(1.0);
   HEAP32[i13 + 6680 >> 2] = 3;
  } while (0);
  i11 = HEAP32[i13 + 64 >> 2] | 0;
  do if ((i11 | 0) >= 0) {
   if ((i11 | 0) >= 512) ___assert_fail(36344, 31803, 4817, 36450);
   if (!(HEAP8[i13 + 241 + i11 >> 0] | 0)) break;
   HEAPF32[i13 + 868 >> 2] = Math_fround(1.0);
   HEAP32[i13 + 6680 >> 2] = 3;
  } while (0);
  if (HEAP8[i13 + 237 >> 0] | 0) HEAPF32[i13 + 844 >> 2] = Math_fround(1.0);
  if (HEAP8[i13 + 238 >> 0] | 0) HEAPF32[i13 + 848 >> 2] = Math_fround(1.0);
  if (!(HEAP8[i13 + 239 >> 0] | 0)) break;
  HEAPF32[i13 + 852 >> 2] = Math_fround(1.0);
 } while (0);
 i11 = i13 + 5272 | 0;
 i10 = i13 + 5188 | 0;
 i14 = i11 + 84 | 0;
 do {
  HEAP32[i11 >> 2] = HEAP32[i10 >> 2];
  i11 = i11 + 4 | 0;
  i10 = i10 + 4 | 0;
 } while ((i11 | 0) < (i14 | 0));
 i10 = i13 + 20 | 0;
 i11 = 0;
 do {
  i14 = i13 + 5188 + (i11 << 2) | 0;
  do if (Math_fround(HEAPF32[i13 + 788 + (i11 << 2) >> 2]) > Math_fround(0.0)) {
   f25 = Math_fround(HEAPF32[i14 >> 2]);
   if (f25 < Math_fround(0.0)) {
    f27 = Math_fround(0.0);
    break;
   }
   f27 = Math_fround(f25 + Math_fround(HEAPF32[i10 >> 2]));
  } else f27 = Math_fround(-1.0); while (0);
  HEAPF32[i14 >> 2] = f27;
  i11 = i11 + 1 | 0;
 } while ((i11 | 0) != 21);
 i11 = i13 + 6736 | 0;
 i9 = HEAP32[i11 >> 2] | 0;
 do if (!i9) i28 = i13 + 6734 | 0; else {
  i19 = i13 + 6730 | 0;
  if (HEAP8[i19 >> 0] | 0) {
   i18 = i13 + 6734 | 0;
   if (!(HEAP8[i18 >> 0] | 0)) {
    i28 = i18;
    break;
   }
  }
  i18 = i13 + 6644 | 0;
  i15 = HEAP32[i18 >> 2] | 0;
  if (!i15) ___assert_fail(36460, 31803, 3206, 36472);
  i16 = i13 + 6734 | 0;
  i29 = i13 + 6720 | 0;
  i30 = HEAP32[i29 >> 2] | 0;
  i31 = i30 >>> 0 < 2;
  do if (!(HEAP8[i16 >> 0] | 0)) if (i31) {
   HEAP32[i13 + 6648 >> 2] = i9;
   HEAP32[i15 + 776 + (i30 << 2) >> 2] = i9;
   i32 = i13 + 6740 | 0;
   i33 = i15;
   break;
  } else ___assert_fail(33664, 31803, 2163, 33697); else if (i31) {
   i34 = i13 + 6740 | 0;
   HEAP32[i13 + 6648 >> 2] = i9;
   HEAP32[i15 + 776 + (i30 << 2) >> 2] = i9;
   i35 = i15 + 784 + (i30 << 4) | 0;
   HEAP32[i35 >> 2] = HEAP32[i34 >> 2];
   HEAP32[i35 + 4 >> 2] = HEAP32[i34 + 4 >> 2];
   HEAP32[i35 + 8 >> 2] = HEAP32[i34 + 8 >> 2];
   HEAP32[i35 + 12 >> 2] = HEAP32[i34 + 12 >> 2];
   HEAP8[i13 + 6729 >> 0] = 1;
   HEAP8[i19 >> 0] = 0;
   HEAP8[i13 + 6731 >> 0] = 1;
   i32 = i34;
   i33 = HEAP32[i18 >> 2] | 0;
   break;
  } else ___assert_fail(33664, 31803, 2163, 33697); while (0);
  i18 = i33 + 784 + (HEAP32[i29 >> 2] << 4) | 0;
  HEAP32[i18 >> 2] = HEAP32[i32 >> 2];
  HEAP32[i18 + 4 >> 2] = HEAP32[i32 + 4 >> 2];
  HEAP32[i18 + 8 >> 2] = HEAP32[i32 + 8 >> 2];
  HEAP32[i18 + 12 >> 2] = HEAP32[i32 + 12 >> 2];
  i28 = i16;
 } while (0);
 i32 = i13 + 6733 | 0;
 HEAP8[i32 >> 0] = 0;
 HEAP8[i28 >> 0] = 0;
 HEAP32[i11 >> 2] = 0;
 i33 = i13 + 6672 | 0;
 HEAP32[i33 >> 2] = 0;
 i9 = i13 + 6757 | 0;
 do if (HEAP8[i9 >> 0] | 0) {
  i18 = i13 + 6780 | 0;
  i19 = HEAP32[i18 >> 2] | 0;
  if (!i19) if (!(HEAP32[i13 + 6852 >> 2] | 0)) break;
  i30 = i13 + 6852 | 0;
  i15 = i19 | 0 ? i18 : i30;
  do if (!(HEAP32[i13 + 6760 >> 2] & 32)) i36 = i15; else {
   i18 = i13 + 6816 | 0;
   i19 = HEAP32[i18 >> 2] | 0;
   if (!i19) {
    i36 = i15;
    break;
   }
   i36 = (i19 | 0) == (HEAP32[i13 + 6648 >> 2] | 0) ? i15 : i18;
  } while (0);
  do if ((i36 | 0) == (i30 | 0)) i37 = i30; else {
   if (!(HEAP32[i30 >> 2] | 0)) {
    i37 = i36;
    break;
   }
   if ((HEAP32[(HEAP32[i13 + 6856 >> 2] | 0) + 752 >> 2] | 0) != (HEAP32[i13 + 6644 >> 2] | 0)) {
    i37 = i36;
    break;
   }
   f27 = Math_fround(HEAPF32[i13 + 6860 >> 2]);
   f25 = Math_fround(HEAPF32[i36 + 8 >> 2]);
   if (!(f27 < f25)) {
    if (!(f27 == f25)) {
     i37 = i36;
     break;
    }
    f25 = Math_fround(HEAPF32[i13 + 6864 >> 2]);
    if (!(f25 < Math_fround(HEAPF32[i36 + 12 >> 2]))) {
     i37 = i36;
     break;
    }
   }
   i37 = i30;
  } while (0);
  i30 = i13 + 6644 | 0;
  if (!(HEAP32[i30 >> 2] | 0)) ___assert_fail(36482, 31803, 3233, 36472);
  i15 = i37 + 4 | 0;
  i16 = HEAP32[i15 >> 2] | 0;
  if (!i16) ___assert_fail(36482, 31803, 3233, 36472);
  i29 = i13 + 6720 | 0;
  if (!(HEAP32[i29 >> 2] | 0)) {
   i18 = i37 + 20 | 0;
   f25 = Math_fround(HEAPF32[i18 >> 2]);
   f27 = Math_fround(HEAPF32[i16 + 12 >> 2]);
   f20 = Math_fround(f25 + f27);
   i19 = i37 + 24 | 0;
   f25 = Math_fround(HEAPF32[i19 >> 2]);
   f21 = Math_fround(HEAPF32[i16 + 16 >> 2]);
   f12 = Math_fround(f25 + f21);
   i16 = i37 + 28 | 0;
   f25 = Math_fround(f27 + Math_fround(HEAPF32[i16 >> 2]));
   i31 = i37 + 32 | 0;
   f27 = Math_fround(f21 + Math_fround(HEAPF32[i31 >> 2]));
   HEAPF32[i3 >> 2] = f20;
   HEAPF32[i3 + 4 >> 2] = f12;
   HEAPF32[i3 + 8 >> 2] = f25;
   HEAPF32[i3 + 12 >> 2] = f27;
   __ZL28NavScrollToBringItemIntoViewP11ImGuiWindowRK6ImRect(HEAP32[i15 >> 2] | 0, i3);
   __ZL38CalcNextScrollFromScrollTargetAndClampP11ImGuiWindowb(i4, HEAP32[i15 >> 2] | 0, 0);
   i14 = HEAP32[i15 >> 2] | 0;
   f21 = Math_fround(HEAPF32[i14 + 84 >> 2]);
   f17 = Math_fround(f21 - Math_fround(HEAPF32[i4 >> 2]));
   f21 = Math_fround(HEAPF32[i14 + 88 >> 2]);
   f38 = Math_fround(f21 - Math_fround(HEAPF32[i4 + 4 >> 2]));
   f21 = Math_fround(f17 + Math_fround(HEAPF32[i18 >> 2]));
   HEAPF32[i18 >> 2] = f21;
   f21 = Math_fround(f38 + Math_fround(HEAPF32[i19 >> 2]));
   HEAPF32[i19 >> 2] = f21;
   f21 = Math_fround(f17 + Math_fround(HEAPF32[i16 >> 2]));
   HEAPF32[i16 >> 2] = f21;
   f21 = Math_fround(f38 + Math_fround(HEAPF32[i31 >> 2]));
   HEAPF32[i31 >> 2] = f21;
   if (HEAP32[i14 + 8 >> 2] & 16777216 | 0) {
    i31 = HEAP32[i14 + 752 >> 2] | 0;
    f21 = Math_fround(f20 + f17);
    f20 = Math_fround(f12 + f38);
    f12 = Math_fround(f25 + f17);
    f17 = Math_fround(f27 + f38);
    HEAPF32[i5 >> 2] = f21;
    HEAPF32[i5 + 4 >> 2] = f20;
    HEAPF32[i5 + 8 >> 2] = f12;
    HEAPF32[i5 + 12 >> 2] = f17;
    __ZL28NavScrollToBringItemIntoViewP11ImGuiWindowRK6ImRect(i31, i5);
   }
   i39 = HEAP32[1460598] | 0;
  } else i39 = i13;
  i31 = i39 + 6420 | 0;
  i14 = (HEAP32[i31 >> 2] | 0) != 0;
  HEAP8[i39 + 6433 >> 0] = i14 & 1;
  if (i14) {
   HEAPF32[i39 + 6428 >> 2] = Math_fround(0.0);
   HEAP8[i39 + 6435 >> 0] = 0;
  }
  HEAP32[i31 >> 2] = 0;
  HEAP32[i39 + 6440 >> 2] = 0;
  HEAP8[i39 + 6434 >> 0] = 0;
  HEAP32[i39 + 6452 >> 2] = 0;
  HEAP32[i30 >> 2] = HEAP32[i15 >> 2];
  i15 = HEAP32[i37 >> 2] | 0;
  i30 = HEAP32[i29 >> 2] | 0;
  i29 = i37 + 20 | 0;
  i31 = HEAP32[i39 + 6644 >> 2] | 0;
  if (!i31) ___assert_fail(36460, 31803, 2162, 33697);
  if (i30 >>> 0 < 2) {
   HEAP32[i39 + 6648 >> 2] = i15;
   HEAP32[i31 + 776 + (i30 << 2) >> 2] = i15;
   i15 = i31 + 784 + (i30 << 4) | 0;
   HEAP32[i15 >> 2] = HEAP32[i29 >> 2];
   HEAP32[i15 + 4 >> 2] = HEAP32[i29 + 4 >> 2];
   HEAP32[i15 + 8 >> 2] = HEAP32[i29 + 8 >> 2];
   HEAP32[i15 + 12 >> 2] = HEAP32[i29 + 12 >> 2];
   HEAP8[i39 + 6729 >> 0] = 1;
   HEAP8[i39 + 6730 >> 0] = 0;
   HEAP8[i39 + 6731 >> 0] = 1;
   HEAP32[i33 >> 2] = HEAP32[i37 >> 2];
   HEAP8[i13 + 6756 >> 0] = 0;
   break;
  } else ___assert_fail(33664, 31803, 2163, 33697);
 } while (0);
 i37 = i13 + 6764 | 0;
 if ((HEAP32[i37 >> 2] | 0) == 2) {
  if (!(HEAP8[i9 >> 0] | 0)) ___assert_fail(36512, 31803, 3262, 36472);
  do if (!(HEAP32[i13 + 6780 >> 2] | 0)) {
   if (HEAP32[i13 + 6852 >> 2] | 0) break;
   HEAP8[i13 + 6730 >> 0] = 0;
  } while (0);
  HEAP32[i37 >> 2] = 0;
 }
 i33 = i13 + 6729 | 0;
 i39 = i13 + 6728 | 0;
 do if (HEAP8[i33 >> 0] | 0) {
  if (!(HEAP8[i39 >> 0] | 0)) break;
  do if (HEAP32[i23 >> 2] & 4 | 0) {
   if (!(HEAP32[i13 + 8 >> 2] & 4)) break;
   if (HEAP8[i13 + 6730 >> 0] | 0) break;
   if (!(HEAP8[i13 + 6731 >> 0] | 0)) break;
   if (!(HEAP32[i13 + 6644 >> 2] | 0)) break;
   __ZL22NavCalcPreferredRefPosv(i3);
   i5 = i3;
   i4 = HEAP32[i5 >> 2] | 0;
   i36 = HEAP32[i5 + 4 >> 2] | 0;
   i5 = i13 + 904 | 0;
   HEAP32[i5 >> 2] = i4;
   HEAP32[i5 + 4 >> 2] = i36;
   i5 = i13 + 212 | 0;
   HEAP32[i5 >> 2] = i4;
   HEAP32[i5 + 4 >> 2] = i36;
   HEAP8[i24 >> 0] = 1;
  } while (0);
  HEAP8[i33 >> 0] = 0;
 } while (0);
 HEAP8[i39 >> 0] = 0;
 HEAP32[i13 + 6668 >> 2] = 0;
 i24 = i13 + 6720 | 0;
 i23 = HEAP32[i24 >> 2] | 0;
 if (i23 >>> 0 >= 2) ___assert_fail(36529, 31803, 3284, 36472);
 i36 = i13 + 6644 | 0;
 i5 = HEAP32[i36 >> 2] | 0;
 do if (i5 | 0) {
  i4 = i5;
  while (1) {
   if ((HEAP32[i4 + 8 >> 2] & 352321536 | 0) != 16777216) {
    i1 = 188;
    break;
   }
   i29 = HEAP32[i4 + 752 >> 2] | 0;
   if (!i29) break; else i4 = i29;
  }
  do if ((i1 | 0) == 188) {
   if ((i4 | 0) == (i5 | 0)) break;
   HEAP32[i4 + 772 >> 2] = i5;
  } while (0);
  i4 = i5 + 772 | 0;
  if (!((i23 | 0) == 0 & (HEAP32[i4 >> 2] | 0) != 0)) break;
  HEAP32[i4 >> 2] = 0;
 } while (0);
 i23 = HEAP32[1460598] | 0;
 i5 = i23 + 6704 | 0;
 i4 = HEAP32[i5 >> 2] | 0;
 do if (!i4) {
  f17 = Math_fround(HEAPF32[i23 + 5200 >> 2]);
  i29 = f17 < Math_fround(0.0);
  i15 = f17 == Math_fround(0.0);
  f17 = i15 ? Math_fround(1.0) : Math_fround(0.0);
  i15 = (i29 ? Math_fround(0.0) : f17) > Math_fround(0.0);
  if (!(HEAP8[i23 + 237 >> 0] | 0)) {
   i40 = 0;
   i41 = i15;
   break;
  }
  i29 = HEAP32[i23 + 48 >> 2] | 0;
  if ((i29 | 0) <= -1) {
   i40 = 0;
   i41 = i15;
   break;
  }
  if ((i29 | 0) >= 512) ___assert_fail(32321, 31803, 4844, 32415);
  f17 = Math_fround(HEAPF32[i23 + 1092 + (i29 << 2) >> 2]);
  if (!(f17 == Math_fround(0.0))) {
   f12 = Math_fround(HEAPF32[i23 + 132 >> 2]);
   if (!(f17 > f12)) {
    i40 = 0;
    i41 = i15;
    break;
   }
   f20 = Math_fround(HEAPF32[i23 + 136 >> 2]);
   if (f17 <= f12 | f20 <= Math_fround(0.0)) {
    i40 = 0;
    i41 = i15;
    break;
   }
   if ((~~Math_fround(Math_fround(f17 - f12) / f20) | 0) <= (~~Math_fround(Math_fround(Math_fround(f17 - Math_fround(HEAPF32[i23 + 20 >> 2])) - f12) / f20) | 0)) {
    i40 = 0;
    i41 = i15;
    break;
   }
  }
  i40 = (HEAP32[i23 + 4 >> 2] & 1 | 0) != 0;
  i41 = i15;
 } else {
  i40 = 0;
  i41 = 0;
 } while (0);
 L355 : do if (i41 | i40) {
  i15 = HEAP32[i23 + 6644 >> 2] | 0;
  do if (!i15) {
   i29 = HEAP32[i23 + 6340 >> 2] | 0;
   if ((i29 | 0) <= 0) {
    i42 = i4;
    break L355;
   }
   i30 = HEAP32[i23 + 6348 >> 2] | 0;
   i31 = i29;
   L360 : while (1) {
    i14 = i31 + -1 | 0;
    i43 = HEAP32[i30 + (i14 << 2) >> 2] | 0;
    do if (HEAP8[i43 + 118 >> 0] | 0) {
     if ((HEAP32[i43 + 764 >> 2] | 0) != (i43 | 0)) break;
     if (!(HEAP32[i43 + 8 >> 2] & 524288)) break L360;
    } while (0);
    if ((i31 | 0) > 1) i31 = i14; else {
     i42 = i4;
     break L355;
    }
   }
   if ((i29 | 0) >= (i31 | 0)) {
    i44 = i43;
    break;
   }
   ___assert_fail(56841, 56850, 1235, 56909);
  } else i44 = i15; while (0);
  i15 = HEAP32[i44 + 764 >> 2] | 0;
  HEAP32[i5 >> 2] = i15;
  HEAPF32[i23 + 6712 >> 2] = Math_fround(0.0);
  HEAPF32[i23 + 6708 >> 2] = Math_fround(0.0);
  HEAP8[i23 + 6716 >> 0] = (i40 ^ 1) & 1;
  HEAP32[i23 + 6680 >> 2] = i40 ? 3 : 4;
  i42 = i15;
 } else i42 = i4; while (0);
 i4 = i23 + 20 | 0;
 f20 = Math_fround(HEAPF32[i4 >> 2]);
 i40 = i23 + 6708 | 0;
 f12 = Math_fround(f20 + Math_fround(HEAPF32[i40 >> 2]));
 HEAPF32[i40 >> 2] = f12;
 L370 : do if (!i42) {
  i45 = 0;
  i46 = 0;
 } else {
  i44 = i23 + 6680 | 0;
  i43 = HEAP32[i44 >> 2] | 0;
  do if ((i43 | 0) == 4) {
   i41 = i23 + 6712 | 0;
   f17 = Math_fround(HEAPF32[i41 >> 2]);
   f21 = Math_fround(Math_fround(f12 + Math_fround(-.200000003)) / Math_fround(.0500000007));
   i15 = f21 < Math_fround(0.0);
   i30 = f21 > Math_fround(1.0);
   f38 = i30 ? Math_fround(1.0) : f21;
   f21 = i15 ? Math_fround(0.0) : f38;
   f38 = f17 >= f21 ? f17 : f21;
   HEAPF32[i41 >> 2] = f38;
   f21 = Math_fround(HEAPF32[i23 + 5236 >> 2]);
   do if (f21 < Math_fround(0.0)) f47 = Math_fround(0.0); else {
    f17 = Math_fround(f21 - f20);
    f27 = Math_fround(HEAPF32[i23 + 132 >> 2]);
    f25 = Math_fround(Math_fround(HEAPF32[i23 + 136 >> 2]) * Math_fround(2.0));
    if (f21 == Math_fround(0.0)) {
     f47 = Math_fround(1.0);
     break;
    }
    if (f21 <= f27 | f25 <= Math_fround(0.0)) {
     f47 = Math_fround(0.0);
     break;
    }
    i15 = ~~Math_fround(Math_fround(f21 - f27) / f25) - ~~Math_fround(Math_fround(f17 - f27) / f25) | 0;
    f47 = Math_fround(((i15 | 0) > 0 ? i15 : 0) | 0);
   } while (0);
   i31 = f47 > Math_fround(0.0) & 1;
   f21 = Math_fround(HEAPF32[i23 + 5240 >> 2]);
   do if (f21 < Math_fround(0.0)) f48 = Math_fround(0.0); else {
    f25 = Math_fround(f21 - f20);
    f27 = Math_fround(HEAPF32[i23 + 132 >> 2]);
    f17 = Math_fround(Math_fround(HEAPF32[i23 + 136 >> 2]) * Math_fround(2.0));
    if (f21 == Math_fround(0.0)) {
     f48 = Math_fround(1.0);
     break;
    }
    if (f21 <= f27 | f17 <= Math_fround(0.0)) {
     f48 = Math_fround(0.0);
     break;
    }
    i29 = ~~Math_fround(Math_fround(f21 - f27) / f17) - ~~Math_fround(Math_fround(f25 - f27) / f17) | 0;
    f48 = Math_fround(((i29 | 0) > 0 ? i29 : 0) | 0);
   } while (0);
   i29 = i31 - (f48 > Math_fround(0.0) & 1) | 0;
   if (!i29) {
    i49 = i23;
    f50 = f38;
   } else {
    __ZL33NavUpdateWindowingHighlightWindowi(i29);
    HEAPF32[i41 >> 2] = Math_fround(1.0);
    i49 = HEAP32[1460598] | 0;
    f50 = Math_fround(1.0);
   }
   if (Math_fround(HEAPF32[i49 + 800 >> 2]) > Math_fround(0.0)) {
    if (!(HEAP32[i5 >> 2] | 0)) {
     i45 = 0;
     i46 = 0;
     break L370;
    }
    i51 = HEAP32[i44 >> 2] | 0;
    i52 = i49;
    break;
   }
   i29 = f50 < Math_fround(1.0) & 1;
   i15 = i23 + 6716 | 0;
   i30 = HEAPU8[i15 >> 0] & i29;
   i29 = i30 & 255;
   HEAP8[i15 >> 0] = i29;
   if (!i30) i1 = 228; else if (!(HEAP32[i23 + 6644 >> 2] | 0)) i1 = 228; else {
    i53 = 0;
    i54 = 1;
   }
   do if ((i1 | 0) == 228) {
    if (i29 << 24 >> 24) {
     i53 = 0;
     i54 = 0;
     break;
    }
    i53 = HEAP32[i5 >> 2] | 0;
    i54 = 0;
   } while (0);
   HEAP32[i5 >> 2] = 0;
   i45 = i54;
   i46 = i53;
   break L370;
  } else {
   i51 = i43;
   i52 = i23;
  } while (0);
  if ((i51 | 0) != 3) {
   i45 = 0;
   i46 = 0;
   break;
  }
  i43 = i23 + 6712 | 0;
  f38 = Math_fround(HEAPF32[i43 >> 2]);
  f21 = Math_fround(Math_fround(Math_fround(HEAPF32[i40 >> 2]) + Math_fround(-.150000006)) / Math_fround(.0399999991));
  i44 = f21 < Math_fround(0.0);
  i29 = f21 > Math_fround(1.0);
  f17 = i29 ? Math_fround(1.0) : f21;
  f21 = i44 ? Math_fround(0.0) : f17;
  HEAPF32[i43 >> 2] = f38 >= f21 ? f38 : f21;
  i43 = HEAP32[i52 + 48 >> 2] | 0;
  do if ((i43 | 0) > -1) {
   if ((i43 | 0) >= 512) ___assert_fail(32321, 31803, 4844, 32415);
   f21 = Math_fround(HEAPF32[i52 + 1092 + (i43 << 2) >> 2]);
   if (!(f21 == Math_fround(0.0))) {
    f38 = Math_fround(HEAPF32[i52 + 132 >> 2]);
    if (!(f21 > f38)) break;
    f17 = Math_fround(HEAPF32[i52 + 136 >> 2]);
    if (f21 <= f38 | f17 <= Math_fround(0.0)) break;
    if ((~~Math_fround(Math_fround(f21 - f38) / f17) | 0) <= (~~Math_fround(Math_fround(Math_fround(f21 - Math_fround(HEAPF32[i52 + 20 >> 2])) - f38) / f17) | 0)) break;
   }
   __ZL33NavUpdateWindowingHighlightWindowi(HEAP8[i23 + 238 >> 0] | 0 ? 1 : -1);
  } while (0);
  if (HEAP8[i23 + 237 >> 0] | 0) {
   i45 = 0;
   i46 = 0;
   break;
  }
  i45 = 0;
  i46 = HEAP32[i5 >> 2] | 0;
 } while (0);
 if (!(HEAP32[i23 + 6420 >> 2] | 0)) i1 = 246; else if (!(HEAP8[i23 + 6434 >> 0] | 0)) i55 = i45; else i1 = 246;
 do if ((i1 | 0) == 246) {
  i52 = HEAP32[1460598] | 0;
  if (!(Math_fround(HEAPF32[i52 + 5252 >> 2]) < Math_fround(0.0))) {
   i55 = i45;
   break;
  }
  if (!(Math_fround(HEAPF32[i52 + 5336 >> 2]) >= Math_fround(0.0))) {
   i55 = i45;
   break;
  }
  if (!(Math_fround(HEAPF32[i23 + 212 >> 2]) >= Math_fround(-256.0e3))) i56 = 0; else i56 = Math_fround(HEAPF32[i23 + 216 >> 2]) >= Math_fround(-256.0e3);
  if (!(Math_fround(HEAPF32[i23 + 904 >> 2]) >= Math_fround(-256.0e3))) i57 = 0; else i57 = Math_fround(HEAPF32[i23 + 908 >> 2]) >= Math_fround(-256.0e3);
  i55 = i45 | i56 ^ i57 ^ 1;
 } while (0);
 i57 = HEAP32[i5 >> 2] | 0;
 do if (i57 | 0) {
  i56 = HEAP32[i57 + 8 >> 2] | 0;
  if (i56 & 4 | 0) break;
  L428 : do switch (HEAP32[i23 + 6680 >> 2] | 0) {
  case 3:
   {
    if (HEAP8[i23 + 238 >> 0] | 0) {
     f58 = Math_fround(0.0);
     f59 = Math_fround(0.0);
     break L428;
    }
    i45 = HEAP32[1460598] | 0;
    f58 = Math_fround(Math_fround(Math_fround(HEAPF32[i45 + 860 >> 2]) - Math_fround(HEAPF32[i45 + 856 >> 2])) + Math_fround(0.0));
    f59 = Math_fround(Math_fround(Math_fround(HEAPF32[i45 + 868 >> 2]) - Math_fround(HEAPF32[i45 + 864 >> 2])) + Math_fround(0.0));
    break;
   }
  case 4:
   {
    i45 = HEAP32[1460598] | 0;
    f58 = Math_fround(Math_fround(Math_fround(HEAPF32[i45 + 824 >> 2]) - Math_fround(HEAPF32[i45 + 820 >> 2])) + Math_fround(0.0));
    f59 = Math_fround(Math_fround(Math_fround(HEAPF32[i45 + 832 >> 2]) - Math_fround(HEAPF32[i45 + 828 >> 2])) + Math_fround(0.0));
    break;
   }
  default:
   {
    f58 = Math_fround(0.0);
    f59 = Math_fround(0.0);
   }
  } while (0);
  if (!(f58 != Math_fround(0.0) | f59 != Math_fround(0.0))) break;
  f50 = Math_fround(Math_fround(HEAPF32[i4 >> 2]) * Math_fround(800.0));
  f48 = Math_fround(HEAPF32[i23 + 160 >> 2]);
  f20 = Math_fround(HEAPF32[i23 + 164 >> 2]);
  f47 = Math_fround(~~Math_fround(f50 * (f48 < f20 ? f48 : f20)) | 0);
  f20 = Math_fround(f58 * f47);
  f48 = Math_fround(f59 * f47);
  i45 = i57 + 12 | 0;
  f47 = Math_fround(Math_fround(HEAPF32[i45 >> 2]) + f20);
  HEAPF32[i45 >> 2] = f47;
  i45 = i57 + 16 | 0;
  f47 = Math_fround(Math_fround(HEAPF32[i45 >> 2]) + f48);
  HEAPF32[i45 >> 2] = f47;
  HEAP8[i23 + 6731 >> 0] = 1;
  i45 = HEAP32[1460598] | 0;
  if (i56 & 256 | 0) break;
  i52 = i45 + 11052 | 0;
  if (!(Math_fround(HEAPF32[i52 >> 2]) <= Math_fround(0.0))) break;
  HEAP32[i52 >> 2] = HEAP32[i45 + 24 >> 2];
 } while (0);
 if (i46 | 0) {
  i57 = HEAP32[i23 + 6644 >> 2] | 0;
  if (!i57) i1 = 266; else if ((i46 | 0) != (HEAP32[i57 + 764 >> 2] | 0)) i1 = 266;
  do if ((i1 | 0) == 266) {
   HEAP8[i23 + 6730 >> 0] = 0;
   HEAP8[i23 + 6731 >> 0] = 1;
   i57 = HEAP32[i46 + 772 >> 2] | 0;
   i4 = (i57 | 0) == 0 ? i46 : i57;
   __ZN5ImGui21ClosePopupsOverWindowEP11ImGuiWindow(i4);
   __ZN5ImGui11FocusWindowEP11ImGuiWindow(i4);
   do if (!(HEAP32[i4 + 776 >> 2] | 0)) {
    i57 = HEAP32[1460598] | 0;
    if ((HEAP32[i57 + 6644 >> 2] | 0) != (i4 | 0)) ___assert_fail(33628, 31803, 2895, 33650);
    if (HEAP32[i4 + 8 >> 2] & 262144 | 0) {
     HEAP32[i57 + 6648 >> 2] = 0;
     break;
    }
    i45 = HEAP32[i57 + 6720 >> 2] | 0;
    if (i45 >>> 0 < 2) {
     HEAP32[i57 + 6648 >> 2] = 0;
     HEAP32[i4 + 776 + (i45 << 2) >> 2] = 0;
     HEAP8[i57 + 6733 >> 0] = 1;
     HEAP8[i57 + 6734 >> 0] = 0;
     HEAP32[i57 + 6736 >> 2] = 0;
     HEAPF32[i57 + 6740 >> 2] = Math_fround(3402823469999999843913219.0e14);
     HEAPF32[i57 + 6744 >> 2] = Math_fround(3402823469999999843913219.0e14);
     HEAPF32[i57 + 6748 >> 2] = Math_fround(-3402823469999999843913219.0e14);
     HEAPF32[i57 + 6752 >> 2] = Math_fround(-3402823469999999843913219.0e14);
     HEAP8[i57 + 6732 >> 0] = 1;
     break;
    } else ___assert_fail(33664, 31803, 2163, 33697);
   } while (0);
   if ((HEAP32[i4 + 308 >> 2] | 0) != 2) break;
   HEAP32[i23 + 6720 >> 2] = 1;
  } while (0);
  HEAP32[i5 >> 2] = 0;
 }
 L458 : do if (i55) {
  i5 = i23 + 6644 | 0;
  i46 = HEAP32[i5 >> 2] | 0;
  if (!i46) break;
  i56 = HEAP32[i46 + 308 >> 2] | 0;
  do if (!(i56 & 2)) {
   i57 = i46;
   while (1) {
    if ((HEAP32[i57 + 8 >> 2] & 352321536 | 0) != 16777216) {
     i60 = i57;
     break;
    }
    i45 = HEAP32[i57 + 752 >> 2] | 0;
    if (!(HEAP32[i45 + 308 >> 2] & 2)) i57 = i45; else {
     i60 = i45;
     break;
    }
   }
   if ((i60 | 0) == (i46 | 0)) {
    i61 = i56;
    break;
   }
   __ZN5ImGui11FocusWindowEP11ImGuiWindow(i60);
   HEAP32[i60 + 772 >> 2] = i46;
   i61 = HEAP32[(HEAP32[i5 >> 2] | 0) + 308 >> 2] | 0;
  } else i61 = i56; while (0);
  HEAP8[i23 + 6730 >> 0] = 0;
  HEAP8[i23 + 6731 >> 0] = 1;
  if (!(i61 & 2)) {
   i56 = HEAP32[1460598] | 0;
   HEAP32[i56 + 6720 >> 2] = 0;
   i5 = i56 + 6644 | 0;
   i62 = HEAP32[i5 >> 2] | 0;
   i63 = i5;
   i64 = i56;
   i1 = 287;
  } else {
   i56 = HEAP32[i23 + 6720 >> 2] ^ 1;
   i5 = HEAP32[1460598] | 0;
   HEAP32[i5 + 6720 >> 2] = i56;
   i46 = i5 + 6644 | 0;
   i4 = HEAP32[i46 >> 2] | 0;
   if (!i56) {
    i62 = i4;
    i63 = i46;
    i64 = i5;
    i1 = 287;
   } else {
    i65 = i4;
    i66 = i5;
   }
  }
  do if ((i1 | 0) == 287) {
   i5 = HEAP32[i62 + 772 >> 2] | 0;
   i4 = (i5 | 0) == 0 ? i62 : i5;
   HEAP32[i63 >> 2] = i4;
   i5 = HEAP32[i4 + 776 >> 2] | 0;
   i46 = HEAP32[i64 + 6644 >> 2] | 0;
   if (!i5) {
    if ((i46 | 0) == (i4 | 0)) {
     i65 = i4;
     i66 = i64;
     break;
    }
    ___assert_fail(33628, 31803, 2895, 33650);
   }
   if (!i46) ___assert_fail(36460, 31803, 2162, 33697); else {
    i56 = i4 + 784 | 0;
    HEAP32[i64 + 6648 >> 2] = i5;
    HEAP32[i46 + 776 >> 2] = i5;
    i5 = i46 + 784 | 0;
    HEAP32[i5 >> 2] = HEAP32[i56 >> 2];
    HEAP32[i5 + 4 >> 2] = HEAP32[i56 + 4 >> 2];
    HEAP32[i5 + 8 >> 2] = HEAP32[i56 + 8 >> 2];
    HEAP32[i5 + 12 >> 2] = HEAP32[i56 + 12 >> 2];
    HEAP8[i64 + 6729 >> 0] = 1;
    HEAP8[i64 + 6730 >> 0] = 0;
    HEAP8[i64 + 6731 >> 0] = 1;
    break L458;
   }
  } while (0);
  if (HEAP32[i65 + 8 >> 2] & 262144 | 0) {
   HEAP32[i66 + 6648 >> 2] = HEAP32[i65 + 776 >> 2];
   break;
  }
  i56 = HEAP32[i66 + 6720 >> 2] | 0;
  if (i56 >>> 0 < 2) {
   HEAP32[i66 + 6648 >> 2] = 0;
   HEAP32[i65 + 776 + (i56 << 2) >> 2] = 0;
   HEAP8[i66 + 6733 >> 0] = 1;
   HEAP8[i66 + 6734 >> 0] = 0;
   HEAP32[i66 + 6736 >> 2] = 0;
   HEAPF32[i66 + 6740 >> 2] = Math_fround(3402823469999999843913219.0e14);
   HEAPF32[i66 + 6744 >> 2] = Math_fround(3402823469999999843913219.0e14);
   HEAPF32[i66 + 6748 >> 2] = Math_fround(-3402823469999999843913219.0e14);
   HEAPF32[i66 + 6752 >> 2] = Math_fround(-3402823469999999843913219.0e14);
   HEAP8[i66 + 6732 >> 0] = 1;
   break;
  } else ___assert_fail(33664, 31803, 2163, 33697);
 } while (0);
 do if (i8 | i26) {
  i66 = HEAP32[i36 >> 2] | 0;
  if (!i66) {
   i1 = 300;
   break;
  }
  i65 = HEAP32[i66 + 8 >> 2] & 262144;
  HEAP8[i13 + 877 >> 0] = i65 >>> 18 ^ 1;
  if (i65 | 0) {
   i1 = 304;
   break;
  }
  if (!(HEAP32[i13 + 6648 >> 2] | 0)) {
   i1 = 304;
   break;
  }
  if (!(HEAP8[i13 + 6730 >> 0] | 0)) i67 = 1; else i1 = 304;
 } else i1 = 300; while (0);
 if ((i1 | 0) == 300) {
  HEAP8[i13 + 877 >> 0] = 0;
  i1 = 304;
 }
 do if ((i1 | 0) == 304) {
  if (HEAP32[i13 + 6704 >> 2] | 0) {
   i67 = 1;
   break;
  }
  i67 = (HEAP8[i32 >> 0] | 0) != 0;
 } while (0);
 HEAP8[i13 + 878 >> 0] = i67 & 1;
 i67 = HEAP32[1460598] | 0;
 L499 : do if (Math_fround(HEAPF32[i67 + 5192 >> 2]) == Math_fround(0.0)) {
  if (HEAP32[i13 + 6420 >> 2] | 0) {
   i26 = i67 + 6420 | 0;
   i65 = (HEAP32[i26 >> 2] | 0) != 0;
   HEAP8[i67 + 6433 >> 0] = i65 & 1;
   if (i65) {
    HEAPF32[i67 + 6428 >> 2] = Math_fround(0.0);
    HEAP8[i67 + 6435 >> 0] = 0;
   }
   HEAP32[i26 >> 2] = 0;
   HEAP32[i67 + 6440 >> 2] = 0;
   HEAP8[i67 + 6434 >> 0] = 0;
   HEAP32[i67 + 6452 >> 2] = 0;
   break;
  }
  i26 = HEAP32[i36 >> 2] | 0;
  i65 = (i26 | 0) == 0;
  do if (!i65) {
   if ((HEAP32[i26 + 8 >> 2] & 83886080 | 0) != 16777216) break;
   i66 = HEAP32[i26 + 752 >> 2] | 0;
   if (!i66) break;
   i64 = i26 + 80 | 0;
   i63 = HEAP32[i64 >> 2] | 0;
   if (!i63) ___assert_fail(36564, 31803, 3310, 36472);
   i62 = i67 + 6644 | 0;
   if ((HEAP32[i62 >> 2] | 0) != (i66 | 0)) {
    HEAP32[i62 >> 2] = i66;
    if (HEAP8[i67 + 6731 >> 0] | 0) HEAP8[i67 + 6729 >> 0] = 1;
    HEAP8[i67 + 6733 >> 0] = 0;
    HEAP32[i67 + 6648 >> 2] = HEAP32[i66 + 776 >> 2];
    HEAP8[i67 + 6728 >> 0] = 0;
    HEAP32[i67 + 6720 >> 2] = 0;
   }
   i62 = HEAP32[i66 + 756 >> 2] | 0;
   i23 = (i62 | 0) == 0 ? i66 : i62;
   i62 = HEAP32[i23 + 8 >> 2] | 0;
   do if (i62 & 67108864 | 0) {
    i61 = i67 + 6420 | 0;
    if (!(HEAP32[i61 >> 2] | 0)) break;
    i60 = i67 + 6452 | 0;
    i55 = HEAP32[i60 >> 2] | 0;
    if (!i55) break;
    if ((HEAP32[i55 + 756 >> 2] | 0) == (i23 | 0)) break;
    HEAP8[i67 + 6433 >> 0] = 1;
    HEAPF32[i67 + 6428 >> 2] = Math_fround(0.0);
    HEAP8[i67 + 6435 >> 0] = 0;
    HEAP32[i61 >> 2] = 0;
    HEAP32[i67 + 6440 >> 2] = 0;
    HEAP8[i67 + 6434 >> 0] = 0;
    HEAP32[i60 >> 2] = 0;
   } while (0);
   do if (!(i62 & 8192)) {
    __ZN5ImGui18BringWindowToFrontEP11ImGuiWindow(i23);
    i60 = HEAP32[1460598] | 0;
    i61 = HEAP32[i60 + 6644 >> 2] | 0;
    if (i61 | 0) {
     i68 = i60;
     i69 = HEAP32[i64 >> 2] | 0;
     i70 = i61;
     break;
    }
    ___assert_fail(36460, 31803, 2162, 33697);
   } else {
    i68 = i67;
    i69 = i63;
    i70 = i66;
   } while (0);
   HEAP32[i68 + 6648 >> 2] = i69;
   HEAP32[i70 + 776 >> 2] = i69;
   HEAP8[i39 >> 0] = 0;
   if (!(HEAP8[i13 + 6731 >> 0] | 0)) break L499;
   HEAP8[i33 >> 0] = 1;
   break L499;
  } while (0);
  i66 = HEAP32[i13 + 6512 >> 2] | 0;
  if ((i66 | 0) > 0) {
   i63 = i66 + -1 | 0;
   if (HEAP32[(HEAP32[(HEAP32[i13 + 6520 >> 2] | 0) + (i63 * 36 | 0) + 4 >> 2] | 0) + 8 >> 2] & 134217728 | 0) break;
   __ZL17ClosePopupToLeveli(i63);
   break;
  }
  if (!(HEAP32[i24 >> 2] | 0)) {
   do if (!i65) {
    if ((HEAP32[i26 + 8 >> 2] & 83886080 | 0) == 16777216) break;
    HEAP32[i26 + 776 >> 2] = 0;
   } while (0);
   HEAP32[i13 + 6648 >> 2] = 0;
   break;
  }
  HEAP32[i67 + 6720 >> 2] = 0;
  i26 = i67 + 6644 | 0;
  i65 = HEAP32[i26 >> 2] | 0;
  i63 = HEAP32[i65 + 772 >> 2] | 0;
  i66 = (i63 | 0) == 0 ? i65 : i63;
  HEAP32[i26 >> 2] = i66;
  i26 = i66 + 776 | 0;
  i63 = HEAP32[i26 >> 2] | 0;
  if (!i63) {
   i65 = (HEAP32[i66 + 8 >> 2] & 262144 | 0) == 0;
   HEAP32[i67 + 6648 >> 2] = 0;
   if (!i65) break;
   HEAP32[i26 >> 2] = 0;
   HEAP8[i67 + 6733 >> 0] = 1;
   HEAP8[i67 + 6734 >> 0] = 0;
   HEAP32[i67 + 6736 >> 2] = 0;
   HEAPF32[i67 + 6740 >> 2] = Math_fround(3402823469999999843913219.0e14);
   HEAPF32[i67 + 6744 >> 2] = Math_fround(3402823469999999843913219.0e14);
   HEAPF32[i67 + 6748 >> 2] = Math_fround(-3402823469999999843913219.0e14);
   HEAPF32[i67 + 6752 >> 2] = Math_fround(-3402823469999999843913219.0e14);
   HEAP8[i67 + 6732 >> 0] = 1;
   break;
  }
  if (!i66) ___assert_fail(36460, 31803, 2162, 33697); else {
   HEAP32[i67 + 6648 >> 2] = i63;
   HEAP32[i26 >> 2] = i63;
   HEAP8[i67 + 6729 >> 0] = 1;
   HEAP8[i67 + 6730 >> 0] = 0;
   HEAP8[i67 + 6731 >> 0] = 1;
   break;
  }
 } while (0);
 i67 = i13 + 6664 | 0;
 i33 = i13 + 6660 | 0;
 i39 = i13 + 6656 | 0;
 i69 = i13 + 6652 | 0;
 i70 = i13 + 6648 | 0;
 HEAP32[i69 >> 2] = 0;
 HEAP32[i69 + 4 >> 2] = 0;
 HEAP32[i69 + 8 >> 2] = 0;
 HEAP32[i69 + 12 >> 2] = 0;
 i68 = HEAP32[i70 >> 2] | 0;
 i63 = (i68 | 0) == 0;
 L551 : do if (i63) {
  i71 = 0;
  i72 = 0;
  i1 = 365;
 } else {
  if (HEAP8[i13 + 6730 >> 0] | 0) {
   i71 = 0;
   i72 = 0;
   i1 = 365;
   break;
  }
  if (HEAP32[i13 + 6704 >> 2] | 0) {
   i71 = 0;
   i72 = 0;
   i1 = 365;
   break;
  }
  i26 = HEAP32[i36 >> 2] | 0;
  if (!i26) {
   i73 = 0;
   break;
  }
  if (HEAP32[i26 + 8 >> 2] & 262144 | 0) {
   i71 = 0;
   i72 = 0;
   i1 = 365;
   break;
  }
  i26 = HEAP32[1460598] | 0;
  i66 = Math_fround(HEAPF32[i26 + 788 >> 2]) > Math_fround(0.0);
  do if (i66) {
   f59 = Math_fround(HEAPF32[i26 + 5188 >> 2]);
   i65 = f59 < Math_fround(0.0);
   i64 = f59 == Math_fround(0.0);
   f59 = i64 ? Math_fround(1.0) : Math_fround(0.0);
   i64 = (i65 ? Math_fround(0.0) : f59) > Math_fround(0.0);
   i65 = HEAP32[i13 + 6420 >> 2] | 0;
   i23 = i64 ^ 1;
   if ((i65 | 0) != 0 | i23) {
    i74 = i23;
    i75 = i65;
    i76 = i64;
    i1 = 353;
    break;
   }
   HEAP32[i69 >> 2] = i68;
   HEAP32[i39 >> 2] = i68;
   if (i64) {
    i77 = i68;
    i78 = i68;
    i1 = 360;
   } else {
    i79 = i68;
    i80 = i68;
   }
  } else {
   i74 = 1;
   i75 = HEAP32[i13 + 6420 >> 2] | 0;
   i76 = 0;
   i1 = 353;
  } while (0);
  do if ((i1 | 0) == 353) {
   if (!i75) if (i66) {
    HEAP32[i39 >> 2] = i68;
    if (i76) {
     i77 = i68;
     i78 = 0;
     i1 = 360;
     break;
    } else {
     i79 = i68;
     i80 = 0;
     break;
    }
   } else if (i76) {
    i77 = 0;
    i78 = 0;
    i1 = 360;
    break;
   } else {
    i79 = 0;
    i80 = 0;
    break;
   }
   i64 = (i75 | 0) != (i68 | 0);
   if (i64 | i66 ^ 1) i81 = 0; else {
    HEAP32[i39 >> 2] = i68;
    i81 = i68;
   }
   if (!(i74 | i64)) HEAP32[i33 >> 2] = i68;
   if ((i75 | 0) == (i68 | 0)) {
    i79 = i81;
    i80 = 0;
   } else {
    i71 = 0;
    i72 = i81;
    i1 = 365;
    break L551;
   }
  } while (0);
  if ((i1 | 0) == 360) {
   HEAP32[i33 >> 2] = i68;
   i79 = i77;
   i80 = i78;
  }
  if (!(Math_fround(HEAPF32[i26 + 5196 >> 2]) == Math_fround(0.0))) {
   i71 = i80;
   i72 = i79;
   i1 = 365;
   break;
  }
  HEAP32[i67 >> 2] = i68;
  i71 = i80;
  i72 = i79;
  i1 = 365;
 } while (0);
 do if ((i1 | 0) == 365) {
  i79 = HEAP32[i36 >> 2] | 0;
  do if (!i79) i82 = 0; else {
   if (!(HEAP32[i79 + 8 >> 2] & 262144)) {
    i82 = i79;
    break;
   }
   HEAP8[i13 + 6730 >> 0] = 1;
   i82 = i79;
  } while (0);
  if ((i71 | 0) == 0 | (i72 | 0) == (i71 | 0)) {
   i73 = i82;
   break;
  }
  ___assert_fail(36591, 31803, 3355, 36472);
 } while (0);
 HEAP8[i9 >> 0] = 0;
 i82 = i13 + 6676 | 0;
 i71 = HEAP32[i82 >> 2] | 0;
 if (i71 | 0) {
  HEAP32[i67 >> 2] = i71;
  HEAP32[i33 >> 2] = i71;
  HEAP32[i39 >> 2] = i71;
  HEAP32[i69 >> 2] = i71;
 }
 HEAP32[i82 >> 2] = 0;
 if (!(HEAP32[i13 + 6420 >> 2] | 0)) i83 = -1; else i83 = HEAP32[i13 + 6440 >> 2] | 0;
 i82 = HEAP32[i37 >> 2] | 0;
 i71 = i13 + 6768 | 0;
 do if (!i82) {
  HEAP32[i71 >> 2] = -1;
  HEAP32[i13 + 6760 >> 2] = 0;
  do if (!i73) i84 = -1; else {
   if (!((i83 | 0) != 0 & (HEAP32[i13 + 6704 >> 2] | 0) == 0)) {
    i84 = -1;
    break;
   }
   if (HEAP32[i73 + 8 >> 2] & 262144 | 0) {
    i84 = -1;
    break;
   }
   do if (!(i83 & 1)) i85 = -1; else {
    i69 = HEAP32[1460598] | 0;
    f59 = Math_fround(HEAPF32[i69 + 5204 >> 2]);
    do if (f59 < Math_fround(0.0)) f86 = Math_fround(0.0); else {
     f58 = Math_fround(f59 - Math_fround(HEAPF32[i69 + 20 >> 2]));
     f47 = Math_fround(Math_fround(HEAPF32[i69 + 132 >> 2]) * Math_fround(.800000011));
     f48 = Math_fround(Math_fround(HEAPF32[i69 + 136 >> 2]) * Math_fround(.800000011));
     if (f59 == Math_fround(0.0)) {
      f86 = Math_fround(1.0);
      break;
     }
     if (f59 <= f47 | f48 <= Math_fround(0.0)) {
      f86 = Math_fround(0.0);
      break;
     }
     i39 = ~~Math_fround(Math_fround(f59 - f47) / f48) - ~~Math_fround(Math_fround(f58 - f47) / f48) | 0;
     f86 = Math_fround(((i39 | 0) > 0 ? i39 : 0) | 0);
    } while (0);
    f59 = Math_fround(HEAPF32[i69 + 5256 >> 2]);
    do if (f59 < Math_fround(0.0)) f87 = Math_fround(0.0); else {
     f48 = Math_fround(f59 - Math_fround(HEAPF32[i69 + 20 >> 2]));
     f47 = Math_fround(Math_fround(HEAPF32[i69 + 132 >> 2]) * Math_fround(.800000011));
     f58 = Math_fround(Math_fround(HEAPF32[i69 + 136 >> 2]) * Math_fround(.800000011));
     if (f59 == Math_fround(0.0)) {
      f87 = Math_fround(1.0);
      break;
     }
     if (f59 <= f47 | f58 <= Math_fround(0.0)) {
      f87 = Math_fround(0.0);
      break;
     }
     i14 = ~~Math_fround(Math_fround(f59 - f47) / f58) - ~~Math_fround(Math_fround(f48 - f47) / f58) | 0;
     f87 = Math_fround(((i14 | 0) > 0 ? i14 : 0) | 0);
    } while (0);
    if (!(Math_fround(f86 + f87) > Math_fround(0.0))) {
     i85 = -1;
     break;
    }
    HEAP32[i71 >> 2] = 0;
    i85 = 0;
   } while (0);
   do if (!(i83 & 2)) i88 = i85; else {
    i69 = HEAP32[1460598] | 0;
    f59 = Math_fround(HEAPF32[i69 + 5208 >> 2]);
    do if (f59 < Math_fround(0.0)) f89 = Math_fround(0.0); else {
     f58 = Math_fround(f59 - Math_fround(HEAPF32[i69 + 20 >> 2]));
     f47 = Math_fround(Math_fround(HEAPF32[i69 + 132 >> 2]) * Math_fround(.800000011));
     f48 = Math_fround(Math_fround(HEAPF32[i69 + 136 >> 2]) * Math_fround(.800000011));
     if (f59 == Math_fround(0.0)) {
      f89 = Math_fround(1.0);
      break;
     }
     if (f59 <= f47 | f48 <= Math_fround(0.0)) {
      f89 = Math_fround(0.0);
      break;
     }
     i14 = ~~Math_fround(Math_fround(f59 - f47) / f48) - ~~Math_fround(Math_fround(f58 - f47) / f48) | 0;
     f89 = Math_fround(((i14 | 0) > 0 ? i14 : 0) | 0);
    } while (0);
    f59 = Math_fround(HEAPF32[i69 + 5260 >> 2]);
    do if (f59 < Math_fround(0.0)) f90 = Math_fround(0.0); else {
     f48 = Math_fround(f59 - Math_fround(HEAPF32[i69 + 20 >> 2]));
     f47 = Math_fround(Math_fround(HEAPF32[i69 + 132 >> 2]) * Math_fround(.800000011));
     f58 = Math_fround(Math_fround(HEAPF32[i69 + 136 >> 2]) * Math_fround(.800000011));
     if (f59 == Math_fround(0.0)) {
      f90 = Math_fround(1.0);
      break;
     }
     if (f59 <= f47 | f58 <= Math_fround(0.0)) {
      f90 = Math_fround(0.0);
      break;
     }
     i14 = ~~Math_fround(Math_fround(f59 - f47) / f58) - ~~Math_fround(Math_fround(f48 - f47) / f58) | 0;
     f90 = Math_fround(((i14 | 0) > 0 ? i14 : 0) | 0);
    } while (0);
    if (!(Math_fround(f89 + f90) > Math_fround(0.0))) {
     i88 = i85;
     break;
    }
    HEAP32[i71 >> 2] = 1;
    i88 = 1;
   } while (0);
   do if (!(i83 & 4)) i91 = i88; else {
    i69 = HEAP32[1460598] | 0;
    f59 = Math_fround(HEAPF32[i69 + 5212 >> 2]);
    do if (f59 < Math_fround(0.0)) f92 = Math_fround(0.0); else {
     f58 = Math_fround(f59 - Math_fround(HEAPF32[i69 + 20 >> 2]));
     f47 = Math_fround(Math_fround(HEAPF32[i69 + 132 >> 2]) * Math_fround(.800000011));
     f48 = Math_fround(Math_fround(HEAPF32[i69 + 136 >> 2]) * Math_fround(.800000011));
     if (f59 == Math_fround(0.0)) {
      f92 = Math_fround(1.0);
      break;
     }
     if (f59 <= f47 | f48 <= Math_fround(0.0)) {
      f92 = Math_fround(0.0);
      break;
     }
     i14 = ~~Math_fround(Math_fround(f59 - f47) / f48) - ~~Math_fround(Math_fround(f58 - f47) / f48) | 0;
     f92 = Math_fround(((i14 | 0) > 0 ? i14 : 0) | 0);
    } while (0);
    f59 = Math_fround(HEAPF32[i69 + 5264 >> 2]);
    do if (f59 < Math_fround(0.0)) f93 = Math_fround(0.0); else {
     f48 = Math_fround(f59 - Math_fround(HEAPF32[i69 + 20 >> 2]));
     f47 = Math_fround(Math_fround(HEAPF32[i69 + 132 >> 2]) * Math_fround(.800000011));
     f58 = Math_fround(Math_fround(HEAPF32[i69 + 136 >> 2]) * Math_fround(.800000011));
     if (f59 == Math_fround(0.0)) {
      f93 = Math_fround(1.0);
      break;
     }
     if (f59 <= f47 | f58 <= Math_fround(0.0)) {
      f93 = Math_fround(0.0);
      break;
     }
     i14 = ~~Math_fround(Math_fround(f59 - f47) / f58) - ~~Math_fround(Math_fround(f48 - f47) / f58) | 0;
     f93 = Math_fround(((i14 | 0) > 0 ? i14 : 0) | 0);
    } while (0);
    if (!(Math_fround(f92 + f93) > Math_fround(0.0))) {
     i91 = i88;
     break;
    }
    HEAP32[i71 >> 2] = 2;
    i91 = 2;
   } while (0);
   if (!(i83 & 8)) {
    i84 = i91;
    break;
   }
   i69 = HEAP32[1460598] | 0;
   f59 = Math_fround(HEAPF32[i69 + 5216 >> 2]);
   do if (f59 < Math_fround(0.0)) f94 = Math_fround(0.0); else {
    f58 = Math_fround(f59 - Math_fround(HEAPF32[i69 + 20 >> 2]));
    f47 = Math_fround(Math_fround(HEAPF32[i69 + 132 >> 2]) * Math_fround(.800000011));
    f48 = Math_fround(Math_fround(HEAPF32[i69 + 136 >> 2]) * Math_fround(.800000011));
    if (f59 == Math_fround(0.0)) {
     f94 = Math_fround(1.0);
     break;
    }
    if (f59 <= f47 | f48 <= Math_fround(0.0)) {
     f94 = Math_fround(0.0);
     break;
    }
    i14 = ~~Math_fround(Math_fround(f59 - f47) / f48) - ~~Math_fround(Math_fround(f58 - f47) / f48) | 0;
    f94 = Math_fround(((i14 | 0) > 0 ? i14 : 0) | 0);
   } while (0);
   f59 = Math_fround(HEAPF32[i69 + 5268 >> 2]);
   do if (f59 < Math_fround(0.0)) f95 = Math_fround(0.0); else {
    f48 = Math_fround(f59 - Math_fround(HEAPF32[i69 + 20 >> 2]));
    f47 = Math_fround(Math_fround(HEAPF32[i69 + 132 >> 2]) * Math_fround(.800000011));
    f58 = Math_fround(Math_fround(HEAPF32[i69 + 136 >> 2]) * Math_fround(.800000011));
    if (f59 == Math_fround(0.0)) {
     f95 = Math_fround(1.0);
     break;
    }
    if (f59 <= f47 | f58 <= Math_fround(0.0)) {
     f95 = Math_fround(0.0);
     break;
    }
    i14 = ~~Math_fround(Math_fround(f59 - f47) / f58) - ~~Math_fround(Math_fround(f48 - f47) / f58) | 0;
    f95 = Math_fround(((i14 | 0) > 0 ? i14 : 0) | 0);
   } while (0);
   if (!(Math_fround(f94 + f95) > Math_fround(0.0))) {
    i84 = i91;
    break;
   }
   HEAP32[i71 >> 2] = 3;
   i84 = 3;
  } while (0);
  HEAP32[i13 + 6776 >> 2] = i84;
  i96 = i84;
 } else {
  i69 = HEAP32[i71 >> 2] | 0;
  if ((i69 | 0) == -1) ___assert_fail(36630, 31803, 3382, 36472);
  if ((HEAP32[i13 + 6776 >> 2] | 0) == -1) ___assert_fail(36630, 31803, 3382, 36472);
  if ((i82 | 0) == 1) {
   HEAP32[i37 >> 2] = 2;
   i96 = i69;
   break;
  } else ___assert_fail(36697, 31803, 3383, 36472);
 } while (0);
 i37 = (i96 | 0) == -1;
 L665 : do if (i8) {
  if (!i37) {
   f97 = Math_fround(0.0);
   i98 = i96;
   i1 = 471;
   break;
  }
  if (!i73) {
   f99 = Math_fround(0.0);
   i100 = 0;
   i101 = 0;
   i102 = -1;
   break;
  }
  if (HEAP32[i73 + 8 >> 2] & 262144 | 0) {
   f99 = Math_fround(0.0);
   i100 = i73;
   i101 = 0;
   i102 = -1;
   break;
  }
  if (HEAP32[i13 + 6704 >> 2] | 0) {
   f99 = Math_fround(0.0);
   i100 = i73;
   i101 = 0;
   i102 = -1;
   break;
  }
  if (HEAP32[i24 >> 2] | 0) {
   f99 = Math_fround(0.0);
   i100 = i73;
   i101 = 0;
   i102 = -1;
   break;
  }
  i82 = HEAP32[i13 + 68 >> 2] | 0;
  i84 = (i82 | 0) < 0;
  do if (i84) i103 = 0; else if ((i82 | 0) < 512) {
   i103 = i83 & 4 | 0 ? (HEAP8[(HEAP32[1460598] | 0) + 241 + i82 >> 0] | 0) != 0 : 0;
   break;
  } else ___assert_fail(36344, 31803, 4817, 36450); while (0);
  i91 = HEAP32[i13 + 72 >> 2] | 0;
  i88 = (i91 | 0) < 0;
  do if (i88) {
   if (!i103) {
    f99 = Math_fround(0.0);
    i100 = i73;
    i101 = 0;
    i102 = -1;
    break L665;
   }
  } else if ((i91 | 0) < 512) if (i103 ^ (i83 & 8 | 0 ? (HEAP8[(HEAP32[1460598] | 0) + 241 + i91 >> 0] | 0) != 0 : 0)) break; else {
   f99 = Math_fround(0.0);
   i100 = i73;
   i101 = 0;
   i102 = -1;
   break L665;
  } else ___assert_fail(36344, 31803, 4817, 36450); while (0);
  do if (!(HEAP32[i73 + 308 >> 2] | 0)) {
   if (!(HEAP8[i73 + 297 >> 0] | 0)) break;
   i85 = HEAP32[1460598] | 0;
   do if (!i84) {
    f95 = Math_fround(HEAPF32[i85 + 1092 + (i82 << 2) >> 2]);
    if (!(f95 == Math_fround(0.0))) {
     f94 = Math_fround(HEAPF32[i85 + 132 >> 2]);
     if (!(f95 > f94)) break;
     f93 = Math_fround(HEAPF32[i85 + 136 >> 2]);
     if (f95 <= f94 | f93 <= Math_fround(0.0)) break;
     if ((~~Math_fround(Math_fround(f95 - f94) / f93) | 0) <= (~~Math_fround(Math_fround(Math_fround(f95 - Math_fround(HEAPF32[i85 + 20 >> 2])) - f94) / f93) | 0)) break;
    }
    i69 = i73 + 88 | 0;
    f93 = Math_fround(HEAPF32[i69 >> 2]);
    f94 = Math_fround(HEAPF32[i73 + 524 >> 2]);
    f95 = Math_fround(f93 - Math_fround(f94 - Math_fround(HEAPF32[i73 + 516 >> 2])));
    i14 = i73 + 224 | 0;
    f94 = Math_fround(f93 + Math_fround(HEAPF32[i14 >> 2]));
    HEAPF32[i69 >> 2] = f95;
    f93 = Math_fround(f94 - f95);
    HEAPF32[i14 >> 2] = f93;
    f99 = Math_fround(0.0);
    i100 = i73;
    i101 = 0;
    i102 = -1;
    break L665;
   } while (0);
   if (i88) {
    f99 = Math_fround(0.0);
    i100 = i73;
    i101 = 0;
    i102 = -1;
    break L665;
   }
   f93 = Math_fround(HEAPF32[i85 + 1092 + (i91 << 2) >> 2]);
   if (!(f93 == Math_fround(0.0))) {
    f95 = Math_fround(HEAPF32[i85 + 132 >> 2]);
    if (!(f93 > f95)) {
     f99 = Math_fround(0.0);
     i100 = i73;
     i101 = 0;
     i102 = -1;
     break L665;
    }
    f94 = Math_fround(HEAPF32[i85 + 136 >> 2]);
    if (f93 <= f95 | f94 <= Math_fround(0.0)) {
     f99 = Math_fround(0.0);
     i100 = i73;
     i101 = 0;
     i102 = -1;
     break L665;
    }
    if ((~~Math_fround(Math_fround(f93 - f95) / f94) | 0) <= (~~Math_fround(Math_fround(Math_fround(f93 - Math_fround(HEAPF32[i85 + 20 >> 2])) - f95) / f94) | 0)) {
     f99 = Math_fround(0.0);
     i100 = i73;
     i101 = 0;
     i102 = -1;
     break L665;
    }
   }
   i14 = i73 + 88 | 0;
   f94 = Math_fround(HEAPF32[i14 >> 2]);
   f95 = Math_fround(HEAPF32[i73 + 524 >> 2]);
   f93 = Math_fround(f94 + Math_fround(f95 - Math_fround(HEAPF32[i73 + 516 >> 2])));
   i69 = i73 + 224 | 0;
   f95 = Math_fround(f94 + Math_fround(HEAPF32[i69 >> 2]));
   HEAPF32[i14 >> 2] = f93;
   f94 = Math_fround(f95 - f93);
   HEAPF32[i69 >> 2] = f94;
   f99 = Math_fround(0.0);
   i100 = i73;
   i101 = 0;
   i102 = -1;
   break L665;
  } while (0);
  f94 = Math_fround(HEAPF32[i73 + 524 >> 2]);
  f93 = Math_fround(f94 - Math_fround(HEAPF32[i73 + 516 >> 2]));
  i69 = HEAP32[1460598] | 0;
  f94 = Math_fround(HEAPF32[i69 + 6188 >> 2]);
  f95 = Math_fround(f93 - Math_fround(f94 * Math_fround(HEAPF32[i73 + 624 >> 2])));
  f94 = Math_fround(HEAPF32[i73 + 796 >> 2]);
  f93 = Math_fround(f95 + Math_fround(f94 - Math_fround(HEAPF32[i73 + 788 >> 2])));
  i14 = f93 <= Math_fround(0.0);
  f94 = i14 ? Math_fround(0.0) : f93;
  do if (i84) i1 = 464; else {
   f93 = Math_fround(HEAPF32[i69 + 1092 + (i82 << 2) >> 2]);
   if (!(f93 == Math_fround(0.0))) {
    f95 = Math_fround(HEAPF32[i69 + 132 >> 2]);
    if (!(f93 > f95)) {
     i1 = 464;
     break;
    }
    f92 = Math_fround(HEAPF32[i69 + 136 >> 2]);
    if (f93 <= f95 | f92 <= Math_fround(0.0)) {
     i1 = 464;
     break;
    }
    if ((~~Math_fround(Math_fround(f93 - f95) / f92) | 0) <= (~~Math_fround(Math_fround(Math_fround(f93 - Math_fround(HEAPF32[i69 + 20 >> 2])) - f95) / f92) | 0)) {
     i1 = 464;
     break;
    }
   }
   f104 = Math_fround(-f94);
   i105 = 2;
   i106 = 3;
  } while (0);
  do if ((i1 | 0) == 464) {
   if (i88) {
    f99 = Math_fround(0.0);
    i100 = i73;
    i101 = 0;
    i102 = -1;
    break L665;
   }
   f92 = Math_fround(HEAPF32[i69 + 1092 + (i91 << 2) >> 2]);
   if (f92 == Math_fround(0.0)) {
    f104 = f94;
    i105 = 3;
    i106 = 2;
    break;
   }
   f95 = Math_fround(HEAPF32[i69 + 132 >> 2]);
   if (!(f92 > f95)) {
    f99 = Math_fround(0.0);
    i100 = i73;
    i101 = 0;
    i102 = -1;
    break L665;
   }
   f93 = Math_fround(HEAPF32[i69 + 136 >> 2]);
   if (f92 <= f95 | f93 <= Math_fround(0.0)) {
    f99 = Math_fround(0.0);
    i100 = i73;
    i101 = 0;
    i102 = -1;
    break L665;
   }
   if ((~~Math_fround(Math_fround(f92 - f95) / f93) | 0) > (~~Math_fround(Math_fround(Math_fround(f92 - Math_fround(HEAPF32[i69 + 20 >> 2])) - f95) / f93) | 0)) {
    f104 = f94;
    i105 = 3;
    i106 = 2;
   } else {
    f99 = Math_fround(0.0);
    i100 = i73;
    i101 = 0;
    i102 = -1;
    break L665;
   }
  } while (0);
  HEAP32[i71 >> 2] = i106;
  HEAP32[i13 + 6776 >> 2] = i105;
  HEAP32[i13 + 6760 >> 2] = 48;
  f97 = f104;
  i98 = i106;
  i1 = 471;
 } else if (i37) {
  f99 = Math_fround(0.0);
  i100 = i73;
  i101 = 0;
  i102 = -1;
 } else {
  f97 = Math_fround(0.0);
  i98 = i96;
  i1 = 471;
 } while (0);
 do if ((i1 | 0) == 471) {
  HEAP8[i9 >> 0] = 1;
  HEAP32[i13 + 6772 >> 2] = i98;
  if (!i63) {
   f99 = f97;
   i100 = i73;
   i101 = 1;
   i102 = i98;
   break;
  }
  HEAP8[i28 >> 0] = 1;
  HEAP8[i32 >> 0] = 1;
  HEAP32[i11 >> 2] = 0;
  HEAP8[i13 + 6730 >> 0] = 0;
  f99 = f97;
  i100 = i73;
  i101 = 1;
  i102 = i98;
 } while (0);
 i98 = HEAP32[1460598] | 0;
 if (!(HEAP8[i98 + 6757 >> 0] | 0)) {
  i11 = HEAP8[i98 + 6733 >> 0] | 0;
  HEAP8[i98 + 6732 >> 0] = i11;
  if (i11 << 24 >> 24) i1 = 476;
 } else {
  HEAP8[i98 + 6732 >> 0] = 1;
  i1 = 476;
 }
 do if ((i1 | 0) == 476) {
  if (HEAP32[i98 + 6644 >> 2] | 0) break;
  ___assert_fail(34237, 31803, 2509, 34255);
 } while (0);
 do if (!i100) i107 = 0; else {
  if (HEAP32[i100 + 8 >> 2] & 262144 | 0) {
   i107 = i100;
   break;
  }
  if (HEAP32[i13 + 6704 >> 2] | 0) {
   i107 = i100;
   break;
  }
  f97 = Math_fround(HEAPF32[i98 + 6188 >> 2]);
  f104 = Math_fround(Math_fround(f97 * Math_fround(HEAPF32[i100 + 624 >> 2])) * Math_fround(100.0));
  f97 = Math_fround(~~Math_fround(Math_fround(Math_fround(HEAPF32[i10 >> 2]) * f104) + Math_fround(.5)) | 0);
  do if (!(HEAP32[i100 + 308 >> 2] | 0)) {
   if (i101 << 24 >> 24 == 0 | (HEAP8[i100 + 297 >> 0] | 0) == 0) break;
   if (i102 >>> 0 < 2) {
    i11 = i100 + 84 | 0;
    f104 = Math_fround(HEAPF32[i11 >> 2]);
    f94 = Math_fround(~~Math_fround(Math_fround(((i102 | 0) == 0 ? Math_fround(-1.0) : Math_fround(1.0)) * f97) + f104) | 0);
    i32 = i100 + 220 | 0;
    f93 = Math_fround(f104 + Math_fround(HEAPF32[i32 >> 2]));
    HEAPF32[i11 >> 2] = f94;
    f104 = Math_fround(f93 - f94);
    HEAPF32[i32 >> 2] = f104;
   }
   if ((i102 & -2 | 0) != 2) break;
   i32 = i100 + 88 | 0;
   f104 = Math_fround(HEAPF32[i32 >> 2]);
   f94 = Math_fround(~~Math_fround(Math_fround(((i102 | 0) == 2 ? Math_fround(-1.0) : Math_fround(1.0)) * f97) + f104) | 0);
   i11 = i100 + 224 | 0;
   f93 = Math_fround(f104 + Math_fround(HEAPF32[i11 >> 2]));
   HEAPF32[i32 >> 2] = f94;
   f104 = Math_fround(f93 - f94);
   HEAPF32[i11 >> 2] = f104;
  } while (0);
  f104 = Math_fround(HEAPF32[i98 + 824 >> 2]);
  f94 = Math_fround(f104 - Math_fround(HEAPF32[i98 + 820 >> 2]));
  f104 = Math_fround(HEAPF32[i98 + 832 >> 2]);
  f93 = Math_fround(f94 + Math_fround(0.0));
  f94 = Math_fround(Math_fround(f104 - Math_fround(HEAPF32[i98 + 828 >> 2])) + Math_fround(0.0));
  i11 = Math_fround(HEAPF32[i98 + 844 >> 2]) > Math_fround(0.0);
  f104 = Math_fround(f93 * Math_fround(.100000001));
  f95 = Math_fround(f94 * Math_fround(.100000001));
  f92 = i11 ? f104 : f93;
  f93 = i11 ? f95 : f94;
  i11 = Math_fround(HEAPF32[i98 + 848 >> 2]) > Math_fround(0.0);
  f94 = Math_fround(f92 * Math_fround(10.0));
  f95 = Math_fround(f93 * Math_fround(10.0));
  f104 = i11 ? f94 : f92;
  f92 = i11 ? f95 : f93;
  do if (f104 != Math_fround(0.0)) {
   if (!(HEAP8[i100 + 116 >> 0] | 0)) break;
   i11 = i100 + 84 | 0;
   f93 = Math_fround(HEAPF32[i11 >> 2]);
   f95 = Math_fround(~~Math_fround(Math_fround(f104 * f97) + f93) | 0);
   i32 = i100 + 220 | 0;
   f94 = Math_fround(f93 + Math_fround(HEAPF32[i32 >> 2]));
   HEAPF32[i11 >> 2] = f95;
   f93 = Math_fround(f94 - f95);
   HEAPF32[i32 >> 2] = f93;
   HEAP8[i13 + 6756 >> 0] = 1;
  } while (0);
  if (!(f92 != Math_fround(0.0))) {
   i107 = i100;
   break;
  }
  i32 = i100 + 88 | 0;
  f104 = Math_fround(HEAPF32[i32 >> 2]);
  f93 = Math_fround(~~Math_fround(Math_fround(f92 * f97) + f104) | 0);
  i11 = i100 + 224 | 0;
  f95 = Math_fround(f104 + Math_fround(HEAPF32[i11 >> 2]));
  HEAPF32[i32 >> 2] = f93;
  f104 = Math_fround(f95 - f93);
  HEAPF32[i11 >> 2] = f104;
  HEAP8[i13 + 6756 >> 0] = 1;
  i107 = i100;
 } while (0);
 HEAP32[i13 + 6780 >> 2] = 0;
 HEAP32[i13 + 6784 >> 2] = 0;
 HEAPF32[i13 + 6796 >> 2] = Math_fround(3402823469999999843913219.0e14);
 HEAPF32[i13 + 6792 >> 2] = Math_fround(3402823469999999843913219.0e14);
 HEAPF32[i13 + 6788 >> 2] = Math_fround(3402823469999999843913219.0e14);
 HEAPF32[i13 + 6800 >> 2] = Math_fround(3402823469999999843913219.0e14);
 HEAPF32[i13 + 6804 >> 2] = Math_fround(3402823469999999843913219.0e14);
 HEAPF32[i13 + 6808 >> 2] = Math_fround(-3402823469999999843913219.0e14);
 HEAPF32[i13 + 6812 >> 2] = Math_fround(-3402823469999999843913219.0e14);
 HEAP32[i13 + 6816 >> 2] = 0;
 HEAP32[i13 + 6820 >> 2] = 0;
 HEAPF32[i13 + 6832 >> 2] = Math_fround(3402823469999999843913219.0e14);
 HEAPF32[i13 + 6828 >> 2] = Math_fround(3402823469999999843913219.0e14);
 HEAPF32[i13 + 6824 >> 2] = Math_fround(3402823469999999843913219.0e14);
 HEAPF32[i13 + 6836 >> 2] = Math_fround(3402823469999999843913219.0e14);
 HEAPF32[i13 + 6840 >> 2] = Math_fround(3402823469999999843913219.0e14);
 HEAPF32[i13 + 6844 >> 2] = Math_fround(-3402823469999999843913219.0e14);
 HEAPF32[i13 + 6848 >> 2] = Math_fround(-3402823469999999843913219.0e14);
 HEAP32[i13 + 6852 >> 2] = 0;
 HEAP32[i13 + 6856 >> 2] = 0;
 HEAPF32[i13 + 6868 >> 2] = Math_fround(3402823469999999843913219.0e14);
 HEAPF32[i13 + 6864 >> 2] = Math_fround(3402823469999999843913219.0e14);
 HEAPF32[i13 + 6860 >> 2] = Math_fround(3402823469999999843913219.0e14);
 HEAPF32[i13 + 6872 >> 2] = Math_fround(3402823469999999843913219.0e14);
 HEAPF32[i13 + 6876 >> 2] = Math_fround(3402823469999999843913219.0e14);
 HEAPF32[i13 + 6880 >> 2] = Math_fround(-3402823469999999843913219.0e14);
 HEAPF32[i13 + 6884 >> 2] = Math_fround(-3402823469999999843913219.0e14);
 do if (!(i101 << 24 >> 24)) i108 = i107; else {
  i100 = i13 + 6756 | 0;
  if (!(HEAP8[i100 >> 0] | 0)) {
   i108 = i107;
   break;
  }
  if (HEAP32[i24 >> 2] | 0) {
   i108 = i107;
   break;
  }
  f104 = Math_fround(HEAPF32[i107 + 496 >> 2]);
  f93 = Math_fround(HEAPF32[i107 + 12 >> 2]);
  f95 = Math_fround(f104 - f93);
  f104 = Math_fround(HEAPF32[i107 + 500 >> 2]);
  f94 = Math_fround(HEAPF32[i107 + 16 >> 2]);
  f90 = Math_fround(f95 + Math_fround(-1.0));
  f95 = Math_fround(Math_fround(f104 - f94) + Math_fround(-1.0));
  f104 = Math_fround(Math_fround(HEAPF32[i107 + 504 >> 2]) - f93);
  f93 = Math_fround(f104 + Math_fround(1.0));
  f104 = Math_fround(Math_fround(Math_fround(HEAPF32[i107 + 508 >> 2]) - f94) + Math_fround(1.0));
  HEAPF32[i3 >> 2] = f90;
  i102 = i3 + 4 | 0;
  HEAPF32[i102 >> 2] = f95;
  i10 = i3 + 8 | 0;
  HEAPF32[i10 >> 2] = f93;
  i11 = i3 + 12 | 0;
  HEAPF32[i11 >> 2] = f104;
  f94 = Math_fround(HEAPF32[i107 + 784 >> 2]);
  f89 = Math_fround(HEAPF32[i107 + 788 >> 2]);
  f87 = Math_fround(HEAPF32[i107 + 792 >> 2]);
  if (!(f94 >= f90) | !(f89 >= f95) | !(f87 <= f93)) i1 = 497; else if (!(Math_fround(HEAPF32[i107 + 796 >> 2]) <= f104)) i1 = 497; else i109 = i73;
  if ((i1 | 0) == 497) {
   f86 = Math_fround(HEAPF32[i98 + 6188 >> 2]);
   f59 = Math_fround(Math_fround(f86 * Math_fround(HEAPF32[i107 + 624 >> 2])) * Math_fround(.5));
   f86 = Math_fround(f93 - f90);
   f58 = f86 < f59 ? f86 : f59;
   f86 = Math_fround(f104 - f95);
   f47 = f86 < f59 ? f86 : f59;
   f59 = Math_fround(f90 + f58);
   HEAPF32[i3 >> 2] = f59;
   f90 = Math_fround(f95 + f47);
   HEAPF32[i102 >> 2] = f90;
   f95 = Math_fround(f93 - f58);
   HEAPF32[i3 + 8 >> 2] = f95;
   f58 = Math_fround(f104 - f47);
   HEAPF32[i11 >> 2] = f58;
   i11 = i107 + 784 | 0;
   i102 = HEAP32[(f89 >= f90 ? i11 : i3) + 4 >> 2] | 0;
   i32 = i11;
   HEAP32[i32 >> 2] = HEAP32[(f94 >= f59 ? i11 : i3) >> 2];
   HEAP32[i32 + 4 >> 2] = i102;
   i102 = i107 + 792 | 0;
   i32 = Math_fround(HEAPF32[i107 + 796 >> 2]) < f58;
   i11 = HEAP32[(i32 ? i102 : i10) + 4 >> 2] | 0;
   i32 = i102;
   HEAP32[i32 >> 2] = HEAP32[(f87 < f95 ? i102 : i10) >> 2];
   HEAP32[i32 + 4 >> 2] = i11;
   HEAP32[i70 >> 2] = 0;
   i109 = HEAP32[i36 >> 2] | 0;
  }
  HEAP8[i100 >> 0] = 0;
  i108 = i109;
 } while (0);
 L757 : do if (!i108) {
  f95 = Math_fround(HEAPF32[i98 + 168 >> 2]);
  i109 = i98 + 176 | 0;
  do if (f95 != Math_fround(HEAPF32[i109 >> 2])) {
   f87 = Math_fround(HEAPF32[i98 + 172 >> 2]);
   if (!(f87 != Math_fround(HEAPF32[i98 + 180 >> 2]))) break;
   i36 = i109;
   i110 = HEAP32[i36 >> 2] | 0;
   i111 = HEAP32[i36 + 4 >> 2] | 0;
   f112 = f87;
   f113 = f95;
   break L757;
  } while (0);
  i110 = HEAP32[i98 + 12 >> 2] | 0;
  i111 = HEAP32[i98 + 16 >> 2] | 0;
  f112 = Math_fround(0.0);
  f113 = Math_fround(0.0);
 } else {
  i109 = HEAP32[i24 >> 2] | 0;
  i36 = i108 + 784 + (i109 << 4) | 0;
  f95 = Math_fround(HEAPF32[i36 >> 2]);
  f97 = Math_fround(HEAPF32[i36 + 8 >> 2]);
  do if (f95 > f97) {
   f114 = Math_fround(0.0);
   f115 = Math_fround(0.0);
   f116 = Math_fround(0.0);
   f117 = Math_fround(0.0);
  } else {
   i36 = i108 + 784 + (i109 << 4) | 0;
   f92 = Math_fround(HEAPF32[i36 + 4 >> 2]);
   f87 = Math_fround(HEAPF32[i36 + 12 >> 2]);
   if (f92 > f87) {
    f114 = Math_fround(0.0);
    f115 = Math_fround(0.0);
    f116 = Math_fround(0.0);
    f117 = Math_fround(0.0);
    break;
   }
   f114 = f95;
   f115 = f92;
   f116 = f97;
   f117 = f87;
  } while (0);
  f97 = Math_fround(HEAPF32[i108 + 12 >> 2]);
  f95 = Math_fround(f114 + f97);
  f87 = Math_fround(HEAPF32[i108 + 16 >> 2]);
  f92 = Math_fround(f115 + f87);
  f58 = Math_fround(f116 + f97);
  f97 = Math_fround(f117 + f87);
  i109 = (HEAPF32[tempDoublePtr >> 2] = f58, HEAP32[tempDoublePtr >> 2] | 0);
  i110 = i109;
  i111 = (HEAPF32[tempDoublePtr >> 2] = f97, HEAP32[tempDoublePtr >> 2] | 0);
  f112 = f92;
  f113 = f95;
 } while (0);
 f117 = Math_fround(f99 + f112);
 HEAPF32[i13 + 6688 >> 2] = f117;
 f112 = Math_fround(f99 + (HEAP32[tempDoublePtr >> 2] = i111, Math_fround(HEAPF32[tempDoublePtr >> 2])));
 HEAPF32[i13 + 6696 >> 2] = f112;
 f99 = Math_fround(f113 + Math_fround(1.0));
 f113 = (HEAP32[tempDoublePtr >> 2] = i110, Math_fround(HEAPF32[tempDoublePtr >> 2]));
 f116 = f99 < f113 ? f99 : f113;
 HEAPF32[i13 + 6684 >> 2] = f116;
 HEAPF32[i13 + 6692 >> 2] = f116;
 if (f117 > f112) ___assert_fail(36754, 31803, 3497, 36472);
 HEAP32[i13 + 6700 >> 2] = 0;
 i13 = i98 + 212 | 0;
 f112 = Math_fround(HEAPF32[i13 >> 2]);
 i110 = i98 + 216 | 0;
 do if (!(f112 >= Math_fround(-256.0e3))) i1 = 514; else {
  f117 = Math_fround(HEAPF32[i110 >> 2]);
  if (!(f117 >= Math_fround(-256.0e3))) {
   i1 = 514;
   break;
  }
  f116 = Math_fround(HEAPF32[i98 + 904 >> 2]);
  if (!(f116 >= Math_fround(-256.0e3))) {
   i1 = 514;
   break;
  }
  f113 = Math_fround(HEAPF32[i98 + 908 >> 2]);
  if (!(f113 >= Math_fround(-256.0e3))) {
   i1 = 514;
   break;
  }
  f99 = Math_fround(f112 - f116);
  f116 = Math_fround(f117 - f113);
  HEAPF32[i98 + 896 >> 2] = f99;
  HEAPF32[i98 + 900 >> 2] = f116;
  if (!(f99 != Math_fround(0.0) | f116 != Math_fround(0.0))) {
   i1 = 516;
   break;
  }
  i111 = i98 + 6731 | 0;
  HEAP8[i111 >> 0] = 0;
  i118 = i111;
 } while (0);
 if ((i1 | 0) == 514) {
  HEAPF32[i98 + 896 >> 2] = Math_fround(0.0);
  HEAPF32[i98 + 900 >> 2] = Math_fround(0.0);
  i1 = 516;
 }
 if ((i1 | 0) == 516) i118 = i98 + 6731 | 0;
 i111 = i13;
 i108 = HEAP32[i111 + 4 >> 2] | 0;
 i24 = i98 + 904 | 0;
 HEAP32[i24 >> 2] = HEAP32[i111 >> 2];
 HEAP32[i24 + 4 >> 2] = i108;
 i108 = i98 + 6324 | 0;
 i24 = i98 + 36 | 0;
 i111 = i98 + 40 | 0;
 i109 = i98 + 20 | 0;
 i36 = 0;
 do {
  i70 = i98 + 220 + i36 | 0;
  if (!(HEAP8[i70 >> 0] | 0)) {
   i107 = i98 + 972 + i36 | 0;
   HEAP8[i107 >> 0] = 0;
   i3 = i98 + 992 + (i36 << 2) | 0;
   i119 = i3;
   i120 = Math_fround(HEAPF32[i3 >> 2]) >= Math_fround(0.0);
   i121 = i107;
  } else {
   i107 = i98 + 992 + (i36 << 2) | 0;
   i3 = i98 + 972 + i36 | 0;
   i73 = Math_fround(HEAPF32[i107 >> 2]) < Math_fround(0.0) & 1;
   HEAP8[i3 >> 0] = i73;
   i119 = i107;
   i120 = 0;
   i121 = i3;
  }
  HEAP8[i98 + 982 + i36 >> 0] = i120 & 1;
  i3 = HEAP32[i119 >> 2] | 0;
  HEAP32[i98 + 1012 + (i36 << 2) >> 2] = i3;
  i107 = (HEAP8[i70 >> 0] | 0) == 0;
  f112 = (HEAP32[tempDoublePtr >> 2] = i3, Math_fround(HEAPF32[tempDoublePtr >> 2]));
  do if (i107) f122 = Math_fround(-1.0); else {
   if (f112 < Math_fround(0.0)) {
    f122 = Math_fround(0.0);
    break;
   }
   f122 = Math_fround(Math_fround(HEAPF32[i109 >> 2]) + f112);
  } while (0);
  HEAPF32[i119 >> 2] = f122;
  i3 = i98 + 977 + i36 | 0;
  HEAP8[i3 >> 0] = 0;
  do if (!(HEAP8[i121 >> 0] | 0)) {
   if (i107) break;
   f112 = Math_fround(HEAPF32[i13 >> 2]);
   do if (!(f112 >= Math_fround(-256.0e3))) {
    f123 = Math_fround(0.0);
    f124 = Math_fround(0.0);
   } else {
    f116 = Math_fround(HEAPF32[i110 >> 2]);
    if (!(f116 >= Math_fround(-256.0e3))) {
     f123 = Math_fround(0.0);
     f124 = Math_fround(0.0);
     break;
    }
    i70 = i98 + 912 + (i36 << 3) | 0;
    f99 = Math_fround(f112 - Math_fround(HEAPF32[i70 >> 2]));
    f123 = f99;
    f124 = Math_fround(f116 - Math_fround(HEAPF32[i70 + 4 >> 2]));
   } while (0);
   i85 = i98 + 1072 + (i36 << 2) | 0;
   f112 = Math_fround(HEAPF32[i85 >> 2]);
   f116 = Math_fround(Math_fround(f124 * f124) + Math_fround(f123 * f123));
   HEAPF32[i85 >> 2] = f112 >= f116 ? f112 : f116;
   i85 = i98 + 1032 + (i36 << 3) | 0;
   i70 = i85 | 0;
   f116 = Math_fround(HEAPF32[i70 >> 2]);
   i73 = f123 < Math_fround(0.0);
   f112 = Math_fround(-f123);
   f99 = i73 ? f112 : f123;
   HEAPF32[i70 >> 2] = f116 >= f99 ? f116 : f99;
   i70 = i85 + 4 | 0;
   f99 = Math_fround(HEAPF32[i70 >> 2]);
   i85 = f124 < Math_fround(0.0);
   f116 = Math_fround(-f124);
   f112 = i85 ? f116 : f124;
   HEAPF32[i70 >> 2] = f99 >= f112 ? f99 : f112;
  } else {
   f112 = Math_fround(HEAPF32[i108 >> 2]);
   i70 = i98 + 952 + (i36 << 2) | 0;
   f99 = Math_fround(f112 - Math_fround(HEAPF32[i70 >> 2]));
   do if (f99 < Math_fround(HEAPF32[i24 >> 2])) {
    f116 = Math_fround(HEAPF32[i13 >> 2]);
    do if (!(f116 >= Math_fround(-256.0e3))) {
     f125 = Math_fround(0.0);
     f126 = Math_fround(0.0);
    } else {
     f113 = Math_fround(HEAPF32[i110 >> 2]);
     if (!(f113 >= Math_fround(-256.0e3))) {
      f125 = Math_fround(0.0);
      f126 = Math_fround(0.0);
      break;
     }
     i85 = i98 + 912 + (i36 << 3) | 0;
     f117 = Math_fround(f116 - Math_fround(HEAPF32[i85 >> 2]));
     f125 = f117;
     f126 = Math_fround(f113 - Math_fround(HEAPF32[i85 + 4 >> 2]));
    } while (0);
    f116 = Math_fround(Math_fround(f125 * f125) + Math_fround(f126 * f126));
    f113 = Math_fround(HEAPF32[i111 >> 2]);
    if (!(f116 < Math_fround(f113 * f113))) {
     f127 = Math_fround(-3402823469999999843913219.0e14);
     break;
    }
    HEAP8[i3 >> 0] = 1;
    f127 = Math_fround(-3402823469999999843913219.0e14);
   } else f127 = f112; while (0);
   HEAPF32[i70 >> 2] = f127;
   i85 = i13;
   i73 = HEAP32[i85 + 4 >> 2] | 0;
   i101 = i98 + 912 + (i36 << 3) | 0;
   HEAP32[i101 >> 2] = HEAP32[i85 >> 2];
   HEAP32[i101 + 4 >> 2] = i73;
   i73 = i98 + 1032 + (i36 << 3) | 0;
   HEAP32[i73 >> 2] = 0;
   HEAP32[i73 + 4 >> 2] = 0;
   HEAPF32[i98 + 1072 + (i36 << 2) >> 2] = Math_fround(0.0);
   if (!(HEAP8[i121 >> 0] | 0)) break;
   HEAP8[i118 >> 0] = 0;
  } while (0);
  i36 = i36 + 1 | 0;
 } while ((i36 | 0) != 5);
 f127 = Math_fround(HEAPF32[i7 >> 2]);
 i36 = i6 + 11600 | 0;
 i118 = i6 + 11120 + (HEAP32[i36 >> 2] << 2) | 0;
 f126 = Math_fround(f127 - Math_fround(HEAPF32[i118 >> 2]));
 i121 = i6 + 11604 | 0;
 f125 = Math_fround(Math_fround(HEAPF32[i121 >> 2]) + f126);
 HEAPF32[i121 >> 2] = f125;
 HEAPF32[i118 >> 2] = f127;
 HEAP32[i36 >> 2] = ((HEAP32[i36 >> 2] | 0) + 1 | 0) % 120 | 0;
 f127 = Math_fround(HEAPF32[i121 >> 2]);
 if (f127 > Math_fround(0.0)) f128 = Math_fround(Math_fround(1.0) / Math_fround(f127 / Math_fround(120.0))); else f128 = Math_fround(3402823469999999843913219.0e14);
 HEAPF32[i6 + 880 >> 2] = f128;
 __ZN5ImGui18UpdateMovingWindowEv();
 __ZN5ImGui34UpdateHoveredWindowAndCaptureFlagsEv();
 i121 = HEAP32[1460598] | 0;
 i36 = HEAP32[i121 + 6512 >> 2] | 0;
 L815 : do if ((i36 | 0) > 0) {
  i118 = HEAP32[i121 + 6520 >> 2] | 0;
  i98 = i36;
  while (1) {
   i13 = i98;
   i98 = i98 + -1 | 0;
   i111 = HEAP32[i118 + (i98 * 36 | 0) + 4 >> 2] | 0;
   if (i111 | 0) if (HEAP32[i111 + 8 >> 2] & 134217728 | 0) break;
   if ((i13 | 0) <= 1) {
    i1 = 551;
    break L815;
   }
  }
  i98 = i6 + 6948 | 0;
  f128 = Math_fround(HEAPF32[i98 >> 2]);
  f127 = Math_fround(f128 + Math_fround(Math_fround(HEAPF32[i7 >> 2]) * Math_fround(6.0)));
  i118 = f127 < Math_fround(1.0);
  i129 = i98;
  f130 = i118 ? f127 : Math_fround(1.0);
 } else i1 = 551; while (0);
 if ((i1 | 0) == 551) {
  i129 = i6 + 6948 | 0;
  f130 = Math_fround(0.0);
 }
 HEAPF32[i129 >> 2] = f130;
 HEAP32[i6 + 7068 >> 2] = 0;
 HEAP32[i6 + 11616 >> 2] = -1;
 HEAP32[i6 + 11612 >> 2] = -1;
 HEAP32[i6 + 11608 >> 2] = -1;
 HEAP32[i6 + 11032 >> 2] = 1065353216;
 HEAP32[i6 + 11036 >> 2] = 1065353216;
 i129 = HEAP32[i6 + 6396 >> 2] | 0;
 do if (i129 | 0) {
  if (HEAP8[i129 + 121 >> 0] | 0) break;
  f130 = Math_fround(HEAPF32[i6 + 228 >> 2]);
  i7 = f130 != Math_fround(0.0);
  if (i7) i131 = i129; else if (Math_fround(HEAPF32[i6 + 232 >> 2]) != Math_fround(0.0)) i131 = i129; else break;
  while (1) {
   i132 = HEAP32[i131 + 8 >> 2] | 0;
   if ((i132 & 16777752 | 0) != 16777232) break;
   i36 = HEAP32[i131 + 752 >> 2] | 0;
   if (!i36) break; else i131 = i36;
  }
  i36 = (i132 & 528 | 0) == 0;
  do if (i7) if (!(HEAP8[i6 + 237 >> 0] | 0)) {
   if (!i36) break;
   f127 = Math_fround(HEAPF32[i121 + 6188 >> 2]);
   f128 = Math_fround(Math_fround(f127 * Math_fround(HEAPF32[i131 + 624 >> 2])) * Math_fround(5.0));
   f127 = Math_fround(HEAPF32[i131 + 540 >> 2]);
   f125 = Math_fround(f127 - Math_fround(HEAPF32[i131 + 532 >> 2]));
   f127 = Math_fround(Math_fround(f125 + Math_fround(Math_fround(HEAPF32[i131 + 64 >> 2]) * Math_fround(2.0))) * Math_fround(.670000016));
   f125 = Math_fround(~~(f128 < f127 ? f128 : f127) | 0);
   i118 = i131 + 88 | 0;
   f127 = Math_fround(HEAPF32[i118 >> 2]);
   f128 = Math_fround(f127 - Math_fround(f130 * f125));
   i98 = i131 + 224 | 0;
   f125 = Math_fround(f127 + Math_fround(HEAPF32[i98 >> 2]));
   HEAPF32[i118 >> 2] = f128;
   f127 = Math_fround(f125 - f128);
   HEAPF32[i98 >> 2] = f127;
   break;
  } else {
   if (!(HEAP8[i6 + 152 >> 0] | 0)) break;
   i98 = i129 + 624 | 0;
   f127 = Math_fround(HEAPF32[i98 >> 2]);
   f128 = Math_fround(Math_fround(f130 * Math_fround(.100000001)) + f127);
   i118 = f128 < Math_fround(.5);
   i13 = f128 > Math_fround(2.5);
   f125 = i13 ? Math_fround(2.5) : f128;
   f128 = i118 ? Math_fround(.5) : f125;
   f125 = Math_fround(f128 / f127);
   HEAPF32[i98 >> 2] = f128;
   f128 = Math_fround(Math_fround(1.0) - f125);
   i98 = i129 + 20 | 0;
   f127 = Math_fround(HEAPF32[i98 >> 2]);
   f126 = Math_fround(f127 * f128);
   i118 = i129 + 24 | 0;
   f124 = Math_fround(HEAPF32[i118 >> 2]);
   f123 = Math_fround(f124 * f128);
   f128 = Math_fround(HEAPF32[i6 + 212 >> 2]);
   i13 = i129 + 12 | 0;
   f122 = Math_fround(HEAPF32[i13 >> 2]);
   f112 = Math_fround(f128 - f122);
   f128 = Math_fround(HEAPF32[i6 + 216 >> 2]);
   i111 = i129 + 16 | 0;
   f99 = Math_fround(HEAPF32[i111 >> 2]);
   f113 = Math_fround(Math_fround(f123 * Math_fround(f128 - f99)) / f124);
   f128 = Math_fround(f122 + Math_fround(Math_fround(f112 * f126) / f127));
   HEAPF32[i13 >> 2] = f128;
   f128 = Math_fround(f99 + f113);
   HEAPF32[i111 >> 2] = f128;
   f128 = Math_fround(f125 * f127);
   HEAPF32[i98 >> 2] = f128;
   f128 = Math_fround(f125 * f124);
   HEAPF32[i118 >> 2] = f128;
   i118 = i129 + 28 | 0;
   f128 = Math_fround(f125 * Math_fround(HEAPF32[i118 >> 2]));
   HEAPF32[i118 >> 2] = f128;
   i118 = i129 + 32 | 0;
   f128 = Math_fround(f125 * Math_fround(HEAPF32[i118 >> 2]));
   HEAPF32[i118 >> 2] = f128;
   break;
  } while (0);
  f130 = Math_fround(HEAPF32[i6 + 232 >> 2]);
  if (f130 == Math_fround(0.0) | i36 ^ 1) break;
  f128 = Math_fround(HEAPF32[i121 + 6188 >> 2]);
  f125 = Math_fround(f128 * Math_fround(HEAPF32[i131 + 624 >> 2]));
  if (HEAP8[i6 + 237 >> 0] | 0) break;
  if (HEAP32[i129 + 8 >> 2] & 16 | 0) break;
  i7 = i129 + 84 | 0;
  f128 = Math_fround(HEAPF32[i7 >> 2]);
  f124 = Math_fround(f128 - Math_fround(f130 * f125));
  i118 = i129 + 220 | 0;
  f125 = Math_fround(f128 + Math_fround(HEAPF32[i118 >> 2]));
  HEAPF32[i7 >> 2] = f124;
  f128 = Math_fround(f125 - f124);
  HEAPF32[i118 >> 2] = f128;
 } while (0);
 do if (!(HEAP32[i22 >> 2] | 0)) {
  i129 = HEAP32[i6 + 6644 >> 2] | 0;
  if (!i129) break;
  if (!(HEAP8[i129 + 118 >> 0] | 0)) break;
  if (HEAP32[i129 + 8 >> 2] & 262144 | 0) break;
  if (HEAP8[i6 + 237 >> 0] | 0) break;
  i131 = HEAP32[i121 + 48 >> 2] | 0;
  if ((i131 | 0) <= -1) break;
  if ((i131 | 0) >= 512) ___assert_fail(32321, 31803, 4844, 32415);
  if (!(Math_fround(HEAPF32[i121 + 1092 + (i131 << 2) >> 2]) == Math_fround(0.0))) break;
  do if (!(HEAP32[i6 + 6648 >> 2] | 0)) i1 = 581; else {
   i131 = HEAP32[i6 + 6724 >> 2] | 0;
   if ((i131 | 0) == 2147483647) {
    i1 = 581;
    break;
   }
   i133 = i131 + 1 + (HEAP8[i6 + 238 >> 0] | 0 ? -1 : 1) | 0;
  } while (0);
  if ((i1 | 0) == 581) i133 = (HEAP8[i6 + 238 >> 0] << 7 & 255) << 24 >> 24 >> 7 << 24 >> 24;
  HEAP32[i129 + 836 >> 2] = i133;
 } while (0);
 HEAP32[i6 + 6724 >> 2] = 2147483647;
 i133 = HEAP32[i6 + 6340 >> 2] | 0;
 L865 : do if (i133 | 0) {
  i1 = i6 + 6348 | 0;
  i22 = 0;
  while (1) {
   if ((i133 | 0) <= (i22 | 0)) break;
   i36 = HEAP32[(HEAP32[i1 >> 2] | 0) + (i22 << 2) >> 2] | 0;
   i131 = i36 + 118 | 0;
   HEAP8[i36 + 119 >> 0] = HEAP8[i131 >> 0] | 0;
   HEAP8[i131 >> 0] = 0;
   HEAP8[i36 + 120 >> 0] = 0;
   i22 = i22 + 1 | 0;
   if ((i22 | 0) == (i133 | 0)) break L865;
  }
  ___assert_fail(56841, 56850, 1235, 56909);
 } while (0);
 i133 = i6 + 6644 | 0;
 i22 = HEAP32[i133 >> 2] | 0;
 L872 : do if (i22 | 0) {
  if (HEAP8[i22 + 119 >> 0] | 0) break;
  i1 = HEAP32[i121 + 6340 >> 2] | 0;
  if ((i1 | 0) <= 0) break;
  i129 = HEAP32[i121 + 6348 >> 2] | 0;
  i36 = i1;
  L876 : while (1) {
   i1 = i36;
   i36 = i36 + -1 | 0;
   i134 = HEAP32[i129 + (i36 << 2) >> 2] | 0;
   do if (i134 | 0) {
    if (!(HEAP8[i134 + 119 >> 0] | 0)) break;
    if (!(HEAP32[i134 + 8 >> 2] & 16777216)) break L876;
   } while (0);
   if ((i1 | 0) <= 1) break L872;
  }
  i36 = HEAP32[i134 + 772 >> 2] | 0;
  __ZN5ImGui11FocusWindowEP11ImGuiWindow((i36 | 0) == 0 ? i134 : i36);
 } while (0);
 i134 = i6 + 6364 | 0;
 i121 = i6 + 6368 | 0;
 i22 = HEAP32[i121 >> 2] | 0;
 do if ((i22 | 0) < 0) {
  i36 = ((i22 | 0) / 2 | 0) + i22 | 0;
  i129 = (i36 | 0) > 0 ? i36 : 0;
  if ((i22 | 0) >= (i129 | 0)) break;
  HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
  i36 = __ZL13MallocWrapperjPv(i129 << 2, 0) | 0;
  i70 = i6 + 6372 | 0;
  i131 = HEAP32[i70 >> 2] | 0;
  if (!i131) i135 = i70; else {
   _memcpy(i36 | 0, i131 | 0, HEAP32[i134 >> 2] << 2 | 0) | 0;
   i131 = HEAP32[i70 >> 2] | 0;
   if (i131 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
   __ZL11FreeWrapperPvS_(i131, 0);
   i135 = i70;
  }
  HEAP32[i135 >> 2] = i36;
  HEAP32[i121 >> 2] = i129;
 } while (0);
 HEAP32[i134 >> 2] = 0;
 i134 = i6 + 6524 | 0;
 i121 = i6 + 6528 | 0;
 i135 = HEAP32[i121 >> 2] | 0;
 if ((i135 | 0) >= 0) {
  HEAP32[i134 >> 2] = 0;
  i136 = HEAP32[i133 >> 2] | 0;
  __ZN5ImGui21ClosePopupsOverWindowEP11ImGuiWindow(i136);
  i137 = HEAP32[1460598] | 0;
  i138 = i137 + 6580 | 0;
  HEAP32[i138 >> 2] = 1137180672;
  i139 = i137 + 6584 | 0;
  HEAP32[i139 >> 2] = 1137180672;
  i140 = i137 + 6540 | 0;
  HEAP32[i140 >> 2] = 4;
  __ZN5ImGui5BeginEPKcPbi(36791, 0, 0) | 0;
  STACKTOP = i2;
  return;
 }
 i22 = ((i135 | 0) / 2 | 0) + i135 | 0;
 i129 = (i22 | 0) > 0 ? i22 : 0;
 if ((i135 | 0) >= (i129 | 0)) {
  HEAP32[i134 >> 2] = 0;
  i136 = HEAP32[i133 >> 2] | 0;
  __ZN5ImGui21ClosePopupsOverWindowEP11ImGuiWindow(i136);
  i137 = HEAP32[1460598] | 0;
  i138 = i137 + 6580 | 0;
  HEAP32[i138 >> 2] = 1137180672;
  i139 = i137 + 6584 | 0;
  HEAP32[i139 >> 2] = 1137180672;
  i140 = i137 + 6540 | 0;
  HEAP32[i140 >> 2] = 4;
  __ZN5ImGui5BeginEPKcPbi(36791, 0, 0) | 0;
  STACKTOP = i2;
  return;
 }
 HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
 i135 = __ZL13MallocWrapperjPv(i129 * 36 | 0, 0) | 0;
 i22 = i6 + 6532 | 0;
 i6 = HEAP32[i22 >> 2] | 0;
 if (!i6) i141 = i22; else {
  _memcpy(i135 | 0, i6 | 0, (HEAP32[i134 >> 2] | 0) * 36 | 0) | 0;
  i6 = HEAP32[i22 >> 2] | 0;
  if (i6 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
  __ZL11FreeWrapperPvS_(i6, 0);
  i141 = i22;
 }
 HEAP32[i141 >> 2] = i135;
 HEAP32[i121 >> 2] = i129;
 HEAP32[i134 >> 2] = 0;
 i136 = HEAP32[i133 >> 2] | 0;
 __ZN5ImGui21ClosePopupsOverWindowEP11ImGuiWindow(i136);
 i137 = HEAP32[1460598] | 0;
 i138 = i137 + 6580 | 0;
 HEAP32[i138 >> 2] = 1137180672;
 i139 = i137 + 6584 | 0;
 HEAP32[i139 >> 2] = 1137180672;
 i140 = i137 + 6540 | 0;
 HEAP32[i140 >> 2] = 4;
 __ZN5ImGui5BeginEPKcPbi(36791, 0, 0) | 0;
 STACKTOP = i2;
 return;
}

function __Z31ImFontAtlasBuildWithStbTruetypeP11ImFontAtlas(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, f76 = f0, f77 = f0, f78 = f0, f79 = f0, f80 = f0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, i90 = 0, f91 = f0, f92 = f0, f93 = f0, f94 = f0, i95 = 0, i96 = 0, i97 = 0, i98 = 0, i99 = 0, i100 = 0, i101 = 0, i102 = 0, i103 = 0, f104 = f0, f105 = f0, f106 = f0, f107 = f0, f108 = f0, f109 = f0, i110 = 0, i111 = 0, f112 = f0, i113 = 0, i114 = 0, i115 = 0, i116 = 0, i117 = 0, i118 = 0, f119 = f0, f120 = f0, i121 = 0, i122 = 0, i123 = 0, i124 = 0, i125 = 0, i126 = 0, i127 = 0, i128 = 0, i129 = 0, i130 = 0, i131 = 0, i132 = 0, i133 = 0, i134 = 0, i135 = 0, i136 = 0, i137 = 0, i138 = 0, i139 = 0, f140 = f0, i141 = 0, i142 = 0, i143 = 0, i144 = 0, i145 = 0, i146 = 0, i147 = 0, i148 = 0, f149 = f0, f150 = f0, f151 = f0, f152 = f0, f153 = f0, i154 = 0, i155 = 0, i156 = 0, f157 = f0, f158 = f0, f159 = f0, f160 = f0, f161 = f0, f162 = f0, f163 = f0, f164 = f0, f165 = f0, f166 = f0, f167 = f0, f168 = f0, f169 = f0, f170 = f0, f171 = f0, f172 = f0, f173 = f0, i174 = 0, i175 = 0, i176 = 0, i177 = 0, i178 = 0, i179 = 0, i180 = 0, i181 = 0, i182 = 0, i183 = 0, i184 = 0, i185 = 0, i186 = 0, i187 = 0, i188 = 0, i189 = 0, i190 = 0, i191 = 0, i192 = 0, i193 = 0, i194 = 0, i195 = 0, i196 = 0, i197 = 0, i198 = 0, i199 = 0, i200 = 0, i201 = 0, i202 = 0, i203 = 0, f204 = f0, i205 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 848 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(848);
 i4 = i3;
 i5 = i3 + 320 | 0;
 i6 = i3 + 308 | 0;
 i7 = i3 + 296 | 0;
 i8 = i3 + 292 | 0;
 i9 = i3 + 288 | 0;
 i10 = i3 + 284 | 0;
 i11 = i3 + 280 | 0;
 i12 = i3 + 268 | 0;
 i13 = i3 + 256 | 0;
 i14 = i1 + 72 | 0;
 if ((HEAP32[i14 >> 2] | 0) <= 0) ___assert_fail(50431, 38201, 1696, 50458);
 i15 = i1 + 84 | 0;
 if ((HEAP32[i15 >> 2] | 0) <= -1) {
  if (!(HEAP32[i1 >> 2] & 2)) i16 = __ZN11ImFontAtlas20AddCustomRectRegularEjii(i1, -2147483648, 217, 27) | 0; else i16 = __ZN11ImFontAtlas20AddCustomRectRegularEjii(i1, -2147483648, 2, 2) | 0;
  HEAP32[i15 >> 2] = i16;
 }
 HEAP32[i1 + 4 >> 2] = 0;
 i16 = i1 + 28 | 0;
 i15 = i1 + 24 | 0;
 i17 = i1 + 36 | 0;
 i18 = i1 + 16 | 0;
 HEAP32[i15 >> 2] = 0;
 HEAP32[i15 + 4 >> 2] = 0;
 HEAP32[i15 + 8 >> 2] = 0;
 HEAP32[i15 + 12 >> 2] = 0;
 HEAP32[i15 + 16 >> 2] = 0;
 HEAP32[i15 + 20 >> 2] = 0;
 i19 = HEAP32[i18 >> 2] | 0;
 if (i19 | 0) __ZN5ImGui7MemFreeEPv(i19);
 i19 = i1 + 20 | 0;
 i20 = HEAP32[i19 >> 2] | 0;
 if (i20 | 0) __ZN5ImGui7MemFreeEPv(i20);
 HEAP32[i18 >> 2] = 0;
 HEAP32[i19 >> 2] = 0;
 i19 = HEAP32[i14 >> 2] | 0;
 if ((i19 | 0) > 0) {
  i20 = HEAP32[i1 + 80 >> 2] | 0;
  i21 = 0;
  i22 = 0;
  i23 = 0;
  while (1) {
   i24 = i20 + (i23 * 116 | 0) + 48 | 0;
   i25 = HEAP32[i24 >> 2] | 0;
   if (!i25) {
    HEAP32[i24 >> 2] = 21332;
    i26 = 21332;
   } else i26 = i25;
   i25 = HEAP16[i26 >> 1] | 0;
   L24 : do if (!(i25 << 16 >> 16)) {
    i27 = i21;
    i28 = i22;
   } else {
    i24 = i26;
    i29 = i21;
    i30 = i22;
    i31 = i25;
    while (1) {
     i32 = HEAP16[i24 + 2 >> 1] | 0;
     if (!(i32 << 16 >> 16)) {
      i27 = i29;
      i28 = i30;
      break L24;
     }
     i33 = i29 + 1 - (i31 & 65535) + (i32 & 65535) | 0;
     i24 = i24 + 4 | 0;
     i32 = i30 + 1 | 0;
     i31 = HEAP16[i24 >> 1] | 0;
     if (!(i31 << 16 >> 16)) {
      i27 = i33;
      i28 = i32;
      break;
     } else {
      i29 = i33;
      i30 = i32;
     }
    }
   } while (0);
   i23 = i23 + 1 | 0;
   if ((i23 | 0) >= (i19 | 0)) {
    i34 = i27;
    i35 = i28;
    break;
   } else {
    i21 = i27;
    i22 = i28;
   }
  }
 } else {
  i34 = 0;
  i35 = 0;
 }
 i28 = HEAP32[i1 + 8 >> 2] | 0;
 if ((i28 | 0) > 0) i36 = i28; else if ((i34 | 0) > 4e3) i36 = 4096; else i36 = (i34 | 0) > 2e3 ? 2048 : (i34 | 0) > 1e3 ? 1024 : 512;
 HEAP32[i15 >> 2] = i36;
 HEAP32[i16 >> 2] = 0;
 i28 = HEAP32[i1 + 12 >> 2] | 0;
 i22 = __ZN5ImGui8MemAllocEj(48) | 0;
 i27 = i36 - i28 | 0;
 i21 = __ZN5ImGui8MemAllocEj(i27 << 3) | 0;
 i19 = (i22 | 0) == 0;
 i23 = (i21 | 0) == 0;
 if (i19 | i23) {
  if (!i19) __ZN5ImGui7MemFreeEPv(i22);
  if (i23) {
   i37 = 0;
   STACKTOP = i3;
   return i37 | 0;
  }
  __ZN5ImGui7MemFreeEPv(i21);
  i37 = 0;
  STACKTOP = i3;
  return i37 | 0;
 }
 i23 = 32768 - i28 | 0;
 if (!((i27 | 0) < 65536 & (i23 | 0) < 65536)) ___assert_fail(50490, 50526, 256, 50593);
 i19 = i27 + -1 | 0;
 if ((i27 | 0) > 1) {
  i26 = 0;
  do {
   i20 = i26;
   i26 = i26 + 1 | 0;
   HEAP32[i21 + (i20 << 3) + 4 >> 2] = i21 + (i26 << 3);
  } while ((i26 | 0) != (i19 | 0));
  i38 = i19;
 } else i38 = 0;
 HEAP32[i21 + (i38 << 3) + 4 >> 2] = 0;
 HEAP32[i22 + 12 >> 2] = 1;
 HEAP32[i22 + 16 >> 2] = 0;
 HEAP32[i22 + 28 >> 2] = i21;
 i38 = i22 + 32 | 0;
 HEAP32[i22 + 24 >> 2] = i38;
 HEAP32[i22 >> 2] = i27;
 HEAP32[i22 + 4 >> 2] = i23;
 HEAP32[i22 + 20 >> 2] = i27;
 HEAP32[i22 + 8 >> 2] = (i19 + i27 | 0) / (i27 | 0) | 0;
 HEAP16[i38 >> 1] = 0;
 HEAP16[i22 + 34 >> 1] = 0;
 i38 = i22 + 40 | 0;
 HEAP32[i22 + 36 >> 2] = i38;
 HEAP16[i38 >> 1] = i27;
 HEAP16[i22 + 42 >> 1] = -1;
 HEAP32[i22 + 44 >> 2] = 0;
 __Z31ImFontAtlasBuildPackCustomRectsP11ImFontAtlasPv(i1, i22);
 i27 = __ZN5ImGui8MemAllocEj((HEAP32[i14 >> 2] | 0) * 140 | 0) | 0;
 L51 : do if ((HEAP32[i14 >> 2] | 0) > 0) {
  i38 = i1 + 80 | 0;
  i19 = i6 + 4 | 0;
  i23 = i6 + 8 | 0;
  i26 = 0;
  L53 : while (1) {
   i20 = HEAP32[i38 >> 2] | 0;
   i25 = HEAP32[i20 + (i26 * 116 | 0) + 112 >> 2] | 0;
   if (!i25) {
    i2 = 36;
    break;
   }
   i30 = HEAP32[i25 + 68 >> 2] | 0;
   if (!((i30 | 0) == 0 | (i30 | 0) == (i1 | 0))) {
    i2 = 36;
    break;
   }
   i30 = i20 + (i26 * 116 | 0) | 0;
   i20 = HEAP32[i30 >> 2] | 0;
   i25 = HEAP32[i30 + 12 >> 2] | 0;
   L57 : do switch (HEAP8[i20 >> 0] | 0) {
   case 49:
    {
     if (HEAP8[i20 + 1 >> 0] | 0) {
      i2 = 59;
      break L53;
     }
     if (HEAP8[i20 + 2 >> 0] | 0) {
      i2 = 59;
      break L53;
     }
     if (!(HEAP8[i20 + 3 >> 0] | 0)) i2 = 52; else {
      i2 = 59;
      break L53;
     }
     break;
    }
   case 116:
    {
     switch (HEAP8[i20 + 1 >> 0] | 0) {
     case 121:
      {
       if ((HEAP8[i20 + 2 >> 0] | 0) != 112) {
        i2 = 59;
        break L53;
       }
       if ((HEAP8[i20 + 3 >> 0] | 0) == 49) {
        i2 = 52;
        break L57;
       } else {
        i2 = 59;
        break L53;
       }
       break;
      }
     case 114:
      {
       if ((HEAP8[i20 + 2 >> 0] | 0) != 117) {
        i2 = 59;
        break L53;
       }
       if ((HEAP8[i20 + 3 >> 0] | 0) == 101) {
        i2 = 52;
        break L57;
       } else {
        i2 = 59;
        break L53;
       }
       break;
      }
     case 116:
      {
       if ((HEAP8[i20 + 2 >> 0] | 0) != 99) {
        i2 = 59;
        break L53;
       }
       if ((HEAP8[i20 + 3 >> 0] | 0) != 102) {
        i2 = 59;
        break L53;
       }
       i30 = HEAPU8[i20 + 5 >> 0] << 16 | HEAPU8[i20 + 4 >> 0] << 24 | HEAPU8[i20 + 6 >> 0] << 8 | HEAPU8[i20 + 7 >> 0];
       if ((i30 | 0) < 131072) switch (i30 | 0) {
       case 65536:
        break;
       default:
        {
         i2 = 59;
         break L53;
        }
       } else switch (i30 | 0) {
       case 131072:
        break;
       default:
        {
         i2 = 59;
         break L53;
        }
       }
       if ((HEAPU8[i20 + 9 >> 0] << 16 | HEAPU8[i20 + 8 >> 0] << 24 | HEAPU8[i20 + 10 >> 0] << 8 | HEAPU8[i20 + 11 >> 0] | 0) <= (i25 | 0)) {
        i2 = 59;
        break L53;
       }
       i30 = i20 + 12 + (i25 << 2) | 0;
       i39 = HEAPU8[i30 + 1 >> 0] << 16 | HEAPU8[i30 >> 0] << 24 | HEAPU8[i30 + 2 >> 0] << 8 | HEAPU8[i30 + 3 >> 0];
       break L57;
       break;
      }
     default:
      {
       i2 = 59;
       break L53;
      }
     }
     break;
    }
   case 79:
    {
     if ((HEAP8[i20 + 1 >> 0] | 0) != 84) {
      i2 = 59;
      break L53;
     }
     if ((HEAP8[i20 + 2 >> 0] | 0) != 84) {
      i2 = 59;
      break L53;
     }
     if ((HEAP8[i20 + 3 >> 0] | 0) == 79) i2 = 52; else {
      i2 = 59;
      break L53;
     }
     break;
    }
   case 0:
    {
     if ((HEAP8[i20 + 1 >> 0] | 0) != 1) {
      i2 = 59;
      break L53;
     }
     if (HEAP8[i20 + 2 >> 0] | 0) {
      i2 = 59;
      break L53;
     }
     if (!(HEAP8[i20 + 3 >> 0] | 0)) i2 = 52; else {
      i2 = 59;
      break L53;
     }
     break;
    }
   default:
    {
     i2 = 59;
     break L53;
    }
   } while (0);
   if ((i2 | 0) == 52) {
    i2 = 0;
    i39 = ((i25 | 0) != 0) << 31 >> 31;
   }
   if ((i39 | 0) <= -1) {
    i2 = 59;
    break;
   }
   i30 = i27 + (i26 * 140 | 0) | 0;
   HEAP32[i30 + 4 >> 2] = i20;
   HEAP32[i30 + 8 >> 2] = i39;
   i29 = i27 + (i26 * 140 | 0) + 52 | 0;
   i31 = i29 | 0;
   i24 = i29 | 0;
   HEAP32[i24 >> 2] = 0;
   i29 = i30 + 56 | 0;
   HEAP32[i29 >> 2] = 0;
   i32 = i30 + 60 | 0;
   HEAP32[i32 >> 2] = 0;
   i30 = i20 + i39 + 4 | 0;
   i33 = i30 + 1 | 0;
   i40 = HEAPU8[i30 >> 0] << 8 | HEAPU8[i33 >> 0];
   i41 = i39 + 12 | 0;
   L85 : do if (!i40) {
    i42 = 0;
    i43 = 0;
   } else {
    i44 = 0;
    L86 : while (1) {
     i45 = i20 + ((i44 << 4) + i41) | 0;
     do if ((HEAP8[i45 >> 0] | 0) == 99) {
      if ((HEAP8[i45 + 1 >> 0] | 0) != 109) break;
      if ((HEAP8[i45 + 2 >> 0] | 0) != 97) break;
      if ((HEAP8[i45 + 3 >> 0] | 0) == 112) {
       i2 = 65;
       break L86;
      }
     } while (0);
     i44 = i44 + 1 | 0;
     if ((i44 | 0) >= (i40 | 0)) {
      i46 = 0;
      break;
     }
    }
    if ((i2 | 0) == 65) {
     i2 = 0;
     i44 = i45 + 8 | 0;
     i46 = HEAPU8[i44 + 1 >> 0] << 16 | HEAPU8[i44 >> 0] << 24 | HEAPU8[i44 + 2 >> 0] << 8 | HEAPU8[i44 + 3 >> 0];
    }
    i44 = 0;
    L96 : while (1) {
     i47 = i20 + ((i44 << 4) + i41) | 0;
     do if ((HEAP8[i47 >> 0] | 0) == 108) {
      if ((HEAP8[i47 + 1 >> 0] | 0) != 111) break;
      if ((HEAP8[i47 + 2 >> 0] | 0) != 99) break;
      if ((HEAP8[i47 + 3 >> 0] | 0) == 97) break L96;
     } while (0);
     i44 = i44 + 1 | 0;
     if ((i44 | 0) >= (i40 | 0)) {
      i42 = i46;
      i43 = 0;
      break L85;
     }
    }
    i44 = i47 + 8 | 0;
    i42 = i46;
    i43 = HEAPU8[i44 + 1 >> 0] << 16 | HEAPU8[i44 >> 0] << 24 | HEAPU8[i44 + 2 >> 0] << 8 | HEAPU8[i44 + 3 >> 0];
   } while (0);
   HEAP32[i27 + (i26 * 140 | 0) + 16 >> 2] = i43;
   i40 = HEAPU8[i30 >> 0] << 8 | HEAPU8[i33 >> 0];
   L105 : do if (!i40) i48 = 0; else {
    i25 = 0;
    L106 : while (1) {
     i49 = i20 + ((i25 << 4) + i41) | 0;
     do if ((HEAP8[i49 >> 0] | 0) == 104) {
      if ((HEAP8[i49 + 1 >> 0] | 0) != 101) break;
      if ((HEAP8[i49 + 2 >> 0] | 0) != 97) break;
      if ((HEAP8[i49 + 3 >> 0] | 0) == 100) break L106;
     } while (0);
     i25 = i25 + 1 | 0;
     if ((i25 | 0) >= (i40 | 0)) {
      i48 = 0;
      break L105;
     }
    }
    i25 = i49 + 8 | 0;
    i48 = HEAPU8[i25 + 1 >> 0] << 16 | HEAPU8[i25 >> 0] << 24 | HEAPU8[i25 + 2 >> 0] << 8 | HEAPU8[i25 + 3 >> 0];
   } while (0);
   i40 = i27 + (i26 * 140 | 0) + 20 | 0;
   HEAP32[i40 >> 2] = i48;
   i25 = HEAPU8[i30 >> 0] << 8 | HEAPU8[i33 >> 0];
   L115 : do if (!i25) i50 = 0; else {
    i44 = 0;
    L116 : while (1) {
     i51 = i20 + ((i44 << 4) + i41) | 0;
     do if ((HEAP8[i51 >> 0] | 0) == 103) {
      if ((HEAP8[i51 + 1 >> 0] | 0) != 108) break;
      if ((HEAP8[i51 + 2 >> 0] | 0) != 121) break;
      if ((HEAP8[i51 + 3 >> 0] | 0) == 102) break L116;
     } while (0);
     i44 = i44 + 1 | 0;
     if ((i44 | 0) >= (i25 | 0)) {
      i50 = 0;
      break L115;
     }
    }
    i44 = i51 + 8 | 0;
    i50 = HEAPU8[i44 + 1 >> 0] << 16 | HEAPU8[i44 >> 0] << 24 | HEAPU8[i44 + 2 >> 0] << 8 | HEAPU8[i44 + 3 >> 0];
   } while (0);
   HEAP32[i27 + (i26 * 140 | 0) + 24 >> 2] = i50;
   i25 = HEAPU8[i30 >> 0] << 8 | HEAPU8[i33 >> 0];
   L125 : do if (!i25) i52 = 0; else {
    i44 = 0;
    L126 : while (1) {
     i53 = i20 + ((i44 << 4) + i41) | 0;
     do if ((HEAP8[i53 >> 0] | 0) == 104) {
      if ((HEAP8[i53 + 1 >> 0] | 0) != 104) break;
      if ((HEAP8[i53 + 2 >> 0] | 0) != 101) break;
      if ((HEAP8[i53 + 3 >> 0] | 0) == 97) break L126;
     } while (0);
     i44 = i44 + 1 | 0;
     if ((i44 | 0) >= (i25 | 0)) {
      i52 = 0;
      break L125;
     }
    }
    i44 = i53 + 8 | 0;
    i52 = HEAPU8[i44 + 1 >> 0] << 16 | HEAPU8[i44 >> 0] << 24 | HEAPU8[i44 + 2 >> 0] << 8 | HEAPU8[i44 + 3 >> 0];
   } while (0);
   HEAP32[i27 + (i26 * 140 | 0) + 28 >> 2] = i52;
   i25 = HEAPU8[i30 >> 0] << 8 | HEAPU8[i33 >> 0];
   L135 : do if (!i25) i54 = 0; else {
    i44 = 0;
    L136 : while (1) {
     i55 = i20 + ((i44 << 4) + i41) | 0;
     do if ((HEAP8[i55 >> 0] | 0) == 104) {
      if ((HEAP8[i55 + 1 >> 0] | 0) != 109) break;
      if ((HEAP8[i55 + 2 >> 0] | 0) != 116) break;
      if ((HEAP8[i55 + 3 >> 0] | 0) == 120) break L136;
     } while (0);
     i44 = i44 + 1 | 0;
     if ((i44 | 0) >= (i25 | 0)) {
      i54 = 0;
      break L135;
     }
    }
    i44 = i55 + 8 | 0;
    i54 = HEAPU8[i44 + 1 >> 0] << 16 | HEAPU8[i44 >> 0] << 24 | HEAPU8[i44 + 2 >> 0] << 8 | HEAPU8[i44 + 3 >> 0];
   } while (0);
   HEAP32[i27 + (i26 * 140 | 0) + 32 >> 2] = i54;
   i25 = HEAPU8[i30 >> 0] << 8 | HEAPU8[i33 >> 0];
   L145 : do if (!i25) i56 = 0; else {
    i44 = 0;
    L146 : while (1) {
     i57 = i20 + ((i44 << 4) + i41) | 0;
     do if ((HEAP8[i57 >> 0] | 0) == 107) {
      if ((HEAP8[i57 + 1 >> 0] | 0) != 101) break;
      if ((HEAP8[i57 + 2 >> 0] | 0) != 114) break;
      if ((HEAP8[i57 + 3 >> 0] | 0) == 110) break L146;
     } while (0);
     i44 = i44 + 1 | 0;
     if ((i44 | 0) >= (i25 | 0)) {
      i56 = 0;
      break L145;
     }
    }
    i44 = i57 + 8 | 0;
    i56 = HEAPU8[i44 + 1 >> 0] << 16 | HEAPU8[i44 >> 0] << 24 | HEAPU8[i44 + 2 >> 0] << 8 | HEAPU8[i44 + 3 >> 0];
   } while (0);
   HEAP32[i27 + (i26 * 140 | 0) + 36 >> 2] = i56;
   i25 = HEAPU8[i30 >> 0] << 8 | HEAPU8[i33 >> 0];
   L155 : do if (!i25) i58 = 0; else {
    i44 = 0;
    L156 : while (1) {
     i59 = i20 + ((i44 << 4) + i41) | 0;
     do if ((HEAP8[i59 >> 0] | 0) == 71) {
      if ((HEAP8[i59 + 1 >> 0] | 0) != 80) break;
      if ((HEAP8[i59 + 2 >> 0] | 0) != 79) break;
      if ((HEAP8[i59 + 3 >> 0] | 0) == 83) break L156;
     } while (0);
     i44 = i44 + 1 | 0;
     if ((i44 | 0) >= (i25 | 0)) {
      i58 = 0;
      break L155;
     }
    }
    i44 = i59 + 8 | 0;
    i58 = HEAPU8[i44 + 1 >> 0] << 16 | HEAPU8[i44 >> 0] << 24 | HEAPU8[i44 + 2 >> 0] << 8 | HEAPU8[i44 + 3 >> 0];
   } while (0);
   HEAP32[i27 + (i26 * 140 | 0) + 40 >> 2] = i58;
   if ((i42 | 0) == 0 | (i48 | 0) == 0 | (i52 | 0) == 0 | (i54 | 0) == 0) break;
   if (!i50) {
    HEAP32[i8 >> 2] = 2;
    HEAP32[i9 >> 2] = 0;
    HEAP32[i10 >> 2] = 0;
    HEAP32[i11 >> 2] = 0;
    i25 = HEAPU8[i30 >> 0] << 8 | HEAPU8[i33 >> 0];
    if (!i25) {
     i2 = 142;
     break;
    } else i60 = 0;
    L168 : while (1) {
     i61 = i20 + ((i60 << 4) + i41) | 0;
     do if ((HEAP8[i61 >> 0] | 0) == 67) {
      if ((HEAP8[i61 + 1 >> 0] | 0) != 70) break;
      if ((HEAP8[i61 + 2 >> 0] | 0) != 70) break;
      if ((HEAP8[i61 + 3 >> 0] | 0) == 32) break L168;
     } while (0);
     i60 = i60 + 1 | 0;
     if ((i60 | 0) >= (i25 | 0)) {
      i2 = 142;
      break L53;
     }
    }
    i25 = i61 + 8 | 0;
    i44 = HEAPU8[i25 + 1 >> 0] << 16 | HEAPU8[i25 >> 0] << 24 | HEAPU8[i25 + 2 >> 0] << 8 | HEAPU8[i25 + 3 >> 0];
    if (!i44) {
     i2 = 142;
     break;
    }
    i25 = i27 + (i26 * 140 | 0) + 100 | 0;
    i62 = i27 + (i26 * 140 | 0) | 0;
    i63 = i25 | 0;
    i64 = i25 | 0;
    i25 = i62 + 112 | 0;
    i65 = i62 + 116 | 0;
    i66 = i62 + 120 | 0;
    HEAP32[i64 >> 2] = 0;
    HEAP32[i64 + 4 >> 2] = 0;
    HEAP32[i64 + 8 >> 2] = 0;
    HEAP32[i64 + 12 >> 2] = 0;
    HEAP32[i64 + 16 >> 2] = 0;
    HEAP32[i64 + 20 >> 2] = 0;
    HEAP32[i24 >> 2] = i20 + i44;
    HEAP32[i29 >> 2] = 0;
    HEAP32[i32 >> 2] = 536870912;
    HEAP32[i6 >> 2] = HEAP32[i31 >> 2];
    HEAP32[i6 + 4 >> 2] = HEAP32[i31 + 4 >> 2];
    HEAP32[i6 + 8 >> 2] = HEAP32[i31 + 8 >> 2];
    i44 = HEAP32[i19 >> 2] | 0;
    i64 = i44 + 2 | 0;
    i62 = HEAP32[i23 >> 2] | 0;
    if ((i44 | 0) < -2 | (i62 | 0) < (i64 | 0)) {
     i2 = 127;
     break;
    }
    HEAP32[i19 >> 2] = i64;
    if ((i64 | 0) < (i62 | 0)) {
     i67 = HEAP32[i6 >> 2] | 0;
     HEAP32[i19 >> 2] = i44 + 3;
     i68 = HEAP8[i67 + i64 >> 0] | 0;
    } else i68 = 0;
    i64 = i68 & 255;
    if ((i62 | 0) < (i64 | 0)) {
     i2 = 131;
     break;
    }
    HEAP32[i19 >> 2] = i64;
    __ZL20stbtt__cff_get_indexP10stbtt__buf(i4, i6);
    __ZL20stbtt__cff_get_indexP10stbtt__buf(i12, i6);
    HEAP32[i4 >> 2] = HEAP32[i12 >> 2];
    HEAP32[i4 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
    HEAP32[i4 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
    __ZL20stbtt__cff_index_get10stbtt__bufi(i7, i4, 0);
    __ZL20stbtt__cff_get_indexP10stbtt__buf(i4, i6);
    __ZL20stbtt__cff_get_indexP10stbtt__buf(i4, i6);
    i64 = i27 + (i26 * 140 | 0) | 0;
    i62 = i64 + 76 | 0;
    HEAP32[i62 >> 2] = HEAP32[i4 >> 2];
    HEAP32[i62 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
    HEAP32[i62 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
    __ZL20stbtt__dict_get_intsP10stbtt__bufiiPj(i7, 17, 1, i9);
    __ZL20stbtt__dict_get_intsP10stbtt__bufiiPj(i7, 262, 1, i8);
    __ZL20stbtt__dict_get_intsP10stbtt__bufiiPj(i7, 292, 1, i10);
    __ZL20stbtt__dict_get_intsP10stbtt__bufiiPj(i7, 293, 1, i11);
    HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
    HEAP32[i5 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
    HEAP32[i5 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
    HEAP32[i4 >> 2] = HEAP32[i7 >> 2];
    HEAP32[i4 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
    HEAP32[i4 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
    __ZL16stbtt__get_subrs10stbtt__bufS_(i13, i5, i4);
    i62 = i64 + 88 | 0;
    HEAP32[i62 >> 2] = HEAP32[i13 >> 2];
    HEAP32[i62 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
    HEAP32[i62 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
    i62 = HEAP32[i9 >> 2] | 0;
    if ((HEAP32[i8 >> 2] | 0) != 2 | (i62 | 0) == 0) {
     i2 = 142;
     break;
    }
    i64 = HEAP32[i10 >> 2] | 0;
    if (!i64) i69 = HEAP32[i23 >> 2] | 0; else {
     i67 = HEAP32[i11 >> 2] | 0;
     if (!i67) {
      i2 = 142;
      break;
     }
     if ((i64 | 0) < 0 ? 1 : (HEAP32[i23 >> 2] | 0) < (i64 | 0)) {
      i2 = 137;
      break;
     }
     HEAP32[i19 >> 2] = i64;
     __ZL20stbtt__cff_get_indexP10stbtt__buf(i4, i6);
     HEAP32[i63 >> 2] = HEAP32[i4 >> 2];
     HEAP32[i63 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
     HEAP32[i63 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
     i63 = HEAP32[i23 >> 2] | 0;
     i64 = i63 - i67 | 0;
     i44 = (i63 | 0) < (i67 | 0) | (i64 | i67 | 0) < 0;
     HEAP32[i25 >> 2] = i44 ? 0 : (HEAP32[i6 >> 2] | 0) + i67 | 0;
     HEAP32[i65 >> 2] = 0;
     HEAP32[i66 >> 2] = i44 ? 0 : i64;
     i69 = i63;
    }
    if ((i62 | 0) < 0 | (i69 | 0) < (i62 | 0)) {
     i2 = 140;
     break;
    }
    HEAP32[i19 >> 2] = i62;
    __ZL20stbtt__cff_get_indexP10stbtt__buf(i4, i6);
    i62 = i27 + (i26 * 140 | 0) + 64 | 0;
    HEAP32[i62 >> 2] = HEAP32[i4 >> 2];
    HEAP32[i62 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
    HEAP32[i62 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
   } else if (!i43) break;
   i62 = HEAPU8[i30 >> 0] << 8 | HEAPU8[i33 >> 0];
   L192 : do if (!i62) i70 = 65535; else {
    i63 = 0;
    L193 : while (1) {
     i71 = i20 + ((i63 << 4) + i41) | 0;
     do if ((HEAP8[i71 >> 0] | 0) == 109) {
      if ((HEAP8[i71 + 1 >> 0] | 0) != 97) break;
      if ((HEAP8[i71 + 2 >> 0] | 0) != 120) break;
      if ((HEAP8[i71 + 3 >> 0] | 0) == 112) break L193;
     } while (0);
     i63 = i63 + 1 | 0;
     if ((i63 | 0) >= (i62 | 0)) {
      i70 = 65535;
      break L192;
     }
    }
    i63 = i71 + 8 | 0;
    i64 = HEAPU8[i63 + 1 >> 0] << 16 | HEAPU8[i63 >> 0] << 24 | HEAPU8[i63 + 2 >> 0] << 8 | HEAPU8[i63 + 3 >> 0];
    if (!i64) {
     i70 = 65535;
     break;
    }
    i63 = i20 + i64 + 4 | 0;
    i70 = HEAPU8[i63 >> 0] << 8 | HEAPU8[i63 + 1 >> 0];
   } while (0);
   i62 = i27 + (i26 * 140 | 0) | 0;
   HEAP32[i62 + 12 >> 2] = i70;
   i41 = i20 + i42 + 2 | 0;
   i33 = HEAPU8[i41 >> 0] << 8 | HEAPU8[i41 + 1 >> 0];
   i41 = i62 + 44 | 0;
   HEAP32[i41 >> 2] = 0;
   if (!i33) break;
   i62 = i42 + 4 | 0;
   i30 = 0;
   i31 = 0;
   while (1) {
    i32 = i20 + (i62 + (i30 << 3)) | 0;
    L206 : do switch (((HEAPU8[i32 >> 0] << 8 | HEAPU8[i32 + 1 >> 0]) & 65535) << 16 >> 16) {
    case 3:
     {
      i29 = i32 + 2 | 0;
      switch (((HEAPU8[i29 >> 0] << 8 | HEAPU8[i29 + 1 >> 0]) & 65535) << 16 >> 16) {
      case 10:
      case 1:
       break;
      default:
       {
        i72 = i31;
        break L206;
       }
      }
      i29 = i32 + 4 | 0;
      i24 = (HEAPU8[i29 + 1 >> 0] << 16 | HEAPU8[i29 >> 0] << 24 | HEAPU8[i29 + 2 >> 0] << 8 | HEAPU8[i29 + 3 >> 0]) + i42 | 0;
      HEAP32[i41 >> 2] = i24;
      i72 = i24;
      break;
     }
    case 0:
     {
      i24 = i32 + 4 | 0;
      i29 = (HEAPU8[i24 + 1 >> 0] << 16 | HEAPU8[i24 >> 0] << 24 | HEAPU8[i24 + 2 >> 0] << 8 | HEAPU8[i24 + 3 >> 0]) + i42 | 0;
      HEAP32[i41 >> 2] = i29;
      i72 = i29;
      break;
     }
    default:
     i72 = i31;
    } while (0);
    i30 = i30 + 1 | 0;
    if ((i30 | 0) >= (i33 | 0)) break; else i31 = i72;
   }
   if (!i72) break;
   i31 = i20 + (HEAP32[i40 >> 2] | 0) + 50 | 0;
   HEAP32[i27 + (i26 * 140 | 0) + 48 >> 2] = HEAPU8[i31 >> 0] << 8 | HEAPU8[i31 + 1 >> 0];
   i26 = i26 + 1 | 0;
   if ((i26 | 0) >= (HEAP32[i14 >> 2] | 0)) break L51;
  }
  if ((i2 | 0) == 36) ___assert_fail(50611, 38201, 1747, 50458); else if ((i2 | 0) == 59) ___assert_fail(50693, 38201, 1750, 50458); else if ((i2 | 0) == 127) ___assert_fail(50765, 50789, 1116, 50855); else if ((i2 | 0) == 131) ___assert_fail(50765, 50789, 1116, 50855); else if ((i2 | 0) == 137) ___assert_fail(50765, 50789, 1116, 50855); else if ((i2 | 0) == 140) ___assert_fail(50765, 50789, 1116, 50855);
  HEAP32[i16 >> 2] = 0;
  HEAP32[i15 >> 2] = 0;
  __ZN5ImGui7MemFreeEPv(i27);
  i37 = 0;
  STACKTOP = i3;
  return i37 | 0;
 } while (0);
 i72 = i34 * 28 | 0;
 i42 = __ZN5ImGui8MemAllocEj(i72) | 0;
 i70 = i34 << 4;
 i71 = __ZN5ImGui8MemAllocEj(i70) | 0;
 i43 = i35 * 24 | 0;
 i69 = __ZN5ImGui8MemAllocEj(i43) | 0;
 _memset(i42 | 0, 0, i72 | 0) | 0;
 _memset(i71 | 0, 0, i70 | 0) | 0;
 _memset(i69 | 0, 0, i43 | 0) | 0;
 L245 : do if ((HEAP32[i14 >> 2] | 0) > 0) {
  i43 = i1 + 80 | 0;
  i70 = i28 + 65535 | 0;
  i72 = 0;
  i13 = 0;
  i68 = 0;
  i61 = 0;
  while (1) {
   i60 = HEAP32[i43 >> 2] | 0;
   i50 = HEAP32[i60 + (i61 * 116 | 0) + 48 >> 2] | 0;
   i54 = HEAP16[i50 >> 1] | 0;
   L249 : do if (!(i54 << 16 >> 16)) {
    i73 = 0;
    i74 = 0;
   } else {
    i52 = 0;
    i48 = 0;
    i58 = i50;
    i59 = i54;
    while (1) {
     i56 = HEAP16[i58 + 2 >> 1] | 0;
     if (!(i56 << 16 >> 16)) {
      i73 = i52;
      i74 = i48;
      break L249;
     }
     i57 = i52 + 1 - (i59 & 65535) + (i56 & 65535) | 0;
     i58 = i58 + 4 | 0;
     i56 = i48 + 1 | 0;
     i59 = HEAP16[i58 >> 1] | 0;
     if (!(i59 << 16 >> 16)) {
      i73 = i57;
      i74 = i56;
      break;
     } else {
      i52 = i57;
      i48 = i56;
     }
    }
   } while (0);
   i54 = i69 + (i68 * 24 | 0) | 0;
   i40 = i27 + (i61 * 140 | 0) | 0;
   i20 = i40 + 132 | 0;
   HEAP32[i20 >> 2] = i54;
   i48 = i40 + 136 | 0;
   HEAP32[i48 >> 2] = i74;
   i40 = i74 + i68 | 0;
   i52 = (i74 | 0) > 0;
   if (i52) {
    i59 = HEAP32[i60 + (i61 * 116 | 0) + 16 >> 2] | 0;
    i58 = 0;
    i56 = i72;
    while (1) {
     i57 = i50 + (i58 << 1 << 1) | 0;
     i55 = i54 + (i58 * 24 | 0) | 0;
     HEAP32[i55 >> 2] = i59;
     i53 = HEAPU16[i57 >> 1] | 0;
     HEAP32[i55 + 4 >> 2] = i53;
     i51 = (HEAPU16[i57 + 2 >> 1] | 0) - i53 + 1 | 0;
     HEAP32[i55 + 12 >> 2] = i51;
     HEAP32[i55 + 16 >> 2] = i42 + (i56 * 28 | 0);
     i55 = i51 + i56 | 0;
     i58 = i58 + 1 | 0;
     if ((i58 | 0) == (i74 | 0)) {
      i75 = i55;
      break;
     } else i56 = i55;
    }
   } else i75 = i72;
   i56 = i71 + (i13 << 4) | 0;
   i58 = i27 + (i61 * 140 | 0) | 0;
   i59 = i58 + 124 | 0;
   HEAP32[i59 >> 2] = i56;
   HEAP32[i58 + 128 >> 2] = i73;
   i58 = i73 + i13 | 0;
   i50 = i60 + (i61 * 116 | 0) | 0;
   i55 = HEAP32[i50 + 20 >> 2] | 0;
   i51 = HEAP32[i50 + 24 >> 2] | 0;
   if (i55 >>> 0 >= 9) {
    i2 = 170;
    break;
   }
   if (i51 >>> 0 >= 9) {
    i2 = 172;
    break;
   }
   i50 = i27 + (i61 * 140 | 0) | 0;
   if (i52) {
    i53 = i27 + (i61 * 140 | 0) | 0;
    i57 = i53 + 4 | 0;
    i49 = i53 + 28 | 0;
    i46 = i53 + 20 | 0;
    i53 = i55 & 255;
    i47 = i51 & 255;
    f76 = Math_fround(i55 >>> 0);
    f77 = Math_fround(i51 >>> 0);
    i45 = i70 + i55 | 0;
    i55 = i70 + i51 | 0;
    i51 = 0;
    i39 = 0;
    while (1) {
     f78 = Math_fround(HEAPF32[i54 + (i39 * 24 | 0) >> 2]);
     if (f78 > Math_fround(0.0)) {
      i26 = (HEAP32[i57 >> 2] | 0) + (HEAP32[i49 >> 2] | 0) | 0;
      i19 = i26 + 4 | 0;
      i23 = i26 + 6 | 0;
      f79 = Math_fround(f78 / Math_fround(((HEAPU8[i19 >> 0] << 8 | HEAPU8[i19 + 1 >> 0]) << 16 >> 16) - ((HEAPU8[i23 >> 0] << 8 | HEAPU8[i23 + 1 >> 0]) << 16 >> 16) | 0));
     } else {
      f80 = Math_fround(-f78);
      i23 = (HEAP32[i57 >> 2] | 0) + (HEAP32[i46 >> 2] | 0) + 18 | 0;
      f79 = Math_fround(f80 / Math_fround((HEAPU8[i23 >> 0] << 8 | HEAPU8[i23 + 1 >> 0]) & 65535));
     }
     i23 = i54 + (i39 * 24 | 0) | 0;
     HEAP8[i23 + 20 >> 0] = i53;
     HEAP8[i23 + 21 >> 0] = i47;
     i19 = i23 + 12 | 0;
     if ((HEAP32[i19 >> 2] | 0) > 0) {
      i23 = i54 + (i39 * 24 | 0) | 0;
      i26 = i23 + 8 | 0;
      i38 = i23 + 4 | 0;
      f80 = Math_fround(f79 * f76);
      f78 = Math_fround(f79 * f77);
      i23 = 0;
      i31 = i51;
      while (1) {
       i33 = HEAP32[i26 >> 2] | 0;
       if (!i33) i81 = (HEAP32[i38 >> 2] | 0) + i23 | 0; else i81 = HEAP32[i33 + (i23 << 2) >> 2] | 0;
       __ZL31stbtt_GetGlyphBitmapBoxSubpixelPK14stbtt_fontinfoiffffPiS2_S2_S2_(i50, __ZL20stbtt_FindGlyphIndexPK14stbtt_fontinfoi(i50, i81) | 0, f80, f78, i4, i5, i6, i7);
       i33 = i56 + (i31 << 4) | 0;
       HEAP16[i33 + 4 >> 1] = i45 + (HEAP32[i6 >> 2] | 0) - (HEAP32[i4 >> 2] | 0);
       HEAP16[i33 + 6 >> 1] = i55 + (HEAP32[i7 >> 2] | 0) - (HEAP32[i5 >> 2] | 0);
       i33 = i31 + 1 | 0;
       i23 = i23 + 1 | 0;
       if ((i23 | 0) >= (HEAP32[i19 >> 2] | 0)) {
        i82 = i33;
        break;
       } else i31 = i33;
      }
     } else i82 = i51;
     i39 = i39 + 1 | 0;
     if ((i39 | 0) == (i74 | 0)) {
      i83 = i82;
      break;
     } else i51 = i82;
    }
   } else i83 = 0;
   if ((i83 | 0) != (i73 | 0)) {
    i2 = 189;
    break;
   }
   i51 = HEAP32[i48 >> 2] | 0;
   if ((i51 | 0) > 0) {
    i39 = 0;
    i55 = 0;
    i45 = i51;
    i51 = HEAP32[i20 >> 2] | 0;
    while (1) {
     if ((HEAP32[i51 + (i39 * 24 | 0) + 12 >> 2] | 0) > 0) {
      i56 = 0;
      i54 = i55;
      i47 = i51;
      do {
       if (!(__ZL20stbtt_FindGlyphIndexPK14stbtt_fontinfoi(i50, (HEAP32[i47 + (i39 * 24 | 0) + 4 >> 2] | 0) + i56 | 0) | 0)) {
        i53 = HEAP32[i59 >> 2] | 0;
        i46 = i53 + (i54 << 4) | 0;
        HEAP16[i46 + 6 >> 1] = 0;
        HEAP16[i46 + 4 >> 1] = 0;
       }
       i56 = i56 + 1 | 0;
       i54 = i54 + 1 | 0;
       i47 = HEAP32[i20 >> 2] | 0;
      } while ((i56 | 0) < (HEAP32[i47 + (i39 * 24 | 0) + 12 >> 2] | 0));
      i84 = i54;
      i85 = i47;
      i86 = HEAP32[i48 >> 2] | 0;
     } else {
      i84 = i55;
      i85 = i51;
      i86 = i45;
     }
     i39 = i39 + 1 | 0;
     if ((i39 | 0) >= (i86 | 0)) break; else {
      i55 = i84;
      i45 = i86;
      i51 = i85;
     }
    }
   }
   __ZL16stbrp_pack_rectsP13stbrp_contextP10stbrp_recti(i22, HEAP32[i59 >> 2] | 0, i73);
   if ((i73 | 0) > 0) {
    i51 = HEAP32[i59 >> 2] | 0;
    i45 = 0;
    do {
     do if (!(HEAP16[i51 + (i45 << 4) + 4 >> 1] | 0)) {
      if (HEAP16[i51 + (i45 << 4) + 6 >> 1] | 0) break;
      HEAP32[i51 + (i45 << 4) + 12 >> 2] = 0;
     } while (0);
     if (HEAP32[i51 + (i45 << 4) + 12 >> 2] | 0) {
      i47 = HEAP32[i16 >> 2] | 0;
      i54 = i51 + (i45 << 4) | 0;
      i55 = (HEAPU16[i54 + 6 >> 1] | 0) + (HEAPU16[i54 + 10 >> 1] | 0) | 0;
      HEAP32[i16 >> 2] = (i47 | 0) >= (i55 | 0) ? i47 : i55;
     }
     i45 = i45 + 1 | 0;
    } while ((i45 | 0) != (i73 | 0));
   }
   i61 = i61 + 1 | 0;
   if ((i61 | 0) >= (HEAP32[i14 >> 2] | 0)) {
    i87 = i75;
    i88 = i58;
    i89 = i40;
    break L245;
   } else {
    i72 = i75;
    i13 = i58;
    i68 = i40;
   }
  }
  if ((i2 | 0) == 170) ___assert_fail(50871, 50789, 3810, 50889); else if ((i2 | 0) == 172) ___assert_fail(50915, 50789, 3811, 50889); else if ((i2 | 0) == 189) ___assert_fail(50933, 38201, 1799, 50458);
 } else {
  i87 = 0;
  i88 = 0;
  i89 = 0;
 } while (0);
 if ((i88 | 0) != (i34 | 0)) ___assert_fail(50956, 38201, 1822, 50458);
 if ((i87 | 0) != (i34 | 0)) ___assert_fail(50990, 38201, 1823, 50458);
 if ((i89 | 0) != (i35 | 0)) ___assert_fail(51030, 38201, 1824, 50458);
 i35 = HEAP32[i16 >> 2] | 0;
 if (!(HEAP32[i1 >> 2] & 1)) {
  i89 = i35 + -1 | 0;
  i34 = i89 >> 1 | i89;
  i89 = i34 >> 2 | i34;
  i34 = i89 >> 4 | i89;
  i89 = i34 >> 8 | i34;
  i90 = i89 >> 16 | i89;
 } else i90 = i35;
 i35 = i90 + 1 | 0;
 HEAP32[i16 >> 2] = i35;
 i90 = HEAP32[i15 >> 2] | 0;
 f79 = Math_fround(Math_fround(1.0) / Math_fround(i90 | 0));
 f77 = Math_fround(Math_fround(1.0) / Math_fround(i35 | 0));
 HEAPF32[i1 + 32 >> 2] = f79;
 HEAPF32[i17 >> 2] = f77;
 i17 = __ZN5ImGui8MemAllocEj(Math_imul(i35, i90) | 0) | 0;
 HEAP32[i18 >> 2] = i17;
 _memset(i17 | 0, 0, Math_imul(HEAP32[i16 >> 2] | 0, HEAP32[i15 >> 2] | 0) | 0) | 0;
 L322 : do if ((HEAP32[i14 >> 2] | 0) > 0) {
  i17 = HEAP32[i18 >> 2] | 0;
  i90 = i1 + 80 | 0;
  i35 = 0;
  L324 : while (1) {
   i89 = HEAP32[i90 >> 2] | 0;
   if ((HEAP32[i89 + (i35 * 116 | 0) + 20 >> 2] | 0) >>> 0 >= 9) {
    i2 = 217;
    break;
   }
   if ((HEAP32[i89 + (i35 * 116 | 0) + 24 >> 2] | 0) >>> 0 >= 9) {
    i2 = 219;
    break;
   }
   i34 = i27 + (i35 * 140 | 0) | 0;
   i87 = i34 | 0;
   i88 = HEAP32[i34 + 132 >> 2] | 0;
   i75 = HEAP32[i34 + 136 >> 2] | 0;
   i73 = i34 + 124 | 0;
   i34 = HEAP32[i73 >> 2] | 0;
   if ((i75 | 0) > 0) {
    i85 = i27 + (i35 * 140 | 0) | 0;
    i86 = i85 + 4 | 0;
    i84 = i85 + 28 | 0;
    i83 = i85 + 32 | 0;
    i82 = i85 + 20 | 0;
    i85 = 0;
    i74 = 0;
    while (1) {
     f77 = Math_fround(HEAPF32[i88 + (i74 * 24 | 0) >> 2]);
     if (f77 > Math_fround(0.0)) {
      i81 = (HEAP32[i86 >> 2] | 0) + (HEAP32[i84 >> 2] | 0) | 0;
      i68 = i81 + 4 | 0;
      i13 = i81 + 6 | 0;
      f91 = Math_fround(f77 / Math_fround(((HEAPU8[i68 >> 0] << 8 | HEAPU8[i68 + 1 >> 0]) << 16 >> 16) - ((HEAPU8[i13 >> 0] << 8 | HEAPU8[i13 + 1 >> 0]) << 16 >> 16) | 0));
     } else {
      f79 = Math_fround(-f77);
      i13 = (HEAP32[i86 >> 2] | 0) + (HEAP32[i82 >> 2] | 0) + 18 | 0;
      f91 = Math_fround(f79 / Math_fround((HEAPU8[i13 >> 0] << 8 | HEAPU8[i13 + 1 >> 0]) & 65535));
     }
     i13 = i88 + (i74 * 24 | 0) | 0;
     i68 = HEAP8[i13 + 20 >> 0] | 0;
     i81 = i68 & 255;
     i72 = HEAP8[i13 + 21 >> 0] | 0;
     i61 = i72 & 255;
     f79 = Math_fround(i68 & 255);
     f77 = Math_fround(Math_fround(1.0) / f79);
     f76 = Math_fround(i72 & 255);
     f78 = Math_fround(Math_fround(1.0) / f76);
     i70 = 1 - i81 | 0;
     f80 = Math_fround(Math_fround(i70 | 0) / Math_fround(f79 * Math_fround(2.0)));
     f92 = i68 << 24 >> 24 == 0 ? Math_fround(0.0) : f80;
     i43 = 1 - i61 | 0;
     f80 = Math_fround(Math_fround(i43 | 0) / Math_fround(f76 * Math_fround(2.0)));
     f93 = i72 << 24 >> 24 == 0 ? Math_fround(0.0) : f80;
     i45 = i13 + 12 | 0;
     i13 = HEAP32[i45 >> 2] | 0;
     if ((i13 | 0) > 0) {
      i51 = i88 + (i74 * 24 | 0) | 0;
      i59 = i51 + 16 | 0;
      i55 = i51 + 8 | 0;
      i47 = i51 + 4 | 0;
      f80 = Math_fround(f91 * f79);
      f79 = Math_fround(f91 * f76);
      i51 = (i68 & 255) > 1;
      i54 = (i72 & 255) > 1;
      f76 = Math_fround(Math_fround(.349999994) / (f80 > f79 ? f79 : f80));
      f94 = Math_fround(f76 * f76);
      f76 = Math_fround(-f79);
      i39 = 0;
      i48 = i85;
      i20 = i13;
      while (1) {
       if (!(HEAP32[i34 + (i48 << 4) + 12 >> 2] | 0)) i95 = i20; else {
        i13 = HEAP32[i59 >> 2] | 0;
        i50 = HEAP32[i55 >> 2] | 0;
        if (!i50) i96 = (HEAP32[i47 >> 2] | 0) + i39 | 0; else i96 = HEAP32[i50 + (i39 << 2) >> 2] | 0;
        i50 = __ZL20stbtt_FindGlyphIndexPK14stbtt_fontinfoi(i87, i96) | 0;
        i56 = i34 + (i48 << 4) | 0;
        i46 = i56 + 8 | 0;
        HEAP16[i46 >> 1] = i28 + (HEAPU16[i46 >> 1] | 0);
        i53 = i56 + 10 | 0;
        HEAP16[i53 >> 1] = i28 + (HEAPU16[i53 >> 1] | 0);
        i57 = i56 + 4 | 0;
        HEAP16[i57 >> 1] = (HEAPU16[i57 >> 1] | 0) - i28;
        i49 = i56 + 6 | 0;
        HEAP16[i49 >> 1] = (HEAPU16[i49 >> 1] | 0) - i28;
        i56 = HEAP32[i86 >> 2] | 0;
        i52 = i56 + (HEAP32[i84 >> 2] | 0) + 34 | 0;
        i60 = HEAPU8[i52 >> 0] << 8 | HEAPU8[i52 + 1 >> 0];
        i52 = i56 + (HEAP32[i83 >> 2] | 0) | 0;
        i56 = (i50 | 0) < (i60 | 0) ? i52 + (i50 << 2) | 0 : i52 + ((i60 << 2) + -4) | 0;
        i60 = (HEAPU8[i56 >> 0] << 8 | HEAPU8[i56 + 1 >> 0]) << 16 >> 16;
        __ZL31stbtt_GetGlyphBitmapBoxSubpixelPK14stbtt_fontinfoiffffPiS2_S2_S2_(i87, i50, f80, f79, i9, i10, i11, i12);
        i56 = i17 + (HEAPU16[i46 >> 1] | 0) + (Math_imul(i36, HEAPU16[i53 >> 1] | 0) | 0) | 0;
        i52 = (HEAPU16[i57 >> 1] | 0) - i81 | 0;
        i31 = i52 + 1 | 0;
        i19 = (HEAPU16[i49 >> 1] | 0) - i61 | 0;
        i23 = i19 + 1 | 0;
        i38 = __ZL19stbtt_GetGlyphShapePK14stbtt_fontinfoiPP12stbtt_vertex(i87, i50, i8) | 0;
        __ZL31stbtt_GetGlyphBitmapBoxSubpixelPK14stbtt_fontinfoiffffPiS2_S2_S2_(i87, i50, f80, f79, i6, i7, 0, 0);
        L346 : do if (!((i31 | 0) == 0 | (i23 | 0) == 0)) {
         i50 = HEAP32[i8 >> 2] | 0;
         i26 = HEAP32[i6 >> 2] | 0;
         i33 = HEAP32[i7 >> 2] | 0;
         HEAP32[i4 >> 2] = 0;
         do if ((i38 | 0) > 0) {
          i30 = 0;
          i41 = 0;
          do {
           i30 = i30 + ((HEAP8[i50 + (i41 * 14 | 0) + 12 >> 0] | 0) == 1 & 1) | 0;
           i41 = i41 + 1 | 0;
          } while ((i41 | 0) != (i38 | 0));
          if (!i30) break;
          i41 = __ZN5ImGui8MemAllocEj(i30 << 2) | 0;
          if (!i41) break; else {
           i97 = 0;
           i98 = 0;
           i99 = 0;
           i100 = 0;
          }
          while (1) {
           if ((i97 | 0) == 1) {
            i62 = __ZN5ImGui8MemAllocEj(HEAP32[i4 >> 2] << 3) | 0;
            if (!i62) {
             i2 = 250;
             break;
            } else {
             i101 = i62;
             i102 = i62;
            }
           } else {
            i101 = i99;
            i102 = i100;
           }
           HEAP32[i4 >> 2] = 0;
           i103 = (i101 | 0) == 0;
           f104 = Math_fround(0.0);
           f105 = Math_fround(0.0);
           i62 = i98;
           i32 = 0;
           i29 = -1;
           while (1) {
            i24 = i50 + (i32 * 14 | 0) | 0;
            L360 : do switch (HEAP8[i50 + (i32 * 14 | 0) + 12 >> 0] | 0) {
            case 1:
             {
              if ((i29 | 0) > -1) HEAP32[i41 + (i29 << 2) >> 2] = (HEAP32[i4 >> 2] | 0) - i62;
              i63 = i29 + 1 | 0;
              i64 = HEAP32[i4 >> 2] | 0;
              f106 = Math_fround(HEAP16[i24 >> 1] | 0);
              f107 = Math_fround(HEAP16[i50 + (i32 * 14 | 0) + 2 >> 1] | 0);
              HEAP32[i4 >> 2] = i64 + 1;
              if (i103) {
               f108 = f107;
               f109 = f106;
               i110 = i64;
               i111 = i63;
               break L360;
              }
              i44 = i101 + (i64 << 3) | 0;
              HEAPF32[i44 >> 2] = f106;
              HEAPF32[i44 + 4 >> 2] = f107;
              f108 = f107;
              f109 = f106;
              i110 = i64;
              i111 = i63;
              break;
             }
            case 2:
             {
              f106 = Math_fround(HEAP16[i24 >> 1] | 0);
              f107 = Math_fround(HEAP16[i50 + (i32 * 14 | 0) + 2 >> 1] | 0);
              i63 = HEAP32[i4 >> 2] | 0;
              HEAP32[i4 >> 2] = i63 + 1;
              if (i103) {
               f108 = f107;
               f109 = f106;
               i110 = i62;
               i111 = i29;
               break L360;
              }
              i64 = i101 + (i63 << 3) | 0;
              HEAPF32[i64 >> 2] = f106;
              HEAPF32[i64 + 4 >> 2] = f107;
              f108 = f107;
              f109 = f106;
              i110 = i62;
              i111 = i29;
              break;
             }
            case 3:
             {
              i64 = i50 + (i32 * 14 | 0) | 0;
              f106 = Math_fround(HEAP16[i64 + 4 >> 1] | 0);
              i63 = i64 + 2 | 0;
              __ZL22stbtt__tesselate_curveP12stbtt__pointPifffffffi(i101, i4, f104, f105, f106, Math_fround(HEAP16[i64 + 6 >> 1] | 0), Math_fround(HEAP16[i24 >> 1] | 0), Math_fround(HEAP16[i63 >> 1] | 0), f94, 0);
              f106 = Math_fround(HEAP16[i24 >> 1] | 0);
              f108 = Math_fround(HEAP16[i63 >> 1] | 0);
              f109 = f106;
              i110 = i62;
              i111 = i29;
              break;
             }
            case 4:
             {
              i63 = i50 + (i32 * 14 | 0) | 0;
              f106 = Math_fround(HEAP16[i63 + 4 >> 1] | 0);
              f107 = Math_fround(HEAP16[i63 + 6 >> 1] | 0);
              f112 = Math_fround(HEAP16[i63 + 8 >> 1] | 0);
              i64 = i63 + 2 | 0;
              __ZL22stbtt__tesselate_cubicP12stbtt__pointPifffffffffi(i101, i4, f104, f105, f106, f107, f112, Math_fround(HEAP16[i63 + 10 >> 1] | 0), Math_fround(HEAP16[i24 >> 1] | 0), Math_fround(HEAP16[i64 >> 1] | 0), f94, 0);
              f112 = Math_fround(HEAP16[i24 >> 1] | 0);
              f108 = Math_fround(HEAP16[i64 >> 1] | 0);
              f109 = f112;
              i110 = i62;
              i111 = i29;
              break;
             }
            default:
             {
              f108 = f105;
              f109 = f104;
              i110 = i62;
              i111 = i29;
             }
            } while (0);
            i32 = i32 + 1 | 0;
            if ((i32 | 0) == (i38 | 0)) break; else {
             f104 = f109;
             f105 = f108;
             i62 = i110;
             i29 = i111;
            }
           }
           HEAP32[i41 + (i111 << 2) >> 2] = (HEAP32[i4 >> 2] | 0) - i110;
           if ((i97 | 0) < 1) {
            i97 = i97 + 1 | 0;
            i98 = i110;
            i99 = i101;
            i100 = i102;
           } else break;
          }
          if ((i2 | 0) == 250) {
           i2 = 0;
           __ZN5ImGui7MemFreeEPv(0);
           __ZN5ImGui7MemFreeEPv(i41);
           break;
          }
          if (i103) break L346;
          i29 = (i30 | 0) > 0;
          if (i29) {
           i62 = 0;
           i32 = 0;
           while (1) {
            i24 = (HEAP32[i41 + (i32 << 2) >> 2] | 0) + i62 | 0;
            i32 = i32 + 1 | 0;
            if ((i32 | 0) == (i30 | 0)) {
             i113 = i24;
             break;
            } else i62 = i24;
           }
          } else i113 = 0;
          i62 = __ZN5ImGui8MemAllocEj((i113 * 20 | 0) + 20 | 0) | 0;
          if (i62 | 0) {
           do if (i29) {
            i32 = 0;
            i24 = 0;
            i64 = 0;
            while (1) {
             i63 = i101 + (i32 << 3) | 0;
             i44 = i41 + (i24 << 2) | 0;
             i66 = HEAP32[i44 >> 2] | 0;
             i32 = i66 + i32 | 0;
             i65 = i66 + -1 | 0;
             if ((i66 | 0) > 0) {
              i67 = 0;
              i25 = i65;
              i114 = i64;
              f105 = Math_fround(HEAPF32[i63 + (i65 << 3) + 4 >> 2]);
              i65 = i66;
              while (1) {
               f104 = f105;
               f105 = Math_fround(HEAPF32[i63 + (i67 << 3) + 4 >> 2]);
               if (f104 == f105) {
                i115 = i114;
                i116 = i65;
               } else {
                i66 = i62 + (i114 * 20 | 0) + 16 | 0;
                HEAP32[i66 >> 2] = 0;
                f104 = Math_fround(HEAPF32[i63 + (i25 << 3) + 4 >> 2]);
                if (f104 > f105) {
                 HEAP32[i66 >> 2] = 1;
                 i117 = i67;
                 i118 = i25;
                 f119 = f104;
                 f120 = f105;
                } else {
                 i117 = i25;
                 i118 = i67;
                 f119 = f105;
                 f120 = f104;
                }
                f104 = Math_fround(Math_fround(f80 * Math_fround(HEAPF32[i63 + (i118 << 3) >> 2])) + Math_fround(0.0));
                i66 = i62 + (i114 * 20 | 0) | 0;
                HEAPF32[i66 >> 2] = f104;
                f104 = Math_fround(Math_fround(f119 * f76) + Math_fround(0.0));
                HEAPF32[i66 + 4 >> 2] = f104;
                f104 = Math_fround(Math_fround(f80 * Math_fround(HEAPF32[i63 + (i117 << 3) >> 2])) + Math_fround(0.0));
                HEAPF32[i66 + 8 >> 2] = f104;
                f104 = Math_fround(Math_fround(f120 * f76) + Math_fround(0.0));
                HEAPF32[i66 + 12 >> 2] = f104;
                i115 = i114 + 1 | 0;
                i116 = HEAP32[i44 >> 2] | 0;
               }
               i66 = i67 + 1 | 0;
               if ((i66 | 0) >= (i116 | 0)) {
                i121 = i115;
                break;
               } else {
                i122 = i67;
                i67 = i66;
                i114 = i115;
                i65 = i116;
                i25 = i122;
               }
              }
             } else i121 = i64;
             i24 = i24 + 1 | 0;
             if ((i24 | 0) == (i30 | 0)) break; else i64 = i121;
            }
            __ZL27stbtt__sort_edges_quicksortP11stbtt__edgei(i62, i121);
            if ((i121 | 0) > 1) i123 = 1; else {
             i124 = i121;
             break;
            }
            do {
             i64 = i62 + (i123 * 20 | 0) | 0;
             i24 = HEAP32[i64 >> 2] | 0;
             f105 = Math_fround(HEAPF32[i64 + 4 >> 2]);
             i32 = i64 + 8 | 0;
             HEAP32[i4 >> 2] = HEAP32[i32 >> 2];
             HEAP32[i4 + 4 >> 2] = HEAP32[i32 + 4 >> 2];
             HEAP32[i4 + 8 >> 2] = HEAP32[i32 + 8 >> 2];
             i32 = i123;
             while (1) {
              i64 = i32 + -1 | 0;
              if (!(f105 < Math_fround(HEAPF32[i62 + (i64 * 20 | 0) + 4 >> 2]))) {
               i125 = i32;
               break;
              }
              i25 = i62 + (i64 * 20 | 0) | 0;
              i65 = i62 + (i32 * 20 | 0) | 0;
              HEAP32[i65 >> 2] = HEAP32[i25 >> 2];
              HEAP32[i65 + 4 >> 2] = HEAP32[i25 + 4 >> 2];
              HEAP32[i65 + 8 >> 2] = HEAP32[i25 + 8 >> 2];
              HEAP32[i65 + 12 >> 2] = HEAP32[i25 + 12 >> 2];
              HEAP32[i65 + 16 >> 2] = HEAP32[i25 + 16 >> 2];
              if ((i32 | 0) > 1) i32 = i64; else {
               i125 = i64;
               break;
              }
             }
             if ((i123 | 0) != (i125 | 0)) {
              i32 = i62 + (i125 * 20 | 0) | 0;
              i64 = i32 + 8 | 0;
              HEAP32[i32 >> 2] = i24;
              HEAPF32[i32 + 4 >> 2] = f105;
              HEAP32[i64 >> 2] = HEAP32[i4 >> 2];
              HEAP32[i64 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
              HEAP32[i64 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
             }
             i123 = i123 + 1 | 0;
            } while ((i123 | 0) != (i121 | 0));
            i124 = i121;
           } else i124 = 0; while (0);
           HEAP32[i4 >> 2] = 0;
           if ((i52 | 0) > 63) i126 = __ZN5ImGui8MemAllocEj(i31 << 3 | 4) | 0; else i126 = i5;
           i30 = i126 + (i31 << 2) | 0;
           f104 = Math_fround(Math_fround(i33 + i23 | 0) + Math_fround(1.0));
           HEAPF32[i62 + (i124 * 20 | 0) + 4 >> 2] = f104;
           do if ((i19 | 0) > -1) {
            i29 = i30 + 4 | 0;
            i64 = i29 + -4 | 0;
            f104 = Math_fround(i26 | 0);
            i32 = i31 << 2;
            i25 = i32 + 4 | 0;
            i65 = (i52 | 0) > -1;
            f112 = Math_fround(i31 | 0);
            i114 = i62;
            i67 = i33;
            i44 = 0;
            i63 = 0;
            i122 = 0;
            i66 = 0;
            i127 = 0;
            while (1) {
             f107 = Math_fround(i67 | 0);
             f106 = Math_fround(f107 + Math_fround(1.0));
             _memset(i126 | 0, 0, i32 | 0) | 0;
             _memset(i30 | 0, 0, i25 | 0) | 0;
             L414 : do if (!i127) i128 = i66; else {
              i129 = i4;
              i130 = i66;
              i131 = i127;
              while (1) {
               i132 = i129;
               i133 = i131;
               while (1) {
                if (Math_fround(HEAPF32[i133 + 24 >> 2]) <= f107) break;
                i134 = HEAP32[i133 >> 2] | 0;
                if (!i134) {
                 i128 = i130;
                 break L414;
                } else {
                 i135 = i133;
                 i133 = i134;
                 i132 = i135;
                }
               }
               HEAP32[i132 >> 2] = HEAP32[i133 >> 2];
               i135 = i133 + 16 | 0;
               if (!(Math_fround(HEAPF32[i135 >> 2]) != Math_fround(0.0))) {
                i2 = 281;
                break L324;
               }
               HEAPF32[i135 >> 2] = Math_fround(0.0);
               HEAP32[i133 >> 2] = i130;
               i135 = i133;
               i131 = HEAP32[i132 >> 2] | 0;
               if (!i131) {
                i128 = i135;
                break;
               } else {
                i129 = i132;
                i130 = i135;
               }
              }
             } while (0);
             i24 = i114 + 4 | 0;
             f105 = Math_fround(HEAPF32[i24 >> 2]);
             if (!(f105 <= f106)) {
              i136 = i114;
              i137 = i63;
              i138 = i122;
              i139 = i128;
             } else {
              i130 = i114;
              i129 = i63;
              i131 = i122;
              i135 = i128;
              f140 = f105;
              i134 = i24;
              while (1) {
               i24 = i130 + 12 | 0;
               if (f140 != Math_fround(HEAPF32[i24 >> 2])) {
                do if (!i135) {
                 if (!i131) {
                  i141 = __ZN5ImGui8MemAllocEj(56004) | 0;
                  if (!i141) {
                   i142 = 0;
                   i143 = i129;
                   i144 = 0;
                   i145 = 0;
                   break;
                  }
                  HEAP32[i141 >> 2] = i129;
                  i146 = i141;
                  i147 = i141;
                  i148 = 1999;
                 } else {
                  i146 = i129;
                  i147 = i129;
                  i148 = i131 + -1 | 0;
                 }
                 i142 = i147 + 4 + (i148 * 28 | 0) | 0;
                 i143 = i146;
                 i144 = i148;
                 i145 = 0;
                } else {
                 i142 = i135;
                 i143 = i129;
                 i144 = i131;
                 i145 = HEAP32[i135 >> 2] | 0;
                } while (0);
                f105 = Math_fround(HEAPF32[i130 + 8 >> 2]);
                f149 = Math_fround(HEAPF32[i130 >> 2]);
                f150 = Math_fround(f105 - f149);
                f105 = Math_fround(HEAPF32[i24 >> 2]);
                f151 = Math_fround(HEAPF32[i134 >> 2]);
                f152 = Math_fround(f150 / Math_fround(f105 - f151));
                if (!i142) {
                 i2 = 293;
                 break L324;
                }
                HEAPF32[i142 + 8 >> 2] = f152;
                i141 = f152 != Math_fround(0.0);
                f150 = Math_fround(Math_fround(1.0) / f152);
                f153 = i141 ? f150 : Math_fround(0.0);
                HEAPF32[i142 + 12 >> 2] = f153;
                f153 = Math_fround(Math_fround(f149 + Math_fround(Math_fround(f107 - f151) * f152)) - f104);
                HEAPF32[i142 + 4 >> 2] = f153;
                f153 = HEAP32[i130 + 16 >> 2] | 0 ? Math_fround(1.0) : Math_fround(-1.0);
                HEAPF32[i142 + 16 >> 2] = f153;
                HEAPF32[i142 + 20 >> 2] = f151;
                HEAPF32[i142 + 24 >> 2] = f105;
                HEAP32[i142 >> 2] = 0;
                if (!(f105 >= f107)) {
                 i2 = 295;
                 break L324;
                }
                HEAP32[i142 >> 2] = HEAP32[i4 >> 2];
                HEAP32[i4 >> 2] = i142;
                i154 = i143;
                i155 = i144;
                i156 = i145;
               } else {
                i154 = i129;
                i155 = i131;
                i156 = i135;
               }
               i141 = i130 + 20 | 0;
               i134 = i130 + 24 | 0;
               f140 = Math_fround(HEAPF32[i134 >> 2]);
               if (!(f140 <= f106)) {
                i136 = i141;
                i137 = i154;
                i138 = i155;
                i139 = i156;
                break;
               } else {
                i130 = i141;
                i129 = i154;
                i131 = i155;
                i135 = i156;
               }
              }
             }
             i135 = HEAP32[i4 >> 2] | 0;
             if (i135 | 0) {
              i131 = i135;
              do {
               f140 = Math_fround(HEAPF32[i131 + 24 >> 2]);
               if (!(f140 >= f107)) {
                i2 = 300;
                break L324;
               }
               f105 = Math_fround(HEAPF32[i131 + 8 >> 2]);
               i135 = f105 == Math_fround(0.0);
               f151 = Math_fround(HEAPF32[i131 + 4 >> 2]);
               L445 : do if (i135) {
                if (!(f151 < f112)) break;
                if (!(f151 >= Math_fround(0.0))) {
                 __ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff(i64, 0, i131, f151, f107, f151, f106);
                 break;
                } else {
                 i129 = ~~f151;
                 __ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff(i126, i129, i131, f151, f107, f151, f106);
                 __ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff(i64, i129 + 1 | 0, i131, f151, f107, f151, f106);
                 break;
                }
               } else {
                f153 = Math_fround(f105 + f151);
                f152 = Math_fround(HEAPF32[i131 + 12 >> 2]);
                f149 = Math_fround(HEAPF32[i131 + 20 >> 2]);
                if (!(f149 <= f106)) {
                 i2 = 307;
                 break L324;
                }
                i129 = f149 > f107;
                f150 = Math_fround(f151 + Math_fround(f105 * Math_fround(f149 - f107)));
                f157 = i129 ? f149 : f107;
                f149 = i129 ? f150 : f151;
                i129 = f140 < f106;
                f150 = Math_fround(f151 + Math_fround(Math_fround(f140 - f107) * f105));
                f158 = i129 ? f140 : f106;
                f159 = i129 ? f150 : f153;
                do if (f159 >= Math_fround(0.0) & f149 >= Math_fround(0.0)) {
                 if (!(f159 < f112 & f149 < f112)) break;
                 i129 = ~~f149;
                 if ((i129 | 0) == (~~f159 | 0)) {
                  f150 = Math_fround(f158 - f157);
                  if (!((i129 | 0) > -1 & (i52 | 0) >= (i129 | 0))) {
                   i2 = 313;
                   break L324;
                  }
                  i130 = i131 + 16 | 0;
                  f160 = Math_fround(i129 | 0);
                  f161 = Math_fround(f150 * Math_fround(Math_fround(Math_fround(1.0) - Math_fround(Math_fround(Math_fround(f149 - f160) + Math_fround(f159 - f160)) * Math_fround(.5))) * Math_fround(HEAPF32[i130 >> 2])));
                  i134 = i126 + (i129 << 2) | 0;
                  f160 = Math_fround(Math_fround(HEAPF32[i134 >> 2]) + f161);
                  HEAPF32[i134 >> 2] = f160;
                  f160 = Math_fround(f150 * Math_fround(HEAPF32[i130 >> 2]));
                  i130 = i29 + (i129 << 2) | 0;
                  f150 = Math_fround(Math_fround(HEAPF32[i130 >> 2]) + f160);
                  HEAPF32[i130 >> 2] = f150;
                  break L445;
                 }
                 if (f149 > f159) {
                  f162 = f153;
                  f163 = Math_fround(-f152);
                  f164 = f159;
                  f165 = f149;
                  f166 = Math_fround(f106 - Math_fround(f158 - f107));
                  f167 = Math_fround(f106 - Math_fround(f157 - f107));
                 } else {
                  f162 = f151;
                  f163 = f152;
                  f164 = f149;
                  f165 = f159;
                  f166 = f157;
                  f167 = f158;
                 }
                 i130 = ~~f164;
                 i129 = ~~f165;
                 i134 = i130 + 1 | 0;
                 f150 = Math_fround(Math_fround(f163 * Math_fround(Math_fround(i134 | 0) - f162)) + f107);
                 f160 = Math_fround(HEAPF32[i131 + 16 >> 2]);
                 f161 = Math_fround(f160 * Math_fround(f150 - f166));
                 f168 = Math_fround(Math_fround(Math_fround(1.0) - Math_fround(Math_fround(Math_fround(f164 - Math_fround(i130 | 0)) + Math_fround(1.0)) * Math_fround(.5))) * f161);
                 i141 = i126 + (i130 << 2) | 0;
                 f169 = Math_fround(Math_fround(HEAPF32[i141 >> 2]) + f168);
                 HEAPF32[i141 >> 2] = f169;
                 f169 = Math_fround(f163 * f160);
                 if ((i134 | 0) < (i129 | 0)) {
                  f168 = Math_fround(f169 * Math_fround(.5));
                  f170 = f161;
                  i141 = i134;
                  while (1) {
                   f171 = Math_fround(f168 + f170);
                   i130 = i126 + (i141 << 2) | 0;
                   f172 = Math_fround(f171 + Math_fround(HEAPF32[i130 >> 2]));
                   HEAPF32[i130 >> 2] = f172;
                   f172 = Math_fround(f169 + f170);
                   i141 = i141 + 1 | 0;
                   if ((i141 | 0) == (i129 | 0)) {
                    f173 = f172;
                    break;
                   } else f170 = f172;
                  }
                 } else f173 = f161;
                 if (!(Math_fround(Math_abs(Math_fround(f173))) <= Math_fround(1.00999999))) {
                  i2 = 321;
                  break L324;
                 }
                 f170 = Math_fround(Math_fround(Math_fround(f160 * Math_fround(Math_fround(1.0) - Math_fround(Math_fround(Math_fround(f165 - Math_fround(i129 | 0)) + Math_fround(0.0)) * Math_fround(.5)))) * Math_fround(f167 - Math_fround(Math_fround(f163 * Math_fround(i129 - i134 | 0)) + f150))) + f173);
                 i141 = i126 + (i129 << 2) | 0;
                 f169 = Math_fround(f170 + Math_fround(HEAPF32[i141 >> 2]));
                 HEAPF32[i141 >> 2] = f169;
                 f169 = Math_fround(Math_fround(f167 - f166) * f160);
                 i141 = i29 + (i129 << 2) | 0;
                 f170 = Math_fround(f169 + Math_fround(HEAPF32[i141 >> 2]));
                 HEAPF32[i141 >> 2] = f170;
                 break L445;
                } while (0);
                if (i65) i174 = 0; else break;
                do {
                 f158 = Math_fround(i174 | 0);
                 i132 = i174;
                 i174 = i174 + 1 | 0;
                 f157 = Math_fround(i174 | 0);
                 f159 = Math_fround(Math_fround(Math_fround(f158 - f151) / f105) + f107);
                 f149 = Math_fround(Math_fround(Math_fround(f157 - f151) / f105) + f107);
                 i133 = f151 < f158;
                 i141 = f153 > f157;
                 do if (i133 & i141) {
                  __ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff(i126, i132, i131, f151, f107, f158, f159);
                  __ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff(i126, i132, i131, f158, f159, f157, f149);
                  __ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff(i126, i132, i131, f157, f149, f153, f106);
                 } else {
                  i130 = f153 < f158;
                  i175 = f151 > f157;
                  if (i130 & i175) {
                   __ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff(i126, i132, i131, f151, f107, f157, f149);
                   __ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff(i126, i132, i131, f157, f149, f158, f159);
                   __ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff(i126, i132, i131, f158, f159, f153, f106);
                   break;
                  }
                  if (i133 & f153 > f158) {
                   __ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff(i126, i132, i131, f151, f107, f158, f159);
                   __ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff(i126, i132, i131, f158, f159, f153, f106);
                   break;
                  }
                  if (i130 & f151 > f158) {
                   __ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff(i126, i132, i131, f151, f107, f158, f159);
                   __ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff(i126, i132, i131, f158, f159, f153, f106);
                   break;
                  }
                  if (f151 < f157 & i141) {
                   __ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff(i126, i132, i131, f151, f107, f157, f149);
                   __ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff(i126, i132, i131, f157, f149, f153, f106);
                   break;
                  }
                  if (f153 < f157 & i175) {
                   __ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff(i126, i132, i131, f151, f107, f157, f149);
                   __ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff(i126, i132, i131, f157, f149, f153, f106);
                   break;
                  } else {
                   __ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff(i126, i132, i131, f151, f107, f153, f106);
                   break;
                  }
                 } while (0);
                } while ((i174 | 0) != (i31 | 0));
               } while (0);
               i131 = HEAP32[i131 >> 2] | 0;
              } while ((i131 | 0) != 0);
             }
             if (i65) {
              i131 = Math_imul(i44, i36) | 0;
              f106 = Math_fround(0.0);
              i135 = 0;
              do {
               f106 = Math_fround(f106 + Math_fround(HEAPF32[i30 + (i135 << 2) >> 2]));
               i24 = ~~Math_fround(Math_fround(Math_fround(Math_abs(Math_fround(Math_fround(HEAPF32[i126 + (i135 << 2) >> 2]) + f106))) * Math_fround(255.0)) + Math_fround(.5));
               HEAP8[i56 + (i135 + i131) >> 0] = (i24 | 0) < 255 ? i24 : 255;
               i135 = i135 + 1 | 0;
              } while ((i135 | 0) != (i31 | 0));
             }
             i127 = HEAP32[i4 >> 2] | 0;
             if (i127 | 0) {
              i135 = i127;
              do {
               f106 = Math_fround(HEAPF32[i135 + 8 >> 2]);
               i131 = i135 + 4 | 0;
               f107 = Math_fround(f106 + Math_fround(HEAPF32[i131 >> 2]));
               HEAPF32[i131 >> 2] = f107;
               i135 = HEAP32[i135 >> 2] | 0;
              } while ((i135 | 0) != 0);
             }
             if ((i44 | 0) >= (i19 | 0)) break; else {
              i114 = i136;
              i67 = i67 + 1 | 0;
              i44 = i44 + 1 | 0;
              i63 = i137;
              i122 = i138;
              i66 = i139;
             }
            }
            if (!i137) break;
            i66 = i137;
            do {
             i122 = i66;
             i66 = HEAP32[i66 >> 2] | 0;
             __ZN5ImGui7MemFreeEPv(i122);
            } while ((i66 | 0) != 0);
           } while (0);
           if ((i126 | 0) != (i5 | 0)) __ZN5ImGui7MemFreeEPv(i126);
           __ZN5ImGui7MemFreeEPv(i62);
          }
          __ZN5ImGui7MemFreeEPv(i41);
          __ZN5ImGui7MemFreeEPv(i102);
          break L346;
         } while (0);
        } while (0);
        __ZN5ImGui7MemFreeEPv(HEAP32[i8 >> 2] | 0);
        if (i51) {
         i19 = HEAP16[i46 >> 1] | 0;
         i31 = HEAP16[i53 >> 1] | 0;
         i56 = HEAPU16[i57 >> 1] | 0;
         i52 = HEAP16[i49 >> 1] | 0;
         i23 = i52 & 65535;
         i38 = i4;
         HEAP32[i38 >> 2] = 0;
         HEAP32[i38 + 4 >> 2] = 0;
         L515 : do if (i52 << 16 >> 16) {
          i38 = i56 >>> 0 < i81 >>> 0;
          i33 = i70 + i56 | 0;
          i26 = 0;
          i50 = i17 + (i19 & 65535) + (Math_imul(i36, i31 & 65535) | 0) | 0;
          while (1) {
           _memset(i4 | 0, 0, i81 | 0) | 0;
           L519 : do switch (i68 << 24 >> 24) {
           case 2:
            {
             if (i38) {
              i176 = 0;
              i177 = 0;
              break L519;
             } else {
              i178 = 0;
              i179 = 0;
             }
             while (1) {
              i30 = i50 + i179 | 0;
              i66 = HEAP8[i30 >> 0] | 0;
              i122 = (i66 & 255) - (HEAPU8[i4 + (i179 & 7) >> 0] | 0) + i178 | 0;
              HEAP8[i4 + (i179 + 2 & 7) >> 0] = i66;
              HEAP8[i30 >> 0] = i122 >>> 1;
              i179 = i179 + 1 | 0;
              if ((i179 | 0) == (i33 | 0)) {
               i176 = i122;
               i177 = i33;
               break;
              } else i178 = i122;
             }
             break;
            }
           case 3:
            {
             if (i38) {
              i176 = 0;
              i177 = 0;
              break L519;
             } else {
              i180 = 0;
              i181 = 0;
             }
             while (1) {
              i122 = i50 + i181 | 0;
              i30 = HEAP8[i122 >> 0] | 0;
              i66 = (i30 & 255) - (HEAPU8[i4 + (i181 & 7) >> 0] | 0) + i180 | 0;
              HEAP8[i4 + (i181 + 3 & 7) >> 0] = i30;
              HEAP8[i122 >> 0] = (i66 >>> 0) / 3 | 0;
              i181 = i181 + 1 | 0;
              if ((i181 | 0) == (i33 | 0)) {
               i176 = i66;
               i177 = i33;
               break;
              } else i180 = i66;
             }
             break;
            }
           case 4:
            {
             if (i38) {
              i176 = 0;
              i177 = 0;
              break L519;
             } else {
              i182 = 0;
              i183 = 0;
             }
             while (1) {
              i66 = i50 + i183 | 0;
              i122 = HEAP8[i66 >> 0] | 0;
              i30 = (i122 & 255) - (HEAPU8[i4 + (i183 & 7) >> 0] | 0) + i182 | 0;
              HEAP8[i4 + (i183 + 4 & 7) >> 0] = i122;
              HEAP8[i66 >> 0] = i30 >>> 2;
              i183 = i183 + 1 | 0;
              if ((i183 | 0) == (i33 | 0)) {
               i176 = i30;
               i177 = i33;
               break;
              } else i182 = i30;
             }
             break;
            }
           case 5:
            {
             if (i38) {
              i176 = 0;
              i177 = 0;
              break L519;
             } else {
              i184 = 0;
              i185 = 0;
             }
             while (1) {
              i30 = i50 + i184 | 0;
              i66 = HEAP8[i30 >> 0] | 0;
              i122 = (i66 & 255) - (HEAPU8[i4 + (i184 & 7) >> 0] | 0) + i185 | 0;
              HEAP8[i4 + (i184 + 5 & 7) >> 0] = i66;
              HEAP8[i30 >> 0] = (i122 >>> 0) / 5 | 0;
              i184 = i184 + 1 | 0;
              if ((i184 | 0) == (i33 | 0)) {
               i176 = i122;
               i177 = i33;
               break;
              } else i185 = i122;
             }
             break;
            }
           default:
            {
             if (i38) {
              i176 = 0;
              i177 = 0;
              break L519;
             } else {
              i186 = 0;
              i187 = 0;
             }
             while (1) {
              i122 = i50 + i186 | 0;
              i30 = HEAP8[i122 >> 0] | 0;
              i66 = (i30 & 255) - (HEAPU8[i4 + (i186 & 7) >> 0] | 0) + i187 | 0;
              HEAP8[i4 + (i186 + i81 & 7) >> 0] = i30;
              HEAP8[i122 >> 0] = (i66 >>> 0) / (i81 >>> 0) | 0;
              i186 = i186 + 1 | 0;
              if ((i186 | 0) == (i33 | 0)) {
               i176 = i66;
               i177 = i33;
               break;
              } else i187 = i66;
             }
            }
           } while (0);
           if ((i177 | 0) < (i56 | 0)) {
            i41 = i177;
            i62 = i176;
            do {
             i66 = i50 + i41 | 0;
             if (HEAP8[i66 >> 0] | 0) {
              i2 = 367;
              break L324;
             }
             i62 = i62 - (HEAPU8[i4 + (i41 & 7) >> 0] | 0) | 0;
             HEAP8[i66 >> 0] = (i62 >>> 0) / (i81 >>> 0) | 0;
             i41 = i41 + 1 | 0;
            } while ((i41 | 0) < (i56 | 0));
           }
           i26 = i26 + 1 | 0;
           if ((i26 | 0) >= (i23 | 0)) break L515; else i50 = i50 + i36 | 0;
          }
         } while (0);
        }
        if (i54) {
         i23 = HEAP16[i46 >> 1] | 0;
         i56 = HEAP16[i53 >> 1] | 0;
         i31 = HEAP16[i57 >> 1] | 0;
         i19 = i31 & 65535;
         i52 = HEAPU16[i49 >> 1] | 0;
         i50 = i4;
         HEAP32[i50 >> 2] = 0;
         HEAP32[i50 + 4 >> 2] = 0;
         L545 : do if (i31 << 16 >> 16) {
          i50 = i52 >>> 0 < i61 >>> 0;
          i26 = i43 + i52 | 0;
          i33 = 0;
          i38 = i17 + (i23 & 65535) + (Math_imul(i36, i56 & 65535) | 0) | 0;
          while (1) {
           _memset(i4 | 0, 0, i61 | 0) | 0;
           L549 : do switch (i72 << 24 >> 24) {
           case 2:
            {
             if (i50) {
              i188 = 0;
              i189 = 0;
              break L549;
             } else {
              i190 = 0;
              i191 = 0;
             }
             while (1) {
              i41 = i38 + (Math_imul(i190, i36) | 0) | 0;
              i62 = HEAP8[i41 >> 0] | 0;
              i66 = (i62 & 255) - (HEAPU8[i4 + (i190 & 7) >> 0] | 0) + i191 | 0;
              HEAP8[i4 + (i190 + 2 & 7) >> 0] = i62;
              HEAP8[i41 >> 0] = i66 >>> 1;
              i190 = i190 + 1 | 0;
              if ((i190 | 0) == (i26 | 0)) {
               i188 = i66;
               i189 = i26;
               break;
              } else i191 = i66;
             }
             break;
            }
           case 3:
            {
             if (i50) {
              i188 = 0;
              i189 = 0;
              break L549;
             } else {
              i192 = 0;
              i193 = 0;
             }
             while (1) {
              i66 = i38 + (Math_imul(i192, i36) | 0) | 0;
              i41 = HEAP8[i66 >> 0] | 0;
              i62 = (i41 & 255) - (HEAPU8[i4 + (i192 & 7) >> 0] | 0) + i193 | 0;
              HEAP8[i4 + (i192 + 3 & 7) >> 0] = i41;
              HEAP8[i66 >> 0] = (i62 >>> 0) / 3 | 0;
              i192 = i192 + 1 | 0;
              if ((i192 | 0) == (i26 | 0)) {
               i188 = i62;
               i189 = i26;
               break;
              } else i193 = i62;
             }
             break;
            }
           case 4:
            {
             if (i50) {
              i188 = 0;
              i189 = 0;
              break L549;
             } else {
              i194 = 0;
              i195 = 0;
             }
             while (1) {
              i62 = i38 + (Math_imul(i194, i36) | 0) | 0;
              i66 = HEAP8[i62 >> 0] | 0;
              i41 = (i66 & 255) - (HEAPU8[i4 + (i194 & 7) >> 0] | 0) + i195 | 0;
              HEAP8[i4 + (i194 + 4 & 7) >> 0] = i66;
              HEAP8[i62 >> 0] = i41 >>> 2;
              i194 = i194 + 1 | 0;
              if ((i194 | 0) == (i26 | 0)) {
               i188 = i41;
               i189 = i26;
               break;
              } else i195 = i41;
             }
             break;
            }
           case 5:
            {
             if (i50) {
              i188 = 0;
              i189 = 0;
              break L549;
             } else {
              i196 = 0;
              i197 = 0;
             }
             while (1) {
              i41 = i38 + (Math_imul(i196, i36) | 0) | 0;
              i62 = HEAP8[i41 >> 0] | 0;
              i66 = (i62 & 255) - (HEAPU8[i4 + (i196 & 7) >> 0] | 0) + i197 | 0;
              HEAP8[i4 + (i196 + 5 & 7) >> 0] = i62;
              HEAP8[i41 >> 0] = (i66 >>> 0) / 5 | 0;
              i196 = i196 + 1 | 0;
              if ((i196 | 0) == (i26 | 0)) {
               i188 = i66;
               i189 = i26;
               break;
              } else i197 = i66;
             }
             break;
            }
           default:
            {
             if (i50) {
              i188 = 0;
              i189 = 0;
              break L549;
             } else {
              i198 = 0;
              i199 = 0;
             }
             while (1) {
              i66 = i38 + (Math_imul(i198, i36) | 0) | 0;
              i41 = HEAP8[i66 >> 0] | 0;
              i62 = (i41 & 255) - (HEAPU8[i4 + (i198 & 7) >> 0] | 0) + i199 | 0;
              HEAP8[i4 + (i198 + i61 & 7) >> 0] = i41;
              HEAP8[i66 >> 0] = (i62 >>> 0) / (i61 >>> 0) | 0;
              i198 = i198 + 1 | 0;
              if ((i198 | 0) == (i26 | 0)) {
               i188 = i62;
               i189 = i26;
               break;
              } else i199 = i62;
             }
            }
           } while (0);
           if ((i189 | 0) < (i52 | 0)) {
            i62 = i189;
            i66 = i188;
            do {
             i41 = i38 + (Math_imul(i62, i36) | 0) | 0;
             if (HEAP8[i41 >> 0] | 0) {
              i2 = 387;
              break L324;
             }
             i66 = i66 - (HEAPU8[i4 + (i62 & 7) >> 0] | 0) | 0;
             HEAP8[i41 >> 0] = (i66 >>> 0) / (i61 >>> 0) | 0;
             i62 = i62 + 1 | 0;
            } while ((i62 | 0) < (i52 | 0));
           }
           i33 = i33 + 1 | 0;
           if ((i33 | 0) >= (i19 | 0)) break L545; else i38 = i38 + 1 | 0;
          }
         } while (0);
        }
        i19 = HEAP16[i46 >> 1] | 0;
        i52 = i13 + (i39 * 28 | 0) | 0;
        HEAP16[i52 >> 1] = i19;
        i56 = HEAP16[i53 >> 1] | 0;
        HEAP16[i52 + 2 >> 1] = i56;
        i23 = HEAPU16[i57 >> 1] | 0;
        HEAP16[i52 + 4 >> 1] = i23 + (i19 & 65535);
        i19 = HEAPU16[i49 >> 1] | 0;
        HEAP16[i52 + 6 >> 1] = i19 + (i56 & 65535);
        f112 = Math_fround(f91 * Math_fround(i60 | 0));
        HEAPF32[i52 + 16 >> 2] = f112;
        i56 = HEAP32[i9 >> 2] | 0;
        f112 = Math_fround(f92 + Math_fround(f77 * Math_fround(i56 | 0)));
        HEAPF32[i52 + 8 >> 2] = f112;
        i31 = HEAP32[i10 >> 2] | 0;
        f112 = Math_fround(f93 + Math_fround(f78 * Math_fround(i31 | 0)));
        HEAPF32[i52 + 12 >> 2] = f112;
        f112 = Math_fround(f92 + Math_fround(f77 * Math_fround(i56 + i23 | 0)));
        HEAPF32[i52 + 20 >> 2] = f112;
        f112 = Math_fround(f93 + Math_fround(f78 * Math_fround(i31 + i19 | 0)));
        HEAPF32[i52 + 24 >> 2] = f112;
        i95 = HEAP32[i45 >> 2] | 0;
       }
       i52 = i48 + 1 | 0;
       i39 = i39 + 1 | 0;
       if ((i39 | 0) >= (i95 | 0)) {
        i200 = i52;
        break;
       } else {
        i48 = i52;
        i20 = i95;
       }
      }
     } else i200 = i85;
     i74 = i74 + 1 | 0;
     if ((i74 | 0) >= (i75 | 0)) break; else i85 = i200;
    }
   }
   f78 = Math_fround(HEAPF32[i89 + (i35 * 116 | 0) + 68 >> 2]);
   if (f78 != Math_fround(1.0)) {
    i85 = 0;
    do {
     i75 = ~~Math_fround(f78 * Math_fround(i85 >>> 0)) >>> 0;
     HEAP8[i4 + i85 >> 0] = i75 >>> 0 < 255 ? i75 : 255;
     i85 = i85 + 1 | 0;
    } while ((i85 | 0) != 256);
    i85 = HEAP32[i73 >> 2] | 0;
    i89 = i27 + (i35 * 140 | 0) + 128 | 0;
    i75 = HEAP32[i89 >> 2] | 0;
    if (i75 | 0) {
     i74 = i85;
     i87 = i75;
     i75 = i85;
     while (1) {
      do if (!(HEAP32[i74 + 12 >> 2] | 0)) {
       i201 = i75;
       i202 = i87;
      } else {
       i85 = HEAP16[i74 + 4 >> 1] | 0;
       i83 = i85 & 65535;
       i84 = HEAP16[i74 + 6 >> 1] | 0;
       if (!(i84 << 16 >> 16)) {
        i201 = i75;
        i202 = i87;
        break;
       }
       i86 = i85 << 16 >> 16 == 0;
       i85 = i84 & 65535;
       i84 = i17 + (HEAPU16[i74 + 8 >> 1] | 0) + (Math_imul(i36, HEAPU16[i74 + 10 >> 1] | 0) | 0) | 0;
       while (1) {
        if (!i86) {
         i34 = 0;
         do {
          i88 = i84 + i34 | 0;
          HEAP8[i88 >> 0] = HEAP8[i4 + (HEAPU8[i88 >> 0] | 0) >> 0] | 0;
          i34 = i34 + 1 | 0;
         } while ((i34 | 0) != (i83 | 0));
        }
        if ((i85 | 0) > 1) {
         i85 = i85 + -1 | 0;
         i84 = i84 + i36 | 0;
        } else break;
       }
       i201 = HEAP32[i73 >> 2] | 0;
       i202 = HEAP32[i89 >> 2] | 0;
      } while (0);
      i74 = i74 + 16 | 0;
      if ((i74 | 0) == (i201 + (i202 << 4) | 0)) break; else {
       i87 = i202;
       i75 = i201;
      }
     }
    }
   }
   HEAP32[i73 >> 2] = 0;
   i35 = i35 + 1 | 0;
   if ((i35 | 0) >= (HEAP32[i14 >> 2] | 0)) break L322;
  }
  switch (i2 | 0) {
  case 217:
   {
    ___assert_fail(50871, 50789, 3810, 50889);
    break;
   }
  case 219:
   {
    ___assert_fail(50915, 50789, 3811, 50889);
    break;
   }
  case 281:
   {
    ___assert_fail(51065, 50789, 3151, 51078);
    break;
   }
  case 293:
   {
    ___assert_fail(51108, 50789, 2751, 51116);
    break;
   }
  case 295:
   {
    ___assert_fail(51134, 50789, 3164, 51078);
    break;
   }
  case 300:
   {
    ___assert_fail(51154, 50789, 2963, 51169);
    break;
   }
  case 307:
   {
    ___assert_fail(51198, 50789, 2982, 51169);
    break;
   }
  case 313:
   {
    ___assert_fail(51234, 50789, 3010, 51169);
    break;
   }
  case 321:
   {
    ___assert_fail(51252, 50789, 3047, 51169);
    break;
   }
  case 367:
   {
    ___assert_fail(51274, 50789, 3873, 51289);
    break;
   }
  case 387:
   {
    ___assert_fail(51308, 50789, 3935, 51339);
    break;
   }
  }
 } while (0);
 __ZN5ImGui7MemFreeEPv(i21);
 __ZN5ImGui7MemFreeEPv(i22);
 __ZN5ImGui7MemFreeEPv(i71);
 if ((HEAP32[i14 >> 2] | 0) > 0) {
  i71 = i1 + 80 | 0;
  i22 = 0;
  do {
   i21 = HEAP32[i71 >> 2] | 0;
   i201 = i21 + (i22 * 116 | 0) | 0;
   i202 = HEAP32[i201 + 112 >> 2] | 0;
   i36 = i201 + 60 | 0;
   if (HEAP8[i36 >> 0] | 0) __ZN6ImFont16BuildLookupTableEv(i202);
   i201 = i21 + (i22 * 116 | 0) | 0;
   f91 = Math_fround(HEAPF32[i201 + 16 >> 2]);
   i4 = i27 + (i22 * 140 | 0) | 0;
   i200 = (HEAP32[i4 + 4 >> 2] | 0) + (HEAP32[i4 + 28 >> 2] | 0) | 0;
   i95 = i200 + 4 | 0;
   i10 = (HEAPU8[i95 >> 0] << 8 | HEAPU8[i95 + 1 >> 0]) << 16;
   i95 = i10 >> 16;
   i9 = i200 + 6 | 0;
   i200 = (HEAPU8[i9 >> 0] << 8 | HEAPU8[i9 + 1 >> 0]) << 16;
   i9 = i200 >> 16;
   f166 = Math_fround(f91 / Math_fround(i95 - i9 | 0));
   f91 = Math_fround(f166 * Math_fround(i95 | 0));
   f167 = Math_fround(~~Math_fround(((i10 | 0) > 0 ? Math_fround(1.0) : Math_fround(-1.0)) + f91) | 0);
   f91 = Math_fround(f166 * Math_fround(i9 | 0));
   __Z25ImFontAtlasBuildSetupFontP11ImFontAtlasP6ImFontP12ImFontConfigff(i1, i202, i201 | 0, f167, Math_fround(~~Math_fround(((i200 | 0) > 0 ? Math_fround(1.0) : Math_fround(-1.0)) + f91) | 0));
   f91 = Math_fround(HEAPF32[i201 + 40 >> 2]);
   f167 = Math_fround(HEAPF32[i201 + 44 >> 2]);
   f166 = Math_fround(f167 + Math_fround(~~Math_fround(Math_fround(HEAPF32[i202 + 72 >> 2]) + Math_fround(.5)) | 0));
   i201 = i4 + 136 | 0;
   i4 = HEAP32[i201 >> 2] | 0;
   if ((i4 | 0) > 0) {
    i200 = i27 + (i22 * 140 | 0) + 132 | 0;
    i9 = i21 + (i22 * 116 | 0) | 0;
    i21 = i9 + 52 | 0;
    i10 = i9 + 56 | 0;
    i95 = i9 + 28 | 0;
    i9 = i202 + 40 | 0;
    i188 = i202 + 48 | 0;
    i189 = i202 + 24 | 0;
    i199 = 0;
    i198 = i4;
    while (1) {
     i4 = HEAP32[i200 >> 2] | 0;
     i197 = i4 + (i199 * 24 | 0) + 12 | 0;
     i196 = HEAP32[i197 >> 2] | 0;
     if ((i196 | 0) > 0) {
      i195 = i4 + (i199 * 24 | 0) | 0;
      i4 = i195 + 16 | 0;
      i194 = i195 + 4 | 0;
      i195 = 0;
      i193 = i196;
      while (1) {
       i196 = HEAP32[i4 >> 2] | 0;
       i192 = HEAP16[i196 + (i195 * 28 | 0) >> 1] | 0;
       do if (!(i192 << 16 >> 16)) {
        if (HEAP16[i196 + (i195 * 28 | 0) + 4 >> 1] | 0) {
         i2 = 422;
         break;
        }
        if (HEAP16[i196 + (i195 * 28 | 0) + 2 >> 1] | 0) {
         i2 = 422;
         break;
        }
        if (!(HEAP16[i196 + (i195 * 28 | 0) + 6 >> 1] | 0)) i203 = i193; else i2 = 422;
       } else i2 = 422; while (0);
       L629 : do if ((i2 | 0) == 422) {
        i2 = 0;
        i191 = (HEAP32[i194 >> 2] | 0) + i195 | 0;
        do if (HEAP8[i36 >> 0] | 0) {
         i190 = i191 & 65535;
         if ((HEAP32[i9 >> 2] | 0) <= (i190 | 0)) break;
         i176 = HEAP16[(HEAP32[i188 >> 2] | 0) + (i190 << 1) >> 1] | 0;
         if (i176 << 16 >> 16 == -1) break;
         if ((HEAP32[i189 >> 2] | 0) + ((i176 & 65535) * 40 | 0) | 0) {
          i203 = i193;
          break L629;
         }
        } while (0);
        f167 = Math_fround(HEAPF32[i196 + (i195 * 28 | 0) + 16 >> 2]);
        f173 = Math_fround(HEAPF32[i21 >> 2]);
        f163 = Math_fround(HEAPF32[i10 >> 2]);
        f165 = f167 < f173 ? f173 : f167 > f163 ? f163 : f167;
        f163 = Math_fround(Math_fround(f165 - f167) * Math_fround(.5));
        if (f167 != f165) {
         f167 = Math_fround(~~f163 | 0);
         f204 = Math_fround(f91 + (HEAP8[i95 >> 0] | 0 ? f167 : f163));
        } else f204 = f91;
        f163 = Math_fround(Math_fround(1.0) / Math_fround(HEAP32[i15 >> 2] | 0));
        f167 = Math_fround(Math_fround(1.0) / Math_fround(HEAP32[i16 >> 2] | 0));
        i176 = i196 + (i195 * 28 | 0) | 0;
        f173 = Math_fround(Math_fround(HEAPF32[i176 + 8 >> 2]) + Math_fround(0.0));
        f164 = Math_fround(Math_fround(HEAPF32[i176 + 12 >> 2]) + Math_fround(0.0));
        f162 = Math_fround(Math_fround(HEAPF32[i176 + 20 >> 2]) + Math_fround(0.0));
        f120 = Math_fround(Math_fround(HEAPF32[i176 + 24 >> 2]) + Math_fround(0.0));
        f119 = Math_fround(f163 * Math_fround(i192 & 65535));
        f108 = Math_fround(f167 * Math_fround(HEAPU16[i176 + 2 >> 1] | 0));
        f109 = Math_fround(f163 * Math_fround(HEAPU16[i176 + 4 >> 1] | 0));
        __ZN6ImFont8AddGlyphEtfffffffff(i202, i191 & 65535, Math_fround(f204 + f173), Math_fround(f166 + f164), Math_fround(f204 + f162), Math_fround(f166 + f120), f119, f108, f109, Math_fround(f167 * Math_fround(HEAPU16[i176 + 6 >> 1] | 0)), f165);
        i203 = HEAP32[i197 >> 2] | 0;
       } while (0);
       i195 = i195 + 1 | 0;
       if ((i195 | 0) >= (i203 | 0)) break; else i193 = i203;
      }
      i205 = HEAP32[i201 >> 2] | 0;
     } else i205 = i198;
     i199 = i199 + 1 | 0;
     if ((i199 | 0) >= (i205 | 0)) break; else i198 = i205;
    }
   }
   i22 = i22 + 1 | 0;
  } while ((i22 | 0) < (HEAP32[i14 >> 2] | 0));
 }
 __ZN5ImGui7MemFreeEPv(i42);
 __ZN5ImGui7MemFreeEPv(i69);
 __ZN5ImGui7MemFreeEPv(i27);
 __Z22ImFontAtlasBuildFinishP11ImFontAtlas(i1);
 i37 = 1;
 STACKTOP = i3;
 return i37 | 0;
}
function _png_do_read_transformations(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, i90 = 0, i91 = 0, i92 = 0, i93 = 0, i94 = 0, i95 = 0, i96 = 0, i97 = 0, i98 = 0, i99 = 0, i100 = 0, i101 = 0, i102 = 0, i103 = 0, i104 = 0, i105 = 0, i106 = 0, i107 = 0, i108 = 0, i109 = 0, i110 = 0, i111 = 0, i112 = 0, i113 = 0, i114 = 0, i115 = 0, i116 = 0, i117 = 0, i118 = 0, i119 = 0, i120 = 0, i121 = 0, i122 = 0, i123 = 0, i124 = 0, i125 = 0, i126 = 0, i127 = 0, i128 = 0, i129 = 0, i130 = 0, i131 = 0, i132 = 0, i133 = 0, i134 = 0, i135 = 0, i136 = 0, i137 = 0, i138 = 0, i139 = 0, i140 = 0, i141 = 0, i142 = 0, i143 = 0, i144 = 0, i145 = 0, i146 = 0, i147 = 0, i148 = 0, i149 = 0, i150 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4;
 i6 = i1 + 384 | 0;
 i7 = HEAP32[i6 >> 2] | 0;
 if (!i7) _png_error(i1, 59465);
 i8 = i1 + 212 | 0;
 if ((HEAP32[i8 >> 2] & 16448 | 0) == 16384) _png_error(i1, 59481);
 i9 = i1 + 216 | 0;
 i10 = HEAP32[i9 >> 2] | 0;
 do if (i10 & 4096 | 0) {
  i11 = i2 + 8 | 0;
  if ((HEAP8[i11 >> 0] | 0) != 3) {
   i12 = i7 + 1 | 0;
   if ((i10 & 33554432 | 0) == 0 | (HEAP16[i1 + 428 >> 1] | 0) == 0) {
    _png_do_expand(i2, i12, 0);
    break;
   } else {
    _png_do_expand(i2, i12, i1 + 532 | 0);
    break;
   }
  }
  i12 = i7 + 1 | 0;
  i13 = HEAP32[i1 + 416 >> 2] | 0;
  i14 = HEAP32[i1 + 528 >> 2] | 0;
  i15 = HEAP16[i1 + 428 >> 1] | 0;
  i16 = i15 & 65535;
  i17 = HEAP32[i2 >> 2] | 0;
  i18 = i2 + 9 | 0;
  i19 = HEAP8[i18 >> 0] | 0;
  if ((i19 & 255) < 8) {
   switch (i19 << 24 >> 24) {
   case 1:
    {
     if (i17 | 0) {
      i20 = 0;
      i21 = i12 + i17 | 0;
      i22 = i12 + ((i17 + -1 | 0) >>> 3) | 0;
      i23 = i17 + 7 & 7 ^ 7;
      while (1) {
       i21 = i21 + -1 | 0;
       HEAP8[i21 >> 0] = (1 << i23 & HEAPU8[i22 >> 0] | 0) != 0 & 1;
       i24 = (i23 | 0) == 7;
       i20 = i20 + 1 | 0;
       if ((i20 | 0) == (i17 | 0)) break; else {
        i22 = i24 ? i22 + -1 | 0 : i22;
        i23 = i24 ? 0 : i23 + 1 | 0;
       }
      }
     }
     break;
    }
   case 2:
    {
     if (i17 | 0) {
      i23 = 0;
      i22 = i12 + i17 | 0;
      i20 = i12 + ((i17 + -1 | 0) >>> 2) | 0;
      i21 = (i17 << 1) + 6 & 6 ^ 6;
      while (1) {
       i22 = i22 + -1 | 0;
       HEAP8[i22 >> 0] = (HEAPU8[i20 >> 0] | 0) >>> i21 & 3;
       i24 = (i21 | 0) == 6;
       i23 = i23 + 1 | 0;
       if ((i23 | 0) == (i17 | 0)) break; else {
        i20 = i24 ? i20 + -1 | 0 : i20;
        i21 = i24 ? 0 : i21 + 2 | 0;
       }
      }
     }
     break;
    }
   case 4:
    {
     if (i17 | 0) {
      i21 = 0;
      i20 = i12 + i17 | 0;
      i23 = i12 + ((i17 + -1 | 0) >>> 1) | 0;
      i22 = i17 << 2 & 4;
      while (1) {
       i20 = i20 + -1 | 0;
       HEAP8[i20 >> 0] = (HEAPU8[i23 >> 0] | 0) >>> i22 & 15;
       i24 = (i22 | 0) == 4;
       i21 = i21 + 1 | 0;
       if ((i21 | 0) == (i17 | 0)) break; else {
        i23 = i24 ? i23 + -1 | 0 : i23;
        i22 = i24 ? 0 : i22 + 4 | 0;
       }
      }
     }
     break;
    }
   default:
    {}
   }
   HEAP8[i18 >> 0] = 8;
   HEAP8[i2 + 11 >> 0] = 8;
   HEAP32[i2 + 4 >> 2] = i17;
  } else if (i19 << 24 >> 24 != 8) break;
  i22 = i12 + i17 + -1 | 0;
  if (!(i15 << 16 >> 16)) {
   i23 = i17 * 3 | 0;
   if (!i17) {
    i25 = 3;
    i26 = i23;
    i27 = 24;
    i28 = 2;
   } else {
    i21 = 0;
    i20 = i22;
    i24 = i12 + i23 | 0;
    while (1) {
     HEAP8[i24 + -1 >> 0] = HEAP8[i13 + ((HEAPU8[i20 >> 0] | 0) * 3 | 0) + 2 >> 0] | 0;
     HEAP8[i24 + -2 >> 0] = HEAP8[i13 + ((HEAPU8[i20 >> 0] | 0) * 3 | 0) + 1 >> 0] | 0;
     i24 = i24 + -3 | 0;
     HEAP8[i24 >> 0] = HEAP8[i13 + ((HEAPU8[i20 >> 0] | 0) * 3 | 0) >> 0] | 0;
     i21 = i21 + 1 | 0;
     if ((i21 | 0) == (i17 | 0)) {
      i25 = 3;
      i26 = i23;
      i27 = 24;
      i28 = 2;
      break;
     } else i20 = i20 + -1 | 0;
    }
   }
  } else {
   i20 = i17 << 2;
   if (!i17) {
    i25 = 4;
    i26 = i20;
    i27 = 32;
    i28 = 6;
   } else {
    i23 = 0;
    i21 = i22;
    i24 = i12 + i20 | 0;
    while (1) {
     i15 = HEAPU8[i21 >> 0] | 0;
     if (i15 >>> 0 < i16 >>> 0) i29 = HEAP8[i14 + i15 >> 0] | 0; else i29 = -1;
     HEAP8[i24 + -1 >> 0] = i29;
     HEAP8[i24 + -2 >> 0] = HEAP8[i13 + ((HEAPU8[i21 >> 0] | 0) * 3 | 0) + 2 >> 0] | 0;
     HEAP8[i24 + -3 >> 0] = HEAP8[i13 + ((HEAPU8[i21 >> 0] | 0) * 3 | 0) + 1 >> 0] | 0;
     i24 = i24 + -4 | 0;
     HEAP8[i24 >> 0] = HEAP8[i13 + ((HEAPU8[i21 >> 0] | 0) * 3 | 0) >> 0] | 0;
     i23 = i23 + 1 | 0;
     if ((i23 | 0) == (i17 | 0)) {
      i25 = 4;
      i26 = i20;
      i27 = 32;
      i28 = 6;
      break;
     } else i21 = i21 + -1 | 0;
    }
   }
  }
  HEAP8[i18 >> 0] = 8;
  HEAP8[i2 + 11 >> 0] = i27;
  HEAP32[i2 + 4 >> 2] = i26;
  HEAP8[i11 >> 0] = i28;
  HEAP8[i2 + 10 >> 0] = i25;
 } while (0);
 i25 = HEAP32[i9 >> 2] | 0;
 L47 : do if ((i25 & 262272 | 0) == 262144) {
  switch (HEAP8[i2 + 8 >> 0] | 0) {
  case 4:
  case 6:
   break;
  default:
   {
    i30 = i25;
    break L47;
   }
  }
  _png_do_strip_channel(i2, (HEAP32[i6 >> 2] | 0) + 1 | 0, 0);
  i30 = HEAP32[i9 >> 2] | 0;
 } else i30 = i25; while (0);
 do if (!(i30 & 6291456)) i31 = i30; else {
  i25 = (HEAP32[i6 >> 2] | 0) + 1 | 0;
  i28 = i2 + 8 | 0;
  i26 = HEAPU8[i28 >> 0] | 0;
  if ((i26 & 3 | 0) == 2) {
   i27 = HEAPU16[i1 + 702 >> 1] | 0;
   i29 = HEAPU16[i1 + 704 >> 1] | 0;
   i7 = 32768 - i27 - i29 | 0;
   i10 = HEAP32[i2 >> 2] | 0;
   i21 = (i26 & 4 | 0) != 0;
   i26 = i2 + 9 | 0;
   L54 : do if ((HEAP8[i26 >> 0] | 0) == 8) {
    i20 = HEAP32[i1 + 500 >> 2] | 0;
    if (i20 | 0) {
     i17 = HEAP32[i1 + 504 >> 2] | 0;
     if (i17 | 0) {
      if (!i10) {
       i32 = 0;
       break;
      }
      i23 = i1 + 492 | 0;
      if (i21) {
       i13 = i25;
       i24 = i25;
       i14 = 0;
       i16 = 0;
       while (1) {
        i12 = HEAP8[i13 >> 0] | 0;
        i22 = HEAP8[i13 + 1 >> 0] | 0;
        i15 = i13 + 3 | 0;
        i19 = HEAP8[i13 + 2 >> 0] | 0;
        i33 = i12 & 255;
        if (i12 << 24 >> 24 == i22 << 24 >> 24 ? i12 << 24 >> 24 == i19 << 24 >> 24 : 0) {
         i34 = HEAP32[i23 >> 2] | 0;
         if (!i34) {
          i35 = i16;
          i36 = i12;
         } else {
          i37 = i16;
          i38 = i34 + i33 | 0;
          i3 = 52;
         }
        } else {
         i37 = i16 | 1;
         i38 = i20 + (((Math_imul(HEAPU8[i17 + i33 >> 0] | 0, i27) | 0) + 16384 + (Math_imul(HEAPU8[i17 + (i22 & 255) >> 0] | 0, i29) | 0) + (Math_imul(i7, HEAPU8[i17 + (i19 & 255) >> 0] | 0) | 0) | 0) >>> 15) | 0;
         i3 = 52;
        }
        if ((i3 | 0) == 52) {
         i3 = 0;
         i35 = i37;
         i36 = HEAP8[i38 >> 0] | 0;
        }
        HEAP8[i24 >> 0] = i36;
        HEAP8[i24 + 1 >> 0] = HEAP8[i15 >> 0] | 0;
        i14 = i14 + 1 | 0;
        if ((i14 | 0) == (i10 | 0)) {
         i32 = i35;
         break L54;
        } else {
         i13 = i13 + 4 | 0;
         i24 = i24 + 2 | 0;
         i16 = i35;
        }
       }
      } else {
       i16 = i25;
       i24 = i25;
       i13 = 0;
       i14 = 0;
       while (1) {
        i15 = HEAP8[i16 >> 0] | 0;
        i19 = HEAP8[i16 + 1 >> 0] | 0;
        i22 = HEAP8[i16 + 2 >> 0] | 0;
        i16 = i16 + 3 | 0;
        i33 = i15 & 255;
        if (i15 << 24 >> 24 == i19 << 24 >> 24 ? i15 << 24 >> 24 == i22 << 24 >> 24 : 0) {
         i34 = HEAP32[i23 >> 2] | 0;
         if (!i34) {
          i39 = i14;
          i40 = i15;
         } else {
          i41 = i14;
          i42 = i34 + i33 | 0;
          i3 = 58;
         }
        } else {
         i41 = i14 | 1;
         i42 = i20 + (((Math_imul(HEAPU8[i17 + i33 >> 0] | 0, i27) | 0) + 16384 + (Math_imul(HEAPU8[i17 + (i19 & 255) >> 0] | 0, i29) | 0) + (Math_imul(i7, HEAPU8[i17 + (i22 & 255) >> 0] | 0) | 0) | 0) >>> 15) | 0;
         i3 = 58;
        }
        if ((i3 | 0) == 58) {
         i3 = 0;
         i39 = i41;
         i40 = HEAP8[i42 >> 0] | 0;
        }
        HEAP8[i24 >> 0] = i40;
        i13 = i13 + 1 | 0;
        if ((i13 | 0) == (i10 | 0)) {
         i32 = i39;
         break L54;
        } else {
         i24 = i24 + 1 | 0;
         i14 = i39;
        }
       }
      }
     }
    }
    if (!i10) i32 = 0; else if (i21) {
     i14 = i25;
     i24 = i25;
     i13 = 0;
     i17 = 0;
     while (1) {
      i20 = HEAP8[i14 >> 0] | 0;
      i23 = HEAP8[i14 + 1 >> 0] | 0;
      i16 = HEAP8[i14 + 2 >> 0] | 0;
      if (i20 << 24 >> 24 == i23 << 24 >> 24 ? i20 << 24 >> 24 == i16 << 24 >> 24 : 0) {
       i43 = i17;
       i44 = i20;
      } else {
       i43 = i17 | 1;
       i44 = ((Math_imul(i23 & 255, i29) | 0) + (Math_imul(i20 & 255, i27) | 0) + (Math_imul(i7, i16 & 255) | 0) | 0) >>> 15 & 255;
      }
      HEAP8[i24 >> 0] = i44;
      HEAP8[i24 + 1 >> 0] = HEAP8[i14 + 3 >> 0] | 0;
      i13 = i13 + 1 | 0;
      if ((i13 | 0) == (i10 | 0)) {
       i32 = i43;
       break;
      } else {
       i14 = i14 + 4 | 0;
       i24 = i24 + 2 | 0;
       i17 = i43;
      }
     }
    } else {
     i17 = i25;
     i24 = i25;
     i14 = 0;
     i13 = 0;
     while (1) {
      i16 = HEAP8[i17 >> 0] | 0;
      i20 = HEAP8[i17 + 1 >> 0] | 0;
      i23 = HEAP8[i17 + 2 >> 0] | 0;
      if (i16 << 24 >> 24 == i20 << 24 >> 24 ? i16 << 24 >> 24 == i23 << 24 >> 24 : 0) {
       i45 = i13;
       i46 = i16;
      } else {
       i45 = i13 | 1;
       i46 = ((Math_imul(i20 & 255, i29) | 0) + (Math_imul(i16 & 255, i27) | 0) + (Math_imul(i7, i23 & 255) | 0) | 0) >>> 15 & 255;
      }
      HEAP8[i24 >> 0] = i46;
      i14 = i14 + 1 | 0;
      if ((i14 | 0) == (i10 | 0)) {
       i32 = i45;
       break;
      } else {
       i17 = i17 + 3 | 0;
       i24 = i24 + 1 | 0;
       i13 = i45;
      }
     }
    }
   } else {
    i13 = HEAP32[i1 + 512 >> 2] | 0;
    if (i13 | 0) {
     i24 = HEAP32[i1 + 508 >> 2] | 0;
     if (i24 | 0) {
      if (!i10) {
       i32 = 0;
       break;
      }
      i17 = i1 + 496 | 0;
      i14 = i1 + 484 | 0;
      if (i21) {
       i23 = i25;
       i16 = i25;
       i20 = 0;
       i22 = 0;
       while (1) {
        i19 = HEAP8[i23 >> 0] | 0;
        i33 = HEAP8[i23 + 1 >> 0] | 0;
        i34 = i19 & 255;
        i15 = i33 & 255;
        i12 = i34 << 8 | i15;
        i47 = HEAPU8[i23 + 2 >> 0] | 0;
        i48 = HEAPU8[i23 + 3 >> 0] | 0;
        i49 = i23 + 6 | 0;
        i50 = HEAPU8[i23 + 4 >> 0] | 0;
        i51 = HEAPU8[i23 + 5 >> 0] | 0;
        if ((i12 | 0) == (i47 << 8 | i48 | 0)) if ((i12 | 0) == (i50 << 8 | i51 | 0)) {
         i12 = HEAP32[i17 >> 2] | 0;
         if (!i12) {
          i52 = i33;
          i53 = i19;
          i54 = i22;
         } else {
          i19 = HEAP16[(HEAP32[i12 + (i15 >>> (HEAP32[i14 >> 2] | 0) << 2) >> 2] | 0) + (i34 << 1) >> 1] | 0;
          i52 = i19 & 255;
          i53 = (i19 & 65535) >>> 8 & 255;
          i54 = i22;
         }
        } else i3 = 72; else i3 = 72;
        if ((i3 | 0) == 72) {
         i3 = 0;
         i19 = HEAP32[i14 >> 2] | 0;
         i12 = (Math_imul(HEAPU16[(HEAP32[i13 + (i15 >>> i19 << 2) >> 2] | 0) + (i34 << 1) >> 1] | 0, i27) | 0) + 16384 + (Math_imul(HEAPU16[(HEAP32[i13 + (i48 >>> i19 << 2) >> 2] | 0) + (i47 << 1) >> 1] | 0, i29) | 0) + (Math_imul(i7, HEAPU16[(HEAP32[i13 + (i51 >>> i19 << 2) >> 2] | 0) + (i50 << 1) >> 1] | 0) | 0) | 0;
         i50 = HEAP16[(HEAP32[i24 + ((i12 >>> 15 & 255) >>> i19 << 2) >> 2] | 0) + ((i12 >>> 23 & 255) << 1) >> 1] | 0;
         i52 = i50 & 255;
         i53 = (i50 & 65535) >>> 8 & 255;
         i54 = i22 | 1;
        }
        HEAP8[i16 >> 0] = i53;
        HEAP8[i16 + 1 >> 0] = i52;
        HEAP8[i16 + 2 >> 0] = HEAP8[i49 >> 0] | 0;
        HEAP8[i16 + 3 >> 0] = HEAP8[i23 + 7 >> 0] | 0;
        i20 = i20 + 1 | 0;
        if ((i20 | 0) == (i10 | 0)) {
         i32 = i54;
         break L54;
        } else {
         i23 = i23 + 8 | 0;
         i16 = i16 + 4 | 0;
         i22 = i54;
        }
       }
      } else {
       i22 = i25;
       i16 = i25;
       i23 = 0;
       i20 = 0;
       while (1) {
        i49 = HEAP8[i22 >> 0] | 0;
        i50 = HEAP8[i22 + 1 >> 0] | 0;
        i12 = i49 & 255;
        i19 = i50 & 255;
        i51 = i12 << 8 | i19;
        i47 = HEAPU8[i22 + 2 >> 0] | 0;
        i48 = HEAPU8[i22 + 3 >> 0] | 0;
        i34 = HEAPU8[i22 + 4 >> 0] | 0;
        i15 = HEAPU8[i22 + 5 >> 0] | 0;
        i22 = i22 + 6 | 0;
        if ((i51 | 0) == (i47 << 8 | i48 | 0)) if ((i51 | 0) == (i34 << 8 | i15 | 0)) {
         i51 = HEAP32[i17 >> 2] | 0;
         if (!i51) {
          i55 = i50;
          i56 = i49;
          i57 = i20;
         } else {
          i49 = HEAP16[(HEAP32[i51 + (i19 >>> (HEAP32[i14 >> 2] | 0) << 2) >> 2] | 0) + (i12 << 1) >> 1] | 0;
          i55 = i49 & 255;
          i56 = (i49 & 65535) >>> 8 & 255;
          i57 = i20;
         }
        } else i3 = 80; else i3 = 80;
        if ((i3 | 0) == 80) {
         i3 = 0;
         i49 = HEAP32[i14 >> 2] | 0;
         i51 = (Math_imul(HEAPU16[(HEAP32[i13 + (i19 >>> i49 << 2) >> 2] | 0) + (i12 << 1) >> 1] | 0, i27) | 0) + 16384 + (Math_imul(HEAPU16[(HEAP32[i13 + (i48 >>> i49 << 2) >> 2] | 0) + (i47 << 1) >> 1] | 0, i29) | 0) + (Math_imul(i7, HEAPU16[(HEAP32[i13 + (i15 >>> i49 << 2) >> 2] | 0) + (i34 << 1) >> 1] | 0) | 0) | 0;
         i34 = HEAP16[(HEAP32[i24 + ((i51 >>> 15 & 255) >>> i49 << 2) >> 2] | 0) + ((i51 >>> 23 & 255) << 1) >> 1] | 0;
         i55 = i34 & 255;
         i56 = (i34 & 65535) >>> 8 & 255;
         i57 = i20 | 1;
        }
        HEAP8[i16 >> 0] = i56;
        HEAP8[i16 + 1 >> 0] = i55;
        i23 = i23 + 1 | 0;
        if ((i23 | 0) == (i10 | 0)) {
         i32 = i57;
         break L54;
        } else {
         i16 = i16 + 2 | 0;
         i20 = i57;
        }
       }
      }
     }
    }
    if (!i10) i32 = 0; else if (i21) {
     i20 = 0;
     i16 = i25;
     i23 = i25;
     i24 = 0;
     while (1) {
      i13 = HEAPU8[i23 >> 0] << 8 | HEAPU8[i23 + 1 >> 0];
      i14 = HEAPU8[i23 + 2 >> 0] << 8 | HEAPU8[i23 + 3 >> 0];
      i17 = HEAPU8[i23 + 4 >> 0] << 8 | HEAPU8[i23 + 5 >> 0];
      i22 = i24 | ((i13 | 0) != (i14 | 0) | (i13 | 0) != (i17 | 0)) & 1;
      i34 = (Math_imul(i13, i27) | 0) + 16384 + (Math_imul(i14, i29) | 0) + (Math_imul(i17, i7) | 0) | 0;
      HEAP8[i16 >> 0] = i34 >>> 23;
      HEAP8[i16 + 1 >> 0] = i34 >>> 15;
      HEAP8[i16 + 2 >> 0] = HEAP8[i23 + 6 >> 0] | 0;
      HEAP8[i16 + 3 >> 0] = HEAP8[i23 + 7 >> 0] | 0;
      i20 = i20 + 1 | 0;
      if ((i20 | 0) == (i10 | 0)) {
       i32 = i22;
       break;
      } else {
       i16 = i16 + 4 | 0;
       i23 = i23 + 8 | 0;
       i24 = i22;
      }
     }
    } else {
     i24 = 0;
     i23 = i25;
     i16 = i25;
     i20 = 0;
     while (1) {
      i22 = HEAPU8[i16 >> 0] << 8 | HEAPU8[i16 + 1 >> 0];
      i34 = HEAPU8[i16 + 2 >> 0] << 8 | HEAPU8[i16 + 3 >> 0];
      i17 = HEAPU8[i16 + 4 >> 0] << 8 | HEAPU8[i16 + 5 >> 0];
      i14 = i20 | ((i22 | 0) != (i34 | 0) | (i22 | 0) != (i17 | 0)) & 1;
      i13 = (Math_imul(i22, i27) | 0) + 16384 + (Math_imul(i34, i29) | 0) + (Math_imul(i17, i7) | 0) | 0;
      HEAP8[i23 >> 0] = i13 >>> 23;
      HEAP8[i23 + 1 >> 0] = i13 >>> 15;
      i24 = i24 + 1 | 0;
      if ((i24 | 0) == (i10 | 0)) {
       i32 = i14;
       break;
      } else {
       i23 = i23 + 2 | 0;
       i16 = i16 + 6 | 0;
       i20 = i14;
      }
     }
    }
   } while (0);
   i7 = i2 + 10 | 0;
   i29 = HEAP8[i7 >> 0] | 0;
   HEAP8[i7 >> 0] = (i29 & 255) + 254;
   HEAP8[i28 >> 0] = HEAP8[i28 >> 0] & -3;
   i7 = Math_imul(HEAPU8[i26 >> 0] | 0, i29 + -2 & 255) | 0;
   HEAP8[i2 + 11 >> 0] = i7;
   i29 = i7 & 255;
   if (i29 >>> 0 > 7) i58 = Math_imul(i29 >>> 3, i10) | 0; else i58 = ((Math_imul(i29, i10) | 0) + 7 | 0) >>> 3;
   HEAP32[i2 + 4 >> 2] = i58;
   if (!i32) {
    i31 = HEAP32[i9 >> 2] | 0;
    break;
   }
   HEAP8[i1 + 700 >> 0] = 1;
   i29 = HEAP32[i9 >> 2] | 0;
   if ((i29 & 6291456 | 0) == 4194304) {
    _png_warning(i1, 59499);
    i59 = HEAP32[i9 >> 2] | 0;
   } else i59 = i29;
   if ((i59 & 6291456 | 0) == 2097152) _png_error(i1, 59499); else i31 = i59;
  } else i31 = i30;
 } while (0);
 if (!(i31 & 16384)) i60 = i31; else if (!(HEAP32[i1 + 208 >> 2] & 2048)) {
  _png_do_gray_to_rgb(i2, (HEAP32[i6 >> 2] | 0) + 1 | 0);
  i60 = HEAP32[i9 >> 2] | 0;
 } else i60 = i31;
 L140 : do if (i60 & 128 | 0) {
  i31 = (HEAP32[i6 >> 2] | 0) + 1 | 0;
  i30 = HEAP32[i1 + 492 >> 2] | 0;
  i59 = HEAP32[i1 + 500 >> 2] | 0;
  i32 = HEAP32[i1 + 504 >> 2] | 0;
  i58 = HEAP32[i1 + 496 >> 2] | 0;
  i57 = HEAP32[i1 + 508 >> 2] | 0;
  i55 = HEAP32[i1 + 512 >> 2] | 0;
  i56 = HEAP32[i1 + 484 >> 2] | 0;
  i54 = HEAP32[i8 >> 2] & 8192;
  i52 = (i54 | 0) == 0;
  i53 = i54 >>> 13;
  i54 = HEAP32[i2 >> 2] | 0;
  switch (HEAP8[i2 + 8 >> 0] | 0) {
  case 0:
   {
    switch (HEAP8[i2 + 9 >> 0] | 0) {
    case 1:
     {
      if (!i54) break L140;
      i45 = i1 + 460 | 0;
      i46 = HEAPU16[i1 + 540 >> 1] | 0;
      i43 = 0;
      i44 = 7;
      i39 = i31;
      while (1) {
       i40 = HEAPU8[i39 >> 0] | 0;
       if ((i40 >>> i44 & 1 | 0) == (i46 | 0)) HEAP8[i39 >> 0] = HEAPU16[i45 >> 1] << i44 | 32639 >>> (7 - i44 | 0) & i40;
       i40 = (i44 | 0) == 0;
       i43 = i43 + 1 | 0;
       if ((i43 | 0) == (i54 | 0)) break; else {
        i44 = i40 ? 7 : i44 + -1 | 0;
        i39 = i40 ? i39 + 1 | 0 : i39;
       }
      }
      break;
     }
    case 2:
     {
      i39 = (i54 | 0) != 0;
      if (!i30) {
       if (!i39) break L140;
       i44 = i1 + 460 | 0;
       i43 = HEAPU16[i1 + 540 >> 1] | 0;
       i45 = 0;
       i46 = 6;
       i10 = i31;
       while (1) {
        i26 = HEAPU8[i10 >> 0] | 0;
        if ((i26 >>> i46 & 3 | 0) == (i43 | 0)) HEAP8[i10 >> 0] = HEAPU16[i44 >> 1] << i46 | 16191 >>> (6 - i46 | 0) & i26;
        i26 = (i46 | 0) == 0;
        i45 = i45 + 1 | 0;
        if ((i45 | 0) == (i54 | 0)) break L140; else {
         i46 = i26 ? 6 : i46 + -2 | 0;
         i10 = i26 ? i10 + 1 | 0 : i10;
        }
       }
      }
      if (!i39) break L140;
      i10 = i1 + 460 | 0;
      i46 = HEAPU16[i1 + 540 >> 1] | 0;
      i45 = 0;
      i44 = 6;
      i43 = i31;
      while (1) {
       i26 = HEAPU8[i43 >> 0] | 0;
       i28 = i26 >>> i44 & 3;
       if ((i28 | 0) == (i46 | 0)) i61 = HEAPU16[i10 >> 1] << i44 & 255 | 16191 >>> (6 - i44 | 0) & i26; else i61 = (HEAPU8[i30 + (i28 << 2 | i28 | i28 << 4 | i28 << 6) >> 0] | 0) >>> 6 << i44 | 16191 >>> (6 - i44 | 0) & i26;
       HEAP8[i43 >> 0] = i61;
       i26 = (i44 | 0) == 0;
       i45 = i45 + 1 | 0;
       if ((i45 | 0) == (i54 | 0)) break; else {
        i44 = i26 ? 6 : i44 + -2 | 0;
        i43 = i26 ? i43 + 1 | 0 : i43;
       }
      }
      break;
     }
    case 4:
     {
      i43 = (i54 | 0) != 0;
      if (!i30) {
       if (!i43) break L140;
       i44 = i1 + 460 | 0;
       i45 = HEAPU16[i1 + 540 >> 1] | 0;
       i10 = 0;
       i46 = 4;
       i39 = i31;
       while (1) {
        i26 = HEAPU8[i39 >> 0] | 0;
        if ((i26 >>> i46 & 15 | 0) == (i45 | 0)) HEAP8[i39 >> 0] = HEAPU16[i44 >> 1] << i46 | 3855 >>> (4 - i46 | 0) & i26;
        i26 = (i46 | 0) == 0;
        i10 = i10 + 1 | 0;
        if ((i10 | 0) == (i54 | 0)) break L140; else {
         i46 = i26 ? 4 : i46 + -4 | 0;
         i39 = i26 ? i39 + 1 | 0 : i39;
        }
       }
      }
      if (!i43) break L140;
      i39 = i1 + 460 | 0;
      i46 = HEAPU16[i1 + 540 >> 1] | 0;
      i10 = 0;
      i44 = 4;
      i45 = i31;
      while (1) {
       i26 = HEAPU8[i45 >> 0] | 0;
       i28 = i26 >>> i44 & 15;
       if ((i28 | 0) == (i46 | 0)) i62 = HEAPU16[i39 >> 1] << i44 & 255 | 3855 >>> (4 - i44 | 0) & i26; else i62 = (HEAPU8[i30 + (i28 << 4 | i28) >> 0] | 0) >>> 4 << i44 | 3855 >>> (4 - i44 | 0) & i26;
       HEAP8[i45 >> 0] = i62;
       i26 = (i44 | 0) == 0;
       i10 = i10 + 1 | 0;
       if ((i10 | 0) == (i54 | 0)) break; else {
        i44 = i26 ? 4 : i44 + -4 | 0;
        i45 = i26 ? i45 + 1 | 0 : i45;
       }
      }
      break;
     }
    case 8:
     {
      i45 = (i54 | 0) != 0;
      if (!i30) {
       if (!i45) break L140;
       i44 = i1 + 460 | 0;
       i10 = HEAPU16[i1 + 540 >> 1] | 0;
       i39 = i31;
       i46 = 0;
       while (1) {
        if ((HEAPU8[i39 >> 0] | 0) == (i10 | 0)) HEAP8[i39 >> 0] = HEAP16[i44 >> 1];
        i46 = i46 + 1 | 0;
        if ((i46 | 0) == (i54 | 0)) break L140; else i39 = i39 + 1 | 0;
       }
      }
      if (!i45) break L140;
      i39 = i1 + 460 | 0;
      i46 = HEAPU16[i1 + 540 >> 1] | 0;
      i44 = i31;
      i10 = 0;
      while (1) {
       i43 = HEAPU8[i44 >> 0] | 0;
       if ((i43 | 0) == (i46 | 0)) i63 = HEAP16[i39 >> 1] & 255; else i63 = HEAP8[i30 + i43 >> 0] | 0;
       HEAP8[i44 >> 0] = i63;
       i10 = i10 + 1 | 0;
       if ((i10 | 0) == (i54 | 0)) break; else i44 = i44 + 1 | 0;
      }
      break;
     }
    case 16:
     {
      i44 = (i54 | 0) != 0;
      if (!i58) {
       if (!i44) break L140;
       i10 = i1 + 460 | 0;
       i39 = HEAPU16[i1 + 540 >> 1] | 0;
       i46 = i31;
       i45 = 0;
       while (1) {
        i43 = i46 + 1 | 0;
        if ((HEAPU8[i46 >> 0] << 8 | HEAPU8[i43 >> 0] | 0) == (i39 | 0)) {
         i26 = HEAP16[i10 >> 1] | 0;
         HEAP8[i46 >> 0] = (i26 & 65535) >>> 8;
         HEAP8[i43 >> 0] = i26;
        }
        i45 = i45 + 1 | 0;
        if ((i45 | 0) == (i54 | 0)) break; else i46 = i46 + 2 | 0;
       }
      } else {
       if (!i44) break L140;
       i46 = i1 + 460 | 0;
       i45 = HEAPU16[i1 + 540 >> 1] | 0;
       i10 = i31;
       i39 = 0;
       while (1) {
        i26 = HEAPU8[i10 >> 0] | 0;
        i43 = i10 + 1 | 0;
        i28 = HEAPU8[i43 >> 0] | 0;
        if ((i26 << 8 | i28 | 0) == (i45 | 0)) i64 = i46; else i64 = (HEAP32[i58 + (i28 >>> i56 << 2) >> 2] | 0) + (i26 << 1) | 0;
        i26 = HEAP16[i64 >> 1] | 0;
        HEAP8[i10 >> 0] = (i26 & 65535) >>> 8;
        HEAP8[i43 >> 0] = i26;
        i39 = i39 + 1 | 0;
        if ((i39 | 0) == (i54 | 0)) break; else i10 = i10 + 2 | 0;
       }
      }
      break;
     }
    default:
     break L140;
    }
    break;
   }
  case 2:
   {
    if ((HEAP8[i2 + 9 >> 0] | 0) == 8) {
     i10 = (i54 | 0) != 0;
     if (!i30) {
      if (!i10) break L140;
      i39 = i1 + 536 | 0;
      i46 = i1 + 538 | 0;
      i45 = i1 + 454 | 0;
      i44 = i1 + 456 | 0;
      i26 = i1 + 458 | 0;
      i43 = HEAPU16[i1 + 534 >> 1] | 0;
      i28 = 0;
      i40 = i31;
      while (1) {
       if ((HEAPU8[i40 >> 0] | 0) == (i43 | 0)) {
        i42 = i40 + 1 | 0;
        if ((HEAPU8[i42 >> 0] | 0) == (HEAPU16[i39 >> 1] | 0)) {
         i41 = i40 + 2 | 0;
         if ((HEAPU8[i41 >> 0] | 0) == (HEAPU16[i46 >> 1] | 0)) {
          HEAP8[i40 >> 0] = HEAP16[i45 >> 1];
          HEAP8[i42 >> 0] = HEAP16[i44 >> 1];
          HEAP8[i41 >> 0] = HEAP16[i26 >> 1];
         }
        }
       }
       i28 = i28 + 1 | 0;
       if ((i28 | 0) == (i54 | 0)) break L140; else i40 = i40 + 3 | 0;
      }
     }
     if (!i10) break L140;
     i40 = i1 + 536 | 0;
     i28 = i1 + 538 | 0;
     i26 = i1 + 454 | 0;
     i44 = i1 + 456 | 0;
     i45 = i1 + 458 | 0;
     i46 = HEAPU16[i1 + 534 >> 1] | 0;
     i39 = i31;
     i43 = 0;
     while (1) {
      i41 = HEAPU8[i39 >> 0] | 0;
      i42 = i39 + 1 | 0;
      i35 = HEAPU8[i42 >> 0] | 0;
      if ((i41 | 0) == (i46 | 0)) if ((i35 | 0) == (HEAPU16[i40 >> 1] | 0)) {
       i36 = i39 + 2 | 0;
       if ((HEAPU8[i36 >> 0] | 0) == (HEAPU16[i28 >> 1] | 0)) {
        HEAP8[i39 >> 0] = HEAP16[i26 >> 1];
        HEAP8[i42 >> 0] = HEAP16[i44 >> 1];
        i65 = i36;
        i66 = HEAP16[i45 >> 1] & 255;
       } else i3 = 160;
      } else i3 = 160; else i3 = 160;
      if ((i3 | 0) == 160) {
       i3 = 0;
       HEAP8[i39 >> 0] = HEAP8[i30 + i41 >> 0] | 0;
       HEAP8[i42 >> 0] = HEAP8[i30 + i35 >> 0] | 0;
       i35 = i39 + 2 | 0;
       i65 = i35;
       i66 = HEAP8[i30 + (HEAPU8[i35 >> 0] | 0) >> 0] | 0;
      }
      HEAP8[i65 >> 0] = i66;
      i43 = i43 + 1 | 0;
      if ((i43 | 0) == (i54 | 0)) break L140; else i39 = i39 + 3 | 0;
     }
    }
    i39 = (i54 | 0) != 0;
    if (!i58) {
     if (!i39) break L140;
     i43 = i1 + 536 | 0;
     i45 = i1 + 538 | 0;
     i44 = i1 + 454 | 0;
     i26 = i1 + 456 | 0;
     i28 = i1 + 458 | 0;
     i40 = HEAPU16[i1 + 534 >> 1] | 0;
     i46 = 0;
     i10 = i31;
     while (1) {
      i35 = i10 + 1 | 0;
      i42 = i10 + 2 | 0;
      i41 = i10 + 3 | 0;
      i36 = i10 + 4 | 0;
      i38 = i10 + 5 | 0;
      i37 = HEAPU8[i36 >> 0] << 8 | HEAPU8[i38 >> 0];
      if ((HEAPU8[i10 >> 0] << 8 | HEAPU8[i35 >> 0] | 0) == (i40 | 0)) if ((HEAPU8[i42 >> 0] << 8 | HEAPU8[i41 >> 0] | 0) == (HEAPU16[i43 >> 1] | 0)) if ((i37 | 0) == (HEAPU16[i45 >> 1] | 0)) {
       i37 = HEAP16[i44 >> 1] | 0;
       HEAP8[i10 >> 0] = (i37 & 65535) >>> 8;
       HEAP8[i35 >> 0] = i37;
       i37 = HEAP16[i26 >> 1] | 0;
       HEAP8[i42 >> 0] = (i37 & 65535) >>> 8;
       HEAP8[i41 >> 0] = i37;
       i37 = HEAP16[i28 >> 1] | 0;
       HEAP8[i36 >> 0] = (i37 & 65535) >>> 8;
       HEAP8[i38 >> 0] = i37;
      }
      i46 = i46 + 1 | 0;
      if ((i46 | 0) == (i54 | 0)) break L140; else i10 = i10 + 6 | 0;
     }
    }
    if (!i39) break L140;
    i10 = i1 + 536 | 0;
    i46 = i1 + 538 | 0;
    i28 = i1 + 454 | 0;
    i26 = i1 + 456 | 0;
    i44 = i1 + 458 | 0;
    i45 = HEAPU16[i1 + 534 >> 1] | 0;
    i43 = 0;
    i40 = i31;
    while (1) {
     i37 = HEAPU8[i40 >> 0] | 0;
     i38 = i40 + 1 | 0;
     i36 = HEAPU8[i38 >> 0] | 0;
     i41 = i40 + 2 | 0;
     i42 = i40 + 3 | 0;
     i35 = i40 + 4 | 0;
     i29 = HEAPU8[i35 >> 0] | 0;
     i7 = i40 + 5 | 0;
     i27 = HEAPU8[i7 >> 0] | 0;
     i25 = i29 << 8 | i27;
     if ((i37 << 8 | i36 | 0) == (i45 | 0)) {
      i21 = HEAP8[i41 >> 0] | 0;
      i11 = HEAP8[i42 >> 0] | 0;
      if (((i21 & 255) << 8 | i11 & 255 | 0) == (HEAPU16[i10 >> 1] | 0)) if ((i25 | 0) == (HEAPU16[i46 >> 1] | 0)) {
       i25 = HEAP16[i28 >> 1] | 0;
       HEAP8[i40 >> 0] = (i25 & 65535) >>> 8;
       HEAP8[i38 >> 0] = i25;
       i25 = HEAP16[i26 >> 1] | 0;
       HEAP8[i41 >> 0] = (i25 & 65535) >>> 8;
       HEAP8[i42 >> 0] = i25;
       i67 = i44;
      } else {
       i68 = i11;
       i69 = i21;
       i3 = 177;
      } else {
       i68 = i11;
       i69 = i21;
       i3 = 177;
      }
     } else {
      i68 = HEAP8[i42 >> 0] | 0;
      i69 = HEAP8[i41 >> 0] | 0;
      i3 = 177;
     }
     if ((i3 | 0) == 177) {
      i3 = 0;
      i21 = HEAP16[(HEAP32[i58 + (i36 >>> i56 << 2) >> 2] | 0) + (i37 << 1) >> 1] | 0;
      HEAP8[i40 >> 0] = (i21 & 65535) >>> 8;
      HEAP8[i38 >> 0] = i21;
      i21 = HEAP16[(HEAP32[i58 + ((i68 & 255) >>> i56 << 2) >> 2] | 0) + ((i69 & 255) << 1) >> 1] | 0;
      HEAP8[i41 >> 0] = (i21 & 65535) >>> 8;
      HEAP8[i42 >> 0] = i21;
      i67 = (HEAP32[i58 + (i27 >>> i56 << 2) >> 2] | 0) + (i29 << 1) | 0;
     }
     i29 = HEAP16[i67 >> 1] | 0;
     HEAP8[i35 >> 0] = (i29 & 65535) >>> 8;
     HEAP8[i7 >> 0] = i29;
     i43 = i43 + 1 | 0;
     if ((i43 | 0) == (i54 | 0)) break; else i40 = i40 + 6 | 0;
    }
    break;
   }
  case 4:
   {
    if ((HEAP8[i2 + 9 >> 0] | 0) != 8) {
     i40 = (i54 | 0) != 0;
     if (!((i58 | 0) != 0 & (i57 | 0) != 0 & (i55 | 0) != 0)) {
      if (!i40) break L140;
      i43 = i1 + 460 | 0;
      i44 = 0;
      i26 = i31;
      while (1) {
       i28 = HEAPU8[i26 + 2 >> 0] << 8 | HEAPU8[i26 + 3 >> 0];
       switch ((i28 & 65535) << 16 >> 16) {
       case 0:
        {
         i46 = HEAP16[i43 >> 1] | 0;
         HEAP8[i26 >> 0] = (i46 & 65535) >>> 8;
         HEAP8[i26 + 1 >> 0] = i46;
         break;
        }
       case -1:
        break;
       default:
        {
         i46 = i26 + 1 | 0;
         i10 = (Math_imul(HEAPU8[i26 >> 0] << 8 | HEAPU8[i46 >> 0], i28) | 0) + ((Math_imul(i28 ^ 65535, HEAPU16[i43 >> 1] | 0) | 0) + 32768) | 0;
         i28 = (i10 >>> 16) + i10 | 0;
         HEAP8[i26 >> 0] = i28 >>> 24;
         HEAP8[i46 >> 0] = i28 >>> 16;
        }
       }
       i44 = i44 + 1 | 0;
       if ((i44 | 0) == (i54 | 0)) break L140; else i26 = i26 + 4 | 0;
      }
     }
     if (!i40) break L140;
     i26 = i1 + 470 | 0;
     i44 = i1 + 460 | 0;
     if (i52) {
      i43 = 0;
      i28 = i31;
      while (1) {
       i46 = HEAPU8[i28 + 2 >> 0] << 8 | HEAPU8[i28 + 3 >> 0];
       switch ((i46 & 65535) << 16 >> 16) {
       case -1:
        {
         i10 = i28 + 1 | 0;
         i45 = HEAP16[(HEAP32[i58 + ((HEAPU8[i10 >> 0] | 0) >>> i56 << 2) >> 2] | 0) + (HEAPU8[i28 >> 0] << 1) >> 1] | 0;
         HEAP8[i28 >> 0] = (i45 & 65535) >>> 8;
         HEAP8[i10 >> 0] = i45;
         break;
        }
       case 0:
        {
         i45 = HEAP16[i44 >> 1] | 0;
         HEAP8[i28 >> 0] = (i45 & 65535) >>> 8;
         HEAP8[i28 + 1 >> 0] = i45;
         break;
        }
       default:
        {
         i45 = i28 + 1 | 0;
         i10 = (Math_imul(i46, HEAPU16[(HEAP32[i55 + ((HEAPU8[i45 >> 0] | 0) >>> i56 << 2) >> 2] | 0) + (HEAPU8[i28 >> 0] << 1) >> 1] | 0) | 0) + 32768 + (Math_imul(i46 ^ 65535, HEAPU16[i26 >> 1] | 0) | 0) | 0;
         i46 = (i10 >>> 16) + i10 | 0;
         i10 = HEAP16[(HEAP32[i57 + ((i46 >>> 16 & 255) >>> i56 << 2) >> 2] | 0) + (i46 >>> 24 << 1) >> 1] | 0;
         HEAP8[i28 >> 0] = (i10 & 65535) >>> 8;
         HEAP8[i45 >> 0] = i10;
        }
       }
       i43 = i43 + 1 | 0;
       if ((i43 | 0) == (i54 | 0)) break L140; else i28 = i28 + 4 | 0;
      }
     } else {
      i28 = 0;
      i43 = i31;
      while (1) {
       i52 = HEAPU8[i43 + 2 >> 0] << 8 | HEAPU8[i43 + 3 >> 0];
       switch ((i52 & 65535) << 16 >> 16) {
       case -1:
        {
         i40 = i43 + 1 | 0;
         i10 = HEAP16[(HEAP32[i58 + ((HEAPU8[i40 >> 0] | 0) >>> i56 << 2) >> 2] | 0) + (HEAPU8[i43 >> 0] << 1) >> 1] | 0;
         HEAP8[i43 >> 0] = (i10 & 65535) >>> 8;
         HEAP8[i40 >> 0] = i10;
         break;
        }
       case 0:
        {
         i10 = HEAP16[i44 >> 1] | 0;
         HEAP8[i43 >> 0] = (i10 & 65535) >>> 8;
         HEAP8[i43 + 1 >> 0] = i10;
         break;
        }
       default:
        {
         i10 = i43 + 1 | 0;
         i40 = (Math_imul(i52, HEAPU16[(HEAP32[i55 + ((HEAPU8[i10 >> 0] | 0) >>> i56 << 2) >> 2] | 0) + (HEAPU8[i43 >> 0] << 1) >> 1] | 0) | 0) + 32768 + (Math_imul(i52 ^ 65535, HEAPU16[i26 >> 1] | 0) | 0) | 0;
         i52 = (i40 >>> 16) + i40 | 0;
         HEAP8[i43 >> 0] = i52 >>> 24;
         HEAP8[i10 >> 0] = i52 >>> 16;
        }
       }
       i28 = i28 + 1 | 0;
       if ((i28 | 0) == (i54 | 0)) break L140; else i43 = i43 + 4 | 0;
      }
     }
    }
    i43 = (i54 | 0) != 0;
    if (!((i30 | 0) != 0 & ((i59 | 0) != 0 & (i32 | 0) != 0))) {
     if (!i43) break L140;
     i28 = i1 + 460 | 0;
     i26 = 0;
     i44 = i31;
     while (1) {
      i52 = HEAP8[i44 + 1 >> 0] | 0;
      switch (i52 << 24 >> 24) {
      case 0:
       {
        i70 = HEAP16[i28 >> 1] & 255;
        i3 = 203;
        break;
       }
      case -1:
       break;
      default:
       {
        i10 = i52 & 255;
        i52 = (Math_imul(HEAPU8[i44 >> 0] | 0, i10) | 0) + 128 + (Math_imul(i10 ^ 255, HEAPU16[i28 >> 1] | 0) | 0) | 0;
        i70 = ((i52 >>> 8 & 255) + i52 | 0) >>> 8 & 255;
        i3 = 203;
       }
      }
      if ((i3 | 0) == 203) {
       i3 = 0;
       HEAP8[i44 >> 0] = i70;
      }
      i26 = i26 + 1 | 0;
      if ((i26 | 0) == (i54 | 0)) break L140; else i44 = i44 + 2 | 0;
     }
    }
    if (!i43) break L140;
    i44 = i1 + 470 | 0;
    i26 = i1 + 460 | 0;
    if (!i53) {
     i28 = 0;
     i52 = i31;
     while (1) {
      i10 = HEAP8[i52 + 1 >> 0] | 0;
      i40 = i10 & 255;
      switch (i10 << 24 >> 24) {
      case -1:
       {
        i71 = HEAP8[i30 + (HEAPU8[i52 >> 0] | 0) >> 0] | 0;
        break;
       }
      case 0:
       {
        i71 = HEAP16[i26 >> 1] & 255;
        break;
       }
      default:
       {
        i10 = (Math_imul(HEAPU8[i32 + (HEAPU8[i52 >> 0] | 0) >> 0] | 0, i40) | 0) + 128 + (Math_imul(i40 ^ 255, HEAPU16[i44 >> 1] | 0) | 0) | 0;
        i71 = HEAP8[i59 + (((i10 >>> 8 & 255) + i10 | 0) >>> 8 & 255) >> 0] | 0;
       }
      }
      HEAP8[i52 >> 0] = i71;
      i28 = i28 + 1 | 0;
      if ((i28 | 0) == (i54 | 0)) break L140; else i52 = i52 + 2 | 0;
     }
    } else {
     i52 = 0;
     i28 = i31;
     while (1) {
      i43 = HEAP8[i28 + 1 >> 0] | 0;
      i10 = i43 & 255;
      switch (i43 << 24 >> 24) {
      case -1:
       {
        i72 = HEAP8[i30 + (HEAPU8[i28 >> 0] | 0) >> 0] | 0;
        break;
       }
      case 0:
       {
        i72 = HEAP16[i26 >> 1] & 255;
        break;
       }
      default:
       {
        i43 = (Math_imul(HEAPU8[i32 + (HEAPU8[i28 >> 0] | 0) >> 0] | 0, i10) | 0) + 128 + (Math_imul(i10 ^ 255, HEAPU16[i44 >> 1] | 0) | 0) | 0;
        i72 = ((i43 >>> 8 & 255) + i43 | 0) >>> 8 & 255;
       }
      }
      HEAP8[i28 >> 0] = i72;
      i52 = i52 + 1 | 0;
      if ((i52 | 0) == (i54 | 0)) break L140; else i28 = i28 + 2 | 0;
     }
    }
    break;
   }
  case 6:
   {
    if ((HEAP8[i2 + 9 >> 0] | 0) == 8) {
     i28 = (i54 | 0) != 0;
     if (!((i30 | 0) != 0 & ((i59 | 0) != 0 & (i32 | 0) != 0))) {
      if (!i28) break L140;
      i52 = i1 + 454 | 0;
      i44 = i1 + 456 | 0;
      i26 = i1 + 458 | 0;
      i43 = 0;
      i10 = i31;
      while (1) {
       i40 = HEAP8[i10 + 3 >> 0] | 0;
       switch (i40 << 24 >> 24) {
       case 0:
        {
         HEAP8[i10 >> 0] = HEAP16[i52 >> 1];
         HEAP8[i10 + 1 >> 0] = HEAP16[i44 >> 1];
         HEAP8[i10 + 2 >> 0] = HEAP16[i26 >> 1];
         break;
        }
       case -1:
        break;
       default:
        {
         i45 = i40 & 255;
         i40 = i45 ^ 255;
         i46 = (Math_imul(HEAPU8[i10 >> 0] | 0, i45) | 0) + 128 + (Math_imul(i40, HEAPU16[i52 >> 1] | 0) | 0) | 0;
         HEAP8[i10 >> 0] = ((i46 >>> 8 & 255) + i46 | 0) >>> 8;
         i46 = i10 + 1 | 0;
         i39 = (Math_imul(HEAPU8[i46 >> 0] | 0, i45) | 0) + 128 + (Math_imul(i40, HEAPU16[i44 >> 1] | 0) | 0) | 0;
         HEAP8[i46 >> 0] = ((i39 >>> 8 & 255) + i39 | 0) >>> 8;
         i39 = i10 + 2 | 0;
         i46 = (Math_imul(HEAPU8[i39 >> 0] | 0, i45) | 0) + 128 + (Math_imul(i40, HEAPU16[i26 >> 1] | 0) | 0) | 0;
         HEAP8[i39 >> 0] = ((i46 >>> 8 & 255) + i46 | 0) >>> 8;
        }
       }
       i43 = i43 + 1 | 0;
       if ((i43 | 0) == (i54 | 0)) break L140; else i10 = i10 + 4 | 0;
      }
     }
     if (!i28) break L140;
     i10 = i1 + 464 | 0;
     i43 = i1 + 466 | 0;
     i26 = i1 + 468 | 0;
     i44 = i1 + 454 | 0;
     i52 = i1 + 456 | 0;
     i46 = i1 + 458 | 0;
     if (!i53) {
      i39 = 0;
      i40 = i31;
      while (1) {
       i45 = HEAP8[i40 + 3 >> 0] | 0;
       switch (i45 << 24 >> 24) {
       case -1:
        {
         HEAP8[i40 >> 0] = HEAP8[i30 + (HEAPU8[i40 >> 0] | 0) >> 0] | 0;
         i29 = i40 + 1 | 0;
         HEAP8[i29 >> 0] = HEAP8[i30 + (HEAPU8[i29 >> 0] | 0) >> 0] | 0;
         i29 = i40 + 2 | 0;
         HEAP8[i29 >> 0] = HEAP8[i30 + (HEAPU8[i29 >> 0] | 0) >> 0] | 0;
         break;
        }
       case 0:
        {
         HEAP8[i40 >> 0] = HEAP16[i44 >> 1];
         HEAP8[i40 + 1 >> 0] = HEAP16[i52 >> 1];
         HEAP8[i40 + 2 >> 0] = HEAP16[i46 >> 1];
         break;
        }
       default:
        {
         i29 = i45 & 255;
         i45 = i29 ^ 255;
         i7 = (Math_imul(HEAPU8[i32 + (HEAPU8[i40 >> 0] | 0) >> 0] | 0, i29) | 0) + 128 + (Math_imul(i45, HEAPU16[i10 >> 1] | 0) | 0) | 0;
         HEAP8[i40 >> 0] = HEAP8[i59 + (((i7 >>> 8 & 255) + i7 | 0) >>> 8 & 255) >> 0] | 0;
         i7 = i40 + 1 | 0;
         i35 = (Math_imul(HEAPU8[i32 + (HEAPU8[i7 >> 0] | 0) >> 0] | 0, i29) | 0) + 128 + (Math_imul(i45, HEAPU16[i43 >> 1] | 0) | 0) | 0;
         HEAP8[i7 >> 0] = HEAP8[i59 + (((i35 >>> 8 & 255) + i35 | 0) >>> 8 & 255) >> 0] | 0;
         i35 = i40 + 2 | 0;
         i7 = (Math_imul(HEAPU8[i32 + (HEAPU8[i35 >> 0] | 0) >> 0] | 0, i29) | 0) + 128 + (Math_imul(i45, HEAPU16[i26 >> 1] | 0) | 0) | 0;
         HEAP8[i35 >> 0] = HEAP8[i59 + (((i7 >>> 8 & 255) + i7 | 0) >>> 8 & 255) >> 0] | 0;
        }
       }
       i39 = i39 + 1 | 0;
       if ((i39 | 0) == (i54 | 0)) break L140; else i40 = i40 + 4 | 0;
      }
     } else {
      i40 = 0;
      i39 = i31;
      while (1) {
       i59 = HEAP8[i39 + 3 >> 0] | 0;
       switch (i59 << 24 >> 24) {
       case -1:
        {
         HEAP8[i39 >> 0] = HEAP8[i30 + (HEAPU8[i39 >> 0] | 0) >> 0] | 0;
         i28 = i39 + 1 | 0;
         HEAP8[i28 >> 0] = HEAP8[i30 + (HEAPU8[i28 >> 0] | 0) >> 0] | 0;
         i28 = i39 + 2 | 0;
         HEAP8[i28 >> 0] = HEAP8[i30 + (HEAPU8[i28 >> 0] | 0) >> 0] | 0;
         break;
        }
       case 0:
        {
         HEAP8[i39 >> 0] = HEAP16[i44 >> 1];
         HEAP8[i39 + 1 >> 0] = HEAP16[i52 >> 1];
         HEAP8[i39 + 2 >> 0] = HEAP16[i46 >> 1];
         break;
        }
       default:
        {
         i28 = i59 & 255;
         i59 = i28 ^ 255;
         i7 = (Math_imul(HEAPU8[i32 + (HEAPU8[i39 >> 0] | 0) >> 0] | 0, i28) | 0) + 128 + (Math_imul(i59, HEAPU16[i10 >> 1] | 0) | 0) | 0;
         HEAP8[i39 >> 0] = ((i7 >>> 8 & 255) + i7 | 0) >>> 8;
         i7 = i39 + 1 | 0;
         i35 = (Math_imul(HEAPU8[i32 + (HEAPU8[i7 >> 0] | 0) >> 0] | 0, i28) | 0) + 128 + (Math_imul(i59, HEAPU16[i43 >> 1] | 0) | 0) | 0;
         HEAP8[i7 >> 0] = ((i35 >>> 8 & 255) + i35 | 0) >>> 8;
         i35 = i39 + 2 | 0;
         i7 = (Math_imul(HEAPU8[i32 + (HEAPU8[i35 >> 0] | 0) >> 0] | 0, i28) | 0) + 128 + (Math_imul(i59, HEAPU16[i26 >> 1] | 0) | 0) | 0;
         HEAP8[i35 >> 0] = ((i7 >>> 8 & 255) + i7 | 0) >>> 8;
        }
       }
       i40 = i40 + 1 | 0;
       if ((i40 | 0) == (i54 | 0)) break L140; else i39 = i39 + 4 | 0;
      }
     }
    }
    i39 = (i54 | 0) != 0;
    if (!((i58 | 0) != 0 & (i57 | 0) != 0 & (i55 | 0) != 0)) {
     if (!i39) break L140;
     i40 = i1 + 454 | 0;
     i26 = i1 + 456 | 0;
     i32 = i1 + 458 | 0;
     i43 = 0;
     i10 = i31;
     while (1) {
      i46 = HEAPU8[i10 + 6 >> 0] << 8 | HEAPU8[i10 + 7 >> 0];
      switch ((i46 & 65535) << 16 >> 16) {
      case 0:
       {
        i52 = HEAP16[i40 >> 1] | 0;
        HEAP8[i10 >> 0] = (i52 & 65535) >>> 8;
        HEAP8[i10 + 1 >> 0] = i52;
        i52 = HEAP16[i26 >> 1] | 0;
        HEAP8[i10 + 2 >> 0] = (i52 & 65535) >>> 8;
        HEAP8[i10 + 3 >> 0] = i52;
        i52 = HEAP16[i32 >> 1] | 0;
        HEAP8[i10 + 4 >> 0] = (i52 & 65535) >>> 8;
        HEAP8[i10 + 5 >> 0] = i52;
        break;
       }
      case -1:
       break;
      default:
       {
        i52 = i10 + 1 | 0;
        i44 = i10 + 2 | 0;
        i30 = i10 + 3 | 0;
        i7 = HEAPU8[i44 >> 0] << 8 | HEAPU8[i30 >> 0];
        i35 = i10 + 4 | 0;
        i59 = i10 + 5 | 0;
        i28 = HEAPU8[i35 >> 0] << 8 | HEAPU8[i59 >> 0];
        i45 = i46 ^ 65535;
        i29 = (Math_imul(HEAPU8[i10 >> 0] << 8 | HEAPU8[i52 >> 0], i46) | 0) + 32768 + (Math_imul(i45, HEAPU16[i40 >> 1] | 0) | 0) | 0;
        i27 = (i29 >>> 16) + i29 | 0;
        HEAP8[i10 >> 0] = i27 >>> 24;
        HEAP8[i52 >> 0] = i27 >>> 16;
        i27 = (Math_imul(i7, i46) | 0) + 32768 + (Math_imul(i45, HEAPU16[i26 >> 1] | 0) | 0) | 0;
        i7 = (i27 >>> 16) + i27 | 0;
        HEAP8[i44 >> 0] = i7 >>> 24;
        HEAP8[i30 >> 0] = i7 >>> 16;
        i7 = (Math_imul(i28, i46) | 0) + 32768 + (Math_imul(i45, HEAPU16[i32 >> 1] | 0) | 0) | 0;
        i45 = (i7 >>> 16) + i7 | 0;
        HEAP8[i35 >> 0] = i45 >>> 24;
        HEAP8[i59 >> 0] = i45 >>> 16;
       }
      }
      i43 = i43 + 1 | 0;
      if ((i43 | 0) == (i54 | 0)) break L140; else i10 = i10 + 8 | 0;
     }
    }
    if (!i39) break L140;
    i10 = i1 + 464 | 0;
    i43 = (i53 | 0) == 0;
    i32 = i1 + 466 | 0;
    i26 = i1 + 468 | 0;
    i40 = i1 + 454 | 0;
    i45 = i1 + 456 | 0;
    i59 = i1 + 458 | 0;
    i35 = 0;
    i7 = i31;
    while (1) {
     i46 = HEAPU8[i7 + 6 >> 0] << 8 | HEAPU8[i7 + 7 >> 0];
     switch ((i46 & 65535) << 16 >> 16) {
     case -1:
      {
       i28 = i7 + 1 | 0;
       i30 = HEAP16[(HEAP32[i58 + ((HEAPU8[i28 >> 0] | 0) >>> i56 << 2) >> 2] | 0) + (HEAPU8[i7 >> 0] << 1) >> 1] | 0;
       HEAP8[i7 >> 0] = (i30 & 65535) >>> 8;
       HEAP8[i28 >> 0] = i30;
       i30 = i7 + 3 | 0;
       i28 = i7 + 2 | 0;
       i44 = HEAP16[(HEAP32[i58 + ((HEAPU8[i30 >> 0] | 0) >>> i56 << 2) >> 2] | 0) + (HEAPU8[i28 >> 0] << 1) >> 1] | 0;
       HEAP8[i28 >> 0] = (i44 & 65535) >>> 8;
       HEAP8[i30 >> 0] = i44;
       i44 = i7 + 5 | 0;
       i30 = i7 + 4 | 0;
       i28 = HEAP16[(HEAP32[i58 + ((HEAPU8[i44 >> 0] | 0) >>> i56 << 2) >> 2] | 0) + (HEAPU8[i30 >> 0] << 1) >> 1] | 0;
       HEAP8[i30 >> 0] = (i28 & 65535) >>> 8;
       HEAP8[i44 >> 0] = i28;
       break;
      }
     case 0:
      {
       i28 = HEAP16[i40 >> 1] | 0;
       HEAP8[i7 >> 0] = (i28 & 65535) >>> 8;
       HEAP8[i7 + 1 >> 0] = i28;
       i28 = HEAP16[i45 >> 1] | 0;
       HEAP8[i7 + 2 >> 0] = (i28 & 65535) >>> 8;
       HEAP8[i7 + 3 >> 0] = i28;
       i28 = HEAP16[i59 >> 1] | 0;
       HEAP8[i7 + 4 >> 0] = (i28 & 65535) >>> 8;
       HEAP8[i7 + 5 >> 0] = i28;
       break;
      }
     default:
      {
       i28 = i7 + 1 | 0;
       i44 = i46 ^ 65535;
       i30 = (Math_imul(i46, HEAPU16[(HEAP32[i55 + ((HEAPU8[i28 >> 0] | 0) >>> i56 << 2) >> 2] | 0) + (HEAPU8[i7 >> 0] << 1) >> 1] | 0) | 0) + 32768 + (Math_imul(i44, HEAPU16[i10 >> 1] | 0) | 0) | 0;
       i27 = (i30 >>> 16) + i30 | 0;
       i30 = i27 >>> 16;
       i52 = i27 >>> 24;
       if (i43) {
        i27 = HEAP16[(HEAP32[i57 + ((i30 & 255) >>> i56 << 2) >> 2] | 0) + (i52 << 1) >> 1] | 0;
        i73 = i27 & 255;
        i74 = (i27 & 65535) >>> 8 & 255;
       } else {
        i73 = i30 & 255;
        i74 = i52 & 255;
       }
       HEAP8[i7 >> 0] = i74;
       HEAP8[i28 >> 0] = i73;
       i28 = i7 + 3 | 0;
       i52 = i7 + 2 | 0;
       i30 = (Math_imul(i46, HEAPU16[(HEAP32[i55 + ((HEAPU8[i28 >> 0] | 0) >>> i56 << 2) >> 2] | 0) + (HEAPU8[i52 >> 0] << 1) >> 1] | 0) | 0) + 32768 + (Math_imul(i44, HEAPU16[i32 >> 1] | 0) | 0) | 0;
       i27 = (i30 >>> 16) + i30 | 0;
       i30 = i27 >>> 16;
       i29 = i27 >>> 24;
       if (i43) {
        i27 = HEAP16[(HEAP32[i57 + ((i30 & 255) >>> i56 << 2) >> 2] | 0) + (i29 << 1) >> 1] | 0;
        i75 = i27 & 255;
        i76 = (i27 & 65535) >>> 8 & 255;
       } else {
        i75 = i30 & 255;
        i76 = i29 & 255;
       }
       HEAP8[i52 >> 0] = i76;
       HEAP8[i28 >> 0] = i75;
       i28 = i7 + 5 | 0;
       i52 = i7 + 4 | 0;
       i29 = (Math_imul(i46, HEAPU16[(HEAP32[i55 + ((HEAPU8[i28 >> 0] | 0) >>> i56 << 2) >> 2] | 0) + (HEAPU8[i52 >> 0] << 1) >> 1] | 0) | 0) + 32768 + (Math_imul(i44, HEAPU16[i26 >> 1] | 0) | 0) | 0;
       i44 = (i29 >>> 16) + i29 | 0;
       i29 = i44 >>> 16;
       i46 = i44 >>> 24;
       if (i43) {
        i44 = HEAP16[(HEAP32[i57 + ((i29 & 255) >>> i56 << 2) >> 2] | 0) + (i46 << 1) >> 1] | 0;
        i77 = i44 & 255;
        i78 = (i44 & 65535) >>> 8 & 255;
       } else {
        i77 = i29 & 255;
        i78 = i46 & 255;
       }
       HEAP8[i52 >> 0] = i78;
       HEAP8[i28 >> 0] = i77;
      }
     }
     i35 = i35 + 1 | 0;
     if ((i35 | 0) == (i54 | 0)) break L140; else i7 = i7 + 8 | 0;
    }
    break;
   }
  default:
   break L140;
  }
 } while (0);
 i77 = HEAP32[i9 >> 2] | 0;
 L382 : do if ((i77 & 6299648 | 0) == 8192) {
  if (!(i77 & 128)) i79 = HEAP8[i1 + 435 >> 0] | 0; else {
   if (HEAP16[i1 + 428 >> 1] | 0) break;
   i78 = HEAP8[i1 + 435 >> 0] | 0;
   if (!(i78 & 4)) i79 = i78; else break;
  }
  if (i79 << 24 >> 24 != 3) {
   i78 = (HEAP32[i6 >> 2] | 0) + 1 | 0;
   i75 = HEAP32[i1 + 484 >> 2] | 0;
   i76 = HEAP32[i1 + 492 >> 2] | 0;
   i73 = HEAP32[i1 + 496 >> 2] | 0;
   i74 = HEAP32[i2 >> 2] | 0;
   i72 = i2 + 9 | 0;
   i71 = HEAP8[i72 >> 0] | 0;
   if (!((i76 | 0) != 0 & (i71 & 255) < 9)) if (!((i73 | 0) != 0 & i71 << 24 >> 24 == 16)) break;
   switch (HEAP8[i2 + 8 >> 0] | 0) {
   case 2:
    {
     i70 = (i74 | 0) != 0;
     if (i71 << 24 >> 24 == 8) {
      if (i70) {
       i80 = i78;
       i81 = 0;
      } else break L382;
      while (1) {
       HEAP8[i80 >> 0] = HEAP8[i76 + (HEAPU8[i80 >> 0] | 0) >> 0] | 0;
       i3 = i80 + 1 | 0;
       HEAP8[i3 >> 0] = HEAP8[i76 + (HEAPU8[i3 >> 0] | 0) >> 0] | 0;
       i3 = i80 + 2 | 0;
       HEAP8[i3 >> 0] = HEAP8[i76 + (HEAPU8[i3 >> 0] | 0) >> 0] | 0;
       i81 = i81 + 1 | 0;
       if ((i81 | 0) == (i74 | 0)) break; else i80 = i80 + 3 | 0;
      }
     } else {
      if (i70) {
       i82 = i78;
       i83 = 0;
      } else break L382;
      while (1) {
       i3 = i82 + 1 | 0;
       i67 = HEAP16[(HEAP32[i73 + ((HEAPU8[i3 >> 0] | 0) >>> i75 << 2) >> 2] | 0) + (HEAPU8[i82 >> 0] << 1) >> 1] | 0;
       HEAP8[i82 >> 0] = (i67 & 65535) >>> 8;
       HEAP8[i3 >> 0] = i67;
       i67 = i82 + 2 | 0;
       i3 = i82 + 3 | 0;
       i69 = HEAP16[(HEAP32[i73 + ((HEAPU8[i3 >> 0] | 0) >>> i75 << 2) >> 2] | 0) + (HEAPU8[i67 >> 0] << 1) >> 1] | 0;
       HEAP8[i67 >> 0] = (i69 & 65535) >>> 8;
       HEAP8[i3 >> 0] = i69;
       i69 = i82 + 4 | 0;
       i3 = i82 + 5 | 0;
       i67 = HEAP16[(HEAP32[i73 + ((HEAPU8[i3 >> 0] | 0) >>> i75 << 2) >> 2] | 0) + (HEAPU8[i69 >> 0] << 1) >> 1] | 0;
       HEAP8[i69 >> 0] = (i67 & 65535) >>> 8;
       HEAP8[i3 >> 0] = i67;
       i83 = i83 + 1 | 0;
       if ((i83 | 0) == (i74 | 0)) break; else i82 = i82 + 6 | 0;
      }
     }
     break;
    }
   case 6:
    {
     i70 = (i74 | 0) != 0;
     if (i71 << 24 >> 24 == 8) {
      if (i70) {
       i84 = 0;
       i85 = i78;
      } else break L382;
      while (1) {
       HEAP8[i85 >> 0] = HEAP8[i76 + (HEAPU8[i85 >> 0] | 0) >> 0] | 0;
       i67 = i85 + 1 | 0;
       HEAP8[i67 >> 0] = HEAP8[i76 + (HEAPU8[i67 >> 0] | 0) >> 0] | 0;
       i67 = i85 + 2 | 0;
       HEAP8[i67 >> 0] = HEAP8[i76 + (HEAPU8[i67 >> 0] | 0) >> 0] | 0;
       i84 = i84 + 1 | 0;
       if ((i84 | 0) == (i74 | 0)) break; else i85 = i85 + 4 | 0;
      }
     } else {
      if (i70) {
       i86 = 0;
       i87 = i78;
      } else break L382;
      while (1) {
       i67 = i87 + 1 | 0;
       i3 = HEAP16[(HEAP32[i73 + ((HEAPU8[i67 >> 0] | 0) >>> i75 << 2) >> 2] | 0) + (HEAPU8[i87 >> 0] << 1) >> 1] | 0;
       HEAP8[i87 >> 0] = (i3 & 65535) >>> 8;
       HEAP8[i67 >> 0] = i3;
       i3 = i87 + 2 | 0;
       i67 = i87 + 3 | 0;
       i69 = HEAP16[(HEAP32[i73 + ((HEAPU8[i67 >> 0] | 0) >>> i75 << 2) >> 2] | 0) + (HEAPU8[i3 >> 0] << 1) >> 1] | 0;
       HEAP8[i3 >> 0] = (i69 & 65535) >>> 8;
       HEAP8[i67 >> 0] = i69;
       i69 = i87 + 4 | 0;
       i67 = i87 + 5 | 0;
       i3 = HEAP16[(HEAP32[i73 + ((HEAPU8[i67 >> 0] | 0) >>> i75 << 2) >> 2] | 0) + (HEAPU8[i69 >> 0] << 1) >> 1] | 0;
       HEAP8[i69 >> 0] = (i3 & 65535) >>> 8;
       HEAP8[i67 >> 0] = i3;
       i86 = i86 + 1 | 0;
       if ((i86 | 0) == (i74 | 0)) break; else i87 = i87 + 8 | 0;
      }
     }
     break;
    }
   case 4:
    {
     i70 = (i74 | 0) != 0;
     if (i71 << 24 >> 24 == 8) {
      if (i70) {
       i88 = 0;
       i89 = i78;
      } else break L382;
      while (1) {
       HEAP8[i89 >> 0] = HEAP8[i76 + (HEAPU8[i89 >> 0] | 0) >> 0] | 0;
       i88 = i88 + 1 | 0;
       if ((i88 | 0) == (i74 | 0)) break; else i89 = i89 + 2 | 0;
      }
     } else {
      if (i70) {
       i90 = 0;
       i91 = i78;
      } else break L382;
      while (1) {
       i3 = i91 + 1 | 0;
       i67 = HEAP16[(HEAP32[i73 + ((HEAPU8[i3 >> 0] | 0) >>> i75 << 2) >> 2] | 0) + (HEAPU8[i91 >> 0] << 1) >> 1] | 0;
       HEAP8[i91 >> 0] = (i67 & 65535) >>> 8;
       HEAP8[i3 >> 0] = i67;
       i90 = i90 + 1 | 0;
       if ((i90 | 0) == (i74 | 0)) break; else i91 = i91 + 4 | 0;
      }
     }
     break;
    }
   case 0:
    {
     if (i71 << 24 >> 24 == 2) {
      if (!i74) break L382; else {
       i92 = 0;
       i93 = i78;
      }
      while (1) {
       i70 = HEAPU8[i93 >> 0] | 0;
       i67 = i70 & 192;
       i3 = i70 & 48;
       i69 = i70 & 12;
       i68 = i70 & 3;
       HEAP8[i93 >> 0] = (HEAPU8[i76 + (i3 << 2 | i3 | i3 >>> 2 | i3 >>> 4) >> 0] | 0) >>> 2 & 48 | HEAP8[i76 + (i70 >>> 6 | i67 | i67 >>> 2 | i67 >>> 4) >> 0] & -64 & 255 | (HEAPU8[i76 + (i69 << 2 | i69 | i69 << 4 | i69 >>> 2) >> 0] | 0) >>> 4 & 12 | (HEAPU8[i76 + (i68 << 4 | i68 | i68 << 6 | i68 << 2) >> 0] | 0) >>> 6;
       i92 = i92 + 4 | 0;
       if (i92 >>> 0 >= i74 >>> 0) break; else i93 = i93 + 1 | 0;
      }
      i94 = HEAP8[i72 >> 0] | 0;
     } else i94 = i71;
     switch (i94 << 24 >> 24) {
     case 4:
      {
       if (!i74) break L382; else {
        i95 = 0;
        i96 = i78;
       }
       while (1) {
        i68 = HEAPU8[i96 >> 0] | 0;
        i69 = i68 & 15;
        HEAP8[i96 >> 0] = (HEAPU8[i76 + (i69 << 4 | i69) >> 0] | 0) >>> 4 | HEAP8[i76 + (i68 & 240 | i68 >>> 4) >> 0] & -16 & 255;
        i95 = i95 + 2 | 0;
        if (i95 >>> 0 >= i74 >>> 0) break; else i96 = i96 + 1 | 0;
       }
       break;
      }
     case 8:
      {
       if (!i74) break L382; else {
        i97 = 0;
        i98 = i78;
       }
       while (1) {
        HEAP8[i98 >> 0] = HEAP8[i76 + (HEAPU8[i98 >> 0] | 0) >> 0] | 0;
        i97 = i97 + 1 | 0;
        if ((i97 | 0) == (i74 | 0)) break; else i98 = i98 + 1 | 0;
       }
       break;
      }
     case 16:
      {
       if (!i74) break L382; else {
        i99 = 0;
        i100 = i78;
       }
       while (1) {
        i76 = i100 + 1 | 0;
        i71 = HEAP16[(HEAP32[i73 + ((HEAPU8[i76 >> 0] | 0) >>> i75 << 2) >> 2] | 0) + (HEAPU8[i100 >> 0] << 1) >> 1] | 0;
        HEAP8[i100 >> 0] = (i71 & 65535) >>> 8;
        HEAP8[i76 >> 0] = i71;
        i99 = i99 + 1 | 0;
        if ((i99 | 0) == (i74 | 0)) break; else i100 = i100 + 2 | 0;
       }
       break;
      }
     default:
      break L382;
     }
     break;
    }
   default:
    break L382;
   }
  }
 } while (0);
 i100 = HEAP32[i9 >> 2] | 0;
 L436 : do if ((i100 & 262272 | 0) == 262272) {
  switch (HEAP8[i2 + 8 >> 0] | 0) {
  case 4:
  case 6:
   break;
  default:
   {
    i101 = i100;
    break L436;
   }
  }
  _png_do_strip_channel(i2, (HEAP32[i6 >> 2] | 0) + 1 | 0, 0);
  i101 = HEAP32[i9 >> 2] | 0;
 } else i101 = i100; while (0);
 L440 : do if (i101 & 8388608 | 0) {
  i100 = HEAP8[i2 + 8 >> 0] | 0;
  if (i100 & 4) {
   i99 = (HEAP32[i6 >> 2] | 0) + 1 | 0;
   i98 = HEAP32[i2 >> 2] | 0;
   i97 = i100 & 255;
   L443 : do if (i97 & 4 | 0) switch (HEAP8[i2 + 9 >> 0] | 0) {
   case 8:
    {
     i100 = HEAP32[i1 + 500 >> 2] | 0;
     if (!i100) break L443;
     i96 = i97 & 2;
     i95 = i96 + 2 | 0;
     if (!i98) break L440;
     i94 = i98;
     i93 = i99 + (i96 | 1) | 0;
     while (1) {
      HEAP8[i93 >> 0] = HEAP8[i100 + (HEAPU8[i93 >> 0] | 0) >> 0] | 0;
      i94 = i94 + -1 | 0;
      if (!i94) break L440; else i93 = i93 + i95 | 0;
     }
     break;
    }
   case 16:
    {
     i95 = HEAP32[i1 + 508 >> 2] | 0;
     i93 = HEAP32[i1 + 484 >> 2] | 0;
     if (!i95) break L443;
     i94 = i97 << 1 & 4;
     i100 = i94 + 4 | 0;
     if (!i98) break L440;
     i96 = i98;
     i92 = i99 + (i94 | 2) | 0;
     while (1) {
      i94 = i92 + 1 | 0;
      i91 = HEAP16[(HEAP32[i95 + ((HEAPU8[i94 >> 0] | 0) >>> i93 << 2) >> 2] | 0) + (HEAPU8[i92 >> 0] << 1) >> 1] | 0;
      HEAP8[i92 >> 0] = (i91 & 65535) >>> 8;
      HEAP8[i94 >> 0] = i91;
      i96 = i96 + -1 | 0;
      if (!i96) break L440; else i92 = i92 + i100 | 0;
     }
     break;
    }
   default:
    break L443;
   } while (0);
   _png_warning(i1, 59538);
  }
 } while (0);
 i101 = HEAP32[i9 >> 2] | 0;
 if (!(i101 & 67108864)) i102 = i101; else {
  i99 = (HEAP32[i6 >> 2] | 0) + 1 | 0;
  i98 = i2 + 9 | 0;
  if ((HEAP8[i98 >> 0] | 0) == 16) {
   i97 = i2 + 4 | 0;
   i100 = HEAP32[i97 >> 2] | 0;
   i92 = i99 + i100 | 0;
   if ((i100 | 0) > 0) {
    i100 = i99;
    i96 = i99;
    while (1) {
     i99 = HEAPU8[i96 >> 0] | 0;
     HEAP8[i100 >> 0] = (((((HEAPU8[i96 + 1 >> 0] | 0) - i99 | 0) * 65535 | 0) + 8388480 | 0) >>> 24) + i99;
     i96 = i96 + 2 | 0;
     if (i96 >>> 0 >= i92 >>> 0) break; else i100 = i100 + 1 | 0;
    }
    i103 = HEAP32[i9 >> 2] | 0;
   } else i103 = i101;
   HEAP8[i98 >> 0] = 8;
   i98 = HEAPU8[i2 + 10 >> 0] | 0;
   HEAP8[i2 + 11 >> 0] = i98 << 3;
   i100 = Math_imul(HEAP32[i2 >> 2] | 0, i98) | 0;
   HEAP32[i97 >> 2] = i100;
   i102 = i103;
  } else i102 = i101;
 }
 if (!(i102 & 1024)) i104 = i102; else {
  i101 = (HEAP32[i6 >> 2] | 0) + 1 | 0;
  i103 = i2 + 9 | 0;
  if ((HEAP8[i103 >> 0] | 0) == 16) {
   i100 = i2 + 4 | 0;
   i97 = HEAP32[i100 >> 2] | 0;
   i98 = i101 + i97 | 0;
   if ((i97 | 0) > 0) {
    i97 = i101;
    i92 = i101;
    while (1) {
     HEAP8[i97 >> 0] = HEAP8[i92 >> 0] | 0;
     i92 = i92 + 2 | 0;
     if (i92 >>> 0 >= i98 >>> 0) break; else i97 = i97 + 1 | 0;
    }
    i105 = HEAP32[i9 >> 2] | 0;
   } else i105 = i102;
   HEAP8[i103 >> 0] = 8;
   i103 = HEAPU8[i2 + 10 >> 0] | 0;
   HEAP8[i2 + 11 >> 0] = i103 << 3;
   i97 = Math_imul(HEAP32[i2 >> 2] | 0, i103) | 0;
   HEAP32[i100 >> 2] = i97;
   i104 = i105;
  } else i104 = i102;
 }
 do if (!(i104 & 64)) i106 = i104; else {
  i102 = (HEAP32[i6 >> 2] | 0) + 1 | 0;
  i105 = HEAP32[i1 + 612 >> 2] | 0;
  i97 = HEAP32[i1 + 616 >> 2] | 0;
  i100 = HEAP32[i2 >> 2] | 0;
  i103 = i2 + 9 | 0;
  L478 : do if ((HEAP8[i103 >> 0] | 0) == 8) {
   i98 = i2 + 8 | 0;
   i92 = HEAP8[i98 >> 0] | 0;
   i101 = (i105 | 0) != 0;
   if (i101 & i92 << 24 >> 24 == 2) {
    if (!i100) i107 = 8; else {
     i96 = i102;
     i99 = 0;
     i93 = i102;
     while (1) {
      HEAP8[i96 >> 0] = HEAP8[i105 + ((HEAPU8[i93 + 1 >> 0] | 0) >>> 3 << 5 | (HEAPU8[i93 >> 0] | 0) >>> 3 << 10 | (HEAPU8[i93 + 2 >> 0] | 0) >>> 3) >> 0] | 0;
      i99 = i99 + 1 | 0;
      if ((i99 | 0) == (i100 | 0)) break; else {
       i96 = i96 + 1 | 0;
       i93 = i93 + 3 | 0;
      }
     }
     i107 = HEAP8[i103 >> 0] | 0;
    }
    HEAP8[i98 >> 0] = 3;
    HEAP8[i2 + 10 >> 0] = 1;
    HEAP8[i2 + 11 >> 0] = i107;
    i93 = i107 & 255;
    if ((i107 & 255) > 7) i108 = Math_imul(i93 >>> 3, i100) | 0; else i108 = ((Math_imul(i100, i93) | 0) + 7 | 0) >>> 3;
    HEAP32[i2 + 4 >> 2] = i108;
    break;
   }
   if (!(i101 & i92 << 24 >> 24 == 6)) {
    if ((i100 | 0) != 0 & ((i97 | 0) != 0 & i92 << 24 >> 24 == 3)) {
     i109 = i102;
     i110 = 0;
    } else break;
    while (1) {
     HEAP8[i109 >> 0] = HEAP8[i97 + (HEAPU8[i109 >> 0] | 0) >> 0] | 0;
     i110 = i110 + 1 | 0;
     if ((i110 | 0) == (i100 | 0)) break L478; else i109 = i109 + 1 | 0;
    }
   }
   if (!i100) i111 = 8; else {
    i92 = i102;
    i101 = i102;
    i93 = 0;
    while (1) {
     HEAP8[i101 >> 0] = HEAP8[i105 + ((HEAPU8[i92 + 1 >> 0] | 0) >>> 3 << 5 | (HEAPU8[i92 >> 0] | 0) >>> 3 << 10 | (HEAPU8[i92 + 2 >> 0] | 0) >>> 3) >> 0] | 0;
     i93 = i93 + 1 | 0;
     if ((i93 | 0) == (i100 | 0)) break; else {
      i92 = i92 + 4 | 0;
      i101 = i101 + 1 | 0;
     }
    }
    i111 = HEAP8[i103 >> 0] | 0;
   }
   HEAP8[i98 >> 0] = 3;
   HEAP8[i2 + 10 >> 0] = 1;
   HEAP8[i2 + 11 >> 0] = i111;
   i101 = i111 & 255;
   if ((i111 & 255) > 7) i112 = Math_imul(i101 >>> 3, i100) | 0; else i112 = ((Math_imul(i100, i101) | 0) + 7 | 0) >>> 3;
   HEAP32[i2 + 4 >> 2] = i112;
  } while (0);
  if (!(HEAP32[i2 + 4 >> 2] | 0)) _png_error(i1, 59575); else {
   i106 = HEAP32[i9 >> 2] | 0;
   break;
  }
 } while (0);
 if (!(i106 & 512)) i113 = i106; else {
  i112 = (HEAP32[i6 >> 2] | 0) + 1 | 0;
  i111 = i2 + 9 | 0;
  if ((HEAP8[i111 >> 0] | 0) == 8) if ((HEAP8[i2 + 8 >> 0] | 0) == 3) i113 = i106; else {
   i109 = i2 + 4 | 0;
   i110 = HEAP32[i109 >> 2] | 0;
   i108 = i112 + i110 | 0;
   if ((i110 | 0) > 0) {
    i112 = i108;
    i107 = i108 + i110 | 0;
    do {
     i112 = i112 + -1 | 0;
     i108 = HEAP8[i112 >> 0] | 0;
     HEAP8[i107 + -1 >> 0] = i108;
     i107 = i107 + -2 | 0;
     HEAP8[i107 >> 0] = i108;
    } while (i107 >>> 0 > i112 >>> 0);
    i114 = HEAP32[i9 >> 2] | 0;
    i115 = HEAP32[i109 >> 2] | 0;
   } else {
    i114 = i106;
    i115 = i110;
   }
   HEAP32[i109 >> 2] = i115 << 1;
   HEAP8[i111 >> 0] = 16;
   HEAP8[i2 + 11 >> 0] = HEAPU8[i2 + 10 >> 0] << 4;
   i113 = i114;
  } else i113 = i106;
 }
 if (!(i113 & 16384)) i116 = i113; else if (!(HEAP32[i1 + 208 >> 2] & 2048)) i116 = i113; else {
  _png_do_gray_to_rgb(i2, (HEAP32[i6 >> 2] | 0) + 1 | 0);
  i116 = HEAP32[i9 >> 2] | 0;
 }
 if (!(i116 & 32)) i117 = i116; else {
  _png_do_invert(i2, (HEAP32[i6 >> 2] | 0) + 1 | 0);
  i117 = HEAP32[i9 >> 2] | 0;
 }
 L529 : do if (i117 & 524288 | 0) {
  i116 = (HEAP32[i6 >> 2] | 0) + 1 | 0;
  i113 = HEAP32[i2 >> 2] | 0;
  switch (HEAP8[i2 + 8 >> 0] | 0) {
  case 6:
   {
    i106 = i116 + (HEAP32[i2 + 4 >> 2] | 0) | 0;
    i114 = (i113 | 0) != 0;
    if ((HEAP8[i2 + 9 >> 0] | 0) == 8) {
     if (i114) {
      i118 = 0;
      i119 = i106;
     } else break L529;
     while (1) {
      i111 = i119 + -1 | 0;
      HEAP8[i111 >> 0] = ~HEAP8[i111 >> 0];
      i118 = i118 + 1 | 0;
      if ((i118 | 0) == (i113 | 0)) break; else i119 = i119 + -4 | 0;
     }
    } else {
     if (i114) {
      i120 = 0;
      i121 = i106;
     } else break L529;
     while (1) {
      i111 = i121 + -1 | 0;
      HEAP8[i111 >> 0] = ~HEAP8[i111 >> 0];
      i111 = i121 + -2 | 0;
      HEAP8[i111 >> 0] = ~HEAP8[i111 >> 0];
      i120 = i120 + 1 | 0;
      if ((i120 | 0) == (i113 | 0)) break; else i121 = i121 + -8 | 0;
     }
    }
    break;
   }
  case 4:
   {
    i106 = i116 + (HEAP32[i2 + 4 >> 2] | 0) | 0;
    i114 = (i113 | 0) != 0;
    if ((HEAP8[i2 + 9 >> 0] | 0) == 8) {
     if (i114) {
      i122 = 0;
      i123 = i106;
     } else break L529;
     while (1) {
      i111 = i123 + -1 | 0;
      HEAP8[i111 >> 0] = ~HEAP8[i111 >> 0];
      i122 = i122 + 1 | 0;
      if ((i122 | 0) == (i113 | 0)) break; else i123 = i123 + -2 | 0;
     }
    } else {
     if (i114) {
      i124 = i106;
      i125 = 0;
     } else break L529;
     while (1) {
      i116 = i124 + -1 | 0;
      HEAP8[i116 >> 0] = ~HEAP8[i116 >> 0];
      i116 = i124 + -2 | 0;
      HEAP8[i116 >> 0] = ~HEAP8[i116 >> 0];
      i125 = i125 + 1 | 0;
      if ((i125 | 0) == (i113 | 0)) break; else i124 = i124 + -4 | 0;
     }
    }
    break;
   }
  default:
   break L529;
  }
 } while (0);
 i124 = HEAP32[i9 >> 2] | 0;
 if (!(i124 & 8)) i126 = i124; else {
  i125 = (HEAP32[i6 >> 2] | 0) + 1 | 0;
  i123 = HEAP8[i2 + 8 >> 0] | 0;
  i122 = i123 & 255;
  if (i123 << 24 >> 24 == 3) i126 = i124; else {
   i124 = HEAPU8[i2 + 9 >> 0] | 0;
   if (!(i122 & 2)) {
    i127 = 1;
    i128 = i1 + 524 | 0;
    i129 = 0;
   } else {
    HEAP32[i5 >> 2] = i124 - (HEAPU8[i1 + 521 >> 0] | 0);
    HEAP32[i5 + 4 >> 2] = i124 - (HEAPU8[i1 + 522 >> 0] | 0);
    i127 = 3;
    i128 = i1 + 523 | 0;
    i129 = 2;
   }
   HEAP32[i5 + (i129 << 2) >> 2] = i124 - (HEAPU8[i128 >> 0] | 0);
   if (!(i122 & 4)) i130 = i127; else {
    HEAP32[i5 + (i127 << 2) >> 2] = i124 - (HEAPU8[i1 + 525 >> 0] | 0);
    i130 = i127 + 1 | 0;
   }
   i127 = 0;
   i122 = 0;
   while (1) {
    i128 = i5 + (i127 << 2) | 0;
    i129 = HEAP32[i128 >> 2] | 0;
    if ((i129 | 0) > 0 & (i129 | 0) < (i124 | 0)) i131 = 1; else {
     HEAP32[i128 >> 2] = 0;
     i131 = i122;
    }
    i127 = i127 + 1 | 0;
    if ((i127 | 0) >= (i130 | 0)) break; else i122 = i131;
   }
   L565 : do if (i131 | 0) {
    i122 = i124 + -2 | 0;
    switch (i122 >>> 1 | i122 << 31 | 0) {
    case 0:
     {
      i122 = HEAP32[i2 + 4 >> 2] | 0;
      i127 = i125 + i122 | 0;
      if ((i122 | 0) > 0) i132 = i125; else break L565;
      do {
       HEAP8[i132 >> 0] = (HEAPU8[i132 >> 0] | 0) >>> 1 & 85;
       i132 = i132 + 1 | 0;
      } while (i132 >>> 0 < i127 >>> 0);
      break;
     }
    case 1:
     {
      i127 = HEAP32[i2 + 4 >> 2] | 0;
      i122 = i125 + i127 | 0;
      i128 = HEAP32[i5 >> 2] | 0;
      i129 = 15 >>> i128;
      i123 = i129 << 4 | i129;
      if ((i127 | 0) > 0) i133 = i125; else break L565;
      do {
       HEAP8[i133 >> 0] = (HEAPU8[i133 >> 0] | 0) >>> i128 & i123;
       i133 = i133 + 1 | 0;
      } while (i133 >>> 0 < i122 >>> 0);
      break;
     }
    case 3:
     {
      i122 = HEAP32[i2 + 4 >> 2] | 0;
      i123 = i125 + i122 | 0;
      if ((i122 | 0) > 0) {
       i134 = 0;
       i135 = i125;
      } else break L565;
      while (1) {
       i122 = i134 + 1 | 0;
       HEAP8[i135 >> 0] = (HEAPU8[i135 >> 0] | 0) >>> (HEAP32[i5 + (i134 << 2) >> 2] | 0);
       i135 = i135 + 1 | 0;
       if (i135 >>> 0 >= i123 >>> 0) break; else i134 = (i122 | 0) >= (i130 | 0) ? 0 : i122;
      }
      break;
     }
    case 7:
     {
      i123 = HEAP32[i2 + 4 >> 2] | 0;
      i122 = i125 + i123 | 0;
      if ((i123 | 0) > 0) {
       i136 = 0;
       i137 = i125;
      } else break L565;
      while (1) {
       i123 = i137 + 1 | 0;
       i128 = (HEAPU8[i137 >> 0] << 8 | HEAPU8[i123 >> 0]) >>> (HEAP32[i5 + (i136 << 2) >> 2] | 0);
       i127 = i136 + 1 | 0;
       HEAP8[i137 >> 0] = i128 >>> 8;
       i137 = i137 + 2 | 0;
       HEAP8[i123 >> 0] = i128;
       if (i137 >>> 0 >= i122 >>> 0) break; else i136 = (i127 | 0) >= (i130 | 0) ? 0 : i127;
      }
      break;
     }
    default:
     break L565;
    }
   } while (0);
   i126 = HEAP32[i9 >> 2] | 0;
  }
 }
 do if (i126 & 4 | 0) {
  i130 = (HEAP32[i6 >> 2] | 0) + 1 | 0;
  i136 = i2 + 9 | 0;
  i137 = HEAP8[i136 >> 0] | 0;
  if ((i137 & 255) >= 8) break;
  i5 = HEAP32[i2 >> 2] | 0;
  L585 : do switch (i137 << 24 >> 24) {
  case 1:
   {
    if (!i5) break L585;
    i125 = i5 + 7 & 7 ^ 7;
    i134 = i130 + i5 | 0;
    i135 = i130 + ((i5 + -1 | 0) >>> 3) | 0;
    i133 = 0;
    while (1) {
     i134 = i134 + -1 | 0;
     HEAP8[i134 >> 0] = (HEAPU8[i135 >> 0] | 0) >>> i125 & 1;
     i132 = (i125 | 0) == 7;
     i133 = i133 + 1 | 0;
     if ((i133 | 0) == (i5 | 0)) break; else {
      i125 = i132 ? 0 : i125 + 1 | 0;
      i135 = i132 ? i135 + -1 | 0 : i135;
     }
    }
    break;
   }
  case 2:
   {
    if (!i5) break L585;
    i135 = (i5 << 1) + 6 & 6 ^ 6;
    i125 = i130 + i5 | 0;
    i133 = i130 + ((i5 + -1 | 0) >>> 2) | 0;
    i134 = 0;
    while (1) {
     i125 = i125 + -1 | 0;
     HEAP8[i125 >> 0] = (HEAPU8[i133 >> 0] | 0) >>> i135 & 3;
     i98 = (i135 | 0) == 6;
     i134 = i134 + 1 | 0;
     if ((i134 | 0) == (i5 | 0)) break; else {
      i135 = i98 ? 0 : i135 + 2 | 0;
      i133 = i98 ? i133 + -1 | 0 : i133;
     }
    }
    break;
   }
  case 4:
   {
    if (!i5) break L585;
    i133 = i5 << 2 & 4;
    i135 = i130 + i5 | 0;
    i134 = i130 + ((i5 + -1 | 0) >>> 1) | 0;
    i125 = 0;
    while (1) {
     i135 = i135 + -1 | 0;
     HEAP8[i135 >> 0] = (HEAPU8[i134 >> 0] | 0) >>> i133 & 15;
     i98 = (i133 | 0) == 4;
     i125 = i125 + 1 | 0;
     if ((i125 | 0) == (i5 | 0)) break; else {
      i133 = i98 ? 0 : 4;
      i134 = i98 ? i134 + -1 | 0 : i134;
     }
    }
    break;
   }
  default:
   {}
  } while (0);
  HEAP8[i136 >> 0] = 8;
  i130 = HEAPU8[i2 + 10 >> 0] | 0;
  HEAP8[i2 + 11 >> 0] = i130 << 3;
  i137 = Math_imul(i5, i130) | 0;
  HEAP32[i2 + 4 >> 2] = i137;
 } while (0);
 i126 = i2 + 8 | 0;
 do if ((HEAP8[i126 >> 0] | 0) == 3) {
  if ((HEAP32[i1 + 424 >> 2] | 0) <= -1) break;
  _png_do_check_palette_indexes(i1, i2);
 } while (0);
 i137 = HEAP32[i9 >> 2] | 0;
 if (!(i137 & 1)) i138 = i137; else {
  _png_do_bgr(i2, (HEAP32[i6 >> 2] | 0) + 1 | 0);
  i138 = HEAP32[i9 >> 2] | 0;
 }
 if (!(i138 & 65536)) i139 = i138; else {
  _png_do_packswap(i2, (HEAP32[i6 >> 2] | 0) + 1 | 0);
  i139 = HEAP32[i9 >> 2] | 0;
 }
 L610 : do if (i139 & 32768 | 0) {
  i138 = (HEAP32[i6 >> 2] | 0) + 1 | 0;
  i137 = HEAP16[i1 + 444 >> 1] | 0;
  i130 = HEAP32[i8 >> 2] | 0;
  i134 = HEAP32[i2 >> 2] | 0;
  i133 = (i137 & 65535) >>> 8 & 255;
  i125 = i137 & 255;
  switch (HEAP8[i126 >> 0] | 0) {
  case 0:
   {
    switch (HEAP8[i2 + 9 >> 0] | 0) {
    case 8:
     {
      i137 = i138 + i134 | 0;
      i135 = i137 + i134 | 0;
      if (!(i130 & 128)) {
       if (i134 | 0) {
        i98 = i135;
        i132 = i137;
        i124 = 0;
        do {
         i132 = i132 + -1 | 0;
         HEAP8[i98 + -1 >> 0] = HEAP8[i132 >> 0] | 0;
         i98 = i98 + -2 | 0;
         HEAP8[i98 >> 0] = i125;
         i124 = i124 + 1 | 0;
        } while ((i124 | 0) != (i134 | 0));
       }
       HEAP8[i2 + 10 >> 0] = 2;
       HEAP8[i2 + 11 >> 0] = 16;
       HEAP32[i2 + 4 >> 2] = i134 << 1;
       break L610;
      } else {
       HEAP8[i135 + -1 >> 0] = i125;
       if (i134 >>> 0 > 1) {
        i124 = i135;
        i98 = i137;
        i132 = 1;
        do {
         i98 = i98 + -1 | 0;
         i5 = i124;
         i124 = i124 + -2 | 0;
         HEAP8[i124 >> 0] = HEAP8[i98 >> 0] | 0;
         i132 = i132 + 1 | 0;
         HEAP8[i5 + -3 >> 0] = i125;
        } while ((i132 | 0) != (i134 | 0));
       }
       HEAP8[i2 + 10 >> 0] = 2;
       HEAP8[i2 + 11 >> 0] = 16;
       HEAP32[i2 + 4 >> 2] = i134 << 1;
       break L610;
      }
      break;
     }
    case 16:
     {
      i132 = i134 << 1;
      i98 = i138 + i132 | 0;
      i124 = i98 + i132 | 0;
      if (!(i130 & 128)) {
       if (i134 | 0) {
        i132 = i124;
        i137 = i98;
        i135 = 0;
        do {
         HEAP8[i132 + -1 >> 0] = HEAP8[i137 + -1 >> 0] | 0;
         i137 = i137 + -2 | 0;
         HEAP8[i132 + -2 >> 0] = HEAP8[i137 >> 0] | 0;
         HEAP8[i132 + -3 >> 0] = i125;
         i132 = i132 + -4 | 0;
         HEAP8[i132 >> 0] = i133;
         i135 = i135 + 1 | 0;
        } while ((i135 | 0) != (i134 | 0));
       }
       HEAP8[i2 + 10 >> 0] = 2;
       HEAP8[i2 + 11 >> 0] = 32;
       HEAP32[i2 + 4 >> 2] = i134 << 2;
       break L610;
      } else {
       HEAP8[i124 + -1 >> 0] = i125;
       HEAP8[i124 + -2 >> 0] = i133;
       if (i134 >>> 0 > 1) {
        i135 = i124;
        i132 = i98;
        i137 = 1;
        do {
         HEAP8[i135 + -3 >> 0] = HEAP8[i132 + -1 >> 0] | 0;
         i132 = i132 + -2 | 0;
         i5 = i135;
         i135 = i135 + -4 | 0;
         HEAP8[i135 >> 0] = HEAP8[i132 >> 0] | 0;
         i137 = i137 + 1 | 0;
         HEAP8[i5 + -5 >> 0] = i125;
         HEAP8[i5 + -6 >> 0] = i133;
        } while ((i137 | 0) != (i134 | 0));
       }
       HEAP8[i2 + 10 >> 0] = 2;
       HEAP8[i2 + 11 >> 0] = 32;
       HEAP32[i2 + 4 >> 2] = i134 << 2;
       break L610;
      }
      break;
     }
    default:
     break L610;
    }
    break;
   }
  case 2:
   {
    switch (HEAP8[i2 + 9 >> 0] | 0) {
    case 8:
     {
      i137 = i138 + (i134 * 3 | 0) | 0;
      i132 = i137 + i134 | 0;
      if (!(i130 & 128)) {
       if (i134 | 0) {
        i135 = i132;
        i98 = i137;
        i124 = 0;
        do {
         HEAP8[i135 + -1 >> 0] = HEAP8[i98 + -1 >> 0] | 0;
         HEAP8[i135 + -2 >> 0] = HEAP8[i98 + -2 >> 0] | 0;
         i98 = i98 + -3 | 0;
         HEAP8[i135 + -3 >> 0] = HEAP8[i98 >> 0] | 0;
         i135 = i135 + -4 | 0;
         HEAP8[i135 >> 0] = i125;
         i124 = i124 + 1 | 0;
        } while ((i124 | 0) != (i134 | 0));
       }
       HEAP8[i2 + 10 >> 0] = 4;
       HEAP8[i2 + 11 >> 0] = 32;
       HEAP32[i2 + 4 >> 2] = i134 << 2;
       break L610;
      } else {
       HEAP8[i132 + -1 >> 0] = i125;
       if (i134 >>> 0 > 1) {
        i124 = i132;
        i135 = i137;
        i98 = 1;
        do {
         HEAP8[i124 + -2 >> 0] = HEAP8[i135 + -1 >> 0] | 0;
         HEAP8[i124 + -3 >> 0] = HEAP8[i135 + -2 >> 0] | 0;
         i135 = i135 + -3 | 0;
         i5 = i124;
         i124 = i124 + -4 | 0;
         HEAP8[i124 >> 0] = HEAP8[i135 >> 0] | 0;
         i98 = i98 + 1 | 0;
         HEAP8[i5 + -5 >> 0] = i125;
        } while ((i98 | 0) != (i134 | 0));
       }
       HEAP8[i2 + 10 >> 0] = 4;
       HEAP8[i2 + 11 >> 0] = 32;
       HEAP32[i2 + 4 >> 2] = i134 << 2;
       break L610;
      }
      break;
     }
    case 16:
     {
      i98 = i138 + (i134 * 6 | 0) | 0;
      i135 = i98 + (i134 << 1) | 0;
      if (!(i130 & 128)) {
       if (i134 | 0) {
        i124 = i98;
        i137 = i135;
        i132 = 0;
        do {
         HEAP8[i137 + -1 >> 0] = HEAP8[i124 + -1 >> 0] | 0;
         HEAP8[i137 + -2 >> 0] = HEAP8[i124 + -2 >> 0] | 0;
         HEAP8[i137 + -3 >> 0] = HEAP8[i124 + -3 >> 0] | 0;
         HEAP8[i137 + -4 >> 0] = HEAP8[i124 + -4 >> 0] | 0;
         HEAP8[i137 + -5 >> 0] = HEAP8[i124 + -5 >> 0] | 0;
         i124 = i124 + -6 | 0;
         HEAP8[i137 + -6 >> 0] = HEAP8[i124 >> 0] | 0;
         HEAP8[i137 + -7 >> 0] = i125;
         i137 = i137 + -8 | 0;
         HEAP8[i137 >> 0] = i133;
         i132 = i132 + 1 | 0;
        } while ((i132 | 0) != (i134 | 0));
       }
       HEAP8[i2 + 10 >> 0] = 4;
       HEAP8[i2 + 11 >> 0] = 64;
       HEAP32[i2 + 4 >> 2] = i134 << 3;
       break L610;
      } else {
       HEAP8[i135 + -1 >> 0] = i125;
       HEAP8[i135 + -2 >> 0] = i133;
       if (i134 >>> 0 > 1) {
        i132 = i135;
        i137 = i98;
        i124 = 1;
        do {
         HEAP8[i132 + -3 >> 0] = HEAP8[i137 + -1 >> 0] | 0;
         HEAP8[i132 + -4 >> 0] = HEAP8[i137 + -2 >> 0] | 0;
         HEAP8[i132 + -5 >> 0] = HEAP8[i137 + -3 >> 0] | 0;
         HEAP8[i132 + -6 >> 0] = HEAP8[i137 + -4 >> 0] | 0;
         HEAP8[i132 + -7 >> 0] = HEAP8[i137 + -5 >> 0] | 0;
         i137 = i137 + -6 | 0;
         i130 = i132;
         i132 = i132 + -8 | 0;
         HEAP8[i132 >> 0] = HEAP8[i137 >> 0] | 0;
         i124 = i124 + 1 | 0;
         HEAP8[i130 + -9 >> 0] = i125;
         HEAP8[i130 + -10 >> 0] = i133;
        } while ((i124 | 0) != (i134 | 0));
       }
       HEAP8[i2 + 10 >> 0] = 4;
       HEAP8[i2 + 11 >> 0] = 64;
       HEAP32[i2 + 4 >> 2] = i134 << 3;
       break L610;
      }
      break;
     }
    default:
     break L610;
    }
    break;
   }
  default:
   break L610;
  }
 } while (0);
 L666 : do if (HEAP32[i9 >> 2] & 131072 | 0) {
  i8 = (HEAP32[i6 >> 2] | 0) + 1 | 0;
  i139 = HEAP32[i2 >> 2] | 0;
  switch (HEAP8[i126 >> 0] | 0) {
  case 6:
   {
    i124 = i8 + (HEAP32[i2 + 4 >> 2] | 0) | 0;
    i133 = (i139 | 0) != 0;
    if ((HEAP8[i2 + 9 >> 0] | 0) == 8) {
     if (i133) {
      i140 = i124;
      i141 = 0;
     } else break L666;
     do {
      i125 = i140 + -1 | 0;
      i137 = HEAP8[i125 >> 0] | 0;
      i132 = i140 + -2 | 0;
      HEAP8[i125 >> 0] = HEAP8[i132 >> 0] | 0;
      i125 = i140 + -3 | 0;
      HEAP8[i132 >> 0] = HEAP8[i125 >> 0] | 0;
      i140 = i140 + -4 | 0;
      HEAP8[i125 >> 0] = HEAP8[i140 >> 0] | 0;
      HEAP8[i140 >> 0] = i137;
      i141 = i141 + 1 | 0;
     } while ((i141 | 0) != (i139 | 0));
    } else {
     if (i133) {
      i142 = 0;
      i143 = i124;
     } else break L666;
     do {
      i134 = i143 + -1 | 0;
      i137 = HEAP8[i134 >> 0] | 0;
      i125 = i143 + -2 | 0;
      i132 = HEAP8[i125 >> 0] | 0;
      i98 = i143 + -3 | 0;
      HEAP8[i134 >> 0] = HEAP8[i98 >> 0] | 0;
      i134 = i143 + -4 | 0;
      HEAP8[i125 >> 0] = HEAP8[i134 >> 0] | 0;
      i125 = i143 + -5 | 0;
      HEAP8[i98 >> 0] = HEAP8[i125 >> 0] | 0;
      i98 = i143 + -6 | 0;
      HEAP8[i134 >> 0] = HEAP8[i98 >> 0] | 0;
      i134 = i143 + -7 | 0;
      HEAP8[i125 >> 0] = HEAP8[i134 >> 0] | 0;
      i143 = i143 + -8 | 0;
      HEAP8[i98 >> 0] = HEAP8[i143 >> 0] | 0;
      HEAP8[i134 >> 0] = i137;
      HEAP8[i143 >> 0] = i132;
      i142 = i142 + 1 | 0;
     } while ((i142 | 0) != (i139 | 0));
    }
    break;
   }
  case 4:
   {
    i124 = i8 + (HEAP32[i2 + 4 >> 2] | 0) | 0;
    i133 = (i139 | 0) != 0;
    if ((HEAP8[i2 + 9 >> 0] | 0) == 8) {
     if (i133) {
      i144 = 0;
      i145 = i124;
     } else break L666;
     do {
      i132 = i145 + -1 | 0;
      i137 = HEAP8[i132 >> 0] | 0;
      i145 = i145 + -2 | 0;
      HEAP8[i132 >> 0] = HEAP8[i145 >> 0] | 0;
      HEAP8[i145 >> 0] = i137;
      i144 = i144 + 1 | 0;
     } while ((i144 | 0) != (i139 | 0));
    } else {
     if (i133) {
      i146 = 0;
      i147 = i124;
     } else break L666;
     do {
      i8 = i147 + -1 | 0;
      i137 = HEAP8[i8 >> 0] | 0;
      i132 = i147 + -2 | 0;
      i134 = HEAP8[i132 >> 0] | 0;
      i98 = i147 + -3 | 0;
      HEAP8[i8 >> 0] = HEAP8[i98 >> 0] | 0;
      i147 = i147 + -4 | 0;
      HEAP8[i132 >> 0] = HEAP8[i147 >> 0] | 0;
      HEAP8[i98 >> 0] = i137;
      HEAP8[i147 >> 0] = i134;
      i146 = i146 + 1 | 0;
     } while ((i146 | 0) != (i139 | 0));
    }
    break;
   }
  default:
   break L666;
  }
 } while (0);
 i146 = HEAP32[i9 >> 2] | 0;
 if (!(i146 & 16)) i148 = i146; else {
  _png_do_swap(i2, (HEAP32[i6 >> 2] | 0) + 1 | 0);
  i148 = HEAP32[i9 >> 2] | 0;
 }
 if (!(i148 & 1048576)) {
  STACKTOP = i4;
  return;
 }
 i148 = HEAP32[i1 + 192 >> 2] | 0;
 if (i148 | 0) FUNCTION_TABLE_viii[i148 & 15](i1, i2, (HEAP32[i6 >> 2] | 0) + 1 | 0);
 i6 = HEAP8[i1 + 204 >> 0] | 0;
 if (i6 << 24 >> 24) HEAP8[i2 + 9 >> 0] = i6;
 i6 = HEAP8[i1 + 205 >> 0] | 0;
 i1 = i2 + 10 | 0;
 if (!(i6 << 24 >> 24)) i149 = HEAP8[i1 >> 0] | 0; else {
  HEAP8[i1 >> 0] = i6;
  i149 = i6;
 }
 i6 = Math_imul(i149 & 255, HEAPU8[i2 + 9 >> 0] | 0) | 0;
 HEAP8[i2 + 11 >> 0] = i6;
 i149 = i6 & 255;
 i6 = HEAP32[i2 >> 2] | 0;
 if (i149 >>> 0 > 7) i150 = Math_imul(i149 >>> 3, i6) | 0; else i150 = ((Math_imul(i149, i6) | 0) + 7 | 0) >>> 3;
 HEAP32[i2 + 4 >> 2] = i150;
 STACKTOP = i4;
 return;
}

function _inflate(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, i90 = 0, i91 = 0, i92 = 0, i93 = 0, i94 = 0, i95 = 0, i96 = 0, i97 = 0, i98 = 0, i99 = 0, i100 = 0, i101 = 0, i102 = 0, i103 = 0, i104 = 0, i105 = 0, i106 = 0, i107 = 0, i108 = 0, i109 = 0, i110 = 0, i111 = 0, i112 = 0, i113 = 0, i114 = 0, i115 = 0, i116 = 0, i117 = 0, i118 = 0, i119 = 0, i120 = 0, i121 = 0, i122 = 0, i123 = 0, i124 = 0, i125 = 0, i126 = 0, i127 = 0, i128 = 0, i129 = 0, i130 = 0, i131 = 0, i132 = 0, i133 = 0, i134 = 0, i135 = 0, i136 = 0, i137 = 0, i138 = 0, i139 = 0, i140 = 0, i141 = 0, i142 = 0, i143 = 0, i144 = 0, i145 = 0, i146 = 0, i147 = 0, i148 = 0, i149 = 0, i150 = 0, i151 = 0, i152 = 0, i153 = 0, i154 = 0, i155 = 0, i156 = 0, i157 = 0, i158 = 0, i159 = 0, i160 = 0, i161 = 0, i162 = 0, i163 = 0, i164 = 0, i165 = 0, i166 = 0, i167 = 0, i168 = 0, i169 = 0, i170 = 0, i171 = 0, i172 = 0, i173 = 0, i174 = 0, i175 = 0, i176 = 0, i177 = 0, i178 = 0, i179 = 0, i180 = 0, i181 = 0, i182 = 0, i183 = 0, i184 = 0, i185 = 0, i186 = 0, i187 = 0, i188 = 0, i189 = 0, i190 = 0, i191 = 0, i192 = 0, i193 = 0, i194 = 0, i195 = 0, i196 = 0, i197 = 0, i198 = 0, i199 = 0, i200 = 0, i201 = 0, i202 = 0, i203 = 0, i204 = 0, i205 = 0, i206 = 0, i207 = 0, i208 = 0, i209 = 0, i210 = 0, i211 = 0, i212 = 0, i213 = 0, i214 = 0, i215 = 0, i216 = 0, i217 = 0, i218 = 0, i219 = 0, i220 = 0, i221 = 0, i222 = 0, i223 = 0, i224 = 0, i225 = 0, i226 = 0, i227 = 0, i228 = 0, i229 = 0, i230 = 0, i231 = 0, i232 = 0, i233 = 0, i234 = 0, i235 = 0, i236 = 0, i237 = 0, i238 = 0, i239 = 0, i240 = 0, i241 = 0, i242 = 0, i243 = 0, i244 = 0, i245 = 0, i246 = 0, i247 = 0, i248 = 0, i249 = 0, i250 = 0, i251 = 0, i252 = 0, i253 = 0, i254 = 0, i255 = 0, i256 = 0, i257 = 0, i258 = 0, i259 = 0, i260 = 0, i261 = 0, i262 = 0, i263 = 0, i264 = 0, i265 = 0, i266 = 0, i267 = 0, i268 = 0, i269 = 0, i270 = 0, i271 = 0, i272 = 0, i273 = 0, i274 = 0, i275 = 0, i276 = 0, i277 = 0, i278 = 0, i279 = 0, i280 = 0, i281 = 0, i282 = 0, i283 = 0, i284 = 0, i285 = 0, i286 = 0, i287 = 0, i288 = 0, i289 = 0, i290 = 0, i291 = 0, i292 = 0, i293 = 0, i294 = 0, i295 = 0, i296 = 0, i297 = 0, i298 = 0, i299 = 0, i300 = 0, i301 = 0, i302 = 0, i303 = 0, i304 = 0, i305 = 0, i306 = 0, i307 = 0, i308 = 0, i309 = 0, i310 = 0, i311 = 0, i312 = 0, i313 = 0, i314 = 0, i315 = 0, i316 = 0, i317 = 0, i318 = 0, i319 = 0, i320 = 0, i321 = 0, i322 = 0, i323 = 0, i324 = 0, i325 = 0, i326 = 0, i327 = 0, i328 = 0, i329 = 0, i330 = 0, i331 = 0, i332 = 0, i333 = 0, i334 = 0, i335 = 0, i336 = 0, i337 = 0, i338 = 0, i339 = 0, i340 = 0, i341 = 0, i342 = 0, i343 = 0, i344 = 0, i345 = 0, i346 = 0, i347 = 0, i348 = 0, i349 = 0, i350 = 0, i351 = 0, i352 = 0, i353 = 0, i354 = 0, i355 = 0, i356 = 0, i357 = 0, i358 = 0, i359 = 0, i360 = 0, i361 = 0, i362 = 0, i363 = 0, i364 = 0, i365 = 0, i366 = 0, i367 = 0, i368 = 0, i369 = 0, i370 = 0, i371 = 0, i372 = 0, i373 = 0, i374 = 0, i375 = 0, i376 = 0, i377 = 0, i378 = 0, i379 = 0, i380 = 0, i381 = 0, i382 = 0, i383 = 0, i384 = 0, i385 = 0, i386 = 0, i387 = 0, i388 = 0, i389 = 0, i390 = 0, i391 = 0, i392 = 0, i393 = 0, i394 = 0, i395 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4;
 if (!i1) {
  i6 = -2;
  STACKTOP = i4;
  return i6 | 0;
 }
 i7 = i1 + 28 | 0;
 i8 = HEAP32[i7 >> 2] | 0;
 if (!i8) {
  i6 = -2;
  STACKTOP = i4;
  return i6 | 0;
 }
 i9 = i1 + 12 | 0;
 i10 = HEAP32[i9 >> 2] | 0;
 if (!i10) {
  i6 = -2;
  STACKTOP = i4;
  return i6 | 0;
 }
 i11 = HEAP32[i1 >> 2] | 0;
 if (!i11) if (HEAP32[i1 + 4 >> 2] | 0) {
  i6 = -2;
  STACKTOP = i4;
  return i6 | 0;
 }
 i12 = HEAP32[i8 >> 2] | 0;
 if ((i12 | 0) == 11) {
  HEAP32[i8 >> 2] = 12;
  i13 = 12;
 } else i13 = i12;
 i12 = i1 + 16 | 0;
 i14 = HEAP32[i12 >> 2] | 0;
 i15 = i1 + 4 | 0;
 i16 = HEAP32[i15 >> 2] | 0;
 i17 = i8 + 56 | 0;
 i18 = i8 + 60 | 0;
 i19 = i8 + 8 | 0;
 i20 = i8 + 24 | 0;
 i21 = i5 + 1 | 0;
 i22 = i8 + 16 | 0;
 i23 = i8 + 32 | 0;
 i24 = i1 + 24 | 0;
 i25 = i8 + 36 | 0;
 i26 = i8 + 20 | 0;
 i27 = i1 + 48 | 0;
 i28 = i8 + 64 | 0;
 i29 = i8 + 12 | 0;
 i30 = (i2 + -5 | 0) >>> 0 < 2;
 i31 = i8 + 4 | 0;
 i32 = i8 + 76 | 0;
 i33 = i8 + 84 | 0;
 i34 = i8 + 80 | 0;
 i35 = i8 + 88 | 0;
 i36 = (i2 | 0) == 6;
 i37 = i8 + 7108 | 0;
 i38 = i8 + 72 | 0;
 i39 = i8 + 7112 | 0;
 i40 = i8 + 68 | 0;
 i41 = i8 + 44 | 0;
 i42 = i8 + 7104 | 0;
 i43 = i8 + 48 | 0;
 i44 = i8 + 40 | 0;
 i45 = i8 + 52 | 0;
 i46 = i1 + 20 | 0;
 i47 = i8 + 28 | 0;
 i48 = i5 + 2 | 0;
 i49 = i5 + 3 | 0;
 i50 = i8 + 104 | 0;
 i51 = i8 + 96 | 0;
 i52 = i8 + 100 | 0;
 i53 = i8 + 624 | 0;
 i54 = i8 + 1328 | 0;
 i55 = i8 + 108 | 0;
 i56 = i8 + 112 | 0;
 i57 = i8 + 752 | 0;
 i58 = i8 + 92 | 0;
 i59 = 0;
 i60 = i11;
 i11 = i14;
 i61 = HEAP32[i18 >> 2] | 0;
 i62 = HEAP32[i17 >> 2] | 0;
 i63 = i14;
 i14 = i16;
 i64 = i10;
 i10 = i13;
 L17 : while (1) {
  L19 : do switch (i10 | 0) {
  case 28:
   {
    i65 = i61;
    i66 = i62;
    i67 = i14;
    i68 = i60;
    i69 = 1;
    i70 = i63;
    i3 = 281;
    break L17;
    break;
   }
  case 29:
   {
    i71 = i11;
    i72 = i61;
    i73 = i62;
    i74 = i14;
    i75 = i60;
    i76 = -3;
    i77 = i63;
    break L17;
    break;
   }
  case 30:
   {
    i3 = 303;
    break L17;
    break;
   }
  case 0:
   {
    i13 = HEAP32[i19 >> 2] | 0;
    if (!i13) {
     HEAP32[i8 >> 2] = 12;
     i78 = i59;
     i79 = i64;
     i80 = i60;
     i81 = i11;
     i82 = i61;
     i83 = i62;
     i84 = i63;
     i85 = i14;
     break L19;
    }
    if (i61 >>> 0 < 16) {
     i86 = i60;
     i87 = i61;
     i88 = i62;
     i89 = i14;
     while (1) {
      if (!i89) {
       i71 = i11;
       i72 = i87;
       i73 = i88;
       i74 = 0;
       i75 = i86;
       i76 = i59;
       i77 = i63;
       break L17;
      }
      i90 = i89 + -1 | 0;
      i91 = i86 + 1 | 0;
      i92 = (HEAPU8[i86 >> 0] << i87) + i88 | 0;
      i93 = i87 + 8 | 0;
      if (i93 >>> 0 < 16) {
       i86 = i91;
       i87 = i93;
       i88 = i92;
       i89 = i90;
      } else {
       i94 = i91;
       i95 = i93;
       i96 = i92;
       i97 = i90;
       break;
      }
     }
    } else {
     i94 = i60;
     i95 = i61;
     i96 = i62;
     i97 = i14;
    }
    if ((i96 | 0) == 35615 & (i13 & 2 | 0) != 0) {
     i89 = _crc32(0, 0, 0) | 0;
     HEAP32[i20 >> 2] = i89;
     HEAP8[i5 >> 0] = 31;
     HEAP8[i21 >> 0] = -117;
     i88 = _crc32(i89, i5, 2) | 0;
     HEAP32[i20 >> 2] = i88;
     HEAP32[i8 >> 2] = 1;
     i78 = i59;
     i79 = i64;
     i80 = i94;
     i81 = i11;
     i82 = 0;
     i83 = 0;
     i84 = i63;
     i85 = i97;
     break L19;
    }
    HEAP32[i22 >> 2] = 0;
    i88 = HEAP32[i23 >> 2] | 0;
    if (i88 | 0) HEAP32[i88 + 48 >> 2] = -1;
    if (i13 & 1 | 0) if (!((((i96 << 8 & 65280) + (i96 >>> 8) | 0) >>> 0) % 31 | 0)) {
     if ((i96 & 15 | 0) != 8) {
      HEAP32[i24 >> 2] = 66575;
      HEAP32[i8 >> 2] = 29;
      i78 = i59;
      i79 = i64;
      i80 = i94;
      i81 = i11;
      i82 = i95;
      i83 = i96;
      i84 = i63;
      i85 = i97;
      break L19;
     }
     i88 = i96 >>> 4;
     i89 = i95 + -4 | 0;
     i87 = i88 & 15;
     i86 = i87 + 8 | 0;
     i90 = HEAP32[i25 >> 2] | 0;
     if (!i90) HEAP32[i25 >> 2] = i86; else if (i86 >>> 0 > i90 >>> 0) {
      HEAP32[i24 >> 2] = 66602;
      HEAP32[i8 >> 2] = 29;
      i78 = i59;
      i79 = i64;
      i80 = i94;
      i81 = i11;
      i82 = i89;
      i83 = i88;
      i84 = i63;
      i85 = i97;
      break L19;
     }
     HEAP32[i26 >> 2] = 256 << i87;
     i87 = _adler32(0, 0, 0) | 0;
     HEAP32[i20 >> 2] = i87;
     HEAP32[i27 >> 2] = i87;
     HEAP32[i8 >> 2] = i96 >>> 12 & 2 ^ 11;
     i78 = i59;
     i79 = i64;
     i80 = i94;
     i81 = i11;
     i82 = 0;
     i83 = 0;
     i84 = i63;
     i85 = i97;
     break L19;
    }
    HEAP32[i24 >> 2] = 66552;
    HEAP32[i8 >> 2] = 29;
    i78 = i59;
    i79 = i64;
    i80 = i94;
    i81 = i11;
    i82 = i95;
    i83 = i96;
    i84 = i63;
    i85 = i97;
    break;
   }
  case 1:
   {
    if (i61 >>> 0 < 16) {
     i87 = i60;
     i88 = i61;
     i89 = i62;
     i90 = i14;
     while (1) {
      if (!i90) {
       i71 = i11;
       i72 = i88;
       i73 = i89;
       i74 = 0;
       i75 = i87;
       i76 = i59;
       i77 = i63;
       break L17;
      }
      i86 = i90 + -1 | 0;
      i92 = i87 + 1 | 0;
      i93 = (HEAPU8[i87 >> 0] << i88) + i89 | 0;
      i91 = i88 + 8 | 0;
      if (i91 >>> 0 < 16) {
       i87 = i92;
       i88 = i91;
       i89 = i93;
       i90 = i86;
      } else {
       i98 = i92;
       i99 = i91;
       i100 = i86;
       i101 = i93;
       break;
      }
     }
    } else {
     i98 = i60;
     i99 = i61;
     i100 = i14;
     i101 = i62;
    }
    HEAP32[i22 >> 2] = i101;
    if ((i101 & 255 | 0) != 8) {
     HEAP32[i24 >> 2] = 66575;
     HEAP32[i8 >> 2] = 29;
     i78 = i59;
     i79 = i64;
     i80 = i98;
     i81 = i11;
     i82 = i99;
     i83 = i101;
     i84 = i63;
     i85 = i100;
     break L19;
    }
    if (i101 & 57344 | 0) {
     HEAP32[i24 >> 2] = 66622;
     HEAP32[i8 >> 2] = 29;
     i78 = i59;
     i79 = i64;
     i80 = i98;
     i81 = i11;
     i82 = i99;
     i83 = i101;
     i84 = i63;
     i85 = i100;
     break L19;
    }
    i90 = HEAP32[i23 >> 2] | 0;
    if (i90 | 0) HEAP32[i90 >> 2] = i101 >>> 8 & 1;
    if (i101 & 512 | 0) {
     HEAP8[i5 >> 0] = i101;
     HEAP8[i21 >> 0] = i101 >>> 8;
     i90 = _crc32(HEAP32[i20 >> 2] | 0, i5, 2) | 0;
     HEAP32[i20 >> 2] = i90;
    }
    HEAP32[i8 >> 2] = 2;
    i102 = i98;
    i103 = 0;
    i104 = 0;
    i105 = i100;
    i3 = 47;
    break;
   }
  case 2:
   {
    if (i61 >>> 0 < 32) {
     i102 = i60;
     i103 = i61;
     i104 = i62;
     i105 = i14;
     i3 = 47;
    } else {
     i106 = i60;
     i107 = i62;
     i108 = i14;
     i3 = 49;
    }
    break;
   }
  case 3:
   {
    if (i61 >>> 0 < 16) {
     i109 = i60;
     i110 = i61;
     i111 = i62;
     i112 = i14;
     i3 = 55;
    } else {
     i113 = i60;
     i114 = i62;
     i115 = i14;
     i3 = 57;
    }
    break;
   }
  case 4:
   {
    i116 = i60;
    i117 = i61;
    i118 = i62;
    i119 = i14;
    i3 = 62;
    break;
   }
  case 5:
   {
    i120 = i14;
    i121 = i60;
    i122 = i61;
    i123 = i62;
    i3 = 73;
    break;
   }
  case 6:
   {
    i124 = i14;
    i125 = i60;
    i126 = i61;
    i127 = i62;
    i3 = 83;
    break;
   }
  case 7:
   {
    i128 = i61;
    i129 = i62;
    i130 = i14;
    i131 = i60;
    i3 = 96;
    break;
   }
  case 8:
   {
    i132 = i61;
    i133 = i62;
    i134 = i14;
    i135 = i60;
    i3 = 109;
    break;
   }
  case 9:
   {
    if (i61 >>> 0 < 32) {
     i90 = i61;
     i89 = i62;
     i88 = i14;
     i87 = i60;
     while (1) {
      if (!i88) {
       i71 = i11;
       i72 = i90;
       i73 = i89;
       i74 = 0;
       i75 = i87;
       i76 = i59;
       i77 = i63;
       break L17;
      }
      i13 = i88 + -1 | 0;
      i93 = i87 + 1 | 0;
      i86 = (HEAPU8[i87 >> 0] << i90) + i89 | 0;
      i90 = i90 + 8 | 0;
      if (i90 >>> 0 >= 32) {
       i136 = i86;
       i137 = i13;
       i138 = i93;
       break;
      } else {
       i89 = i86;
       i88 = i13;
       i87 = i93;
      }
     }
    } else {
     i136 = i62;
     i137 = i14;
     i138 = i60;
    }
    i87 = _llvm_bswap_i32(i136 | 0) | 0;
    HEAP32[i20 >> 2] = i87;
    HEAP32[i27 >> 2] = i87;
    HEAP32[i8 >> 2] = 10;
    i139 = 0;
    i140 = 0;
    i141 = i137;
    i142 = i138;
    i3 = 121;
    break;
   }
  case 10:
   {
    i139 = i61;
    i140 = i62;
    i141 = i14;
    i142 = i60;
    i3 = 121;
    break;
   }
  case 11:
   {
    i143 = i61;
    i144 = i62;
    i145 = i14;
    i146 = i60;
    i3 = 124;
    break;
   }
  case 12:
   {
    i147 = i61;
    i148 = i62;
    i149 = i14;
    i150 = i60;
    i3 = 125;
    break;
   }
  case 13:
   {
    i87 = i61 & 7;
    i88 = i62 >>> i87;
    i89 = i61 - i87 | 0;
    if (i89 >>> 0 < 32) {
     i87 = i89;
     i90 = i88;
     i93 = i14;
     i13 = i60;
     while (1) {
      if (!i93) {
       i71 = i11;
       i72 = i87;
       i73 = i90;
       i74 = 0;
       i75 = i13;
       i76 = i59;
       i77 = i63;
       break L17;
      }
      i86 = i93 + -1 | 0;
      i91 = i13 + 1 | 0;
      i92 = (HEAPU8[i13 >> 0] << i87) + i90 | 0;
      i151 = i87 + 8 | 0;
      if (i151 >>> 0 < 32) {
       i87 = i151;
       i90 = i92;
       i93 = i86;
       i13 = i91;
      } else {
       i152 = i151;
       i153 = i92;
       i154 = i86;
       i155 = i91;
       break;
      }
     }
    } else {
     i152 = i89;
     i153 = i88;
     i154 = i14;
     i155 = i60;
    }
    i13 = i153 & 65535;
    if ((i13 | 0) == (i153 >>> 16 ^ 65535 | 0)) {
     HEAP32[i28 >> 2] = i13;
     HEAP32[i8 >> 2] = 14;
     if (i36) {
      i65 = 0;
      i66 = 0;
      i67 = i154;
      i68 = i155;
      i69 = i59;
      i70 = i63;
      i3 = 281;
      break L17;
     } else {
      i156 = 0;
      i157 = 0;
      i158 = i154;
      i159 = i155;
      i3 = 144;
      break L19;
     }
    } else {
     HEAP32[i24 >> 2] = 66686;
     HEAP32[i8 >> 2] = 29;
     i78 = i59;
     i79 = i64;
     i80 = i155;
     i81 = i11;
     i82 = i152;
     i83 = i153;
     i84 = i63;
     i85 = i154;
     break L19;
    }
    break;
   }
  case 14:
   {
    i156 = i61;
    i157 = i62;
    i158 = i14;
    i159 = i60;
    i3 = 144;
    break;
   }
  case 15:
   {
    i160 = i61;
    i161 = i62;
    i162 = i14;
    i163 = i60;
    i3 = 145;
    break;
   }
  case 16:
   {
    if (i61 >>> 0 < 14) {
     i13 = i61;
     i93 = i62;
     i90 = i14;
     i87 = i60;
     while (1) {
      if (!i90) {
       i71 = i11;
       i72 = i13;
       i73 = i93;
       i74 = 0;
       i75 = i87;
       i76 = i59;
       i77 = i63;
       break L17;
      }
      i91 = i90 + -1 | 0;
      i86 = i87 + 1 | 0;
      i92 = (HEAPU8[i87 >> 0] << i13) + i93 | 0;
      i151 = i13 + 8 | 0;
      if (i151 >>> 0 < 14) {
       i13 = i151;
       i93 = i92;
       i90 = i91;
       i87 = i86;
      } else {
       i164 = i151;
       i165 = i92;
       i166 = i91;
       i167 = i86;
       break;
      }
     }
    } else {
     i164 = i61;
     i165 = i62;
     i166 = i14;
     i167 = i60;
    }
    i87 = (i165 & 31) + 257 | 0;
    HEAP32[i51 >> 2] = i87;
    i90 = i165 >>> 5 & 31;
    HEAP32[i52 >> 2] = i90 + 1;
    i93 = (i165 >>> 10 & 15) + 4 | 0;
    HEAP32[i58 >> 2] = i93;
    i13 = i165 >>> 14;
    i88 = i164 + -14 | 0;
    if (i87 >>> 0 > 286 | i90 >>> 0 > 29) {
     HEAP32[i24 >> 2] = 66715;
     HEAP32[i8 >> 2] = 29;
     i78 = i59;
     i79 = i64;
     i80 = i167;
     i81 = i11;
     i82 = i88;
     i83 = i13;
     i84 = i63;
     i85 = i166;
     break L19;
    } else {
     HEAP32[i50 >> 2] = 0;
     HEAP32[i8 >> 2] = 17;
     i168 = i88;
     i169 = i13;
     i170 = i166;
     i171 = i167;
     i172 = i93;
     i173 = 0;
     i3 = 155;
     break L19;
    }
    break;
   }
  case 17:
   {
    i93 = HEAP32[i50 >> 2] | 0;
    i13 = HEAP32[i58 >> 2] | 0;
    if (i93 >>> 0 < i13 >>> 0) {
     i168 = i61;
     i169 = i62;
     i170 = i14;
     i171 = i60;
     i172 = i13;
     i173 = i93;
     i3 = 155;
    } else {
     i174 = i61;
     i175 = i62;
     i176 = i14;
     i177 = i60;
     i178 = i93;
     i3 = 156;
    }
    break;
   }
  case 18:
   {
    i179 = i59;
    i180 = i61;
    i181 = i62;
    i182 = i14;
    i183 = i60;
    i184 = HEAP32[i50 >> 2] | 0;
    i3 = 166;
    break;
   }
  case 19:
   {
    i185 = i59;
    i186 = i61;
    i187 = i62;
    i188 = i14;
    i189 = i60;
    i3 = 199;
    break;
   }
  case 20:
   {
    i190 = i59;
    i191 = i61;
    i192 = i62;
    i193 = i14;
    i194 = i60;
    i3 = 200;
    break;
   }
  case 21:
   {
    i195 = i61;
    i196 = i62;
    i197 = i59;
    i198 = i14;
    i199 = i60;
    i200 = HEAP32[i38 >> 2] | 0;
    i3 = 218;
    break;
   }
  case 22:
   {
    i201 = i61;
    i202 = i62;
    i203 = i14;
    i204 = i60;
    i205 = i59;
    i3 = 225;
    break;
   }
  case 23:
   {
    i206 = i61;
    i207 = i62;
    i208 = i14;
    i209 = i60;
    i210 = i59;
    i211 = HEAP32[i38 >> 2] | 0;
    i3 = 237;
    break;
   }
  case 24:
   {
    i212 = i61;
    i213 = i62;
    i214 = i14;
    i215 = i60;
    i216 = i59;
    i3 = 243;
    break;
   }
  case 25:
   {
    if (!i63) {
     i65 = i61;
     i66 = i62;
     i67 = i14;
     i68 = i60;
     i69 = i59;
     i70 = 0;
     i3 = 281;
     break L17;
    }
    HEAP8[i64 >> 0] = HEAP32[i28 >> 2];
    HEAP32[i8 >> 2] = 20;
    i78 = i59;
    i79 = i64 + 1 | 0;
    i80 = i60;
    i81 = i11;
    i82 = i61;
    i83 = i62;
    i84 = i63 + -1 | 0;
    i85 = i14;
    break;
   }
  case 26:
   {
    if (!(HEAP32[i19 >> 2] | 0)) {
     i217 = i11;
     i218 = i61;
     i219 = i62;
     i220 = i14;
     i221 = i60;
    } else {
     if (i61 >>> 0 < 32) {
      i93 = i61;
      i13 = i62;
      i88 = i14;
      i90 = i60;
      while (1) {
       if (!i88) {
        i71 = i11;
        i72 = i93;
        i73 = i13;
        i74 = 0;
        i75 = i90;
        i76 = i59;
        i77 = i63;
        break L17;
       }
       i87 = i88 + -1 | 0;
       i89 = i90 + 1 | 0;
       i86 = (HEAPU8[i90 >> 0] << i93) + i13 | 0;
       i91 = i93 + 8 | 0;
       if (i91 >>> 0 < 32) {
        i93 = i91;
        i13 = i86;
        i88 = i87;
        i90 = i89;
       } else {
        i222 = i91;
        i223 = i86;
        i224 = i87;
        i225 = i89;
        break;
       }
      }
     } else {
      i222 = i61;
      i223 = i62;
      i224 = i14;
      i225 = i60;
     }
     i90 = i11 - i63 | 0;
     HEAP32[i46 >> 2] = (HEAP32[i46 >> 2] | 0) + i90;
     HEAP32[i47 >> 2] = (HEAP32[i47 >> 2] | 0) + i90;
     if (!i90) i226 = HEAP32[i20 >> 2] | 0; else {
      i88 = HEAP32[i20 >> 2] | 0;
      i13 = i64 + (0 - i90) | 0;
      if (!(HEAP32[i22 >> 2] | 0)) i227 = _adler32(i88, i13, i90) | 0; else i227 = _crc32(i88, i13, i90) | 0;
      HEAP32[i20 >> 2] = i227;
      HEAP32[i27 >> 2] = i227;
      i226 = i227;
     }
     i90 = (HEAP32[i22 >> 2] | 0) == 0;
     i13 = _llvm_bswap_i32(i223 | 0) | 0;
     if (((i90 ? i13 : i223) | 0) == (i226 | 0)) {
      i217 = i63;
      i218 = 0;
      i219 = 0;
      i220 = i224;
      i221 = i225;
     } else {
      HEAP32[i24 >> 2] = 66889;
      HEAP32[i8 >> 2] = 29;
      i78 = i59;
      i79 = i64;
      i80 = i225;
      i81 = i63;
      i82 = i222;
      i83 = i223;
      i84 = i63;
      i85 = i224;
      break L19;
     }
    }
    HEAP32[i8 >> 2] = 27;
    i228 = i217;
    i229 = i218;
    i230 = i219;
    i231 = i220;
    i232 = i221;
    i3 = 273;
    break;
   }
  case 27:
   {
    i228 = i11;
    i229 = i61;
    i230 = i62;
    i231 = i14;
    i232 = i60;
    i3 = 273;
    break;
   }
  default:
   {
    i6 = -2;
    i3 = 304;
    break L17;
   }
  } while (0);
  if ((i3 | 0) == 47) while (1) {
   i3 = 0;
   if (!i105) {
    i71 = i11;
    i72 = i103;
    i73 = i104;
    i74 = 0;
    i75 = i102;
    i76 = i59;
    i77 = i63;
    break L17;
   }
   i13 = i105 + -1 | 0;
   i90 = i102 + 1 | 0;
   i88 = (HEAPU8[i102 >> 0] << i103) + i104 | 0;
   i103 = i103 + 8 | 0;
   if (i103 >>> 0 >= 32) {
    i106 = i90;
    i107 = i88;
    i108 = i13;
    i3 = 49;
    break;
   } else {
    i102 = i90;
    i104 = i88;
    i105 = i13;
    i3 = 47;
   }
  } else if ((i3 | 0) == 121) {
   i3 = 0;
   if (!(HEAP32[i29 >> 2] | 0)) {
    i3 = 122;
    break;
   }
   i13 = _adler32(0, 0, 0) | 0;
   HEAP32[i20 >> 2] = i13;
   HEAP32[i27 >> 2] = i13;
   HEAP32[i8 >> 2] = 11;
   i143 = i139;
   i144 = i140;
   i145 = i141;
   i146 = i142;
   i3 = 124;
  } else if ((i3 | 0) == 144) {
   i3 = 0;
   HEAP32[i8 >> 2] = 15;
   i160 = i156;
   i161 = i157;
   i162 = i158;
   i163 = i159;
   i3 = 145;
  } else if ((i3 | 0) == 155) {
   i3 = 0;
   i13 = i168;
   i88 = i169;
   i90 = i170;
   i93 = i171;
   i89 = i173;
   while (1) {
    if (i13 >>> 0 < 3) {
     if (!i90) {
      i71 = i11;
      i72 = i13;
      i73 = i88;
      i74 = 0;
      i75 = i93;
      i76 = i59;
      i77 = i63;
      break L17;
     }
     i233 = i13 + 8 | 0;
     i234 = (HEAPU8[i93 >> 0] << i13) + i88 | 0;
     i235 = i90 + -1 | 0;
     i236 = i93 + 1 | 0;
    } else {
     i233 = i13;
     i234 = i88;
     i235 = i90;
     i236 = i93;
    }
    i87 = i89 + 1 | 0;
    HEAP32[i50 >> 2] = i87;
    HEAP16[i8 + 112 + (HEAPU16[25050 + (i89 << 1) >> 1] << 1) >> 1] = i234 & 7;
    i86 = i234 >>> 3;
    i91 = i233 + -3 | 0;
    if (i87 >>> 0 < i172 >>> 0) {
     i13 = i91;
     i88 = i86;
     i90 = i235;
     i93 = i236;
     i89 = i87;
    } else {
     i174 = i91;
     i175 = i86;
     i176 = i235;
     i177 = i236;
     i178 = i87;
     i3 = 156;
     break;
    }
   }
  } else if ((i3 | 0) == 273) {
   i3 = 0;
   if (!(HEAP32[i19 >> 2] | 0)) {
    i237 = i229;
    i238 = i230;
    i239 = i231;
    i240 = i232;
    i3 = 280;
    break;
   }
   if (!(HEAP32[i22 >> 2] | 0)) {
    i237 = i229;
    i238 = i230;
    i239 = i231;
    i240 = i232;
    i3 = 280;
    break;
   }
   if (i229 >>> 0 < 32) {
    i89 = i229;
    i93 = i230;
    i90 = i232;
    i88 = i231;
    while (1) {
     if (!i88) {
      i71 = i228;
      i72 = i89;
      i73 = i93;
      i74 = 0;
      i75 = i90;
      i76 = i59;
      i77 = i63;
      break L17;
     }
     i13 = i88 + -1 | 0;
     i87 = i90 + 1 | 0;
     i86 = (HEAPU8[i90 >> 0] << i89) + i93 | 0;
     i91 = i89 + 8 | 0;
     if (i91 >>> 0 < 32) {
      i89 = i91;
      i93 = i86;
      i90 = i87;
      i88 = i13;
     } else {
      i241 = i91;
      i242 = i86;
      i243 = i13;
      i244 = i87;
      break;
     }
    }
   } else {
    i241 = i229;
    i242 = i230;
    i243 = i231;
    i244 = i232;
   }
   if ((i242 | 0) == (HEAP32[i47 >> 2] | 0)) {
    i237 = 0;
    i238 = 0;
    i239 = i243;
    i240 = i244;
    i3 = 280;
    break;
   }
   HEAP32[i24 >> 2] = 66910;
   HEAP32[i8 >> 2] = 29;
   i78 = i59;
   i79 = i64;
   i80 = i244;
   i81 = i228;
   i82 = i241;
   i83 = i242;
   i84 = i63;
   i85 = i243;
  }
  do if ((i3 | 0) == 49) {
   i3 = 0;
   i88 = HEAP32[i23 >> 2] | 0;
   if (i88 | 0) HEAP32[i88 + 4 >> 2] = i107;
   if (HEAP32[i22 >> 2] & 512 | 0) {
    HEAP8[i5 >> 0] = i107;
    HEAP8[i21 >> 0] = i107 >>> 8;
    HEAP8[i48 >> 0] = i107 >>> 16;
    HEAP8[i49 >> 0] = i107 >>> 24;
    i88 = _crc32(HEAP32[i20 >> 2] | 0, i5, 4) | 0;
    HEAP32[i20 >> 2] = i88;
   }
   HEAP32[i8 >> 2] = 3;
   i109 = i106;
   i110 = 0;
   i111 = 0;
   i112 = i108;
   i3 = 55;
  } else if ((i3 | 0) == 124) {
   i3 = 0;
   if (i30) {
    i65 = i143;
    i66 = i144;
    i67 = i145;
    i68 = i146;
    i69 = i59;
    i70 = i63;
    i3 = 281;
    break L17;
   } else {
    i147 = i143;
    i148 = i144;
    i149 = i145;
    i150 = i146;
    i3 = 125;
   }
  } else if ((i3 | 0) == 145) {
   i3 = 0;
   i88 = HEAP32[i28 >> 2] | 0;
   if (!i88) {
    HEAP32[i8 >> 2] = 11;
    i78 = i59;
    i79 = i64;
    i80 = i163;
    i81 = i11;
    i82 = i160;
    i83 = i161;
    i84 = i63;
    i85 = i162;
    break;
   }
   i90 = i88 >>> 0 > i162 >>> 0 ? i162 : i88;
   i88 = i90 >>> 0 > i63 >>> 0 ? i63 : i90;
   if (!i88) {
    i65 = i160;
    i66 = i161;
    i67 = i162;
    i68 = i163;
    i69 = i59;
    i70 = i63;
    i3 = 281;
    break L17;
   }
   _memcpy(i64 | 0, i163 | 0, i88 | 0) | 0;
   HEAP32[i28 >> 2] = (HEAP32[i28 >> 2] | 0) - i88;
   i78 = i59;
   i79 = i64 + i88 | 0;
   i80 = i163 + i88 | 0;
   i81 = i11;
   i82 = i160;
   i83 = i161;
   i84 = i63 - i88 | 0;
   i85 = i162 - i88 | 0;
  } else if ((i3 | 0) == 156) {
   i3 = 0;
   if (i178 >>> 0 < 19) {
    i88 = i178;
    do {
     HEAP16[i8 + 112 + (HEAPU16[25050 + (i88 << 1) >> 1] << 1) >> 1] = 0;
     i88 = i88 + 1 | 0;
    } while ((i88 | 0) != 19);
    HEAP32[i50 >> 2] = 19;
   }
   HEAP32[i55 >> 2] = i54;
   HEAP32[i32 >> 2] = i54;
   HEAP32[i33 >> 2] = 7;
   i88 = _inflate_table(0, i56, 19, i55, i33, i57) | 0;
   if (!i88) {
    HEAP32[i50 >> 2] = 0;
    HEAP32[i8 >> 2] = 18;
    i179 = 0;
    i180 = i174;
    i181 = i175;
    i182 = i176;
    i183 = i177;
    i184 = 0;
    i3 = 166;
    break;
   } else {
    HEAP32[i24 >> 2] = 66751;
    HEAP32[i8 >> 2] = 29;
    i78 = i88;
    i79 = i64;
    i80 = i177;
    i81 = i11;
    i82 = i174;
    i83 = i175;
    i84 = i63;
    i85 = i176;
    break;
   }
  } while (0);
  L161 : do if ((i3 | 0) == 55) while (1) {
   i3 = 0;
   if (!i112) {
    i71 = i11;
    i72 = i110;
    i73 = i111;
    i74 = 0;
    i75 = i109;
    i76 = i59;
    i77 = i63;
    break L17;
   }
   i88 = i112 + -1 | 0;
   i90 = i109 + 1 | 0;
   i93 = (HEAPU8[i109 >> 0] << i110) + i111 | 0;
   i110 = i110 + 8 | 0;
   if (i110 >>> 0 >= 16) {
    i113 = i90;
    i114 = i93;
    i115 = i88;
    i3 = 57;
    break;
   } else {
    i109 = i90;
    i111 = i93;
    i112 = i88;
    i3 = 55;
   }
  } else if ((i3 | 0) == 125) {
   i3 = 0;
   if (HEAP32[i31 >> 2] | 0) {
    i88 = i147 & 7;
    HEAP32[i8 >> 2] = 26;
    i78 = i59;
    i79 = i64;
    i80 = i150;
    i81 = i11;
    i82 = i147 - i88 | 0;
    i83 = i148 >>> i88;
    i84 = i63;
    i85 = i149;
    break;
   }
   if (i147 >>> 0 < 3) {
    if (!i149) {
     i65 = i147;
     i66 = i148;
     i67 = 0;
     i68 = i150;
     i69 = i59;
     i70 = i63;
     i3 = 281;
     break L17;
    }
    i245 = i147 + 8 | 0;
    i246 = (HEAPU8[i150 >> 0] << i147) + i148 | 0;
    i247 = i149 + -1 | 0;
    i248 = i150 + 1 | 0;
   } else {
    i245 = i147;
    i246 = i148;
    i247 = i149;
    i248 = i150;
   }
   HEAP32[i31 >> 2] = i246 & 1;
   switch (i246 >>> 1 & 3) {
   case 0:
    {
     i249 = 13;
     i3 = 136;
     break;
    }
   case 1:
    {
     HEAP32[i32 >> 2] = 22874;
     HEAP32[i33 >> 2] = 9;
     HEAP32[i34 >> 2] = 24922;
     HEAP32[i35 >> 2] = 5;
     HEAP32[i8 >> 2] = 19;
     if (i36) {
      i3 = 132;
      break L17;
     }
     break;
    }
   case 2:
    {
     i249 = 16;
     i3 = 136;
     break;
    }
   case 3:
    {
     HEAP32[i24 >> 2] = 66667;
     i249 = 29;
     i3 = 136;
     break;
    }
   default:
    {
     i3 = 135;
     break L17;
    }
   }
   if ((i3 | 0) == 136) {
    i3 = 0;
    HEAP32[i8 >> 2] = i249;
   }
   i78 = i59;
   i79 = i64;
   i80 = i248;
   i81 = i11;
   i82 = i245 + -3 | 0;
   i83 = i246 >>> 3;
   i84 = i63;
   i85 = i247;
  } else if ((i3 | 0) == 166) {
   i3 = 0;
   i88 = HEAP32[i51 >> 2] | 0;
   i93 = HEAP32[i52 >> 2] | 0;
   do if (i184 >>> 0 < (i93 + i88 | 0) >>> 0) {
    i90 = i180;
    i89 = i181;
    i87 = i182;
    i13 = i183;
    i86 = i184;
    i91 = i88;
    i92 = i93;
    L182 : while (1) {
     i151 = HEAP32[i32 >> 2] | 0;
     i250 = (1 << HEAP32[i33 >> 2]) + -1 | 0;
     i251 = i250 & i89;
     i252 = HEAPU8[i151 + (i251 << 2) + 1 >> 0] | 0;
     if (i90 >>> 0 < i252 >>> 0) {
      i253 = i90;
      i254 = i89;
      i255 = i87;
      i256 = i13;
      while (1) {
       if (!i255) {
        i71 = i11;
        i72 = i253;
        i73 = i254;
        i74 = 0;
        i75 = i256;
        i76 = i179;
        i77 = i63;
        break L17;
       }
       i257 = i255 + -1 | 0;
       i258 = i256 + 1 | 0;
       i259 = (HEAPU8[i256 >> 0] << i253) + i254 | 0;
       i260 = i253 + 8 | 0;
       i261 = i250 & i259;
       i262 = HEAPU8[i151 + (i261 << 2) + 1 >> 0] | 0;
       if (i260 >>> 0 < i262 >>> 0) {
        i253 = i260;
        i254 = i259;
        i255 = i257;
        i256 = i258;
       } else {
        i263 = i260;
        i264 = i259;
        i265 = i257;
        i266 = i258;
        i267 = i262;
        i268 = i261;
        break;
       }
      }
     } else {
      i263 = i90;
      i264 = i89;
      i265 = i87;
      i266 = i13;
      i267 = i252;
      i268 = i251;
     }
     i256 = HEAP16[i151 + (i268 << 2) + 2 >> 1] | 0;
     if ((i256 & 65535) < 16) {
      HEAP32[i50 >> 2] = i86 + 1;
      HEAP16[i8 + 112 + (i86 << 1) >> 1] = i256;
      i269 = i263 - i267 | 0;
      i270 = i264 >>> i267;
      i271 = i265;
      i272 = i266;
     } else {
      switch (i256 << 16 >> 16) {
      case 16:
       {
        i256 = i267 + 2 | 0;
        if (i263 >>> 0 < i256 >>> 0) {
         i255 = i263;
         i254 = i264;
         i253 = i265;
         i250 = i266;
         while (1) {
          if (!i253) {
           i71 = i11;
           i72 = i255;
           i73 = i254;
           i74 = 0;
           i75 = i250;
           i76 = i179;
           i77 = i63;
           break L17;
          }
          i261 = i253 + -1 | 0;
          i262 = i250 + 1 | 0;
          i258 = (HEAPU8[i250 >> 0] << i255) + i254 | 0;
          i257 = i255 + 8 | 0;
          if (i257 >>> 0 < i256 >>> 0) {
           i255 = i257;
           i254 = i258;
           i253 = i261;
           i250 = i262;
          } else {
           i273 = i257;
           i274 = i258;
           i275 = i261;
           i276 = i262;
           break;
          }
         }
        } else {
         i273 = i263;
         i274 = i264;
         i275 = i265;
         i276 = i266;
        }
        i250 = i274 >>> i267;
        i253 = i273 - i267 | 0;
        if (!i86) {
         i277 = i253;
         i278 = i250;
         i279 = i275;
         i280 = i276;
         i3 = 190;
         break L182;
        }
        i281 = HEAPU16[i8 + 112 + (i86 + -1 << 1) >> 1] | 0;
        i282 = i253 + -2 | 0;
        i283 = i250 >>> 2;
        i284 = i275;
        i285 = i276;
        i286 = (i250 & 3) + 3 | 0;
        break;
       }
      case 17:
       {
        i250 = i267 + 3 | 0;
        if (i263 >>> 0 < i250 >>> 0) {
         i253 = i263;
         i254 = i264;
         i255 = i265;
         i256 = i266;
         while (1) {
          if (!i255) {
           i71 = i11;
           i72 = i253;
           i73 = i254;
           i74 = 0;
           i75 = i256;
           i76 = i179;
           i77 = i63;
           break L17;
          }
          i151 = i255 + -1 | 0;
          i251 = i256 + 1 | 0;
          i252 = (HEAPU8[i256 >> 0] << i253) + i254 | 0;
          i262 = i253 + 8 | 0;
          if (i262 >>> 0 < i250 >>> 0) {
           i253 = i262;
           i254 = i252;
           i255 = i151;
           i256 = i251;
          } else {
           i287 = i262;
           i288 = i252;
           i289 = i151;
           i290 = i251;
           break;
          }
         }
        } else {
         i287 = i263;
         i288 = i264;
         i289 = i265;
         i290 = i266;
        }
        i256 = i288 >>> i267;
        i281 = 0;
        i282 = -3 - i267 + i287 | 0;
        i283 = i256 >>> 3;
        i284 = i289;
        i285 = i290;
        i286 = (i256 & 7) + 3 | 0;
        break;
       }
      default:
       {
        i256 = i267 + 7 | 0;
        if (i263 >>> 0 < i256 >>> 0) {
         i255 = i263;
         i254 = i264;
         i253 = i265;
         i250 = i266;
         while (1) {
          if (!i253) {
           i71 = i11;
           i72 = i255;
           i73 = i254;
           i74 = 0;
           i75 = i250;
           i76 = i179;
           i77 = i63;
           break L17;
          }
          i251 = i253 + -1 | 0;
          i151 = i250 + 1 | 0;
          i252 = (HEAPU8[i250 >> 0] << i255) + i254 | 0;
          i262 = i255 + 8 | 0;
          if (i262 >>> 0 < i256 >>> 0) {
           i255 = i262;
           i254 = i252;
           i253 = i251;
           i250 = i151;
          } else {
           i291 = i262;
           i292 = i252;
           i293 = i251;
           i294 = i151;
           break;
          }
         }
        } else {
         i291 = i263;
         i292 = i264;
         i293 = i265;
         i294 = i266;
        }
        i250 = i292 >>> i267;
        i281 = 0;
        i282 = -7 - i267 + i291 | 0;
        i283 = i250 >>> 7;
        i284 = i293;
        i285 = i294;
        i286 = (i250 & 127) + 11 | 0;
       }
      }
      if ((i86 + i286 | 0) >>> 0 > (i92 + i91 | 0) >>> 0) {
       i277 = i282;
       i278 = i283;
       i279 = i284;
       i280 = i285;
       i3 = 190;
       break;
      }
      i250 = i281 & 65535;
      i253 = i286 + -1 | 0;
      HEAP32[i50 >> 2] = i86 + 1;
      HEAP16[i8 + 112 + (i86 << 1) >> 1] = i250;
      if (!i253) {
       i269 = i282;
       i270 = i283;
       i271 = i284;
       i272 = i285;
      } else {
       i254 = i253;
       do {
        i253 = HEAP32[i50 >> 2] | 0;
        i254 = i254 + -1 | 0;
        HEAP32[i50 >> 2] = i253 + 1;
        HEAP16[i8 + 112 + (i253 << 1) >> 1] = i250;
       } while ((i254 | 0) != 0);
       i269 = i282;
       i270 = i283;
       i271 = i284;
       i272 = i285;
      }
     }
     i86 = HEAP32[i50 >> 2] | 0;
     i91 = HEAP32[i51 >> 2] | 0;
     i92 = HEAP32[i52 >> 2] | 0;
     if (i86 >>> 0 >= (i92 + i91 | 0) >>> 0) {
      i3 = 191;
      break;
     } else {
      i90 = i269;
      i89 = i270;
      i87 = i271;
      i13 = i272;
     }
    }
    if ((i3 | 0) == 190) {
     i3 = 0;
     HEAP32[i24 >> 2] = 66776;
     HEAP32[i8 >> 2] = 29;
     i78 = i179;
     i79 = i64;
     i80 = i280;
     i81 = i11;
     i82 = i277;
     i83 = i278;
     i84 = i63;
     i85 = i279;
     break L161;
    } else if ((i3 | 0) == 191) {
     i3 = 0;
     if ((HEAP32[i8 >> 2] | 0) == 29) {
      i78 = i179;
      i79 = i64;
      i80 = i272;
      i81 = i11;
      i82 = i269;
      i83 = i270;
      i84 = i63;
      i85 = i271;
      break L161;
     } else {
      i295 = i269;
      i296 = i270;
      i297 = i271;
      i298 = i272;
      i299 = i91;
      break;
     }
    }
   } else {
    i295 = i180;
    i296 = i181;
    i297 = i182;
    i298 = i183;
    i299 = i88;
   } while (0);
   if (!(HEAP16[i53 >> 1] | 0)) {
    HEAP32[i24 >> 2] = 66802;
    HEAP32[i8 >> 2] = 29;
    i78 = i179;
    i79 = i64;
    i80 = i298;
    i81 = i11;
    i82 = i295;
    i83 = i296;
    i84 = i63;
    i85 = i297;
    break;
   }
   HEAP32[i55 >> 2] = i54;
   HEAP32[i32 >> 2] = i54;
   HEAP32[i33 >> 2] = 9;
   i88 = _inflate_table(1, i56, i299, i55, i33, i57) | 0;
   if (i88 | 0) {
    HEAP32[i24 >> 2] = 66839;
    HEAP32[i8 >> 2] = 29;
    i78 = i88;
    i79 = i64;
    i80 = i298;
    i81 = i11;
    i82 = i295;
    i83 = i296;
    i84 = i63;
    i85 = i297;
    break;
   }
   HEAP32[i34 >> 2] = HEAP32[i55 >> 2];
   HEAP32[i35 >> 2] = 6;
   i88 = _inflate_table(2, i8 + 112 + (HEAP32[i51 >> 2] << 1) | 0, HEAP32[i52 >> 2] | 0, i55, i35, i57) | 0;
   if (!i88) {
    HEAP32[i8 >> 2] = 19;
    if (i36) {
     i65 = i295;
     i66 = i296;
     i67 = i297;
     i68 = i298;
     i69 = 0;
     i70 = i63;
     i3 = 281;
     break L17;
    } else {
     i185 = 0;
     i186 = i295;
     i187 = i296;
     i188 = i297;
     i189 = i298;
     i3 = 199;
     break;
    }
   } else {
    HEAP32[i24 >> 2] = 66867;
    HEAP32[i8 >> 2] = 29;
    i78 = i88;
    i79 = i64;
    i80 = i298;
    i81 = i11;
    i82 = i295;
    i83 = i296;
    i84 = i63;
    i85 = i297;
    break;
   }
  } while (0);
  if ((i3 | 0) == 57) {
   i3 = 0;
   i88 = HEAP32[i23 >> 2] | 0;
   if (i88 | 0) {
    HEAP32[i88 + 8 >> 2] = i114 & 255;
    HEAP32[i88 + 12 >> 2] = i114 >>> 8;
   }
   if (HEAP32[i22 >> 2] & 512 | 0) {
    HEAP8[i5 >> 0] = i114;
    HEAP8[i21 >> 0] = i114 >>> 8;
    i88 = _crc32(HEAP32[i20 >> 2] | 0, i5, 2) | 0;
    HEAP32[i20 >> 2] = i88;
   }
   HEAP32[i8 >> 2] = 4;
   i116 = i113;
   i117 = 0;
   i118 = 0;
   i119 = i115;
   i3 = 62;
  } else if ((i3 | 0) == 199) {
   i3 = 0;
   HEAP32[i8 >> 2] = 20;
   i190 = i185;
   i191 = i186;
   i192 = i187;
   i193 = i188;
   i194 = i189;
   i3 = 200;
  }
  do if ((i3 | 0) == 62) {
   i3 = 0;
   i88 = HEAP32[i22 >> 2] | 0;
   if (!(i88 & 1024)) {
    i93 = HEAP32[i23 >> 2] | 0;
    if (!i93) {
     i300 = i119;
     i301 = i116;
     i302 = i117;
     i303 = i118;
    } else {
     HEAP32[i93 + 16 >> 2] = 0;
     i300 = i119;
     i301 = i116;
     i302 = i117;
     i303 = i118;
    }
   } else {
    if (i117 >>> 0 < 16) {
     i93 = i116;
     i13 = i117;
     i87 = i118;
     i89 = i119;
     while (1) {
      if (!i89) {
       i71 = i11;
       i72 = i13;
       i73 = i87;
       i74 = 0;
       i75 = i93;
       i76 = i59;
       i77 = i63;
       break L17;
      }
      i90 = i89 + -1 | 0;
      i92 = i93 + 1 | 0;
      i86 = (HEAPU8[i93 >> 0] << i13) + i87 | 0;
      i13 = i13 + 8 | 0;
      if (i13 >>> 0 >= 16) {
       i304 = i92;
       i305 = i86;
       i306 = i90;
       break;
      } else {
       i93 = i92;
       i87 = i86;
       i89 = i90;
      }
     }
    } else {
     i304 = i116;
     i305 = i118;
     i306 = i119;
    }
    HEAP32[i28 >> 2] = i305;
    i89 = HEAP32[i23 >> 2] | 0;
    if (i89 | 0) HEAP32[i89 + 20 >> 2] = i305;
    if (!(i88 & 512)) {
     i300 = i306;
     i301 = i304;
     i302 = 0;
     i303 = 0;
    } else {
     HEAP8[i5 >> 0] = i305;
     HEAP8[i21 >> 0] = i305 >>> 8;
     i89 = _crc32(HEAP32[i20 >> 2] | 0, i5, 2) | 0;
     HEAP32[i20 >> 2] = i89;
     i300 = i306;
     i301 = i304;
     i302 = 0;
     i303 = 0;
    }
   }
   HEAP32[i8 >> 2] = 5;
   i120 = i300;
   i121 = i301;
   i122 = i302;
   i123 = i303;
   i3 = 73;
  } else if ((i3 | 0) == 200) {
   i3 = 0;
   if (i63 >>> 0 > 257 & i193 >>> 0 > 5) {
    HEAP32[i9 >> 2] = i64;
    HEAP32[i12 >> 2] = i63;
    HEAP32[i1 >> 2] = i194;
    HEAP32[i15 >> 2] = i193;
    HEAP32[i17 >> 2] = i192;
    HEAP32[i18 >> 2] = i191;
    _inflate_fast(i1, i11);
    i89 = HEAP32[i9 >> 2] | 0;
    i87 = HEAP32[i12 >> 2] | 0;
    i93 = HEAP32[i1 >> 2] | 0;
    i13 = HEAP32[i15 >> 2] | 0;
    i90 = HEAP32[i17 >> 2] | 0;
    i86 = HEAP32[i18 >> 2] | 0;
    if ((HEAP32[i8 >> 2] | 0) != 11) {
     i78 = i190;
     i79 = i89;
     i80 = i93;
     i81 = i11;
     i82 = i86;
     i83 = i90;
     i84 = i87;
     i85 = i13;
     break;
    }
    HEAP32[i37 >> 2] = -1;
    i78 = i190;
    i79 = i89;
    i80 = i93;
    i81 = i11;
    i82 = i86;
    i83 = i90;
    i84 = i87;
    i85 = i13;
    break;
   }
   HEAP32[i37 >> 2] = 0;
   i13 = HEAP32[i32 >> 2] | 0;
   i87 = (1 << HEAP32[i33 >> 2]) + -1 | 0;
   i90 = i87 & i192;
   i86 = HEAP8[i13 + (i90 << 2) + 1 >> 0] | 0;
   i93 = i86 & 255;
   if (i191 >>> 0 < i93 >>> 0) {
    i89 = i191;
    i92 = i192;
    i254 = i193;
    i250 = i194;
    while (1) {
     if (!i254) {
      i71 = i11;
      i72 = i89;
      i73 = i92;
      i74 = 0;
      i75 = i250;
      i76 = i190;
      i77 = i63;
      break L17;
     }
     i253 = i254 + -1 | 0;
     i255 = i250 + 1 | 0;
     i256 = (HEAPU8[i250 >> 0] << i89) + i92 | 0;
     i151 = i89 + 8 | 0;
     i251 = i87 & i256;
     i252 = HEAP8[i13 + (i251 << 2) + 1 >> 0] | 0;
     i262 = i252 & 255;
     if (i151 >>> 0 < i262 >>> 0) {
      i89 = i151;
      i92 = i256;
      i254 = i253;
      i250 = i255;
     } else {
      i307 = i151;
      i308 = i256;
      i309 = i253;
      i310 = i255;
      i311 = i262;
      i312 = i251;
      i313 = i252;
      break;
     }
    }
   } else {
    i307 = i191;
    i308 = i192;
    i309 = i193;
    i310 = i194;
    i311 = i93;
    i312 = i90;
    i313 = i86;
   }
   i250 = i13 + (i312 << 2) | 0;
   i254 = HEAP16[i250 + 2 >> 1] | 0;
   i92 = HEAP8[i250 >> 0] | 0;
   i250 = i92 & 255;
   if (i92 << 24 >> 24 != 0 & (i250 & 240 | 0) == 0) {
    i89 = i254 & 65535;
    i87 = (1 << i311 + i250) + -1 | 0;
    i250 = ((i308 & i87) >>> i311) + i89 | 0;
    i88 = HEAP8[i13 + (i250 << 2) + 1 >> 0] | 0;
    if ((i311 + (i88 & 255) | 0) >>> 0 > i307 >>> 0) {
     i252 = i307;
     i251 = i308;
     i262 = i309;
     i255 = i310;
     while (1) {
      if (!i262) {
       i71 = i11;
       i72 = i252;
       i73 = i251;
       i74 = 0;
       i75 = i255;
       i76 = i190;
       i77 = i63;
       break L17;
      }
      i253 = i262 + -1 | 0;
      i256 = i255 + 1 | 0;
      i151 = (HEAPU8[i255 >> 0] << i252) + i251 | 0;
      i261 = i252 + 8 | 0;
      i258 = ((i151 & i87) >>> i311) + i89 | 0;
      i257 = HEAP8[i13 + (i258 << 2) + 1 >> 0] | 0;
      if ((i311 + (i257 & 255) | 0) >>> 0 > i261 >>> 0) {
       i252 = i261;
       i251 = i151;
       i262 = i253;
       i255 = i256;
      } else {
       i314 = i261;
       i315 = i151;
       i316 = i253;
       i317 = i256;
       i318 = i258;
       i319 = i257;
       break;
      }
     }
    } else {
     i314 = i307;
     i315 = i308;
     i316 = i309;
     i317 = i310;
     i318 = i250;
     i319 = i88;
    }
    i255 = i13 + (i318 << 2) | 0;
    i262 = HEAP16[i255 + 2 >> 1] | 0;
    i251 = HEAP8[i255 >> 0] | 0;
    HEAP32[i37 >> 2] = i311;
    i320 = i314 - i311 | 0;
    i321 = i315 >>> i311;
    i322 = i316;
    i323 = i317;
    i324 = i251;
    i325 = i319;
    i326 = i262;
    i327 = i311;
   } else {
    i320 = i307;
    i321 = i308;
    i322 = i309;
    i323 = i310;
    i324 = i92;
    i325 = i313;
    i326 = i254;
    i327 = 0;
   }
   i262 = i325 & 255;
   i251 = i321 >>> i262;
   i255 = i320 - i262 | 0;
   HEAP32[i37 >> 2] = i327 + i262;
   HEAP32[i28 >> 2] = i326 & 65535;
   i262 = i324 & 255;
   if (!(i324 << 24 >> 24)) {
    HEAP32[i8 >> 2] = 25;
    i78 = i190;
    i79 = i64;
    i80 = i323;
    i81 = i11;
    i82 = i255;
    i83 = i251;
    i84 = i63;
    i85 = i322;
    break;
   }
   if (i262 & 32 | 0) {
    HEAP32[i37 >> 2] = -1;
    HEAP32[i8 >> 2] = 11;
    i78 = i190;
    i79 = i64;
    i80 = i323;
    i81 = i11;
    i82 = i255;
    i83 = i251;
    i84 = i63;
    i85 = i322;
    break;
   }
   if (!(i262 & 64)) {
    i252 = i262 & 15;
    HEAP32[i38 >> 2] = i252;
    HEAP32[i8 >> 2] = 21;
    i195 = i255;
    i196 = i251;
    i197 = i190;
    i198 = i322;
    i199 = i323;
    i200 = i252;
    i3 = 218;
    break;
   } else {
    HEAP32[i24 >> 2] = 66933;
    HEAP32[i8 >> 2] = 29;
    i78 = i190;
    i79 = i64;
    i80 = i323;
    i81 = i11;
    i82 = i255;
    i83 = i251;
    i84 = i63;
    i85 = i322;
    break;
   }
  } while (0);
  if ((i3 | 0) == 73) {
   i3 = 0;
   i251 = HEAP32[i22 >> 2] | 0;
   if (!(i251 & 1024)) {
    i328 = i120;
    i329 = i121;
   } else {
    i255 = HEAP32[i28 >> 2] | 0;
    i252 = i255 >>> 0 > i120 >>> 0 ? i120 : i255;
    if (!i252) {
     i330 = i120;
     i331 = i121;
     i332 = i255;
    } else {
     i262 = HEAP32[i23 >> 2] | 0;
     if (!i262) i333 = i251; else {
      i89 = HEAP32[i262 + 16 >> 2] | 0;
      if (!i89) i333 = i251; else {
       i251 = (HEAP32[i262 + 20 >> 2] | 0) - i255 | 0;
       i255 = HEAP32[i262 + 24 >> 2] | 0;
       _memcpy(i89 + i251 | 0, i121 | 0, ((i251 + i252 | 0) >>> 0 > i255 >>> 0 ? i255 - i251 | 0 : i252) | 0) | 0;
       i333 = HEAP32[i22 >> 2] | 0;
      }
     }
     if (i333 & 512 | 0) {
      i251 = _crc32(HEAP32[i20 >> 2] | 0, i121, i252) | 0;
      HEAP32[i20 >> 2] = i251;
     }
     i251 = (HEAP32[i28 >> 2] | 0) - i252 | 0;
     HEAP32[i28 >> 2] = i251;
     i330 = i120 - i252 | 0;
     i331 = i121 + i252 | 0;
     i332 = i251;
    }
    if (!i332) {
     i328 = i330;
     i329 = i331;
    } else {
     i65 = i122;
     i66 = i123;
     i67 = i330;
     i68 = i331;
     i69 = i59;
     i70 = i63;
     i3 = 281;
     break;
    }
   }
   HEAP32[i28 >> 2] = 0;
   HEAP32[i8 >> 2] = 6;
   i124 = i328;
   i125 = i329;
   i126 = i122;
   i127 = i123;
   i3 = 83;
  } else if ((i3 | 0) == 218) {
   i3 = 0;
   if (!i200) {
    i334 = i195;
    i335 = i196;
    i336 = i198;
    i337 = i199;
    i338 = HEAP32[i28 >> 2] | 0;
   } else {
    if (i195 >>> 0 < i200 >>> 0) {
     i251 = i195;
     i252 = i196;
     i255 = i198;
     i89 = i199;
     while (1) {
      if (!i255) {
       i71 = i11;
       i72 = i251;
       i73 = i252;
       i74 = 0;
       i75 = i89;
       i76 = i197;
       i77 = i63;
       break L17;
      }
      i262 = i255 + -1 | 0;
      i87 = i89 + 1 | 0;
      i86 = (HEAPU8[i89 >> 0] << i251) + i252 | 0;
      i90 = i251 + 8 | 0;
      if (i90 >>> 0 < i200 >>> 0) {
       i251 = i90;
       i252 = i86;
       i255 = i262;
       i89 = i87;
      } else {
       i339 = i90;
       i340 = i86;
       i341 = i262;
       i342 = i87;
       break;
      }
     }
    } else {
     i339 = i195;
     i340 = i196;
     i341 = i198;
     i342 = i199;
    }
    i89 = (HEAP32[i28 >> 2] | 0) + ((1 << i200) + -1 & i340) | 0;
    HEAP32[i28 >> 2] = i89;
    HEAP32[i37 >> 2] = (HEAP32[i37 >> 2] | 0) + i200;
    i334 = i339 - i200 | 0;
    i335 = i340 >>> i200;
    i336 = i341;
    i337 = i342;
    i338 = i89;
   }
   HEAP32[i39 >> 2] = i338;
   HEAP32[i8 >> 2] = 22;
   i201 = i334;
   i202 = i335;
   i203 = i336;
   i204 = i337;
   i205 = i197;
   i3 = 225;
  }
  do if ((i3 | 0) == 83) {
   i3 = 0;
   if (!(HEAP32[i22 >> 2] & 2048)) {
    i89 = HEAP32[i23 >> 2] | 0;
    if (!i89) {
     i343 = i124;
     i344 = i125;
    } else {
     HEAP32[i89 + 28 >> 2] = 0;
     i343 = i124;
     i344 = i125;
    }
   } else {
    if (!i124) {
     i65 = i126;
     i66 = i127;
     i67 = 0;
     i68 = i125;
     i69 = i59;
     i70 = i63;
     i3 = 281;
     break L17;
    } else i345 = 0;
    do {
     i89 = i345;
     i345 = i345 + 1 | 0;
     i255 = HEAP8[i125 + i89 >> 0] | 0;
     i89 = HEAP32[i23 >> 2] | 0;
     if (i89 | 0) {
      i252 = HEAP32[i89 + 28 >> 2] | 0;
      if (i252 | 0) {
       i251 = HEAP32[i28 >> 2] | 0;
       if (i251 >>> 0 < (HEAP32[i89 + 32 >> 2] | 0) >>> 0) {
        HEAP32[i28 >> 2] = i251 + 1;
        HEAP8[i252 + i251 >> 0] = i255;
       }
      }
     }
     i346 = i255 << 24 >> 24 != 0;
    } while (i346 & i124 >>> 0 > i345 >>> 0);
    if (HEAP32[i22 >> 2] & 512 | 0) {
     i254 = _crc32(HEAP32[i20 >> 2] | 0, i125, i345) | 0;
     HEAP32[i20 >> 2] = i254;
    }
    i254 = i124 - i345 | 0;
    i92 = i125 + i345 | 0;
    if (i346) {
     i65 = i126;
     i66 = i127;
     i67 = i254;
     i68 = i92;
     i69 = i59;
     i70 = i63;
     i3 = 281;
     break L17;
    } else {
     i343 = i254;
     i344 = i92;
    }
   }
   HEAP32[i28 >> 2] = 0;
   HEAP32[i8 >> 2] = 7;
   i128 = i126;
   i129 = i127;
   i130 = i343;
   i131 = i344;
   i3 = 96;
  } else if ((i3 | 0) == 225) {
   i3 = 0;
   i92 = HEAP32[i34 >> 2] | 0;
   i254 = (1 << HEAP32[i35 >> 2]) + -1 | 0;
   i13 = i254 & i202;
   i88 = HEAP8[i92 + (i13 << 2) + 1 >> 0] | 0;
   i250 = i88 & 255;
   if (i201 >>> 0 < i250 >>> 0) {
    i255 = i201;
    i251 = i202;
    i252 = i203;
    i89 = i204;
    while (1) {
     if (!i252) {
      i71 = i11;
      i72 = i255;
      i73 = i251;
      i74 = 0;
      i75 = i89;
      i76 = i205;
      i77 = i63;
      break L17;
     }
     i87 = i252 + -1 | 0;
     i262 = i89 + 1 | 0;
     i86 = (HEAPU8[i89 >> 0] << i255) + i251 | 0;
     i90 = i255 + 8 | 0;
     i93 = i254 & i86;
     i257 = HEAP8[i92 + (i93 << 2) + 1 >> 0] | 0;
     i258 = i257 & 255;
     if (i90 >>> 0 < i258 >>> 0) {
      i255 = i90;
      i251 = i86;
      i252 = i87;
      i89 = i262;
     } else {
      i347 = i90;
      i348 = i86;
      i349 = i87;
      i350 = i262;
      i351 = i258;
      i352 = i93;
      i353 = i257;
      break;
     }
    }
   } else {
    i347 = i201;
    i348 = i202;
    i349 = i203;
    i350 = i204;
    i351 = i250;
    i352 = i13;
    i353 = i88;
   }
   i89 = i92 + (i352 << 2) | 0;
   i252 = HEAP16[i89 + 2 >> 1] | 0;
   i251 = HEAP8[i89 >> 0] | 0;
   i89 = i251 & 255;
   if (!(i89 & 240)) {
    i255 = i252 & 65535;
    i254 = (1 << i351 + i89) + -1 | 0;
    i89 = ((i348 & i254) >>> i351) + i255 | 0;
    i257 = HEAP8[i92 + (i89 << 2) + 1 >> 0] | 0;
    if ((i351 + (i257 & 255) | 0) >>> 0 > i347 >>> 0) {
     i93 = i347;
     i258 = i348;
     i262 = i349;
     i87 = i350;
     while (1) {
      if (!i262) {
       i71 = i11;
       i72 = i93;
       i73 = i258;
       i74 = 0;
       i75 = i87;
       i76 = i205;
       i77 = i63;
       break L17;
      }
      i86 = i262 + -1 | 0;
      i90 = i87 + 1 | 0;
      i256 = (HEAPU8[i87 >> 0] << i93) + i258 | 0;
      i253 = i93 + 8 | 0;
      i151 = ((i256 & i254) >>> i351) + i255 | 0;
      i261 = HEAP8[i92 + (i151 << 2) + 1 >> 0] | 0;
      if ((i351 + (i261 & 255) | 0) >>> 0 > i253 >>> 0) {
       i93 = i253;
       i258 = i256;
       i262 = i86;
       i87 = i90;
      } else {
       i354 = i253;
       i355 = i256;
       i356 = i86;
       i357 = i90;
       i358 = i151;
       i359 = i261;
       break;
      }
     }
    } else {
     i354 = i347;
     i355 = i348;
     i356 = i349;
     i357 = i350;
     i358 = i89;
     i359 = i257;
    }
    i87 = i92 + (i358 << 2) | 0;
    i262 = HEAP16[i87 + 2 >> 1] | 0;
    i258 = HEAP8[i87 >> 0] | 0;
    i87 = (HEAP32[i37 >> 2] | 0) + i351 | 0;
    HEAP32[i37 >> 2] = i87;
    i360 = i354 - i351 | 0;
    i361 = i355 >>> i351;
    i362 = i356;
    i363 = i357;
    i364 = i258;
    i365 = i359;
    i366 = i262;
    i367 = i87;
   } else {
    i360 = i347;
    i361 = i348;
    i362 = i349;
    i363 = i350;
    i364 = i251;
    i365 = i353;
    i366 = i252;
    i367 = HEAP32[i37 >> 2] | 0;
   }
   i87 = i365 & 255;
   i262 = i361 >>> i87;
   i258 = i360 - i87 | 0;
   HEAP32[i37 >> 2] = i367 + i87;
   i87 = i364 & 255;
   if (!(i87 & 64)) {
    HEAP32[i40 >> 2] = i366 & 65535;
    i93 = i87 & 15;
    HEAP32[i38 >> 2] = i93;
    HEAP32[i8 >> 2] = 23;
    i206 = i258;
    i207 = i262;
    i208 = i362;
    i209 = i363;
    i210 = i205;
    i211 = i93;
    i3 = 237;
    break;
   } else {
    HEAP32[i24 >> 2] = 66961;
    HEAP32[i8 >> 2] = 29;
    i78 = i205;
    i79 = i64;
    i80 = i363;
    i81 = i11;
    i82 = i258;
    i83 = i262;
    i84 = i63;
    i85 = i362;
    break;
   }
  } while (0);
  if ((i3 | 0) == 96) {
   i3 = 0;
   if (!(HEAP32[i22 >> 2] & 4096)) {
    i262 = HEAP32[i23 >> 2] | 0;
    if (!i262) {
     i368 = i130;
     i369 = i131;
    } else {
     HEAP32[i262 + 36 >> 2] = 0;
     i368 = i130;
     i369 = i131;
    }
   } else {
    if (!i130) {
     i65 = i128;
     i66 = i129;
     i67 = 0;
     i68 = i131;
     i69 = i59;
     i70 = i63;
     i3 = 281;
     break;
    } else i370 = 0;
    do {
     i262 = i370;
     i370 = i370 + 1 | 0;
     i258 = HEAP8[i131 + i262 >> 0] | 0;
     i262 = HEAP32[i23 >> 2] | 0;
     if (i262 | 0) {
      i93 = HEAP32[i262 + 36 >> 2] | 0;
      if (i93 | 0) {
       i87 = HEAP32[i28 >> 2] | 0;
       if (i87 >>> 0 < (HEAP32[i262 + 40 >> 2] | 0) >>> 0) {
        HEAP32[i28 >> 2] = i87 + 1;
        HEAP8[i93 + i87 >> 0] = i258;
       }
      }
     }
     i371 = i258 << 24 >> 24 != 0;
    } while (i371 & i130 >>> 0 > i370 >>> 0);
    if (HEAP32[i22 >> 2] & 512 | 0) {
     i258 = _crc32(HEAP32[i20 >> 2] | 0, i131, i370) | 0;
     HEAP32[i20 >> 2] = i258;
    }
    i258 = i130 - i370 | 0;
    i87 = i131 + i370 | 0;
    if (i371) {
     i65 = i128;
     i66 = i129;
     i67 = i258;
     i68 = i87;
     i69 = i59;
     i70 = i63;
     i3 = 281;
     break;
    } else {
     i368 = i258;
     i369 = i87;
    }
   }
   HEAP32[i8 >> 2] = 8;
   i132 = i128;
   i133 = i129;
   i134 = i368;
   i135 = i369;
   i3 = 109;
  } else if ((i3 | 0) == 237) {
   i3 = 0;
   if (!i211) {
    i372 = i206;
    i373 = i207;
    i374 = i208;
    i375 = i209;
   } else {
    if (i206 >>> 0 < i211 >>> 0) {
     i87 = i206;
     i258 = i207;
     i93 = i208;
     i262 = i209;
     while (1) {
      if (!i93) {
       i71 = i11;
       i72 = i87;
       i73 = i258;
       i74 = 0;
       i75 = i262;
       i76 = i210;
       i77 = i63;
       break L17;
      }
      i255 = i93 + -1 | 0;
      i254 = i262 + 1 | 0;
      i88 = (HEAPU8[i262 >> 0] << i87) + i258 | 0;
      i13 = i87 + 8 | 0;
      if (i13 >>> 0 < i211 >>> 0) {
       i87 = i13;
       i258 = i88;
       i93 = i255;
       i262 = i254;
      } else {
       i376 = i13;
       i377 = i88;
       i378 = i255;
       i379 = i254;
       break;
      }
     }
    } else {
     i376 = i206;
     i377 = i207;
     i378 = i208;
     i379 = i209;
    }
    HEAP32[i40 >> 2] = (HEAP32[i40 >> 2] | 0) + ((1 << i211) + -1 & i377);
    HEAP32[i37 >> 2] = (HEAP32[i37 >> 2] | 0) + i211;
    i372 = i376 - i211 | 0;
    i373 = i377 >>> i211;
    i374 = i378;
    i375 = i379;
   }
   HEAP32[i8 >> 2] = 24;
   i212 = i372;
   i213 = i373;
   i214 = i374;
   i215 = i375;
   i216 = i210;
   i3 = 243;
  }
  do if ((i3 | 0) == 109) {
   i3 = 0;
   i262 = HEAP32[i22 >> 2] | 0;
   if (!(i262 & 512)) {
    i380 = i132;
    i381 = i133;
    i382 = i134;
    i383 = i135;
   } else {
    if (i132 >>> 0 < 16) {
     i93 = i132;
     i258 = i133;
     i87 = i134;
     i254 = i135;
     while (1) {
      if (!i87) {
       i71 = i11;
       i72 = i93;
       i73 = i258;
       i74 = 0;
       i75 = i254;
       i76 = i59;
       i77 = i63;
       break L17;
      }
      i255 = i87 + -1 | 0;
      i88 = i254 + 1 | 0;
      i13 = (HEAPU8[i254 >> 0] << i93) + i258 | 0;
      i250 = i93 + 8 | 0;
      if (i250 >>> 0 < 16) {
       i93 = i250;
       i258 = i13;
       i87 = i255;
       i254 = i88;
      } else {
       i384 = i250;
       i385 = i13;
       i386 = i255;
       i387 = i88;
       break;
      }
     }
    } else {
     i384 = i132;
     i385 = i133;
     i386 = i134;
     i387 = i135;
    }
    if ((i385 | 0) == (HEAP32[i20 >> 2] & 65535 | 0)) {
     i380 = 0;
     i381 = 0;
     i382 = i386;
     i383 = i387;
    } else {
     HEAP32[i24 >> 2] = 66647;
     HEAP32[i8 >> 2] = 29;
     i78 = i59;
     i79 = i64;
     i80 = i387;
     i81 = i11;
     i82 = i384;
     i83 = i385;
     i84 = i63;
     i85 = i386;
     break;
    }
   }
   i254 = HEAP32[i23 >> 2] | 0;
   if (i254 | 0) {
    HEAP32[i254 + 44 >> 2] = i262 >>> 9 & 1;
    HEAP32[i254 + 48 >> 2] = 1;
   }
   i254 = _crc32(0, 0, 0) | 0;
   HEAP32[i20 >> 2] = i254;
   HEAP32[i27 >> 2] = i254;
   HEAP32[i8 >> 2] = 11;
   i78 = i59;
   i79 = i64;
   i80 = i383;
   i81 = i11;
   i82 = i380;
   i83 = i381;
   i84 = i63;
   i85 = i382;
  } else if ((i3 | 0) == 243) {
   i3 = 0;
   if (!i63) {
    i65 = i212;
    i66 = i213;
    i67 = i214;
    i68 = i215;
    i69 = i216;
    i70 = 0;
    i3 = 281;
    break L17;
   }
   i254 = i11 - i63 | 0;
   i87 = HEAP32[i40 >> 2] | 0;
   if (i87 >>> 0 > i254 >>> 0) {
    i258 = i87 - i254 | 0;
    if (i258 >>> 0 > (HEAP32[i41 >> 2] | 0) >>> 0) if (HEAP32[i42 >> 2] | 0) {
     HEAP32[i24 >> 2] = 66983;
     HEAP32[i8 >> 2] = 29;
     i78 = i216;
     i79 = i64;
     i80 = i215;
     i81 = i11;
     i82 = i212;
     i83 = i213;
     i84 = i63;
     i85 = i214;
     break;
    }
    i254 = HEAP32[i43 >> 2] | 0;
    if (i258 >>> 0 > i254 >>> 0) {
     i93 = i258 - i254 | 0;
     i388 = i93;
     i389 = (HEAP32[i44 >> 2] | 0) - i93 | 0;
    } else {
     i388 = i258;
     i389 = i254 - i258 | 0;
    }
    i258 = HEAP32[i28 >> 2] | 0;
    i390 = (HEAP32[i45 >> 2] | 0) + i389 | 0;
    i391 = i388 >>> 0 > i258 >>> 0 ? i258 : i388;
    i392 = i258;
   } else {
    i258 = HEAP32[i28 >> 2] | 0;
    i390 = i64 + (0 - i87) | 0;
    i391 = i258;
    i392 = i258;
   }
   i258 = i391 >>> 0 > i63 >>> 0 ? i63 : i391;
   HEAP32[i28 >> 2] = i392 - i258;
   i87 = i258;
   i254 = i64;
   i93 = i390;
   while (1) {
    HEAP8[i254 >> 0] = HEAP8[i93 >> 0] | 0;
    i87 = i87 + -1 | 0;
    if (!i87) break; else {
     i254 = i254 + 1 | 0;
     i93 = i93 + 1 | 0;
    }
   }
   i93 = i63 - i258 | 0;
   i254 = i64 + i258 | 0;
   if (!(HEAP32[i28 >> 2] | 0)) {
    HEAP32[i8 >> 2] = 20;
    i78 = i216;
    i79 = i254;
    i80 = i215;
    i81 = i11;
    i82 = i212;
    i83 = i213;
    i84 = i93;
    i85 = i214;
   } else {
    i78 = i216;
    i79 = i254;
    i80 = i215;
    i81 = i11;
    i82 = i212;
    i83 = i213;
    i84 = i93;
    i85 = i214;
   }
  } while (0);
  i59 = i78;
  i60 = i80;
  i11 = i81;
  i61 = i82;
  i62 = i83;
  i63 = i84;
  i14 = i85;
  i64 = i79;
  i10 = HEAP32[i8 >> 2] | 0;
 }
 if ((i3 | 0) == 122) {
  HEAP32[i9 >> 2] = i64;
  HEAP32[i12 >> 2] = i63;
  HEAP32[i1 >> 2] = i142;
  HEAP32[i15 >> 2] = i141;
  HEAP32[i17 >> 2] = i140;
  HEAP32[i18 >> 2] = i139;
  i6 = 2;
  STACKTOP = i4;
  return i6 | 0;
 } else if ((i3 | 0) == 132) {
  i71 = i11;
  i72 = i245 + -3 | 0;
  i73 = i246 >>> 3;
  i74 = i247;
  i75 = i248;
  i76 = i59;
  i77 = i63;
 } else if ((i3 | 0) != 135) if ((i3 | 0) == 280) {
  HEAP32[i8 >> 2] = 28;
  i71 = i228;
  i72 = i237;
  i73 = i238;
  i74 = i239;
  i75 = i240;
  i76 = 1;
  i77 = i63;
 } else if ((i3 | 0) == 281) {
  i71 = i11;
  i72 = i65;
  i73 = i66;
  i74 = i67;
  i75 = i68;
  i76 = i69;
  i77 = i70;
 } else if ((i3 | 0) == 303) {
  i6 = -4;
  STACKTOP = i4;
  return i6 | 0;
 } else if ((i3 | 0) == 304) {
  STACKTOP = i4;
  return i6 | 0;
 }
 HEAP32[i9 >> 2] = i64;
 HEAP32[i12 >> 2] = i77;
 HEAP32[i1 >> 2] = i75;
 HEAP32[i15 >> 2] = i74;
 HEAP32[i17 >> 2] = i73;
 HEAP32[i18 >> 2] = i72;
 if (!(HEAP32[i44 >> 2] | 0)) {
  if ((i71 | 0) != (i77 | 0)) {
   i44 = HEAP32[i8 >> 2] | 0;
   if (i44 >>> 0 < 29) if ((i2 | 0) != 4 | i44 >>> 0 < 26) i3 = 286;
  }
 } else i3 = 286;
 do if ((i3 | 0) == 286) {
  i44 = i71 - i77 | 0;
  i72 = HEAP32[i7 >> 2] | 0;
  i73 = i72 + 52 | 0;
  i17 = HEAP32[i73 >> 2] | 0;
  if (!i17) {
   i74 = FUNCTION_TABLE_iiii[HEAP32[i1 + 32 >> 2] & 31](HEAP32[i1 + 40 >> 2] | 0, 1 << HEAP32[i72 + 36 >> 2], 1) | 0;
   HEAP32[i73 >> 2] = i74;
   if (!i74) {
    HEAP32[i8 >> 2] = 30;
    i6 = -4;
    STACKTOP = i4;
    return i6 | 0;
   } else i393 = i74;
  } else i393 = i17;
  i17 = i72 + 40 | 0;
  i74 = HEAP32[i17 >> 2] | 0;
  if (!i74) {
   i75 = 1 << HEAP32[i72 + 36 >> 2];
   HEAP32[i17 >> 2] = i75;
   HEAP32[i72 + 48 >> 2] = 0;
   HEAP32[i72 + 44 >> 2] = 0;
   i394 = i75;
  } else i394 = i74;
  if (i394 >>> 0 <= i44 >>> 0) {
   _memcpy(i393 | 0, i64 + (0 - i394) | 0, i394 | 0) | 0;
   HEAP32[i72 + 48 >> 2] = 0;
   HEAP32[i72 + 44 >> 2] = HEAP32[i17 >> 2];
   break;
  }
  i74 = i72 + 48 | 0;
  i75 = HEAP32[i74 >> 2] | 0;
  i70 = i394 - i75 | 0;
  i69 = i70 >>> 0 > i44 >>> 0 ? i44 : i70;
  _memcpy(i393 + i75 | 0, i64 + (0 - i44) | 0, i69 | 0) | 0;
  i75 = i44 - i69 | 0;
  if (i75 | 0) {
   _memcpy(HEAP32[i73 >> 2] | 0, i64 + (0 - i75) | 0, i75 | 0) | 0;
   HEAP32[i74 >> 2] = i75;
   HEAP32[i72 + 44 >> 2] = HEAP32[i17 >> 2];
   break;
  }
  i75 = (HEAP32[i74 >> 2] | 0) + i69 | 0;
  i73 = HEAP32[i17 >> 2] | 0;
  HEAP32[i74 >> 2] = (i75 | 0) == (i73 | 0) ? 0 : i75;
  i75 = i72 + 44 | 0;
  i72 = HEAP32[i75 >> 2] | 0;
  if (i72 >>> 0 < i73 >>> 0) HEAP32[i75 >> 2] = i72 + i69;
 } while (0);
 i64 = i16 - (HEAP32[i15 >> 2] | 0) | 0;
 i15 = i71 - (HEAP32[i12 >> 2] | 0) | 0;
 i12 = i1 + 8 | 0;
 HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + i64;
 HEAP32[i46 >> 2] = (HEAP32[i46 >> 2] | 0) + i15;
 HEAP32[i47 >> 2] = (HEAP32[i47 >> 2] | 0) + i15;
 if ((i15 | 0) != 0 & (HEAP32[i19 >> 2] | 0) != 0) {
  i19 = HEAP32[i20 >> 2] | 0;
  i47 = (HEAP32[i9 >> 2] | 0) + (0 - i15) | 0;
  if (!(HEAP32[i22 >> 2] | 0)) i395 = _adler32(i19, i47, i15) | 0; else i395 = _crc32(i19, i47, i15) | 0;
  HEAP32[i20 >> 2] = i395;
  HEAP32[i27 >> 2] = i395;
 }
 i395 = HEAP32[i8 >> 2] | 0;
 HEAP32[i1 + 44 >> 2] = (HEAP32[i31 >> 2] | 0 ? 64 : 0) + (HEAP32[i18 >> 2] | 0) + ((i395 | 0) == 11 ? 128 : 0) + ((i395 | 0) == 19 | (i395 | 0) == 14 ? 256 : 0);
 i6 = (i76 | 0) == 0 & ((i2 | 0) == 4 | (i15 | i64 | 0) == 0) ? -5 : i76;
 STACKTOP = i4;
 return i6 | 0;
}

function __ZN18ImGuiTextEditState12OnKeyPressedEi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, f71 = f0, i72 = 0, f73 = f0, i74 = 0, i75 = 0, f76 = f0, f77 = f0, f78 = f0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, i90 = 0, i91 = 0, i92 = 0, i93 = 0, i94 = 0, i95 = 0, i96 = 0, i97 = 0, i98 = 0, i99 = 0, i100 = 0, i101 = 0, i102 = 0, i103 = 0, i104 = 0, i105 = 0, i106 = 0, i107 = 0, i108 = 0, i109 = 0, i110 = 0, i111 = 0, i112 = 0, i113 = 0, i114 = 0, i115 = 0, i116 = 0, i117 = 0, i118 = 0, i119 = 0, i120 = 0, i121 = 0, i122 = 0, i123 = 0, i124 = 0, i125 = 0, i126 = 0, i127 = 0, i128 = 0, i129 = 0, i130 = 0, i131 = 0, i132 = 0, i133 = 0, i134 = 0, i135 = 0, i136 = 0, i137 = 0, i138 = 0, i139 = 0, i140 = 0, i141 = 0, i142 = 0, i143 = 0, i144 = 0, i145 = 0, i146 = 0, i147 = 0, i148 = 0, i149 = 0, i150 = 0, i151 = 0, i152 = 0, i153 = 0, i154 = 0, i155 = 0, i156 = 0, i157 = 0, i158 = 0, i159 = 0, i160 = 0, i161 = 0, i162 = 0, i163 = 0, i164 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i5 = i4;
 i6 = i1 + 56 | 0;
 i7 = i1 + 72 | 0;
 i8 = i2;
 L1 : while (1) {
  if ((i8 | 0) < 65549) switch (i8 | 0) {
  case 65546:
   {
    i3 = 25;
    break L1;
    break;
   }
  case 65547:
   {
    i3 = 56;
    break L1;
    break;
   }
  case 65536:
   {
    i3 = 77;
    break L1;
    break;
   }
  case 65537:
   {
    i3 = 84;
    break L1;
    break;
   }
  case 65548:
   {
    i3 = 116;
    break L1;
    break;
   }
  case 65544:
   {
    i3 = 305;
    break L1;
    break;
   }
  case 65545:
   {
    i3 = 320;
    break L1;
    break;
   }
  case 65542:
   {
    i3 = 337;
    break L1;
    break;
   }
  case 65543:
   {
    i3 = 338;
    break L1;
    break;
   }
  case 65540:
   {
    i3 = 347;
    break L1;
    break;
   }
  case 65541:
   {
    i3 = 369;
    break L1;
    break;
   }
  case 65539:
   {
    i3 = 202;
    break;
   }
  case 65538:
   {
    i3 = 258;
    break;
   }
  default:
   {
    i3 = 3;
    break L1;
   }
  } else {
   if ((i8 | 0) >= 196613) {
    i3 = 453;
    break;
   }
   if ((i8 | 0) < 196610) {
    i3 = 470;
    break;
   }
   switch (i8 | 0) {
   case 196612:
    {
     i3 = 391;
     break L1;
     break;
    }
   case 196611:
    {
     i3 = 202;
     break;
    }
   case 196610:
    {
     i3 = 258;
     break;
    }
   default:
    {
     i3 = 3;
     break L1;
    }
   }
  }
  if ((i3 | 0) == 202) {
   i3 = 0;
   i9 = i8 & 131072;
   if (!(HEAP8[i7 >> 0] | 0)) {
    i3 = 203;
    break;
   }
   i8 = i9 | 65537;
   continue;
  } else if ((i3 | 0) == 258) {
   i3 = 0;
   i10 = i8 & 131072;
   if (!(HEAP8[i7 >> 0] | 0)) {
    i3 = 259;
    break;
   }
   i8 = i10 | 65536;
   continue;
  }
 }
 L13 : switch (i3 | 0) {
 case 25:
  {
   i2 = i1 + 3662 | 0;
   i11 = HEAP16[i2 >> 1] | 0;
   L156 : do if (i11 << 16 >> 16) {
    i12 = (i11 << 16 >> 16) + -1 | 0;
    i13 = i1 + 80 + (i12 << 4) | 0;
    i12 = HEAP32[i13 >> 2] | 0;
    i14 = HEAP32[i13 + 4 >> 2] | 0;
    i15 = HEAP32[i13 + 8 >> 2] | 0;
    i16 = HEAP32[i13 + 12 >> 2] | 0;
    i13 = i1 + 3664 | 0;
    i17 = (HEAP16[i13 >> 1] | 0) + -1 | 0;
    i18 = i1 + 80 + (i17 << 4) | 0;
    HEAP32[i18 + 12 >> 2] = -1;
    i17 = i18 + 4 | 0;
    HEAP32[i17 >> 2] = i15;
    HEAP32[i18 + 8 >> 2] = i14;
    HEAP32[i18 >> 2] = i12;
    i18 = i1 + 3668 | 0;
    if (i15 | 0) {
     i19 = HEAP32[i18 >> 2] | 0;
     i20 = i19 + i15 | 0;
     L160 : do if ((i20 | 0) > 998) HEAP32[i17 >> 2] = 0; else {
      i21 = i1 + 3672 | 0;
      i22 = HEAP32[i21 >> 2] | 0;
      i23 = HEAP16[i13 >> 1] | 0;
      if ((i20 | 0) > (i22 | 0)) {
       i24 = i1 + 1660 | 0;
       i25 = i1 + 1652 | 0;
       i26 = i22;
       i27 = i19;
       i28 = i23;
       while (1) {
        if (i28 << 16 >> 16 == 99) break L156;
        if (i28 << 16 >> 16 < 99) {
         if ((HEAP32[i24 >> 2] | 0) > -1) {
          i29 = HEAP32[i25 >> 2] | 0;
          i30 = i29 + i26 | 0;
          HEAP32[i21 >> 2] = i30;
          _memmove(i1 + 1664 + (i30 << 1) | 0, i1 + 1664 + (i26 << 1) | 0, 999 - i30 << 1 | 0) | 0;
          i30 = HEAP16[i13 >> 1] | 0;
          if (i30 << 16 >> 16 < 98) {
           i31 = i30 << 16 >> 16;
           while (1) {
            i32 = i1 + 80 + (i31 << 4) + 12 | 0;
            i33 = HEAP32[i32 >> 2] | 0;
            if ((i33 | 0) > -1) HEAP32[i32 >> 2] = i33 + i29;
            if ((i31 | 0) < 97) i31 = i31 + 1 | 0; else {
             i34 = i30;
             break;
            }
           }
          } else i34 = i30;
         } else i34 = i28;
         i31 = i34 << 16 >> 16;
         i29 = i1 + 80 + (i31 << 4) | 0;
         _memmove(i29 + 16 | 0, i29 | 0, 99 - i31 << 4 | 0) | 0;
         i31 = (HEAP16[i13 >> 1] | 0) + 1 << 16 >> 16;
         HEAP16[i13 >> 1] = i31;
         i35 = HEAP32[i21 >> 2] | 0;
         i36 = i31;
         i37 = HEAP32[i18 >> 2] | 0;
        } else {
         i35 = i26;
         i36 = i28;
         i37 = i27;
        }
        if ((i37 + i15 | 0) > (i35 | 0)) {
         i26 = i35;
         i27 = i37;
         i28 = i36;
        } else {
         i38 = i36;
         i39 = i35;
         break;
        }
       }
      } else {
       i38 = i23;
       i39 = i22;
      }
      i28 = i39 - i15 | 0;
      i27 = i1 + 80 + ((i38 << 16 >> 16) + -1 << 4) + 12 | 0;
      HEAP32[i27 >> 2] = i28;
      HEAP32[i21 >> 2] = i28;
      if ((i15 | 0) > 0) {
       i28 = HEAP32[i1 + 4 >> 2] | 0;
       i26 = i1 + 12 | 0;
       i25 = 0;
       while (1) {
        i24 = i25 + i12 | 0;
        if ((i28 | 0) <= (i24 | 0)) break;
        HEAP16[i1 + 1664 + ((HEAP32[i27 >> 2] | 0) + i25 << 1) >> 1] = HEAP16[(HEAP32[i26 >> 2] | 0) + (i24 << 1) >> 1] | 0;
        i25 = i25 + 1 | 0;
        if ((i25 | 0) >= (i15 | 0)) break L160;
       }
       ___assert_fail(56841, 56850, 1236, 56909);
      }
     } while (0);
     i19 = (HEAP32[i1 + 12 >> 2] | 0) + (i12 << 1) | 0;
     i20 = i19 + (i15 << 1) | 0;
     i17 = (i20 | 0) == 0;
     L187 : do if ((i15 | 0) > 0 | i17) {
      i25 = 0;
      i26 = i19;
      while (1) {
       i27 = HEAP16[i26 >> 1] | 0;
       if (!(i27 << 16 >> 16)) {
        i40 = i25;
        break L187;
       }
       i26 = i26 + 2 | 0;
       i28 = i27 & -1024;
       i21 = i28 << 16 >> 16 | 0;
       i28 = ((i27 & 65535) < 128 ? 1 : (i27 & 65535) < 2048 ? 2 : (i21 | 0) == -9216 ? 0 : (i21 | 0) == -10240 ? 4 : 3) + i25 | 0;
       if (!(i17 | i26 >>> 0 < i20 >>> 0)) {
        i40 = i28;
        break;
       } else i25 = i28;
      }
     } else i40 = 0; while (0);
     i17 = i1 + 40 | 0;
     HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) - i40;
     i17 = i1 + 44 | 0;
     HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) - i15;
     i17 = HEAP16[i20 >> 1] | 0;
     if (!(i17 << 16 >> 16)) i41 = i19; else {
      i25 = i19;
      i26 = i20;
      i28 = i17;
      while (1) {
       i26 = i26 + 2 | 0;
       i17 = i25 + 2 | 0;
       HEAP16[i25 >> 1] = i28;
       i28 = HEAP16[i26 >> 1] | 0;
       if (!(i28 << 16 >> 16)) {
        i41 = i17;
        break;
       } else i25 = i17;
      }
     }
     HEAP16[i41 >> 1] = 0;
    }
    if (i14 | 0) {
     __ZN8ImGuiStbL24STB_TEXTEDIT_INSERTCHARSEP18ImGuiTextEditStateiPKti(i1, i12, i1 + 1664 + (i16 << 1) | 0, i14) | 0;
     HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) - i14;
    }
    HEAP32[i6 >> 2] = i14 + i12;
    HEAP16[i2 >> 1] = (HEAP16[i2 >> 1] | 0) + -1 << 16 >> 16;
    HEAP16[i13 >> 1] = (HEAP16[i13 >> 1] | 0) + -1 << 16 >> 16;
   } while (0);
   HEAP8[i1 + 71 >> 0] = 0;
   i42 = i1 + 3680 | 0;
   HEAP8[i42 >> 0] = 1;
   i43 = i1 + 3676 | 0;
   HEAPF32[i43 >> 2] = Math_fround(-.300000012);
   STACKTOP = i4;
   return;
  }
 case 56:
  {
   i2 = i1 + 3664 | 0;
   i41 = HEAP16[i2 >> 1] | 0;
   if (i41 << 16 >> 16 != 99) {
    i40 = i41 << 16 >> 16;
    i41 = i1 + 3662 | 0;
    i38 = HEAP16[i41 >> 1] | 0;
    i39 = i1 + 80 + (i40 << 4) | 0;
    i40 = HEAP32[i39 >> 2] | 0;
    i35 = HEAP32[i39 + 4 >> 2] | 0;
    i36 = HEAP32[i39 + 8 >> 2] | 0;
    i37 = HEAP32[i39 + 12 >> 2] | 0;
    i39 = i1 + 80 + (i38 << 4) | 0;
    i38 = i39 + 8 | 0;
    HEAP32[i38 >> 2] = i35;
    i34 = i39 + 4 | 0;
    HEAP32[i34 >> 2] = i36;
    i11 = i39 | 0;
    HEAP32[i11 >> 2] = i40;
    i25 = i39 + 12 | 0;
    HEAP32[i25 >> 2] = -1;
    if (!i36) i44 = i1 + 3672 | 0; else {
     i39 = i1 + 3668 | 0;
     i28 = HEAP32[i39 >> 2] | 0;
     i26 = i28 + i36 | 0;
     i20 = i1 + 3672 | 0;
     L208 : do if ((i26 | 0) > (HEAP32[i20 >> 2] | 0)) {
      HEAP32[i34 >> 2] = 0;
      HEAP32[i38 >> 2] = 0;
     } else {
      HEAP32[i25 >> 2] = i28;
      HEAP32[i39 >> 2] = i26;
      if ((HEAP32[i34 >> 2] | 0) > 0) {
       i19 = HEAP32[i1 + 4 >> 2] | 0;
       if ((i19 | 0) <= (i40 | 0)) ___assert_fail(56841, 56850, 1236, 56909);
       i15 = HEAP32[i1 + 12 >> 2] | 0;
       HEAP16[i1 + 1664 + (i28 << 1) >> 1] = HEAP16[i15 + (i40 << 1) >> 1] | 0;
       if ((HEAP32[i34 >> 2] | 0) > 1) {
        i17 = 1;
        while (1) {
         i21 = (HEAP32[i11 >> 2] | 0) + i17 | 0;
         if ((i19 | 0) <= (i21 | 0)) break;
         HEAP16[i1 + 1664 + (i17 + (HEAP32[i25 >> 2] | 0) << 1) >> 1] = HEAP16[i15 + (i21 << 1) >> 1] | 0;
         i17 = i17 + 1 | 0;
         if ((i17 | 0) >= (HEAP32[i34 >> 2] | 0)) break L208;
        }
        ___assert_fail(56841, 56850, 1236, 56909);
       }
      }
     } while (0);
     i34 = (HEAP32[i1 + 12 >> 2] | 0) + (i40 << 1) | 0;
     i25 = i34 + (i36 << 1) | 0;
     i11 = (i25 | 0) == 0;
     L220 : do if ((i36 | 0) > 0 | i11) {
      i28 = 0;
      i26 = i34;
      while (1) {
       i39 = HEAP16[i26 >> 1] | 0;
       if (!(i39 << 16 >> 16)) {
        i45 = i28;
        break L220;
       }
       i26 = i26 + 2 | 0;
       i38 = i39 & -1024;
       i17 = i38 << 16 >> 16 | 0;
       i38 = ((i39 & 65535) < 128 ? 1 : (i39 & 65535) < 2048 ? 2 : (i17 | 0) == -9216 ? 0 : (i17 | 0) == -10240 ? 4 : 3) + i28 | 0;
       if (!(i11 | i26 >>> 0 < i25 >>> 0)) {
        i45 = i38;
        break;
       } else i28 = i38;
      }
     } else i45 = 0; while (0);
     i11 = i1 + 40 | 0;
     HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) - i45;
     i45 = i1 + 44 | 0;
     HEAP32[i45 >> 2] = (HEAP32[i45 >> 2] | 0) - i36;
     i36 = HEAP16[i25 >> 1] | 0;
     if (!(i36 << 16 >> 16)) i46 = i34; else {
      i45 = i34;
      i34 = i25;
      i25 = i36;
      while (1) {
       i34 = i34 + 2 | 0;
       i36 = i45 + 2 | 0;
       HEAP16[i45 >> 1] = i25;
       i25 = HEAP16[i34 >> 1] | 0;
       if (!(i25 << 16 >> 16)) {
        i46 = i36;
        break;
       } else i45 = i36;
      }
     }
     HEAP16[i46 >> 1] = 0;
     i44 = i20;
    }
    if (i35 | 0) {
     __ZN8ImGuiStbL24STB_TEXTEDIT_INSERTCHARSEP18ImGuiTextEditStateiPKti(i1, i40, i1 + 1664 + (i37 << 1) | 0, i35) | 0;
     HEAP32[i44 >> 2] = (HEAP32[i44 >> 2] | 0) + i35;
    }
    HEAP32[i6 >> 2] = i35 + i40;
    HEAP16[i41 >> 1] = (HEAP16[i41 >> 1] | 0) + 1 << 16 >> 16;
    HEAP16[i2 >> 1] = (HEAP16[i2 >> 1] | 0) + 1 << 16 >> 16;
   }
   HEAP8[i1 + 71 >> 0] = 0;
   i42 = i1 + 3680 | 0;
   HEAP8[i42 >> 0] = 1;
   i43 = i1 + 3676 | 0;
   HEAPF32[i43 >> 2] = Math_fround(-.300000012);
   STACKTOP = i4;
   return;
  }
 case 77:
  {
   i2 = i1 + 60 | 0;
   i41 = HEAP32[i2 >> 2] | 0;
   i40 = i1 + 64 | 0;
   i35 = HEAP32[i40 >> 2] | 0;
   if ((i41 | 0) == (i35 | 0)) {
    i44 = HEAP32[i6 >> 2] | 0;
    if ((i44 | 0) > 0) HEAP32[i6 >> 2] = i44 + -1;
   } else {
    if ((i35 | 0) < (i41 | 0)) {
     HEAP32[i40 >> 2] = i41;
     HEAP32[i2 >> 2] = i35;
     i47 = i35;
    } else i47 = i41;
    HEAP32[i6 >> 2] = i47;
    HEAP32[i40 >> 2] = i47;
    HEAP8[i1 + 71 >> 0] = 0;
   }
   HEAP8[i1 + 71 >> 0] = 0;
   i42 = i1 + 3680 | 0;
   HEAP8[i42 >> 0] = 1;
   i43 = i1 + 3676 | 0;
   HEAPF32[i43 >> 2] = Math_fround(-.300000012);
   STACKTOP = i4;
   return;
  }
 case 84:
  {
   i47 = i1 + 60 | 0;
   i40 = HEAP32[i47 >> 2] | 0;
   i41 = i1 + 64 | 0;
   i35 = HEAP32[i41 >> 2] | 0;
   if ((i40 | 0) == (i35 | 0)) {
    i2 = (HEAP32[i6 >> 2] | 0) + 1 | 0;
    HEAP32[i6 >> 2] = i2;
    i48 = i2;
    i49 = HEAP32[i1 + 44 >> 2] | 0;
   } else {
    if ((i35 | 0) < (i40 | 0)) {
     HEAP32[i41 >> 2] = i40;
     HEAP32[i47 >> 2] = i35;
     i50 = i35;
     i51 = i40;
    } else {
     i50 = i40;
     i51 = i35;
    }
    i35 = HEAP32[i1 + 44 >> 2] | 0;
    if ((i50 | 0) == (i51 | 0)) i52 = i51; else {
     if ((i50 | 0) > (i35 | 0)) {
      HEAP32[i47 >> 2] = i35;
      i53 = i35;
     } else i53 = i50;
     if ((i51 | 0) > (i35 | 0)) {
      HEAP32[i41 >> 2] = i35;
      i54 = i35;
     } else i54 = i51;
     if ((i53 | 0) == (i54 | 0)) {
      HEAP32[i6 >> 2] = i53;
      i52 = i53;
     } else i52 = i54;
    }
    if ((HEAP32[i6 >> 2] | 0) > (i35 | 0)) HEAP32[i6 >> 2] = i35;
    HEAP32[i6 >> 2] = i52;
    HEAP32[i47 >> 2] = i52;
    HEAP8[i1 + 71 >> 0] = 0;
    i48 = i52;
    i49 = i35;
   }
   if ((i48 | 0) > (i49 | 0)) HEAP32[i6 >> 2] = i49;
   HEAP8[i1 + 71 >> 0] = 0;
   i42 = i1 + 3680 | 0;
   HEAP8[i42 >> 0] = 1;
   i43 = i1 + 3676 | 0;
   HEAPF32[i43 >> 2] = Math_fround(-.300000012);
   STACKTOP = i4;
   return;
  }
 case 116:
  {
   i49 = i1 + 60 | 0;
   i48 = HEAP32[i49 >> 2] | 0;
   i35 = i1 + 64 | 0;
   i52 = HEAP32[i35 >> 2] | 0;
   if ((i48 | 0) != (i52 | 0)) {
    if ((i52 | 0) < (i48 | 0)) {
     HEAP32[i35 >> 2] = i48;
     HEAP32[i49 >> 2] = i52;
     i55 = i52;
    } else i55 = i48;
    HEAP32[i6 >> 2] = i55;
    HEAP32[i35 >> 2] = i55;
    HEAP8[i1 + 71 >> 0] = 0;
    i42 = i1 + 3680 | 0;
    HEAP8[i42 >> 0] = 1;
    i43 = i1 + 3676 | 0;
    HEAPF32[i43 >> 2] = Math_fround(-.300000012);
    STACKTOP = i4;
    return;
   }
   i55 = HEAP32[i6 >> 2] | 0;
   i35 = i55 + -1 | 0;
   L278 : do if ((i55 | 0) > 1) {
    i48 = HEAP32[i1 + 4 >> 2] | 0;
    if ((i35 | 0) > (i48 | 0)) ___assert_fail(56841, 56850, 1235, 56909);
    i52 = HEAP32[i1 + 12 >> 2] | 0;
    i49 = i35;
    i47 = i55;
    L283 : while (1) {
     i54 = HEAP16[i52 + (i47 + -2 << 1) >> 1] | 0;
     L285 : do if (i54 << 16 >> 16 < 91) switch (i54 << 16 >> 16) {
     case 40:
     case 41:
     case 44:
     case 59:
     case 9:
     case 32:
      {
       i3 = 126;
       break;
      }
     default:
      {}
     } else {
      if (i54 << 16 >> 16 < 124) switch (i54 << 16 >> 16) {
      case 91:
      case 93:
      case 123:
       {
        i3 = 126;
        break L285;
        break;
       }
      default:
       break L285;
      }
      if (i54 << 16 >> 16 < 125) switch (i54 << 16 >> 16) {
      case 124:
       {
        i3 = 126;
        break L285;
        break;
       }
      default:
       break L285;
      }
      if (i54 << 16 >> 16 < 12288) switch (i54 << 16 >> 16) {
      case 125:
       {
        i3 = 126;
        break L285;
        break;
       }
      default:
       break L285;
      } else switch (i54 << 16 >> 16) {
      case 12288:
       {
        i3 = 126;
        break L285;
        break;
       }
      default:
       break L285;
      }
     } while (0);
     L297 : do if ((i3 | 0) == 126) {
      i3 = 0;
      if ((i48 | 0) < (i47 | 0)) break L283;
      i54 = HEAP16[i52 + (i49 << 1) >> 1] | 0;
      if (i54 << 16 >> 16 < 91) switch (i54 << 16 >> 16) {
      case 40:
      case 41:
      case 44:
      case 59:
      case 9:
      case 32:
       {
        break L297;
        break;
       }
      default:
       {
        i56 = i49;
        break L278;
       }
      }
      if (i54 << 16 >> 16 < 124) switch (i54 << 16 >> 16) {
      case 91:
      case 93:
      case 123:
       {
        break L297;
        break;
       }
      default:
       {
        i56 = i49;
        break L278;
       }
      }
      if (i54 << 16 >> 16 < 125) switch (i54 << 16 >> 16) {
      case 124:
       {
        break L297;
        break;
       }
      default:
       {
        i56 = i49;
        break L278;
       }
      }
      if (i54 << 16 >> 16 < 12288) switch (i54 << 16 >> 16) {
      case 125:
       {
        break L297;
        break;
       }
      default:
       {
        i56 = i49;
        break L278;
       }
      } else switch (i54 << 16 >> 16) {
      case 12288:
       {
        break L297;
        break;
       }
      default:
       {
        i56 = i49;
        break L278;
       }
      }
     } while (0);
     i54 = i49 + -1 | 0;
     if ((i49 | 0) > 1) {
      i53 = i49;
      i49 = i54;
      i47 = i53;
     } else {
      i56 = i54;
      break L278;
     }
    }
    ___assert_fail(56841, 56850, 1235, 56909);
   } else i56 = i35; while (0);
   i35 = (i56 | 0) > 0 ? i56 : 0;
   i56 = HEAP32[i1 + 44 >> 2] | 0;
   HEAP32[i6 >> 2] = (i35 | 0) > (i56 | 0) ? i56 : i35;
   i42 = i1 + 3680 | 0;
   HEAP8[i42 >> 0] = 1;
   i43 = i1 + 3676 | 0;
   HEAPF32[i43 >> 2] = Math_fround(-.300000012);
   STACKTOP = i4;
   return;
  }
 case 203:
  {
   i35 = (i9 | 0) != 0;
   i9 = i1 + 60 | 0;
   i56 = HEAP32[i9 >> 2] | 0;
   i55 = i1 + 64 | 0;
   i47 = HEAP32[i55 >> 2] | 0;
   i49 = (i56 | 0) == (i47 | 0);
   do if (i35) {
    if (i49) {
     i52 = HEAP32[i6 >> 2] | 0;
     HEAP32[i55 >> 2] = i52;
     HEAP32[i9 >> 2] = i52;
     i57 = i6;
     i58 = i52;
     i3 = 220;
     break;
    }
    HEAP32[i6 >> 2] = i47;
    i52 = i1 + 44 | 0;
    i48 = HEAP32[i52 >> 2] | 0;
    if ((i56 | 0) > (i48 | 0)) {
     HEAP32[i9 >> 2] = i48;
     i59 = i48;
    } else i59 = i56;
    if ((i47 | 0) > (i48 | 0)) {
     HEAP32[i55 >> 2] = i48;
     i60 = i48;
    } else i60 = i47;
    if ((i59 | 0) == (i60 | 0)) {
     HEAP32[i6 >> 2] = i59;
     i61 = i6;
     i62 = i59;
     i63 = i48;
     i64 = i52;
    } else {
     i61 = i6;
     i62 = i47;
     i63 = i48;
     i64 = i52;
    }
   } else {
    if (i49) {
     i57 = i6;
     i58 = HEAP32[i6 >> 2] | 0;
     i3 = 220;
     break;
    }
    if ((i47 | 0) < (i56 | 0)) {
     HEAP32[i55 >> 2] = i56;
     HEAP32[i9 >> 2] = i47;
     i65 = i47;
     i66 = i56;
    } else {
     i65 = i56;
     i66 = i47;
    }
    i52 = i1 + 44 | 0;
    i48 = HEAP32[i52 >> 2] | 0;
    if ((i65 | 0) == (i66 | 0)) i67 = i66; else {
     if ((i65 | 0) > (i48 | 0)) {
      HEAP32[i9 >> 2] = i48;
      i68 = i48;
     } else i68 = i65;
     if ((i66 | 0) > (i48 | 0)) {
      HEAP32[i55 >> 2] = i48;
      i69 = i48;
     } else i69 = i66;
     if ((i68 | 0) == (i69 | 0)) {
      HEAP32[i6 >> 2] = i68;
      i67 = i68;
     } else i67 = i69;
    }
    if ((HEAP32[i6 >> 2] | 0) > (i48 | 0)) HEAP32[i6 >> 2] = i48;
    HEAP32[i6 >> 2] = i67;
    HEAP32[i9 >> 2] = i67;
    HEAP8[i1 + 71 >> 0] = 0;
    i61 = i6;
    i62 = i67;
    i63 = i48;
    i64 = i52;
   } while (0);
   if ((i3 | 0) == 220) {
    i67 = i1 + 44 | 0;
    i61 = i57;
    i62 = i58;
    i63 = HEAP32[i67 >> 2] | 0;
    i64 = i67;
   }
   if ((i62 | 0) > (i63 | 0)) {
    HEAP32[i61 >> 2] = i63;
    i70 = i63;
   } else i70 = i62;
   __ZN8ImGuiStbL25stb_textedit_find_charposEPNS_12StbFindStateEP18ImGuiTextEditStateii(i5, i1, i70, 0);
   i70 = HEAP32[i5 + 16 >> 2] | 0;
   if (i70 | 0) {
    i62 = i1 + 71 | 0;
    i63 = i1 + 76 | 0;
    f71 = Math_fround(HEAPF32[(HEAP8[i62 >> 0] | 0 ? i63 : i5) >> 2]);
    i67 = (HEAP32[i5 + 12 >> 2] | 0) + i70 | 0;
    HEAP32[i61 >> 2] = i67;
    i70 = HEAP32[i1 + 12 >> 2] | 0;
    i58 = i70 + (i67 << 1) | 0;
    i57 = HEAP32[i64 >> 2] | 0;
    i64 = i70 + (i57 << 1) | 0;
    i69 = i58;
    L55 : while (1) {
     i68 = i69;
     while (1) {
      if (i68 >>> 0 >= i64 >>> 0) {
       i72 = i68;
       break L55;
      }
      i66 = i68 + 2 | 0;
      switch (HEAP16[i68 >> 1] | 0) {
      case 10:
       {
        i72 = i66;
        break L55;
        break;
       }
      case 13:
       {
        i68 = i66;
        break;
       }
      default:
       {
        i69 = i66;
        continue L55;
       }
      }
     }
    }
    i69 = i72 - i58 | 0;
    i58 = i69 >> 1;
    L61 : do if ((i69 | 0) > 0) {
     i72 = HEAP32[i1 + 4 >> 2] | 0;
     i64 = HEAP32[1460598] | 0;
     i68 = i64 + 6180 | 0;
     i66 = i64 + 6184 | 0;
     i64 = 0;
     f73 = Math_fround(0.0);
     i65 = i67;
     while (1) {
      i47 = i64 + i67 | 0;
      if ((i72 | 0) <= (i47 | 0)) break;
      i56 = HEAP16[i70 + (i47 << 1) >> 1] | 0;
      if (i56 << 16 >> 16 == 10) {
       i74 = i65;
       break L61;
      }
      i47 = HEAP32[i68 >> 2] | 0;
      i49 = i56 & 65535;
      if ((HEAP32[i47 + 28 >> 2] | 0) > (i49 | 0)) i75 = (HEAP32[i47 + 36 >> 2] | 0) + (i49 << 2) | 0; else i75 = i47 + 56 | 0;
      f76 = Math_fround(HEAPF32[i75 >> 2]);
      f77 = Math_fround(HEAPF32[i66 >> 2]);
      f78 = Math_fround(f76 * Math_fround(f77 / Math_fround(HEAPF32[i47 >> 2])));
      if (f78 == Math_fround(-1.0)) {
       i74 = i65;
       break L61;
      }
      f73 = Math_fround(f73 + f78);
      if (f73 > f71) {
       i74 = i65;
       break L61;
      }
      i47 = i65 + 1 | 0;
      HEAP32[i61 >> 2] = i47;
      i64 = i64 + 1 | 0;
      if ((i64 | 0) >= (i58 | 0)) {
       i74 = i47;
       break L61;
      } else i65 = i47;
     }
     ___assert_fail(56841, 56850, 1235, 56909);
    } else i74 = i67; while (0);
    i67 = HEAP32[i9 >> 2] | 0;
    i58 = HEAP32[i55 >> 2] | 0;
    if ((i67 | 0) == (i58 | 0)) i79 = i74; else {
     if ((i67 | 0) > (i57 | 0)) {
      HEAP32[i9 >> 2] = i57;
      i80 = i57;
     } else i80 = i67;
     if ((i58 | 0) > (i57 | 0)) {
      HEAP32[i55 >> 2] = i57;
      i81 = i57;
     } else i81 = i58;
     if ((i80 | 0) == (i81 | 0)) {
      HEAP32[i61 >> 2] = i80;
      i79 = i80;
     } else i79 = i74;
    }
    if ((i79 | 0) > (i57 | 0)) {
     HEAP32[i61 >> 2] = i57;
     i82 = i57;
    } else i82 = i79;
    HEAP8[i62 >> 0] = 1;
    HEAPF32[i63 >> 2] = f71;
    if (i35) HEAP32[i55 >> 2] = i82;
   }
   i42 = i1 + 3680 | 0;
   HEAP8[i42 >> 0] = 1;
   i43 = i1 + 3676 | 0;
   HEAPF32[i43 >> 2] = Math_fround(-.300000012);
   STACKTOP = i4;
   return;
  }
 case 259:
  {
   i82 = (i10 | 0) != 0;
   i10 = i1 + 60 | 0;
   i55 = HEAP32[i10 >> 2] | 0;
   i35 = i1 + 64 | 0;
   i63 = HEAP32[i35 >> 2] | 0;
   i62 = (i55 | 0) == (i63 | 0);
   do if (i82) {
    if (i62) {
     i79 = HEAP32[i6 >> 2] | 0;
     HEAP32[i35 >> 2] = i79;
     HEAP32[i10 >> 2] = i79;
     i83 = i6;
     i84 = i79;
     i3 = 267;
     break;
    }
    HEAP32[i6 >> 2] = i63;
    i79 = i1 + 44 | 0;
    i57 = HEAP32[i79 >> 2] | 0;
    if ((i55 | 0) > (i57 | 0)) {
     HEAP32[i10 >> 2] = i57;
     i85 = i57;
    } else i85 = i55;
    if ((i63 | 0) > (i57 | 0)) {
     HEAP32[i35 >> 2] = i57;
     i86 = i57;
    } else i86 = i63;
    if ((i85 | 0) == (i86 | 0)) {
     HEAP32[i6 >> 2] = i85;
     i87 = i6;
     i88 = i85;
     i89 = i57;
     i90 = i79;
    } else {
     i87 = i6;
     i88 = i63;
     i89 = i57;
     i90 = i79;
    }
   } else {
    if (i62) {
     i83 = i6;
     i84 = HEAP32[i6 >> 2] | 0;
     i3 = 267;
     break;
    }
    if ((i63 | 0) < (i55 | 0)) {
     HEAP32[i35 >> 2] = i55;
     HEAP32[i10 >> 2] = i63;
     i91 = i63;
    } else i91 = i55;
    HEAP32[i6 >> 2] = i91;
    HEAP32[i35 >> 2] = i91;
    HEAP8[i1 + 71 >> 0] = 0;
    i83 = i6;
    i84 = i91;
    i3 = 267;
   } while (0);
   if ((i3 | 0) == 267) {
    i91 = i1 + 44 | 0;
    i87 = i83;
    i88 = i84;
    i89 = HEAP32[i91 >> 2] | 0;
    i90 = i91;
   }
   if ((i88 | 0) > (i89 | 0)) {
    HEAP32[i87 >> 2] = i89;
    i92 = i89;
   } else i92 = i88;
   __ZN8ImGuiStbL25stb_textedit_find_charposEPNS_12StbFindStateEP18ImGuiTextEditStateii(i5, i1, i92, 0);
   i92 = HEAP32[i5 + 20 >> 2] | 0;
   if ((i92 | 0) != (HEAP32[i5 + 12 >> 2] | 0)) {
    i88 = i1 + 71 | 0;
    i89 = i1 + 76 | 0;
    f71 = Math_fround(HEAPF32[(HEAP8[i88 >> 0] | 0 ? i89 : i5) >> 2]);
    HEAP32[i87 >> 2] = i92;
    i91 = HEAP32[i1 + 12 >> 2] | 0;
    i84 = i91 + (i92 << 1) | 0;
    i83 = HEAP32[i90 >> 2] | 0;
    i90 = i91 + (i83 << 1) | 0;
    i55 = i84;
    L119 : while (1) {
     i63 = i55;
     while (1) {
      if (i63 >>> 0 >= i90 >>> 0) {
       i93 = i63;
       break L119;
      }
      i62 = i63 + 2 | 0;
      switch (HEAP16[i63 >> 1] | 0) {
      case 10:
       {
        i93 = i62;
        break L119;
        break;
       }
      case 13:
       {
        i63 = i62;
        break;
       }
      default:
       {
        i55 = i62;
        continue L119;
       }
      }
     }
    }
    i55 = i93 - i84 | 0;
    i84 = i55 >> 1;
    L125 : do if ((i55 | 0) > 0) {
     i93 = HEAP32[i1 + 4 >> 2] | 0;
     i90 = HEAP32[1460598] | 0;
     i63 = i90 + 6180 | 0;
     i62 = i90 + 6184 | 0;
     f73 = Math_fround(0.0);
     i90 = 0;
     i85 = i92;
     while (1) {
      i86 = i90 + i92 | 0;
      if ((i93 | 0) <= (i86 | 0)) break;
      i79 = HEAP16[i91 + (i86 << 1) >> 1] | 0;
      if (i79 << 16 >> 16 == 10) {
       i94 = i85;
       break L125;
      }
      i86 = HEAP32[i63 >> 2] | 0;
      i57 = i79 & 65535;
      if ((HEAP32[i86 + 28 >> 2] | 0) > (i57 | 0)) i95 = (HEAP32[i86 + 36 >> 2] | 0) + (i57 << 2) | 0; else i95 = i86 + 56 | 0;
      f78 = Math_fround(HEAPF32[i95 >> 2]);
      f77 = Math_fround(HEAPF32[i62 >> 2]);
      f76 = Math_fround(f78 * Math_fround(f77 / Math_fround(HEAPF32[i86 >> 2])));
      if (f76 == Math_fround(-1.0)) {
       i94 = i85;
       break L125;
      }
      f73 = Math_fround(f73 + f76);
      if (f73 > f71) {
       i94 = i85;
       break L125;
      }
      i86 = i85 + 1 | 0;
      HEAP32[i87 >> 2] = i86;
      i90 = i90 + 1 | 0;
      if ((i90 | 0) >= (i84 | 0)) {
       i94 = i86;
       break L125;
      } else i85 = i86;
     }
     ___assert_fail(56841, 56850, 1235, 56909);
    } else i94 = i92; while (0);
    i92 = HEAP32[i10 >> 2] | 0;
    i84 = HEAP32[i35 >> 2] | 0;
    if ((i92 | 0) == (i84 | 0)) i96 = i94; else {
     if ((i92 | 0) > (i83 | 0)) {
      HEAP32[i10 >> 2] = i83;
      i97 = i83;
     } else i97 = i92;
     if ((i84 | 0) > (i83 | 0)) {
      HEAP32[i35 >> 2] = i83;
      i98 = i83;
     } else i98 = i84;
     if ((i97 | 0) == (i98 | 0)) {
      HEAP32[i87 >> 2] = i97;
      i96 = i97;
     } else i96 = i94;
    }
    if ((i96 | 0) > (i83 | 0)) {
     HEAP32[i87 >> 2] = i83;
     i99 = i83;
    } else i99 = i96;
    HEAP8[i88 >> 0] = 1;
    HEAPF32[i89 >> 2] = f71;
    if (i82) HEAP32[i35 >> 2] = i99;
   }
   i42 = i1 + 3680 | 0;
   HEAP8[i42 >> 0] = 1;
   i43 = i1 + 3676 | 0;
   HEAPF32[i43 >> 2] = Math_fround(-.300000012);
   STACKTOP = i4;
   return;
  }
 case 337:
  {
   HEAP32[i1 + 64 >> 2] = 0;
   HEAP32[i1 + 60 >> 2] = 0;
   HEAP32[i6 >> 2] = 0;
   HEAP8[i1 + 71 >> 0] = 0;
   i42 = i1 + 3680 | 0;
   HEAP8[i42 >> 0] = 1;
   i43 = i1 + 3676 | 0;
   HEAPF32[i43 >> 2] = Math_fround(-.300000012);
   STACKTOP = i4;
   return;
  }
 case 338:
  {
   HEAP32[i6 >> 2] = HEAP32[i1 + 44 >> 2];
   HEAP32[i1 + 64 >> 2] = 0;
   HEAP32[i1 + 60 >> 2] = 0;
   HEAP8[i1 + 71 >> 0] = 0;
   i42 = i1 + 3680 | 0;
   HEAP8[i42 >> 0] = 1;
   i43 = i1 + 3676 | 0;
   HEAPF32[i43 >> 2] = Math_fround(-.300000012);
   STACKTOP = i4;
   return;
  }
 case 347:
  {
   i99 = HEAP32[i1 + 44 >> 2] | 0;
   i35 = i1 + 60 | 0;
   i82 = HEAP32[i35 >> 2] | 0;
   i89 = i1 + 64 | 0;
   i88 = HEAP32[i89 >> 2] | 0;
   if ((i82 | 0) == (i88 | 0)) {
    i100 = i82;
    i101 = i82;
   } else {
    if ((i82 | 0) > (i99 | 0)) {
     HEAP32[i35 >> 2] = i99;
     i102 = i99;
    } else i102 = i82;
    if ((i88 | 0) > (i99 | 0)) {
     HEAP32[i89 >> 2] = i99;
     i103 = i99;
    } else i103 = i88;
    if ((i102 | 0) == (i103 | 0)) {
     HEAP32[i6 >> 2] = i102;
     i100 = i102;
     i101 = i102;
    } else {
     i100 = i102;
     i101 = i103;
    }
   }
   i103 = HEAP32[i6 >> 2] | 0;
   if ((i103 | 0) > (i99 | 0)) {
    HEAP32[i6 >> 2] = i99;
    i104 = i99;
   } else i104 = i103;
   if ((i100 | 0) == (i101 | 0)) i105 = i104; else {
    if ((i101 | 0) < (i100 | 0)) {
     HEAP32[i89 >> 2] = i100;
     HEAP32[i35 >> 2] = i101;
     i106 = i101;
    } else i106 = i100;
    HEAP32[i6 >> 2] = i106;
    HEAP32[i89 >> 2] = i106;
    HEAP8[i1 + 71 >> 0] = 0;
    i105 = i106;
   }
   L340 : do if (!(HEAP8[i7 >> 0] | 0)) {
    if ((i105 | 0) > 0) {
     if ((i105 | 0) > (HEAP32[i1 + 4 >> 2] | 0)) ___assert_fail(56841, 56850, 1236, 56909);
     i106 = HEAP32[i1 + 12 >> 2] | 0;
     i89 = i105;
     do {
      i100 = i89;
      i89 = i89 + -1 | 0;
      if ((HEAP16[i106 + (i89 << 1) >> 1] | 0) == 10) break L340;
      HEAP32[i6 >> 2] = i89;
     } while ((i100 | 0) > 1);
    }
   } else HEAP32[i6 >> 2] = 0; while (0);
   HEAP8[i1 + 71 >> 0] = 0;
   i42 = i1 + 3680 | 0;
   HEAP8[i42 >> 0] = 1;
   i43 = i1 + 3676 | 0;
   HEAPF32[i43 >> 2] = Math_fround(-.300000012);
   STACKTOP = i4;
   return;
  }
 case 369:
  {
   i105 = HEAP32[i1 + 44 >> 2] | 0;
   i89 = i1 + 60 | 0;
   i106 = HEAP32[i89 >> 2] | 0;
   i100 = i1 + 64 | 0;
   i101 = HEAP32[i100 >> 2] | 0;
   if ((i106 | 0) == (i101 | 0)) {
    i107 = i106;
    i108 = i106;
   } else {
    if ((i106 | 0) > (i105 | 0)) {
     HEAP32[i89 >> 2] = i105;
     i109 = i105;
    } else i109 = i106;
    if ((i101 | 0) > (i105 | 0)) {
     HEAP32[i100 >> 2] = i105;
     i110 = i105;
    } else i110 = i101;
    if ((i109 | 0) == (i110 | 0)) {
     HEAP32[i6 >> 2] = i109;
     i107 = i109;
     i108 = i109;
    } else {
     i107 = i109;
     i108 = i110;
    }
   }
   i110 = HEAP32[i6 >> 2] | 0;
   if ((i110 | 0) > (i105 | 0)) {
    HEAP32[i6 >> 2] = i105;
    i111 = i105;
   } else i111 = i110;
   if ((i107 | 0) == (i108 | 0)) i112 = i111; else {
    if ((i108 | 0) < (i107 | 0)) {
     HEAP32[i100 >> 2] = i107;
     HEAP32[i89 >> 2] = i108;
     i113 = i108;
    } else i113 = i107;
    HEAP32[i6 >> 2] = i113;
    HEAP32[i100 >> 2] = i113;
    HEAP8[i1 + 71 >> 0] = 0;
    i112 = i113;
   }
   L372 : do if (!(HEAP8[i7 >> 0] | 0)) {
    if ((i112 | 0) < (i105 | 0)) {
     i113 = HEAP32[i1 + 4 >> 2] | 0;
     i100 = i1 + 12 | 0;
     i107 = i112;
     while (1) {
      if ((i113 | 0) <= (i107 | 0)) break;
      if ((HEAP16[(HEAP32[i100 >> 2] | 0) + (i107 << 1) >> 1] | 0) == 10) break L372;
      i107 = i107 + 1 | 0;
      HEAP32[i6 >> 2] = i107;
      if ((i107 | 0) >= (i105 | 0)) break L372;
     }
     ___assert_fail(56841, 56850, 1236, 56909);
    }
   } else HEAP32[i6 >> 2] = i105; while (0);
   HEAP8[i1 + 71 >> 0] = 0;
   i42 = i1 + 3680 | 0;
   HEAP8[i42 >> 0] = 1;
   i43 = i1 + 3676 | 0;
   HEAPF32[i43 >> 2] = Math_fround(-.300000012);
   STACKTOP = i4;
   return;
  }
 case 391:
  {
   i105 = HEAP32[i1 + 44 >> 2] | 0;
   i112 = i1 + 60 | 0;
   i107 = HEAP32[i112 >> 2] | 0;
   i100 = i1 + 64 | 0;
   i113 = HEAP32[i100 >> 2] | 0;
   if ((i107 | 0) == (i113 | 0)) {
    i114 = i107;
    i115 = i107;
   } else {
    if ((i107 | 0) > (i105 | 0)) {
     HEAP32[i112 >> 2] = i105;
     i116 = i105;
    } else i116 = i107;
    if ((i113 | 0) > (i105 | 0)) {
     HEAP32[i100 >> 2] = i105;
     i117 = i105;
    } else i117 = i113;
    if ((i116 | 0) == (i117 | 0)) {
     HEAP32[i6 >> 2] = i116;
     i114 = i116;
     i115 = i116;
    } else {
     i114 = i116;
     i115 = i117;
    }
   }
   i117 = HEAP32[i6 >> 2] | 0;
   if ((i117 | 0) > (i105 | 0)) {
    HEAP32[i6 >> 2] = i105;
    i118 = i105;
   } else i118 = i117;
   if ((i114 | 0) == (i115 | 0)) {
    HEAP32[i100 >> 2] = i118;
    HEAP32[i112 >> 2] = i118;
    i119 = i118;
   } else {
    HEAP32[i6 >> 2] = i115;
    i119 = i115;
   }
   L401 : do if (!(HEAP8[i7 >> 0] | 0)) if ((i119 | 0) > 0) {
    if ((i119 | 0) > (HEAP32[i1 + 4 >> 2] | 0)) ___assert_fail(56841, 56850, 1236, 56909);
    i115 = HEAP32[i1 + 12 >> 2] | 0;
    i118 = i119;
    while (1) {
     i112 = i118 + -1 | 0;
     if ((HEAP16[i115 + (i112 << 1) >> 1] | 0) == 10) {
      i120 = i118;
      break L401;
     }
     HEAP32[i6 >> 2] = i112;
     if ((i118 | 0) > 1) i118 = i112; else {
      i120 = i112;
      break;
     }
    }
   } else i120 = i119; else {
    HEAP32[i6 >> 2] = 0;
    i120 = 0;
   } while (0);
   HEAP32[i100 >> 2] = i120;
   HEAP8[i1 + 71 >> 0] = 0;
   i42 = i1 + 3680 | 0;
   HEAP8[i42 >> 0] = 1;
   i43 = i1 + 3676 | 0;
   HEAPF32[i43 >> 2] = Math_fround(-.300000012);
   STACKTOP = i4;
   return;
  }
 case 453:
  {
   switch (i8 | 0) {
   case 196616:
    {
     i3 = 305;
     break L13;
     break;
    }
   case 196617:
    {
     i3 = 320;
     break L13;
     break;
    }
   case 196620:
    {
     i120 = i1 + 60 | 0;
     i100 = HEAP32[i120 >> 2] | 0;
     i119 = i1 + 64 | 0;
     i118 = HEAP32[i6 >> 2] | 0;
     if ((i100 | 0) == (HEAP32[i119 >> 2] | 0)) {
      HEAP32[i119 >> 2] = i118;
      HEAP32[i120 >> 2] = i118;
      i121 = i118;
     } else i121 = i100;
     i100 = i118 + -1 | 0;
     L524 : do if ((i118 | 0) > 1) {
      i115 = HEAP32[i1 + 4 >> 2] | 0;
      if ((i100 | 0) > (i115 | 0)) ___assert_fail(56841, 56850, 1235, 56909);
      i112 = HEAP32[i1 + 12 >> 2] | 0;
      i114 = i100;
      i117 = i118;
      L529 : while (1) {
       i105 = HEAP16[i112 + (i117 + -2 << 1) >> 1] | 0;
       L531 : do if (i105 << 16 >> 16 < 91) switch (i105 << 16 >> 16) {
       case 40:
       case 41:
       case 44:
       case 59:
       case 9:
       case 32:
        {
         i3 = 138;
         break;
        }
       default:
        {}
       } else {
        if (i105 << 16 >> 16 < 124) switch (i105 << 16 >> 16) {
        case 91:
        case 93:
        case 123:
         {
          i3 = 138;
          break L531;
          break;
         }
        default:
         break L531;
        }
        if (i105 << 16 >> 16 < 125) switch (i105 << 16 >> 16) {
        case 124:
         {
          i3 = 138;
          break L531;
          break;
         }
        default:
         break L531;
        }
        if (i105 << 16 >> 16 < 12288) switch (i105 << 16 >> 16) {
        case 125:
         {
          i3 = 138;
          break L531;
          break;
         }
        default:
         break L531;
        } else switch (i105 << 16 >> 16) {
        case 12288:
         {
          i3 = 138;
          break L531;
          break;
         }
        default:
         break L531;
        }
       } while (0);
       L543 : do if ((i3 | 0) == 138) {
        i3 = 0;
        if ((i115 | 0) < (i117 | 0)) break L529;
        i105 = HEAP16[i112 + (i114 << 1) >> 1] | 0;
        if (i105 << 16 >> 16 < 91) switch (i105 << 16 >> 16) {
        case 40:
        case 41:
        case 44:
        case 59:
        case 9:
        case 32:
         {
          break L543;
          break;
         }
        default:
         {
          i122 = i114;
          break L524;
         }
        }
        if (i105 << 16 >> 16 < 124) switch (i105 << 16 >> 16) {
        case 91:
        case 93:
        case 123:
         {
          break L543;
          break;
         }
        default:
         {
          i122 = i114;
          break L524;
         }
        }
        if (i105 << 16 >> 16 < 125) switch (i105 << 16 >> 16) {
        case 124:
         {
          break L543;
          break;
         }
        default:
         {
          i122 = i114;
          break L524;
         }
        }
        if (i105 << 16 >> 16 < 12288) switch (i105 << 16 >> 16) {
        case 125:
         {
          break L543;
          break;
         }
        default:
         {
          i122 = i114;
          break L524;
         }
        } else switch (i105 << 16 >> 16) {
        case 12288:
         {
          break L543;
          break;
         }
        default:
         {
          i122 = i114;
          break L524;
         }
        }
       } while (0);
       i105 = i114 + -1 | 0;
       if ((i114 | 0) > 1) {
        i116 = i114;
        i114 = i105;
        i117 = i116;
       } else {
        i122 = i105;
        break L524;
       }
      }
      ___assert_fail(56841, 56850, 1235, 56909);
     } else i122 = i100; while (0);
     i100 = (i122 | 0) > 0 ? i122 : 0;
     HEAP32[i6 >> 2] = i100;
     HEAP32[i119 >> 2] = i100;
     i122 = HEAP32[i1 + 44 >> 2] | 0;
     if ((i121 | 0) == (i100 | 0)) i123 = i121; else {
      if ((i121 | 0) > (i122 | 0)) {
       HEAP32[i120 >> 2] = i122;
       i124 = i122;
      } else i124 = i121;
      if ((i100 | 0) > (i122 | 0)) {
       HEAP32[i119 >> 2] = i122;
       i125 = i122;
      } else i125 = i100;
      if ((i124 | 0) == (i125 | 0)) {
       HEAP32[i6 >> 2] = i124;
       i123 = i124;
      } else i123 = i100;
     }
     if ((i123 | 0) <= (i122 | 0)) {
      i42 = i1 + 3680 | 0;
      HEAP8[i42 >> 0] = 1;
      i43 = i1 + 3676 | 0;
      HEAPF32[i43 >> 2] = Math_fround(-.300000012);
      STACKTOP = i4;
      return;
     }
     HEAP32[i6 >> 2] = i122;
     i42 = i1 + 3680 | 0;
     HEAP8[i42 >> 0] = 1;
     i43 = i1 + 3676 | 0;
     HEAPF32[i43 >> 2] = Math_fround(-.300000012);
     STACKTOP = i4;
     return;
    }
   case 196621:
    {
     i122 = i1 + 60 | 0;
     i123 = HEAP32[i122 >> 2] | 0;
     i100 = i1 + 64 | 0;
     i124 = HEAP32[i6 >> 2] | 0;
     if ((i123 | 0) == (HEAP32[i100 >> 2] | 0)) {
      HEAP32[i100 >> 2] = i124;
      HEAP32[i122 >> 2] = i124;
      i126 = i124;
     } else i126 = i123;
     i123 = HEAP32[i1 + 44 >> 2] | 0;
     i125 = i124 + 1 | 0;
     L579 : do if ((i124 | 0) > -1 & (i125 | 0) < (i123 | 0)) {
      i119 = HEAP32[i1 + 4 >> 2] | 0;
      i121 = i1 + 12 | 0;
      i120 = i125;
      i118 = i124;
      L581 : while (1) {
       if ((i119 | 0) <= (i118 | 0)) {
        i3 = 178;
        break;
       }
       i117 = HEAP32[i121 >> 2] | 0;
       i114 = HEAP16[i117 + (i118 << 1) >> 1] | 0;
       L584 : do if (i114 << 16 >> 16 < 91) switch (i114 << 16 >> 16) {
       case 40:
       case 41:
       case 44:
       case 59:
       case 9:
       case 32:
        {
         i3 = 181;
         break;
        }
       default:
        {}
       } else {
        if (i114 << 16 >> 16 < 124) switch (i114 << 16 >> 16) {
        case 91:
        case 93:
        case 123:
         {
          i3 = 181;
          break L584;
          break;
         }
        default:
         break L584;
        }
        if (i114 << 16 >> 16 < 125) switch (i114 << 16 >> 16) {
        case 124:
         {
          i3 = 181;
          break L584;
          break;
         }
        default:
         break L584;
        }
        if (i114 << 16 >> 16 < 12288) switch (i114 << 16 >> 16) {
        case 125:
         {
          i3 = 181;
          break L584;
          break;
         }
        default:
         break L584;
        } else switch (i114 << 16 >> 16) {
        case 12288:
         {
          i3 = 181;
          break L584;
          break;
         }
        default:
         break L584;
        }
       } while (0);
       L596 : do if ((i3 | 0) == 181) {
        i3 = 0;
        if ((i119 | 0) <= (i120 | 0)) {
         i3 = 182;
         break L581;
        }
        i114 = HEAP16[i117 + (i120 << 1) >> 1] | 0;
        if (i114 << 16 >> 16 < 91) switch (i114 << 16 >> 16) {
        case 40:
        case 41:
        case 44:
        case 59:
        case 9:
        case 32:
         {
          break L596;
          break;
         }
        default:
         {
          i127 = i120;
          break L579;
         }
        }
        if (i114 << 16 >> 16 < 124) switch (i114 << 16 >> 16) {
        case 91:
        case 93:
        case 123:
         {
          break L596;
          break;
         }
        default:
         {
          i127 = i120;
          break L579;
         }
        }
        if (i114 << 16 >> 16 < 125) switch (i114 << 16 >> 16) {
        case 124:
         {
          break L596;
          break;
         }
        default:
         {
          i127 = i120;
          break L579;
         }
        }
        if (i114 << 16 >> 16 < 12288) switch (i114 << 16 >> 16) {
        case 125:
         {
          break L596;
          break;
         }
        default:
         {
          i127 = i120;
          break L579;
         }
        } else switch (i114 << 16 >> 16) {
        case 12288:
         {
          break L596;
          break;
         }
        default:
         {
          i127 = i120;
          break L579;
         }
        }
       } while (0);
       i117 = i120 + 1 | 0;
       if ((i117 | 0) < (i123 | 0)) {
        i114 = i120;
        i120 = i117;
        i118 = i114;
       } else {
        i127 = i117;
        break L579;
       }
      }
      if ((i3 | 0) == 178) ___assert_fail(56841, 56850, 1235, 56909); else if ((i3 | 0) == 182) ___assert_fail(56841, 56850, 1235, 56909);
     } else i127 = i125; while (0);
     i125 = (i127 | 0) > (i123 | 0) ? i123 : i127;
     HEAP32[i6 >> 2] = i125;
     HEAP32[i100 >> 2] = i125;
     if ((i126 | 0) == (i125 | 0)) {
      i42 = i1 + 3680 | 0;
      HEAP8[i42 >> 0] = 1;
      i43 = i1 + 3676 | 0;
      HEAPF32[i43 >> 2] = Math_fround(-.300000012);
      STACKTOP = i4;
      return;
     }
     if ((i126 | 0) > (i123 | 0)) {
      HEAP32[i122 >> 2] = i123;
      i128 = i123;
     } else i128 = i126;
     if ((i128 | 0) != (i125 | 0)) {
      i42 = i1 + 3680 | 0;
      HEAP8[i42 >> 0] = 1;
      i43 = i1 + 3676 | 0;
      HEAPF32[i43 >> 2] = Math_fround(-.300000012);
      STACKTOP = i4;
      return;
     }
     HEAP32[i6 >> 2] = i125;
     i42 = i1 + 3680 | 0;
     HEAP8[i42 >> 0] = 1;
     i43 = i1 + 3676 | 0;
     HEAPF32[i43 >> 2] = Math_fround(-.300000012);
     STACKTOP = i4;
     return;
    }
   case 196614:
    {
     i125 = i1 + 60 | 0;
     i128 = i1 + 64 | 0;
     i126 = HEAP32[i128 >> 2] | 0;
     if ((HEAP32[i125 >> 2] | 0) == (i126 | 0)) {
      i123 = HEAP32[i6 >> 2] | 0;
      HEAP32[i128 >> 2] = i123;
      HEAP32[i125 >> 2] = i123;
     } else HEAP32[i6 >> 2] = i126;
     HEAP32[i128 >> 2] = 0;
     HEAP32[i6 >> 2] = 0;
     HEAP8[i1 + 71 >> 0] = 0;
     i42 = i1 + 3680 | 0;
     HEAP8[i42 >> 0] = 1;
     i43 = i1 + 3676 | 0;
     HEAPF32[i43 >> 2] = Math_fround(-.300000012);
     STACKTOP = i4;
     return;
    }
   case 196615:
    {
     i128 = i1 + 60 | 0;
     i126 = i1 + 64 | 0;
     i123 = HEAP32[i126 >> 2] | 0;
     if ((HEAP32[i128 >> 2] | 0) == (i123 | 0)) {
      i125 = HEAP32[i6 >> 2] | 0;
      HEAP32[i126 >> 2] = i125;
      HEAP32[i128 >> 2] = i125;
     } else HEAP32[i6 >> 2] = i123;
     i123 = HEAP32[i1 + 44 >> 2] | 0;
     HEAP32[i126 >> 2] = i123;
     HEAP32[i6 >> 2] = i123;
     HEAP8[i1 + 71 >> 0] = 0;
     i42 = i1 + 3680 | 0;
     HEAP8[i42 >> 0] = 1;
     i43 = i1 + 3676 | 0;
     HEAPF32[i43 >> 2] = Math_fround(-.300000012);
     STACKTOP = i4;
     return;
    }
   case 196613:
    {
     i123 = HEAP32[i1 + 44 >> 2] | 0;
     i126 = i1 + 60 | 0;
     i125 = HEAP32[i126 >> 2] | 0;
     i128 = i1 + 64 | 0;
     i122 = HEAP32[i128 >> 2] | 0;
     if ((i125 | 0) == (i122 | 0)) {
      i129 = i125;
      i130 = i125;
     } else {
      if ((i125 | 0) > (i123 | 0)) {
       HEAP32[i126 >> 2] = i123;
       i131 = i123;
      } else i131 = i125;
      if ((i122 | 0) > (i123 | 0)) {
       HEAP32[i128 >> 2] = i123;
       i132 = i123;
      } else i132 = i122;
      if ((i131 | 0) == (i132 | 0)) {
       HEAP32[i6 >> 2] = i131;
       i129 = i131;
       i130 = i131;
      } else {
       i129 = i131;
       i130 = i132;
      }
     }
     i132 = HEAP32[i6 >> 2] | 0;
     if ((i132 | 0) > (i123 | 0)) {
      HEAP32[i6 >> 2] = i123;
      i133 = i123;
     } else i133 = i132;
     if ((i129 | 0) == (i130 | 0)) {
      HEAP32[i128 >> 2] = i133;
      HEAP32[i126 >> 2] = i133;
      i134 = i133;
     } else {
      HEAP32[i6 >> 2] = i130;
      i134 = i130;
     }
     L656 : do if (!(HEAP8[i7 >> 0] | 0)) if ((i134 | 0) < (i123 | 0)) {
      i130 = HEAP32[i1 + 4 >> 2] | 0;
      i133 = i1 + 12 | 0;
      i126 = i134;
      while (1) {
       if ((i130 | 0) <= (i126 | 0)) break;
       if ((HEAP16[(HEAP32[i133 >> 2] | 0) + (i126 << 1) >> 1] | 0) == 10) {
        i135 = i126;
        break L656;
       }
       i129 = i126 + 1 | 0;
       HEAP32[i6 >> 2] = i129;
       if ((i129 | 0) < (i123 | 0)) i126 = i129; else {
        i135 = i129;
        break L656;
       }
      }
      ___assert_fail(56841, 56850, 1236, 56909);
     } else i135 = i134; else {
      HEAP32[i6 >> 2] = i123;
      i135 = i123;
     } while (0);
     HEAP32[i128 >> 2] = i135;
     HEAP8[i1 + 71 >> 0] = 0;
     i42 = i1 + 3680 | 0;
     HEAP8[i42 >> 0] = 1;
     i43 = i1 + 3676 | 0;
     HEAPF32[i43 >> 2] = Math_fround(-.300000012);
     STACKTOP = i4;
     return;
    }
   default:
    {
     i3 = 3;
     break L13;
    }
   }
   break;
  }
 case 470:
  {
   if ((i8 | 0) >= 196608) {
    switch (i8 | 0) {
    case 196608:
     break;
    case 196609:
     {
      i135 = i1 + 60 | 0;
      i128 = HEAP32[i135 >> 2] | 0;
      i123 = i1 + 64 | 0;
      i134 = HEAP32[i123 >> 2] | 0;
      if ((i128 | 0) == (i134 | 0)) {
       i126 = HEAP32[i6 >> 2] | 0;
       HEAP32[i123 >> 2] = i126;
       HEAP32[i135 >> 2] = i126;
       i136 = i126;
       i137 = i126;
      } else {
       HEAP32[i6 >> 2] = i134;
       i136 = i134;
       i137 = i128;
      }
      i128 = i136 + 1 | 0;
      HEAP32[i123 >> 2] = i128;
      i134 = HEAP32[i1 + 44 >> 2] | 0;
      if ((i137 | 0) == (i128 | 0)) {
       i138 = i136;
       i139 = i137;
      } else {
       if ((i137 | 0) > (i134 | 0)) {
        HEAP32[i135 >> 2] = i134;
        i140 = i134;
       } else i140 = i137;
       if ((i136 | 0) < (i134 | 0)) i141 = i128; else {
        HEAP32[i123 >> 2] = i134;
        i141 = i134;
       }
       if ((i140 | 0) == (i141 | 0)) {
        HEAP32[i6 >> 2] = i140;
        i138 = i140;
        i139 = i140;
       } else {
        i138 = i136;
        i139 = i141;
       }
      }
      if ((i138 | 0) > (i134 | 0)) HEAP32[i6 >> 2] = i134;
      HEAP32[i6 >> 2] = i139;
      HEAP8[i1 + 71 >> 0] = 0;
      i42 = i1 + 3680 | 0;
      HEAP8[i42 >> 0] = 1;
      i43 = i1 + 3676 | 0;
      HEAPF32[i43 >> 2] = Math_fround(-.300000012);
      STACKTOP = i4;
      return;
     }
    default:
     {
      i3 = 3;
      break L13;
     }
    }
    i139 = HEAP32[i1 + 44 >> 2] | 0;
    i134 = i1 + 60 | 0;
    i138 = HEAP32[i134 >> 2] | 0;
    i141 = i1 + 64 | 0;
    i136 = HEAP32[i141 >> 2] | 0;
    if ((i138 | 0) == (i136 | 0)) {
     i142 = i138;
     i143 = i138;
    } else {
     if ((i138 | 0) > (i139 | 0)) {
      HEAP32[i134 >> 2] = i139;
      i144 = i139;
     } else i144 = i138;
     if ((i136 | 0) > (i139 | 0)) {
      HEAP32[i141 >> 2] = i139;
      i145 = i139;
     } else i145 = i136;
     if ((i144 | 0) == (i145 | 0)) {
      HEAP32[i6 >> 2] = i144;
      i142 = i144;
      i143 = i144;
     } else {
      i142 = i144;
      i143 = i145;
     }
    }
    i145 = HEAP32[i6 >> 2] | 0;
    if ((i145 | 0) > (i139 | 0)) {
     HEAP32[i6 >> 2] = i139;
     i146 = i139;
    } else i146 = i145;
    if ((i142 | 0) == (i143 | 0)) {
     HEAP32[i141 >> 2] = i146;
     HEAP32[i134 >> 2] = i146;
     i147 = i146;
    } else {
     HEAP32[i6 >> 2] = i143;
     i147 = i143;
    }
    i143 = i147 + -1 | 0;
    if ((i147 | 0) > 0) {
     HEAP32[i141 >> 2] = i143;
     i148 = i143;
    } else i148 = i147;
    HEAP32[i6 >> 2] = i148;
    HEAP8[i1 + 71 >> 0] = 0;
    i42 = i1 + 3680 | 0;
    HEAP8[i42 >> 0] = 1;
    i43 = i1 + 3676 | 0;
    HEAPF32[i43 >> 2] = Math_fround(-.300000012);
    STACKTOP = i4;
    return;
   }
   switch (i8 | 0) {
   case 65549:
    break;
   default:
    {
     i3 = 3;
     break L13;
    }
   }
   i148 = i1 + 60 | 0;
   i147 = HEAP32[i148 >> 2] | 0;
   i143 = i1 + 64 | 0;
   i141 = HEAP32[i143 >> 2] | 0;
   if ((i147 | 0) != (i141 | 0)) {
    if ((i141 | 0) < (i147 | 0)) {
     HEAP32[i143 >> 2] = i147;
     HEAP32[i148 >> 2] = i141;
     i149 = i141;
     i150 = i147;
    } else {
     i149 = i147;
     i150 = i141;
    }
    i141 = HEAP32[i1 + 44 >> 2] | 0;
    if ((i149 | 0) == (i150 | 0)) i151 = i150; else {
     if ((i149 | 0) > (i141 | 0)) {
      HEAP32[i148 >> 2] = i141;
      i152 = i141;
     } else i152 = i149;
     if ((i150 | 0) > (i141 | 0)) {
      HEAP32[i143 >> 2] = i141;
      i153 = i141;
     } else i153 = i150;
     if ((i152 | 0) == (i153 | 0)) {
      HEAP32[i6 >> 2] = i152;
      i151 = i152;
     } else i151 = i153;
    }
    if ((HEAP32[i6 >> 2] | 0) > (i141 | 0)) HEAP32[i6 >> 2] = i141;
    HEAP32[i6 >> 2] = i151;
    HEAP32[i148 >> 2] = i151;
    HEAP8[i1 + 71 >> 0] = 0;
    i42 = i1 + 3680 | 0;
    HEAP8[i42 >> 0] = 1;
    i43 = i1 + 3676 | 0;
    HEAPF32[i43 >> 2] = Math_fround(-.300000012);
    STACKTOP = i4;
    return;
   }
   i151 = HEAP32[i6 >> 2] | 0;
   i148 = HEAP32[i1 + 44 >> 2] | 0;
   i141 = i151 + 1 | 0;
   L480 : do if ((i151 | 0) > -1 & (i141 | 0) < (i148 | 0)) {
    i153 = HEAP32[i1 + 4 >> 2] | 0;
    i152 = i1 + 12 | 0;
    i150 = i141;
    i143 = i151;
    L482 : while (1) {
     if ((i153 | 0) <= (i143 | 0)) {
      i3 = 166;
      break;
     }
     i149 = HEAP32[i152 >> 2] | 0;
     i147 = HEAP16[i149 + (i143 << 1) >> 1] | 0;
     L485 : do if (i147 << 16 >> 16 < 91) switch (i147 << 16 >> 16) {
     case 40:
     case 41:
     case 44:
     case 59:
     case 9:
     case 32:
      {
       i3 = 169;
       break;
      }
     default:
      {}
     } else {
      if (i147 << 16 >> 16 < 124) switch (i147 << 16 >> 16) {
      case 91:
      case 93:
      case 123:
       {
        i3 = 169;
        break L485;
        break;
       }
      default:
       break L485;
      }
      if (i147 << 16 >> 16 < 125) switch (i147 << 16 >> 16) {
      case 124:
       {
        i3 = 169;
        break L485;
        break;
       }
      default:
       break L485;
      }
      if (i147 << 16 >> 16 < 12288) switch (i147 << 16 >> 16) {
      case 125:
       {
        i3 = 169;
        break L485;
        break;
       }
      default:
       break L485;
      } else switch (i147 << 16 >> 16) {
      case 12288:
       {
        i3 = 169;
        break L485;
        break;
       }
      default:
       break L485;
      }
     } while (0);
     L497 : do if ((i3 | 0) == 169) {
      i3 = 0;
      if ((i153 | 0) <= (i150 | 0)) {
       i3 = 170;
       break L482;
      }
      i147 = HEAP16[i149 + (i150 << 1) >> 1] | 0;
      if (i147 << 16 >> 16 < 91) switch (i147 << 16 >> 16) {
      case 40:
      case 41:
      case 44:
      case 59:
      case 9:
      case 32:
       {
        break L497;
        break;
       }
      default:
       {
        i154 = i150;
        break L480;
       }
      }
      if (i147 << 16 >> 16 < 124) switch (i147 << 16 >> 16) {
      case 91:
      case 93:
      case 123:
       {
        break L497;
        break;
       }
      default:
       {
        i154 = i150;
        break L480;
       }
      }
      if (i147 << 16 >> 16 < 125) switch (i147 << 16 >> 16) {
      case 124:
       {
        break L497;
        break;
       }
      default:
       {
        i154 = i150;
        break L480;
       }
      }
      if (i147 << 16 >> 16 < 12288) switch (i147 << 16 >> 16) {
      case 125:
       {
        break L497;
        break;
       }
      default:
       {
        i154 = i150;
        break L480;
       }
      } else switch (i147 << 16 >> 16) {
      case 12288:
       {
        break L497;
        break;
       }
      default:
       {
        i154 = i150;
        break L480;
       }
      }
     } while (0);
     i149 = i150 + 1 | 0;
     if ((i149 | 0) < (i148 | 0)) {
      i147 = i150;
      i150 = i149;
      i143 = i147;
     } else {
      i154 = i149;
      break L480;
     }
    }
    if ((i3 | 0) == 166) ___assert_fail(56841, 56850, 1235, 56909); else if ((i3 | 0) == 170) ___assert_fail(56841, 56850, 1235, 56909);
   } else i154 = i141; while (0);
   HEAP32[i6 >> 2] = (i154 | 0) > (i148 | 0) ? i148 : i154;
   i42 = i1 + 3680 | 0;
   HEAP8[i42 >> 0] = 1;
   i43 = i1 + 3676 | 0;
   HEAPF32[i43 >> 2] = Math_fround(-.300000012);
   STACKTOP = i4;
   return;
  }
 }
 if ((i3 | 0) == 3) {
  i154 = (i8 | 0) > 65535 ? 0 : i8;
  if ((i154 | 0) <= 0) {
   i42 = i1 + 3680 | 0;
   HEAP8[i42 >> 0] = 1;
   i43 = i1 + 3676 | 0;
   HEAPF32[i43 >> 2] = Math_fround(-.300000012);
   STACKTOP = i4;
   return;
  }
  HEAP16[i5 >> 1] = i154;
  if ((i154 | 0) == 10) if (HEAP8[i7 >> 0] | 0) {
   i42 = i1 + 3680 | 0;
   HEAP8[i42 >> 0] = 1;
   i43 = i1 + 3676 | 0;
   HEAPF32[i43 >> 2] = Math_fround(-.300000012);
   STACKTOP = i4;
   return;
  }
  if (!(HEAP8[i1 + 68 >> 0] | 0)) i3 = 21; else if ((HEAP32[i1 + 60 >> 2] | 0) == (HEAP32[i1 + 64 >> 2] | 0)) {
   i7 = HEAP32[i6 >> 2] | 0;
   i154 = i1 + 44 | 0;
   if ((i7 | 0) < (HEAP32[i154 >> 2] | 0)) {
    i8 = __ZN8ImGuiStbL19stb_text_createundoEPNS_12StbUndoStateEiii(i1 + 80 | 0, i7, 1, 1) | 0;
    do if (!i8) i155 = HEAP32[i1 + 12 >> 2] | 0; else if ((HEAP32[i1 + 4 >> 2] | 0) > (i7 | 0)) {
     i148 = HEAP32[i1 + 12 >> 2] | 0;
     HEAP16[i8 >> 1] = HEAP16[i148 + (i7 << 1) >> 1] | 0;
     i155 = i148;
     break;
    } else ___assert_fail(56841, 56850, 1236, 56909); while (0);
    i7 = HEAP32[i6 >> 2] | 0;
    i8 = i155 + (i7 << 1) | 0;
    i155 = i8 + 2 | 0;
    i148 = 0;
    i141 = i8;
    while (1) {
     i151 = HEAP16[i141 >> 1] | 0;
     if (!(i151 << 16 >> 16)) {
      i156 = i148;
      break;
     }
     i143 = i151 & -1024;
     i150 = i143 << 16 >> 16 | 0;
     i143 = ((i151 & 65535) < 128 ? 1 : (i151 & 65535) < 2048 ? 2 : (i150 | 0) == -9216 ? 0 : (i150 | 0) == -10240 ? 4 : 3) + i148 | 0;
     if (i141 >>> 0 < i8 >>> 0) {
      i148 = i143;
      i141 = i141 + 2 | 0;
     } else {
      i156 = i143;
      break;
     }
    }
    i141 = i1 + 40 | 0;
    HEAP32[i141 >> 2] = (HEAP32[i141 >> 2] | 0) - i156;
    HEAP32[i154 >> 2] = (HEAP32[i154 >> 2] | 0) + -1;
    i154 = HEAP16[i155 >> 1] | 0;
    if (!(i154 << 16 >> 16)) i157 = i8; else {
     i156 = i8;
     i8 = i155;
     i155 = i154;
     while (1) {
      i8 = i8 + 2 | 0;
      i154 = i156 + 2 | 0;
      HEAP16[i156 >> 1] = i155;
      i155 = HEAP16[i8 >> 1] | 0;
      if (!(i155 << 16 >> 16)) {
       i157 = i154;
       break;
      } else i156 = i154;
     }
    }
    HEAP16[i157 >> 1] = 0;
    if (__ZN8ImGuiStbL24STB_TEXTEDIT_INSERTCHARSEP18ImGuiTextEditStateiPKti(i1, i7, i5, 1) | 0) {
     HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
     HEAP8[i1 + 71 >> 0] = 0;
    }
   } else i3 = 21;
  } else i3 = 21;
  if ((i3 | 0) == 21) {
   __ZN8ImGuiStbL29stb_textedit_delete_selectionEP18ImGuiTextEditStatePNS_17STB_TexteditStateE(i1, i6);
   if (__ZN8ImGuiStbL24STB_TEXTEDIT_INSERTCHARSEP18ImGuiTextEditStateiPKti(i1, HEAP32[i6 >> 2] | 0, i5, 1) | 0) {
    __ZN8ImGuiStbL19stb_text_createundoEPNS_12StbUndoStateEiii(i1 + 80 | 0, HEAP32[i6 >> 2] | 0, 0, 1) | 0;
    HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
    HEAP8[i1 + 71 >> 0] = 0;
   }
  }
  i42 = i1 + 3680 | 0;
  HEAP8[i42 >> 0] = 1;
  i43 = i1 + 3676 | 0;
  HEAPF32[i43 >> 2] = Math_fround(-.300000012);
  STACKTOP = i4;
  return;
 } else if ((i3 | 0) == 305) {
  if ((HEAP32[i1 + 60 >> 2] | 0) == (HEAP32[i1 + 64 >> 2] | 0)) {
   i5 = i1 + 44 | 0;
   i7 = HEAP32[i6 >> 2] | 0;
   if ((i7 | 0) < (HEAP32[i5 >> 2] | 0)) {
    i157 = __ZN8ImGuiStbL19stb_text_createundoEPNS_12StbUndoStateEiii(i1 + 80 | 0, i7, 1, 0) | 0;
    do if (!i157) i158 = HEAP32[i1 + 12 >> 2] | 0; else if ((HEAP32[i1 + 4 >> 2] | 0) > (i7 | 0)) {
     i156 = HEAP32[i1 + 12 >> 2] | 0;
     HEAP16[i157 >> 1] = HEAP16[i156 + (i7 << 1) >> 1] | 0;
     i158 = i156;
     break;
    } else ___assert_fail(56841, 56850, 1236, 56909); while (0);
    i157 = i158 + (i7 << 1) | 0;
    i7 = i157 + 2 | 0;
    i158 = 0;
    i156 = i157;
    while (1) {
     i155 = HEAP16[i156 >> 1] | 0;
     if (!(i155 << 16 >> 16)) {
      i159 = i158;
      break;
     }
     i8 = i155 & -1024;
     i154 = i8 << 16 >> 16 | 0;
     i8 = ((i155 & 65535) < 128 ? 1 : (i155 & 65535) < 2048 ? 2 : (i154 | 0) == -9216 ? 0 : (i154 | 0) == -10240 ? 4 : 3) + i158 | 0;
     if (i156 >>> 0 < i157 >>> 0) {
      i158 = i8;
      i156 = i156 + 2 | 0;
     } else {
      i159 = i8;
      break;
     }
    }
    i156 = i1 + 40 | 0;
    HEAP32[i156 >> 2] = (HEAP32[i156 >> 2] | 0) - i159;
    HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + -1;
    i5 = HEAP16[i7 >> 1] | 0;
    if (!(i5 << 16 >> 16)) i160 = i157; else {
     i159 = i157;
     i157 = i7;
     i7 = i5;
     while (1) {
      i157 = i157 + 2 | 0;
      i5 = i159 + 2 | 0;
      HEAP16[i159 >> 1] = i7;
      i7 = HEAP16[i157 >> 1] | 0;
      if (!(i7 << 16 >> 16)) {
       i160 = i5;
       break;
      } else i159 = i5;
     }
    }
    HEAP16[i160 >> 1] = 0;
    HEAP8[i1 + 71 >> 0] = 0;
   }
  } else __ZN8ImGuiStbL29stb_textedit_delete_selectionEP18ImGuiTextEditStatePNS_17STB_TexteditStateE(i1, i6);
  HEAP8[i1 + 71 >> 0] = 0;
  i42 = i1 + 3680 | 0;
  HEAP8[i42 >> 0] = 1;
  i43 = i1 + 3676 | 0;
  HEAPF32[i43 >> 2] = Math_fround(-.300000012);
  STACKTOP = i4;
  return;
 } else if ((i3 | 0) == 320) {
  if ((HEAP32[i1 + 60 >> 2] | 0) == (HEAP32[i1 + 64 >> 2] | 0)) {
   i3 = i1 + 44 | 0;
   i160 = HEAP32[i3 >> 2] | 0;
   i159 = HEAP32[i6 >> 2] | 0;
   if ((i159 | 0) > (i160 | 0)) {
    HEAP32[i6 >> 2] = i160;
    i161 = i160;
   } else i161 = i159;
   if ((i161 | 0) > 0) {
    i159 = i161 + -1 | 0;
    i160 = __ZN8ImGuiStbL19stb_text_createundoEPNS_12StbUndoStateEiii(i1 + 80 | 0, i159, 1, 0) | 0;
    do if (!i160) i162 = HEAP32[i1 + 12 >> 2] | 0; else if ((HEAP32[i1 + 4 >> 2] | 0) < (i161 | 0)) ___assert_fail(56841, 56850, 1236, 56909); else {
     i7 = HEAP32[i1 + 12 >> 2] | 0;
     HEAP16[i160 >> 1] = HEAP16[i7 + (i159 << 1) >> 1] | 0;
     i162 = i7;
     break;
    } while (0);
    i160 = i162 + (i159 << 1) | 0;
    i159 = i162 + (i161 << 1) | 0;
    i161 = 0;
    i162 = i160;
    while (1) {
     i7 = HEAP16[i162 >> 1] | 0;
     if (!(i7 << 16 >> 16)) {
      i163 = i161;
      break;
     }
     i162 = i162 + 2 | 0;
     i157 = i7 & -1024;
     i5 = i157 << 16 >> 16 | 0;
     i157 = ((i7 & 65535) < 128 ? 1 : (i7 & 65535) < 2048 ? 2 : (i5 | 0) == -9216 ? 0 : (i5 | 0) == -10240 ? 4 : 3) + i161 | 0;
     if (i162 >>> 0 >= i159 >>> 0) {
      i163 = i157;
      break;
     } else i161 = i157;
    }
    i161 = i1 + 40 | 0;
    HEAP32[i161 >> 2] = (HEAP32[i161 >> 2] | 0) - i163;
    HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + -1;
    i3 = HEAP16[i159 >> 1] | 0;
    if (!(i3 << 16 >> 16)) i164 = i160; else {
     i163 = i160;
     i160 = i159;
     i159 = i3;
     while (1) {
      i160 = i160 + 2 | 0;
      i3 = i163 + 2 | 0;
      HEAP16[i163 >> 1] = i159;
      i159 = HEAP16[i160 >> 1] | 0;
      if (!(i159 << 16 >> 16)) {
       i164 = i3;
       break;
      } else i163 = i3;
     }
    }
    HEAP16[i164 >> 1] = 0;
    HEAP8[i1 + 71 >> 0] = 0;
    HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + -1;
   }
  } else __ZN8ImGuiStbL29stb_textedit_delete_selectionEP18ImGuiTextEditStatePNS_17STB_TexteditStateE(i1, i6);
  HEAP8[i1 + 71 >> 0] = 0;
  i42 = i1 + 3680 | 0;
  HEAP8[i42 >> 0] = 1;
  i43 = i1 + 3676 | 0;
  HEAPF32[i43 >> 2] = Math_fround(-.300000012);
  STACKTOP = i4;
  return;
 }
}

function __ZN11MeshManager4loadEPiS0_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4;
 i6 = i1 + 12 | 0;
 i7 = i1 + 16 | 0;
 i8 = HEAP32[i7 >> 2] | 0;
 i9 = HEAP32[i6 >> 2] | 0;
 i10 = i8 - i9 >> 2;
 HEAP32[i2 >> 2] = i10;
 i2 = i1 + 24 | 0;
 i11 = i1 + 28 | 0;
 i12 = HEAP32[i11 >> 2] | 0;
 i13 = HEAP32[i2 >> 2] | 0;
 i14 = i12 - i13 >> 2;
 HEAP32[i3 >> 2] = i14;
 if (i10 >>> 0 < i14 >>> 0) {
  i14 = __Znwj(152) | 0;
  __ZN4MeshC2Ev(i14);
  HEAP32[i5 >> 2] = i14;
  __ZN4Mesh8load_objEPKc(i14, HEAP32[(HEAP32[i2 >> 2] | 0) + (i10 << 2) >> 2] | 0);
  __ZN4Mesh10upload_objEv(i14);
  i3 = i1 + 36 | 0;
  if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + (i10 << 2) >> 2] | 0)) i15 = i14; else {
   i14 = __Znwj(4) | 0;
   __ZN7TextureC2Ev(i14);
   i16 = HEAP32[i5 >> 2] | 0;
   HEAP32[i16 + 144 >> 2] = i14;
   __ZN7Texture7loadPngEPKc(i14, HEAP32[(HEAP32[i3 >> 2] | 0) + (i10 << 2) >> 2] | 0);
   i15 = i16;
  }
  i16 = HEAP32[i7 >> 2] | 0;
  if ((i16 | 0) == (HEAP32[i1 + 20 >> 2] | 0)) {
   __ZNSt3__26vectorIP4MeshNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(i6, i5);
   i17 = HEAP32[i7 >> 2] | 0;
  } else {
   HEAP32[i16 >> 2] = i15;
   i15 = (HEAP32[i7 >> 2] | 0) + 4 | 0;
   HEAP32[i7 >> 2] = i15;
   i17 = i15;
  }
  i18 = HEAP32[i6 >> 2] | 0;
  i19 = i17;
  i20 = HEAP32[i2 >> 2] | 0;
  i21 = HEAP32[i11 >> 2] | 0;
 } else {
  i18 = i9;
  i19 = i8;
  i20 = i13;
  i21 = i12;
 }
 if ((i19 - i18 | 0) >>> 0 < (i21 - i20 | 0) >>> 0) {
  STACKTOP = i4;
  return;
 }
 i20 = __Znwj(152) | 0;
 __ZN4MeshC2Ev(i20);
 HEAP32[i5 >> 2] = i20;
 __ZN4Mesh8load_objEPKc(i20, 29016);
 __ZN4Mesh10upload_objEv(HEAP32[i5 >> 2] | 0);
 i20 = HEAP32[i7 >> 2] | 0;
 if ((i20 | 0) == (HEAP32[i1 + 20 >> 2] | 0)) __ZNSt3__26vectorIP4MeshNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(i6, i5); else {
  HEAP32[i20 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 4;
 }
 if (!(HEAP8[73448] | 0)) if (___cxa_guard_acquire(73448) | 0) {
  HEAP32[1460546] = 0;
  HEAP32[1460547] = 0;
  HEAP32[1460548] = 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.200000003);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.200000003);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.200000003);
 i7 = HEAP32[1460547] | 0;
 if (i7 >>> 0 < (HEAP32[1460548] | 0) >>> 0) {
  HEAP32[i7 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i7 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i7 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i7 = (HEAP32[1460547] | 0) + 12 | 0;
  HEAP32[1460547] = i7;
  i22 = i7;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842184, i5);
  i22 = HEAP32[1460547] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.5);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.5);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.5);
 if (i22 >>> 0 < (HEAP32[1460548] | 0) >>> 0) {
  HEAP32[i22 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i22 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i22 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  HEAP32[1460547] = (HEAP32[1460547] | 0) + 12;
 } else __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842184, i5);
 i22 = HEAP32[i6 >> 2] | 0;
 HEAP32[(HEAP32[i22 + 12 >> 2] | 0) + 148 >> 2] = 5842184;
 HEAP32[(HEAP32[i22 + 16 >> 2] | 0) + 148 >> 2] = 5842184;
 HEAP32[(HEAP32[i22 + 20 >> 2] | 0) + 148 >> 2] = 5842184;
 HEAP32[(HEAP32[i22 + 24 >> 2] | 0) + 148 >> 2] = 5842184;
 if (!(HEAP8[73456] | 0)) if (___cxa_guard_acquire(73456) | 0) {
  HEAP32[1460549] = 0;
  HEAP32[1460550] = 0;
  HEAP32[1460551] = 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.200000003);
 HEAPF32[i5 + 4 >> 2] = Math_fround(1.0);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.200000003);
 i22 = HEAP32[1460550] | 0;
 if (i22 >>> 0 < (HEAP32[1460551] | 0) >>> 0) {
  HEAP32[i22 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i22 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i22 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  HEAP32[1460550] = (HEAP32[1460550] | 0) + 12;
 } else __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842196, i5);
 HEAP32[(HEAP32[(HEAP32[i6 >> 2] | 0) + 28 >> 2] | 0) + 148 >> 2] = 5842196;
 if (!(HEAP8[73464] | 0)) if (___cxa_guard_acquire(73464) | 0) {
  HEAP32[1460552] = 0;
  HEAP32[1460553] = 0;
  HEAP32[1460554] = 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.200000003);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.200000003);
 HEAPF32[i5 + 8 >> 2] = Math_fround(1.0);
 i22 = HEAP32[1460553] | 0;
 if (i22 >>> 0 < (HEAP32[1460554] | 0) >>> 0) {
  HEAP32[i22 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i22 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i22 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  HEAP32[1460553] = (HEAP32[1460553] | 0) + 12;
 } else __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842208, i5);
 HEAP32[(HEAP32[(HEAP32[i6 >> 2] | 0) + 32 >> 2] | 0) + 148 >> 2] = 5842208;
 if (!(HEAP8[73472] | 0)) if (___cxa_guard_acquire(73472) | 0) {
  HEAP32[1460555] = 0;
  HEAP32[1460556] = 0;
  HEAP32[1460557] = 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.549019635);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.368627459);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.298039228);
 i22 = HEAP32[1460556] | 0;
 if (i22 >>> 0 < (HEAP32[1460557] | 0) >>> 0) {
  HEAP32[i22 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i22 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i22 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i22 = (HEAP32[1460556] | 0) + 12 | 0;
  HEAP32[1460556] = i22;
  i23 = i22;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842220, i5);
  i23 = HEAP32[1460556] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.847058832);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.819607853);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.615686297);
 if (i23 >>> 0 < (HEAP32[1460557] | 0) >>> 0) {
  HEAP32[i23 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i23 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i23 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i23 = (HEAP32[1460556] | 0) + 12 | 0;
  HEAP32[1460556] = i23;
  i24 = i23;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842220, i5);
  i24 = HEAP32[1460556] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.486274511);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.294117659);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.239215687);
 if (i24 >>> 0 < (HEAP32[1460557] | 0) >>> 0) {
  HEAP32[i24 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i24 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i24 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i24 = (HEAP32[1460556] | 0) + 12 | 0;
  HEAP32[1460556] = i24;
  i25 = i24;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842220, i5);
  i25 = HEAP32[1460556] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.847058832);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.819607853);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.615686297);
 if (i25 >>> 0 < (HEAP32[1460557] | 0) >>> 0) {
  HEAP32[i25 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i25 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i25 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  HEAP32[1460556] = (HEAP32[1460556] | 0) + 12;
 } else __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842220, i5);
 i25 = HEAP32[i6 >> 2] | 0;
 HEAP32[(HEAP32[i25 + 52 >> 2] | 0) + 148 >> 2] = 5842220;
 HEAP32[(HEAP32[i25 + 56 >> 2] | 0) + 148 >> 2] = 5842220;
 HEAP32[(HEAP32[i25 + 60 >> 2] | 0) + 148 >> 2] = 5842220;
 HEAP32[(HEAP32[i25 + 64 >> 2] | 0) + 148 >> 2] = 5842220;
 HEAP32[(HEAP32[i25 + 68 >> 2] | 0) + 148 >> 2] = 5842220;
 if (!(HEAP8[73480] | 0)) if (___cxa_guard_acquire(73480) | 0) {
  HEAP32[1460558] = 0;
  HEAP32[1460559] = 0;
  HEAP32[1460560] = 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.733333349);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.494117647);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.400000006);
 i25 = HEAP32[1460559] | 0;
 if (i25 >>> 0 < (HEAP32[1460560] | 0) >>> 0) {
  HEAP32[i25 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i25 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i25 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i25 = (HEAP32[1460559] | 0) + 12 | 0;
  HEAP32[1460559] = i25;
  i26 = i25;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842232, i5);
  i26 = HEAP32[1460559] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.847058832);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.819607853);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.615686297);
 if (i26 >>> 0 < (HEAP32[1460560] | 0) >>> 0) {
  HEAP32[i26 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i26 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i26 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i26 = (HEAP32[1460559] | 0) + 12 | 0;
  HEAP32[1460559] = i26;
  i27 = i26;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842232, i5);
  i27 = HEAP32[1460559] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.549019635);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.368627459);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.298039228);
 if (i27 >>> 0 < (HEAP32[1460560] | 0) >>> 0) {
  HEAP32[i27 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i27 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i27 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  HEAP32[1460559] = (HEAP32[1460559] | 0) + 12;
 } else __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842232, i5);
 i27 = HEAP32[i6 >> 2] | 0;
 HEAP32[(HEAP32[i27 + 88 >> 2] | 0) + 148 >> 2] = 5842232;
 HEAP32[(HEAP32[i27 + 92 >> 2] | 0) + 148 >> 2] = 5842232;
 do if (!(HEAP8[73488] | 0)) {
  if (!(___cxa_guard_acquire(73488) | 0)) break;
  HEAP32[1460561] = 0;
  HEAP32[1460562] = 0;
  HEAP32[1460563] = 0;
 } while (0);
 HEAPF32[i5 >> 2] = Math_fround(.847058832);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.819607853);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.615686297);
 i27 = HEAP32[1460562] | 0;
 if (i27 >>> 0 < (HEAP32[1460563] | 0) >>> 0) {
  HEAP32[i27 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i27 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i27 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  HEAP32[1460562] = (HEAP32[1460562] | 0) + 12;
 } else __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842244, i5);
 do if (!(HEAP8[73496] | 0)) {
  if (!(___cxa_guard_acquire(73496) | 0)) break;
  HEAP32[1460564] = 0;
  HEAP32[1460565] = 0;
  HEAP32[1460566] = 0;
 } while (0);
 HEAPF32[i5 >> 2] = Math_fround(.549019635);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.368627459);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.298039228);
 i27 = HEAP32[1460565] | 0;
 if (i27 >>> 0 < (HEAP32[1460566] | 0) >>> 0) {
  HEAP32[i27 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i27 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i27 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  HEAP32[1460565] = (HEAP32[1460565] | 0) + 12;
 } else __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842256, i5);
 i27 = HEAP32[i6 >> 2] | 0;
 HEAP32[(HEAP32[i27 + 96 >> 2] | 0) + 148 >> 2] = 5842256;
 HEAP32[(HEAP32[i27 + 100 >> 2] | 0) + 148 >> 2] = 5842244;
 do if (!(HEAP8[73504] | 0)) {
  if (!(___cxa_guard_acquire(73504) | 0)) break;
  HEAP32[1460567] = 0;
  HEAP32[1460568] = 0;
  HEAP32[1460569] = 0;
 } while (0);
 HEAPF32[i5 >> 2] = Math_fround(1.0);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.427450985);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.615686297);
 i27 = HEAP32[1460568] | 0;
 if (i27 >>> 0 < (HEAP32[1460569] | 0) >>> 0) {
  HEAP32[i27 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i27 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i27 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i27 = (HEAP32[1460568] | 0) + 12 | 0;
  HEAP32[1460568] = i27;
  i28 = i27;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842268, i5);
  i28 = HEAP32[1460568] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.454901963);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.615686297);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.615686297);
 if (i28 >>> 0 < (HEAP32[1460569] | 0) >>> 0) {
  HEAP32[i28 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i28 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i28 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i28 = (HEAP32[1460568] | 0) + 12 | 0;
  HEAP32[1460568] = i28;
  i29 = i28;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842268, i5);
  i29 = HEAP32[1460568] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(1.0);
 HEAPF32[i5 + 4 >> 2] = Math_fround(1.0);
 HEAPF32[i5 + 8 >> 2] = Math_fround(1.0);
 if (i29 >>> 0 < (HEAP32[1460569] | 0) >>> 0) {
  HEAP32[i29 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i29 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i29 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i29 = (HEAP32[1460568] | 0) + 12 | 0;
  HEAP32[1460568] = i29;
  i30 = i29;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842268, i5);
  i30 = HEAP32[1460568] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.0941176488);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.294117659);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.984313726);
 if (i30 >>> 0 < (HEAP32[1460569] | 0) >>> 0) {
  HEAP32[i30 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i30 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i30 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  HEAP32[1460568] = (HEAP32[1460568] | 0) + 12;
 } else __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842268, i5);
 do if (!(HEAP8[73512] | 0)) {
  if (!(___cxa_guard_acquire(73512) | 0)) break;
  HEAP32[1460570] = 0;
  HEAP32[1460571] = 0;
  HEAP32[1460572] = 0;
 } while (0);
 HEAPF32[i5 >> 2] = Math_fround(.886274516);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.905882358);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.866666674);
 i30 = HEAP32[1460571] | 0;
 if (i30 >>> 0 < (HEAP32[1460572] | 0) >>> 0) {
  HEAP32[i30 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i30 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i30 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i30 = (HEAP32[1460571] | 0) + 12 | 0;
  HEAP32[1460571] = i30;
  i31 = i30;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842280, i5);
  i31 = HEAP32[1460571] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.454901963);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.615686297);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.615686297);
 if (i31 >>> 0 < (HEAP32[1460572] | 0) >>> 0) {
  HEAP32[i31 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i31 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i31 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i31 = (HEAP32[1460571] | 0) + 12 | 0;
  HEAP32[1460571] = i31;
  i32 = i31;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842280, i5);
  i32 = HEAP32[1460571] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(1.0);
 HEAPF32[i5 + 4 >> 2] = Math_fround(1.0);
 HEAPF32[i5 + 8 >> 2] = Math_fround(1.0);
 if (i32 >>> 0 < (HEAP32[1460572] | 0) >>> 0) {
  HEAP32[i32 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i32 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i32 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i32 = (HEAP32[1460571] | 0) + 12 | 0;
  HEAP32[1460571] = i32;
  i33 = i32;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842280, i5);
  i33 = HEAP32[1460571] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.0941176488);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.294117659);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.984313726);
 if (i33 >>> 0 < (HEAP32[1460572] | 0) >>> 0) {
  HEAP32[i33 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i33 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i33 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  HEAP32[1460571] = (HEAP32[1460571] | 0) + 12;
 } else __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842280, i5);
 do if (!(HEAP8[73520] | 0)) {
  if (!(___cxa_guard_acquire(73520) | 0)) break;
  HEAP32[1460573] = 0;
  HEAP32[1460574] = 0;
  HEAP32[1460575] = 0;
 } while (0);
 HEAPF32[i5 >> 2] = Math_fround(.690196096);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.43921569);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.411764711);
 i33 = HEAP32[1460574] | 0;
 if (i33 >>> 0 < (HEAP32[1460575] | 0) >>> 0) {
  HEAP32[i33 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i33 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i33 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i33 = (HEAP32[1460574] | 0) + 12 | 0;
  HEAP32[1460574] = i33;
  i34 = i33;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842292, i5);
  i34 = HEAP32[1460574] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.631372571);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.301960796);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.227450982);
 if (i34 >>> 0 < (HEAP32[1460575] | 0) >>> 0) {
  HEAP32[i34 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i34 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i34 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i34 = (HEAP32[1460574] | 0) + 12 | 0;
  HEAP32[1460574] = i34;
  i35 = i34;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842292, i5);
  i35 = HEAP32[1460574] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.768627464);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.541176498);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.411764711);
 if (i35 >>> 0 < (HEAP32[1460575] | 0) >>> 0) {
  HEAP32[i35 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i35 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i35 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i35 = (HEAP32[1460574] | 0) + 12 | 0;
  HEAP32[1460574] = i35;
  i36 = i35;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842292, i5);
  i36 = HEAP32[1460574] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.827450991);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.513725519);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.466666669);
 if (i36 >>> 0 < (HEAP32[1460575] | 0) >>> 0) {
  HEAP32[i36 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i36 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i36 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i36 = (HEAP32[1460574] | 0) + 12 | 0;
  HEAP32[1460574] = i36;
  i37 = i36;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842292, i5);
  i37 = HEAP32[1460574] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.937254905);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.937254905);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.909803926);
 if (i37 >>> 0 < (HEAP32[1460575] | 0) >>> 0) {
  HEAP32[i37 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i37 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i37 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i37 = (HEAP32[1460574] | 0) + 12 | 0;
  HEAP32[1460574] = i37;
  i38 = i37;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842292, i5);
  i38 = HEAP32[1460574] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.878431379);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.835294127);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.776470601);
 if (i38 >>> 0 < (HEAP32[1460575] | 0) >>> 0) {
  HEAP32[i38 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i38 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i38 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i38 = (HEAP32[1460574] | 0) + 12 | 0;
  HEAP32[1460574] = i38;
  i39 = i38;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842292, i5);
  i39 = HEAP32[1460574] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.937254905);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.921568632);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.905882358);
 if (i39 >>> 0 < (HEAP32[1460575] | 0) >>> 0) {
  HEAP32[i39 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i39 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i39 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i39 = (HEAP32[1460574] | 0) + 12 | 0;
  HEAP32[1460574] = i39;
  i40 = i39;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842292, i5);
  i40 = HEAP32[1460574] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.858823538);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.835294127);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.819607853);
 if (i40 >>> 0 < (HEAP32[1460575] | 0) >>> 0) {
  HEAP32[i40 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i40 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i40 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i40 = (HEAP32[1460574] | 0) + 12 | 0;
  HEAP32[1460574] = i40;
  i41 = i40;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842292, i5);
  i41 = HEAP32[1460574] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.784313738);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.756862759);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.670588255);
 if (i41 >>> 0 < (HEAP32[1460575] | 0) >>> 0) {
  HEAP32[i41 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i41 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i41 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i41 = (HEAP32[1460574] | 0) + 12 | 0;
  HEAP32[1460574] = i41;
  i42 = i41;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842292, i5);
  i42 = HEAP32[1460574] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.58431375);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.611764729);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.600000024);
 if (i42 >>> 0 < (HEAP32[1460575] | 0) >>> 0) {
  HEAP32[i42 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i42 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i42 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i42 = (HEAP32[1460574] | 0) + 12 | 0;
  HEAP32[1460574] = i42;
  i43 = i42;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842292, i5);
  i43 = HEAP32[1460574] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.513725519);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.772549033);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.788235306);
 if (i43 >>> 0 < (HEAP32[1460575] | 0) >>> 0) {
  HEAP32[i43 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i43 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i43 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i43 = (HEAP32[1460574] | 0) + 12 | 0;
  HEAP32[1460574] = i43;
  i44 = i43;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842292, i5);
  i44 = HEAP32[1460574] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.0941176488);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.294117659);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.984313726);
 if (i44 >>> 0 < (HEAP32[1460575] | 0) >>> 0) {
  HEAP32[i44 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i44 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i44 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i44 = (HEAP32[1460574] | 0) + 12 | 0;
  HEAP32[1460574] = i44;
  i45 = i44;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842292, i5);
  i45 = HEAP32[1460574] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.454901963);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.615686297);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.615686297);
 if (i45 >>> 0 < (HEAP32[1460575] | 0) >>> 0) {
  HEAP32[i45 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i45 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i45 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i45 = (HEAP32[1460574] | 0) + 12 | 0;
  HEAP32[1460574] = i45;
  i46 = i45;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842292, i5);
  i46 = HEAP32[1460574] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.627451002);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.627451002);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.627451002);
 if (i46 >>> 0 < (HEAP32[1460575] | 0) >>> 0) {
  HEAP32[i46 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i46 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i46 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i46 = (HEAP32[1460574] | 0) + 12 | 0;
  HEAP32[1460574] = i46;
  i47 = i46;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842292, i5);
  i47 = HEAP32[1460574] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.392156869);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.392156869);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.392156869);
 if (i47 >>> 0 < (HEAP32[1460575] | 0) >>> 0) {
  HEAP32[i47 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i47 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i47 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i47 = (HEAP32[1460574] | 0) + 12 | 0;
  HEAP32[1460574] = i47;
  i48 = i47;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842292, i5);
  i48 = HEAP32[1460574] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.549019635);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.215686277);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.243137255);
 if (i48 >>> 0 < (HEAP32[1460575] | 0) >>> 0) {
  HEAP32[i48 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i48 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i48 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i48 = (HEAP32[1460574] | 0) + 12 | 0;
  HEAP32[1460574] = i48;
  i49 = i48;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842292, i5);
  i49 = HEAP32[1460574] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.772549033);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.800000011);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.752941191);
 if (i49 >>> 0 < (HEAP32[1460575] | 0) >>> 0) {
  HEAP32[i49 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i49 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i49 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i49 = (HEAP32[1460574] | 0) + 12 | 0;
  HEAP32[1460574] = i49;
  i50 = i49;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842292, i5);
  i50 = HEAP32[1460574] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.601176441);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.576470613);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.601176441);
 if (i50 >>> 0 < (HEAP32[1460575] | 0) >>> 0) {
  HEAP32[i50 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i50 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i50 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i50 = (HEAP32[1460574] | 0) + 12 | 0;
  HEAP32[1460574] = i50;
  i51 = i50;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842292, i5);
  i51 = HEAP32[1460574] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.55725491);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.565490186);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.521568656);
 if (i51 >>> 0 < (HEAP32[1460575] | 0) >>> 0) {
  HEAP32[i51 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i51 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i51 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i51 = (HEAP32[1460574] | 0) + 12 | 0;
  HEAP32[1460574] = i51;
  i52 = i51;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842292, i5);
  i52 = HEAP32[1460574] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.601176441);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.55725491);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.518823504);
 if (i52 >>> 0 < (HEAP32[1460575] | 0) >>> 0) {
  HEAP32[i52 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i52 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i52 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i52 = (HEAP32[1460574] | 0) + 12 | 0;
  HEAP32[1460574] = i52;
  i53 = i52;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842292, i5);
  i53 = HEAP32[1460574] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.772549033);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.800000011);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.752941191);
 if (i53 >>> 0 < (HEAP32[1460575] | 0) >>> 0) {
  HEAP32[i53 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i53 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i53 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i53 = (HEAP32[1460574] | 0) + 12 | 0;
  HEAP32[1460574] = i53;
  i54 = i53;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842292, i5);
  i54 = HEAP32[1460574] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.929411768);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.701960802);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.619607865);
 if (i54 >>> 0 < (HEAP32[1460575] | 0) >>> 0) {
  HEAP32[i54 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i54 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i54 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i54 = (HEAP32[1460574] | 0) + 12 | 0;
  HEAP32[1460574] = i54;
  i55 = i54;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842292, i5);
  i55 = HEAP32[1460574] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.466666669);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.494117647);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.521568656);
 if (i55 >>> 0 < (HEAP32[1460575] | 0) >>> 0) {
  HEAP32[i55 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i55 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i55 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i55 = (HEAP32[1460574] | 0) + 12 | 0;
  HEAP32[1460574] = i55;
  i56 = i55;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842292, i5);
  i56 = HEAP32[1460574] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.529411793);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.0823529437);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.121568628);
 if (i56 >>> 0 < (HEAP32[1460575] | 0) >>> 0) {
  HEAP32[i56 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i56 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i56 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i56 = (HEAP32[1460574] | 0) + 12 | 0;
  HEAP32[1460574] = i56;
  i57 = i56;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842292, i5);
  i57 = HEAP32[1460574] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.556862772);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.600000024);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.600000024);
 if (i57 >>> 0 < (HEAP32[1460575] | 0) >>> 0) {
  HEAP32[i57 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i57 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i57 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i57 = (HEAP32[1460574] | 0) + 12 | 0;
  HEAP32[1460574] = i57;
  i58 = i57;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842292, i5);
  i58 = HEAP32[1460574] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.984313726);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.988235294);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.988235294);
 if (i58 >>> 0 < (HEAP32[1460575] | 0) >>> 0) {
  HEAP32[i58 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i58 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i58 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i58 = (HEAP32[1460574] | 0) + 12 | 0;
  HEAP32[1460574] = i58;
  i59 = i58;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842292, i5);
  i59 = HEAP32[1460574] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.996078431);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.996078431);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.996078431);
 if (i59 >>> 0 < (HEAP32[1460575] | 0) >>> 0) {
  HEAP32[i59 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i59 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i59 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i59 = (HEAP32[1460574] | 0) + 12 | 0;
  HEAP32[1460574] = i59;
  i60 = i59;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842292, i5);
  i60 = HEAP32[1460574] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.760784327);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.686274529);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.568627477);
 if (i60 >>> 0 < (HEAP32[1460575] | 0) >>> 0) {
  HEAP32[i60 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i60 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i60 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i60 = (HEAP32[1460574] | 0) + 12 | 0;
  HEAP32[1460574] = i60;
  i61 = i60;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842292, i5);
  i61 = HEAP32[1460574] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.600000024);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.541176498);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.419607848);
 if (i61 >>> 0 < (HEAP32[1460575] | 0) >>> 0) {
  HEAP32[i61 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i61 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i61 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i61 = (HEAP32[1460574] | 0) + 12 | 0;
  HEAP32[1460574] = i61;
  i62 = i61;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842292, i5);
  i62 = HEAP32[1460574] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.670588255);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.647058845);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.607843161);
 if (i62 >>> 0 < (HEAP32[1460575] | 0) >>> 0) {
  HEAP32[i62 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i62 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i62 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  HEAP32[1460574] = (HEAP32[1460574] | 0) + 12;
 } else __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842292, i5);
 i62 = HEAP32[i6 >> 2] | 0;
 HEAP32[(HEAP32[i62 + 8 >> 2] | 0) + 148 >> 2] = 5842292;
 HEAP32[(HEAP32[i62 + 36 >> 2] | 0) + 148 >> 2] = 5842292;
 HEAP32[(HEAP32[i62 + 40 >> 2] | 0) + 148 >> 2] = 5842292;
 HEAP32[(HEAP32[i62 + 44 >> 2] | 0) + 148 >> 2] = 5842292;
 HEAP32[(HEAP32[i62 + 48 >> 2] | 0) + 148 >> 2] = 5842292;
 do if (!(HEAP8[73528] | 0)) {
  if (!(___cxa_guard_acquire(73528) | 0)) break;
  HEAP32[1460576] = 0;
  HEAP32[1460577] = 0;
  HEAP32[1460578] = 0;
 } while (0);
 HEAPF32[i5 >> 2] = Math_fround(.0941176488);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.294117659);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.984313726);
 i62 = HEAP32[1460577] | 0;
 if (i62 >>> 0 < (HEAP32[1460578] | 0) >>> 0) {
  HEAP32[i62 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i62 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i62 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i62 = (HEAP32[1460577] | 0) + 12 | 0;
  HEAP32[1460577] = i62;
  i63 = i62;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842304, i5);
  i63 = HEAP32[1460577] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.454901963);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.819607853);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.615686297);
 if (i63 >>> 0 < (HEAP32[1460578] | 0) >>> 0) {
  HEAP32[i63 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i63 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i63 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i63 = (HEAP32[1460577] | 0) + 12 | 0;
  HEAP32[1460577] = i63;
  i64 = i63;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842304, i5);
  i64 = HEAP32[1460577] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.847058832);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.427450985);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.615686297);
 if (i64 >>> 0 < (HEAP32[1460578] | 0) >>> 0) {
  HEAP32[i64 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i64 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i64 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i64 = (HEAP32[1460577] | 0) + 12 | 0;
  HEAP32[1460577] = i64;
  i65 = i64;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842304, i5);
  i65 = HEAP32[1460577] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.549019635);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.549019635);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.549019635);
 if (i65 >>> 0 < (HEAP32[1460578] | 0) >>> 0) {
  HEAP32[i65 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i65 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i65 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  HEAP32[1460577] = (HEAP32[1460577] | 0) + 12;
 } else __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842304, i5);
 do if (!(HEAP8[73536] | 0)) {
  if (!(___cxa_guard_acquire(73536) | 0)) break;
  HEAP32[1460579] = 0;
  HEAP32[1460580] = 0;
  HEAP32[1460581] = 0;
 } while (0);
 HEAPF32[i5 >> 2] = Math_fround(.454901963);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.819607853);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.615686297);
 i65 = HEAP32[1460580] | 0;
 if (i65 >>> 0 < (HEAP32[1460581] | 0) >>> 0) {
  HEAP32[i65 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i65 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i65 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i65 = (HEAP32[1460580] | 0) + 12 | 0;
  HEAP32[1460580] = i65;
  i66 = i65;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842316, i5);
  i66 = HEAP32[1460580] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.549019635);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.549019635);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.549019635);
 if (i66 >>> 0 < (HEAP32[1460581] | 0) >>> 0) {
  HEAP32[i66 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i66 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i66 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i66 = (HEAP32[1460580] | 0) + 12 | 0;
  HEAP32[1460580] = i66;
  i67 = i66;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842316, i5);
  i67 = HEAP32[1460580] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.0941176488);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.294117659);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.984313726);
 if (i67 >>> 0 < (HEAP32[1460581] | 0) >>> 0) {
  HEAP32[i67 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i67 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i67 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i67 = (HEAP32[1460580] | 0) + 12 | 0;
  HEAP32[1460580] = i67;
  i68 = i67;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842316, i5);
  i68 = HEAP32[1460580] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.847058832);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.427450985);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.615686297);
 if (i68 >>> 0 < (HEAP32[1460581] | 0) >>> 0) {
  HEAP32[i68 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i68 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i68 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  HEAP32[1460580] = (HEAP32[1460580] | 0) + 12;
 } else __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842316, i5);
 do if (!(HEAP8[73544] | 0)) {
  if (!(___cxa_guard_acquire(73544) | 0)) break;
  HEAP32[1460582] = 0;
  HEAP32[1460583] = 0;
  HEAP32[1460584] = 0;
 } while (0);
 HEAPF32[i5 >> 2] = Math_fround(.847058832);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.427450985);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.615686297);
 i68 = HEAP32[1460583] | 0;
 if (i68 >>> 0 < (HEAP32[1460584] | 0) >>> 0) {
  HEAP32[i68 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i68 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i68 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i68 = (HEAP32[1460583] | 0) + 12 | 0;
  HEAP32[1460583] = i68;
  i69 = i68;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842328, i5);
  i69 = HEAP32[1460583] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.549019635);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.549019635);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.549019635);
 if (i69 >>> 0 < (HEAP32[1460584] | 0) >>> 0) {
  HEAP32[i69 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i69 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i69 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i69 = (HEAP32[1460583] | 0) + 12 | 0;
  HEAP32[1460583] = i69;
  i70 = i69;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842328, i5);
  i70 = HEAP32[1460583] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.0941176488);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.294117659);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.984313726);
 if (i70 >>> 0 < (HEAP32[1460584] | 0) >>> 0) {
  HEAP32[i70 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i70 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i70 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i70 = (HEAP32[1460583] | 0) + 12 | 0;
  HEAP32[1460583] = i70;
  i71 = i70;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842328, i5);
  i71 = HEAP32[1460583] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.454901963);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.819607853);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.615686297);
 if (i71 >>> 0 < (HEAP32[1460584] | 0) >>> 0) {
  HEAP32[i71 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i71 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i71 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  HEAP32[1460583] = (HEAP32[1460583] | 0) + 12;
 } else __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842328, i5);
 do if (!(HEAP8[73552] | 0)) {
  if (!(___cxa_guard_acquire(73552) | 0)) break;
  HEAP32[1460585] = 0;
  HEAP32[1460586] = 0;
  HEAP32[1460587] = 0;
 } while (0);
 HEAPF32[i5 >> 2] = Math_fround(.847058832);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.427450985);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.615686297);
 i71 = HEAP32[1460586] | 0;
 if (i71 >>> 0 < (HEAP32[1460587] | 0) >>> 0) {
  HEAP32[i71 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i71 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i71 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i71 = (HEAP32[1460586] | 0) + 12 | 0;
  HEAP32[1460586] = i71;
  i72 = i71;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842340, i5);
  i72 = HEAP32[1460586] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.454901963);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.819607853);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.615686297);
 if (i72 >>> 0 < (HEAP32[1460587] | 0) >>> 0) {
  HEAP32[i72 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i72 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i72 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i72 = (HEAP32[1460586] | 0) + 12 | 0;
  HEAP32[1460586] = i72;
  i73 = i72;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842340, i5);
  i73 = HEAP32[1460586] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.549019635);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.549019635);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.549019635);
 if (i73 >>> 0 < (HEAP32[1460587] | 0) >>> 0) {
  HEAP32[i73 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i73 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i73 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i73 = (HEAP32[1460586] | 0) + 12 | 0;
  HEAP32[1460586] = i73;
  i74 = i73;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842340, i5);
  i74 = HEAP32[1460586] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.0941176488);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.294117659);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.984313726);
 if (i74 >>> 0 < (HEAP32[1460587] | 0) >>> 0) {
  HEAP32[i74 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i74 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i74 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  HEAP32[1460586] = (HEAP32[1460586] | 0) + 12;
 } else __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842340, i5);
 do if (!(HEAP8[73560] | 0)) {
  if (!(___cxa_guard_acquire(73560) | 0)) break;
  HEAP32[1460588] = 0;
  HEAP32[1460589] = 0;
  HEAP32[1460590] = 0;
 } while (0);
 HEAPF32[i5 >> 2] = Math_fround(.847058832);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.427450985);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.615686297);
 i74 = HEAP32[1460589] | 0;
 if (i74 >>> 0 < (HEAP32[1460590] | 0) >>> 0) {
  HEAP32[i74 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i74 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i74 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i74 = (HEAP32[1460589] | 0) + 12 | 0;
  HEAP32[1460589] = i74;
  i75 = i74;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842352, i5);
  i75 = HEAP32[1460589] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.549019635);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.549019635);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.549019635);
 if (i75 >>> 0 < (HEAP32[1460590] | 0) >>> 0) {
  HEAP32[i75 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i75 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i75 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i75 = (HEAP32[1460589] | 0) + 12 | 0;
  HEAP32[1460589] = i75;
  i76 = i75;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842352, i5);
  i76 = HEAP32[1460589] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.0941176488);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.294117659);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.984313726);
 if (i76 >>> 0 < (HEAP32[1460590] | 0) >>> 0) {
  HEAP32[i76 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i76 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i76 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i76 = (HEAP32[1460589] | 0) + 12 | 0;
  HEAP32[1460589] = i76;
  i77 = i76;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842352, i5);
  i77 = HEAP32[1460589] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.454901963);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.819607853);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.615686297);
 if (i77 >>> 0 < (HEAP32[1460590] | 0) >>> 0) {
  HEAP32[i77 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i77 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i77 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  HEAP32[1460589] = (HEAP32[1460589] | 0) + 12;
 } else __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842352, i5);
 do if (!(HEAP8[73568] | 0)) {
  if (!(___cxa_guard_acquire(73568) | 0)) break;
  HEAP32[1460591] = 0;
  HEAP32[1460592] = 0;
  HEAP32[1460593] = 0;
 } while (0);
 HEAPF32[i5 >> 2] = Math_fround(.847058832);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.427450985);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.615686297);
 i77 = HEAP32[1460592] | 0;
 if (i77 >>> 0 < (HEAP32[1460593] | 0) >>> 0) {
  HEAP32[i77 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i77 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i77 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i77 = (HEAP32[1460592] | 0) + 12 | 0;
  HEAP32[1460592] = i77;
  i78 = i77;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842364, i5);
  i78 = HEAP32[1460592] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.549019635);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.549019635);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.549019635);
 if (i78 >>> 0 < (HEAP32[1460593] | 0) >>> 0) {
  HEAP32[i78 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i78 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i78 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i78 = (HEAP32[1460592] | 0) + 12 | 0;
  HEAP32[1460592] = i78;
  i79 = i78;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842364, i5);
  i79 = HEAP32[1460592] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.588235319);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.588235319);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.607843161);
 if (i79 >>> 0 < (HEAP32[1460593] | 0) >>> 0) {
  HEAP32[i79 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i79 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i79 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i79 = (HEAP32[1460592] | 0) + 12 | 0;
  HEAP32[1460592] = i79;
  i80 = i79;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842364, i5);
  i80 = HEAP32[1460592] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.631372571);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.631372571);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.666666686);
 if (i80 >>> 0 < (HEAP32[1460593] | 0) >>> 0) {
  HEAP32[i80 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i80 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i80 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i80 = (HEAP32[1460592] | 0) + 12 | 0;
  HEAP32[1460592] = i80;
  i81 = i80;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842364, i5);
  i81 = HEAP32[1460592] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.0941176488);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.294117659);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.984313726);
 if (i81 >>> 0 < (HEAP32[1460593] | 0) >>> 0) {
  HEAP32[i81 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i81 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i81 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i81 = (HEAP32[1460592] | 0) + 12 | 0;
  HEAP32[1460592] = i81;
  i82 = i81;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842364, i5);
  i82 = HEAP32[1460592] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.454901963);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.819607853);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.615686297);
 if (i82 >>> 0 < (HEAP32[1460593] | 0) >>> 0) {
  HEAP32[i82 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i82 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i82 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i82 = (HEAP32[1460592] | 0) + 12 | 0;
  HEAP32[1460592] = i82;
  i83 = i82;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842364, i5);
  i83 = HEAP32[1460592] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.615686297);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.454901963);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.819607853);
 if (i83 >>> 0 < (HEAP32[1460593] | 0) >>> 0) {
  HEAP32[i83 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i83 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i83 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i83 = (HEAP32[1460592] | 0) + 12 | 0;
  HEAP32[1460592] = i83;
  i84 = i83;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842364, i5);
  i84 = HEAP32[1460592] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.819607853);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.615686297);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.454901963);
 if (i84 >>> 0 < (HEAP32[1460593] | 0) >>> 0) {
  HEAP32[i84 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i84 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i84 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  HEAP32[1460592] = (HEAP32[1460592] | 0) + 12;
 } else __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842364, i5);
 i84 = HEAP32[i6 >> 2] | 0;
 HEAP32[(HEAP32[i84 + 104 >> 2] | 0) + 148 >> 2] = 5842328;
 HEAP32[(HEAP32[i84 + 108 >> 2] | 0) + 148 >> 2] = 5842316;
 HEAP32[(HEAP32[i84 + 112 >> 2] | 0) + 148 >> 2] = 5842304;
 HEAP32[(HEAP32[i84 + 116 >> 2] | 0) + 148 >> 2] = 5842364;
 HEAP32[(HEAP32[i84 + 120 >> 2] | 0) + 148 >> 2] = 5842364;
 HEAP32[(HEAP32[i84 + 124 >> 2] | 0) + 148 >> 2] = 5842364;
 HEAP32[(HEAP32[i84 + 128 >> 2] | 0) + 148 >> 2] = 5842364;
 HEAP32[(HEAP32[i84 + 132 >> 2] | 0) + 148 >> 2] = 5842364;
 HEAP32[(HEAP32[i84 + 136 >> 2] | 0) + 148 >> 2] = 5842364;
 HEAP32[(HEAP32[i84 + 140 >> 2] | 0) + 148 >> 2] = 5842364;
 HEAP32[(HEAP32[i84 + 144 >> 2] | 0) + 148 >> 2] = 5842364;
 do if (!(HEAP8[73576] | 0)) {
  if (!(___cxa_guard_acquire(73576) | 0)) break;
  HEAP32[1460594] = 0;
  HEAP32[1460595] = 0;
  HEAP32[1460596] = 0;
 } while (0);
 HEAPF32[i5 >> 2] = Math_fround(.611764729);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.709803939);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.294117659);
 i84 = HEAP32[1460595] | 0;
 if (i84 >>> 0 < (HEAP32[1460596] | 0) >>> 0) {
  HEAP32[i84 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i84 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i84 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  i84 = (HEAP32[1460595] | 0) + 12 | 0;
  HEAP32[1460595] = i84;
  i85 = i84;
 } else {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842376, i5);
  i85 = HEAP32[1460595] | 0;
 }
 HEAPF32[i5 >> 2] = Math_fround(.505882382);
 HEAPF32[i5 + 4 >> 2] = Math_fround(.423529416);
 HEAPF32[i5 + 8 >> 2] = Math_fround(.423529416);
 if (i85 >>> 0 < (HEAP32[1460596] | 0) >>> 0) {
  HEAP32[i85 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i85 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i85 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  HEAP32[1460595] = (HEAP32[1460595] | 0) + 12;
 } else __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(5842376, i5);
 HEAP32[(HEAP32[(HEAP32[i6 >> 2] | 0) + 152 >> 2] | 0) + 148 >> 2] = 5842376;
 STACKTOP = i4;
 return;
}

function __ZN11MeshManager4initEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, i90 = 0, i91 = 0, i92 = 0, i93 = 0, i94 = 0, i95 = 0, i96 = 0, i97 = 0, i98 = 0, i99 = 0, i100 = 0, i101 = 0, i102 = 0, i103 = 0, i104 = 0, i105 = 0, i106 = 0, i107 = 0, i108 = 0, i109 = 0, i110 = 0, i111 = 0, i112 = 0, i113 = 0, i114 = 0, i115 = 0, i116 = 0, i117 = 0, i118 = 0, i119 = 0, i120 = 0, i121 = 0, i122 = 0, i123 = 0, i124 = 0, i125 = 0, i126 = 0, i127 = 0, i128 = 0, i129 = 0, i130 = 0, i131 = 0, i132 = 0, i133 = 0, i134 = 0, i135 = 0, i136 = 0, i137 = 0, i138 = 0, i139 = 0, i140 = 0, i141 = 0, i142 = 0, i143 = 0, i144 = 0, i145 = 0, i146 = 0, i147 = 0, i148 = 0, i149 = 0, i150 = 0, i151 = 0, i152 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i3;
 _puts(28160) | 0;
 i5 = i1 + 4 | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 do if (!i6) {
  i7 = i5;
  i8 = i5;
 } else {
  i9 = i1 + 4 | 0;
  i10 = i6;
  while (1) {
   i11 = HEAP32[i10 + 16 >> 2] | 0;
   if ((i11 | 0) > 0) {
    i12 = HEAP32[i10 >> 2] | 0;
    if (!i12) {
     i2 = 6;
     break;
    } else {
     i13 = i10;
     i14 = i12;
    }
   } else {
    if ((i11 | 0) >= 0) {
     i2 = 10;
     break;
    }
    i15 = i10 + 4 | 0;
    i11 = HEAP32[i15 >> 2] | 0;
    if (!i11) {
     i2 = 9;
     break;
    } else {
     i13 = i15;
     i14 = i11;
    }
   }
   i9 = i13;
   i10 = i14;
  }
  if ((i2 | 0) == 6) {
   i7 = i10;
   i8 = i10;
   break;
  } else if ((i2 | 0) == 9) {
   i7 = i10;
   i8 = i15;
   break;
  } else if ((i2 | 0) == 10) {
   i7 = i10;
   i8 = i9;
   break;
  }
 } while (0);
 i15 = HEAP32[i8 >> 2] | 0;
 if (!i15) {
  i14 = __Znwj(24) | 0;
  HEAP32[i14 + 16 >> 2] = 0;
  HEAP32[i14 + 20 >> 2] = 0;
  HEAP32[i14 >> 2] = 0;
  HEAP32[i14 + 4 >> 2] = 0;
  HEAP32[i14 + 8 >> 2] = i7;
  HEAP32[i8 >> 2] = i14;
  i7 = HEAP32[HEAP32[i1 >> 2] >> 2] | 0;
  if (!i7) i16 = i14; else {
   HEAP32[i1 >> 2] = i7;
   i16 = HEAP32[i8 >> 2] | 0;
  }
  __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[i1 + 4 >> 2] | 0, i16);
  i16 = i1 + 8 | 0;
  HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
  i17 = i14;
 } else i17 = i15;
 HEAP32[i17 + 20 >> 2] = 0;
 i17 = i1 + 24 | 0;
 HEAP32[i4 >> 2] = 28188;
 i15 = i1 + 28 | 0;
 i14 = HEAP32[i15 >> 2] | 0;
 i16 = i1 + 32 | 0;
 if (i14 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i14 >> 2] = 28188;
  i14 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i14;
  i18 = i14;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i18 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 28204;
 if (i18 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i18 >> 2] = 28204;
  i18 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i18;
  i19 = i18;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i19 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 28236;
 if (i19 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i19 >> 2] = 28236;
  i19 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i19;
  i20 = i19;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i20 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 28270;
 if (i20 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i20 >> 2] = 28270;
  i20 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i20;
  i21 = i20;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i21 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 28318;
 if (i21 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i21 >> 2] = 28318;
  i21 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i21;
  i22 = i21;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i22 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 28366;
 if (i22 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i22 >> 2] = 28366;
  i22 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i22;
  i23 = i22;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i23 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 28414;
 if (i23 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i23 >> 2] = 28414;
  i23 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i23;
  i24 = i23;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i24 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 28188;
 if (i24 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i24 >> 2] = 28188;
  i24 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i24;
  i25 = i24;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i25 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 28188;
 if (i25 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i25 >> 2] = 28188;
  i25 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i25;
  i26 = i15;
  i27 = i25;
  i28 = i25;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i25 = HEAP32[i15 >> 2] | 0;
  i26 = i15;
  i27 = i25;
  i28 = i25;
 }
 i25 = i28 - (HEAP32[i17 >> 2] | 0) >> 2;
 i28 = HEAP32[i5 >> 2] | 0;
 do if (!i28) {
  i29 = i5;
  i30 = i5;
 } else {
  i24 = i1 + 4 | 0;
  i23 = i28;
  while (1) {
   i22 = HEAP32[i23 + 16 >> 2] | 0;
   if ((i22 | 0) > 1) {
    i21 = HEAP32[i23 >> 2] | 0;
    if (!i21) {
     i2 = 48;
     break;
    } else {
     i31 = i23;
     i32 = i21;
    }
   } else {
    if ((i22 | 0) == 1) {
     i2 = 52;
     break;
    }
    i33 = i23 + 4 | 0;
    i22 = HEAP32[i33 >> 2] | 0;
    if (!i22) {
     i2 = 51;
     break;
    } else {
     i31 = i33;
     i32 = i22;
    }
   }
   i24 = i31;
   i23 = i32;
  }
  if ((i2 | 0) == 48) {
   i29 = i23;
   i30 = i23;
   break;
  } else if ((i2 | 0) == 51) {
   i29 = i23;
   i30 = i33;
   break;
  } else if ((i2 | 0) == 52) {
   i29 = i23;
   i30 = i24;
   break;
  }
 } while (0);
 i33 = HEAP32[i30 >> 2] | 0;
 if (!i33) {
  i32 = __Znwj(24) | 0;
  HEAP32[i32 + 16 >> 2] = 1;
  HEAP32[i32 + 20 >> 2] = 0;
  HEAP32[i32 >> 2] = 0;
  HEAP32[i32 + 4 >> 2] = 0;
  HEAP32[i32 + 8 >> 2] = i29;
  HEAP32[i30 >> 2] = i32;
  i29 = HEAP32[HEAP32[i1 >> 2] >> 2] | 0;
  if (!i29) i34 = i32; else {
   HEAP32[i1 >> 2] = i29;
   i34 = HEAP32[i30 >> 2] | 0;
  }
  __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[i1 + 4 >> 2] | 0, i34);
  i34 = i1 + 8 | 0;
  HEAP32[i34 >> 2] = (HEAP32[i34 >> 2] | 0) + 1;
  i35 = i32;
  i36 = HEAP32[i15 >> 2] | 0;
 } else {
  i35 = i33;
  i36 = i27;
 }
 HEAP32[i35 + 20 >> 2] = i25;
 HEAP32[i4 >> 2] = 28462;
 if (i36 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i36 >> 2] = 28462;
  i36 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i36;
  i37 = i36;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i37 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 28496;
 if (i37 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i37 >> 2] = 28496;
  i37 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i37;
  i38 = i37;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i38 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 28530;
 if (i38 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i38 >> 2] = 28530;
  i38 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i38;
  i39 = i38;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i39 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 28564;
 if (i39 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i39 >> 2] = 28564;
  i39 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i39;
  i40 = i39;
  i41 = i39;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i39 = HEAP32[i26 >> 2] | 0;
  i40 = i39;
  i41 = i39;
 }
 i39 = i40 - (HEAP32[i17 >> 2] | 0) >> 2;
 i40 = HEAP32[i5 >> 2] | 0;
 do if (!i40) {
  i42 = i5;
  i43 = i5;
 } else {
  i38 = i1 + 4 | 0;
  i37 = i40;
  while (1) {
   i36 = HEAP32[i37 + 16 >> 2] | 0;
   if ((i36 | 0) > 2) {
    i25 = HEAP32[i37 >> 2] | 0;
    if (!i25) {
     i2 = 75;
     break;
    } else {
     i44 = i37;
     i45 = i25;
    }
   } else {
    if ((i36 | 0) == 2) {
     i2 = 79;
     break;
    }
    i46 = i37 + 4 | 0;
    i36 = HEAP32[i46 >> 2] | 0;
    if (!i36) {
     i2 = 78;
     break;
    } else {
     i44 = i46;
     i45 = i36;
    }
   }
   i38 = i44;
   i37 = i45;
  }
  if ((i2 | 0) == 75) {
   i42 = i37;
   i43 = i37;
   break;
  } else if ((i2 | 0) == 78) {
   i42 = i37;
   i43 = i46;
   break;
  } else if ((i2 | 0) == 79) {
   i42 = i37;
   i43 = i38;
   break;
  }
 } while (0);
 i46 = HEAP32[i43 >> 2] | 0;
 if (!i46) {
  i45 = __Znwj(24) | 0;
  HEAP32[i45 + 16 >> 2] = 2;
  HEAP32[i45 + 20 >> 2] = 0;
  HEAP32[i45 >> 2] = 0;
  HEAP32[i45 + 4 >> 2] = 0;
  HEAP32[i45 + 8 >> 2] = i42;
  HEAP32[i43 >> 2] = i45;
  i42 = HEAP32[HEAP32[i1 >> 2] >> 2] | 0;
  if (!i42) i47 = i45; else {
   HEAP32[i1 >> 2] = i42;
   i47 = HEAP32[i43 >> 2] | 0;
  }
  __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[i1 + 4 >> 2] | 0, i47);
  i47 = i1 + 8 | 0;
  HEAP32[i47 >> 2] = (HEAP32[i47 >> 2] | 0) + 1;
  i48 = i45;
  i49 = HEAP32[i15 >> 2] | 0;
 } else {
  i48 = i46;
  i49 = i41;
 }
 HEAP32[i48 + 20 >> 2] = i39;
 HEAP32[i4 >> 2] = 28598;
 if (i49 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i49 >> 2] = 28598;
  i49 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i49;
  i50 = i49;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i50 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 28622;
 if (i50 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i50 >> 2] = 28622;
  i50 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i50;
  i51 = i50;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i51 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 28641;
 if (i51 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i51 >> 2] = 28641;
  i51 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i51;
  i52 = i51;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i52 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 28662;
 if (i52 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i52 >> 2] = 28662;
  i52 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i52;
  i53 = i52;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i53 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 28683;
 if (i53 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i53 >> 2] = 28683;
  i53 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i53;
  i54 = i53;
  i55 = i53;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i53 = HEAP32[i26 >> 2] | 0;
  i54 = i53;
  i55 = i53;
 }
 i53 = i54 - (HEAP32[i17 >> 2] | 0) >> 2;
 i54 = HEAP32[i5 >> 2] | 0;
 do if (!i54) {
  i56 = i5;
  i57 = i5;
 } else {
  i52 = i1 + 4 | 0;
  i51 = i54;
  while (1) {
   i50 = HEAP32[i51 + 16 >> 2] | 0;
   if ((i50 | 0) > 4) {
    i49 = HEAP32[i51 >> 2] | 0;
    if (!i49) {
     i2 = 105;
     break;
    } else {
     i58 = i51;
     i59 = i49;
    }
   } else {
    if ((i50 | 0) == 4) {
     i2 = 109;
     break;
    }
    i60 = i51 + 4 | 0;
    i50 = HEAP32[i60 >> 2] | 0;
    if (!i50) {
     i2 = 108;
     break;
    } else {
     i58 = i60;
     i59 = i50;
    }
   }
   i52 = i58;
   i51 = i59;
  }
  if ((i2 | 0) == 105) {
   i56 = i51;
   i57 = i51;
   break;
  } else if ((i2 | 0) == 108) {
   i56 = i51;
   i57 = i60;
   break;
  } else if ((i2 | 0) == 109) {
   i56 = i51;
   i57 = i52;
   break;
  }
 } while (0);
 i60 = HEAP32[i57 >> 2] | 0;
 if (!i60) {
  i59 = __Znwj(24) | 0;
  HEAP32[i59 + 16 >> 2] = 4;
  HEAP32[i59 + 20 >> 2] = 0;
  HEAP32[i59 >> 2] = 0;
  HEAP32[i59 + 4 >> 2] = 0;
  HEAP32[i59 + 8 >> 2] = i56;
  HEAP32[i57 >> 2] = i59;
  i56 = HEAP32[HEAP32[i1 >> 2] >> 2] | 0;
  if (!i56) i61 = i59; else {
   HEAP32[i1 >> 2] = i56;
   i61 = HEAP32[i57 >> 2] | 0;
  }
  __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[i1 + 4 >> 2] | 0, i61);
  i61 = i1 + 8 | 0;
  HEAP32[i61 >> 2] = (HEAP32[i61 >> 2] | 0) + 1;
  i62 = i59;
  i63 = HEAP32[i15 >> 2] | 0;
 } else {
  i62 = i60;
  i63 = i55;
 }
 HEAP32[i62 + 20 >> 2] = i53;
 HEAP32[i4 >> 2] = 28702;
 if (i63 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i63 >> 2] = 28702;
  i63 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i63;
  i64 = i63;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i64 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 28716;
 if (i64 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i64 >> 2] = 28716;
  i64 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i64;
  i65 = i64;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i65 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 28734;
 if (i65 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i65 >> 2] = 28734;
  i65 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i65;
  i66 = i65;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i66 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 28749;
 if (i66 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i66 >> 2] = 28749;
  i66 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i66;
  i67 = i66;
  i68 = i66;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i66 = HEAP32[i26 >> 2] | 0;
  i67 = i66;
  i68 = i66;
 }
 i66 = i67 - (HEAP32[i17 >> 2] | 0) >> 2;
 i67 = HEAP32[i5 >> 2] | 0;
 do if (!i67) {
  i69 = i5;
  i70 = i5;
 } else {
  i65 = i1 + 4 | 0;
  i64 = i67;
  while (1) {
   i63 = HEAP32[i64 + 16 >> 2] | 0;
   if ((i63 | 0) > 5) {
    i53 = HEAP32[i64 >> 2] | 0;
    if (!i53) {
     i2 = 132;
     break;
    } else {
     i71 = i64;
     i72 = i53;
    }
   } else {
    if ((i63 | 0) == 5) {
     i2 = 136;
     break;
    }
    i73 = i64 + 4 | 0;
    i63 = HEAP32[i73 >> 2] | 0;
    if (!i63) {
     i2 = 135;
     break;
    } else {
     i71 = i73;
     i72 = i63;
    }
   }
   i65 = i71;
   i64 = i72;
  }
  if ((i2 | 0) == 132) {
   i69 = i64;
   i70 = i64;
   break;
  } else if ((i2 | 0) == 135) {
   i69 = i64;
   i70 = i73;
   break;
  } else if ((i2 | 0) == 136) {
   i69 = i64;
   i70 = i65;
   break;
  }
 } while (0);
 i73 = HEAP32[i70 >> 2] | 0;
 if (!i73) {
  i72 = __Znwj(24) | 0;
  HEAP32[i72 + 16 >> 2] = 5;
  HEAP32[i72 + 20 >> 2] = 0;
  HEAP32[i72 >> 2] = 0;
  HEAP32[i72 + 4 >> 2] = 0;
  HEAP32[i72 + 8 >> 2] = i69;
  HEAP32[i70 >> 2] = i72;
  i69 = HEAP32[HEAP32[i1 >> 2] >> 2] | 0;
  if (!i69) i74 = i72; else {
   HEAP32[i1 >> 2] = i69;
   i74 = HEAP32[i70 >> 2] | 0;
  }
  __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[i1 + 4 >> 2] | 0, i74);
  i74 = i1 + 8 | 0;
  HEAP32[i74 >> 2] = (HEAP32[i74 >> 2] | 0) + 1;
  i75 = i72;
  i76 = HEAP32[i15 >> 2] | 0;
 } else {
  i75 = i73;
  i76 = i68;
 }
 HEAP32[i75 + 20 >> 2] = i66;
 HEAP32[i4 >> 2] = 28768;
 if (i76 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i76 >> 2] = 28768;
  i76 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i76;
  i77 = i76;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i77 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 28790;
 if (i77 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i77 >> 2] = 28790;
  i77 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i77;
  i78 = i77;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i78 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 28188;
 if (i78 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i78 >> 2] = 28188;
  i78 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i78;
  i79 = i78;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i79 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 28188;
 if (i79 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i79 >> 2] = 28188;
  i79 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i79;
  i80 = i79;
  i81 = i79;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i79 = HEAP32[i26 >> 2] | 0;
  i80 = i79;
  i81 = i79;
 }
 i79 = i80 - (HEAP32[i17 >> 2] | 0) >> 2;
 i80 = HEAP32[i5 >> 2] | 0;
 do if (!i80) {
  i82 = i5;
  i83 = i5;
 } else {
  i78 = i1 + 4 | 0;
  i77 = i80;
  while (1) {
   i76 = HEAP32[i77 + 16 >> 2] | 0;
   if ((i76 | 0) > 3) {
    i66 = HEAP32[i77 >> 2] | 0;
    if (!i66) {
     i2 = 159;
     break;
    } else {
     i84 = i77;
     i85 = i66;
    }
   } else {
    if ((i76 | 0) == 3) {
     i2 = 163;
     break;
    }
    i86 = i77 + 4 | 0;
    i76 = HEAP32[i86 >> 2] | 0;
    if (!i76) {
     i2 = 162;
     break;
    } else {
     i84 = i86;
     i85 = i76;
    }
   }
   i78 = i84;
   i77 = i85;
  }
  if ((i2 | 0) == 159) {
   i82 = i77;
   i83 = i77;
   break;
  } else if ((i2 | 0) == 162) {
   i82 = i77;
   i83 = i86;
   break;
  } else if ((i2 | 0) == 163) {
   i82 = i77;
   i83 = i78;
   break;
  }
 } while (0);
 i86 = HEAP32[i83 >> 2] | 0;
 if (!i86) {
  i85 = __Znwj(24) | 0;
  HEAP32[i85 + 16 >> 2] = 3;
  HEAP32[i85 + 20 >> 2] = 0;
  HEAP32[i85 >> 2] = 0;
  HEAP32[i85 + 4 >> 2] = 0;
  HEAP32[i85 + 8 >> 2] = i82;
  HEAP32[i83 >> 2] = i85;
  i82 = HEAP32[HEAP32[i1 >> 2] >> 2] | 0;
  if (!i82) i87 = i85; else {
   HEAP32[i1 >> 2] = i82;
   i87 = HEAP32[i83 >> 2] | 0;
  }
  __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[i1 + 4 >> 2] | 0, i87);
  i87 = i1 + 8 | 0;
  HEAP32[i87 >> 2] = (HEAP32[i87 >> 2] | 0) + 1;
  i88 = i85;
  i89 = HEAP32[i15 >> 2] | 0;
 } else {
  i88 = i86;
  i89 = i81;
 }
 HEAP32[i88 + 20 >> 2] = i79;
 HEAP32[i4 >> 2] = 28818;
 if (i89 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i89 >> 2] = 28818;
  i89 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i89;
  i90 = i89;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i90 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 28836;
 if (i90 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i90 >> 2] = 28836;
  i90 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i90;
  i91 = i90;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i91 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 28854;
 if (i91 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i91 >> 2] = 28854;
  i91 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i91;
  i92 = i91;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i92 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 28872;
 if (i92 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i92 >> 2] = 28872;
  i92 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i92;
  i93 = i92;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i93 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 28890;
 if (i93 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i93 >> 2] = 28890;
  i93 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i93;
  i94 = i93;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i94 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 28908;
 if (i94 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i94 >> 2] = 28908;
  i94 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i94;
  i95 = i94;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i95 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 28926;
 if (i95 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i95 >> 2] = 28926;
  i95 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i95;
  i96 = i95;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i96 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 28944;
 if (i96 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i96 >> 2] = 28944;
  i96 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i96;
  i97 = i96;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i97 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 28962;
 if (i97 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i97 >> 2] = 28962;
  i97 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i97;
  i98 = i97;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i98 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 28980;
 if (i98 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i98 >> 2] = 28980;
  i98 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i98;
  i99 = i98;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i99 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 28998;
 if (i99 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i99 >> 2] = 28998;
  i99 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i99;
  i100 = i99;
  i101 = i99;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i99 = HEAP32[i26 >> 2] | 0;
  i100 = i99;
  i101 = i99;
 }
 i99 = i100 - (HEAP32[i17 >> 2] | 0) >> 2;
 i100 = HEAP32[i5 >> 2] | 0;
 do if (!i100) {
  i102 = i5;
  i103 = i5;
 } else {
  i26 = i1 + 4 | 0;
  i98 = i100;
  while (1) {
   i97 = HEAP32[i98 + 16 >> 2] | 0;
   if ((i97 | 0) > 6) {
    i96 = HEAP32[i98 >> 2] | 0;
    if (!i96) {
     i2 = 207;
     break;
    } else {
     i104 = i98;
     i105 = i96;
    }
   } else {
    if ((i97 | 0) == 6) {
     i2 = 211;
     break;
    }
    i106 = i98 + 4 | 0;
    i97 = HEAP32[i106 >> 2] | 0;
    if (!i97) {
     i2 = 210;
     break;
    } else {
     i104 = i106;
     i105 = i97;
    }
   }
   i26 = i104;
   i98 = i105;
  }
  if ((i2 | 0) == 207) {
   i102 = i98;
   i103 = i98;
   break;
  } else if ((i2 | 0) == 210) {
   i102 = i98;
   i103 = i106;
   break;
  } else if ((i2 | 0) == 211) {
   i102 = i98;
   i103 = i26;
   break;
  }
 } while (0);
 i2 = HEAP32[i103 >> 2] | 0;
 if (!i2) {
  i106 = __Znwj(24) | 0;
  HEAP32[i106 + 16 >> 2] = 6;
  HEAP32[i106 + 20 >> 2] = 0;
  HEAP32[i106 >> 2] = 0;
  HEAP32[i106 + 4 >> 2] = 0;
  HEAP32[i106 + 8 >> 2] = i102;
  HEAP32[i103 >> 2] = i106;
  i102 = HEAP32[HEAP32[i1 >> 2] >> 2] | 0;
  if (!i102) i107 = i106; else {
   HEAP32[i1 >> 2] = i102;
   i107 = HEAP32[i103 >> 2] | 0;
  }
  __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[i1 + 4 >> 2] | 0, i107);
  i107 = i1 + 8 | 0;
  HEAP32[i107 >> 2] = (HEAP32[i107 >> 2] | 0) + 1;
  i108 = i106;
  i109 = HEAP32[i15 >> 2] | 0;
 } else {
  i108 = i2;
  i109 = i101;
 }
 HEAP32[i108 + 20 >> 2] = i99;
 HEAP32[i4 >> 2] = 29016;
 if (i109 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i109 >> 2] = 29016;
  i109 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i109;
  i110 = i109;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i110 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 29030;
 if (i110 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i110 >> 2] = 29030;
  i110 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i110;
  i111 = i110;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i111 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 29043;
 if (i111 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i111 >> 2] = 29043;
  i111 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i111;
  i112 = i111;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i112 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 29063;
 if (i112 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i112 >> 2] = 29063;
  HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 4;
 } else __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
 i17 = i1 + 36 | 0;
 HEAP32[i4 >> 2] = 29081;
 i15 = i1 + 40 | 0;
 i112 = HEAP32[i15 >> 2] | 0;
 i16 = i1 + 44 | 0;
 if (i112 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i112 >> 2] = 29081;
  i112 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i112;
  i113 = i112;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i113 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 29101;
 if (i113 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i113 >> 2] = 29101;
  i113 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i113;
  i114 = i113;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i114 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 29128;
 if (i114 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i114 >> 2] = 29128;
  i114 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i114;
  i115 = i114;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i115 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 0;
 if (i115 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i115 >> 2] = 0;
  i115 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i115;
  i116 = i115;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i116 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 0;
 if (i116 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i116 >> 2] = 0;
  i116 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i116;
  i117 = i116;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i117 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 0;
 if (i117 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i117 >> 2] = 0;
  i117 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i117;
  i118 = i117;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i118 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 0;
 if (i118 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i118 >> 2] = 0;
  i118 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i118;
  i119 = i118;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i119 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 0;
 if (i119 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i119 >> 2] = 0;
  i119 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i119;
  i120 = i119;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i120 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 0;
 if (i120 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i120 >> 2] = 0;
  i120 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i120;
  i121 = i120;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i121 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 29144;
 if (i121 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i121 >> 2] = 29144;
  i121 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i121;
  i122 = i121;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i122 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 29160;
 if (i122 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i122 >> 2] = 29160;
  i122 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i122;
  i123 = i122;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i123 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 29176;
 if (i123 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i123 >> 2] = 29176;
  i123 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i123;
  i124 = i123;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i124 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 29192;
 if (i124 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i124 >> 2] = 29192;
  i124 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i124;
  i125 = i124;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i125 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 29208;
 if (i125 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i125 >> 2] = 29208;
  i125 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i125;
  i126 = i125;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i126 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 29232;
 if (i126 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i126 >> 2] = 29232;
  i126 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i126;
  i127 = i126;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i127 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 29251;
 if (i127 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i127 >> 2] = 29251;
  i127 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i127;
  i128 = i127;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i128 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 29272;
 if (i128 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i128 >> 2] = 29272;
  i128 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i128;
  i129 = i128;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i129 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 29286;
 if (i129 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i129 >> 2] = 29286;
  i129 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i129;
  i130 = i129;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i130 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 29305;
 if (i130 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i130 >> 2] = 29305;
  i130 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i130;
  i131 = i130;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i131 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 29319;
 if (i131 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i131 >> 2] = 29319;
  i131 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i131;
  i132 = i131;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i132 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 29337;
 if (i132 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i132 >> 2] = 29337;
  i132 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i132;
  i133 = i132;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i133 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 29352;
 if (i133 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i133 >> 2] = 29352;
  i133 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i133;
  i134 = i133;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i134 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 29371;
 if (i134 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i134 >> 2] = 29371;
  i134 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i134;
  i135 = i134;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i135 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 29387;
 if (i135 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i135 >> 2] = 29387;
  i135 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i135;
  i136 = i135;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i136 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 0;
 if (i136 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i136 >> 2] = 0;
  i136 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i136;
  i137 = i136;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i137 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 0;
 if (i137 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i137 >> 2] = 0;
  i137 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i137;
  i138 = i137;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i138 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 29415;
 if (i138 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i138 >> 2] = 29415;
  i138 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i138;
  i139 = i138;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i139 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 29433;
 if (i139 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i139 >> 2] = 29433;
  i139 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i139;
  i140 = i139;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i140 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 29451;
 if (i140 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i140 >> 2] = 29451;
  i140 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i140;
  i141 = i140;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i141 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 29469;
 if (i141 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i141 >> 2] = 29469;
  i141 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i141;
  i142 = i141;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i142 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 29487;
 if (i142 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i142 >> 2] = 29487;
  i142 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i142;
  i143 = i142;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i143 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 29505;
 if (i143 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i143 >> 2] = 29505;
  i143 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i143;
  i144 = i143;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i144 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 29523;
 if (i144 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i144 >> 2] = 29523;
  i144 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i144;
  i145 = i144;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i145 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 29541;
 if (i145 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i145 >> 2] = 29541;
  i145 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i145;
  i146 = i145;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i146 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 29559;
 if (i146 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i146 >> 2] = 29559;
  i146 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i146;
  i147 = i146;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i147 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 29577;
 if (i147 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i147 >> 2] = 29577;
  i147 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i147;
  i148 = i147;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i148 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 29595;
 if (i148 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i148 >> 2] = 29595;
  i148 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i148;
  i149 = i148;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i149 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 0;
 if (i149 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i149 >> 2] = 0;
  i149 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i149;
  i150 = i149;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i150 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 29613;
 if (i150 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i150 >> 2] = 29613;
  i150 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i150;
  i151 = i150;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i151 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 29626;
 if (i151 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i151 >> 2] = 29626;
  i151 = (HEAP32[i15 >> 2] | 0) + 4 | 0;
  HEAP32[i15 >> 2] = i151;
  i152 = i151;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  i152 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = 29646;
 if (i152 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0) {
  HEAP32[i152 >> 2] = 29646;
  HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 4;
  STACKTOP = i3;
  return;
 } else {
  __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i17, i4);
  STACKTOP = i3;
  return;
 }
}

function __ZN15CityMapRenderer14generateQueue1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, i90 = 0, i91 = 0, i92 = 0, i93 = 0, i94 = 0, i95 = 0, i96 = 0, i97 = 0, i98 = 0, i99 = 0, i100 = 0, i101 = 0, i102 = 0, i103 = 0, i104 = 0, i105 = 0, i106 = 0, i107 = 0, i108 = 0, i109 = 0, i110 = 0, i111 = 0, i112 = 0, i113 = 0, i114 = 0, i115 = 0, i116 = 0, i117 = 0, i118 = 0, i119 = 0, i120 = 0, i121 = 0, i122 = 0, i123 = 0, i124 = 0, i125 = 0, i126 = 0, i127 = 0, i128 = 0, i129 = 0, i130 = 0, i131 = 0, i132 = 0, i133 = 0, i134 = 0, i135 = 0, i136 = 0, i137 = 0, i138 = 0, i139 = 0, i140 = 0, i141 = 0, i142 = 0, i143 = 0, i144 = 0, i145 = 0, i146 = 0, i147 = 0, i148 = 0, i149 = 0, i150 = 0, i151 = 0, i152 = 0, i153 = 0, i154 = 0, i155 = 0, i156 = 0, i157 = 0, i158 = 0, i159 = 0, i160 = 0, i161 = 0, i162 = 0, i163 = 0, i164 = 0, i165 = 0, i166 = 0, i167 = 0, i168 = 0, i169 = 0, i170 = 0, i171 = 0, i172 = 0, i173 = 0, i174 = 0, i175 = 0, i176 = 0, i177 = 0, i178 = 0, i179 = 0, i180 = 0, i181 = 0, i182 = 0, i183 = 0, i184 = 0, i185 = 0, i186 = 0, i187 = 0, i188 = 0, i189 = 0, i190 = 0, i191 = 0, i192 = 0, i193 = 0, i194 = 0, i195 = 0, i196 = 0, i197 = 0, i198 = 0, i199 = 0, f200 = f0, f201 = f0, f202 = f0, f203 = f0, f204 = f0, f205 = f0, i206 = 0, f207 = f0, f208 = f0, f209 = f0, f210 = f0, f211 = f0, f212 = f0, i213 = 0, d214 = 0.0, f215 = f0, f216 = f0, i217 = 0, f218 = f0, f219 = f0, f220 = f0, f221 = f0, f222 = f0, f223 = f0, i224 = 0, i225 = 0, f226 = f0, f227 = f0, f228 = f0, i229 = 0, f230 = f0, f231 = f0, f232 = f0, f233 = f0, f234 = f0, f235 = f0, f236 = f0, i237 = 0, i238 = 0, i239 = 0, i240 = 0, i241 = 0, i242 = 0, i243 = 0, i244 = 0, f245 = f0, f246 = f0, f247 = f0, f248 = f0, f249 = f0, f250 = f0, f251 = f0, f252 = f0, f253 = f0, f254 = f0, f255 = f0, f256 = f0, f257 = f0, f258 = f0, f259 = f0, f260 = f0, f261 = f0, f262 = f0, i263 = 0, f264 = f0, f265 = f0, f266 = f0, f267 = f0, f268 = f0, f269 = f0, f270 = f0, f271 = f0, f272 = f0, f273 = f0, f274 = f0, f275 = f0, f276 = f0, f277 = f0, f278 = f0, f279 = f0, f280 = f0, f281 = f0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 1152 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1152);
 i4 = i3 + 1080 | 0;
 i5 = i3 + 1064 | 0;
 i6 = i3 + 1e3 | 0;
 i7 = i3 + 984 | 0;
 i8 = i3 + 920 | 0;
 i9 = i3 + 908 | 0;
 i10 = i3 + 896 | 0;
 i11 = i3 + 832 | 0;
 i12 = i3 + 816 | 0;
 i13 = i3 + 752 | 0;
 i14 = i3 + 740 | 0;
 i15 = i3 + 728 | 0;
 i16 = i3 + 664 | 0;
 i17 = i3 + 652 | 0;
 i18 = i3 + 640 | 0;
 i19 = i3 + 576 | 0;
 i20 = i3 + 512 | 0;
 i21 = i3 + 448 | 0;
 i22 = i3 + 384 | 0;
 i23 = i3 + 320 | 0;
 i24 = i3 + 256 | 0;
 i25 = i3 + 192 | 0;
 i26 = i3 + 128 | 0;
 i27 = i3 + 64 | 0;
 i28 = i3;
 __ZN11RenderQueue5clearEv(i1);
 i29 = i1 + 248 | 0;
 if (!(HEAP32[HEAP32[i29 >> 2] >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 i30 = i1 + 252 | 0;
 i31 = i5 + 4 | 0;
 i32 = i5 + 8 | 0;
 i33 = i6 + 4 | 0;
 i34 = i6 + 20 | 0;
 i35 = i6 + 24 | 0;
 i36 = i6 + 40 | 0;
 i37 = i6 + 44 | 0;
 i38 = i6 + 48 | 0;
 i39 = i6 + 52 | 0;
 i40 = i6 + 56 | 0;
 i41 = i6 + 60 | 0;
 i42 = i7 + 4 | 0;
 i43 = i7 + 8 | 0;
 i44 = i8 + 4 | 0;
 i45 = i8 + 20 | 0;
 i46 = i8 + 24 | 0;
 i47 = i8 + 40 | 0;
 i48 = i8 + 44 | 0;
 i49 = i8 + 48 | 0;
 i50 = i8 + 52 | 0;
 i51 = i8 + 56 | 0;
 i52 = i8 + 60 | 0;
 i53 = i10 + 4 | 0;
 i54 = i10 + 8 | 0;
 i55 = i11 + 4 | 0;
 i56 = i11 + 20 | 0;
 i57 = i11 + 24 | 0;
 i58 = i11 + 40 | 0;
 i59 = i11 + 44 | 0;
 i60 = i11 + 48 | 0;
 i61 = i11 + 52 | 0;
 i62 = i11 + 56 | 0;
 i63 = i11 + 60 | 0;
 i64 = i9 + 4 | 0;
 i65 = i9 + 8 | 0;
 i66 = i12 + 4 | 0;
 i67 = i12 + 8 | 0;
 i68 = i13 + 4 | 0;
 i69 = i13 + 20 | 0;
 i70 = i13 + 24 | 0;
 i71 = i13 + 40 | 0;
 i72 = i13 + 44 | 0;
 i73 = i13 + 48 | 0;
 i74 = i13 + 52 | 0;
 i75 = i13 + 56 | 0;
 i76 = i13 + 60 | 0;
 i77 = i15 + 4 | 0;
 i78 = i15 + 8 | 0;
 i79 = i16 + 4 | 0;
 i80 = i16 + 20 | 0;
 i81 = i16 + 24 | 0;
 i82 = i16 + 40 | 0;
 i83 = i16 + 44 | 0;
 i84 = i16 + 48 | 0;
 i85 = i16 + 52 | 0;
 i86 = i16 + 56 | 0;
 i87 = i16 + 60 | 0;
 i88 = i14 + 4 | 0;
 i89 = i14 + 8 | 0;
 i90 = i22 + 4 | 0;
 i91 = i22 + 20 | 0;
 i92 = i22 + 24 | 0;
 i93 = i22 + 40 | 0;
 i94 = i22 + 44 | 0;
 i95 = i22 + 48 | 0;
 i96 = i22 + 52 | 0;
 i97 = i22 + 56 | 0;
 i98 = i22 + 60 | 0;
 i99 = i24 + 4 | 0;
 i100 = i24 + 20 | 0;
 i101 = i24 + 24 | 0;
 i102 = i24 + 40 | 0;
 i103 = i24 + 44 | 0;
 i104 = i24 + 48 | 0;
 i105 = i24 + 52 | 0;
 i106 = i24 + 56 | 0;
 i107 = i24 + 60 | 0;
 i108 = i26 + 4 | 0;
 i109 = i26 + 20 | 0;
 i110 = i26 + 24 | 0;
 i111 = i26 + 40 | 0;
 i112 = i26 + 44 | 0;
 i113 = i26 + 48 | 0;
 i114 = i26 + 52 | 0;
 i115 = i26 + 56 | 0;
 i116 = i26 + 60 | 0;
 i117 = i28 + 4 | 0;
 i118 = i28 + 20 | 0;
 i119 = i28 + 24 | 0;
 i120 = i28 + 40 | 0;
 i121 = i28 + 44 | 0;
 i122 = i28 + 48 | 0;
 i123 = i28 + 52 | 0;
 i124 = i28 + 56 | 0;
 i125 = i28 + 60 | 0;
 i126 = i27 + 4 | 0;
 i127 = i27 + 8 | 0;
 i128 = i27 + 12 | 0;
 i129 = i27 + 16 | 0;
 i130 = i27 + 20 | 0;
 i131 = i27 + 24 | 0;
 i132 = i27 + 40 | 0;
 i133 = i27 + 44 | 0;
 i134 = i27 + 48 | 0;
 i135 = i27 + 52 | 0;
 i136 = i27 + 56 | 0;
 i137 = i27 + 60 | 0;
 i138 = i25 + 4 | 0;
 i139 = i25 + 8 | 0;
 i140 = i25 + 12 | 0;
 i141 = i25 + 16 | 0;
 i142 = i25 + 20 | 0;
 i143 = i25 + 24 | 0;
 i144 = i25 + 40 | 0;
 i145 = i25 + 44 | 0;
 i146 = i25 + 48 | 0;
 i147 = i25 + 52 | 0;
 i148 = i25 + 56 | 0;
 i149 = i25 + 60 | 0;
 i150 = i23 + 4 | 0;
 i151 = i23 + 8 | 0;
 i152 = i23 + 12 | 0;
 i153 = i23 + 16 | 0;
 i154 = i23 + 20 | 0;
 i155 = i23 + 24 | 0;
 i156 = i23 + 40 | 0;
 i157 = i23 + 44 | 0;
 i158 = i23 + 48 | 0;
 i159 = i23 + 52 | 0;
 i160 = i23 + 56 | 0;
 i161 = i23 + 60 | 0;
 i162 = i21 + 4 | 0;
 i163 = i21 + 20 | 0;
 i164 = i21 + 24 | 0;
 i165 = i21 + 40 | 0;
 i166 = i21 + 44 | 0;
 i167 = i21 + 48 | 0;
 i168 = i21 + 52 | 0;
 i169 = i21 + 56 | 0;
 i170 = i21 + 60 | 0;
 i171 = i18 + 4 | 0;
 i172 = i18 + 8 | 0;
 i173 = i19 + 4 | 0;
 i174 = i19 + 8 | 0;
 i175 = i19 + 12 | 0;
 i176 = i19 + 16 | 0;
 i177 = i19 + 20 | 0;
 i178 = i19 + 24 | 0;
 i179 = i19 + 28 | 0;
 i180 = i19 + 32 | 0;
 i181 = i19 + 36 | 0;
 i182 = i19 + 40 | 0;
 i183 = i19 + 44 | 0;
 i184 = i19 + 48 | 0;
 i185 = i19 + 52 | 0;
 i186 = i19 + 56 | 0;
 i187 = i19 + 60 | 0;
 i188 = i20 + 4 | 0;
 i189 = i20 + 20 | 0;
 i190 = i20 + 24 | 0;
 i191 = i20 + 40 | 0;
 i192 = i20 + 44 | 0;
 i193 = i20 + 48 | 0;
 i194 = i20 + 52 | 0;
 i195 = i20 + 56 | 0;
 i196 = i20 + 60 | 0;
 i197 = i17 + 4 | 0;
 i198 = i17 + 8 | 0;
 i199 = 0;
 f200 = Math_fround(0.0);
 f201 = Math_fround(0.0);
 f202 = Math_fround(0.0);
 f203 = Math_fround(0.0);
 f204 = Math_fround(0.0);
 f205 = Math_fround(0.0);
 i206 = HEAP32[i29 >> 2] | 0;
 while (1) {
  if (!(HEAP32[i206 + 4 >> 2] | 0)) {
   f207 = f200;
   f208 = f201;
   f209 = f202;
   f210 = f203;
   f211 = f204;
   f212 = f205;
   i213 = i206;
  } else {
   d214 = +(i199 | 0);
   f215 = Math_fround(i199 | 0);
   f216 = Math_fround(f215 * Math_fround(0.0));
   i217 = 0;
   f218 = f200;
   f219 = f201;
   f220 = f202;
   f221 = f203;
   f222 = f204;
   f223 = f205;
   i224 = i206;
   while (1) {
    i225 = HEAP32[i30 >> 2] | 0;
    f226 = Math_fround(HEAPF32[i225 + 68 >> 2]);
    f227 = Math_fround(d214 - +HEAPF64[i225 + 48 >> 3]);
    f228 = Math_fround(+(i217 | 0) - +HEAPF64[i225 + 56 >> 3]);
    i229 = HEAP32[i225 + 72 >> 2] | 0;
    f230 = Math_fround(Math_fround(13.1999998) / Math_fround(HEAP32[i229 + 4 >> 2] | 0));
    f231 = Math_fround(Math_fround(9.39999961) / Math_fround(HEAP32[i229 + 8 >> 2] | 0));
    f232 = Math_fround(f227 + f228);
    do if (Math_fround(Math_fround(f226 * Math_fround(f232 + Math_fround(1.0))) * f231) > Math_fround(-1.0)) if (Math_fround(Math_fround(f226 * Math_fround(f232 + Math_fround(-1.0))) * f231) < Math_fround(1.0)) {
     f233 = Math_fround(f227 - f228);
     if (Math_fround(f230 * Math_fround(f226 * Math_fround(f233 + Math_fround(1.0)))) > Math_fround(-1.0)) if (Math_fround(f230 * Math_fround(f226 * Math_fround(f233 + Math_fround(-1.0)))) < Math_fround(1.0)) {
      f233 = Math_fround(i217 | 0);
      f234 = Math_fround(f233 * Math_fround(0.0));
      f235 = Math_fround(Math_fround(f234 + f215) + Math_fround(0.0));
      f236 = Math_fround(Math_fround(f216 + f233) + Math_fround(0.0));
      f233 = Math_fround(Math_fround(f216 + f234) + Math_fround(0.0));
      f234 = Math_fround(f233 + Math_fround(1.0));
      i229 = __ZN7CityMap7getTileEjj(i224, i199, i217) | 0;
      i225 = i229 + 12 | 0;
      i237 = HEAP32[i225 >> 2] | 0;
      if ((i237 | 0) == 2) {
       __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i30 >> 2] | 0) + 40 >> 2] | 0);
       __ZN11RenderQueue7setMeshEi(i1, 39);
       HEAPF32[i5 >> 2] = Math_fround(.5);
       HEAPF32[i31 >> 2] = Math_fround(.5);
       HEAPF32[i32 >> 2] = Math_fround(1.0);
       HEAP32[i4 >> 2] = HEAP32[i5 >> 2];
       HEAP32[i4 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
       HEAP32[i4 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
       __ZN11RenderQueue10setDiffuseEN3glm3vecILi3EfLNS0_9qualifierE0EEE(i1, i4);
       HEAPF32[i6 >> 2] = Math_fround(.469999999);
       HEAP32[i33 >> 2] = 0;
       HEAP32[i33 + 4 >> 2] = 0;
       HEAP32[i33 + 8 >> 2] = 0;
       HEAP32[i33 + 12 >> 2] = 0;
       HEAPF32[i34 >> 2] = Math_fround(.469999999);
       HEAP32[i35 >> 2] = 0;
       HEAP32[i35 + 4 >> 2] = 0;
       HEAP32[i35 + 8 >> 2] = 0;
       HEAP32[i35 + 12 >> 2] = 0;
       HEAPF32[i36 >> 2] = Math_fround(.469999999);
       HEAPF32[i37 >> 2] = Math_fround(0.0);
       HEAPF32[i38 >> 2] = f235;
       HEAPF32[i39 >> 2] = f236;
       HEAPF32[i40 >> 2] = f233;
       HEAPF32[i41 >> 2] = f234;
       i238 = i4;
       i239 = i6;
       i240 = i238 + 64 | 0;
       do {
        HEAP32[i238 >> 2] = HEAP32[i239 >> 2];
        i238 = i238 + 4 | 0;
        i239 = i239 + 4 | 0;
       } while ((i238 | 0) < (i240 | 0));
       __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i4);
       i241 = HEAP32[i225 >> 2] | 0;
      } else i241 = i237;
      if ((i241 | 0) == 3) {
       __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i30 >> 2] | 0) + 40 >> 2] | 0);
       __ZN11RenderQueue7setMeshEi(i1, 39);
       HEAPF32[i7 >> 2] = Math_fround(1.0);
       HEAPF32[i42 >> 2] = Math_fround(.5);
       HEAPF32[i43 >> 2] = Math_fround(.5);
       HEAP32[i4 >> 2] = HEAP32[i7 >> 2];
       HEAP32[i4 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
       HEAP32[i4 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
       __ZN11RenderQueue10setDiffuseEN3glm3vecILi3EfLNS0_9qualifierE0EEE(i1, i4);
       HEAPF32[i8 >> 2] = Math_fround(.469999999);
       HEAP32[i44 >> 2] = 0;
       HEAP32[i44 + 4 >> 2] = 0;
       HEAP32[i44 + 8 >> 2] = 0;
       HEAP32[i44 + 12 >> 2] = 0;
       HEAPF32[i45 >> 2] = Math_fround(.469999999);
       HEAP32[i46 >> 2] = 0;
       HEAP32[i46 + 4 >> 2] = 0;
       HEAP32[i46 + 8 >> 2] = 0;
       HEAP32[i46 + 12 >> 2] = 0;
       HEAPF32[i47 >> 2] = Math_fround(.469999999);
       HEAPF32[i48 >> 2] = Math_fround(0.0);
       HEAPF32[i49 >> 2] = f235;
       HEAPF32[i50 >> 2] = f236;
       HEAPF32[i51 >> 2] = f233;
       HEAPF32[i52 >> 2] = f234;
       i238 = i4;
       i239 = i8;
       i240 = i238 + 64 | 0;
       do {
        HEAP32[i238 >> 2] = HEAP32[i239 >> 2];
        i238 = i238 + 4 | 0;
        i239 = i239 + 4 | 0;
       } while ((i238 | 0) < (i240 | 0));
       __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i4);
       i242 = HEAP32[i225 >> 2] | 0;
      } else i242 = i241;
      if ((i242 | 0) == 4) {
       __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i30 >> 2] | 0) + 40 >> 2] | 0);
       __ZN11RenderQueue7setMeshEi(i1, 40);
       if (!(HEAP32[i229 + 76 >> 2] & 4)) {
        HEAPF32[i10 >> 2] = Math_fround(.5);
        HEAPF32[i53 >> 2] = Math_fround(.25);
        HEAPF32[i54 >> 2] = Math_fround(.25);
        HEAP32[i4 >> 2] = HEAP32[i10 >> 2];
        HEAP32[i4 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
        HEAP32[i4 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
        __ZN11RenderQueue10setDiffuseEN3glm3vecILi3EfLNS0_9qualifierE0EEE(i1, i4);
       } else {
        HEAPF32[i9 >> 2] = Math_fround(1.0);
        HEAPF32[i64 >> 2] = Math_fround(.5);
        HEAPF32[i65 >> 2] = Math_fround(.5);
        HEAP32[i4 >> 2] = HEAP32[i9 >> 2];
        HEAP32[i4 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
        HEAP32[i4 + 8 >> 2] = HEAP32[i9 + 8 >> 2];
        __ZN11RenderQueue10setDiffuseEN3glm3vecILi3EfLNS0_9qualifierE0EEE(i1, i4);
       }
       HEAPF32[i11 >> 2] = Math_fround(.270000011);
       HEAP32[i55 >> 2] = 0;
       HEAP32[i55 + 4 >> 2] = 0;
       HEAP32[i55 + 8 >> 2] = 0;
       HEAP32[i55 + 12 >> 2] = 0;
       HEAPF32[i56 >> 2] = Math_fround(.270000011);
       HEAP32[i57 >> 2] = 0;
       HEAP32[i57 + 4 >> 2] = 0;
       HEAP32[i57 + 8 >> 2] = 0;
       HEAP32[i57 + 12 >> 2] = 0;
       HEAPF32[i58 >> 2] = Math_fround(.270000011);
       HEAPF32[i59 >> 2] = Math_fround(0.0);
       HEAPF32[i60 >> 2] = f235;
       HEAPF32[i61 >> 2] = f236;
       HEAPF32[i62 >> 2] = f233;
       HEAPF32[i63 >> 2] = f234;
       i238 = i4;
       i239 = i11;
       i240 = i238 + 64 | 0;
       do {
        HEAP32[i238 >> 2] = HEAP32[i239 >> 2];
        i238 = i238 + 4 | 0;
        i239 = i239 + 4 | 0;
       } while ((i238 | 0) < (i240 | 0));
       __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i4);
       i243 = HEAP32[i225 >> 2] | 0;
      } else i243 = i242;
      if ((i243 | 0) == 5) {
       __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i30 >> 2] | 0) + 40 >> 2] | 0);
       __ZN11RenderQueue7setMeshEi(i1, 39);
       HEAPF32[i12 >> 2] = Math_fround(.5);
       HEAPF32[i66 >> 2] = Math_fround(1.0);
       HEAPF32[i67 >> 2] = Math_fround(.5);
       HEAP32[i4 >> 2] = HEAP32[i12 >> 2];
       HEAP32[i4 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
       HEAP32[i4 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
       __ZN11RenderQueue10setDiffuseEN3glm3vecILi3EfLNS0_9qualifierE0EEE(i1, i4);
       HEAPF32[i13 >> 2] = Math_fround(.469999999);
       HEAP32[i68 >> 2] = 0;
       HEAP32[i68 + 4 >> 2] = 0;
       HEAP32[i68 + 8 >> 2] = 0;
       HEAP32[i68 + 12 >> 2] = 0;
       HEAPF32[i69 >> 2] = Math_fround(.469999999);
       HEAP32[i70 >> 2] = 0;
       HEAP32[i70 + 4 >> 2] = 0;
       HEAP32[i70 + 8 >> 2] = 0;
       HEAP32[i70 + 12 >> 2] = 0;
       HEAPF32[i71 >> 2] = Math_fround(.469999999);
       HEAPF32[i72 >> 2] = Math_fround(0.0);
       HEAPF32[i73 >> 2] = f235;
       HEAPF32[i74 >> 2] = f236;
       HEAPF32[i75 >> 2] = f233;
       HEAPF32[i76 >> 2] = f234;
       i238 = i4;
       i239 = i13;
       i240 = i238 + 64 | 0;
       do {
        HEAP32[i238 >> 2] = HEAP32[i239 >> 2];
        i238 = i238 + 4 | 0;
        i239 = i239 + 4 | 0;
       } while ((i238 | 0) < (i240 | 0));
       __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i4);
       i244 = HEAP32[i225 >> 2] | 0;
      } else i244 = i243;
      if ((i244 | 0) == 6) {
       __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i30 >> 2] | 0) + 40 >> 2] | 0);
       __ZN11RenderQueue7setMeshEi(i1, 40);
       if (!(HEAP32[i229 + 76 >> 2] & 8)) {
        HEAPF32[i15 >> 2] = Math_fround(.25);
        HEAPF32[i77 >> 2] = Math_fround(.5);
        HEAPF32[i78 >> 2] = Math_fround(.25);
        HEAP32[i4 >> 2] = HEAP32[i15 >> 2];
        HEAP32[i4 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
        HEAP32[i4 + 8 >> 2] = HEAP32[i15 + 8 >> 2];
        __ZN11RenderQueue10setDiffuseEN3glm3vecILi3EfLNS0_9qualifierE0EEE(i1, i4);
       } else {
        HEAPF32[i14 >> 2] = Math_fround(.5);
        HEAPF32[i88 >> 2] = Math_fround(1.0);
        HEAPF32[i89 >> 2] = Math_fround(.5);
        HEAP32[i4 >> 2] = HEAP32[i14 >> 2];
        HEAP32[i4 + 4 >> 2] = HEAP32[i14 + 4 >> 2];
        HEAP32[i4 + 8 >> 2] = HEAP32[i14 + 8 >> 2];
        __ZN11RenderQueue10setDiffuseEN3glm3vecILi3EfLNS0_9qualifierE0EEE(i1, i4);
       }
       HEAPF32[i16 >> 2] = Math_fround(.270000011);
       HEAP32[i79 >> 2] = 0;
       HEAP32[i79 + 4 >> 2] = 0;
       HEAP32[i79 + 8 >> 2] = 0;
       HEAP32[i79 + 12 >> 2] = 0;
       HEAPF32[i80 >> 2] = Math_fround(.270000011);
       HEAP32[i81 >> 2] = 0;
       HEAP32[i81 + 4 >> 2] = 0;
       HEAP32[i81 + 8 >> 2] = 0;
       HEAP32[i81 + 12 >> 2] = 0;
       HEAPF32[i82 >> 2] = Math_fround(.270000011);
       HEAPF32[i83 >> 2] = Math_fround(0.0);
       HEAPF32[i84 >> 2] = f235;
       HEAPF32[i85 >> 2] = f236;
       HEAPF32[i86 >> 2] = f233;
       HEAPF32[i87 >> 2] = f234;
       i238 = i4;
       i239 = i16;
       i240 = i238 + 64 | 0;
       do {
        HEAP32[i238 >> 2] = HEAP32[i239 >> 2];
        i238 = i238 + 4 | 0;
        i239 = i239 + 4 | 0;
       } while ((i238 | 0) < (i240 | 0));
       __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i4);
      }
      i225 = i229 + 44 | 0;
      i237 = HEAP32[i225 >> 2] | 0;
      if (i237 | 0) {
       f245 = Math_fround(f233 + Math_fround(-.174999997));
       f246 = Math_fround(f234 + Math_fround(0.0));
       f247 = Math_fround(Math_fround(HEAP32[i229 + 52 >> 2] | 0) * Math_fround(1.57079637));
       f248 = Math_fround(_cosf(f247));
       f249 = Math_fround(_sinf(f247));
       f247 = Math_fround(Math_fround(1.0) - f248);
       f250 = Math_fround(f247 * Math_fround(0.0));
       f251 = Math_fround(f250 * Math_fround(0.0));
       f252 = Math_fround(f248 + f251);
       f253 = Math_fround(f249 + f251);
       f254 = Math_fround(f249 * Math_fround(0.0));
       f255 = Math_fround(f250 - f254);
       f256 = Math_fround(f251 - f249);
       f249 = Math_fround(f254 + f250);
       f250 = Math_fround(f248 + f247);
       f247 = Math_fround(f252 * Math_fround(.5));
       f248 = Math_fround(f252 * Math_fround(0.0));
       f252 = Math_fround(f253 * Math_fround(0.0));
       f254 = Math_fround(f248 + f252);
       f251 = Math_fround(f255 * Math_fround(0.0));
       f257 = Math_fround(f255 * Math_fround(.5));
       f255 = Math_fround(f251 + Math_fround(f247 + f252));
       f252 = Math_fround(f251 + Math_fround(f248 + Math_fround(f253 * Math_fround(.5))));
       f253 = Math_fround(f257 + f254);
       f258 = Math_fround(f251 + f254);
       f254 = Math_fround(f256 * Math_fround(0.0));
       f259 = Math_fround(f254 + f248);
       f260 = Math_fround(f249 * Math_fround(0.0));
       f261 = Math_fround(f249 * Math_fround(.5));
       f249 = Math_fround(f260 + Math_fround(Math_fround(f256 * Math_fround(.5)) + f248));
       f248 = Math_fround(f260 + Math_fround(f254 + f247));
       f247 = Math_fround(f261 + f259);
       f254 = Math_fround(f260 + f259);
       f259 = Math_fround(f260 + f251);
       f256 = Math_fround(f250 * Math_fround(0.0));
       f262 = Math_fround(f256 + Math_fround(f261 + f251));
       f251 = Math_fround(f256 + Math_fround(f260 + f257));
       f257 = Math_fround(Math_fround(f250 * Math_fround(.5)) + f259);
       f250 = Math_fround(f256 + f259);
       i263 = (i237 | 0) == 1;
       f259 = i263 ? Math_fround(.376470596) : f221;
       f256 = i263 ? Math_fround(.572549045) : f222;
       f260 = i263 ? Math_fround(.721568644) : f223;
       switch (i237 | 0) {
       case 2:
        {
         f264 = Math_fround(.482352942);
         f265 = Math_fround(.250980407);
         f266 = Math_fround(.250980407);
         f267 = Math_fround(.721568644);
         f268 = Math_fround(.376470596);
         f269 = Math_fround(.376470596);
         i2 = 31;
         break;
        }
       case 3:
        {
         f264 = f218;
         f265 = f219;
         f266 = f220;
         f267 = Math_fround(.376470596);
         f268 = Math_fround(.721568644);
         f269 = Math_fround(.4627451);
         i2 = 31;
         break;
        }
       case 1:
        {
         f270 = Math_fround(.250980407);
         f271 = Math_fround(.384313732);
         f272 = Math_fround(.482352942);
         f273 = f259;
         f274 = f256;
         f275 = f260;
         break;
        }
       default:
        {
         f264 = f218;
         f265 = f219;
         f266 = f220;
         f267 = f259;
         f268 = f256;
         f269 = f260;
         i2 = 31;
        }
       }
       if ((i2 | 0) == 31) {
        i2 = 0;
        i263 = (i237 | 0) == 3;
        f260 = i263 ? Math_fround(.250980407) : f264;
        f256 = i263 ? Math_fround(.482352942) : f265;
        f270 = f260;
        f271 = f256;
        f272 = i263 ? Math_fround(.309803933) : f266;
        f273 = f267;
        f274 = f268;
        f275 = f269;
       }
       __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i30 >> 2] | 0) + 40 >> 2] | 0);
       __ZN11RenderQueue7setMeshEi(i1, (HEAP32[i229 + 48 >> 2] | 0) + 18 | 0);
       if (!(1 << HEAP32[i225 >> 2] & HEAP32[i229 + 76 >> 2])) {
        HEAPF32[i18 >> 2] = f270;
        HEAPF32[i171 >> 2] = f271;
        HEAPF32[i172 >> 2] = f272;
        HEAP32[i4 >> 2] = HEAP32[i18 >> 2];
        HEAP32[i4 + 4 >> 2] = HEAP32[i18 + 4 >> 2];
        HEAP32[i4 + 8 >> 2] = HEAP32[i18 + 8 >> 2];
        __ZN11RenderQueue10setDiffuseEN3glm3vecILi3EfLNS0_9qualifierE0EEE(i1, i4);
       } else {
        HEAPF32[i17 >> 2] = f273;
        HEAPF32[i197 >> 2] = f274;
        HEAPF32[i198 >> 2] = f275;
        HEAP32[i4 >> 2] = HEAP32[i17 >> 2];
        HEAP32[i4 + 4 >> 2] = HEAP32[i17 + 4 >> 2];
        HEAP32[i4 + 8 >> 2] = HEAP32[i17 + 8 >> 2];
        __ZN11RenderQueue10setDiffuseEN3glm3vecILi3EfLNS0_9qualifierE0EEE(i1, i4);
       }
       HEAPF32[i19 >> 2] = f255;
       HEAPF32[i173 >> 2] = f252;
       HEAPF32[i174 >> 2] = f253;
       HEAPF32[i175 >> 2] = f258;
       HEAPF32[i176 >> 2] = f249;
       HEAPF32[i177 >> 2] = f248;
       HEAPF32[i178 >> 2] = f247;
       HEAPF32[i179 >> 2] = f254;
       HEAPF32[i180 >> 2] = f262;
       HEAPF32[i181 >> 2] = f251;
       HEAPF32[i182 >> 2] = f257;
       HEAPF32[i183 >> 2] = f250;
       HEAPF32[i184 >> 2] = f235;
       HEAPF32[i185 >> 2] = f236;
       HEAPF32[i186 >> 2] = f245;
       HEAPF32[i187 >> 2] = f246;
       i238 = i4;
       i239 = i19;
       i240 = i238 + 64 | 0;
       do {
        HEAP32[i238 >> 2] = HEAP32[i239 >> 2];
        i238 = i238 + 4 | 0;
        i239 = i239 + 4 | 0;
       } while ((i238 | 0) < (i240 | 0));
       __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i4);
       __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i30 >> 2] | 0) + 44 >> 2] | 0);
       __ZN11RenderQueue7setMeshEi(i1, 25);
       HEAP32[i20 >> 2] = 1065353216;
       HEAP32[i188 >> 2] = 0;
       HEAP32[i188 + 4 >> 2] = 0;
       HEAP32[i188 + 8 >> 2] = 0;
       HEAP32[i188 + 12 >> 2] = 0;
       HEAP32[i189 >> 2] = 1065353216;
       HEAP32[i190 >> 2] = 0;
       HEAP32[i190 + 4 >> 2] = 0;
       HEAP32[i190 + 8 >> 2] = 0;
       HEAP32[i190 + 12 >> 2] = 0;
       HEAP32[i191 >> 2] = 1065353216;
       HEAPF32[i192 >> 2] = Math_fround(0.0);
       f245 = Math_fround(f233 + Math_fround(-.330000013));
       HEAPF32[i193 >> 2] = f235;
       HEAPF32[i194 >> 2] = f236;
       HEAPF32[i195 >> 2] = f245;
       HEAPF32[i196 >> 2] = f246;
       i238 = i4;
       i239 = i20;
       i240 = i238 + 64 | 0;
       do {
        HEAP32[i238 >> 2] = HEAP32[i239 >> 2];
        i238 = i238 + 4 | 0;
        i239 = i239 + 4 | 0;
       } while ((i238 | 0) < (i240 | 0));
       __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i4);
       f276 = f270;
       f277 = f271;
       f278 = f272;
       f279 = f273;
       f280 = f274;
       f281 = f275;
       break;
      }
      f246 = Math_fround(f235 + Math_fround(.25));
      f245 = Math_fround(f236 + Math_fround(-.25));
      f250 = Math_fround(f233 + Math_fround(-.324999988));
      f257 = Math_fround(f234 + Math_fround(0.0));
      i225 = i229 + 56 | 0;
      if (!(HEAP32[i225 >> 2] | 0)) {
       f251 = Math_fround(f246 + Math_fround(0.0));
       f262 = Math_fround(f245 + Math_fround(0.0));
       f254 = Math_fround(f250 + Math_fround(.319999993));
       __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i30 >> 2] | 0) + 44 >> 2] | 0);
       __ZN11RenderQueue7setMeshEi(i1, 24);
       HEAPF32[i22 >> 2] = Math_fround(.5);
       HEAP32[i90 >> 2] = 0;
       HEAP32[i90 + 4 >> 2] = 0;
       HEAP32[i90 + 8 >> 2] = 0;
       HEAP32[i90 + 12 >> 2] = 0;
       HEAPF32[i91 >> 2] = Math_fround(.5);
       HEAP32[i92 >> 2] = 0;
       HEAP32[i92 + 4 >> 2] = 0;
       HEAP32[i92 + 8 >> 2] = 0;
       HEAP32[i92 + 12 >> 2] = 0;
       HEAPF32[i93 >> 2] = Math_fround(.5);
       HEAPF32[i94 >> 2] = Math_fround(0.0);
       HEAPF32[i95 >> 2] = f251;
       HEAPF32[i96 >> 2] = f262;
       HEAPF32[i97 >> 2] = f254;
       HEAPF32[i98 >> 2] = f257;
       i238 = i4;
       i239 = i22;
       i240 = i238 + 64 | 0;
       do {
        HEAP32[i238 >> 2] = HEAP32[i239 >> 2];
        i238 = i238 + 4 | 0;
        i239 = i239 + 4 | 0;
       } while ((i238 | 0) < (i240 | 0));
       __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i4);
      } else {
       HEAPF32[i21 >> 2] = Math_fround(.5);
       HEAP32[i162 >> 2] = 0;
       HEAP32[i162 + 4 >> 2] = 0;
       HEAP32[i162 + 8 >> 2] = 0;
       HEAP32[i162 + 12 >> 2] = 0;
       HEAPF32[i163 >> 2] = Math_fround(.5);
       HEAP32[i164 >> 2] = 0;
       HEAP32[i164 + 4 >> 2] = 0;
       HEAP32[i164 + 8 >> 2] = 0;
       HEAP32[i164 + 12 >> 2] = 0;
       HEAPF32[i165 >> 2] = Math_fround(.5);
       HEAPF32[i166 >> 2] = Math_fround(0.0);
       HEAPF32[i167 >> 2] = f246;
       HEAPF32[i168 >> 2] = f245;
       HEAPF32[i169 >> 2] = f250;
       HEAPF32[i170 >> 2] = f257;
       i263 = HEAP32[i225 >> 2] & 255;
       i238 = i4;
       i239 = i21;
       i240 = i238 + 64 | 0;
       do {
        HEAP32[i238 >> 2] = HEAP32[i239 >> 2];
        i238 = i238 + 4 | 0;
        i239 = i239 + 4 | 0;
       } while ((i238 | 0) < (i240 | 0));
       __ZN15CityMapRenderer13drawCliffSideEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEEcb(i1, i4, i263, 0);
      }
      f233 = Math_fround(f236 + Math_fround(.25));
      i225 = i229 + 60 | 0;
      if (!(HEAP32[i225 >> 2] | 0)) {
       f254 = Math_fround(f246 + Math_fround(0.0));
       f262 = Math_fround(f233 + Math_fround(0.0));
       f251 = Math_fround(f250 + Math_fround(.319999993));
       __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i30 >> 2] | 0) + 44 >> 2] | 0);
       __ZN11RenderQueue7setMeshEi(i1, 24);
       HEAPF32[i24 >> 2] = Math_fround(.5);
       HEAP32[i99 >> 2] = 0;
       HEAP32[i99 + 4 >> 2] = 0;
       HEAP32[i99 + 8 >> 2] = 0;
       HEAP32[i99 + 12 >> 2] = 0;
       HEAPF32[i100 >> 2] = Math_fround(.5);
       HEAP32[i101 >> 2] = 0;
       HEAP32[i101 + 4 >> 2] = 0;
       HEAP32[i101 + 8 >> 2] = 0;
       HEAP32[i101 + 12 >> 2] = 0;
       HEAPF32[i102 >> 2] = Math_fround(.5);
       HEAPF32[i103 >> 2] = Math_fround(0.0);
       HEAPF32[i104 >> 2] = f254;
       HEAPF32[i105 >> 2] = f262;
       HEAPF32[i106 >> 2] = f251;
       HEAPF32[i107 >> 2] = f257;
       i238 = i4;
       i239 = i24;
       i240 = i238 + 64 | 0;
       do {
        HEAP32[i238 >> 2] = HEAP32[i239 >> 2];
        i238 = i238 + 4 | 0;
        i239 = i239 + 4 | 0;
       } while ((i238 | 0) < (i240 | 0));
       __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i4);
      } else {
       HEAPF32[i23 >> 2] = Math_fround(-2.18556941e-08);
       HEAPF32[i150 >> 2] = Math_fround(.5);
       HEAPF32[i151 >> 2] = Math_fround(0.0);
       HEAPF32[i152 >> 2] = Math_fround(0.0);
       HEAPF32[i153 >> 2] = Math_fround(-.5);
       HEAPF32[i154 >> 2] = Math_fround(-2.18556941e-08);
       HEAP32[i155 >> 2] = 0;
       HEAP32[i155 + 4 >> 2] = 0;
       HEAP32[i155 + 8 >> 2] = 0;
       HEAP32[i155 + 12 >> 2] = 0;
       HEAPF32[i156 >> 2] = Math_fround(.49999997);
       HEAPF32[i157 >> 2] = Math_fround(0.0);
       HEAPF32[i158 >> 2] = f246;
       HEAPF32[i159 >> 2] = f233;
       HEAPF32[i160 >> 2] = f250;
       HEAPF32[i161 >> 2] = f257;
       i263 = HEAP32[i225 >> 2] & 255;
       i238 = i4;
       i239 = i23;
       i240 = i238 + 64 | 0;
       do {
        HEAP32[i238 >> 2] = HEAP32[i239 >> 2];
        i238 = i238 + 4 | 0;
        i239 = i239 + 4 | 0;
       } while ((i238 | 0) < (i240 | 0));
       __ZN15CityMapRenderer13drawCliffSideEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEEcb(i1, i4, i263, 0);
      }
      f246 = Math_fround(f235 + Math_fround(-.25));
      i225 = HEAP32[i229 + 68 >> 2] | 0;
      if (!i225) {
       f236 = Math_fround(f246 + Math_fround(0.0));
       f251 = Math_fround(f233 + Math_fround(0.0));
       f262 = Math_fround(f250 + Math_fround(.319999993));
       __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i30 >> 2] | 0) + 44 >> 2] | 0);
       __ZN11RenderQueue7setMeshEi(i1, 24);
       HEAPF32[i26 >> 2] = Math_fround(.5);
       HEAP32[i108 >> 2] = 0;
       HEAP32[i108 + 4 >> 2] = 0;
       HEAP32[i108 + 8 >> 2] = 0;
       HEAP32[i108 + 12 >> 2] = 0;
       HEAPF32[i109 >> 2] = Math_fround(.5);
       HEAP32[i110 >> 2] = 0;
       HEAP32[i110 + 4 >> 2] = 0;
       HEAP32[i110 + 8 >> 2] = 0;
       HEAP32[i110 + 12 >> 2] = 0;
       HEAPF32[i111 >> 2] = Math_fround(.5);
       HEAPF32[i112 >> 2] = Math_fround(0.0);
       HEAPF32[i113 >> 2] = f236;
       HEAPF32[i114 >> 2] = f251;
       HEAPF32[i115 >> 2] = f262;
       HEAPF32[i116 >> 2] = f257;
       i238 = i4;
       i239 = i26;
       i240 = i238 + 64 | 0;
       do {
        HEAP32[i238 >> 2] = HEAP32[i239 >> 2];
        i238 = i238 + 4 | 0;
        i239 = i239 + 4 | 0;
       } while ((i238 | 0) < (i240 | 0));
       __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i4);
      } else {
       HEAPF32[i25 >> 2] = Math_fround(-.5);
       HEAPF32[i138 >> 2] = Math_fround(-4.37113883e-08);
       HEAPF32[i139 >> 2] = Math_fround(0.0);
       HEAPF32[i140 >> 2] = Math_fround(0.0);
       HEAPF32[i141 >> 2] = Math_fround(4.37113883e-08);
       HEAPF32[i142 >> 2] = Math_fround(-.5);
       HEAP32[i143 >> 2] = 0;
       HEAP32[i143 + 4 >> 2] = 0;
       HEAP32[i143 + 8 >> 2] = 0;
       HEAP32[i143 + 12 >> 2] = 0;
       HEAPF32[i144 >> 2] = Math_fround(.5);
       HEAPF32[i145 >> 2] = Math_fround(0.0);
       HEAPF32[i146 >> 2] = f246;
       HEAPF32[i147 >> 2] = f233;
       HEAPF32[i148 >> 2] = f250;
       HEAPF32[i149 >> 2] = f257;
       i263 = i225 & 255;
       i238 = i4;
       i239 = i25;
       i240 = i238 + 64 | 0;
       do {
        HEAP32[i238 >> 2] = HEAP32[i239 >> 2];
        i238 = i238 + 4 | 0;
        i239 = i239 + 4 | 0;
       } while ((i238 | 0) < (i240 | 0));
       __ZN15CityMapRenderer13drawCliffSideEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEEcb(i1, i4, i263, 0);
      }
      i225 = HEAP32[i229 + 64 >> 2] | 0;
      if (!i225) {
       f233 = Math_fround(f246 + Math_fround(0.0));
       f235 = Math_fround(f245 + Math_fround(0.0));
       f262 = Math_fround(f250 + Math_fround(.319999993));
       __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i30 >> 2] | 0) + 44 >> 2] | 0);
       __ZN11RenderQueue7setMeshEi(i1, 24);
       HEAPF32[i28 >> 2] = Math_fround(.5);
       HEAP32[i117 >> 2] = 0;
       HEAP32[i117 + 4 >> 2] = 0;
       HEAP32[i117 + 8 >> 2] = 0;
       HEAP32[i117 + 12 >> 2] = 0;
       HEAPF32[i118 >> 2] = Math_fround(.5);
       HEAP32[i119 >> 2] = 0;
       HEAP32[i119 + 4 >> 2] = 0;
       HEAP32[i119 + 8 >> 2] = 0;
       HEAP32[i119 + 12 >> 2] = 0;
       HEAPF32[i120 >> 2] = Math_fround(.5);
       HEAPF32[i121 >> 2] = Math_fround(0.0);
       HEAPF32[i122 >> 2] = f233;
       HEAPF32[i123 >> 2] = f235;
       HEAPF32[i124 >> 2] = f262;
       HEAPF32[i125 >> 2] = f257;
       i238 = i4;
       i239 = i28;
       i240 = i238 + 64 | 0;
       do {
        HEAP32[i238 >> 2] = HEAP32[i239 >> 2];
        i238 = i238 + 4 | 0;
        i239 = i239 + 4 | 0;
       } while ((i238 | 0) < (i240 | 0));
       __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i4);
       f276 = f218;
       f277 = f219;
       f278 = f220;
       f279 = f221;
       f280 = f222;
       f281 = f223;
       break;
      } else {
       HEAPF32[i27 >> 2] = Math_fround(5.96244032e-09);
       HEAPF32[i126 >> 2] = Math_fround(-.5);
       HEAPF32[i127 >> 2] = Math_fround(0.0);
       HEAPF32[i128 >> 2] = Math_fround(0.0);
       HEAPF32[i129 >> 2] = Math_fround(.5);
       HEAPF32[i130 >> 2] = Math_fround(5.96244032e-09);
       HEAP32[i131 >> 2] = 0;
       HEAP32[i131 + 4 >> 2] = 0;
       HEAP32[i131 + 8 >> 2] = 0;
       HEAP32[i131 + 12 >> 2] = 0;
       HEAPF32[i132 >> 2] = Math_fround(.5);
       HEAPF32[i133 >> 2] = Math_fround(0.0);
       HEAPF32[i134 >> 2] = f246;
       HEAPF32[i135 >> 2] = f245;
       HEAPF32[i136 >> 2] = f250;
       HEAPF32[i137 >> 2] = f234;
       i229 = i225 & 255;
       i238 = i4;
       i239 = i27;
       i240 = i238 + 64 | 0;
       do {
        HEAP32[i238 >> 2] = HEAP32[i239 >> 2];
        i238 = i238 + 4 | 0;
        i239 = i239 + 4 | 0;
       } while ((i238 | 0) < (i240 | 0));
       __ZN15CityMapRenderer13drawCliffSideEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEEcb(i1, i4, i229, 0);
       f276 = f218;
       f277 = f219;
       f278 = f220;
       f279 = f221;
       f280 = f222;
       f281 = f223;
       break;
      }
     } else {
      f276 = f218;
      f277 = f219;
      f278 = f220;
      f279 = f221;
      f280 = f222;
      f281 = f223;
     } else {
      f276 = f218;
      f277 = f219;
      f278 = f220;
      f279 = f221;
      f280 = f222;
      f281 = f223;
     }
    } else {
     f276 = f218;
     f277 = f219;
     f278 = f220;
     f279 = f221;
     f280 = f222;
     f281 = f223;
    } else {
     f276 = f218;
     f277 = f219;
     f278 = f220;
     f279 = f221;
     f280 = f222;
     f281 = f223;
    } while (0);
    i217 = i217 + 1 | 0;
    i225 = HEAP32[i29 >> 2] | 0;
    if (i217 >>> 0 >= (HEAP32[i225 + 4 >> 2] | 0) >>> 0) {
     f207 = f276;
     f208 = f277;
     f209 = f278;
     f210 = f279;
     f211 = f280;
     f212 = f281;
     i213 = i225;
     break;
    } else {
     f218 = f276;
     f219 = f277;
     f220 = f278;
     f221 = f279;
     f222 = f280;
     f223 = f281;
     i224 = i225;
    }
   }
  }
  i199 = i199 + 1 | 0;
  if (i199 >>> 0 >= (HEAP32[i213 >> 2] | 0) >>> 0) break; else {
   f200 = f207;
   f201 = f208;
   f202 = f209;
   f203 = f210;
   f204 = f211;
   f205 = f212;
   i206 = i213;
  }
 }
 STACKTOP = i3;
 return;
}

function __ZL21stbtt__run_charstringPK14stbtt_fontinfoiP12stbtt__csctx(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, f66 = f0, f67 = f0, f68 = f0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, f80 = f0, f81 = f0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, i90 = 0, i91 = 0, i92 = 0, i93 = 0, i94 = 0, i95 = 0, i96 = 0, i97 = 0, i98 = 0, i99 = 0, i100 = 0, i101 = 0, i102 = 0, i103 = 0, i104 = 0, i105 = 0, f106 = f0, f107 = f0, f108 = f0, f109 = f0, f110 = f0, f111 = f0, f112 = f0, f113 = f0, f114 = f0, i115 = 0, i116 = 0, i117 = 0, i118 = 0, i119 = 0, i120 = 0, i121 = 0, i122 = 0, f123 = f0, i124 = 0, i125 = 0, i126 = 0, i127 = 0, i128 = 0, f129 = f0, f130 = f0, i131 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 400 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(400);
 i6 = i5 + 376 | 0;
 i7 = i5;
 i8 = i5 + 364 | 0;
 i9 = i5 + 352 | 0;
 i10 = i5 + 160 | 0;
 i11 = i5 + 40 | 0;
 i12 = i5 + 24 | 0;
 i13 = i5 + 12 | 0;
 i14 = i1 + 88 | 0;
 HEAP32[i12 >> 2] = HEAP32[i14 >> 2];
 HEAP32[i12 + 4 >> 2] = HEAP32[i14 + 4 >> 2];
 HEAP32[i12 + 8 >> 2] = HEAP32[i14 + 8 >> 2];
 i14 = i1 + 64 | 0;
 HEAP32[i6 >> 2] = HEAP32[i14 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i14 + 4 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i14 + 8 >> 2];
 __ZL20stbtt__cff_index_get10stbtt__bufi(i13, i6, i2);
 i14 = i13 + 4 | 0;
 i15 = HEAP32[i14 >> 2] | 0;
 i16 = i13 + 8 | 0;
 i17 = HEAP32[i16 >> 2] | 0;
 if ((i15 | 0) >= (i17 | 0)) {
  i18 = 0;
  STACKTOP = i5;
  return i18 | 0;
 }
 i19 = i3 + 16 | 0;
 i20 = i3 + 20 | 0;
 i21 = i3 + 40 | 0;
 i22 = i3 + 44 | 0;
 i23 = i3 + 28 | 0;
 i24 = i3 + 36 | 0;
 i25 = i3 + 24 | 0;
 i26 = i3 + 32 | 0;
 i27 = i3 + 4 | 0;
 i28 = i1 + 120 | 0;
 i29 = i1 + 112 | 0;
 i30 = i1 + 52 | 0;
 i31 = i1 + 100 | 0;
 i32 = i1 + 76 | 0;
 i1 = i7 + 8 | 0;
 i33 = i7 + 4 | 0;
 i34 = i8 + 8 | 0;
 i35 = i8 + 4 | 0;
 i36 = i10 + 4 | 0;
 i37 = i10 + 8 | 0;
 i38 = i10 + 12 | 0;
 i39 = i10 + 16 | 0;
 i40 = i10 + 20 | 0;
 i41 = i10 + 24 | 0;
 i42 = i10 + 28 | 0;
 i43 = i10 + 32 | 0;
 i44 = i10 + 36 | 0;
 i45 = i10 + 40 | 0;
 i46 = i10 + 44 | 0;
 i47 = i2 + 1 | 0;
 i48 = (i2 | 0) < -1;
 i49 = 1;
 i50 = 0;
 i51 = 0;
 i52 = 0;
 i53 = 0;
 i54 = i17;
 i17 = i15;
 L4 : while (1) {
  i15 = i17 + 1 | 0;
  i55 = HEAP32[i13 >> 2] | 0;
  HEAP32[i14 >> 2] = i15;
  i56 = HEAP8[i55 + i17 >> 0] | 0;
  L6 : do switch (i56 << 24 >> 24) {
  case 14:
   {
    i4 = 177;
    break L4;
    break;
   }
  case 20:
  case 19:
   {
    if (!i49) i57 = i50; else i57 = i50 + ((i53 | 0) / 2 | 0) | 0;
    i58 = ((i57 + 7 | 0) / 8 | 0) + i15 | 0;
    if ((i58 | 0) < 0 | (i54 | 0) < (i58 | 0)) {
     i4 = 7;
     break L4;
    }
    HEAP32[i14 >> 2] = i58;
    i59 = 0;
    i60 = i57;
    i61 = i51;
    i62 = i52;
    i63 = 0;
    i4 = 205;
    break;
   }
  case 23:
  case 18:
  case 3:
  case 1:
   {
    i59 = i49;
    i60 = i50 + ((i53 | 0) / 2 | 0) | 0;
    i61 = i51;
    i62 = i52;
    i63 = 0;
    i4 = 205;
    break;
   }
  case 21:
   {
    if ((i53 | 0) < 2) {
     i18 = 0;
     i4 = 215;
     break L4;
    }
    __ZL21stbtt__csctx_rmove_toP12stbtt__csctxff(i3, Math_fround(HEAPF32[i10 + (i53 + -2 << 2) >> 2]), Math_fround(HEAPF32[i10 + (i53 + -1 << 2) >> 2]));
    i59 = 0;
    i60 = i50;
    i61 = i51;
    i62 = i52;
    i63 = 0;
    i4 = 205;
    break;
   }
  case 4:
   {
    if ((i53 | 0) < 1) {
     i18 = 0;
     i4 = 215;
     break L4;
    }
    __ZL21stbtt__csctx_rmove_toP12stbtt__csctxff(i3, Math_fround(0.0), Math_fround(HEAPF32[i10 + (i53 + -1 << 2) >> 2]));
    i59 = 0;
    i60 = i50;
    i61 = i51;
    i62 = i52;
    i63 = 0;
    i4 = 205;
    break;
   }
  case 22:
   {
    if ((i53 | 0) < 1) {
     i18 = 0;
     i4 = 215;
     break L4;
    }
    __ZL21stbtt__csctx_rmove_toP12stbtt__csctxff(i3, Math_fround(HEAPF32[i10 + (i53 + -1 << 2) >> 2]), Math_fround(0.0));
    i59 = 0;
    i60 = i50;
    i61 = i51;
    i62 = i52;
    i63 = 0;
    i4 = 205;
    break;
   }
  case 5:
   {
    if ((i53 | 0) < 2) {
     i18 = 0;
     i4 = 215;
     break L4;
    } else {
     i64 = 0;
     i65 = 1;
    }
    do {
     f66 = Math_fround(HEAPF32[i10 + (i64 << 2) >> 2]);
     f67 = Math_fround(HEAPF32[i10 + (i65 << 2) >> 2]);
     f68 = Math_fround(f66 + Math_fround(HEAPF32[i19 >> 2]));
     HEAPF32[i19 >> 2] = f68;
     f66 = Math_fround(f67 + Math_fround(HEAPF32[i20 >> 2]));
     HEAPF32[i20 >> 2] = f66;
     i58 = ~~f68;
     i69 = ~~f66;
     if (!(HEAP32[i3 >> 2] | 0)) {
      i70 = HEAP32[i21 >> 2] | 0;
      i71 = HEAP32[i22 >> 2] | 0;
      i72 = i70 + (i71 * 14 | 0) | 0;
      HEAP8[i72 + 12 >> 0] = 2;
      HEAP16[i72 >> 1] = i58;
      HEAP16[i72 + 2 >> 1] = i69;
      i70 = i72 + 4 | 0;
      i72 = i70;
      HEAP16[i72 >> 1] = 0;
      HEAP16[i72 + 2 >> 1] = 0 >>> 16;
      i72 = i70 + 4 | 0;
      HEAP16[i72 >> 1] = 0;
      HEAP16[i72 + 2 >> 1] = 0 >>> 16;
      i73 = i71;
     } else {
      if ((HEAP32[i23 >> 2] | 0) < (i58 | 0)) i4 = 20; else if (!(HEAP32[i27 >> 2] | 0)) i4 = 20;
      if ((i4 | 0) == 20) {
       i4 = 0;
       HEAP32[i23 >> 2] = i58;
      }
      if ((HEAP32[i24 >> 2] | 0) < (i69 | 0)) i4 = 23; else if (!(HEAP32[i27 >> 2] | 0)) i4 = 23;
      if ((i4 | 0) == 23) {
       i4 = 0;
       HEAP32[i24 >> 2] = i69;
      }
      if ((HEAP32[i25 >> 2] | 0) > (i58 | 0)) i4 = 26; else if (!(HEAP32[i27 >> 2] | 0)) i4 = 26;
      if ((i4 | 0) == 26) {
       i4 = 0;
       HEAP32[i25 >> 2] = i58;
      }
      if ((HEAP32[i26 >> 2] | 0) > (i69 | 0)) i4 = 29; else if (!(HEAP32[i27 >> 2] | 0)) i4 = 29;
      if ((i4 | 0) == 29) {
       i4 = 0;
       HEAP32[i26 >> 2] = i69;
      }
      HEAP32[i27 >> 2] = 1;
      i73 = HEAP32[i22 >> 2] | 0;
     }
     HEAP32[i22 >> 2] = i73 + 1;
     i64 = i64 + 2 | 0;
     i65 = i64 | 1;
    } while ((i65 | 0) < (i53 | 0));
    i59 = i49;
    i60 = i50;
    i61 = i51;
    i62 = i52;
    i63 = 0;
    i4 = 205;
    break;
   }
  case 7:
   {
    if ((i53 | 0) < 1) {
     i18 = 0;
     i4 = 215;
     break L4;
    } else {
     i74 = 0;
     i4 = 52;
    }
    break;
   }
  case 6:
   {
    if ((i53 | 0) < 1) {
     i18 = 0;
     i4 = 215;
     break L4;
    } else {
     i75 = 0;
     i4 = 35;
    }
    break;
   }
  case 31:
   {
    if ((i53 | 0) < 4) {
     i18 = 0;
     i4 = 215;
     break L4;
    } else {
     i76 = 0;
     i4 = 75;
    }
    break;
   }
  case 30:
   {
    if ((i53 | 0) < 4) {
     i18 = 0;
     i4 = 215;
     break L4;
    } else {
     i77 = 0;
     i4 = 71;
    }
    break;
   }
  case 8:
   {
    if ((i53 | 0) < 6) {
     i18 = 0;
     i4 = 215;
     break L4;
    } else {
     i78 = 0;
     i79 = 5;
    }
    while (1) {
     f66 = Math_fround(HEAPF32[i10 + (i78 << 2) >> 2]);
     f68 = Math_fround(HEAPF32[i10 + ((i78 | 1) << 2) >> 2]);
     f67 = Math_fround(HEAPF32[i10 + (i78 + 2 << 2) >> 2]);
     f80 = Math_fround(HEAPF32[i10 + (i78 + 3 << 2) >> 2]);
     f81 = Math_fround(HEAPF32[i10 + (i78 + 4 << 2) >> 2]);
     __ZL23stbtt__csctx_rccurve_toP12stbtt__csctxffffff(i3, f66, f68, f67, f80, f81, Math_fround(HEAPF32[i10 + (i79 << 2) >> 2]));
     i79 = i78 + 11 | 0;
     if ((i79 | 0) >= (i53 | 0)) {
      i59 = i49;
      i60 = i50;
      i61 = i51;
      i62 = i52;
      i63 = 0;
      i4 = 205;
      break;
     } else i78 = i78 + 6 | 0;
    }
    break;
   }
  case 24:
   {
    if ((i53 | 0) < 8) {
     i18 = 0;
     i4 = 215;
     break L4;
    }
    i69 = i53 + -2 | 0;
    i58 = 0;
    i71 = 5;
    do {
     f81 = Math_fround(HEAPF32[i10 + (i58 << 2) >> 2]);
     f80 = Math_fround(HEAPF32[i10 + ((i58 | 1) << 2) >> 2]);
     f67 = Math_fround(HEAPF32[i10 + (i58 + 2 << 2) >> 2]);
     f68 = Math_fround(HEAPF32[i10 + (i58 + 3 << 2) >> 2]);
     f66 = Math_fround(HEAPF32[i10 + (i58 + 4 << 2) >> 2]);
     __ZL23stbtt__csctx_rccurve_toP12stbtt__csctxffffff(i3, f81, f80, f67, f68, f66, Math_fround(HEAPF32[i10 + (i71 << 2) >> 2]));
     i72 = i58;
     i58 = i58 + 6 | 0;
     i71 = i72 + 11 | 0;
    } while ((i71 | 0) < (i69 | 0));
    i69 = i58 | 1;
    if ((i69 | 0) >= (i53 | 0)) {
     i18 = 0;
     i4 = 215;
     break L4;
    }
    f66 = Math_fround(HEAPF32[i10 + (i58 << 2) >> 2]);
    f68 = Math_fround(HEAPF32[i10 + (i69 << 2) >> 2]);
    f67 = Math_fround(f66 + Math_fround(HEAPF32[i19 >> 2]));
    HEAPF32[i19 >> 2] = f67;
    f66 = Math_fround(f68 + Math_fround(HEAPF32[i20 >> 2]));
    HEAPF32[i20 >> 2] = f66;
    i69 = ~~f67;
    i71 = ~~f66;
    if (!(HEAP32[i3 >> 2] | 0)) {
     i72 = HEAP32[i21 >> 2] | 0;
     i70 = HEAP32[i22 >> 2] | 0;
     i82 = i72 + (i70 * 14 | 0) | 0;
     HEAP8[i82 + 12 >> 0] = 2;
     HEAP16[i82 >> 1] = i69;
     HEAP16[i82 + 2 >> 1] = i71;
     i72 = i82 + 4 | 0;
     i82 = i72;
     HEAP16[i82 >> 1] = 0;
     HEAP16[i82 + 2 >> 1] = 0 >>> 16;
     i82 = i72 + 4 | 0;
     HEAP16[i82 >> 1] = 0;
     HEAP16[i82 + 2 >> 1] = 0 >>> 16;
     i83 = i70;
    } else {
     if ((HEAP32[i23 >> 2] | 0) < (i69 | 0)) i4 = 88; else if (!(HEAP32[i27 >> 2] | 0)) i4 = 88;
     if ((i4 | 0) == 88) {
      i4 = 0;
      HEAP32[i23 >> 2] = i69;
     }
     if ((HEAP32[i24 >> 2] | 0) < (i71 | 0)) i4 = 91; else if (!(HEAP32[i27 >> 2] | 0)) i4 = 91;
     if ((i4 | 0) == 91) {
      i4 = 0;
      HEAP32[i24 >> 2] = i71;
     }
     if ((HEAP32[i25 >> 2] | 0) > (i69 | 0)) i4 = 94; else if (!(HEAP32[i27 >> 2] | 0)) i4 = 94;
     if ((i4 | 0) == 94) {
      i4 = 0;
      HEAP32[i25 >> 2] = i69;
     }
     if ((HEAP32[i26 >> 2] | 0) > (i71 | 0)) i4 = 97; else if (!(HEAP32[i27 >> 2] | 0)) i4 = 97;
     if ((i4 | 0) == 97) {
      i4 = 0;
      HEAP32[i26 >> 2] = i71;
     }
     HEAP32[i27 >> 2] = 1;
     i83 = HEAP32[i22 >> 2] | 0;
    }
    HEAP32[i22 >> 2] = i83 + 1;
    i59 = i49;
    i60 = i50;
    i61 = i51;
    i62 = i52;
    i63 = 0;
    i4 = 205;
    break;
   }
  case 25:
   {
    if ((i53 | 0) < 8) {
     i18 = 0;
     i4 = 215;
     break L4;
    }
    i71 = i53 + -6 | 0;
    i69 = 0;
    i70 = 1;
    while (1) {
     f66 = Math_fround(HEAPF32[i10 + (i69 << 2) >> 2]);
     f67 = Math_fround(HEAPF32[i10 + (i70 << 2) >> 2]);
     f68 = Math_fround(f66 + Math_fround(HEAPF32[i19 >> 2]));
     HEAPF32[i19 >> 2] = f68;
     f66 = Math_fround(f67 + Math_fround(HEAPF32[i20 >> 2]));
     HEAPF32[i20 >> 2] = f66;
     i82 = ~~f68;
     i72 = ~~f66;
     if (!(HEAP32[i3 >> 2] | 0)) {
      i84 = HEAP32[i21 >> 2] | 0;
      i85 = HEAP32[i22 >> 2] | 0;
      i86 = i84 + (i85 * 14 | 0) | 0;
      HEAP8[i86 + 12 >> 0] = 2;
      HEAP16[i86 >> 1] = i82;
      HEAP16[i86 + 2 >> 1] = i72;
      i84 = i86 + 4 | 0;
      i86 = i84;
      HEAP16[i86 >> 1] = 0;
      HEAP16[i86 + 2 >> 1] = 0 >>> 16;
      i86 = i84 + 4 | 0;
      HEAP16[i86 >> 1] = 0;
      HEAP16[i86 + 2 >> 1] = 0 >>> 16;
      i87 = i85;
     } else {
      if ((HEAP32[i23 >> 2] | 0) < (i82 | 0)) i4 = 106; else if (!(HEAP32[i27 >> 2] | 0)) i4 = 106;
      if ((i4 | 0) == 106) {
       i4 = 0;
       HEAP32[i23 >> 2] = i82;
      }
      if ((HEAP32[i24 >> 2] | 0) < (i72 | 0)) i4 = 109; else if (!(HEAP32[i27 >> 2] | 0)) i4 = 109;
      if ((i4 | 0) == 109) {
       i4 = 0;
       HEAP32[i24 >> 2] = i72;
      }
      if ((HEAP32[i25 >> 2] | 0) > (i82 | 0)) i4 = 112; else if (!(HEAP32[i27 >> 2] | 0)) i4 = 112;
      if ((i4 | 0) == 112) {
       i4 = 0;
       HEAP32[i25 >> 2] = i82;
      }
      if ((HEAP32[i26 >> 2] | 0) > (i72 | 0)) i4 = 115; else if (!(HEAP32[i27 >> 2] | 0)) i4 = 115;
      if ((i4 | 0) == 115) {
       i4 = 0;
       HEAP32[i26 >> 2] = i72;
      }
      HEAP32[i27 >> 2] = 1;
      i87 = HEAP32[i22 >> 2] | 0;
     }
     HEAP32[i22 >> 2] = i87 + 1;
     i88 = i69 + 2 | 0;
     i70 = i88 | 1;
     if ((i70 | 0) >= (i71 | 0)) break; else i69 = i88;
    }
    i71 = i69 + 7 | 0;
    if ((i71 | 0) >= (i53 | 0)) {
     i18 = 0;
     i4 = 215;
     break L4;
    }
    f66 = Math_fround(HEAPF32[i10 + (i88 << 2) >> 2]);
    f68 = Math_fround(HEAPF32[i10 + (i70 << 2) >> 2]);
    f67 = Math_fround(HEAPF32[i10 + (i69 + 4 << 2) >> 2]);
    f80 = Math_fround(HEAPF32[i10 + (i69 + 5 << 2) >> 2]);
    f81 = Math_fround(HEAPF32[i10 + (i69 + 6 << 2) >> 2]);
    __ZL23stbtt__csctx_rccurve_toP12stbtt__csctxffffff(i3, f66, f68, f67, f80, f81, Math_fround(HEAPF32[i10 + (i71 << 2) >> 2]));
    i59 = i49;
    i60 = i50;
    i61 = i51;
    i62 = i52;
    i63 = 0;
    i4 = 205;
    break;
   }
  case 27:
  case 26:
   {
    if ((i53 | 0) < 4) {
     i18 = 0;
     i4 = 215;
     break L4;
    }
    i71 = i53 & 1;
    i58 = (i71 | 0) == 0;
    i72 = i71 + 3 | 0;
    if ((i72 | 0) < (i53 | 0)) {
     f81 = Math_fround(HEAPF32[i10 >> 2]);
     f80 = i58 ? Math_fround(0.0) : f81;
     i82 = i56 << 24 >> 24 == 27;
     f81 = Math_fround(HEAPF32[i10 + (((i58 ^ 1) & 1) << 2) >> 2]);
     f67 = Math_fround(HEAPF32[i10 + (i71 + 1 << 2) >> 2]);
     f68 = Math_fround(HEAPF32[i10 + ((i71 | 2) << 2) >> 2]);
     f66 = Math_fround(HEAPF32[i10 + (i72 << 2) >> 2]);
     if (i82) __ZL23stbtt__csctx_rccurve_toP12stbtt__csctxffffff(i3, f81, f80, f67, f68, f66, Math_fround(0.0)); else __ZL23stbtt__csctx_rccurve_toP12stbtt__csctxffffff(i3, f80, f81, f67, f68, Math_fround(0.0), f66);
     i72 = i71 + 7 | 0;
     if ((i72 | 0) < (i53 | 0)) {
      i58 = i71 | 4;
      i71 = i72;
      while (1) {
       f66 = Math_fround(HEAPF32[i10 + (i58 << 2) >> 2]);
       f68 = Math_fround(HEAPF32[i10 + (i58 + 1 << 2) >> 2]);
       f67 = Math_fround(HEAPF32[i10 + (i58 + 2 << 2) >> 2]);
       f81 = Math_fround(HEAPF32[i10 + (i71 << 2) >> 2]);
       if (i82) __ZL23stbtt__csctx_rccurve_toP12stbtt__csctxffffff(i3, f66, Math_fround(0.0), f68, f67, f81, Math_fround(0.0)); else __ZL23stbtt__csctx_rccurve_toP12stbtt__csctxffffff(i3, Math_fround(0.0), f66, f68, f67, Math_fround(0.0), f81);
       i71 = i58 + 7 | 0;
       if ((i71 | 0) >= (i53 | 0)) {
        i59 = i49;
        i60 = i50;
        i61 = i51;
        i62 = i52;
        i63 = 0;
        i4 = 205;
        break;
       } else i58 = i58 + 4 | 0;
      }
     } else {
      i59 = i49;
      i60 = i50;
      i61 = i51;
      i62 = i52;
      i63 = 0;
      i4 = 205;
     }
    } else {
     i59 = i49;
     i60 = i50;
     i61 = i51;
     i62 = i52;
     i63 = 0;
     i4 = 205;
    }
    break;
   }
  case 10:
   {
    if (!i51) {
     i58 = HEAP32[i28 >> 2] | 0;
     if (!i58) {
      i89 = 1;
      i4 = 162;
     } else {
      i71 = HEAP32[i29 >> 2] | 0;
      if ((i58 | 0) < 0) {
       i4 = 135;
       break L4;
      }
      L132 : do switch (HEAP8[i71 >> 0] | 0) {
      case 0:
       {
        if (i48 | (i58 | 0) <= (i2 | 0)) {
         i4 = 139;
         break L4;
        }
        if ((i47 | 0) < (i58 | 0)) i90 = HEAP8[i71 + i47 >> 0] | 0; else i90 = 0;
        i91 = i90 & 255;
        break;
       }
      case 3:
       {
        if ((i58 | 0) > 1) {
         i92 = HEAP8[i71 + 1 >> 0] | 0;
         i93 = 2;
        } else {
         i92 = 0;
         i93 = 1;
        }
        if ((i93 | 0) < (i58 | 0)) {
         i94 = HEAP8[i71 + i93 >> 0] | 0;
         i95 = i93 + 1 | 0;
        } else {
         i94 = 0;
         i95 = i93;
        }
        i82 = (i92 & 255) << 8 | i94 & 255;
        if ((i95 | 0) < (i58 | 0)) {
         i96 = HEAP8[i71 + i95 >> 0] | 0;
         i97 = i95 + 1 | 0;
        } else {
         i96 = 0;
         i97 = i95;
        }
        if ((i97 | 0) < (i58 | 0)) {
         i98 = HEAP8[i71 + i97 >> 0] | 0;
         i99 = i97 + 1 | 0;
        } else {
         i98 = 0;
         i99 = i97;
        }
        if (!i82) i91 = -1; else {
         i69 = i98 & 255 | (i96 & 255) << 8;
         i70 = 0;
         i72 = i99;
         while (1) {
          if ((i72 | 0) < (i58 | 0)) {
           i100 = HEAP8[i71 + i72 >> 0] | 0;
           i101 = i72 + 1 | 0;
          } else {
           i100 = 0;
           i101 = i72;
          }
          if ((i101 | 0) < (i58 | 0)) {
           i102 = HEAP8[i71 + i101 >> 0] | 0;
           i103 = i101 + 1 | 0;
          } else {
           i102 = 0;
           i103 = i101;
          }
          if ((i103 | 0) < (i58 | 0)) {
           i104 = HEAP8[i71 + i103 >> 0] | 0;
           i105 = i103 + 1 | 0;
          } else {
           i104 = 0;
           i105 = i103;
          }
          i85 = i69;
          i69 = (i102 & 255) << 8 | i104 & 255;
          i70 = i70 + 1 | 0;
          if ((i85 | 0) <= (i2 | 0) & (i69 | 0) > (i2 | 0)) break;
          if ((i70 | 0) >= (i82 | 0)) {
           i91 = -1;
           break L132;
          } else i72 = i105;
         }
         i91 = i100 & 255;
        }
        break;
       }
      default:
       i91 = -1;
      } while (0);
      HEAP32[i8 >> 2] = HEAP32[i30 >> 2];
      HEAP32[i8 + 4 >> 2] = HEAP32[i30 + 4 >> 2];
      HEAP32[i8 + 8 >> 2] = HEAP32[i30 + 8 >> 2];
      HEAP32[i6 >> 2] = HEAP32[i31 >> 2];
      HEAP32[i6 + 4 >> 2] = HEAP32[i31 + 4 >> 2];
      HEAP32[i6 + 8 >> 2] = HEAP32[i31 + 8 >> 2];
      __ZL20stbtt__cff_index_get10stbtt__bufi(i9, i6, i91);
      HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
      HEAP32[i7 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
      HEAP32[i7 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
      HEAP32[i6 >> 2] = HEAP32[i9 >> 2];
      HEAP32[i6 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
      HEAP32[i6 + 8 >> 2] = HEAP32[i9 + 8 >> 2];
      __ZL16stbtt__get_subrs10stbtt__bufS_(i12, i7, i6);
      i89 = 1;
      i4 = 162;
     }
    } else {
     i89 = i51;
     i4 = 162;
    }
    break;
   }
  case 29:
   {
    i89 = i51;
    i4 = 162;
    break;
   }
  case 11:
   {
    if ((i52 | 0) < 1) {
     i18 = 0;
     i4 = 215;
     break L4;
    }
    i71 = i52 + -1 | 0;
    i58 = i11 + (i71 * 12 | 0) | 0;
    HEAP32[i13 >> 2] = HEAP32[i58 >> 2];
    HEAP32[i13 + 4 >> 2] = HEAP32[i58 + 4 >> 2];
    HEAP32[i13 + 8 >> 2] = HEAP32[i58 + 8 >> 2];
    i59 = i49;
    i60 = i50;
    i61 = i51;
    i62 = i71;
    i63 = i53;
    i4 = 205;
    break;
   }
  case 12:
   {
    if ((i15 | 0) >= (i54 | 0)) {
     i18 = 0;
     i4 = 215;
     break L4;
    }
    HEAP32[i14 >> 2] = i17 + 2;
    switch (HEAP8[i55 + i15 >> 0] | 0) {
    case 34:
     {
      if ((i53 | 0) < 7) {
       i18 = 0;
       i4 = 215;
       break L4;
      }
      f81 = Math_fround(HEAPF32[i10 >> 2]);
      f67 = Math_fround(HEAPF32[i36 >> 2]);
      f68 = Math_fround(HEAPF32[i37 >> 2]);
      f66 = Math_fround(HEAPF32[i38 >> 2]);
      f80 = Math_fround(HEAPF32[i39 >> 2]);
      f106 = Math_fround(HEAPF32[i40 >> 2]);
      f107 = Math_fround(HEAPF32[i41 >> 2]);
      __ZL23stbtt__csctx_rccurve_toP12stbtt__csctxffffff(i3, f81, Math_fround(0.0), f67, f68, f66, Math_fround(0.0));
      __ZL23stbtt__csctx_rccurve_toP12stbtt__csctxffffff(i3, f80, Math_fround(0.0), f106, Math_fround(-f68), f107, Math_fround(0.0));
      i59 = i49;
      i60 = i50;
      i61 = i51;
      i62 = i52;
      i63 = 0;
      i4 = 205;
      break L6;
      break;
     }
    case 35:
     {
      if ((i53 | 0) < 13) {
       i18 = 0;
       i4 = 215;
       break L4;
      }
      f107 = Math_fround(HEAPF32[i10 >> 2]);
      f68 = Math_fround(HEAPF32[i36 >> 2]);
      f106 = Math_fround(HEAPF32[i37 >> 2]);
      f80 = Math_fround(HEAPF32[i38 >> 2]);
      f66 = Math_fround(HEAPF32[i39 >> 2]);
      f67 = Math_fround(HEAPF32[i40 >> 2]);
      f81 = Math_fround(HEAPF32[i41 >> 2]);
      f108 = Math_fround(HEAPF32[i42 >> 2]);
      f109 = Math_fround(HEAPF32[i43 >> 2]);
      f110 = Math_fround(HEAPF32[i44 >> 2]);
      f111 = Math_fround(HEAPF32[i45 >> 2]);
      f112 = Math_fround(HEAPF32[i46 >> 2]);
      __ZL23stbtt__csctx_rccurve_toP12stbtt__csctxffffff(i3, f107, f68, f106, f80, f66, f67);
      __ZL23stbtt__csctx_rccurve_toP12stbtt__csctxffffff(i3, f81, f108, f109, f110, f111, f112);
      i59 = i49;
      i60 = i50;
      i61 = i51;
      i62 = i52;
      i63 = 0;
      i4 = 205;
      break L6;
      break;
     }
    case 36:
     {
      if ((i53 | 0) < 9) {
       i18 = 0;
       i4 = 215;
       break L4;
      }
      f112 = Math_fround(HEAPF32[i10 >> 2]);
      f111 = Math_fround(HEAPF32[i36 >> 2]);
      f110 = Math_fround(HEAPF32[i37 >> 2]);
      f109 = Math_fround(HEAPF32[i38 >> 2]);
      f108 = Math_fround(HEAPF32[i39 >> 2]);
      f81 = Math_fround(HEAPF32[i40 >> 2]);
      f67 = Math_fround(HEAPF32[i41 >> 2]);
      f66 = Math_fround(HEAPF32[i42 >> 2]);
      f80 = Math_fround(HEAPF32[i43 >> 2]);
      __ZL23stbtt__csctx_rccurve_toP12stbtt__csctxffffff(i3, f112, f111, f110, f109, f108, Math_fround(0.0));
      __ZL23stbtt__csctx_rccurve_toP12stbtt__csctxffffff(i3, f81, Math_fround(0.0), f67, f66, f80, Math_fround(-Math_fround(Math_fround(f111 + f109) + f66)));
      i59 = i49;
      i60 = i50;
      i61 = i51;
      i62 = i52;
      i63 = 0;
      i4 = 205;
      break L6;
      break;
     }
    case 37:
     {
      if ((i53 | 0) < 11) {
       i18 = 0;
       i4 = 215;
       break L4;
      }
      f66 = Math_fround(HEAPF32[i10 >> 2]);
      f109 = Math_fround(HEAPF32[i36 >> 2]);
      f111 = Math_fround(HEAPF32[i37 >> 2]);
      f80 = Math_fround(HEAPF32[i38 >> 2]);
      f67 = Math_fround(HEAPF32[i39 >> 2]);
      f81 = Math_fround(HEAPF32[i40 >> 2]);
      f108 = Math_fround(HEAPF32[i41 >> 2]);
      f110 = Math_fround(HEAPF32[i42 >> 2]);
      f112 = Math_fround(HEAPF32[i43 >> 2]);
      f106 = Math_fround(HEAPF32[i44 >> 2]);
      f68 = Math_fround(HEAPF32[i45 >> 2]);
      f107 = Math_fround(Math_fround(Math_fround(Math_fround(f66 + f111) + f67) + f108) + f112);
      f113 = Math_fround(Math_fround(Math_fround(Math_fround(f109 + f80) + f81) + f110) + f106);
      i71 = Math_fround(Math_abs(Math_fround(f107))) > Math_fround(Math_abs(Math_fround(f113)));
      f114 = Math_fround(-f113);
      f113 = Math_fround(-f107);
      __ZL23stbtt__csctx_rccurve_toP12stbtt__csctxffffff(i3, f66, f109, f111, f80, f67, f81);
      __ZL23stbtt__csctx_rccurve_toP12stbtt__csctxffffff(i3, f108, f110, f112, f106, i71 ? f68 : f113, i71 ? f114 : f68);
      i59 = i49;
      i60 = i50;
      i61 = i51;
      i62 = i52;
      i63 = 0;
      i4 = 205;
      break L6;
      break;
     }
    default:
     {
      i18 = 0;
      i4 = 215;
      break L4;
     }
    }
    break;
   }
  case -1:
   {
    if ((i15 | 0) < (i54 | 0)) {
     i115 = HEAP8[i55 + i15 >> 0] | 0;
     i116 = i17 + 2 | 0;
    } else {
     i115 = 0;
     i116 = i15;
    }
    if ((i116 | 0) < (i54 | 0)) {
     i117 = HEAP8[i55 + i116 >> 0] | 0;
     i118 = i116 + 1 | 0;
    } else {
     i117 = 0;
     i118 = i116;
    }
    if ((i118 | 0) < (i54 | 0)) {
     i119 = HEAP8[i55 + i118 >> 0] | 0;
     i120 = i118 + 1 | 0;
    } else {
     i119 = 0;
     i120 = i118;
    }
    if ((i120 | 0) < (i54 | 0)) {
     i121 = HEAP8[i55 + i120 >> 0] | 0;
     i122 = i120 + 1 | 0;
    } else {
     i121 = 0;
     i122 = i120;
    }
    HEAP32[i14 >> 2] = i122;
    f123 = Math_fround(Math_fround((((i115 & 255) << 8 | i117 & 255) << 8 | i119 & 255) << 8 | i121 & 255 | 0) * Math_fround(.0000152587891));
    i4 = 213;
    break;
   }
  case 28:
   {
    i4 = 210;
    break;
   }
  default:
   if ((i56 & 255) < 32 | i56 << 24 >> 24 == -1) {
    i18 = 0;
    i4 = 215;
    break L4;
   } else i4 = 210;
  } while (0);
  if ((i4 | 0) == 162) {
   i4 = 0;
   if ((i53 | 0) < 1) {
    i18 = 0;
    i4 = 215;
    break;
   }
   i55 = i53 + -1 | 0;
   if ((i52 | 0) > 9) {
    i18 = 0;
    i4 = 215;
    break;
   }
   i15 = ~~Math_fround(HEAPF32[i10 + (i55 << 2) >> 2]);
   i71 = i11 + (i52 * 12 | 0) | 0;
   HEAP32[i71 >> 2] = HEAP32[i13 >> 2];
   HEAP32[i71 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
   HEAP32[i71 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
   i71 = i56 << 24 >> 24 == 10 ? i12 : i32;
   HEAP32[i7 >> 2] = HEAP32[i71 >> 2];
   HEAP32[i7 + 4 >> 2] = HEAP32[i71 + 4 >> 2];
   HEAP32[i7 + 8 >> 2] = HEAP32[i71 + 8 >> 2];
   i71 = HEAP32[i1 >> 2] | 0;
   if ((i71 | 0) < 0) {
    i4 = 165;
    break;
   }
   HEAP32[i33 >> 2] = 0;
   if (!i71) {
    i124 = 0;
    i125 = 0;
   } else {
    i58 = HEAP32[i7 >> 2] | 0;
    HEAP32[i33 >> 2] = 1;
    i124 = HEAP8[i58 >> 0] | 0;
    i125 = 1;
   }
   if ((i125 | 0) < (i71 | 0)) {
    i71 = HEAP32[i7 >> 2] | 0;
    HEAP32[i33 >> 2] = i125 + 1;
    i126 = HEAP8[i71 + i125 >> 0] | 0;
   } else i126 = 0;
   i71 = (i124 & 255) << 8 | i126 & 255;
   i58 = (i71 >>> 0 > 33899 ? 32768 : i71 >>> 0 > 1239 ? 1131 : 107) + i15 | 0;
   if (i58 >>> 0 < i71 >>> 0) {
    HEAP32[i6 >> 2] = HEAP32[i7 >> 2];
    HEAP32[i6 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
    HEAP32[i6 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
    __ZL20stbtt__cff_index_get10stbtt__bufi(i8, i6, i58);
   } else {
    HEAP32[i8 >> 2] = 0;
    HEAP32[i34 >> 2] = 0;
    HEAP32[i35 >> 2] = 0;
   };
   HEAP32[i13 >> 2] = HEAP32[i8 >> 2];
   HEAP32[i13 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
   HEAP32[i13 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
   if (!(HEAP32[i16 >> 2] | 0)) {
    i18 = 0;
    i4 = 215;
    break;
   }
   HEAP32[i14 >> 2] = 0;
   i59 = i49;
   i60 = i50;
   i61 = i89;
   i62 = i52 + 1 | 0;
   i63 = i55;
   i4 = 205;
  } else if ((i4 | 0) == 210) {
   i4 = 0;
   if ((i17 | 0) < 0 | (i54 | 0) < (i17 | 0)) {
    i4 = 211;
    break;
   }
   HEAP32[i14 >> 2] = i17;
   f123 = Math_fround(((__ZL14stbtt__cff_intP10stbtt__buf(i13) | 0) & 65535) << 16 >> 16);
   i4 = 213;
  }
  if ((i4 | 0) == 213) {
   i4 = 0;
   if ((i53 | 0) > 47) {
    i18 = 0;
    i4 = 215;
    break;
   }
   HEAPF32[i10 + (i53 << 2) >> 2] = f123;
   i59 = i49;
   i60 = i50;
   i61 = i51;
   i62 = i52;
   i63 = i53 + 1 | 0;
   i4 = 205;
  }
  while (1) if ((i4 | 0) == 35) {
   i4 = 0;
   if ((i75 | 0) >= (i53 | 0)) {
    i59 = i49;
    i60 = i50;
    i61 = i51;
    i62 = i52;
    i63 = 0;
    i4 = 205;
    continue;
   }
   f68 = Math_fround(HEAPF32[i10 + (i75 << 2) >> 2]);
   f114 = Math_fround(f68 + Math_fround(HEAPF32[i19 >> 2]));
   HEAPF32[i19 >> 2] = f114;
   f68 = Math_fround(Math_fround(HEAPF32[i20 >> 2]) + Math_fround(0.0));
   HEAPF32[i20 >> 2] = f68;
   i55 = ~~f114;
   i58 = ~~f68;
   if (!(HEAP32[i3 >> 2] | 0)) {
    i71 = HEAP32[i21 >> 2] | 0;
    i15 = HEAP32[i22 >> 2] | 0;
    i72 = i71 + (i15 * 14 | 0) | 0;
    HEAP8[i72 + 12 >> 0] = 2;
    HEAP16[i72 >> 1] = i55;
    HEAP16[i72 + 2 >> 1] = i58;
    i71 = i72 + 4 | 0;
    i72 = i71;
    HEAP16[i72 >> 1] = 0;
    HEAP16[i72 + 2 >> 1] = 0 >>> 16;
    i72 = i71 + 4 | 0;
    HEAP16[i72 >> 1] = 0;
    HEAP16[i72 + 2 >> 1] = 0 >>> 16;
    i127 = i15;
   } else {
    if ((HEAP32[i23 >> 2] | 0) < (i55 | 0)) i4 = 39; else if (!(HEAP32[i27 >> 2] | 0)) i4 = 39;
    if ((i4 | 0) == 39) {
     i4 = 0;
     HEAP32[i23 >> 2] = i55;
    }
    if ((HEAP32[i24 >> 2] | 0) < (i58 | 0)) i4 = 42; else if (!(HEAP32[i27 >> 2] | 0)) i4 = 42;
    if ((i4 | 0) == 42) {
     i4 = 0;
     HEAP32[i24 >> 2] = i58;
    }
    if ((HEAP32[i25 >> 2] | 0) > (i55 | 0)) i4 = 45; else if (!(HEAP32[i27 >> 2] | 0)) i4 = 45;
    if ((i4 | 0) == 45) {
     i4 = 0;
     HEAP32[i25 >> 2] = i55;
    }
    if ((HEAP32[i26 >> 2] | 0) > (i58 | 0)) i4 = 48; else if (!(HEAP32[i27 >> 2] | 0)) i4 = 48;
    if ((i4 | 0) == 48) {
     i4 = 0;
     HEAP32[i26 >> 2] = i58;
    }
    HEAP32[i27 >> 2] = 1;
    i127 = HEAP32[i22 >> 2] | 0;
   }
   HEAP32[i22 >> 2] = i127 + 1;
   i74 = i75 + 1 | 0;
   i4 = 52;
   continue;
  } else if ((i4 | 0) == 52) {
   i4 = 0;
   if ((i74 | 0) >= (i53 | 0)) {
    i59 = i49;
    i60 = i50;
    i61 = i51;
    i62 = i52;
    i63 = 0;
    i4 = 205;
    continue;
   }
   f68 = Math_fround(HEAPF32[i10 + (i74 << 2) >> 2]);
   f114 = Math_fround(Math_fround(HEAPF32[i19 >> 2]) + Math_fround(0.0));
   HEAPF32[i19 >> 2] = f114;
   f113 = Math_fround(f68 + Math_fround(HEAPF32[i20 >> 2]));
   HEAPF32[i20 >> 2] = f113;
   i58 = ~~f114;
   i55 = ~~f113;
   if (!(HEAP32[i3 >> 2] | 0)) {
    i15 = HEAP32[i21 >> 2] | 0;
    i72 = HEAP32[i22 >> 2] | 0;
    i71 = i15 + (i72 * 14 | 0) | 0;
    HEAP8[i71 + 12 >> 0] = 2;
    HEAP16[i71 >> 1] = i58;
    HEAP16[i71 + 2 >> 1] = i55;
    i15 = i71 + 4 | 0;
    i71 = i15;
    HEAP16[i71 >> 1] = 0;
    HEAP16[i71 + 2 >> 1] = 0 >>> 16;
    i71 = i15 + 4 | 0;
    HEAP16[i71 >> 1] = 0;
    HEAP16[i71 + 2 >> 1] = 0 >>> 16;
    i128 = i72;
   } else {
    if ((HEAP32[i23 >> 2] | 0) < (i58 | 0)) i4 = 56; else if (!(HEAP32[i27 >> 2] | 0)) i4 = 56;
    if ((i4 | 0) == 56) {
     i4 = 0;
     HEAP32[i23 >> 2] = i58;
    }
    if ((HEAP32[i24 >> 2] | 0) < (i55 | 0)) i4 = 59; else if (!(HEAP32[i27 >> 2] | 0)) i4 = 59;
    if ((i4 | 0) == 59) {
     i4 = 0;
     HEAP32[i24 >> 2] = i55;
    }
    if ((HEAP32[i25 >> 2] | 0) > (i58 | 0)) i4 = 62; else if (!(HEAP32[i27 >> 2] | 0)) i4 = 62;
    if ((i4 | 0) == 62) {
     i4 = 0;
     HEAP32[i25 >> 2] = i58;
    }
    if ((HEAP32[i26 >> 2] | 0) > (i55 | 0)) i4 = 65; else if (!(HEAP32[i27 >> 2] | 0)) i4 = 65;
    if ((i4 | 0) == 65) {
     i4 = 0;
     HEAP32[i26 >> 2] = i55;
    }
    HEAP32[i27 >> 2] = 1;
    i128 = HEAP32[i22 >> 2] | 0;
   }
   HEAP32[i22 >> 2] = i128 + 1;
   i75 = i74 + 1 | 0;
   i4 = 35;
   continue;
  } else if ((i4 | 0) == 71) {
   i4 = 0;
   i55 = i77 + 3 | 0;
   if ((i55 | 0) >= (i53 | 0)) {
    i59 = i49;
    i60 = i50;
    i61 = i51;
    i62 = i52;
    i63 = 0;
    i4 = 205;
    continue;
   }
   f113 = Math_fround(HEAPF32[i10 + (i77 << 2) >> 2]);
   f114 = Math_fround(HEAPF32[i10 + (i77 + 1 << 2) >> 2]);
   f68 = Math_fround(HEAPF32[i10 + (i77 + 2 << 2) >> 2]);
   f106 = Math_fround(HEAPF32[i10 + (i55 << 2) >> 2]);
   i55 = i77 + 4 | 0;
   if ((i53 - i77 | 0) == 5) f129 = Math_fround(HEAPF32[i10 + (i55 << 2) >> 2]); else f129 = Math_fround(0.0);
   __ZL23stbtt__csctx_rccurve_toP12stbtt__csctxffffff(i3, Math_fround(0.0), f113, f114, f68, f106, f129);
   i76 = i55;
   i4 = 75;
   continue;
  } else if ((i4 | 0) == 75) {
   i4 = 0;
   i55 = i76 + 3 | 0;
   if ((i55 | 0) >= (i53 | 0)) {
    i59 = i49;
    i60 = i50;
    i61 = i51;
    i62 = i52;
    i63 = 0;
    i4 = 205;
    continue;
   }
   f106 = Math_fround(HEAPF32[i10 + (i76 << 2) >> 2]);
   f68 = Math_fround(HEAPF32[i10 + (i76 + 1 << 2) >> 2]);
   f114 = Math_fround(HEAPF32[i10 + (i76 + 2 << 2) >> 2]);
   i58 = i76 + 4 | 0;
   if ((i53 - i76 | 0) == 5) f130 = Math_fround(HEAPF32[i10 + (i58 << 2) >> 2]); else f130 = Math_fround(0.0);
   __ZL23stbtt__csctx_rccurve_toP12stbtt__csctxffffff(i3, f106, Math_fround(0.0), f68, f114, f130, Math_fround(HEAPF32[i10 + (i55 << 2) >> 2]));
   i77 = i58;
   i4 = 71;
   continue;
  } else if ((i4 | 0) == 205) {
   i4 = 0;
   i58 = HEAP32[i14 >> 2] | 0;
   i55 = HEAP32[i16 >> 2] | 0;
   if ((i58 | 0) < (i55 | 0)) {
    i49 = i59;
    i50 = i60;
    i51 = i61;
    i52 = i62;
    i53 = i63;
    i54 = i55;
    i17 = i58;
    continue L4;
   } else {
    i18 = 0;
    i4 = 215;
    break L4;
   }
  }
 }
 if ((i4 | 0) == 7) ___assert_fail(50765, 50789, 1116, 50855); else if ((i4 | 0) == 135) ___assert_fail(50765, 50789, 1116, 50855); else if ((i4 | 0) == 139) ___assert_fail(50765, 50789, 1116, 50855); else if ((i4 | 0) == 165) ___assert_fail(50765, 50789, 1116, 50855); else if ((i4 | 0) == 177) {
  f130 = Math_fround(HEAPF32[i3 + 8 >> 2]);
  i17 = f130 != Math_fround(HEAPF32[i19 >> 2]);
  f129 = Math_fround(HEAPF32[i3 + 12 >> 2]);
  if (!i17) if (!(f129 != Math_fround(HEAPF32[i20 >> 2]))) {
   i18 = 1;
   STACKTOP = i5;
   return i18 | 0;
  }
  i20 = ~~f130;
  i17 = ~~f129;
  if (!(HEAP32[i3 >> 2] | 0)) {
   i3 = HEAP32[i21 >> 2] | 0;
   i21 = HEAP32[i22 >> 2] | 0;
   i19 = i3 + (i21 * 14 | 0) | 0;
   HEAP8[i19 + 12 >> 0] = 2;
   HEAP16[i19 >> 1] = i20;
   HEAP16[i19 + 2 >> 1] = i17;
   i3 = i19 + 4 | 0;
   i19 = i3;
   HEAP16[i19 >> 1] = 0;
   HEAP16[i19 + 2 >> 1] = 0 >>> 16;
   i19 = i3 + 4 | 0;
   HEAP16[i19 >> 1] = 0;
   HEAP16[i19 + 2 >> 1] = 0 >>> 16;
   i131 = i21;
  } else {
   if ((HEAP32[i23 >> 2] | 0) < (i20 | 0)) i4 = 182; else if (!(HEAP32[i27 >> 2] | 0)) i4 = 182;
   if ((i4 | 0) == 182) HEAP32[i23 >> 2] = i20;
   if ((HEAP32[i24 >> 2] | 0) < (i17 | 0)) i4 = 185; else if (!(HEAP32[i27 >> 2] | 0)) i4 = 185;
   if ((i4 | 0) == 185) HEAP32[i24 >> 2] = i17;
   if ((HEAP32[i25 >> 2] | 0) > (i20 | 0)) i4 = 188; else if (!(HEAP32[i27 >> 2] | 0)) i4 = 188;
   if ((i4 | 0) == 188) HEAP32[i25 >> 2] = i20;
   if ((HEAP32[i26 >> 2] | 0) > (i17 | 0)) i4 = 191; else if (!(HEAP32[i27 >> 2] | 0)) i4 = 191;
   if ((i4 | 0) == 191) HEAP32[i26 >> 2] = i17;
   HEAP32[i27 >> 2] = 1;
   i131 = HEAP32[i22 >> 2] | 0;
  }
  HEAP32[i22 >> 2] = i131 + 1;
  i18 = 1;
  STACKTOP = i5;
  return i18 | 0;
 } else if ((i4 | 0) == 211) ___assert_fail(50765, 50789, 1116, 50855); else if ((i4 | 0) == 215) {
  STACKTOP = i5;
  return i18 | 0;
 }
 return 0;
}

function _malloc(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i3;
 do if (i1 >>> 0 < 245) {
  i5 = i1 >>> 0 < 11 ? 16 : i1 + 11 & -8;
  i6 = i5 >>> 3;
  i7 = HEAP32[1460880] | 0;
  i8 = i7 >>> i6;
  if (i8 & 3 | 0) {
   i9 = (i8 & 1 ^ 1) + i6 | 0;
   i10 = 5843560 + (i9 << 1 << 2) | 0;
   i11 = i10 + 8 | 0;
   i12 = HEAP32[i11 >> 2] | 0;
   i13 = i12 + 8 | 0;
   i14 = HEAP32[i13 >> 2] | 0;
   if ((i14 | 0) == (i10 | 0)) HEAP32[1460880] = i7 & ~(1 << i9); else {
    HEAP32[i14 + 12 >> 2] = i10;
    HEAP32[i11 >> 2] = i14;
   }
   i14 = i9 << 3;
   HEAP32[i12 + 4 >> 2] = i14 | 3;
   i9 = i12 + i14 + 4 | 0;
   HEAP32[i9 >> 2] = HEAP32[i9 >> 2] | 1;
   i15 = i13;
   STACKTOP = i3;
   return i15 | 0;
  }
  i13 = HEAP32[1460882] | 0;
  if (i5 >>> 0 > i13 >>> 0) {
   if (i8 | 0) {
    i9 = 2 << i6;
    i14 = i8 << i6 & (i9 | 0 - i9);
    i9 = (i14 & 0 - i14) + -1 | 0;
    i14 = i9 >>> 12 & 16;
    i6 = i9 >>> i14;
    i9 = i6 >>> 5 & 8;
    i8 = i6 >>> i9;
    i6 = i8 >>> 2 & 4;
    i12 = i8 >>> i6;
    i8 = i12 >>> 1 & 2;
    i11 = i12 >>> i8;
    i12 = i11 >>> 1 & 1;
    i10 = (i9 | i14 | i6 | i8 | i12) + (i11 >>> i12) | 0;
    i12 = 5843560 + (i10 << 1 << 2) | 0;
    i11 = i12 + 8 | 0;
    i8 = HEAP32[i11 >> 2] | 0;
    i6 = i8 + 8 | 0;
    i14 = HEAP32[i6 >> 2] | 0;
    if ((i14 | 0) == (i12 | 0)) {
     i9 = i7 & ~(1 << i10);
     HEAP32[1460880] = i9;
     i16 = i9;
    } else {
     HEAP32[i14 + 12 >> 2] = i12;
     HEAP32[i11 >> 2] = i14;
     i16 = i7;
    }
    i14 = i10 << 3;
    i10 = i14 - i5 | 0;
    HEAP32[i8 + 4 >> 2] = i5 | 3;
    i11 = i8 + i5 | 0;
    HEAP32[i11 + 4 >> 2] = i10 | 1;
    HEAP32[i8 + i14 >> 2] = i10;
    if (i13 | 0) {
     i14 = HEAP32[1460885] | 0;
     i8 = i13 >>> 3;
     i12 = 5843560 + (i8 << 1 << 2) | 0;
     i9 = 1 << i8;
     if (!(i16 & i9)) {
      HEAP32[1460880] = i16 | i9;
      i17 = i12;
      i18 = i12 + 8 | 0;
     } else {
      i9 = i12 + 8 | 0;
      i17 = HEAP32[i9 >> 2] | 0;
      i18 = i9;
     }
     HEAP32[i18 >> 2] = i14;
     HEAP32[i17 + 12 >> 2] = i14;
     HEAP32[i14 + 8 >> 2] = i17;
     HEAP32[i14 + 12 >> 2] = i12;
    }
    HEAP32[1460882] = i10;
    HEAP32[1460885] = i11;
    i15 = i6;
    STACKTOP = i3;
    return i15 | 0;
   }
   i6 = HEAP32[1460881] | 0;
   if (!i6) i19 = i5; else {
    i11 = (i6 & 0 - i6) + -1 | 0;
    i10 = i11 >>> 12 & 16;
    i12 = i11 >>> i10;
    i11 = i12 >>> 5 & 8;
    i14 = i12 >>> i11;
    i12 = i14 >>> 2 & 4;
    i9 = i14 >>> i12;
    i14 = i9 >>> 1 & 2;
    i8 = i9 >>> i14;
    i9 = i8 >>> 1 & 1;
    i20 = HEAP32[5843824 + ((i11 | i10 | i12 | i14 | i9) + (i8 >>> i9) << 2) >> 2] | 0;
    i9 = (HEAP32[i20 + 4 >> 2] & -8) - i5 | 0;
    i8 = HEAP32[i20 + 16 + (((HEAP32[i20 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0;
    if (!i8) {
     i21 = i20;
     i22 = i9;
    } else {
     i14 = i20;
     i20 = i9;
     i9 = i8;
     while (1) {
      i8 = (HEAP32[i9 + 4 >> 2] & -8) - i5 | 0;
      i12 = i8 >>> 0 < i20 >>> 0;
      i10 = i12 ? i8 : i20;
      i8 = i12 ? i9 : i14;
      i9 = HEAP32[i9 + 16 + (((HEAP32[i9 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0;
      if (!i9) {
       i21 = i8;
       i22 = i10;
       break;
      } else {
       i14 = i8;
       i20 = i10;
      }
     }
    }
    i20 = i21 + i5 | 0;
    if (i20 >>> 0 > i21 >>> 0) {
     i14 = HEAP32[i21 + 24 >> 2] | 0;
     i9 = HEAP32[i21 + 12 >> 2] | 0;
     do if ((i9 | 0) == (i21 | 0)) {
      i10 = i21 + 20 | 0;
      i8 = HEAP32[i10 >> 2] | 0;
      if (!i8) {
       i12 = i21 + 16 | 0;
       i11 = HEAP32[i12 >> 2] | 0;
       if (!i11) {
        i23 = 0;
        break;
       } else {
        i24 = i11;
        i25 = i12;
       }
      } else {
       i24 = i8;
       i25 = i10;
      }
      while (1) {
       i10 = i24 + 20 | 0;
       i8 = HEAP32[i10 >> 2] | 0;
       if (i8 | 0) {
        i24 = i8;
        i25 = i10;
        continue;
       }
       i10 = i24 + 16 | 0;
       i8 = HEAP32[i10 >> 2] | 0;
       if (!i8) break; else {
        i24 = i8;
        i25 = i10;
       }
      }
      HEAP32[i25 >> 2] = 0;
      i23 = i24;
     } else {
      i10 = HEAP32[i21 + 8 >> 2] | 0;
      HEAP32[i10 + 12 >> 2] = i9;
      HEAP32[i9 + 8 >> 2] = i10;
      i23 = i9;
     } while (0);
     do if (i14 | 0) {
      i9 = HEAP32[i21 + 28 >> 2] | 0;
      i10 = 5843824 + (i9 << 2) | 0;
      if ((i21 | 0) == (HEAP32[i10 >> 2] | 0)) {
       HEAP32[i10 >> 2] = i23;
       if (!i23) {
        HEAP32[1460881] = i6 & ~(1 << i9);
        break;
       }
      } else {
       HEAP32[i14 + 16 + (((HEAP32[i14 + 16 >> 2] | 0) != (i21 | 0) & 1) << 2) >> 2] = i23;
       if (!i23) break;
      }
      HEAP32[i23 + 24 >> 2] = i14;
      i9 = HEAP32[i21 + 16 >> 2] | 0;
      if (i9 | 0) {
       HEAP32[i23 + 16 >> 2] = i9;
       HEAP32[i9 + 24 >> 2] = i23;
      }
      i9 = HEAP32[i21 + 20 >> 2] | 0;
      if (i9 | 0) {
       HEAP32[i23 + 20 >> 2] = i9;
       HEAP32[i9 + 24 >> 2] = i23;
      }
     } while (0);
     if (i22 >>> 0 < 16) {
      i14 = i22 + i5 | 0;
      HEAP32[i21 + 4 >> 2] = i14 | 3;
      i6 = i21 + i14 + 4 | 0;
      HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 1;
     } else {
      HEAP32[i21 + 4 >> 2] = i5 | 3;
      HEAP32[i20 + 4 >> 2] = i22 | 1;
      HEAP32[i20 + i22 >> 2] = i22;
      if (i13 | 0) {
       i6 = HEAP32[1460885] | 0;
       i14 = i13 >>> 3;
       i9 = 5843560 + (i14 << 1 << 2) | 0;
       i10 = 1 << i14;
       if (!(i7 & i10)) {
        HEAP32[1460880] = i7 | i10;
        i26 = i9;
        i27 = i9 + 8 | 0;
       } else {
        i10 = i9 + 8 | 0;
        i26 = HEAP32[i10 >> 2] | 0;
        i27 = i10;
       }
       HEAP32[i27 >> 2] = i6;
       HEAP32[i26 + 12 >> 2] = i6;
       HEAP32[i6 + 8 >> 2] = i26;
       HEAP32[i6 + 12 >> 2] = i9;
      }
      HEAP32[1460882] = i22;
      HEAP32[1460885] = i20;
     }
     i15 = i21 + 8 | 0;
     STACKTOP = i3;
     return i15 | 0;
    } else i19 = i5;
   }
  } else i19 = i5;
 } else if (i1 >>> 0 > 4294967231) i19 = -1; else {
  i9 = i1 + 11 | 0;
  i6 = i9 & -8;
  i10 = HEAP32[1460881] | 0;
  if (!i10) i19 = i6; else {
   i14 = 0 - i6 | 0;
   i8 = i9 >>> 8;
   if (!i8) i28 = 0; else if (i6 >>> 0 > 16777215) i28 = 31; else {
    i9 = (i8 + 1048320 | 0) >>> 16 & 8;
    i12 = i8 << i9;
    i8 = (i12 + 520192 | 0) >>> 16 & 4;
    i11 = i12 << i8;
    i12 = (i11 + 245760 | 0) >>> 16 & 2;
    i29 = 14 - (i8 | i9 | i12) + (i11 << i12 >>> 15) | 0;
    i28 = i6 >>> (i29 + 7 | 0) & 1 | i29 << 1;
   }
   i29 = HEAP32[5843824 + (i28 << 2) >> 2] | 0;
   L74 : do if (!i29) {
    i30 = 0;
    i31 = 0;
    i32 = i14;
    i2 = 57;
   } else {
    i12 = 0;
    i11 = i14;
    i9 = i29;
    i8 = i6 << ((i28 | 0) == 31 ? 0 : 25 - (i28 >>> 1) | 0);
    i33 = 0;
    while (1) {
     i34 = (HEAP32[i9 + 4 >> 2] & -8) - i6 | 0;
     if (i34 >>> 0 < i11 >>> 0) if (!i34) {
      i35 = 0;
      i36 = i9;
      i37 = i9;
      i2 = 61;
      break L74;
     } else {
      i38 = i9;
      i39 = i34;
     } else {
      i38 = i12;
      i39 = i11;
     }
     i34 = HEAP32[i9 + 20 >> 2] | 0;
     i9 = HEAP32[i9 + 16 + (i8 >>> 31 << 2) >> 2] | 0;
     i40 = (i34 | 0) == 0 | (i34 | 0) == (i9 | 0) ? i33 : i34;
     i34 = (i9 | 0) == 0;
     if (i34) {
      i30 = i40;
      i31 = i38;
      i32 = i39;
      i2 = 57;
      break;
     } else {
      i12 = i38;
      i11 = i39;
      i8 = i8 << ((i34 ^ 1) & 1);
      i33 = i40;
     }
    }
   } while (0);
   if ((i2 | 0) == 57) {
    if ((i30 | 0) == 0 & (i31 | 0) == 0) {
     i29 = 2 << i28;
     i14 = i10 & (i29 | 0 - i29);
     if (!i14) {
      i19 = i6;
      break;
     }
     i29 = (i14 & 0 - i14) + -1 | 0;
     i14 = i29 >>> 12 & 16;
     i5 = i29 >>> i14;
     i29 = i5 >>> 5 & 8;
     i20 = i5 >>> i29;
     i5 = i20 >>> 2 & 4;
     i7 = i20 >>> i5;
     i20 = i7 >>> 1 & 2;
     i13 = i7 >>> i20;
     i7 = i13 >>> 1 & 1;
     i41 = 0;
     i42 = HEAP32[5843824 + ((i29 | i14 | i5 | i20 | i7) + (i13 >>> i7) << 2) >> 2] | 0;
    } else {
     i41 = i31;
     i42 = i30;
    }
    if (!i42) {
     i43 = i41;
     i44 = i32;
    } else {
     i35 = i32;
     i36 = i42;
     i37 = i41;
     i2 = 61;
    }
   }
   if ((i2 | 0) == 61) while (1) {
    i2 = 0;
    i7 = (HEAP32[i36 + 4 >> 2] & -8) - i6 | 0;
    i13 = i7 >>> 0 < i35 >>> 0;
    i20 = i13 ? i7 : i35;
    i7 = i13 ? i36 : i37;
    i36 = HEAP32[i36 + 16 + (((HEAP32[i36 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0;
    if (!i36) {
     i43 = i7;
     i44 = i20;
     break;
    } else {
     i35 = i20;
     i37 = i7;
     i2 = 61;
    }
   }
   if (!i43) i19 = i6; else if (i44 >>> 0 < ((HEAP32[1460882] | 0) - i6 | 0) >>> 0) {
    i7 = i43 + i6 | 0;
    if (i7 >>> 0 <= i43 >>> 0) {
     i15 = 0;
     STACKTOP = i3;
     return i15 | 0;
    }
    i20 = HEAP32[i43 + 24 >> 2] | 0;
    i13 = HEAP32[i43 + 12 >> 2] | 0;
    do if ((i13 | 0) == (i43 | 0)) {
     i5 = i43 + 20 | 0;
     i14 = HEAP32[i5 >> 2] | 0;
     if (!i14) {
      i29 = i43 + 16 | 0;
      i33 = HEAP32[i29 >> 2] | 0;
      if (!i33) {
       i45 = 0;
       break;
      } else {
       i46 = i33;
       i47 = i29;
      }
     } else {
      i46 = i14;
      i47 = i5;
     }
     while (1) {
      i5 = i46 + 20 | 0;
      i14 = HEAP32[i5 >> 2] | 0;
      if (i14 | 0) {
       i46 = i14;
       i47 = i5;
       continue;
      }
      i5 = i46 + 16 | 0;
      i14 = HEAP32[i5 >> 2] | 0;
      if (!i14) break; else {
       i46 = i14;
       i47 = i5;
      }
     }
     HEAP32[i47 >> 2] = 0;
     i45 = i46;
    } else {
     i5 = HEAP32[i43 + 8 >> 2] | 0;
     HEAP32[i5 + 12 >> 2] = i13;
     HEAP32[i13 + 8 >> 2] = i5;
     i45 = i13;
    } while (0);
    do if (!i20) i48 = i10; else {
     i13 = HEAP32[i43 + 28 >> 2] | 0;
     i5 = 5843824 + (i13 << 2) | 0;
     if ((i43 | 0) == (HEAP32[i5 >> 2] | 0)) {
      HEAP32[i5 >> 2] = i45;
      if (!i45) {
       i5 = i10 & ~(1 << i13);
       HEAP32[1460881] = i5;
       i48 = i5;
       break;
      }
     } else {
      HEAP32[i20 + 16 + (((HEAP32[i20 + 16 >> 2] | 0) != (i43 | 0) & 1) << 2) >> 2] = i45;
      if (!i45) {
       i48 = i10;
       break;
      }
     }
     HEAP32[i45 + 24 >> 2] = i20;
     i5 = HEAP32[i43 + 16 >> 2] | 0;
     if (i5 | 0) {
      HEAP32[i45 + 16 >> 2] = i5;
      HEAP32[i5 + 24 >> 2] = i45;
     }
     i5 = HEAP32[i43 + 20 >> 2] | 0;
     if (!i5) i48 = i10; else {
      HEAP32[i45 + 20 >> 2] = i5;
      HEAP32[i5 + 24 >> 2] = i45;
      i48 = i10;
     }
    } while (0);
    do if (i44 >>> 0 < 16) {
     i10 = i44 + i6 | 0;
     HEAP32[i43 + 4 >> 2] = i10 | 3;
     i20 = i43 + i10 + 4 | 0;
     HEAP32[i20 >> 2] = HEAP32[i20 >> 2] | 1;
    } else {
     HEAP32[i43 + 4 >> 2] = i6 | 3;
     HEAP32[i7 + 4 >> 2] = i44 | 1;
     HEAP32[i7 + i44 >> 2] = i44;
     i20 = i44 >>> 3;
     if (i44 >>> 0 < 256) {
      i10 = 5843560 + (i20 << 1 << 2) | 0;
      i5 = HEAP32[1460880] | 0;
      i13 = 1 << i20;
      if (!(i5 & i13)) {
       HEAP32[1460880] = i5 | i13;
       i49 = i10;
       i50 = i10 + 8 | 0;
      } else {
       i13 = i10 + 8 | 0;
       i49 = HEAP32[i13 >> 2] | 0;
       i50 = i13;
      }
      HEAP32[i50 >> 2] = i7;
      HEAP32[i49 + 12 >> 2] = i7;
      HEAP32[i7 + 8 >> 2] = i49;
      HEAP32[i7 + 12 >> 2] = i10;
      break;
     }
     i10 = i44 >>> 8;
     if (!i10) i51 = 0; else if (i44 >>> 0 > 16777215) i51 = 31; else {
      i13 = (i10 + 1048320 | 0) >>> 16 & 8;
      i5 = i10 << i13;
      i10 = (i5 + 520192 | 0) >>> 16 & 4;
      i20 = i5 << i10;
      i5 = (i20 + 245760 | 0) >>> 16 & 2;
      i14 = 14 - (i10 | i13 | i5) + (i20 << i5 >>> 15) | 0;
      i51 = i44 >>> (i14 + 7 | 0) & 1 | i14 << 1;
     }
     i14 = 5843824 + (i51 << 2) | 0;
     HEAP32[i7 + 28 >> 2] = i51;
     i5 = i7 + 16 | 0;
     HEAP32[i5 + 4 >> 2] = 0;
     HEAP32[i5 >> 2] = 0;
     i5 = 1 << i51;
     if (!(i48 & i5)) {
      HEAP32[1460881] = i48 | i5;
      HEAP32[i14 >> 2] = i7;
      HEAP32[i7 + 24 >> 2] = i14;
      HEAP32[i7 + 12 >> 2] = i7;
      HEAP32[i7 + 8 >> 2] = i7;
      break;
     }
     i5 = i44 << ((i51 | 0) == 31 ? 0 : 25 - (i51 >>> 1) | 0);
     i20 = HEAP32[i14 >> 2] | 0;
     while (1) {
      if ((HEAP32[i20 + 4 >> 2] & -8 | 0) == (i44 | 0)) {
       i2 = 97;
       break;
      }
      i52 = i20 + 16 + (i5 >>> 31 << 2) | 0;
      i14 = HEAP32[i52 >> 2] | 0;
      if (!i14) {
       i2 = 96;
       break;
      } else {
       i5 = i5 << 1;
       i20 = i14;
      }
     }
     if ((i2 | 0) == 96) {
      HEAP32[i52 >> 2] = i7;
      HEAP32[i7 + 24 >> 2] = i20;
      HEAP32[i7 + 12 >> 2] = i7;
      HEAP32[i7 + 8 >> 2] = i7;
      break;
     } else if ((i2 | 0) == 97) {
      i5 = i20 + 8 | 0;
      i14 = HEAP32[i5 >> 2] | 0;
      HEAP32[i14 + 12 >> 2] = i7;
      HEAP32[i5 >> 2] = i7;
      HEAP32[i7 + 8 >> 2] = i14;
      HEAP32[i7 + 12 >> 2] = i20;
      HEAP32[i7 + 24 >> 2] = 0;
      break;
     }
    } while (0);
    i15 = i43 + 8 | 0;
    STACKTOP = i3;
    return i15 | 0;
   } else i19 = i6;
  }
 } while (0);
 i43 = HEAP32[1460882] | 0;
 if (i43 >>> 0 >= i19 >>> 0) {
  i52 = i43 - i19 | 0;
  i44 = HEAP32[1460885] | 0;
  if (i52 >>> 0 > 15) {
   i51 = i44 + i19 | 0;
   HEAP32[1460885] = i51;
   HEAP32[1460882] = i52;
   HEAP32[i51 + 4 >> 2] = i52 | 1;
   HEAP32[i44 + i43 >> 2] = i52;
   HEAP32[i44 + 4 >> 2] = i19 | 3;
  } else {
   HEAP32[1460882] = 0;
   HEAP32[1460885] = 0;
   HEAP32[i44 + 4 >> 2] = i43 | 3;
   i52 = i44 + i43 + 4 | 0;
   HEAP32[i52 >> 2] = HEAP32[i52 >> 2] | 1;
  }
  i15 = i44 + 8 | 0;
  STACKTOP = i3;
  return i15 | 0;
 }
 i44 = HEAP32[1460883] | 0;
 if (i44 >>> 0 > i19 >>> 0) {
  i52 = i44 - i19 | 0;
  HEAP32[1460883] = i52;
  i43 = HEAP32[1460886] | 0;
  i51 = i43 + i19 | 0;
  HEAP32[1460886] = i51;
  HEAP32[i51 + 4 >> 2] = i52 | 1;
  HEAP32[i43 + 4 >> 2] = i19 | 3;
  i15 = i43 + 8 | 0;
  STACKTOP = i3;
  return i15 | 0;
 }
 if (!(HEAP32[1460998] | 0)) {
  HEAP32[1461e3] = 4096;
  HEAP32[1460999] = 4096;
  HEAP32[1461001] = -1;
  HEAP32[1461002] = -1;
  HEAP32[1461003] = 0;
  HEAP32[1460991] = 0;
  HEAP32[1460998] = i4 & -16 ^ 1431655768;
  i53 = 4096;
 } else i53 = HEAP32[1461e3] | 0;
 i4 = i19 + 48 | 0;
 i43 = i19 + 47 | 0;
 i52 = i53 + i43 | 0;
 i51 = 0 - i53 | 0;
 i53 = i52 & i51;
 if (i53 >>> 0 <= i19 >>> 0) {
  i15 = 0;
  STACKTOP = i3;
  return i15 | 0;
 }
 i48 = HEAP32[1460990] | 0;
 if (i48 | 0) {
  i49 = HEAP32[1460988] | 0;
  i50 = i49 + i53 | 0;
  if (i50 >>> 0 <= i49 >>> 0 | i50 >>> 0 > i48 >>> 0) {
   i15 = 0;
   STACKTOP = i3;
   return i15 | 0;
  }
 }
 L167 : do if (!(HEAP32[1460991] & 4)) {
  i48 = HEAP32[1460886] | 0;
  L169 : do if (!i48) i2 = 118; else {
   i50 = 5843968;
   while (1) {
    i49 = HEAP32[i50 >> 2] | 0;
    if (i49 >>> 0 <= i48 >>> 0) {
     i54 = i50 + 4 | 0;
     if ((i49 + (HEAP32[i54 >> 2] | 0) | 0) >>> 0 > i48 >>> 0) break;
    }
    i49 = HEAP32[i50 + 8 >> 2] | 0;
    if (!i49) {
     i2 = 118;
     break L169;
    } else i50 = i49;
   }
   i20 = i52 - i44 & i51;
   if (i20 >>> 0 < 2147483647) {
    i49 = _sbrk(i20 | 0) | 0;
    if ((i49 | 0) == ((HEAP32[i50 >> 2] | 0) + (HEAP32[i54 >> 2] | 0) | 0)) if ((i49 | 0) == (-1 | 0)) i55 = i20; else {
     i56 = i20;
     i57 = i49;
     i2 = 135;
     break L167;
    } else {
     i58 = i49;
     i59 = i20;
     i2 = 126;
    }
   } else i55 = 0;
  } while (0);
  do if ((i2 | 0) == 118) {
   i48 = _sbrk(0) | 0;
   if ((i48 | 0) == (-1 | 0)) i55 = 0; else {
    i6 = i48;
    i20 = HEAP32[1460999] | 0;
    i49 = i20 + -1 | 0;
    i45 = ((i49 & i6 | 0) == 0 ? 0 : (i49 + i6 & 0 - i20) - i6 | 0) + i53 | 0;
    i6 = HEAP32[1460988] | 0;
    i20 = i45 + i6 | 0;
    if (i45 >>> 0 > i19 >>> 0 & i45 >>> 0 < 2147483647) {
     i49 = HEAP32[1460990] | 0;
     if (i49 | 0) if (i20 >>> 0 <= i6 >>> 0 | i20 >>> 0 > i49 >>> 0) {
      i55 = 0;
      break;
     }
     i49 = _sbrk(i45 | 0) | 0;
     if ((i49 | 0) == (i48 | 0)) {
      i56 = i45;
      i57 = i48;
      i2 = 135;
      break L167;
     } else {
      i58 = i49;
      i59 = i45;
      i2 = 126;
     }
    } else i55 = 0;
   }
  } while (0);
  do if ((i2 | 0) == 126) {
   i45 = 0 - i59 | 0;
   if (!(i4 >>> 0 > i59 >>> 0 & (i59 >>> 0 < 2147483647 & (i58 | 0) != (-1 | 0)))) if ((i58 | 0) == (-1 | 0)) {
    i55 = 0;
    break;
   } else {
    i56 = i59;
    i57 = i58;
    i2 = 135;
    break L167;
   }
   i49 = HEAP32[1461e3] | 0;
   i48 = i43 - i59 + i49 & 0 - i49;
   if (i48 >>> 0 >= 2147483647) {
    i56 = i59;
    i57 = i58;
    i2 = 135;
    break L167;
   }
   if ((_sbrk(i48 | 0) | 0) == (-1 | 0)) {
    _sbrk(i45 | 0) | 0;
    i55 = 0;
    break;
   } else {
    i56 = i48 + i59 | 0;
    i57 = i58;
    i2 = 135;
    break L167;
   }
  } while (0);
  HEAP32[1460991] = HEAP32[1460991] | 4;
  i60 = i55;
  i2 = 133;
 } else {
  i60 = 0;
  i2 = 133;
 } while (0);
 if ((i2 | 0) == 133) if (i53 >>> 0 < 2147483647) {
  i55 = _sbrk(i53 | 0) | 0;
  i53 = _sbrk(0) | 0;
  i58 = i53 - i55 | 0;
  i59 = i58 >>> 0 > (i19 + 40 | 0) >>> 0;
  if (!((i55 | 0) == (-1 | 0) | i59 ^ 1 | i55 >>> 0 < i53 >>> 0 & ((i55 | 0) != (-1 | 0) & (i53 | 0) != (-1 | 0)) ^ 1)) {
   i56 = i59 ? i58 : i60;
   i57 = i55;
   i2 = 135;
  }
 }
 if ((i2 | 0) == 135) {
  i55 = (HEAP32[1460988] | 0) + i56 | 0;
  HEAP32[1460988] = i55;
  if (i55 >>> 0 > (HEAP32[1460989] | 0) >>> 0) HEAP32[1460989] = i55;
  i55 = HEAP32[1460886] | 0;
  do if (!i55) {
   i60 = HEAP32[1460884] | 0;
   if ((i60 | 0) == 0 | i57 >>> 0 < i60 >>> 0) HEAP32[1460884] = i57;
   HEAP32[1460992] = i57;
   HEAP32[1460993] = i56;
   HEAP32[1460995] = 0;
   HEAP32[1460889] = HEAP32[1460998];
   HEAP32[1460888] = -1;
   HEAP32[1460893] = 5843560;
   HEAP32[1460892] = 5843560;
   HEAP32[1460895] = 5843568;
   HEAP32[1460894] = 5843568;
   HEAP32[1460897] = 5843576;
   HEAP32[1460896] = 5843576;
   HEAP32[1460899] = 5843584;
   HEAP32[1460898] = 5843584;
   HEAP32[1460901] = 5843592;
   HEAP32[1460900] = 5843592;
   HEAP32[1460903] = 5843600;
   HEAP32[1460902] = 5843600;
   HEAP32[1460905] = 5843608;
   HEAP32[1460904] = 5843608;
   HEAP32[1460907] = 5843616;
   HEAP32[1460906] = 5843616;
   HEAP32[1460909] = 5843624;
   HEAP32[1460908] = 5843624;
   HEAP32[1460911] = 5843632;
   HEAP32[1460910] = 5843632;
   HEAP32[1460913] = 5843640;
   HEAP32[1460912] = 5843640;
   HEAP32[1460915] = 5843648;
   HEAP32[1460914] = 5843648;
   HEAP32[1460917] = 5843656;
   HEAP32[1460916] = 5843656;
   HEAP32[1460919] = 5843664;
   HEAP32[1460918] = 5843664;
   HEAP32[1460921] = 5843672;
   HEAP32[1460920] = 5843672;
   HEAP32[1460923] = 5843680;
   HEAP32[1460922] = 5843680;
   HEAP32[1460925] = 5843688;
   HEAP32[1460924] = 5843688;
   HEAP32[1460927] = 5843696;
   HEAP32[1460926] = 5843696;
   HEAP32[1460929] = 5843704;
   HEAP32[1460928] = 5843704;
   HEAP32[1460931] = 5843712;
   HEAP32[1460930] = 5843712;
   HEAP32[1460933] = 5843720;
   HEAP32[1460932] = 5843720;
   HEAP32[1460935] = 5843728;
   HEAP32[1460934] = 5843728;
   HEAP32[1460937] = 5843736;
   HEAP32[1460936] = 5843736;
   HEAP32[1460939] = 5843744;
   HEAP32[1460938] = 5843744;
   HEAP32[1460941] = 5843752;
   HEAP32[1460940] = 5843752;
   HEAP32[1460943] = 5843760;
   HEAP32[1460942] = 5843760;
   HEAP32[1460945] = 5843768;
   HEAP32[1460944] = 5843768;
   HEAP32[1460947] = 5843776;
   HEAP32[1460946] = 5843776;
   HEAP32[1460949] = 5843784;
   HEAP32[1460948] = 5843784;
   HEAP32[1460951] = 5843792;
   HEAP32[1460950] = 5843792;
   HEAP32[1460953] = 5843800;
   HEAP32[1460952] = 5843800;
   HEAP32[1460955] = 5843808;
   HEAP32[1460954] = 5843808;
   i60 = i56 + -40 | 0;
   i58 = i57 + 8 | 0;
   i59 = (i58 & 7 | 0) == 0 ? 0 : 0 - i58 & 7;
   i58 = i57 + i59 | 0;
   i53 = i60 - i59 | 0;
   HEAP32[1460886] = i58;
   HEAP32[1460883] = i53;
   HEAP32[i58 + 4 >> 2] = i53 | 1;
   HEAP32[i57 + i60 + 4 >> 2] = 40;
   HEAP32[1460887] = HEAP32[1461002];
  } else {
   i60 = 5843968;
   while (1) {
    i61 = HEAP32[i60 >> 2] | 0;
    i62 = i60 + 4 | 0;
    i63 = HEAP32[i62 >> 2] | 0;
    if ((i57 | 0) == (i61 + i63 | 0)) {
     i2 = 143;
     break;
    }
    i53 = HEAP32[i60 + 8 >> 2] | 0;
    if (!i53) break; else i60 = i53;
   }
   if ((i2 | 0) == 143) if (!(HEAP32[i60 + 12 >> 2] & 8)) if (i57 >>> 0 > i55 >>> 0 & i61 >>> 0 <= i55 >>> 0) {
    HEAP32[i62 >> 2] = i63 + i56;
    i53 = (HEAP32[1460883] | 0) + i56 | 0;
    i58 = i55 + 8 | 0;
    i59 = (i58 & 7 | 0) == 0 ? 0 : 0 - i58 & 7;
    i58 = i55 + i59 | 0;
    i43 = i53 - i59 | 0;
    HEAP32[1460886] = i58;
    HEAP32[1460883] = i43;
    HEAP32[i58 + 4 >> 2] = i43 | 1;
    HEAP32[i55 + i53 + 4 >> 2] = 40;
    HEAP32[1460887] = HEAP32[1461002];
    break;
   }
   if (i57 >>> 0 < (HEAP32[1460884] | 0) >>> 0) HEAP32[1460884] = i57;
   i53 = i57 + i56 | 0;
   i43 = 5843968;
   while (1) {
    if ((HEAP32[i43 >> 2] | 0) == (i53 | 0)) {
     i2 = 151;
     break;
    }
    i58 = HEAP32[i43 + 8 >> 2] | 0;
    if (!i58) {
     i64 = 5843968;
     break;
    } else i43 = i58;
   }
   if ((i2 | 0) == 151) if (!(HEAP32[i43 + 12 >> 2] & 8)) {
    HEAP32[i43 >> 2] = i57;
    i60 = i43 + 4 | 0;
    HEAP32[i60 >> 2] = (HEAP32[i60 >> 2] | 0) + i56;
    i60 = i57 + 8 | 0;
    i58 = i57 + ((i60 & 7 | 0) == 0 ? 0 : 0 - i60 & 7) | 0;
    i60 = i53 + 8 | 0;
    i59 = i53 + ((i60 & 7 | 0) == 0 ? 0 : 0 - i60 & 7) | 0;
    i60 = i58 + i19 | 0;
    i4 = i59 - i58 - i19 | 0;
    HEAP32[i58 + 4 >> 2] = i19 | 3;
    do if ((i55 | 0) == (i59 | 0)) {
     i54 = (HEAP32[1460883] | 0) + i4 | 0;
     HEAP32[1460883] = i54;
     HEAP32[1460886] = i60;
     HEAP32[i60 + 4 >> 2] = i54 | 1;
    } else {
     if ((HEAP32[1460885] | 0) == (i59 | 0)) {
      i54 = (HEAP32[1460882] | 0) + i4 | 0;
      HEAP32[1460882] = i54;
      HEAP32[1460885] = i60;
      HEAP32[i60 + 4 >> 2] = i54 | 1;
      HEAP32[i60 + i54 >> 2] = i54;
      break;
     }
     i54 = HEAP32[i59 + 4 >> 2] | 0;
     if ((i54 & 3 | 0) == 1) {
      i51 = i54 & -8;
      i44 = i54 >>> 3;
      L234 : do if (i54 >>> 0 < 256) {
       i52 = HEAP32[i59 + 8 >> 2] | 0;
       i48 = HEAP32[i59 + 12 >> 2] | 0;
       if ((i48 | 0) == (i52 | 0)) {
        HEAP32[1460880] = HEAP32[1460880] & ~(1 << i44);
        break;
       } else {
        HEAP32[i52 + 12 >> 2] = i48;
        HEAP32[i48 + 8 >> 2] = i52;
        break;
       }
      } else {
       i52 = HEAP32[i59 + 24 >> 2] | 0;
       i48 = HEAP32[i59 + 12 >> 2] | 0;
       do if ((i48 | 0) == (i59 | 0)) {
        i45 = i59 + 16 | 0;
        i49 = i45 + 4 | 0;
        i20 = HEAP32[i49 >> 2] | 0;
        if (!i20) {
         i6 = HEAP32[i45 >> 2] | 0;
         if (!i6) {
          i65 = 0;
          break;
         } else {
          i66 = i6;
          i67 = i45;
         }
        } else {
         i66 = i20;
         i67 = i49;
        }
        while (1) {
         i49 = i66 + 20 | 0;
         i20 = HEAP32[i49 >> 2] | 0;
         if (i20 | 0) {
          i66 = i20;
          i67 = i49;
          continue;
         }
         i49 = i66 + 16 | 0;
         i20 = HEAP32[i49 >> 2] | 0;
         if (!i20) break; else {
          i66 = i20;
          i67 = i49;
         }
        }
        HEAP32[i67 >> 2] = 0;
        i65 = i66;
       } else {
        i49 = HEAP32[i59 + 8 >> 2] | 0;
        HEAP32[i49 + 12 >> 2] = i48;
        HEAP32[i48 + 8 >> 2] = i49;
        i65 = i48;
       } while (0);
       if (!i52) break;
       i48 = HEAP32[i59 + 28 >> 2] | 0;
       i49 = 5843824 + (i48 << 2) | 0;
       do if ((HEAP32[i49 >> 2] | 0) == (i59 | 0)) {
        HEAP32[i49 >> 2] = i65;
        if (i65 | 0) break;
        HEAP32[1460881] = HEAP32[1460881] & ~(1 << i48);
        break L234;
       } else {
        HEAP32[i52 + 16 + (((HEAP32[i52 + 16 >> 2] | 0) != (i59 | 0) & 1) << 2) >> 2] = i65;
        if (!i65) break L234;
       } while (0);
       HEAP32[i65 + 24 >> 2] = i52;
       i48 = i59 + 16 | 0;
       i49 = HEAP32[i48 >> 2] | 0;
       if (i49 | 0) {
        HEAP32[i65 + 16 >> 2] = i49;
        HEAP32[i49 + 24 >> 2] = i65;
       }
       i49 = HEAP32[i48 + 4 >> 2] | 0;
       if (!i49) break;
       HEAP32[i65 + 20 >> 2] = i49;
       HEAP32[i49 + 24 >> 2] = i65;
      } while (0);
      i68 = i59 + i51 | 0;
      i69 = i51 + i4 | 0;
     } else {
      i68 = i59;
      i69 = i4;
     }
     i44 = i68 + 4 | 0;
     HEAP32[i44 >> 2] = HEAP32[i44 >> 2] & -2;
     HEAP32[i60 + 4 >> 2] = i69 | 1;
     HEAP32[i60 + i69 >> 2] = i69;
     i44 = i69 >>> 3;
     if (i69 >>> 0 < 256) {
      i54 = 5843560 + (i44 << 1 << 2) | 0;
      i50 = HEAP32[1460880] | 0;
      i49 = 1 << i44;
      if (!(i50 & i49)) {
       HEAP32[1460880] = i50 | i49;
       i70 = i54;
       i71 = i54 + 8 | 0;
      } else {
       i49 = i54 + 8 | 0;
       i70 = HEAP32[i49 >> 2] | 0;
       i71 = i49;
      }
      HEAP32[i71 >> 2] = i60;
      HEAP32[i70 + 12 >> 2] = i60;
      HEAP32[i60 + 8 >> 2] = i70;
      HEAP32[i60 + 12 >> 2] = i54;
      break;
     }
     i54 = i69 >>> 8;
     do if (!i54) i72 = 0; else {
      if (i69 >>> 0 > 16777215) {
       i72 = 31;
       break;
      }
      i49 = (i54 + 1048320 | 0) >>> 16 & 8;
      i50 = i54 << i49;
      i44 = (i50 + 520192 | 0) >>> 16 & 4;
      i48 = i50 << i44;
      i50 = (i48 + 245760 | 0) >>> 16 & 2;
      i20 = 14 - (i44 | i49 | i50) + (i48 << i50 >>> 15) | 0;
      i72 = i69 >>> (i20 + 7 | 0) & 1 | i20 << 1;
     } while (0);
     i54 = 5843824 + (i72 << 2) | 0;
     HEAP32[i60 + 28 >> 2] = i72;
     i51 = i60 + 16 | 0;
     HEAP32[i51 + 4 >> 2] = 0;
     HEAP32[i51 >> 2] = 0;
     i51 = HEAP32[1460881] | 0;
     i20 = 1 << i72;
     if (!(i51 & i20)) {
      HEAP32[1460881] = i51 | i20;
      HEAP32[i54 >> 2] = i60;
      HEAP32[i60 + 24 >> 2] = i54;
      HEAP32[i60 + 12 >> 2] = i60;
      HEAP32[i60 + 8 >> 2] = i60;
      break;
     }
     i20 = i69 << ((i72 | 0) == 31 ? 0 : 25 - (i72 >>> 1) | 0);
     i51 = HEAP32[i54 >> 2] | 0;
     while (1) {
      if ((HEAP32[i51 + 4 >> 2] & -8 | 0) == (i69 | 0)) {
       i2 = 192;
       break;
      }
      i73 = i51 + 16 + (i20 >>> 31 << 2) | 0;
      i54 = HEAP32[i73 >> 2] | 0;
      if (!i54) {
       i2 = 191;
       break;
      } else {
       i20 = i20 << 1;
       i51 = i54;
      }
     }
     if ((i2 | 0) == 191) {
      HEAP32[i73 >> 2] = i60;
      HEAP32[i60 + 24 >> 2] = i51;
      HEAP32[i60 + 12 >> 2] = i60;
      HEAP32[i60 + 8 >> 2] = i60;
      break;
     } else if ((i2 | 0) == 192) {
      i20 = i51 + 8 | 0;
      i54 = HEAP32[i20 >> 2] | 0;
      HEAP32[i54 + 12 >> 2] = i60;
      HEAP32[i20 >> 2] = i60;
      HEAP32[i60 + 8 >> 2] = i54;
      HEAP32[i60 + 12 >> 2] = i51;
      HEAP32[i60 + 24 >> 2] = 0;
      break;
     }
    } while (0);
    i15 = i58 + 8 | 0;
    STACKTOP = i3;
    return i15 | 0;
   } else i64 = 5843968;
   while (1) {
    i60 = HEAP32[i64 >> 2] | 0;
    if (i60 >>> 0 <= i55 >>> 0) {
     i74 = i60 + (HEAP32[i64 + 4 >> 2] | 0) | 0;
     if (i74 >>> 0 > i55 >>> 0) break;
    }
    i64 = HEAP32[i64 + 8 >> 2] | 0;
   }
   i58 = i74 + -47 | 0;
   i60 = i58 + 8 | 0;
   i4 = i58 + ((i60 & 7 | 0) == 0 ? 0 : 0 - i60 & 7) | 0;
   i60 = i55 + 16 | 0;
   i58 = i4 >>> 0 < i60 >>> 0 ? i55 : i4;
   i4 = i58 + 8 | 0;
   i59 = i56 + -40 | 0;
   i53 = i57 + 8 | 0;
   i43 = (i53 & 7 | 0) == 0 ? 0 : 0 - i53 & 7;
   i53 = i57 + i43 | 0;
   i54 = i59 - i43 | 0;
   HEAP32[1460886] = i53;
   HEAP32[1460883] = i54;
   HEAP32[i53 + 4 >> 2] = i54 | 1;
   HEAP32[i57 + i59 + 4 >> 2] = 40;
   HEAP32[1460887] = HEAP32[1461002];
   i59 = i58 + 4 | 0;
   HEAP32[i59 >> 2] = 27;
   HEAP32[i4 >> 2] = HEAP32[1460992];
   HEAP32[i4 + 4 >> 2] = HEAP32[1460993];
   HEAP32[i4 + 8 >> 2] = HEAP32[1460994];
   HEAP32[i4 + 12 >> 2] = HEAP32[1460995];
   HEAP32[1460992] = i57;
   HEAP32[1460993] = i56;
   HEAP32[1460995] = 0;
   HEAP32[1460994] = i4;
   i4 = i58 + 24 | 0;
   do {
    i54 = i4;
    i4 = i4 + 4 | 0;
    HEAP32[i4 >> 2] = 7;
   } while ((i54 + 8 | 0) >>> 0 < i74 >>> 0);
   if ((i58 | 0) != (i55 | 0)) {
    i4 = i58 - i55 | 0;
    HEAP32[i59 >> 2] = HEAP32[i59 >> 2] & -2;
    HEAP32[i55 + 4 >> 2] = i4 | 1;
    HEAP32[i58 >> 2] = i4;
    i54 = i4 >>> 3;
    if (i4 >>> 0 < 256) {
     i53 = 5843560 + (i54 << 1 << 2) | 0;
     i43 = HEAP32[1460880] | 0;
     i20 = 1 << i54;
     if (!(i43 & i20)) {
      HEAP32[1460880] = i43 | i20;
      i75 = i53;
      i76 = i53 + 8 | 0;
     } else {
      i20 = i53 + 8 | 0;
      i75 = HEAP32[i20 >> 2] | 0;
      i76 = i20;
     }
     HEAP32[i76 >> 2] = i55;
     HEAP32[i75 + 12 >> 2] = i55;
     HEAP32[i55 + 8 >> 2] = i75;
     HEAP32[i55 + 12 >> 2] = i53;
     break;
    }
    i53 = i4 >>> 8;
    if (!i53) i77 = 0; else if (i4 >>> 0 > 16777215) i77 = 31; else {
     i20 = (i53 + 1048320 | 0) >>> 16 & 8;
     i43 = i53 << i20;
     i53 = (i43 + 520192 | 0) >>> 16 & 4;
     i54 = i43 << i53;
     i43 = (i54 + 245760 | 0) >>> 16 & 2;
     i50 = 14 - (i53 | i20 | i43) + (i54 << i43 >>> 15) | 0;
     i77 = i4 >>> (i50 + 7 | 0) & 1 | i50 << 1;
    }
    i50 = 5843824 + (i77 << 2) | 0;
    HEAP32[i55 + 28 >> 2] = i77;
    HEAP32[i55 + 20 >> 2] = 0;
    HEAP32[i60 >> 2] = 0;
    i43 = HEAP32[1460881] | 0;
    i54 = 1 << i77;
    if (!(i43 & i54)) {
     HEAP32[1460881] = i43 | i54;
     HEAP32[i50 >> 2] = i55;
     HEAP32[i55 + 24 >> 2] = i50;
     HEAP32[i55 + 12 >> 2] = i55;
     HEAP32[i55 + 8 >> 2] = i55;
     break;
    }
    i54 = i4 << ((i77 | 0) == 31 ? 0 : 25 - (i77 >>> 1) | 0);
    i43 = HEAP32[i50 >> 2] | 0;
    while (1) {
     if ((HEAP32[i43 + 4 >> 2] & -8 | 0) == (i4 | 0)) {
      i2 = 213;
      break;
     }
     i78 = i43 + 16 + (i54 >>> 31 << 2) | 0;
     i50 = HEAP32[i78 >> 2] | 0;
     if (!i50) {
      i2 = 212;
      break;
     } else {
      i54 = i54 << 1;
      i43 = i50;
     }
    }
    if ((i2 | 0) == 212) {
     HEAP32[i78 >> 2] = i55;
     HEAP32[i55 + 24 >> 2] = i43;
     HEAP32[i55 + 12 >> 2] = i55;
     HEAP32[i55 + 8 >> 2] = i55;
     break;
    } else if ((i2 | 0) == 213) {
     i54 = i43 + 8 | 0;
     i4 = HEAP32[i54 >> 2] | 0;
     HEAP32[i4 + 12 >> 2] = i55;
     HEAP32[i54 >> 2] = i55;
     HEAP32[i55 + 8 >> 2] = i4;
     HEAP32[i55 + 12 >> 2] = i43;
     HEAP32[i55 + 24 >> 2] = 0;
     break;
    }
   }
  } while (0);
  i55 = HEAP32[1460883] | 0;
  if (i55 >>> 0 > i19 >>> 0) {
   i2 = i55 - i19 | 0;
   HEAP32[1460883] = i2;
   i55 = HEAP32[1460886] | 0;
   i78 = i55 + i19 | 0;
   HEAP32[1460886] = i78;
   HEAP32[i78 + 4 >> 2] = i2 | 1;
   HEAP32[i55 + 4 >> 2] = i19 | 3;
   i15 = i55 + 8 | 0;
   STACKTOP = i3;
   return i15 | 0;
  }
 }
 i55 = ___errno_location() | 0;
 HEAP32[i55 >> 2] = 12;
 i15 = 0;
 STACKTOP = i3;
 return i15 | 0;
}

function __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_(i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 var i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, i90 = 0, i91 = 0, i92 = 0, i93 = 0, i94 = 0, i95 = 0, i96 = 0, i97 = 0, i98 = 0, i99 = 0, i100 = 0, i101 = 0, i102 = 0, i103 = 0, i104 = 0, i105 = 0, i106 = 0, i107 = 0, i108 = 0, i109 = 0, i110 = 0, i111 = 0, i112 = 0, i113 = 0, i114 = 0, i115 = 0, i116 = 0, i117 = 0, i118 = 0, i119 = 0, i120 = 0;
 i12 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(512);
 i14 = i13 + 96 | 0;
 i15 = i13 + 104 | 0;
 i16 = i13 + 88 | 0;
 i17 = i13 + 80 | 0;
 i18 = i13 + 76 | 0;
 i19 = i13 + 504 | 0;
 i20 = i13 + 72 | 0;
 i21 = i13 + 68 | 0;
 i22 = i13 + 56 | 0;
 i23 = i13 + 44 | 0;
 i24 = i13 + 32 | 0;
 i25 = i13 + 20 | 0;
 i26 = i13 + 8 | 0;
 i27 = i13 + 4 | 0;
 i28 = i13;
 HEAP32[i14 >> 2] = i11;
 HEAP32[i16 >> 2] = i15;
 i11 = i16 + 4 | 0;
 HEAP32[i11 >> 2] = 130;
 HEAP32[i17 >> 2] = i15;
 HEAP32[i18 >> 2] = i15 + 400;
 HEAP32[i22 >> 2] = 0;
 HEAP32[i22 + 4 >> 2] = 0;
 HEAP32[i22 + 8 >> 2] = 0;
 i15 = 0;
 while (1) {
  if ((i15 | 0) == 3) break;
  HEAP32[i22 + (i15 << 2) >> 2] = 0;
  i15 = i15 + 1 | 0;
 }
 HEAP32[i23 >> 2] = 0;
 HEAP32[i23 + 4 >> 2] = 0;
 HEAP32[i23 + 8 >> 2] = 0;
 i15 = 0;
 while (1) {
  if ((i15 | 0) == 3) break;
  HEAP32[i23 + (i15 << 2) >> 2] = 0;
  i15 = i15 + 1 | 0;
 }
 HEAP32[i24 >> 2] = 0;
 HEAP32[i24 + 4 >> 2] = 0;
 HEAP32[i24 + 8 >> 2] = 0;
 i15 = 0;
 while (1) {
  if ((i15 | 0) == 3) break;
  HEAP32[i24 + (i15 << 2) >> 2] = 0;
  i15 = i15 + 1 | 0;
 }
 HEAP32[i25 >> 2] = 0;
 HEAP32[i25 + 4 >> 2] = 0;
 HEAP32[i25 + 8 >> 2] = 0;
 i15 = 0;
 while (1) {
  if ((i15 | 0) == 3) break;
  HEAP32[i25 + (i15 << 2) >> 2] = 0;
  i15 = i15 + 1 | 0;
 }
 HEAP32[i26 >> 2] = 0;
 HEAP32[i26 + 4 >> 2] = 0;
 HEAP32[i26 + 8 >> 2] = 0;
 i15 = 0;
 while (1) {
  if ((i15 | 0) == 3) break;
  HEAP32[i26 + (i15 << 2) >> 2] = 0;
  i15 = i15 + 1 | 0;
 }
 __ZNSt3__211__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri(i3, i4, i19, i20, i21, i22, i23, i24, i25, i27);
 HEAP32[i10 >> 2] = HEAP32[i9 >> 2];
 i4 = i24 + 8 + 3 | 0;
 i3 = i24 + 4 | 0;
 i15 = i25 + 8 + 3 | 0;
 i29 = i25 + 4 | 0;
 i30 = (i5 & 512 | 0) != 0;
 i5 = i23 + 8 + 3 | 0;
 i31 = i23 + 4 | 0;
 i32 = i26 + 8 + 3 | 0;
 i33 = i26 + 4 | 0;
 i34 = i19 + 3 | 0;
 i35 = i22 + 11 | 0;
 i36 = i22 + 4 | 0;
 i37 = 0;
 i38 = 0;
 L21 : while (1) {
  if (i38 >>> 0 >= 4) {
   i12 = 229;
   break;
  }
  i39 = HEAP32[i1 >> 2] | 0;
  do if (!i39) i40 = 1; else {
   i41 = HEAP32[i39 + 12 >> 2] | 0;
   if ((i41 | 0) == (HEAP32[i39 + 16 >> 2] | 0)) i42 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i39 >> 2] | 0) + 36 >> 2] & 127](i39) | 0; else i42 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i41 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i42, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i1 >> 2] = 0;
    i40 = 1;
    break;
   } else {
    i40 = (HEAP32[i1 >> 2] | 0) == 0;
    break;
   }
  } while (0);
  i39 = HEAP32[i2 >> 2] | 0;
  do if (!i39) i12 = 31; else {
   i41 = HEAP32[i39 + 12 >> 2] | 0;
   if ((i41 | 0) == (HEAP32[i39 + 16 >> 2] | 0)) i43 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i39 >> 2] | 0) + 36 >> 2] & 127](i39) | 0; else i43 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i41 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i43, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i2 >> 2] = 0;
    i12 = 31;
    break;
   } else if (i40) {
    i44 = i39;
    break;
   } else {
    i12 = 229;
    break L21;
   }
  } while (0);
  if ((i12 | 0) == 31) {
   i12 = 0;
   if (i40) {
    i12 = 229;
    break;
   } else i44 = 0;
  }
  L46 : do switch (HEAP8[i19 + i38 >> 0] | 0) {
  case 1:
   {
    if ((i38 | 0) == 3) i45 = i37; else {
     i39 = HEAP32[i1 >> 2] | 0;
     i41 = HEAP32[i39 + 12 >> 2] | 0;
     if ((i41 | 0) == (HEAP32[i39 + 16 >> 2] | 0)) i46 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i39 >> 2] | 0) + 36 >> 2] & 127](i39) | 0; else i46 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i41 >> 2] | 0) | 0;
     if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i8 >> 2] | 0) + 12 >> 2] & 31](i8, 8192, i46) | 0)) {
      i12 = 43;
      break L21;
     }
     i41 = HEAP32[i1 >> 2] | 0;
     i39 = i41 + 12 | 0;
     i47 = HEAP32[i39 >> 2] | 0;
     if ((i47 | 0) == (HEAP32[i41 + 16 >> 2] | 0)) i48 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i41 >> 2] | 0) + 40 >> 2] & 127](i41) | 0; else {
      HEAP32[i39 >> 2] = i47 + 4;
      i48 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i47 >> 2] | 0) | 0;
     }
     __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw(i26, i48);
     i49 = i44;
     i50 = i44;
     i12 = 45;
    }
    break;
   }
  case 0:
   {
    if ((i38 | 0) == 3) i45 = i37; else {
     i49 = i44;
     i50 = i44;
     i12 = 45;
    }
    break;
   }
  case 3:
   {
    i47 = HEAP8[i4 >> 0] | 0;
    i39 = i47 << 24 >> 24 < 0 ? HEAP32[i3 >> 2] | 0 : i47 & 255;
    i47 = HEAP8[i15 >> 0] | 0;
    i41 = i47 << 24 >> 24 < 0 ? HEAP32[i29 >> 2] | 0 : i47 & 255;
    if ((i39 | 0) == (0 - i41 | 0)) i45 = i37; else {
     i47 = (i39 | 0) == 0;
     i39 = HEAP32[i1 >> 2] | 0;
     i51 = HEAP32[i39 + 12 >> 2] | 0;
     i52 = (i51 | 0) == (HEAP32[i39 + 16 >> 2] | 0);
     if (i47 | (i41 | 0) == 0) {
      if (i52) i53 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i39 >> 2] | 0) + 36 >> 2] & 127](i39) | 0; else i53 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i51 >> 2] | 0) | 0;
      if (i47) {
       if ((i53 | 0) != (HEAP32[((HEAP8[i15 >> 0] | 0) < 0 ? HEAP32[i25 >> 2] | 0 : i25) >> 2] | 0)) {
        i45 = i37;
        break L46;
       }
       i47 = HEAP32[i1 >> 2] | 0;
       i41 = i47 + 12 | 0;
       i54 = HEAP32[i41 >> 2] | 0;
       if ((i54 | 0) == (HEAP32[i47 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i47 >> 2] | 0) + 40 >> 2] & 127](i47) | 0; else {
        HEAP32[i41 >> 2] = i54 + 4;
        __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i54 >> 2] | 0) | 0;
       }
       HEAP8[i7 >> 0] = 1;
       i54 = HEAP8[i15 >> 0] | 0;
       i45 = (i54 << 24 >> 24 < 0 ? HEAP32[i29 >> 2] | 0 : i54 & 255) >>> 0 > 1 ? i25 : i37;
       break L46;
      }
      if ((i53 | 0) != (HEAP32[((HEAP8[i4 >> 0] | 0) < 0 ? HEAP32[i24 >> 2] | 0 : i24) >> 2] | 0)) {
       HEAP8[i7 >> 0] = 1;
       i45 = i37;
       break L46;
      }
      i54 = HEAP32[i1 >> 2] | 0;
      i41 = i54 + 12 | 0;
      i47 = HEAP32[i41 >> 2] | 0;
      if ((i47 | 0) == (HEAP32[i54 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i54 >> 2] | 0) + 40 >> 2] & 127](i54) | 0; else {
       HEAP32[i41 >> 2] = i47 + 4;
       __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i47 >> 2] | 0) | 0;
      }
      i47 = HEAP8[i4 >> 0] | 0;
      i45 = (i47 << 24 >> 24 < 0 ? HEAP32[i3 >> 2] | 0 : i47 & 255) >>> 0 > 1 ? i24 : i37;
      break L46;
     }
     if (i52) i55 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i39 >> 2] | 0) + 36 >> 2] & 127](i39) | 0; else i55 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i51 >> 2] | 0) | 0;
     i51 = HEAP32[i1 >> 2] | 0;
     i39 = i51 + 12 | 0;
     i52 = HEAP32[i39 >> 2] | 0;
     i47 = (i52 | 0) == (HEAP32[i51 + 16 >> 2] | 0);
     if ((i55 | 0) == (HEAP32[((HEAP8[i4 >> 0] | 0) < 0 ? HEAP32[i24 >> 2] | 0 : i24) >> 2] | 0)) {
      if (i47) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i51 >> 2] | 0) + 40 >> 2] & 127](i51) | 0; else {
       HEAP32[i39 >> 2] = i52 + 4;
       __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i52 >> 2] | 0) | 0;
      }
      i39 = HEAP8[i4 >> 0] | 0;
      i45 = (i39 << 24 >> 24 < 0 ? HEAP32[i3 >> 2] | 0 : i39 & 255) >>> 0 > 1 ? i24 : i37;
      break L46;
     }
     if (i47) i56 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i51 >> 2] | 0) + 36 >> 2] & 127](i51) | 0; else i56 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i52 >> 2] | 0) | 0;
     if ((i56 | 0) != (HEAP32[((HEAP8[i15 >> 0] | 0) < 0 ? HEAP32[i25 >> 2] | 0 : i25) >> 2] | 0)) {
      i12 = 101;
      break L21;
     }
     i52 = HEAP32[i1 >> 2] | 0;
     i51 = i52 + 12 | 0;
     i47 = HEAP32[i51 >> 2] | 0;
     if ((i47 | 0) == (HEAP32[i52 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i52 >> 2] | 0) + 40 >> 2] & 127](i52) | 0; else {
      HEAP32[i51 >> 2] = i47 + 4;
      __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i47 >> 2] | 0) | 0;
     }
     HEAP8[i7 >> 0] = 1;
     i47 = HEAP8[i15 >> 0] | 0;
     i45 = (i47 << 24 >> 24 < 0 ? HEAP32[i29 >> 2] | 0 : i47 & 255) >>> 0 > 1 ? i25 : i37;
    }
    break;
   }
  case 2:
   {
    if (!(i38 >>> 0 < 2 | (i37 | 0) != 0)) if (!(i30 | (i38 | 0) == 2 & (HEAP8[i34 >> 0] | 0) != 0)) {
     i45 = 0;
     break L46;
    }
    i47 = HEAP8[i5 >> 0] | 0;
    i51 = HEAP32[i23 >> 2] | 0;
    i52 = i47 << 24 >> 24 < 0 ? i51 : i23;
    L107 : do if (!i38) {
     i57 = i44;
     i58 = i52;
     i59 = i47;
     i60 = i51;
     i61 = i44;
    } else if ((HEAPU8[i19 + (i38 + -1) >> 0] | 0) < 2) {
     i39 = i52;
     i41 = i47;
     i54 = i51;
     while (1) {
      i62 = i41 << 24 >> 24 < 0;
      i63 = i39;
      if (((i62 ? i54 : i23) + ((i62 ? HEAP32[i31 >> 2] | 0 : i41 & 255) << 2) | 0) == (i63 | 0)) {
       i64 = i41;
       i65 = i54;
       break;
      }
      if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i8 >> 2] | 0) + 12 >> 2] & 31](i8, 8192, HEAP32[i63 >> 2] | 0) | 0)) {
       i12 = 108;
       break;
      }
      i39 = i63 + 4 | 0;
      i41 = HEAP8[i5 >> 0] | 0;
      i54 = HEAP32[i23 >> 2] | 0;
     }
     if ((i12 | 0) == 108) {
      i12 = 0;
      i64 = HEAP8[i5 >> 0] | 0;
      i65 = HEAP32[i23 >> 2] | 0;
     }
     i54 = i64 << 24 >> 24 < 0 ? i65 : i23;
     i41 = i54;
     i63 = i39 - i41 >> 2;
     i62 = HEAP8[i32 >> 0] | 0;
     i66 = i62 << 24 >> 24 < 0;
     i67 = HEAP32[i33 >> 2] | 0;
     i68 = i62 & 255;
     if (i63 >>> 0 > (i66 ? i67 : i68) >>> 0) {
      i57 = i44;
      i58 = i41;
      i59 = i64;
      i60 = i65;
      i61 = i44;
     } else {
      i62 = HEAP32[i26 >> 2] | 0;
      i69 = (i66 ? i62 : i26) + ((i66 ? i67 : i68) << 2) | 0;
      i70 = i54;
      i54 = (i66 ? i62 + (i67 << 2) | 0 : i26 + (i68 << 2) | 0) + (0 - i63 << 2) | 0;
      while (1) {
       if ((i54 | 0) == (i69 | 0)) {
        i57 = i44;
        i58 = i39;
        i59 = i64;
        i60 = i65;
        i61 = i44;
        break L107;
       }
       if ((HEAP32[i54 >> 2] | 0) != (HEAP32[i70 >> 2] | 0)) {
        i57 = i44;
        i58 = i41;
        i59 = i64;
        i60 = i65;
        i61 = i44;
        break L107;
       }
       i70 = i70 + 4 | 0;
       i54 = i54 + 4 | 0;
      }
     }
    } else {
     i57 = i44;
     i58 = i52;
     i59 = i47;
     i60 = i51;
     i61 = i44;
    } while (0);
    L121 : while (1) {
     i51 = i59 << 24 >> 24 < 0;
     i47 = (i51 ? i60 : i23) + ((i51 ? HEAP32[i31 >> 2] | 0 : i59 & 255) << 2) | 0;
     i51 = i58;
     if ((i47 | 0) == (i51 | 0)) {
      i71 = i47;
      break;
     }
     i47 = HEAP32[i1 >> 2] | 0;
     do if (!i47) i72 = 1; else {
      i52 = HEAP32[i47 + 12 >> 2] | 0;
      if ((i52 | 0) == (HEAP32[i47 + 16 >> 2] | 0)) i73 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i47 >> 2] | 0) + 36 >> 2] & 127](i47) | 0; else i73 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i52 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i73, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[i1 >> 2] = 0;
       i72 = 1;
       break;
      } else {
       i72 = (HEAP32[i1 >> 2] | 0) == 0;
       break;
      }
     } while (0);
     do if (!i61) {
      i74 = i57;
      i12 = 129;
     } else {
      i47 = HEAP32[i61 + 12 >> 2] | 0;
      if ((i47 | 0) == (HEAP32[i61 + 16 >> 2] | 0)) i75 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i61 >> 2] | 0) + 36 >> 2] & 127](i61) | 0; else i75 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i47 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i75, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[i2 >> 2] = 0;
       i74 = 0;
       i12 = 129;
       break;
      } else if (i72 ^ (i57 | 0) == 0) {
       i76 = i57;
       i77 = i57;
       break;
      } else {
       i71 = i51;
       break L121;
      }
     } while (0);
     if ((i12 | 0) == 129) {
      i12 = 0;
      if (i72) {
       i71 = i51;
       break;
      } else {
       i76 = i74;
       i77 = 0;
      }
     }
     i47 = HEAP32[i1 >> 2] | 0;
     i52 = HEAP32[i47 + 12 >> 2] | 0;
     if ((i52 | 0) == (HEAP32[i47 + 16 >> 2] | 0)) i78 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i47 >> 2] | 0) + 36 >> 2] & 127](i47) | 0; else i78 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i52 >> 2] | 0) | 0;
     if ((i78 | 0) != (HEAP32[i51 >> 2] | 0)) {
      i71 = i51;
      break;
     }
     i52 = HEAP32[i1 >> 2] | 0;
     i47 = i52 + 12 | 0;
     i54 = HEAP32[i47 >> 2] | 0;
     if ((i54 | 0) == (HEAP32[i52 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i52 >> 2] | 0) + 40 >> 2] & 127](i52) | 0; else {
      HEAP32[i47 >> 2] = i54 + 4;
      __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i54 >> 2] | 0) | 0;
     }
     i57 = i76;
     i58 = i51 + 4 | 0;
     i59 = HEAP8[i5 >> 0] | 0;
     i60 = HEAP32[i23 >> 2] | 0;
     i61 = i77;
    }
    if (i30) {
     i54 = HEAP8[i5 >> 0] | 0;
     i47 = i54 << 24 >> 24 < 0;
     if (((i47 ? HEAP32[i23 >> 2] | 0 : i23) + ((i47 ? HEAP32[i31 >> 2] | 0 : i54 & 255) << 2) | 0) == (i71 | 0)) i45 = i37; else {
      i12 = 141;
      break L21;
     }
    } else i45 = i37;
    break;
   }
  case 4:
   {
    i54 = 0;
    i47 = i44;
    i52 = i44;
    L157 : while (1) {
     i70 = HEAP32[i1 >> 2] | 0;
     do if (!i70) i79 = 1; else {
      i41 = HEAP32[i70 + 12 >> 2] | 0;
      if ((i41 | 0) == (HEAP32[i70 + 16 >> 2] | 0)) i80 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i70 >> 2] | 0) + 36 >> 2] & 127](i70) | 0; else i80 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i41 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i80, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[i1 >> 2] = 0;
       i79 = 1;
       break;
      } else {
       i79 = (HEAP32[i1 >> 2] | 0) == 0;
       break;
      }
     } while (0);
     do if (!i52) {
      i81 = i47;
      i12 = 155;
     } else {
      i70 = HEAP32[i52 + 12 >> 2] | 0;
      if ((i70 | 0) == (HEAP32[i52 + 16 >> 2] | 0)) i82 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i52 >> 2] | 0) + 36 >> 2] & 127](i52) | 0; else i82 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i70 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i82, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[i2 >> 2] = 0;
       i81 = 0;
       i12 = 155;
       break;
      } else if (i79 ^ (i47 | 0) == 0) {
       i83 = i47;
       i84 = i47;
       break;
      } else {
       i85 = i47;
       break L157;
      }
     } while (0);
     if ((i12 | 0) == 155) {
      i12 = 0;
      if (i79) {
       i85 = i81;
       break;
      } else {
       i83 = i81;
       i84 = 0;
      }
     }
     i70 = HEAP32[i1 >> 2] | 0;
     i51 = HEAP32[i70 + 12 >> 2] | 0;
     if ((i51 | 0) == (HEAP32[i70 + 16 >> 2] | 0)) i86 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i70 >> 2] | 0) + 36 >> 2] & 127](i70) | 0; else i86 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i51 >> 2] | 0) | 0;
     if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i8 >> 2] | 0) + 12 >> 2] & 31](i8, 2048, i86) | 0) {
      i51 = HEAP32[i10 >> 2] | 0;
      if ((i51 | 0) == (HEAP32[i14 >> 2] | 0)) {
       __ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i9, i10, i14);
       i87 = HEAP32[i10 >> 2] | 0;
      } else i87 = i51;
      HEAP32[i10 >> 2] = i87 + 4;
      HEAP32[i87 >> 2] = i86;
      i88 = i54 + 1 | 0;
     } else {
      i51 = HEAP8[i35 >> 0] | 0;
      if (!((i86 | 0) == (HEAP32[i21 >> 2] | 0) & (i54 | 0 ? ((i51 << 24 >> 24 < 0 ? HEAP32[i36 >> 2] | 0 : i51 & 255) | 0) != 0 : 0))) {
       i85 = i83;
       break;
      }
      i51 = HEAP32[i17 >> 2] | 0;
      if ((i51 | 0) == (HEAP32[i18 >> 2] | 0)) {
       __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i16, i17, i18);
       i89 = HEAP32[i17 >> 2] | 0;
      } else i89 = i51;
      HEAP32[i17 >> 2] = i89 + 4;
      HEAP32[i89 >> 2] = i54;
      i88 = 0;
     }
     i51 = HEAP32[i1 >> 2] | 0;
     i70 = i51 + 12 | 0;
     i41 = HEAP32[i70 >> 2] | 0;
     if ((i41 | 0) == (HEAP32[i51 + 16 >> 2] | 0)) {
      FUNCTION_TABLE_ii[HEAP32[(HEAP32[i51 >> 2] | 0) + 40 >> 2] & 127](i51) | 0;
      i54 = i88;
      i47 = i83;
      i52 = i84;
      continue;
     } else {
      HEAP32[i70 >> 2] = i41 + 4;
      __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i41 >> 2] | 0) | 0;
      i54 = i88;
      i47 = i83;
      i52 = i84;
      continue;
     }
    }
    i52 = HEAP32[i17 >> 2] | 0;
    if (i54 | 0 ? (HEAP32[i16 >> 2] | 0) != (i52 | 0) : 0) {
     if ((i52 | 0) == (HEAP32[i18 >> 2] | 0)) {
      __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i16, i17, i18);
      i90 = HEAP32[i17 >> 2] | 0;
     } else i90 = i52;
     HEAP32[i17 >> 2] = i90 + 4;
     HEAP32[i90 >> 2] = i54;
    }
    L206 : do if ((HEAP32[i27 >> 2] | 0) > 0) {
     i52 = HEAP32[i1 >> 2] | 0;
     do if (!i52) i91 = 1; else {
      i47 = HEAP32[i52 + 12 >> 2] | 0;
      if ((i47 | 0) == (HEAP32[i52 + 16 >> 2] | 0)) i92 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i52 >> 2] | 0) + 36 >> 2] & 127](i52) | 0; else i92 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i47 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i92, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[i1 >> 2] = 0;
       i91 = 1;
       break;
      } else {
       i91 = (HEAP32[i1 >> 2] | 0) == 0;
       break;
      }
     } while (0);
     do if (!i85) i12 = 189; else {
      i52 = HEAP32[i85 + 12 >> 2] | 0;
      if ((i52 | 0) == (HEAP32[i85 + 16 >> 2] | 0)) i93 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i85 >> 2] | 0) + 36 >> 2] & 127](i85) | 0; else i93 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i52 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i93, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[i2 >> 2] = 0;
       i12 = 189;
       break;
      } else if (i91) {
       i94 = i85;
       break;
      } else {
       i12 = 227;
       break L21;
      }
     } while (0);
     if ((i12 | 0) == 189) {
      i12 = 0;
      if (i91) {
       i12 = 227;
       break L21;
      } else i94 = 0;
     }
     i52 = HEAP32[i1 >> 2] | 0;
     i47 = HEAP32[i52 + 12 >> 2] | 0;
     if ((i47 | 0) == (HEAP32[i52 + 16 >> 2] | 0)) i95 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i52 >> 2] | 0) + 36 >> 2] & 127](i52) | 0; else i95 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i47 >> 2] | 0) | 0;
     if ((i95 | 0) != (HEAP32[i20 >> 2] | 0)) {
      i12 = 227;
      break L21;
     }
     i47 = HEAP32[i1 >> 2] | 0;
     i52 = i47 + 12 | 0;
     i41 = HEAP32[i52 >> 2] | 0;
     if ((i41 | 0) == (HEAP32[i47 + 16 >> 2] | 0)) {
      FUNCTION_TABLE_ii[HEAP32[(HEAP32[i47 >> 2] | 0) + 40 >> 2] & 127](i47) | 0;
      i96 = i94;
      i97 = i94;
     } else {
      HEAP32[i52 >> 2] = i41 + 4;
      __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i41 >> 2] | 0) | 0;
      i96 = i94;
      i97 = i94;
     }
     while (1) {
      if ((HEAP32[i27 >> 2] | 0) <= 0) break L206;
      i41 = HEAP32[i1 >> 2] | 0;
      do if (!i41) i98 = 1; else {
       i52 = HEAP32[i41 + 12 >> 2] | 0;
       if ((i52 | 0) == (HEAP32[i41 + 16 >> 2] | 0)) i99 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i41 >> 2] | 0) + 36 >> 2] & 127](i41) | 0; else i99 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i52 >> 2] | 0) | 0;
       if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i99, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
        HEAP32[i1 >> 2] = 0;
        i98 = 1;
        break;
       } else {
        i98 = (HEAP32[i1 >> 2] | 0) == 0;
        break;
       }
      } while (0);
      do if (!i97) {
       i100 = i96;
       i12 = 212;
      } else {
       i41 = HEAP32[i97 + 12 >> 2] | 0;
       if ((i41 | 0) == (HEAP32[i97 + 16 >> 2] | 0)) i101 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i97 >> 2] | 0) + 36 >> 2] & 127](i97) | 0; else i101 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i41 >> 2] | 0) | 0;
       if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i101, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
        HEAP32[i2 >> 2] = 0;
        i100 = 0;
        i12 = 212;
        break;
       } else if (i98 ^ (i96 | 0) == 0) {
        i102 = i96;
        i103 = i96;
        break;
       } else {
        i12 = 227;
        break L21;
       }
      } while (0);
      if ((i12 | 0) == 212) {
       i12 = 0;
       if (i98) {
        i12 = 227;
        break L21;
       } else {
        i102 = i100;
        i103 = 0;
       }
      }
      i41 = HEAP32[i1 >> 2] | 0;
      i52 = HEAP32[i41 + 12 >> 2] | 0;
      if ((i52 | 0) == (HEAP32[i41 + 16 >> 2] | 0)) i104 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i41 >> 2] | 0) + 36 >> 2] & 127](i41) | 0; else i104 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i52 >> 2] | 0) | 0;
      if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i8 >> 2] | 0) + 12 >> 2] & 31](i8, 2048, i104) | 0)) {
       i12 = 227;
       break L21;
      }
      if ((HEAP32[i10 >> 2] | 0) == (HEAP32[i14 >> 2] | 0)) __ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i9, i10, i14);
      i52 = HEAP32[i1 >> 2] | 0;
      i41 = HEAP32[i52 + 12 >> 2] | 0;
      if ((i41 | 0) == (HEAP32[i52 + 16 >> 2] | 0)) i105 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i52 >> 2] | 0) + 36 >> 2] & 127](i52) | 0; else i105 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i41 >> 2] | 0) | 0;
      i41 = HEAP32[i10 >> 2] | 0;
      HEAP32[i10 >> 2] = i41 + 4;
      HEAP32[i41 >> 2] = i105;
      HEAP32[i27 >> 2] = (HEAP32[i27 >> 2] | 0) + -1;
      i41 = HEAP32[i1 >> 2] | 0;
      i52 = i41 + 12 | 0;
      i47 = HEAP32[i52 >> 2] | 0;
      if ((i47 | 0) == (HEAP32[i41 + 16 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[i41 >> 2] | 0) + 40 >> 2] & 127](i41) | 0;
       i96 = i102;
       i97 = i103;
       continue;
      } else {
       HEAP32[i52 >> 2] = i47 + 4;
       __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i47 >> 2] | 0) | 0;
       i96 = i102;
       i97 = i103;
       continue;
      }
     }
    } while (0);
    if ((HEAP32[i10 >> 2] | 0) == (HEAP32[i9 >> 2] | 0)) {
     i12 = 227;
     break L21;
    } else i45 = i37;
    break;
   }
  default:
   i45 = i37;
  } while (0);
  L279 : do if ((i12 | 0) == 45) while (1) {
   i12 = 0;
   i54 = HEAP32[i1 >> 2] | 0;
   do if (!i54) i106 = 1; else {
    i47 = HEAP32[i54 + 12 >> 2] | 0;
    if ((i47 | 0) == (HEAP32[i54 + 16 >> 2] | 0)) i107 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i54 >> 2] | 0) + 36 >> 2] & 127](i54) | 0; else i107 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i47 >> 2] | 0) | 0;
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i107, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[i1 >> 2] = 0;
     i106 = 1;
     break;
    } else {
     i106 = (HEAP32[i1 >> 2] | 0) == 0;
     break;
    }
   } while (0);
   do if (!i50) {
    i108 = i49;
    i12 = 58;
   } else {
    i54 = HEAP32[i50 + 12 >> 2] | 0;
    if ((i54 | 0) == (HEAP32[i50 + 16 >> 2] | 0)) i109 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i50 >> 2] | 0) + 36 >> 2] & 127](i50) | 0; else i109 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i54 >> 2] | 0) | 0;
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i109, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[i2 >> 2] = 0;
     i108 = 0;
     i12 = 58;
     break;
    } else if (i106 ^ (i49 | 0) == 0) {
     i110 = i49;
     i111 = i49;
     break;
    } else {
     i45 = i37;
     break L279;
    }
   } while (0);
   if ((i12 | 0) == 58) {
    i12 = 0;
    if (i106) {
     i45 = i37;
     break L279;
    } else {
     i110 = i108;
     i111 = 0;
    }
   }
   i54 = HEAP32[i1 >> 2] | 0;
   i47 = HEAP32[i54 + 12 >> 2] | 0;
   if ((i47 | 0) == (HEAP32[i54 + 16 >> 2] | 0)) i112 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i54 >> 2] | 0) + 36 >> 2] & 127](i54) | 0; else i112 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i47 >> 2] | 0) | 0;
   if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i8 >> 2] | 0) + 12 >> 2] & 31](i8, 8192, i112) | 0)) {
    i45 = i37;
    break L279;
   }
   i47 = HEAP32[i1 >> 2] | 0;
   i54 = i47 + 12 | 0;
   i52 = HEAP32[i54 >> 2] | 0;
   if ((i52 | 0) == (HEAP32[i47 + 16 >> 2] | 0)) i113 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i47 >> 2] | 0) + 40 >> 2] & 127](i47) | 0; else {
    HEAP32[i54 >> 2] = i52 + 4;
    i113 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i52 >> 2] | 0) | 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw(i26, i113);
   i49 = i110;
   i50 = i111;
   i12 = 45;
  } while (0);
  i37 = i45;
  i38 = i38 + 1 | 0;
 }
 L314 : do if ((i12 | 0) == 43) {
  HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 4;
  i114 = 0;
 } else if ((i12 | 0) == 101) {
  HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 4;
  i114 = 0;
 } else if ((i12 | 0) == 141) {
  HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 4;
  i114 = 0;
 } else if ((i12 | 0) == 227) {
  HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 4;
  i114 = 0;
 } else if ((i12 | 0) == 229) {
  L316 : do if (i37 | 0) {
   i38 = i37 + 8 + 3 | 0;
   i45 = i37 + 4 | 0;
   i111 = 1;
   L318 : while (1) {
    i50 = HEAP8[i38 >> 0] | 0;
    if (i50 << 24 >> 24 < 0) i115 = HEAP32[i45 >> 2] | 0; else i115 = i50 & 255;
    if (i111 >>> 0 >= i115 >>> 0) break L316;
    i50 = HEAP32[i1 >> 2] | 0;
    do if (!i50) i116 = 1; else {
     i110 = HEAP32[i50 + 12 >> 2] | 0;
     if ((i110 | 0) == (HEAP32[i50 + 16 >> 2] | 0)) i117 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i50 >> 2] | 0) + 36 >> 2] & 127](i50) | 0; else i117 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i110 >> 2] | 0) | 0;
     if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i117, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
      HEAP32[i1 >> 2] = 0;
      i116 = 1;
      break;
     } else {
      i116 = (HEAP32[i1 >> 2] | 0) == 0;
      break;
     }
    } while (0);
    i50 = HEAP32[i2 >> 2] | 0;
    do if (!i50) i12 = 248; else {
     i110 = HEAP32[i50 + 12 >> 2] | 0;
     if ((i110 | 0) == (HEAP32[i50 + 16 >> 2] | 0)) i118 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i50 >> 2] | 0) + 36 >> 2] & 127](i50) | 0; else i118 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i110 >> 2] | 0) | 0;
     if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i118, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
      HEAP32[i2 >> 2] = 0;
      i12 = 248;
      break;
     } else if (i116) break; else break L318;
    } while (0);
    if ((i12 | 0) == 248) {
     i12 = 0;
     if (i116) break;
    }
    i50 = HEAP32[i1 >> 2] | 0;
    i110 = HEAP32[i50 + 12 >> 2] | 0;
    if ((i110 | 0) == (HEAP32[i50 + 16 >> 2] | 0)) i119 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i50 >> 2] | 0) + 36 >> 2] & 127](i50) | 0; else i119 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i110 >> 2] | 0) | 0;
    if ((HEAP8[i38 >> 0] | 0) < 0) i120 = HEAP32[i37 >> 2] | 0; else i120 = i37;
    if ((i119 | 0) != (HEAP32[i120 + (i111 << 2) >> 2] | 0)) break;
    i110 = i111 + 1 | 0;
    i50 = HEAP32[i1 >> 2] | 0;
    i49 = i50 + 12 | 0;
    i113 = HEAP32[i49 >> 2] | 0;
    if ((i113 | 0) == (HEAP32[i50 + 16 >> 2] | 0)) {
     FUNCTION_TABLE_ii[HEAP32[(HEAP32[i50 >> 2] | 0) + 40 >> 2] & 127](i50) | 0;
     i111 = i110;
     continue;
    } else {
     HEAP32[i49 >> 2] = i113 + 4;
     __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i113 >> 2] | 0) | 0;
     i111 = i110;
     continue;
    }
   }
   HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 4;
   i114 = 0;
   break L314;
  } while (0);
  i111 = HEAP32[i16 >> 2] | 0;
  i38 = HEAP32[i17 >> 2] | 0;
  if ((i111 | 0) == (i38 | 0)) i114 = 1; else {
   HEAP32[i28 >> 2] = 0;
   __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i22, i111, i38, i28);
   if (!(HEAP32[i28 >> 2] | 0)) {
    i114 = 1;
    break;
   } else {
    HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 4;
    i114 = 0;
    break;
   }
  }
 } while (0);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i26);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i25);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i24);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i23);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i22);
 i22 = HEAP32[i16 >> 2] | 0;
 HEAP32[i16 >> 2] = 0;
 if (i22 | 0) FUNCTION_TABLE_vi[HEAP32[i11 >> 2] & 255](i22);
 STACKTOP = i13;
 return i114 | 0;
}

function __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_(i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 var i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, i90 = 0, i91 = 0, i92 = 0, i93 = 0, i94 = 0, i95 = 0, i96 = 0, i97 = 0, i98 = 0, i99 = 0, i100 = 0, i101 = 0, i102 = 0, i103 = 0, i104 = 0, i105 = 0, i106 = 0, i107 = 0, i108 = 0, i109 = 0, i110 = 0, i111 = 0, i112 = 0, i113 = 0, i114 = 0, i115 = 0, i116 = 0, i117 = 0, i118 = 0, i119 = 0;
 i12 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(512);
 i14 = i13 + 88 | 0;
 i15 = i13 + 96 | 0;
 i16 = i13 + 80 | 0;
 i17 = i13 + 72 | 0;
 i18 = i13 + 68 | 0;
 i19 = i13 + 500 | 0;
 i20 = i13 + 497 | 0;
 i21 = i13 + 496 | 0;
 i22 = i13 + 56 | 0;
 i23 = i13 + 44 | 0;
 i24 = i13 + 32 | 0;
 i25 = i13 + 20 | 0;
 i26 = i13 + 8 | 0;
 i27 = i13 + 4 | 0;
 i28 = i13;
 HEAP32[i14 >> 2] = i11;
 HEAP32[i16 >> 2] = i15;
 i11 = i16 + 4 | 0;
 HEAP32[i11 >> 2] = 130;
 HEAP32[i17 >> 2] = i15;
 HEAP32[i18 >> 2] = i15 + 400;
 HEAP32[i22 >> 2] = 0;
 HEAP32[i22 + 4 >> 2] = 0;
 HEAP32[i22 + 8 >> 2] = 0;
 i15 = 0;
 while (1) {
  if ((i15 | 0) == 3) break;
  HEAP32[i22 + (i15 << 2) >> 2] = 0;
  i15 = i15 + 1 | 0;
 }
 HEAP32[i23 >> 2] = 0;
 HEAP32[i23 + 4 >> 2] = 0;
 HEAP32[i23 + 8 >> 2] = 0;
 i15 = 0;
 while (1) {
  if ((i15 | 0) == 3) break;
  HEAP32[i23 + (i15 << 2) >> 2] = 0;
  i15 = i15 + 1 | 0;
 }
 HEAP32[i24 >> 2] = 0;
 HEAP32[i24 + 4 >> 2] = 0;
 HEAP32[i24 + 8 >> 2] = 0;
 i15 = 0;
 while (1) {
  if ((i15 | 0) == 3) break;
  HEAP32[i24 + (i15 << 2) >> 2] = 0;
  i15 = i15 + 1 | 0;
 }
 HEAP32[i25 >> 2] = 0;
 HEAP32[i25 + 4 >> 2] = 0;
 HEAP32[i25 + 8 >> 2] = 0;
 i15 = 0;
 while (1) {
  if ((i15 | 0) == 3) break;
  HEAP32[i25 + (i15 << 2) >> 2] = 0;
  i15 = i15 + 1 | 0;
 }
 HEAP32[i26 >> 2] = 0;
 HEAP32[i26 + 4 >> 2] = 0;
 HEAP32[i26 + 8 >> 2] = 0;
 i15 = 0;
 while (1) {
  if ((i15 | 0) == 3) break;
  HEAP32[i26 + (i15 << 2) >> 2] = 0;
  i15 = i15 + 1 | 0;
 }
 __ZNSt3__211__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri(i3, i4, i19, i20, i21, i22, i23, i24, i25, i27);
 HEAP32[i10 >> 2] = HEAP32[i9 >> 2];
 i4 = i8 + 8 | 0;
 i8 = i24 + 11 | 0;
 i3 = i24 + 4 | 0;
 i15 = i25 + 11 | 0;
 i29 = i25 + 4 | 0;
 i30 = (i5 & 512 | 0) != 0;
 i5 = i23 + 11 | 0;
 i31 = i23 + 4 | 0;
 i32 = i26 + 11 | 0;
 i33 = i26 + 4 | 0;
 i34 = i19 + 3 | 0;
 i35 = i22 + 11 | 0;
 i36 = i22 + 4 | 0;
 i37 = 0;
 i38 = 0;
 L21 : while (1) {
  if (i38 >>> 0 >= 4) {
   i12 = 234;
   break;
  }
  i39 = HEAP32[i1 >> 2] | 0;
  do if (!i39) i40 = 1; else {
   i41 = HEAP32[i39 + 12 >> 2] | 0;
   if ((i41 | 0) == (HEAP32[i39 + 16 >> 2] | 0)) i42 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i39 >> 2] | 0) + 36 >> 2] & 127](i39) | 0; else i42 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i41 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i42, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i1 >> 2] = 0;
    i40 = 1;
    break;
   } else {
    i40 = (HEAP32[i1 >> 2] | 0) == 0;
    break;
   }
  } while (0);
  i39 = HEAP32[i2 >> 2] | 0;
  do if (!i39) i12 = 31; else {
   i41 = HEAP32[i39 + 12 >> 2] | 0;
   if ((i41 | 0) == (HEAP32[i39 + 16 >> 2] | 0)) i43 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i39 >> 2] | 0) + 36 >> 2] & 127](i39) | 0; else i43 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i41 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i43, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i2 >> 2] = 0;
    i12 = 31;
    break;
   } else if (i40) {
    i44 = i39;
    break;
   } else {
    i12 = 234;
    break L21;
   }
  } while (0);
  if ((i12 | 0) == 31) {
   i12 = 0;
   if (i40) {
    i12 = 234;
    break;
   } else i44 = 0;
  }
  L46 : do switch (HEAP8[i19 + i38 >> 0] | 0) {
  case 1:
   {
    if ((i38 | 0) == 3) i45 = i37; else {
     i39 = HEAP32[i1 >> 2] | 0;
     i41 = HEAP32[i39 + 12 >> 2] | 0;
     if ((i41 | 0) == (HEAP32[i39 + 16 >> 2] | 0)) i46 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i39 >> 2] | 0) + 36 >> 2] & 127](i39) | 0; else i46 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i41 >> 0] | 0) | 0;
     if ((i46 & 255) << 24 >> 24 <= -1) {
      i12 = 44;
      break L21;
     }
     if (!(HEAP16[(HEAP32[i4 >> 2] | 0) + (i46 << 24 >> 24 << 1) >> 1] & 8192)) {
      i12 = 44;
      break L21;
     }
     i41 = HEAP32[i1 >> 2] | 0;
     i39 = i41 + 12 | 0;
     i47 = HEAP32[i39 >> 2] | 0;
     if ((i47 | 0) == (HEAP32[i41 + 16 >> 2] | 0)) i48 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i41 >> 2] | 0) + 40 >> 2] & 127](i41) | 0; else {
      HEAP32[i39 >> 2] = i47 + 1;
      i48 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i47 >> 0] | 0) | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(i26, i48 & 255);
     i49 = i44;
     i50 = i44;
     i12 = 46;
    }
    break;
   }
  case 0:
   {
    if ((i38 | 0) == 3) i45 = i37; else {
     i49 = i44;
     i50 = i44;
     i12 = 46;
    }
    break;
   }
  case 3:
   {
    i47 = HEAP8[i8 >> 0] | 0;
    i39 = i47 << 24 >> 24 < 0 ? HEAP32[i3 >> 2] | 0 : i47 & 255;
    i47 = HEAP8[i15 >> 0] | 0;
    i41 = i47 << 24 >> 24 < 0 ? HEAP32[i29 >> 2] | 0 : i47 & 255;
    if ((i39 | 0) == (0 - i41 | 0)) i45 = i37; else {
     i47 = (i39 | 0) == 0;
     i39 = HEAP32[i1 >> 2] | 0;
     i51 = HEAP32[i39 + 12 >> 2] | 0;
     i52 = (i51 | 0) == (HEAP32[i39 + 16 >> 2] | 0);
     if (i47 | (i41 | 0) == 0) {
      if (i52) i53 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i39 >> 2] | 0) + 36 >> 2] & 127](i39) | 0; else i53 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i51 >> 0] | 0) | 0;
      i41 = i53 & 255;
      if (i47) {
       if ((HEAP8[((HEAP8[i15 >> 0] | 0) < 0 ? HEAP32[i25 >> 2] | 0 : i25) >> 0] | 0) != i41 << 24 >> 24) {
        i45 = i37;
        break L46;
       }
       i47 = HEAP32[i1 >> 2] | 0;
       i54 = i47 + 12 | 0;
       i55 = HEAP32[i54 >> 2] | 0;
       if ((i55 | 0) == (HEAP32[i47 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i47 >> 2] | 0) + 40 >> 2] & 127](i47) | 0; else {
        HEAP32[i54 >> 2] = i55 + 1;
        __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i55 >> 0] | 0) | 0;
       }
       HEAP8[i7 >> 0] = 1;
       i55 = HEAP8[i15 >> 0] | 0;
       i45 = (i55 << 24 >> 24 < 0 ? HEAP32[i29 >> 2] | 0 : i55 & 255) >>> 0 > 1 ? i25 : i37;
       break L46;
      }
      if ((HEAP8[((HEAP8[i8 >> 0] | 0) < 0 ? HEAP32[i24 >> 2] | 0 : i24) >> 0] | 0) != i41 << 24 >> 24) {
       HEAP8[i7 >> 0] = 1;
       i45 = i37;
       break L46;
      }
      i41 = HEAP32[i1 >> 2] | 0;
      i55 = i41 + 12 | 0;
      i54 = HEAP32[i55 >> 2] | 0;
      if ((i54 | 0) == (HEAP32[i41 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i41 >> 2] | 0) + 40 >> 2] & 127](i41) | 0; else {
       HEAP32[i55 >> 2] = i54 + 1;
       __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i54 >> 0] | 0) | 0;
      }
      i54 = HEAP8[i8 >> 0] | 0;
      i45 = (i54 << 24 >> 24 < 0 ? HEAP32[i3 >> 2] | 0 : i54 & 255) >>> 0 > 1 ? i24 : i37;
      break L46;
     }
     if (i52) i56 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i39 >> 2] | 0) + 36 >> 2] & 127](i39) | 0; else i56 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i51 >> 0] | 0) | 0;
     i51 = HEAP32[i1 >> 2] | 0;
     i39 = i51 + 12 | 0;
     i52 = HEAP32[i39 >> 2] | 0;
     i54 = (i52 | 0) == (HEAP32[i51 + 16 >> 2] | 0);
     if ((HEAP8[((HEAP8[i8 >> 0] | 0) < 0 ? HEAP32[i24 >> 2] | 0 : i24) >> 0] | 0) == (i56 & 255) << 24 >> 24) {
      if (i54) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i51 >> 2] | 0) + 40 >> 2] & 127](i51) | 0; else {
       HEAP32[i39 >> 2] = i52 + 1;
       __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i52 >> 0] | 0) | 0;
      }
      i39 = HEAP8[i8 >> 0] | 0;
      i45 = (i39 << 24 >> 24 < 0 ? HEAP32[i3 >> 2] | 0 : i39 & 255) >>> 0 > 1 ? i24 : i37;
      break L46;
     }
     if (i54) i57 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i51 >> 2] | 0) + 36 >> 2] & 127](i51) | 0; else i57 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i52 >> 0] | 0) | 0;
     if ((HEAP8[((HEAP8[i15 >> 0] | 0) < 0 ? HEAP32[i25 >> 2] | 0 : i25) >> 0] | 0) != (i57 & 255) << 24 >> 24) {
      i12 = 103;
      break L21;
     }
     i52 = HEAP32[i1 >> 2] | 0;
     i51 = i52 + 12 | 0;
     i54 = HEAP32[i51 >> 2] | 0;
     if ((i54 | 0) == (HEAP32[i52 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i52 >> 2] | 0) + 40 >> 2] & 127](i52) | 0; else {
      HEAP32[i51 >> 2] = i54 + 1;
      __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i54 >> 0] | 0) | 0;
     }
     HEAP8[i7 >> 0] = 1;
     i54 = HEAP8[i15 >> 0] | 0;
     i45 = (i54 << 24 >> 24 < 0 ? HEAP32[i29 >> 2] | 0 : i54 & 255) >>> 0 > 1 ? i25 : i37;
    }
    break;
   }
  case 2:
   {
    if (!(i38 >>> 0 < 2 | (i37 | 0) != 0)) if (!(i30 | (i38 | 0) == 2 & (HEAP8[i34 >> 0] | 0) != 0)) {
     i45 = 0;
     break L46;
    }
    i54 = HEAP8[i5 >> 0] | 0;
    i51 = i54 << 24 >> 24 < 0;
    i52 = HEAP32[i23 >> 2] | 0;
    i39 = i51 ? i52 : i23;
    i55 = i39;
    L108 : do if (!i38) {
     i58 = i44;
     i59 = i55;
     i60 = i54;
     i61 = i52;
     i62 = i44;
    } else if ((HEAPU8[i19 + (i38 + -1) >> 0] | 0) < 2) {
     i41 = i39 + (i51 ? HEAP32[i31 >> 2] | 0 : i54 & 255) | 0;
     i47 = i55;
     while (1) {
      i63 = i47;
      if ((i41 | 0) == (i63 | 0)) break;
      i64 = HEAP8[i63 >> 0] | 0;
      if (i64 << 24 >> 24 <= -1) break;
      if (!(HEAP16[(HEAP32[i4 >> 2] | 0) + (i64 << 24 >> 24 << 1) >> 1] & 8192)) break;
      i47 = i63 + 1 | 0;
     }
     i41 = i47 - i55 | 0;
     i63 = HEAP8[i32 >> 0] | 0;
     i64 = i63 << 24 >> 24 < 0;
     i65 = HEAP32[i33 >> 2] | 0;
     i66 = i63 & 255;
     if (i41 >>> 0 > (i64 ? i65 : i66) >>> 0) {
      i58 = i44;
      i59 = i55;
      i60 = i54;
      i61 = i52;
      i62 = i44;
     } else {
      i63 = HEAP32[i26 >> 2] | 0;
      i67 = (i64 ? i63 : i26) + (i64 ? i65 : i66) | 0;
      i68 = i39;
      i69 = (i64 ? i63 + i65 | 0 : i26 + i66 | 0) + (0 - i41) | 0;
      while (1) {
       if ((i69 | 0) == (i67 | 0)) {
        i58 = i44;
        i59 = i47;
        i60 = i54;
        i61 = i52;
        i62 = i44;
        break L108;
       }
       if ((HEAP8[i69 >> 0] | 0) != (HEAP8[i68 >> 0] | 0)) {
        i58 = i44;
        i59 = i55;
        i60 = i54;
        i61 = i52;
        i62 = i44;
        break L108;
       }
       i68 = i68 + 1 | 0;
       i69 = i69 + 1 | 0;
      }
     }
    } else {
     i58 = i44;
     i59 = i55;
     i60 = i54;
     i61 = i52;
     i62 = i44;
    } while (0);
    L122 : while (1) {
     i52 = i60 << 24 >> 24 < 0;
     i54 = (i52 ? i61 : i23) + (i52 ? HEAP32[i31 >> 2] | 0 : i60 & 255) | 0;
     i52 = i59;
     if ((i54 | 0) == (i52 | 0)) {
      i70 = i54;
      break;
     }
     i54 = HEAP32[i1 >> 2] | 0;
     do if (!i54) i71 = 1; else {
      i55 = HEAP32[i54 + 12 >> 2] | 0;
      if ((i55 | 0) == (HEAP32[i54 + 16 >> 2] | 0)) i72 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i54 >> 2] | 0) + 36 >> 2] & 127](i54) | 0; else i72 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i55 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i72, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[i1 >> 2] = 0;
       i71 = 1;
       break;
      } else {
       i71 = (HEAP32[i1 >> 2] | 0) == 0;
       break;
      }
     } while (0);
     do if (!i62) {
      i73 = i58;
      i12 = 132;
     } else {
      i54 = HEAP32[i62 + 12 >> 2] | 0;
      if ((i54 | 0) == (HEAP32[i62 + 16 >> 2] | 0)) i74 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i62 >> 2] | 0) + 36 >> 2] & 127](i62) | 0; else i74 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i54 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i74, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[i2 >> 2] = 0;
       i73 = 0;
       i12 = 132;
       break;
      } else if (i71 ^ (i58 | 0) == 0) {
       i75 = i58;
       i76 = i58;
       break;
      } else {
       i70 = i52;
       break L122;
      }
     } while (0);
     if ((i12 | 0) == 132) {
      i12 = 0;
      if (i71) {
       i70 = i52;
       break;
      } else {
       i75 = i73;
       i76 = 0;
      }
     }
     i54 = HEAP32[i1 >> 2] | 0;
     i55 = HEAP32[i54 + 12 >> 2] | 0;
     if ((i55 | 0) == (HEAP32[i54 + 16 >> 2] | 0)) i77 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i54 >> 2] | 0) + 36 >> 2] & 127](i54) | 0; else i77 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i55 >> 0] | 0) | 0;
     if ((HEAP8[i52 >> 0] | 0) != (i77 & 255) << 24 >> 24) {
      i70 = i52;
      break;
     }
     i55 = HEAP32[i1 >> 2] | 0;
     i54 = i55 + 12 | 0;
     i39 = HEAP32[i54 >> 2] | 0;
     if ((i39 | 0) == (HEAP32[i55 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i55 >> 2] | 0) + 40 >> 2] & 127](i55) | 0; else {
      HEAP32[i54 >> 2] = i39 + 1;
      __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i39 >> 0] | 0) | 0;
     }
     i58 = i75;
     i59 = i52 + 1 | 0;
     i60 = HEAP8[i5 >> 0] | 0;
     i61 = HEAP32[i23 >> 2] | 0;
     i62 = i76;
    }
    if (i30) {
     i39 = HEAP8[i5 >> 0] | 0;
     i54 = i39 << 24 >> 24 < 0;
     if (((i54 ? HEAP32[i23 >> 2] | 0 : i23) + (i54 ? HEAP32[i31 >> 2] | 0 : i39 & 255) | 0) == (i70 | 0)) i45 = i37; else {
      i12 = 144;
      break L21;
     }
    } else i45 = i37;
    break;
   }
  case 4:
   {
    i39 = 0;
    i54 = i44;
    i55 = i44;
    L158 : while (1) {
     i51 = HEAP32[i1 >> 2] | 0;
     do if (!i51) i78 = 1; else {
      i69 = HEAP32[i51 + 12 >> 2] | 0;
      if ((i69 | 0) == (HEAP32[i51 + 16 >> 2] | 0)) i79 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i51 >> 2] | 0) + 36 >> 2] & 127](i51) | 0; else i79 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i69 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i79, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[i1 >> 2] = 0;
       i78 = 1;
       break;
      } else {
       i78 = (HEAP32[i1 >> 2] | 0) == 0;
       break;
      }
     } while (0);
     do if (!i55) {
      i80 = i54;
      i12 = 158;
     } else {
      i51 = HEAP32[i55 + 12 >> 2] | 0;
      if ((i51 | 0) == (HEAP32[i55 + 16 >> 2] | 0)) i81 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i55 >> 2] | 0) + 36 >> 2] & 127](i55) | 0; else i81 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i51 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i81, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[i2 >> 2] = 0;
       i80 = 0;
       i12 = 158;
       break;
      } else if (i78 ^ (i54 | 0) == 0) {
       i82 = i54;
       i83 = i54;
       break;
      } else {
       i84 = i54;
       break L158;
      }
     } while (0);
     if ((i12 | 0) == 158) {
      i12 = 0;
      if (i78) {
       i84 = i80;
       break;
      } else {
       i82 = i80;
       i83 = 0;
      }
     }
     i51 = HEAP32[i1 >> 2] | 0;
     i52 = HEAP32[i51 + 12 >> 2] | 0;
     if ((i52 | 0) == (HEAP32[i51 + 16 >> 2] | 0)) i85 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i51 >> 2] | 0) + 36 >> 2] & 127](i51) | 0; else i85 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i52 >> 0] | 0) | 0;
     i52 = i85 & 255;
     if (i52 << 24 >> 24 > -1) if (!(HEAP16[(HEAP32[i4 >> 2] | 0) + (i85 << 24 >> 24 << 1) >> 1] & 2048)) i12 = 168; else {
      i51 = HEAP32[i10 >> 2] | 0;
      if ((i51 | 0) == (HEAP32[i14 >> 2] | 0)) {
       __ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i9, i10, i14);
       i86 = HEAP32[i10 >> 2] | 0;
      } else i86 = i51;
      HEAP32[i10 >> 2] = i86 + 1;
      HEAP8[i86 >> 0] = i52;
      i87 = i39 + 1 | 0;
     } else i12 = 168;
     if ((i12 | 0) == 168) {
      i12 = 0;
      i51 = HEAP8[i35 >> 0] | 0;
      if (!((HEAP8[i21 >> 0] | 0) == i52 << 24 >> 24 & (i39 | 0 ? ((i51 << 24 >> 24 < 0 ? HEAP32[i36 >> 2] | 0 : i51 & 255) | 0) != 0 : 0))) {
       i84 = i82;
       break;
      }
      i51 = HEAP32[i17 >> 2] | 0;
      if ((i51 | 0) == (HEAP32[i18 >> 2] | 0)) {
       __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i16, i17, i18);
       i88 = HEAP32[i17 >> 2] | 0;
      } else i88 = i51;
      HEAP32[i17 >> 2] = i88 + 4;
      HEAP32[i88 >> 2] = i39;
      i87 = 0;
     }
     i51 = HEAP32[i1 >> 2] | 0;
     i52 = i51 + 12 | 0;
     i69 = HEAP32[i52 >> 2] | 0;
     if ((i69 | 0) == (HEAP32[i51 + 16 >> 2] | 0)) {
      FUNCTION_TABLE_ii[HEAP32[(HEAP32[i51 >> 2] | 0) + 40 >> 2] & 127](i51) | 0;
      i39 = i87;
      i54 = i82;
      i55 = i83;
      continue;
     } else {
      HEAP32[i52 >> 2] = i69 + 1;
      __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i69 >> 0] | 0) | 0;
      i39 = i87;
      i54 = i82;
      i55 = i83;
      continue;
     }
    }
    i55 = HEAP32[i17 >> 2] | 0;
    if (i39 | 0 ? (HEAP32[i16 >> 2] | 0) != (i55 | 0) : 0) {
     if ((i55 | 0) == (HEAP32[i18 >> 2] | 0)) {
      __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i16, i17, i18);
      i89 = HEAP32[i17 >> 2] | 0;
     } else i89 = i55;
     HEAP32[i17 >> 2] = i89 + 4;
     HEAP32[i89 >> 2] = i39;
    }
    L209 : do if ((HEAP32[i27 >> 2] | 0) > 0) {
     i55 = HEAP32[i1 >> 2] | 0;
     do if (!i55) i90 = 1; else {
      i54 = HEAP32[i55 + 12 >> 2] | 0;
      if ((i54 | 0) == (HEAP32[i55 + 16 >> 2] | 0)) i91 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i55 >> 2] | 0) + 36 >> 2] & 127](i55) | 0; else i91 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i54 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i91, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[i1 >> 2] = 0;
       i90 = 1;
       break;
      } else {
       i90 = (HEAP32[i1 >> 2] | 0) == 0;
       break;
      }
     } while (0);
     do if (!i84) i12 = 193; else {
      i55 = HEAP32[i84 + 12 >> 2] | 0;
      if ((i55 | 0) == (HEAP32[i84 + 16 >> 2] | 0)) i92 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i84 >> 2] | 0) + 36 >> 2] & 127](i84) | 0; else i92 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i55 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i92, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[i2 >> 2] = 0;
       i12 = 193;
       break;
      } else if (i90) {
       i93 = i84;
       break;
      } else {
       i12 = 232;
       break L21;
      }
     } while (0);
     if ((i12 | 0) == 193) {
      i12 = 0;
      if (i90) {
       i12 = 232;
       break L21;
      } else i93 = 0;
     }
     i55 = HEAP32[i1 >> 2] | 0;
     i54 = HEAP32[i55 + 12 >> 2] | 0;
     if ((i54 | 0) == (HEAP32[i55 + 16 >> 2] | 0)) i94 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i55 >> 2] | 0) + 36 >> 2] & 127](i55) | 0; else i94 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i54 >> 0] | 0) | 0;
     if ((HEAP8[i20 >> 0] | 0) != (i94 & 255) << 24 >> 24) {
      i12 = 232;
      break L21;
     }
     i54 = HEAP32[i1 >> 2] | 0;
     i55 = i54 + 12 | 0;
     i69 = HEAP32[i55 >> 2] | 0;
     if ((i69 | 0) == (HEAP32[i54 + 16 >> 2] | 0)) {
      FUNCTION_TABLE_ii[HEAP32[(HEAP32[i54 >> 2] | 0) + 40 >> 2] & 127](i54) | 0;
      i95 = i93;
      i96 = i93;
     } else {
      HEAP32[i55 >> 2] = i69 + 1;
      __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i69 >> 0] | 0) | 0;
      i95 = i93;
      i96 = i93;
     }
     while (1) {
      if ((HEAP32[i27 >> 2] | 0) <= 0) break L209;
      i69 = HEAP32[i1 >> 2] | 0;
      do if (!i69) i97 = 1; else {
       i55 = HEAP32[i69 + 12 >> 2] | 0;
       if ((i55 | 0) == (HEAP32[i69 + 16 >> 2] | 0)) i98 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i69 >> 2] | 0) + 36 >> 2] & 127](i69) | 0; else i98 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i55 >> 0] | 0) | 0;
       if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i98, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
        HEAP32[i1 >> 2] = 0;
        i97 = 1;
        break;
       } else {
        i97 = (HEAP32[i1 >> 2] | 0) == 0;
        break;
       }
      } while (0);
      do if (!i96) {
       i99 = i95;
       i12 = 216;
      } else {
       i69 = HEAP32[i96 + 12 >> 2] | 0;
       if ((i69 | 0) == (HEAP32[i96 + 16 >> 2] | 0)) i100 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i96 >> 2] | 0) + 36 >> 2] & 127](i96) | 0; else i100 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i69 >> 0] | 0) | 0;
       if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i100, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
        HEAP32[i2 >> 2] = 0;
        i99 = 0;
        i12 = 216;
        break;
       } else if (i97 ^ (i95 | 0) == 0) {
        i101 = i95;
        i102 = i95;
        break;
       } else {
        i12 = 232;
        break L21;
       }
      } while (0);
      if ((i12 | 0) == 216) {
       i12 = 0;
       if (i97) {
        i12 = 232;
        break L21;
       } else {
        i101 = i99;
        i102 = 0;
       }
      }
      i69 = HEAP32[i1 >> 2] | 0;
      i55 = HEAP32[i69 + 12 >> 2] | 0;
      if ((i55 | 0) == (HEAP32[i69 + 16 >> 2] | 0)) i103 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i69 >> 2] | 0) + 36 >> 2] & 127](i69) | 0; else i103 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i55 >> 0] | 0) | 0;
      if ((i103 & 255) << 24 >> 24 <= -1) {
       i12 = 232;
       break L21;
      }
      if (!(HEAP16[(HEAP32[i4 >> 2] | 0) + (i103 << 24 >> 24 << 1) >> 1] & 2048)) {
       i12 = 232;
       break L21;
      }
      if ((HEAP32[i10 >> 2] | 0) == (HEAP32[i14 >> 2] | 0)) __ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i9, i10, i14);
      i55 = HEAP32[i1 >> 2] | 0;
      i69 = HEAP32[i55 + 12 >> 2] | 0;
      if ((i69 | 0) == (HEAP32[i55 + 16 >> 2] | 0)) i104 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i55 >> 2] | 0) + 36 >> 2] & 127](i55) | 0; else i104 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i69 >> 0] | 0) | 0;
      i69 = HEAP32[i10 >> 2] | 0;
      HEAP32[i10 >> 2] = i69 + 1;
      HEAP8[i69 >> 0] = i104;
      HEAP32[i27 >> 2] = (HEAP32[i27 >> 2] | 0) + -1;
      i69 = HEAP32[i1 >> 2] | 0;
      i55 = i69 + 12 | 0;
      i54 = HEAP32[i55 >> 2] | 0;
      if ((i54 | 0) == (HEAP32[i69 + 16 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[i69 >> 2] | 0) + 40 >> 2] & 127](i69) | 0;
       i95 = i101;
       i96 = i102;
       continue;
      } else {
       HEAP32[i55 >> 2] = i54 + 1;
       __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i54 >> 0] | 0) | 0;
       i95 = i101;
       i96 = i102;
       continue;
      }
     }
    } while (0);
    if ((HEAP32[i10 >> 2] | 0) == (HEAP32[i9 >> 2] | 0)) {
     i12 = 232;
     break L21;
    } else i45 = i37;
    break;
   }
  default:
   i45 = i37;
  } while (0);
  L283 : do if ((i12 | 0) == 46) while (1) {
   i12 = 0;
   i39 = HEAP32[i1 >> 2] | 0;
   do if (!i39) i105 = 1; else {
    i54 = HEAP32[i39 + 12 >> 2] | 0;
    if ((i54 | 0) == (HEAP32[i39 + 16 >> 2] | 0)) i106 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i39 >> 2] | 0) + 36 >> 2] & 127](i39) | 0; else i106 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i54 >> 0] | 0) | 0;
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i106, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
     HEAP32[i1 >> 2] = 0;
     i105 = 1;
     break;
    } else {
     i105 = (HEAP32[i1 >> 2] | 0) == 0;
     break;
    }
   } while (0);
   do if (!i50) {
    i107 = i49;
    i12 = 59;
   } else {
    i39 = HEAP32[i50 + 12 >> 2] | 0;
    if ((i39 | 0) == (HEAP32[i50 + 16 >> 2] | 0)) i108 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i50 >> 2] | 0) + 36 >> 2] & 127](i50) | 0; else i108 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i39 >> 0] | 0) | 0;
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i108, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
     HEAP32[i2 >> 2] = 0;
     i107 = 0;
     i12 = 59;
     break;
    } else if (i105 ^ (i49 | 0) == 0) {
     i109 = i49;
     i110 = i49;
     break;
    } else {
     i45 = i37;
     break L283;
    }
   } while (0);
   if ((i12 | 0) == 59) {
    i12 = 0;
    if (i105) {
     i45 = i37;
     break L283;
    } else {
     i109 = i107;
     i110 = 0;
    }
   }
   i39 = HEAP32[i1 >> 2] | 0;
   i54 = HEAP32[i39 + 12 >> 2] | 0;
   if ((i54 | 0) == (HEAP32[i39 + 16 >> 2] | 0)) i111 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i39 >> 2] | 0) + 36 >> 2] & 127](i39) | 0; else i111 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i54 >> 0] | 0) | 0;
   if ((i111 & 255) << 24 >> 24 <= -1) {
    i45 = i37;
    break L283;
   }
   if (!(HEAP16[(HEAP32[i4 >> 2] | 0) + (i111 << 24 >> 24 << 1) >> 1] & 8192)) {
    i45 = i37;
    break L283;
   }
   i54 = HEAP32[i1 >> 2] | 0;
   i39 = i54 + 12 | 0;
   i55 = HEAP32[i39 >> 2] | 0;
   if ((i55 | 0) == (HEAP32[i54 + 16 >> 2] | 0)) i112 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i54 >> 2] | 0) + 40 >> 2] & 127](i54) | 0; else {
    HEAP32[i39 >> 2] = i55 + 1;
    i112 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i55 >> 0] | 0) | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(i26, i112 & 255);
   i49 = i109;
   i50 = i110;
   i12 = 46;
  } while (0);
  i37 = i45;
  i38 = i38 + 1 | 0;
 }
 L319 : do if ((i12 | 0) == 44) {
  HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 4;
  i113 = 0;
 } else if ((i12 | 0) == 103) {
  HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 4;
  i113 = 0;
 } else if ((i12 | 0) == 144) {
  HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 4;
  i113 = 0;
 } else if ((i12 | 0) == 232) {
  HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 4;
  i113 = 0;
 } else if ((i12 | 0) == 234) {
  L321 : do if (i37 | 0) {
   i38 = i37 + 11 | 0;
   i45 = i37 + 4 | 0;
   i110 = 1;
   L323 : while (1) {
    i50 = HEAP8[i38 >> 0] | 0;
    if (i50 << 24 >> 24 < 0) i114 = HEAP32[i45 >> 2] | 0; else i114 = i50 & 255;
    if (i110 >>> 0 >= i114 >>> 0) break L321;
    i50 = HEAP32[i1 >> 2] | 0;
    do if (!i50) i115 = 1; else {
     i109 = HEAP32[i50 + 12 >> 2] | 0;
     if ((i109 | 0) == (HEAP32[i50 + 16 >> 2] | 0)) i116 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i50 >> 2] | 0) + 36 >> 2] & 127](i50) | 0; else i116 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i109 >> 0] | 0) | 0;
     if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i116, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
      HEAP32[i1 >> 2] = 0;
      i115 = 1;
      break;
     } else {
      i115 = (HEAP32[i1 >> 2] | 0) == 0;
      break;
     }
    } while (0);
    i50 = HEAP32[i2 >> 2] | 0;
    do if (!i50) i12 = 253; else {
     i109 = HEAP32[i50 + 12 >> 2] | 0;
     if ((i109 | 0) == (HEAP32[i50 + 16 >> 2] | 0)) i117 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i50 >> 2] | 0) + 36 >> 2] & 127](i50) | 0; else i117 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i109 >> 0] | 0) | 0;
     if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i117, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
      HEAP32[i2 >> 2] = 0;
      i12 = 253;
      break;
     } else if (i115) break; else break L323;
    } while (0);
    if ((i12 | 0) == 253) {
     i12 = 0;
     if (i115) break;
    }
    i50 = HEAP32[i1 >> 2] | 0;
    i109 = HEAP32[i50 + 12 >> 2] | 0;
    if ((i109 | 0) == (HEAP32[i50 + 16 >> 2] | 0)) i118 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i50 >> 2] | 0) + 36 >> 2] & 127](i50) | 0; else i118 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i109 >> 0] | 0) | 0;
    if ((HEAP8[i38 >> 0] | 0) < 0) i119 = HEAP32[i37 >> 2] | 0; else i119 = i37;
    if ((HEAP8[i119 + i110 >> 0] | 0) != (i118 & 255) << 24 >> 24) break;
    i109 = i110 + 1 | 0;
    i50 = HEAP32[i1 >> 2] | 0;
    i49 = i50 + 12 | 0;
    i112 = HEAP32[i49 >> 2] | 0;
    if ((i112 | 0) == (HEAP32[i50 + 16 >> 2] | 0)) {
     FUNCTION_TABLE_ii[HEAP32[(HEAP32[i50 >> 2] | 0) + 40 >> 2] & 127](i50) | 0;
     i110 = i109;
     continue;
    } else {
     HEAP32[i49 >> 2] = i112 + 1;
     __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i112 >> 0] | 0) | 0;
     i110 = i109;
     continue;
    }
   }
   HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 4;
   i113 = 0;
   break L319;
  } while (0);
  i110 = HEAP32[i16 >> 2] | 0;
  i38 = HEAP32[i17 >> 2] | 0;
  if ((i110 | 0) == (i38 | 0)) i113 = 1; else {
   HEAP32[i28 >> 2] = 0;
   __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i22, i110, i38, i28);
   if (!(HEAP32[i28 >> 2] | 0)) {
    i113 = 1;
    break;
   } else {
    HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 4;
    i113 = 0;
    break;
   }
  }
 } while (0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i26);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i25);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i24);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i23);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i22);
 i22 = HEAP32[i16 >> 2] | 0;
 HEAP32[i16 >> 2] = 0;
 if (i22 | 0) FUNCTION_TABLE_vi[HEAP32[i11 >> 2] & 255](i22);
 STACKTOP = i13;
 return i113 | 0;
}

function __ZN4Mesh8load_objEPKc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, i90 = 0, i91 = 0, i92 = 0, i93 = 0, i94 = 0, i95 = 0, i96 = 0, i97 = 0, i98 = 0, i99 = 0, f100 = f0, f101 = f0, f102 = f0, i103 = 0, i104 = 0, i105 = 0, i106 = 0, i107 = 0, i108 = 0, i109 = 0, i110 = 0, i111 = 0, i112 = 0, i113 = 0, i114 = 0, i115 = 0, i116 = 0, i117 = 0, i118 = 0, i119 = 0, i120 = 0, i121 = 0, i122 = 0, i123 = 0, i124 = 0, i125 = 0, i126 = 0, i127 = 0, i128 = 0, i129 = 0, i130 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 560 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(560);
 i5 = i4 + 408 | 0;
 i6 = i4 + 160 | 0;
 i7 = i4 + 392 | 0;
 i8 = i4 + 200 | 0;
 i9 = i4 + 188 | 0;
 i10 = i4 + 16 | 0;
 i11 = i4;
 i12 = i4 + 176 | 0;
 i13 = i8 + 108 | 0;
 i14 = i8 + 8 | 0;
 HEAP32[i8 >> 2] = 1276;
 HEAP32[i13 >> 2] = 1296;
 HEAP32[i8 + 4 >> 2] = 0;
 __ZNSt3__28ios_base4initEPv(i8 + 108 | 0, i14);
 HEAP32[i8 + 180 >> 2] = 0;
 HEAP32[i8 + 184 >> 2] = -1;
 HEAP32[i8 >> 2] = 3732;
 HEAP32[i13 >> 2] = 3752;
 __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEEC2Ev(i14);
 i15 = i8 + 72 | 0;
 if (!(HEAP32[i15 >> 2] | 0)) {
  i16 = _fopen(i2, 29767) | 0;
  HEAP32[i15 >> 2] = i16;
  if (!i16) i3 = 4; else HEAP32[i8 + 96 >> 2] = 8;
 } else i3 = 4;
 if ((i3 | 0) == 4) {
  i3 = i8 + (HEAP32[(HEAP32[i8 >> 2] | 0) + -12 >> 2] | 0) | 0;
  __ZNSt3__28ios_base5clearEj(i3, HEAP32[i3 + 16 >> 2] | 4);
 }
 if (HEAP32[i8 + (HEAP32[(HEAP32[i8 >> 2] | 0) + -12 >> 2] | 0) + 16 >> 2] & 5 | 0) {
  i3 = __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(5844316, 29769, 12) | 0;
  i16 = __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(i3, i2, _strlen(i2) | 0) | 0;
  __ZNKSt3__28ios_base6getlocEv(i5, i16 + (HEAP32[(HEAP32[i16 >> 2] | 0) + -12 >> 2] | 0) | 0);
  i3 = __ZNKSt3__26locale9use_facetERNS0_2idE(i5, 5845188) | 0;
  i15 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] & 31](i3, 10) | 0;
  __ZNSt3__26localeD2Ev(i5);
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc(i16, i15) | 0;
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i16) | 0;
  i16 = __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(5844484, 29769, 12) | 0;
  i15 = __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(i16, i2, _strlen(i2) | 0) | 0;
  __ZNKSt3__28ios_base6getlocEv(i5, i15 + (HEAP32[(HEAP32[i15 >> 2] | 0) + -12 >> 2] | 0) | 0);
  i2 = __ZNKSt3__26locale9use_facetERNS0_2idE(i5, 5845188) | 0;
  i16 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i2 >> 2] | 0) + 28 >> 2] & 31](i2, 10) | 0;
  __ZNSt3__26localeD2Ev(i5);
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc(i15, i16) | 0;
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i15) | 0;
  _exit(1);
 }
 i15 = i1 + 72 | 0;
 i16 = i1 + 84 | 0;
 HEAP32[i9 >> 2] = 0;
 HEAP32[i9 + 4 >> 2] = 0;
 HEAP32[i9 + 8 >> 2] = 0;
 i2 = i5 + 11 | 0;
 i3 = i5 + 4 | 0;
 i17 = i5 + 60 | 0;
 i18 = i5 + 8 | 0;
 i19 = i5 + 4 | 0;
 i20 = i5 + 60 | 0;
 i21 = i5 + 132 | 0;
 i22 = i5 + 136 | 0;
 i23 = i5 + 40 | 0;
 i24 = i5 + 56 | 0;
 i25 = i6 + 11 | 0;
 i26 = i6 + 4 | 0;
 i27 = i6 + 8 | 0;
 i28 = i6 + 12 | 0;
 i29 = i7 + 4 | 0;
 i30 = i7 + 8 | 0;
 i31 = i7 + 12 | 0;
 i32 = i1 + 64 | 0;
 i33 = i1 + 68 | 0;
 i34 = i23 + 11 | 0;
 i35 = i1 + 60 | 0;
 i36 = i5 + 11 | 0;
 i37 = i5 + 4 | 0;
 i38 = i5 + 60 | 0;
 i39 = i5 + 8 | 0;
 i40 = i5 + 4 | 0;
 i41 = i5 + 60 | 0;
 i42 = i5 + 132 | 0;
 i43 = i5 + 136 | 0;
 i44 = i5 + 40 | 0;
 i45 = i5 + 56 | 0;
 i46 = i6 + 11 | 0;
 i47 = i6 + 8 | 0;
 i48 = i6 + 4 | 0;
 i49 = i1 + 76 | 0;
 i50 = i1 + 80 | 0;
 i51 = i44 + 11 | 0;
 i52 = i5 + 11 | 0;
 i53 = i5 + 4 | 0;
 i54 = i5 + 60 | 0;
 i55 = i5 + 8 | 0;
 i56 = i5 + 4 | 0;
 i57 = i5 + 60 | 0;
 i58 = i5 + 132 | 0;
 i59 = i5 + 136 | 0;
 i60 = i5 + 40 | 0;
 i61 = i5 + 56 | 0;
 i62 = i6 + 11 | 0;
 i63 = i6 + 4 | 0;
 i64 = i1 + 88 | 0;
 i65 = i1 + 92 | 0;
 i66 = i60 + 11 | 0;
 i67 = i5 + 11 | 0;
 i68 = i5 + 4 | 0;
 i69 = i10 + 60 | 0;
 i70 = i10 + 8 | 0;
 i71 = i10 + 4 | 0;
 i72 = i10 + 60 | 0;
 i73 = i10 + 132 | 0;
 i74 = i10 + 136 | 0;
 i75 = i10 + 40 | 0;
 i76 = i10 + 56 | 0;
 i77 = i5 + 11 | 0;
 i78 = i1 + 108 | 0;
 i79 = i1 + 96 | 0;
 i80 = i11 + 11 | 0;
 i81 = i75 + 11 | 0;
 i82 = i5 + 11 | 0;
 i83 = i5 + 4 | 0;
 i84 = i5 + 11 | 0;
 i85 = i5 + 4 | 0;
 i86 = i5 + 60 | 0;
 i87 = i5 + 8 | 0;
 i88 = i5 + 4 | 0;
 i89 = i5 + 60 | 0;
 i90 = i5 + 132 | 0;
 i91 = i5 + 136 | 0;
 i92 = i5 + 40 | 0;
 i93 = i5 + 56 | 0;
 i94 = i6 + 11 | 0;
 i95 = i92 + 11 | 0;
 while (1) {
  __ZNKSt3__28ios_base6getlocEv(i5, i8 + (HEAP32[(HEAP32[i8 >> 2] | 0) + -12 >> 2] | 0) | 0);
  i96 = __ZNKSt3__26locale9use_facetERNS0_2idE(i5, 5845188) | 0;
  i97 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i96 >> 2] | 0) + 28 >> 2] & 31](i96, 10) | 0;
  __ZNSt3__26localeD2Ev(i5);
  i96 = __ZNSt3__27getlineIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_istreamIT_T0_EES9_RNS_12basic_stringIS6_S7_T1_EES6_(i8, i9, i97) | 0;
  if (HEAP32[i96 + (HEAP32[(HEAP32[i96 >> 2] | 0) + -12 >> 2] | 0) + 16 >> 2] & 5 | 0) break;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_(i5, i9, 0, 2, i9);
  i96 = HEAP8[i2 >> 0] | 0;
  if (((i96 << 24 >> 24 < 0 ? HEAP32[i3 >> 2] | 0 : i96 & 255) | 0) == 2) {
   i97 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKcj(i5, 0, -1, 29782, 2) | 0) == 0;
   i98 = i97;
   i99 = HEAP8[i2 >> 0] | 0;
  } else {
   i98 = 0;
   i99 = i96;
  }
  if (i99 << 24 >> 24 < 0) __ZdlPv(HEAP32[i5 >> 2] | 0);
  if (i98) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_(i6, i9, 2, -1, i9);
   HEAP32[i5 >> 2] = 1316;
   HEAP32[i17 >> 2] = 1336;
   HEAP32[i19 >> 2] = 0;
   __ZNSt3__28ios_base4initEPv(i20, i18);
   HEAP32[i21 >> 2] = 0;
   HEAP32[i22 >> 2] = -1;
   HEAP32[i5 >> 2] = 3788;
   HEAP32[i17 >> 2] = 3808;
   __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev(i18);
   HEAP32[i18 >> 2] = 3492;
   HEAP32[i23 >> 2] = 0;
   HEAP32[i23 + 4 >> 2] = 0;
   HEAP32[i23 + 8 >> 2] = 0;
   HEAP32[i23 + 12 >> 2] = 0;
   HEAP32[i24 >> 2] = 8;
   __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE(i18, i6);
   if ((HEAP8[i25 >> 0] | 0) < 0) __ZdlPv(HEAP32[i6 >> 2] | 0);
   __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERf(i5, i26) | 0;
   __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERf(i5, i27) | 0;
   __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERf(i5, i6) | 0;
   f100 = Math_fround(HEAPF32[i6 >> 2]);
   f101 = Math_fround(-f100);
   HEAPF32[i6 >> 2] = f101;
   HEAPF32[i28 >> 2] = Math_fround(1.0);
   f101 = Math_fround(HEAPF32[i26 >> 2]);
   f102 = Math_fround(f100 * Math_fround(-.0199999996));
   f100 = Math_fround(f101 * Math_fround(.0199999996));
   f101 = Math_fround(Math_fround(HEAPF32[i27 >> 2]) * Math_fround(.0199999996));
   HEAPF32[i7 >> 2] = f102;
   HEAPF32[i29 >> 2] = f100;
   HEAPF32[i30 >> 2] = f101;
   HEAPF32[i31 >> 2] = Math_fround(.0199999996);
   i96 = HEAP32[i32 >> 2] | 0;
   if (i96 >>> 0 < (HEAP32[i33 >> 2] | 0) >>> 0) {
    HEAP32[i96 >> 2] = HEAP32[i7 >> 2];
    HEAP32[i96 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
    HEAP32[i96 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
    HEAP32[i96 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
    HEAP32[i32 >> 2] = (HEAP32[i32 >> 2] | 0) + 16;
   } else __ZNSt3__26vectorIN3glm3vecILi4EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(i35, i7);
   HEAP32[i5 >> 2] = 3788;
   HEAP32[i17 >> 2] = 3808;
   HEAP32[i18 >> 2] = 3492;
   if ((HEAP8[i34 >> 0] | 0) < 0) __ZdlPv(HEAP32[i23 >> 2] | 0);
   __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev(i18);
   __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev(i5, 3820);
   __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev(i17);
   continue;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_(i5, i9, 0, 2, i9);
  i96 = HEAP8[i36 >> 0] | 0;
  if (((i96 << 24 >> 24 < 0 ? HEAP32[i37 >> 2] | 0 : i96 & 255) | 0) == 2) {
   i97 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKcj(i5, 0, -1, 29785, 2) | 0) == 0;
   i103 = i97;
   i104 = HEAP8[i36 >> 0] | 0;
  } else {
   i103 = 0;
   i104 = i96;
  }
  if (i104 << 24 >> 24 < 0) __ZdlPv(HEAP32[i5 >> 2] | 0);
  if (i103) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_(i6, i9, 2, -1, i9);
   HEAP32[i5 >> 2] = 1316;
   HEAP32[i38 >> 2] = 1336;
   HEAP32[i40 >> 2] = 0;
   __ZNSt3__28ios_base4initEPv(i41, i39);
   HEAP32[i42 >> 2] = 0;
   HEAP32[i43 >> 2] = -1;
   HEAP32[i5 >> 2] = 3788;
   HEAP32[i38 >> 2] = 3808;
   __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev(i39);
   HEAP32[i39 >> 2] = 3492;
   HEAP32[i44 >> 2] = 0;
   HEAP32[i44 + 4 >> 2] = 0;
   HEAP32[i44 + 8 >> 2] = 0;
   HEAP32[i44 + 12 >> 2] = 0;
   HEAP32[i45 >> 2] = 8;
   __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE(i39, i6);
   if ((HEAP8[i46 >> 0] | 0) < 0) __ZdlPv(HEAP32[i6 >> 2] | 0);
   __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERf(i5, i6) | 0;
   __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERf(i5, i47) | 0;
   __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERf(i5, i48) | 0;
   i96 = HEAP32[i49 >> 2] | 0;
   if ((i96 | 0) == (HEAP32[i50 >> 2] | 0)) __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIRKS4_EEvOT_(i15, i6); else {
    HEAP32[i96 >> 2] = HEAP32[i6 >> 2];
    HEAP32[i96 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
    HEAP32[i96 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
    HEAP32[i49 >> 2] = (HEAP32[i49 >> 2] | 0) + 12;
   }
   HEAP32[i5 >> 2] = 3788;
   HEAP32[i38 >> 2] = 3808;
   HEAP32[i39 >> 2] = 3492;
   if ((HEAP8[i51 >> 0] | 0) < 0) __ZdlPv(HEAP32[i44 >> 2] | 0);
   __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev(i39);
   __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev(i5, 3820);
   __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev(i38);
   continue;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_(i5, i9, 0, 2, i9);
  i96 = HEAP8[i52 >> 0] | 0;
  if (((i96 << 24 >> 24 < 0 ? HEAP32[i53 >> 2] | 0 : i96 & 255) | 0) == 2) {
   i97 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKcj(i5, 0, -1, 29788, 2) | 0) == 0;
   i105 = i97;
   i106 = HEAP8[i52 >> 0] | 0;
  } else {
   i105 = 0;
   i106 = i96;
  }
  if (i106 << 24 >> 24 < 0) __ZdlPv(HEAP32[i5 >> 2] | 0);
  if (i105) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_(i6, i9, 2, -1, i9);
   HEAP32[i5 >> 2] = 1316;
   HEAP32[i54 >> 2] = 1336;
   HEAP32[i56 >> 2] = 0;
   __ZNSt3__28ios_base4initEPv(i57, i55);
   HEAP32[i58 >> 2] = 0;
   HEAP32[i59 >> 2] = -1;
   HEAP32[i5 >> 2] = 3788;
   HEAP32[i54 >> 2] = 3808;
   __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev(i55);
   HEAP32[i55 >> 2] = 3492;
   HEAP32[i60 >> 2] = 0;
   HEAP32[i60 + 4 >> 2] = 0;
   HEAP32[i60 + 8 >> 2] = 0;
   HEAP32[i60 + 12 >> 2] = 0;
   HEAP32[i61 >> 2] = 8;
   __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE(i55, i6);
   if ((HEAP8[i62 >> 0] | 0) < 0) __ZdlPv(HEAP32[i6 >> 2] | 0);
   __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERf(i5, i6) | 0;
   __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERf(i5, i63) | 0;
   f101 = Math_fround(Math_fround(1.0) - Math_fround(HEAPF32[i63 >> 2]));
   HEAPF32[i63 >> 2] = f101;
   i96 = HEAP32[i64 >> 2] | 0;
   if ((i96 | 0) == (HEAP32[i65 >> 2] | 0)) __ZNSt3__26vectorIN3glm3vecILi2EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIRKS4_EEvOT_(i16, i6); else {
    i97 = i6;
    i107 = HEAP32[i97 + 4 >> 2] | 0;
    i108 = i96;
    HEAP32[i108 >> 2] = HEAP32[i97 >> 2];
    HEAP32[i108 + 4 >> 2] = i107;
    HEAP32[i64 >> 2] = (HEAP32[i64 >> 2] | 0) + 8;
   }
   HEAP32[i5 >> 2] = 3788;
   HEAP32[i54 >> 2] = 3808;
   HEAP32[i55 >> 2] = 3492;
   if ((HEAP8[i66 >> 0] | 0) < 0) __ZdlPv(HEAP32[i60 >> 2] | 0);
   __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev(i55);
   __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev(i5, 3820);
   __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev(i54);
   continue;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_(i5, i9, 0, 2, i9);
  i107 = HEAP8[i67 >> 0] | 0;
  if (((i107 << 24 >> 24 < 0 ? HEAP32[i68 >> 2] | 0 : i107 & 255) | 0) == 2) {
   i108 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKcj(i5, 0, -1, 29791, 2) | 0) == 0;
   i109 = i108;
   i110 = HEAP8[i67 >> 0] | 0;
  } else {
   i109 = 0;
   i110 = i107;
  }
  if (i110 << 24 >> 24 < 0) __ZdlPv(HEAP32[i5 >> 2] | 0);
  if (i109) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_(i5, i9, 2, -1, i9);
   HEAP32[i10 >> 2] = 1316;
   HEAP32[i69 >> 2] = 1336;
   HEAP32[i71 >> 2] = 0;
   __ZNSt3__28ios_base4initEPv(i72, i70);
   HEAP32[i73 >> 2] = 0;
   HEAP32[i74 >> 2] = -1;
   HEAP32[i10 >> 2] = 3788;
   HEAP32[i69 >> 2] = 3808;
   __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev(i70);
   HEAP32[i70 >> 2] = 3492;
   HEAP32[i75 >> 2] = 0;
   HEAP32[i75 + 4 >> 2] = 0;
   HEAP32[i75 + 8 >> 2] = 0;
   HEAP32[i75 + 12 >> 2] = 0;
   HEAP32[i76 >> 2] = 8;
   __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE(i70, i5);
   if ((HEAP8[i77 >> 0] | 0) < 0) __ZdlPv(HEAP32[i5 >> 2] | 0);
   HEAP32[i11 >> 2] = 0;
   HEAP32[i11 + 4 >> 2] = 0;
   HEAP32[i11 + 8 >> 2] = 0;
   __ZNSt3__2rsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_istreamIT_T0_EES9_RNS_12basic_stringIS6_S7_T1_EE(i10, i11) | 0;
   i107 = __ZN4Mesh15addUniqueVertexERNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(i1, i11) | 0;
   HEAP32[i6 >> 2] = i78;
   __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorItNS5_ItEEEEEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE25__emplace_unique_key_argsIS7_JRKNS_21piecewise_construct_tENS_5tupleIJRKS7_EEENSM_IJEEEEEENS_4pairINS_15__tree_iteratorISB_PNS_11__tree_nodeISB_PvEEiEEbEERKT_DpOT0_(i5, i79, i78, 5847248, i6, i7);
   i108 = HEAP32[i5 >> 2] | 0;
   i97 = i107 & 65535;
   HEAP16[i5 >> 1] = i97;
   i107 = i108 + 32 | 0;
   i96 = HEAP32[i107 >> 2] | 0;
   if (i96 >>> 0 < (HEAP32[i108 + 36 >> 2] | 0) >>> 0) {
    HEAP16[i96 >> 1] = i97;
    HEAP32[i107 >> 2] = i96 + 2;
   } else __ZNSt3__26vectorItNS_9allocatorItEEE21__push_back_slow_pathItEEvOT_(i108 + 28 | 0, i5);
   __ZNSt3__2rsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_istreamIT_T0_EES9_RNS_12basic_stringIS6_S7_T1_EE(i10, i11) | 0;
   i108 = __ZN4Mesh15addUniqueVertexERNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(i1, i11) | 0;
   HEAP32[i6 >> 2] = i78;
   __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorItNS5_ItEEEEEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE25__emplace_unique_key_argsIS7_JRKNS_21piecewise_construct_tENS_5tupleIJRKS7_EEENSM_IJEEEEEENS_4pairINS_15__tree_iteratorISB_PNS_11__tree_nodeISB_PvEEiEEbEERKT_DpOT0_(i5, i79, i78, 5847248, i6, i7);
   i96 = HEAP32[i5 >> 2] | 0;
   i107 = i108 & 65535;
   HEAP16[i5 >> 1] = i107;
   i108 = i96 + 32 | 0;
   i97 = HEAP32[i108 >> 2] | 0;
   if (i97 >>> 0 < (HEAP32[i96 + 36 >> 2] | 0) >>> 0) {
    HEAP16[i97 >> 1] = i107;
    HEAP32[i108 >> 2] = i97 + 2;
   } else __ZNSt3__26vectorItNS_9allocatorItEEE21__push_back_slow_pathItEEvOT_(i96 + 28 | 0, i5);
   __ZNSt3__2rsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_istreamIT_T0_EES9_RNS_12basic_stringIS6_S7_T1_EE(i10, i11) | 0;
   i96 = __ZN4Mesh15addUniqueVertexERNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(i1, i11) | 0;
   HEAP32[i6 >> 2] = i78;
   __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorItNS5_ItEEEEEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE25__emplace_unique_key_argsIS7_JRKNS_21piecewise_construct_tENS_5tupleIJRKS7_EEENSM_IJEEEEEENS_4pairINS_15__tree_iteratorISB_PNS_11__tree_nodeISB_PvEEiEEbEERKT_DpOT0_(i5, i79, i78, 5847248, i6, i7);
   i97 = HEAP32[i5 >> 2] | 0;
   i108 = i96 & 65535;
   HEAP16[i5 >> 1] = i108;
   i96 = i97 + 32 | 0;
   i107 = HEAP32[i96 >> 2] | 0;
   if (i107 >>> 0 < (HEAP32[i97 + 36 >> 2] | 0) >>> 0) {
    HEAP16[i107 >> 1] = i108;
    HEAP32[i96 >> 2] = i107 + 2;
   } else __ZNSt3__26vectorItNS_9allocatorItEEE21__push_back_slow_pathItEEvOT_(i97 + 28 | 0, i5);
   if ((HEAP8[i80 >> 0] | 0) < 0) __ZdlPv(HEAP32[i11 >> 2] | 0);
   HEAP32[i10 >> 2] = 3788;
   HEAP32[i69 >> 2] = 3808;
   HEAP32[i70 >> 2] = 3492;
   if ((HEAP8[i81 >> 0] | 0) < 0) __ZdlPv(HEAP32[i75 >> 2] | 0);
   __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev(i70);
   __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev(i10, 3820);
   __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev(i69);
   continue;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_(i5, i9, 0, 2, i9);
  i97 = HEAP8[i82 >> 0] | 0;
  if (((i97 << 24 >> 24 < 0 ? HEAP32[i83 >> 2] | 0 : i97 & 255) | 0) == 2) {
   i107 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKcj(i5, 0, -1, 29794, 2) | 0) == 0;
   i111 = i107;
   i112 = HEAP8[i82 >> 0] | 0;
  } else {
   i111 = 0;
   i112 = i97;
  }
  if (i112 << 24 >> 24 < 0) __ZdlPv(HEAP32[i5 >> 2] | 0);
  if (i111) {
   i97 = HEAP32[i49 >> 2] | 0;
   i107 = HEAP32[i15 >> 2] | 0;
   i96 = i97;
   if (!((i97 | 0) == (i107 | 0) | (i107 | 0) == (i96 | 0))) HEAP32[i49 >> 2] = i96 + (~(((i96 + -12 - i107 | 0) >>> 0) / 12 | 0) * 12 | 0);
   i107 = HEAP32[i64 >> 2] | 0;
   i96 = HEAP32[i16 >> 2] | 0;
   i97 = i107;
   if ((i107 | 0) == (i96 | 0) | (i96 | 0) == (i97 | 0)) continue;
   HEAP32[i64 >> 2] = i97 + (~((i97 + -8 - i96 | 0) >>> 3) << 3);
   continue;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_(i5, i9, 0, 7, i9);
  i96 = HEAP8[i84 >> 0] | 0;
  if (((i96 << 24 >> 24 < 0 ? HEAP32[i85 >> 2] | 0 : i96 & 255) | 0) == 7) {
   i97 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKcj(i5, 0, -1, 29797, 7) | 0) == 0;
   i113 = i97;
   i114 = HEAP8[i84 >> 0] | 0;
  } else {
   i113 = 0;
   i114 = i96;
  }
  if (i114 << 24 >> 24 < 0) __ZdlPv(HEAP32[i5 >> 2] | 0);
  if (!i113) continue;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_(i6, i9, 7, -1, i9);
  HEAP32[i5 >> 2] = 1316;
  HEAP32[i86 >> 2] = 1336;
  HEAP32[i88 >> 2] = 0;
  __ZNSt3__28ios_base4initEPv(i89, i87);
  HEAP32[i90 >> 2] = 0;
  HEAP32[i91 >> 2] = -1;
  HEAP32[i5 >> 2] = 3788;
  HEAP32[i86 >> 2] = 3808;
  __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev(i87);
  HEAP32[i87 >> 2] = 3492;
  HEAP32[i92 >> 2] = 0;
  HEAP32[i92 + 4 >> 2] = 0;
  HEAP32[i92 + 8 >> 2] = 0;
  HEAP32[i92 + 12 >> 2] = 0;
  HEAP32[i93 >> 2] = 8;
  __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE(i87, i6);
  if ((HEAP8[i94 >> 0] | 0) < 0) __ZdlPv(HEAP32[i6 >> 2] | 0);
  __ZNSt3__2rsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_istreamIT_T0_EES9_RNS_12basic_stringIS6_S7_T1_EE(i5, i78) | 0;
  HEAP32[i5 >> 2] = 3788;
  HEAP32[i86 >> 2] = 3808;
  HEAP32[i87 >> 2] = 3492;
  if ((HEAP8[i95 >> 0] | 0) < 0) __ZdlPv(HEAP32[i92 >> 2] | 0);
  __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev(i87);
  __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev(i5, 3820);
  __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev(i86);
 }
 if ((HEAP32[i64 >> 2] | 0) == (HEAP32[i16 >> 2] | 0)) {
  i86 = (HEAP32[i32 >> 2] | 0) - (HEAP32[i35 >> 2] | 0) >> 4;
  HEAP32[i5 >> 2] = 0;
  HEAP32[i5 + 4 >> 2] = 0;
  if (i86 | 0) __ZNSt3__26vectorIN3glm3vecILi2EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE8__appendEjRKS4_(i16, i86, i5);
 }
 if ((HEAP32[i49 >> 2] | 0) == (HEAP32[i15 >> 2] | 0)) {
  i49 = (HEAP32[i32 >> 2] | 0) - (HEAP32[i35 >> 2] | 0) >> 4;
  HEAPF32[i5 >> 2] = Math_fround(0.0);
  HEAPF32[i5 + 4 >> 2] = Math_fround(0.0);
  HEAPF32[i5 + 8 >> 2] = Math_fround(1.0);
  if (i49 | 0) __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE8__appendEjRKS4_(i15, i49, i5);
 }
 i49 = i1 + 24 | 0;
 i35 = i1 + 12 | 0;
 i32 = i1 + 16 | 0;
 i86 = HEAP32[i32 >> 2] | 0;
 i87 = HEAP32[i35 >> 2] | 0;
 i92 = (i86 - i87 | 0) / 12 | 0;
 i95 = i1 + 28 | 0;
 i78 = HEAP32[i95 >> 2] | 0;
 i94 = HEAP32[i49 >> 2] | 0;
 i93 = i78 - i94 >> 4;
 i91 = i94;
 i94 = i78;
 i78 = i87;
 if (i92 >>> 0 > i93 >>> 0) {
  __ZNSt3__26vectorIN3glm3vecILi4EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE8__appendEj(i49, i92 - i93 | 0);
  i90 = HEAP32[i35 >> 2] | 0;
  i115 = i90;
  i116 = HEAP32[i32 >> 2] | 0;
  i117 = i90;
 } else if (i92 >>> 0 < i93 >>> 0) {
  i93 = i91 + (i92 << 4) | 0;
  if ((i93 | 0) == (i94 | 0)) {
   i115 = i87;
   i116 = i86;
   i117 = i78;
  } else {
   HEAP32[i95 >> 2] = i94 + (~((i94 + -16 - i93 | 0) >>> 4) << 4);
   i115 = i87;
   i116 = i86;
   i117 = i78;
  }
 } else {
  i115 = i87;
  i116 = i86;
  i117 = i78;
 }
 i78 = i1 + 36 | 0;
 i86 = (i116 - i115 | 0) / 12 | 0;
 i87 = i1 + 40 | 0;
 i93 = HEAP32[i87 >> 2] | 0;
 i94 = HEAP32[i78 >> 2] | 0;
 i95 = (i93 - i94 | 0) / 12 | 0;
 i92 = i94;
 i94 = i93;
 if (i86 >>> 0 > i95 >>> 0) {
  __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE8__appendEj(i78, i86 - i95 | 0);
  i93 = HEAP32[i35 >> 2] | 0;
  i118 = i93;
  i119 = HEAP32[i32 >> 2] | 0;
  i120 = i93;
 } else if (i86 >>> 0 < i95 >>> 0) {
  i95 = i92 + (i86 * 12 | 0) | 0;
  if ((i95 | 0) == (i94 | 0)) {
   i118 = i115;
   i119 = i116;
   i120 = i117;
  } else {
   HEAP32[i87 >> 2] = i94 + (~(((i94 + -12 - i95 | 0) >>> 0) / 12 | 0) * 12 | 0);
   i118 = i115;
   i119 = i116;
   i120 = i117;
  }
 } else {
  i118 = i115;
  i119 = i116;
  i120 = i117;
 }
 i117 = i1 + 48 | 0;
 i116 = (i119 - i118 | 0) / 12 | 0;
 i115 = i1 + 52 | 0;
 i95 = HEAP32[i115 >> 2] | 0;
 i94 = HEAP32[i117 >> 2] | 0;
 i87 = i95 - i94 >> 3;
 i86 = i94;
 i94 = i95;
 if (i116 >>> 0 > i87 >>> 0) {
  __ZNSt3__26vectorIN3glm3vecILi2EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE8__appendEj(i117, i116 - i87 | 0);
  i95 = HEAP32[i35 >> 2] | 0;
  i121 = HEAP32[i32 >> 2] | 0;
  i122 = i95;
  i123 = i95;
 } else if (i116 >>> 0 < i87 >>> 0) {
  i87 = i86 + (i116 << 3) | 0;
  if ((i87 | 0) == (i94 | 0)) {
   i121 = i119;
   i122 = i118;
   i123 = i120;
  } else {
   HEAP32[i115 >> 2] = i94 + (~((i94 + -8 - i87 | 0) >>> 3) << 3);
   i121 = i119;
   i122 = i118;
   i123 = i120;
  }
 } else {
  i121 = i119;
  i122 = i118;
  i123 = i120;
 }
 if ((i121 | 0) != (i122 | 0)) {
  i122 = i12 + 4 | 0;
  i121 = i12 + 8 | 0;
  i120 = i7 + 11 | 0;
  i118 = i1 + 60 | 0;
  i1 = 0;
  i119 = i123;
  do {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_(i7, i119 + (i1 * 12 | 0) | 0);
   HEAP32[i10 >> 2] = 0;
   HEAP32[i10 + 4 >> 2] = 0;
   HEAP32[i10 + 8 >> 2] = 0;
   HEAP32[i10 + 12 >> 2] = 0;
   HEAP32[i11 >> 2] = 0;
   HEAP32[i11 + 4 >> 2] = 0;
   HEAP32[i11 + 8 >> 2] = 0;
   HEAP32[i12 >> 2] = 0;
   HEAP32[i122 >> 2] = 0;
   HEAP32[i121 >> 2] = 0;
   HEAP32[i6 >> 2] = i12;
   HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
   __Z5splitINSt3__220back_insert_iteratorINS0_6vectorINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS6_IS8_EEEEEEEvRKS8_cT_(i7, 47, i5);
   i123 = HEAP32[i122 >> 2] | 0;
   i87 = HEAP32[i12 >> 2] | 0;
   i94 = i87;
   if ((i123 | 0) == (i87 | 0)) {
    i124 = i123;
    i125 = i123;
    i126 = i94;
   } else {
    i123 = (__ZNSt3__24stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji(i94, 0, 10) | 0) + 65535 & 65535;
    i94 = (HEAP32[i118 >> 2] | 0) + (i123 << 4) | 0;
    HEAP32[i10 >> 2] = HEAP32[i94 >> 2];
    HEAP32[i10 + 4 >> 2] = HEAP32[i94 + 4 >> 2];
    HEAP32[i10 + 8 >> 2] = HEAP32[i94 + 8 >> 2];
    HEAP32[i10 + 12 >> 2] = HEAP32[i94 + 12 >> 2];
    i94 = HEAP32[i12 >> 2] | 0;
    i124 = i94;
    i125 = HEAP32[i122 >> 2] | 0;
    i126 = i94;
   }
   if (((i125 - i124 | 0) / 12 | 0) >>> 0 > 1) {
    i94 = __ZNSt3__24stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji(i126 + 12 | 0, 0, 10) | 0;
    i123 = HEAP32[i16 >> 2] | 0;
    if ((HEAP32[i64 >> 2] | 0) == (i123 | 0)) {
     i127 = 0;
     i128 = 0;
    } else {
     i87 = i123 + ((i94 + 65535 & 65535) << 3) | 0;
     i127 = HEAP32[i87 >> 2] | 0;
     i128 = HEAP32[i87 + 4 >> 2] | 0;
    }
   } else {
    i127 = 0;
    i128 = 0;
   }
   i87 = HEAP32[i12 >> 2] | 0;
   if ((((HEAP32[i122 >> 2] | 0) - i87 | 0) / 12 | 0) >>> 0 > 2) {
    i94 = (__ZNSt3__24stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji(i87 + 24 | 0, 0, 10) | 0) + 65535 & 65535;
    i87 = (HEAP32[i15 >> 2] | 0) + (i94 * 12 | 0) | 0;
    HEAP32[i11 >> 2] = HEAP32[i87 >> 2];
    HEAP32[i11 + 4 >> 2] = HEAP32[i87 + 4 >> 2];
    HEAP32[i11 + 8 >> 2] = HEAP32[i87 + 8 >> 2];
   }
   i87 = (HEAP32[i49 >> 2] | 0) + (i1 << 4) | 0;
   HEAP32[i87 >> 2] = HEAP32[i10 >> 2];
   HEAP32[i87 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
   HEAP32[i87 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
   HEAP32[i87 + 12 >> 2] = HEAP32[i10 + 12 >> 2];
   i87 = (HEAP32[i78 >> 2] | 0) + (i1 * 12 | 0) | 0;
   HEAP32[i87 >> 2] = HEAP32[i11 >> 2];
   HEAP32[i87 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
   HEAP32[i87 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
   i87 = (HEAP32[i117 >> 2] | 0) + (i1 << 3) | 0;
   HEAP32[i87 >> 2] = i127;
   HEAP32[i87 + 4 >> 2] = i128;
   i87 = HEAP32[i12 >> 2] | 0;
   if (i87 | 0) {
    i94 = HEAP32[i122 >> 2] | 0;
    if ((i94 | 0) == (i87 | 0)) i129 = i87; else {
     i123 = i94;
     while (1) {
      i94 = i123 + -12 | 0;
      HEAP32[i122 >> 2] = i94;
      if ((HEAP8[i94 + 11 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[i94 >> 2] | 0);
       i130 = HEAP32[i122 >> 2] | 0;
      } else i130 = i94;
      if ((i130 | 0) == (i87 | 0)) break; else i123 = i130;
     }
     i129 = HEAP32[i12 >> 2] | 0;
    }
    __ZdlPv(i129);
   }
   if ((HEAP8[i120 >> 0] | 0) < 0) __ZdlPv(HEAP32[i7 >> 2] | 0);
   i1 = i1 + 1 | 0;
   i119 = HEAP32[i35 >> 2] | 0;
  } while (i1 >>> 0 < (((HEAP32[i32 >> 2] | 0) - i119 | 0) / 12 | 0) >>> 0);
 }
 if ((HEAP8[i9 + 11 >> 0] | 0) >= 0) {
  HEAP32[i8 >> 2] = 3732;
  HEAP32[i13 >> 2] = 3752;
  __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev(i14);
  __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev(i8, 3764);
  __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev(i13);
  STACKTOP = i4;
  return;
 }
 __ZdlPv(HEAP32[i9 >> 2] | 0);
 HEAP32[i8 >> 2] = 3732;
 HEAP32[i13 >> 2] = 3752;
 __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev(i14);
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev(i8, 3764);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev(i13);
 STACKTOP = i4;
 return;
}

function __ZN15CityMapRenderer22generateQueue_overlay2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, i90 = 0, i91 = 0, i92 = 0, i93 = 0, i94 = 0, i95 = 0, i96 = 0, i97 = 0, i98 = 0, i99 = 0, i100 = 0, i101 = 0, i102 = 0, d103 = 0.0, f104 = f0, f105 = f0, i106 = 0, i107 = 0, i108 = 0, f109 = f0, f110 = f0, f111 = f0, i112 = 0, f113 = f0, f114 = f0, f115 = f0, f116 = f0, f117 = f0, f118 = f0, i119 = 0, i120 = 0, f121 = f0, f122 = f0, f123 = f0, f124 = f0, f125 = f0, f126 = f0, f127 = f0, f128 = f0, f129 = f0, f130 = f0, f131 = f0, i132 = 0, i133 = 0, f134 = f0, f135 = f0, f136 = f0, f137 = f0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 464 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(464);
 i4 = i3 + 400 | 0;
 i5 = i3 + 384 | 0;
 i6 = i3 + 320 | 0;
 i7 = i3 + 256 | 0;
 i8 = i3 + 192 | 0;
 i9 = i3 + 128 | 0;
 i10 = i3 + 64 | 0;
 i11 = i3;
 __ZN11RenderQueue5clearEv(i1);
 i12 = i1 + 248 | 0;
 if (!(HEAP32[HEAP32[i12 >> 2] >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 i13 = i1 + 252 | 0;
 i14 = i5 + 4 | 0;
 i15 = i5 + 8 | 0;
 i16 = i6 + 4 | 0;
 i17 = i6 + 20 | 0;
 i18 = i6 + 24 | 0;
 i19 = i6 + 40 | 0;
 i20 = i6 + 44 | 0;
 i21 = i6 + 48 | 0;
 i22 = i6 + 52 | 0;
 i23 = i6 + 56 | 0;
 i24 = i6 + 60 | 0;
 i25 = i11 + 4 | 0;
 i26 = i11 + 8 | 0;
 i27 = i11 + 12 | 0;
 i28 = i11 + 16 | 0;
 i29 = i11 + 20 | 0;
 i30 = i11 + 24 | 0;
 i31 = i11 + 28 | 0;
 i32 = i11 + 32 | 0;
 i33 = i11 + 36 | 0;
 i34 = i11 + 40 | 0;
 i35 = i11 + 44 | 0;
 i36 = i11 + 48 | 0;
 i37 = i11 + 52 | 0;
 i38 = i11 + 56 | 0;
 i39 = i11 + 60 | 0;
 i40 = i10 + 4 | 0;
 i41 = i10 + 8 | 0;
 i42 = i10 + 12 | 0;
 i43 = i10 + 16 | 0;
 i44 = i10 + 20 | 0;
 i45 = i10 + 24 | 0;
 i46 = i10 + 28 | 0;
 i47 = i10 + 32 | 0;
 i48 = i10 + 36 | 0;
 i49 = i10 + 40 | 0;
 i50 = i10 + 44 | 0;
 i51 = i10 + 48 | 0;
 i52 = i10 + 52 | 0;
 i53 = i10 + 56 | 0;
 i54 = i10 + 60 | 0;
 i55 = i9 + 4 | 0;
 i56 = i9 + 8 | 0;
 i57 = i9 + 12 | 0;
 i58 = i9 + 16 | 0;
 i59 = i9 + 20 | 0;
 i60 = i9 + 24 | 0;
 i61 = i9 + 28 | 0;
 i62 = i9 + 32 | 0;
 i63 = i9 + 36 | 0;
 i64 = i9 + 40 | 0;
 i65 = i9 + 44 | 0;
 i66 = i9 + 48 | 0;
 i67 = i9 + 52 | 0;
 i68 = i9 + 56 | 0;
 i69 = i9 + 60 | 0;
 i70 = i8 + 4 | 0;
 i71 = i8 + 8 | 0;
 i72 = i8 + 12 | 0;
 i73 = i8 + 16 | 0;
 i74 = i8 + 20 | 0;
 i75 = i8 + 24 | 0;
 i76 = i8 + 28 | 0;
 i77 = i8 + 32 | 0;
 i78 = i8 + 36 | 0;
 i79 = i8 + 40 | 0;
 i80 = i8 + 44 | 0;
 i81 = i8 + 48 | 0;
 i82 = i8 + 52 | 0;
 i83 = i8 + 56 | 0;
 i84 = i8 + 60 | 0;
 i85 = i7 + 4 | 0;
 i86 = i7 + 8 | 0;
 i87 = i7 + 12 | 0;
 i88 = i7 + 16 | 0;
 i89 = i7 + 20 | 0;
 i90 = i7 + 24 | 0;
 i91 = i7 + 28 | 0;
 i92 = i7 + 32 | 0;
 i93 = i7 + 36 | 0;
 i94 = i7 + 40 | 0;
 i95 = i7 + 44 | 0;
 i96 = i7 + 48 | 0;
 i97 = i7 + 52 | 0;
 i98 = i7 + 56 | 0;
 i99 = i7 + 60 | 0;
 i100 = 0;
 i101 = HEAP32[i12 >> 2] | 0;
 while (1) {
  if (!(HEAP32[i101 + 4 >> 2] | 0)) i102 = i101; else {
   d103 = +(i100 | 0);
   f104 = Math_fround(i100 | 0);
   f105 = Math_fround(f104 * Math_fround(0.0));
   i106 = 0;
   i107 = i101;
   while (1) {
    i108 = HEAP32[i13 >> 2] | 0;
    f109 = Math_fround(HEAPF32[i108 + 68 >> 2]);
    f110 = Math_fround(d103 - +HEAPF64[i108 + 48 >> 3]);
    f111 = Math_fround(+(i106 | 0) - +HEAPF64[i108 + 56 >> 3]);
    i112 = HEAP32[i108 + 72 >> 2] | 0;
    f113 = Math_fround(Math_fround(13.1999998) / Math_fround(HEAP32[i112 + 4 >> 2] | 0));
    f114 = Math_fround(Math_fround(9.39999961) / Math_fround(HEAP32[i112 + 8 >> 2] | 0));
    f115 = Math_fround(f110 + f111);
    if (Math_fround(Math_fround(f109 * Math_fround(f115 + Math_fround(1.0))) * f114) > Math_fround(-1.0)) if (Math_fround(Math_fround(f109 * Math_fround(f115 + Math_fround(-1.0))) * f114) < Math_fround(1.0)) {
     f114 = Math_fround(f110 - f111);
     if (Math_fround(f113 * Math_fround(f109 * Math_fround(f114 + Math_fround(1.0)))) > Math_fround(-1.0)) if (Math_fround(f113 * Math_fround(f109 * Math_fround(f114 + Math_fround(-1.0)))) < Math_fround(1.0)) {
      f114 = Math_fround(i106 | 0);
      f109 = Math_fround(f114 * Math_fround(0.0));
      f113 = Math_fround(Math_fround(f109 + f104) + Math_fround(0.0));
      f111 = Math_fround(Math_fround(f105 + f114) + Math_fround(0.0));
      f114 = Math_fround(Math_fround(f105 + f109) + Math_fround(0.0));
      f109 = Math_fround(f114 + Math_fround(1.0));
      i112 = __ZN7CityMap7getTileEjj(i107, i100, i106) | 0;
      __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i13 >> 2] | 0) + 44 >> 2] | 0);
      __ZN11RenderQueue7setMeshEi(i1, 0);
      f110 = Math_fround(Math_fround(HEAP32[i112 + 80 >> 2] | 0) / Math_fround(255.0));
      f115 = Math_fround(Math_fround(1.0) - f110);
      f116 = Math_fround(Math_fround(f110 * Math_fround(.80392158)) + Math_fround(f115 * Math_fround(.784313738)));
      f117 = Math_fround(f115 * Math_fround(.878431379));
      f115 = Math_fround(Math_fround(f110 * Math_fround(.698039233)) + f117);
      f118 = Math_fround(Math_fround(f110 * Math_fround(.647058845)) + f117);
      HEAPF32[i5 >> 2] = f116;
      HEAPF32[i14 >> 2] = f115;
      HEAPF32[i15 >> 2] = f118;
      HEAP32[i4 >> 2] = HEAP32[i5 >> 2];
      HEAP32[i4 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
      HEAP32[i4 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
      __ZN11RenderQueue10setDiffuseEN3glm3vecILi3EfLNS0_9qualifierE0EEE(i1, i4);
      HEAP32[i6 >> 2] = 1065353216;
      HEAP32[i16 >> 2] = 0;
      HEAP32[i16 + 4 >> 2] = 0;
      HEAP32[i16 + 8 >> 2] = 0;
      HEAP32[i16 + 12 >> 2] = 0;
      HEAP32[i17 >> 2] = 1065353216;
      HEAP32[i18 >> 2] = 0;
      HEAP32[i18 + 4 >> 2] = 0;
      HEAP32[i18 + 8 >> 2] = 0;
      HEAP32[i18 + 12 >> 2] = 0;
      HEAP32[i19 >> 2] = 1065353216;
      HEAPF32[i20 >> 2] = Math_fround(0.0);
      HEAPF32[i21 >> 2] = f113;
      HEAPF32[i22 >> 2] = f111;
      HEAPF32[i23 >> 2] = f114;
      HEAPF32[i24 >> 2] = f109;
      i108 = i4;
      i119 = i6;
      i120 = i108 + 64 | 0;
      do {
       HEAP32[i108 >> 2] = HEAP32[i119 >> 2];
       i108 = i108 + 4 | 0;
       i119 = i119 + 4 | 0;
      } while ((i108 | 0) < (i120 | 0));
      __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i4);
      if (HEAP32[i112 + 16 >> 2] | 0) {
       f118 = Math_fround(Math_fround(HEAP32[i112 + 24 >> 2] | 0) * Math_fround(1.57079637));
       f115 = Math_fround(_cosf(f118));
       f116 = Math_fround(_sinf(f118));
       f118 = Math_fround(Math_fround(1.0) - f115);
       f117 = Math_fround(f118 * Math_fround(0.0));
       f110 = Math_fround(f117 * Math_fround(0.0));
       f121 = Math_fround(f115 + f110);
       f122 = Math_fround(f116 + f110);
       f123 = Math_fround(f116 * Math_fround(0.0));
       f124 = Math_fround(f117 - f123);
       f125 = Math_fround(f110 - f116);
       f116 = Math_fround(f123 + f117);
       f117 = Math_fround(f115 + f118);
       f118 = Math_fround(f121 * Math_fround(.330000013));
       f115 = Math_fround(f121 * Math_fround(0.0));
       f121 = Math_fround(f122 * Math_fround(0.0));
       f123 = Math_fround(f115 + f121);
       f110 = Math_fround(f124 * Math_fround(0.0));
       f126 = Math_fround(f124 * Math_fround(.330000013));
       f124 = Math_fround(f110 + Math_fround(f118 + f121));
       f121 = Math_fround(f110 + Math_fround(f115 + Math_fround(f122 * Math_fround(.330000013))));
       f122 = Math_fround(f126 + f123);
       f127 = Math_fround(f110 + f123);
       f123 = Math_fround(f125 * Math_fround(0.0));
       f128 = Math_fround(f123 + f115);
       f129 = Math_fround(f116 * Math_fround(0.0));
       f130 = Math_fround(f116 * Math_fround(.330000013));
       f116 = Math_fround(f129 + Math_fround(Math_fround(f125 * Math_fround(.330000013)) + f115));
       f115 = Math_fround(f129 + Math_fround(f123 + f118));
       f118 = Math_fround(f130 + f128);
       f123 = Math_fround(f129 + f128);
       f128 = Math_fround(f129 + f110);
       f125 = Math_fround(f117 * Math_fround(0.0));
       f131 = Math_fround(f125 + Math_fround(f130 + f110));
       f110 = Math_fround(f125 + Math_fround(f129 + f126));
       f126 = Math_fround(Math_fround(f117 * Math_fround(.330000013)) + f128);
       f117 = Math_fround(f125 + f128);
       __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i13 >> 2] | 0) + 44 >> 2] | 0);
       __ZN11RenderQueue7setMeshEi(i1, (HEAP32[i112 + 20 >> 2] | 0) + 3 | 0);
       HEAPF32[i7 >> 2] = f124;
       HEAPF32[i85 >> 2] = f121;
       HEAPF32[i86 >> 2] = f122;
       HEAPF32[i87 >> 2] = f127;
       HEAPF32[i88 >> 2] = f116;
       HEAPF32[i89 >> 2] = f115;
       HEAPF32[i90 >> 2] = f118;
       HEAPF32[i91 >> 2] = f123;
       HEAPF32[i92 >> 2] = f131;
       HEAPF32[i93 >> 2] = f110;
       HEAPF32[i94 >> 2] = f126;
       HEAPF32[i95 >> 2] = f117;
       HEAPF32[i96 >> 2] = f113;
       HEAPF32[i97 >> 2] = f111;
       HEAPF32[i98 >> 2] = f114;
       HEAPF32[i99 >> 2] = f109;
       i108 = i4;
       i119 = i7;
       i120 = i108 + 64 | 0;
       do {
        HEAP32[i108 >> 2] = HEAP32[i119 >> 2];
        i108 = i108 + 4 | 0;
        i119 = i119 + 4 | 0;
       } while ((i108 | 0) < (i120 | 0));
       __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i4);
      }
      if ((HEAP32[i112 + 12 >> 2] | 0) == 1) {
       __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i13 >> 2] | 0) + 40 >> 2] | 0);
       i132 = i112 + 28 | 0;
       if ((HEAP32[i132 >> 2] | 0) == 1) if ((HEAP32[i112 + 32 >> 2] | 0) == 1) if ((HEAP32[i112 + 36 >> 2] | 0) == 1) if ((HEAP32[i112 + 40 >> 2] | 0) == 1) __ZN11RenderQueue7setMeshEi(i1, 38); else i2 = 19; else i2 = 19; else i2 = 19; else i2 = 19;
       if ((i2 | 0) == 19) {
        i2 = 0;
        __ZN11RenderQueue7setMeshEi(i1, 1);
       }
       f117 = Math_fround(f113 + Math_fround(.25));
       f126 = Math_fround(f111 + Math_fround(.25));
       f110 = Math_fround(f109 + Math_fround(0.0));
       i133 = HEAP32[i132 >> 2] | 0;
       if (i133 | 0) {
        f131 = Math_fround(Math_fround(i133 | 0) * Math_fround(.00150000001));
        f123 = Math_fround(_cosf(f131));
        f118 = Math_fround(_sinf(f131));
        f131 = Math_fround(Math_fround(1.0) - f123);
        f115 = Math_fround(f131 * Math_fround(0.0));
        f116 = Math_fround(f115 * Math_fround(0.0));
        f127 = Math_fround(f123 + f116);
        f122 = Math_fround(f118 + f116);
        f121 = Math_fround(f118 * Math_fround(0.0));
        f124 = Math_fround(f115 - f121);
        f128 = Math_fround(f116 - f118);
        f118 = Math_fround(f121 + f115);
        f115 = Math_fround(f123 + f131);
        f131 = Math_fround(f127 * Math_fround(.25));
        f123 = Math_fround(f127 * Math_fround(0.0));
        f127 = Math_fround(f122 * Math_fround(0.0));
        f121 = Math_fround(f123 + f127);
        f116 = Math_fround(f124 * Math_fround(0.0));
        f125 = Math_fround(f124 * Math_fround(.25));
        f124 = Math_fround(f128 * Math_fround(0.0));
        f129 = Math_fround(f124 + f123);
        f130 = Math_fround(f118 * Math_fround(0.0));
        f134 = Math_fround(f118 * Math_fround(.25));
        f118 = Math_fround(f130 + f116);
        f135 = Math_fround(f115 * Math_fround(0.0));
        f136 = Math_fround(Math_fround(f116 + Math_fround(f131 + f127)) * Math_fround(.449999988));
        f127 = Math_fround(Math_fround(f116 + Math_fround(f123 + Math_fround(f122 * Math_fround(.25)))) * Math_fround(.449999988));
        f122 = Math_fround(Math_fround(f125 + f121) * Math_fround(.449999988));
        f137 = Math_fround(Math_fround(f116 + f121) * Math_fround(.449999988));
        f121 = Math_fround(Math_fround(f130 + Math_fround(Math_fround(f128 * Math_fround(.25)) + f123)) * Math_fround(.449999988));
        f123 = Math_fround(Math_fround(f130 + Math_fround(f124 + f131)) * Math_fround(.449999988));
        f131 = Math_fround(Math_fround(f134 + f129) * Math_fround(.449999988));
        f124 = Math_fround(Math_fround(f130 + f129) * Math_fround(.449999988));
        f129 = Math_fround(Math_fround(f135 + Math_fround(f134 + f116)) * Math_fround(.449999988));
        f116 = Math_fround(Math_fround(f135 + Math_fround(f130 + f125)) * Math_fround(.449999988));
        f125 = Math_fround(Math_fround(Math_fround(f115 * Math_fround(.25)) + f118) * Math_fround(.449999988));
        f115 = Math_fround(Math_fround(f135 + f118) * Math_fround(.449999988));
        HEAPF32[i8 >> 2] = f136;
        HEAPF32[i70 >> 2] = f127;
        HEAPF32[i71 >> 2] = f122;
        HEAPF32[i72 >> 2] = f137;
        HEAPF32[i73 >> 2] = f121;
        HEAPF32[i74 >> 2] = f123;
        HEAPF32[i75 >> 2] = f131;
        HEAPF32[i76 >> 2] = f124;
        HEAPF32[i77 >> 2] = f129;
        HEAPF32[i78 >> 2] = f116;
        HEAPF32[i79 >> 2] = f125;
        HEAPF32[i80 >> 2] = f115;
        HEAPF32[i81 >> 2] = f117;
        HEAPF32[i82 >> 2] = f126;
        HEAPF32[i83 >> 2] = f114;
        HEAPF32[i84 >> 2] = f110;
        i108 = i4;
        i119 = i8;
        i120 = i108 + 64 | 0;
        do {
         HEAP32[i108 >> 2] = HEAP32[i119 >> 2];
         i108 = i108 + 4 | 0;
         i119 = i119 + 4 | 0;
        } while ((i108 | 0) < (i120 | 0));
        __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i4);
       }
       f109 = Math_fround(f111 + Math_fround(-.25));
       i133 = HEAP32[i112 + 32 >> 2] | 0;
       if (i133 | 0) {
        f115 = Math_fround(Math_fround(i133 | 0) * Math_fround(.00150000001));
        f125 = Math_fround(_cosf(f115));
        f116 = Math_fround(_sinf(f115));
        f115 = Math_fround(Math_fround(1.0) - f125);
        f129 = Math_fround(f115 * Math_fround(0.0));
        f124 = Math_fround(f129 * Math_fround(0.0));
        f131 = Math_fround(f125 + f124);
        f123 = Math_fround(f116 + f124);
        f121 = Math_fround(f116 * Math_fround(0.0));
        f137 = Math_fround(f129 - f121);
        f122 = Math_fround(f124 - f116);
        f116 = Math_fround(f121 + f129);
        f129 = Math_fround(f125 + f115);
        f115 = Math_fround(f131 * Math_fround(.25));
        f125 = Math_fround(f131 * Math_fround(0.0));
        f131 = Math_fround(f123 * Math_fround(0.0));
        f121 = Math_fround(f125 + f131);
        f124 = Math_fround(f137 * Math_fround(0.0));
        f127 = Math_fround(f137 * Math_fround(.25));
        f137 = Math_fround(f122 * Math_fround(0.0));
        f136 = Math_fround(f137 + f125);
        f118 = Math_fround(f116 * Math_fround(0.0));
        f135 = Math_fround(f116 * Math_fround(.25));
        f116 = Math_fround(f118 + f124);
        f130 = Math_fround(f129 * Math_fround(0.0));
        f134 = Math_fround(Math_fround(f124 + Math_fround(f115 + f131)) * Math_fround(.449999988));
        f131 = Math_fround(Math_fround(f124 + Math_fround(f125 + Math_fround(f123 * Math_fround(.25)))) * Math_fround(.449999988));
        f123 = Math_fround(Math_fround(f127 + f121) * Math_fround(.449999988));
        f128 = Math_fround(Math_fround(f124 + f121) * Math_fround(.449999988));
        f121 = Math_fround(Math_fround(f118 + Math_fround(Math_fround(f122 * Math_fround(.25)) + f125)) * Math_fround(.449999988));
        f125 = Math_fround(Math_fround(f118 + Math_fround(f137 + f115)) * Math_fround(.449999988));
        f115 = Math_fround(Math_fround(f135 + f136) * Math_fround(.449999988));
        f137 = Math_fround(Math_fround(f118 + f136) * Math_fround(.449999988));
        f136 = Math_fround(Math_fround(f130 + Math_fround(f135 + f124)) * Math_fround(.449999988));
        f124 = Math_fround(Math_fround(f130 + Math_fround(f118 + f127)) * Math_fround(.449999988));
        f127 = Math_fround(Math_fround(Math_fround(f129 * Math_fround(.25)) + f116) * Math_fround(.449999988));
        f129 = Math_fround(Math_fround(f130 + f116) * Math_fround(.449999988));
        HEAPF32[i9 >> 2] = f134;
        HEAPF32[i55 >> 2] = f131;
        HEAPF32[i56 >> 2] = f123;
        HEAPF32[i57 >> 2] = f128;
        HEAPF32[i58 >> 2] = f121;
        HEAPF32[i59 >> 2] = f125;
        HEAPF32[i60 >> 2] = f115;
        HEAPF32[i61 >> 2] = f137;
        HEAPF32[i62 >> 2] = f136;
        HEAPF32[i63 >> 2] = f124;
        HEAPF32[i64 >> 2] = f127;
        HEAPF32[i65 >> 2] = f129;
        HEAPF32[i66 >> 2] = f117;
        HEAPF32[i67 >> 2] = f109;
        HEAPF32[i68 >> 2] = f114;
        HEAPF32[i69 >> 2] = f110;
        i108 = i4;
        i119 = i9;
        i120 = i108 + 64 | 0;
        do {
         HEAP32[i108 >> 2] = HEAP32[i119 >> 2];
         i108 = i108 + 4 | 0;
         i119 = i119 + 4 | 0;
        } while ((i108 | 0) < (i120 | 0));
        __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i4);
       }
       f117 = Math_fround(f113 + Math_fround(-.25));
       i133 = HEAP32[i112 + 36 >> 2] | 0;
       if (i133 | 0) {
        f111 = Math_fround(Math_fround(i133 | 0) * Math_fround(.00150000001));
        f129 = Math_fround(_cosf(f111));
        f127 = Math_fround(_sinf(f111));
        f111 = Math_fround(Math_fround(1.0) - f129);
        f124 = Math_fround(f111 * Math_fround(0.0));
        f136 = Math_fround(f124 * Math_fround(0.0));
        f137 = Math_fround(f129 + f136);
        f115 = Math_fround(f127 + f136);
        f125 = Math_fround(f127 * Math_fround(0.0));
        f121 = Math_fround(f124 - f125);
        f128 = Math_fround(f136 - f127);
        f127 = Math_fround(f125 + f124);
        f124 = Math_fround(f129 + f111);
        f111 = Math_fround(f137 * Math_fround(.25));
        f129 = Math_fround(f137 * Math_fround(0.0));
        f137 = Math_fround(f115 * Math_fround(0.0));
        f125 = Math_fround(f129 + f137);
        f136 = Math_fround(f121 * Math_fround(0.0));
        f123 = Math_fround(f121 * Math_fround(.25));
        f121 = Math_fround(f128 * Math_fround(0.0));
        f131 = Math_fround(f121 + f129);
        f134 = Math_fround(f127 * Math_fround(0.0));
        f116 = Math_fround(f127 * Math_fround(.25));
        f127 = Math_fround(f134 + f136);
        f130 = Math_fround(f124 * Math_fround(0.0));
        f118 = Math_fround(Math_fround(f136 + Math_fround(f111 + f137)) * Math_fround(.449999988));
        f137 = Math_fround(Math_fround(f136 + Math_fround(f129 + Math_fround(f115 * Math_fround(.25)))) * Math_fround(.449999988));
        f115 = Math_fround(Math_fround(f123 + f125) * Math_fround(.449999988));
        f135 = Math_fround(Math_fround(f136 + f125) * Math_fround(.449999988));
        f125 = Math_fround(Math_fround(f134 + Math_fround(Math_fround(f128 * Math_fround(.25)) + f129)) * Math_fround(.449999988));
        f129 = Math_fround(Math_fround(f134 + Math_fround(f121 + f111)) * Math_fround(.449999988));
        f111 = Math_fround(Math_fround(f116 + f131) * Math_fround(.449999988));
        f121 = Math_fround(Math_fround(f134 + f131) * Math_fround(.449999988));
        f131 = Math_fround(Math_fround(f130 + Math_fround(f116 + f136)) * Math_fround(.449999988));
        f136 = Math_fround(Math_fround(f130 + Math_fround(f134 + f123)) * Math_fround(.449999988));
        f123 = Math_fround(Math_fround(Math_fround(f124 * Math_fround(.25)) + f127) * Math_fround(.449999988));
        f124 = Math_fround(Math_fround(f130 + f127) * Math_fround(.449999988));
        HEAPF32[i10 >> 2] = f118;
        HEAPF32[i40 >> 2] = f137;
        HEAPF32[i41 >> 2] = f115;
        HEAPF32[i42 >> 2] = f135;
        HEAPF32[i43 >> 2] = f125;
        HEAPF32[i44 >> 2] = f129;
        HEAPF32[i45 >> 2] = f111;
        HEAPF32[i46 >> 2] = f121;
        HEAPF32[i47 >> 2] = f131;
        HEAPF32[i48 >> 2] = f136;
        HEAPF32[i49 >> 2] = f123;
        HEAPF32[i50 >> 2] = f124;
        HEAPF32[i51 >> 2] = f117;
        HEAPF32[i52 >> 2] = f126;
        HEAPF32[i53 >> 2] = f114;
        HEAPF32[i54 >> 2] = f110;
        i108 = i4;
        i119 = i10;
        i120 = i108 + 64 | 0;
        do {
         HEAP32[i108 >> 2] = HEAP32[i119 >> 2];
         i108 = i108 + 4 | 0;
         i119 = i119 + 4 | 0;
        } while ((i108 | 0) < (i120 | 0));
        __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i4);
       }
       i133 = HEAP32[i112 + 40 >> 2] | 0;
       if (i133 | 0) {
        f126 = Math_fround(Math_fround(i133 | 0) * Math_fround(.00150000001));
        f113 = Math_fround(_cosf(f126));
        f124 = Math_fround(_sinf(f126));
        f126 = Math_fround(Math_fround(1.0) - f113);
        f123 = Math_fround(f126 * Math_fround(0.0));
        f136 = Math_fround(f123 * Math_fround(0.0));
        f131 = Math_fround(f113 + f136);
        f121 = Math_fround(f124 + f136);
        f111 = Math_fround(f124 * Math_fround(0.0));
        f129 = Math_fround(f123 - f111);
        f125 = Math_fround(f136 - f124);
        f124 = Math_fround(f111 + f123);
        f123 = Math_fround(f113 + f126);
        f126 = Math_fround(f131 * Math_fround(.25));
        f113 = Math_fround(f131 * Math_fround(0.0));
        f131 = Math_fround(f121 * Math_fround(0.0));
        f111 = Math_fround(f113 + f131);
        f136 = Math_fround(f129 * Math_fround(0.0));
        f135 = Math_fround(f129 * Math_fround(.25));
        f129 = Math_fround(f125 * Math_fround(0.0));
        f115 = Math_fround(f129 + f113);
        f137 = Math_fround(f124 * Math_fround(0.0));
        f118 = Math_fround(f124 * Math_fround(.25));
        f124 = Math_fround(f137 + f136);
        f127 = Math_fround(f123 * Math_fround(0.0));
        f130 = Math_fround(Math_fround(f136 + Math_fround(f126 + f131)) * Math_fround(.449999988));
        f131 = Math_fround(Math_fround(f136 + Math_fround(f113 + Math_fround(f121 * Math_fround(.25)))) * Math_fround(.449999988));
        f121 = Math_fround(Math_fround(f135 + f111) * Math_fround(.449999988));
        f134 = Math_fround(Math_fround(f136 + f111) * Math_fround(.449999988));
        f111 = Math_fround(Math_fround(f137 + Math_fround(Math_fround(f125 * Math_fround(.25)) + f113)) * Math_fround(.449999988));
        f113 = Math_fround(Math_fround(f137 + Math_fround(f129 + f126)) * Math_fround(.449999988));
        f126 = Math_fround(Math_fround(f118 + f115) * Math_fround(.449999988));
        f129 = Math_fround(Math_fround(f137 + f115) * Math_fround(.449999988));
        f115 = Math_fround(Math_fround(f127 + Math_fround(f118 + f136)) * Math_fround(.449999988));
        f136 = Math_fround(Math_fround(f127 + Math_fround(f137 + f135)) * Math_fround(.449999988));
        f135 = Math_fround(Math_fround(Math_fround(f123 * Math_fround(.25)) + f124) * Math_fround(.449999988));
        f123 = Math_fround(Math_fround(f127 + f124) * Math_fround(.449999988));
        HEAPF32[i11 >> 2] = f130;
        HEAPF32[i25 >> 2] = f131;
        HEAPF32[i26 >> 2] = f121;
        HEAPF32[i27 >> 2] = f134;
        HEAPF32[i28 >> 2] = f111;
        HEAPF32[i29 >> 2] = f113;
        HEAPF32[i30 >> 2] = f126;
        HEAPF32[i31 >> 2] = f129;
        HEAPF32[i32 >> 2] = f115;
        HEAPF32[i33 >> 2] = f136;
        HEAPF32[i34 >> 2] = f135;
        HEAPF32[i35 >> 2] = f123;
        HEAPF32[i36 >> 2] = f117;
        HEAPF32[i37 >> 2] = f109;
        HEAPF32[i38 >> 2] = f114;
        HEAPF32[i39 >> 2] = f110;
        i108 = i4;
        i119 = i11;
        i120 = i108 + 64 | 0;
        do {
         HEAP32[i108 >> 2] = HEAP32[i119 >> 2];
         i108 = i108 + 4 | 0;
         i119 = i119 + 4 | 0;
        } while ((i108 | 0) < (i120 | 0));
        __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i4);
       }
      }
     }
    }
    i106 = i106 + 1 | 0;
    i119 = HEAP32[i12 >> 2] | 0;
    if (i106 >>> 0 >= (HEAP32[i119 + 4 >> 2] | 0) >>> 0) {
     i102 = i119;
     break;
    } else i107 = i119;
   }
  }
  i100 = i100 + 1 | 0;
  if (i100 >>> 0 >= (HEAP32[i102 >> 2] | 0) >>> 0) break; else i101 = i102;
 }
 STACKTOP = i3;
 return;
}

function _png_image_read_colormap(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i3;
 i5 = HEAP32[i1 >> 2] | 0;
 i6 = HEAP32[HEAP32[i5 >> 2] >> 2] | 0;
 i7 = HEAP32[i5 + 16 >> 2] | 0;
 i8 = i7 & 4;
 i9 = (i8 | 0) != 0;
 i10 = i8 >>> 2;
 i8 = i10 + 1 | 0;
 i11 = i6 + 435 | 0;
 i12 = HEAP8[i11 >> 0] | 0;
 if (!(i12 & 4)) if ((i7 & 1 | 0) == 0 & (HEAP16[i6 + 428 >> 1] | 0) != 0) i2 = 4; else i2 = 9; else if (!(i7 & 1)) i2 = 4; else i2 = 9;
 if ((i2 | 0) == 4) if (i9) {
  i13 = 0;
  i14 = 0;
  i15 = 0;
 } else {
  i16 = HEAP32[i1 + 16 >> 2] | 0;
  if (!i16) _png_error(i6, 65823);
  i17 = HEAPU8[i16 + 1 >> 0] | 0;
  if (!(i7 & 2)) {
   i13 = i17;
   i14 = i17;
   i15 = i17;
  } else {
   i13 = HEAPU8[i16 >> 0] | 0;
   i14 = i17;
   i15 = HEAPU8[i16 + 2 >> 0] | 0;
  }
 } else if ((i2 | 0) == 9) {
  i16 = i9 ? 65535 : 255;
  i13 = i16;
  i14 = i16;
  i15 = i16;
 }
 i16 = i6 + 824 | 0;
 i17 = i6 + 898 | 0;
 i18 = HEAP16[i17 >> 1] | 0;
 if (!(i18 & 1)) {
  if ((HEAP8[i6 + 436 >> 0] | 0) == 16) if (!(HEAP32[i5 + 20 >> 2] & 4)) i19 = 1e5; else i2 = 13; else i2 = 13;
  if ((i2 | 0) == 13) i19 = 45455;
  HEAP32[i16 >> 2] = i19;
  HEAP16[i17 >> 1] = i18 | 1;
 }
 L21 : do switch (i12 << 24 >> 24) {
 case 0:
  {
   i18 = i6 + 436 | 0;
   i17 = HEAP8[i18 >> 0] | 0;
   if ((i17 & 255) < 9) {
    i19 = 1 << (i17 & 255);
    if (i19 >>> 0 > (HEAP32[i5 + 24 >> 2] | 0) >>> 0) _png_error(i6, 65888);
    i17 = 255 / ((i19 + -1 | 0) >>> 0) | 0;
    if (!(HEAP16[i6 + 428 >> 1] | 0)) {
     i20 = 0;
     i21 = 256;
    } else {
     i20 = (i7 & 1 | 0) == 0 ? (i9 ? 65535 : 255) : 0;
     i21 = HEAPU16[i6 + 540 >> 1] | 0;
    }
    i22 = 0;
    i23 = 0;
    while (1) {
     if ((i22 | 0) == (i21 | 0)) _png_create_colormap_entry(i1, i21, i13, i14, i15, i20, i8); else _png_create_colormap_entry(i1, i22, i23, i23, i23, 255, 3);
     i22 = i22 + 1 | 0;
     if (i22 >>> 0 >= i19 >>> 0) break; else i23 = i23 + i17 | 0;
    }
    if ((HEAPU8[i18 >> 0] | 0) >= 8) {
     i24 = 0;
     i25 = 256;
     i26 = i19;
     break L21;
    }
    _png_set_packing(i6);
    i24 = 0;
    i25 = 256;
    i26 = i19;
    break L21;
   } else {
    if ((HEAP32[i5 + 24 >> 2] | 0) >>> 0 < 256) _png_error(i6, 65923); else i27 = 0;
    do {
     _png_create_colormap_entry(i1, i27, i27, i27, i27, 255, 1);
     i27 = i27 + 1 | 0;
    } while ((i27 | 0) != 256);
    if (!(HEAP16[i6 + 428 >> 1] | 0)) {
     i28 = 0;
     i29 = 256;
     i30 = 256;
     i2 = 146;
     break L21;
    }
    do if (!(i7 & 1)) {
     if (!((i14 | 0) == (i15 | 0) & (i13 | 0) == (i14 | 0))) {
      i31 = i9 ? 65535 : 255;
      break;
     }
     if (i9) {
      i19 = i15 * 255 | 0;
      i18 = i19 >>> 15;
      i17 = (((Math_imul(i19 & 32767, HEAPU8[58335 + i18 >> 0] | 0) | 0) >>> 12) + (HEAPU16[21850 + (i18 << 1) >> 1] | 0) | 0) >>> 8 & 255;
      _png_create_colormap_entry(i1, i17, i15, i15, i15, 65535, 2);
      i32 = i17;
     } else i32 = i15;
     HEAP8[i4 >> 0] = 0;
     i17 = i32 & 65535;
     HEAP16[i4 + 6 >> 1] = i17;
     HEAP16[i4 + 4 >> 1] = i17;
     HEAP16[i4 + 2 >> 1] = i17;
     HEAP16[i4 + 8 >> 1] = i17;
     _png_set_background_fixed(i6, i4, 1, 0, 0);
     i28 = 0;
     i29 = 256;
     i30 = 256;
     i2 = 146;
     break L21;
    } else i31 = 0; while (0);
    _png_create_colormap_entry(i1, 254, i13, i14, i15, i31, i8);
    i33 = 1;
    i34 = 2;
    i35 = 254;
    i36 = 256;
    i2 = 141;
    break L21;
   }
   break;
  }
 case 4:
  {
   if (i7 & 1 | 0) if ((HEAP32[i5 + 24 >> 2] | 0) >>> 0 < 256) _png_error(i6, 65959); else {
    i28 = 1;
    i29 = 231;
    i30 = _make_ga_colormap(i1) | 0;
    i2 = 146;
    break L21;
   }
   if (i7 & 2 | 0) if (!((i14 | 0) == (i15 | 0) & (i13 | 0) == (i14 | 0))) {
    if ((HEAP32[i5 + 24 >> 2] | 0) >>> 0 < 256) _png_error(i6, 66035); else i37 = 0;
    do {
     i17 = ((i37 << 8 | 115) >>> 0) / 231 | 0;
     _png_create_colormap_entry(i1, i37, i17, i17, i17, 255, 1);
     i37 = i37 + 1 | 0;
    } while ((i37 | 0) != 231);
    _png_create_colormap_entry(i1, 231, i13, i14, i15, i9 ? 65535 : 255, i8);
    if (!i10) {
     i38 = HEAPU16[21338 + (i13 << 1) >> 1] | 0;
     i39 = HEAPU16[21338 + (i14 << 1) >> 1] | 0;
     i40 = HEAPU16[21338 + (i15 << 1) >> 1] | 0;
    } else {
     i38 = i13;
     i39 = i14;
     i40 = i15;
    }
    i17 = i38 * 204 | 0;
    i18 = i39 * 204 | 0;
    i19 = i40 * 204 | 0;
    i23 = 0;
    i22 = 232;
    while (1) {
     i41 = (HEAPU16[21338 + (i23 * 51 << 1) >> 1] | 0) * 51 | 0;
     i42 = i41 + i17 | 0;
     i43 = i42 >>> 15;
     i44 = (((Math_imul(i42 & 32767, HEAPU8[58335 + i43 >> 0] | 0) | 0) >>> 12) + (HEAPU16[21850 + (i43 << 1) >> 1] | 0) | 0) >>> 8 & 255;
     i43 = i41 + i18 | 0;
     i42 = i43 >>> 15;
     i45 = (((Math_imul(i43 & 32767, HEAPU8[58335 + i42 >> 0] | 0) | 0) >>> 12) + (HEAPU16[21850 + (i42 << 1) >> 1] | 0) | 0) >>> 8 & 255;
     i42 = i41 + i19 | 0;
     i41 = i42 >>> 15;
     _png_create_colormap_entry(i1, i22, i44, i45, (((Math_imul(i42 & 32767, HEAPU8[58335 + i41 >> 0] | 0) | 0) >>> 12) + (HEAPU16[21850 + (i41 << 1) >> 1] | 0) | 0) >>> 8 & 255, 255, 1);
     i23 = i23 + 1 | 0;
     if ((i23 | 0) == 6) break; else i22 = i22 + 1 | 0;
    }
    i22 = i38 * 153 | 0;
    i23 = i39 * 153 | 0;
    i19 = i40 * 153 | 0;
    i18 = 0;
    i17 = 238;
    while (1) {
     i41 = (HEAPU16[21338 + (i18 * 51 << 1) >> 1] | 0) * 102 | 0;
     i42 = i41 + i22 | 0;
     i45 = i42 >>> 15;
     i44 = (((Math_imul(i42 & 32767, HEAPU8[58335 + i45 >> 0] | 0) | 0) >>> 12) + (HEAPU16[21850 + (i45 << 1) >> 1] | 0) | 0) >>> 8 & 255;
     i45 = i41 + i23 | 0;
     i42 = i45 >>> 15;
     i43 = (((Math_imul(i45 & 32767, HEAPU8[58335 + i42 >> 0] | 0) | 0) >>> 12) + (HEAPU16[21850 + (i42 << 1) >> 1] | 0) | 0) >>> 8 & 255;
     i42 = i41 + i19 | 0;
     i41 = i42 >>> 15;
     _png_create_colormap_entry(i1, i17, i44, i43, (((Math_imul(i42 & 32767, HEAPU8[58335 + i41 >> 0] | 0) | 0) >>> 12) + (HEAPU16[21850 + (i41 << 1) >> 1] | 0) | 0) >>> 8 & 255, 255, 1);
     i18 = i18 + 1 | 0;
     if ((i18 | 0) == 6) break; else i17 = i17 + 1 | 0;
    }
    i17 = i38 * 102 | 0;
    i18 = i39 * 102 | 0;
    i19 = i40 * 102 | 0;
    i23 = 0;
    i22 = 244;
    while (1) {
     i41 = (HEAPU16[21338 + (i23 * 51 << 1) >> 1] | 0) * 153 | 0;
     i42 = i41 + i17 | 0;
     i43 = i42 >>> 15;
     i44 = (((Math_imul(i42 & 32767, HEAPU8[58335 + i43 >> 0] | 0) | 0) >>> 12) + (HEAPU16[21850 + (i43 << 1) >> 1] | 0) | 0) >>> 8 & 255;
     i43 = i41 + i18 | 0;
     i42 = i43 >>> 15;
     i45 = (((Math_imul(i43 & 32767, HEAPU8[58335 + i42 >> 0] | 0) | 0) >>> 12) + (HEAPU16[21850 + (i42 << 1) >> 1] | 0) | 0) >>> 8 & 255;
     i42 = i41 + i19 | 0;
     i41 = i42 >>> 15;
     _png_create_colormap_entry(i1, i22, i44, i45, (((Math_imul(i42 & 32767, HEAPU8[58335 + i41 >> 0] | 0) | 0) >>> 12) + (HEAPU16[21850 + (i41 << 1) >> 1] | 0) | 0) >>> 8 & 255, 255, 1);
     i23 = i23 + 1 | 0;
     if ((i23 | 0) == 6) break; else i22 = i22 + 1 | 0;
    }
    i22 = i38 * 51 | 0;
    i23 = i39 * 51 | 0;
    i19 = i40 * 51 | 0;
    i18 = 0;
    i17 = 250;
    while (1) {
     i41 = (HEAPU16[21338 + (i18 * 51 << 1) >> 1] | 0) * 204 | 0;
     i42 = i41 + i22 | 0;
     i45 = i42 >>> 15;
     i44 = (((Math_imul(i42 & 32767, HEAPU8[58335 + i45 >> 0] | 0) | 0) >>> 12) + (HEAPU16[21850 + (i45 << 1) >> 1] | 0) | 0) >>> 8 & 255;
     i45 = i41 + i23 | 0;
     i42 = i45 >>> 15;
     i43 = (((Math_imul(i45 & 32767, HEAPU8[58335 + i42 >> 0] | 0) | 0) >>> 12) + (HEAPU16[21850 + (i42 << 1) >> 1] | 0) | 0) >>> 8 & 255;
     i42 = i41 + i19 | 0;
     i41 = i42 >>> 15;
     _png_create_colormap_entry(i1, i17, i44, i43, (((Math_imul(i42 & 32767, HEAPU8[58335 + i41 >> 0] | 0) | 0) >>> 12) + (HEAPU16[21850 + (i41 << 1) >> 1] | 0) | 0) >>> 8 & 255, 255, 1);
     i18 = i18 + 1 | 0;
     if ((i18 | 0) == 6) {
      i28 = 1;
      i29 = 231;
      i30 = 256;
      i2 = 146;
      break L21;
     } else i17 = i17 + 1 | 0;
    }
   }
   if ((HEAP32[i5 + 24 >> 2] | 0) >>> 0 < 256) _png_error(i6, 65997); else i46 = 0;
   do {
    _png_create_colormap_entry(i1, i46, i46, i46, i46, 255, 1);
    i46 = i46 + 1 | 0;
   } while ((i46 | 0) != 256);
   if (i9) {
    i17 = i14 * 255 | 0;
    i18 = i17 >>> 15;
    i19 = (((Math_imul(i17 & 32767, HEAPU8[58335 + i18 >> 0] | 0) | 0) >>> 12) + (HEAPU16[21850 + (i18 << 1) >> 1] | 0) | 0) >>> 8 & 255;
    _png_create_colormap_entry(i1, i19, i14, i14, i14, 65535, 2);
    i47 = i19;
   } else i47 = i14;
   HEAP8[i4 >> 0] = 0;
   i19 = i47 & 65535;
   HEAP16[i4 + 6 >> 1] = i19;
   HEAP16[i4 + 4 >> 1] = i19;
   HEAP16[i4 + 2 >> 1] = i19;
   HEAP16[i4 + 8 >> 1] = i19;
   _png_set_background_fixed(i6, i4, 1, 0, 0);
   i28 = 0;
   i29 = 256;
   i30 = 256;
   i2 = 146;
   break;
  }
 case 6:
 case 2:
  {
   if (!(i7 & 2)) {
    _png_set_rgb_to_gray_fixed(i6, 1, -1, -1);
    i19 = (HEAP8[i11 >> 0] | 0) == 6;
    if (i19) {
     if (i7 & 1 | 0) i2 = 63;
    } else if (!((i7 & 1 | 0) == 0 | (HEAP16[i6 + 428 >> 1] | 0) == 0)) i2 = 63;
    if ((i2 | 0) == 63) if ((HEAP32[i5 + 24 >> 2] | 0) >>> 0 < 256) _png_error(i6, 66071); else {
     i33 = 1;
     i34 = 1;
     i35 = 231;
     i36 = _make_ga_colormap(i1) | 0;
     i2 = 141;
     break L21;
    }
    if ((HEAP32[i5 + 24 >> 2] | 0) >>> 0 < 256) _png_error(i6, 66106);
    if (i19) i2 = 70; else if (!(HEAP16[i6 + 428 >> 1] | 0)) {
     i48 = 0;
     i2 = 74;
    } else i2 = 70;
    do if ((i2 | 0) == 70) {
     i19 = HEAP32[i16 >> 2] | 0;
     if ((i19 | 0) < 1e5) {
      if (!i19) {
       i48 = 0;
       i2 = 74;
       break;
      }
      if (!(_png_gamma_significant(((i19 * 11 | 0) + 2 | 0) / 5 | 0) | 0)) {
       i48 = 0;
       i2 = 74;
       break;
      } else i49 = 0;
     } else i49 = 0;
     do {
      _png_create_colormap_entry(i1, i49, i49, i49, i49, 255, 3);
      i49 = i49 + 1 | 0;
     } while ((i49 | 0) != 256);
     i50 = 3;
    } while (0);
    if ((i2 | 0) == 74) while (1) {
     i2 = 0;
     _png_create_colormap_entry(i1, i48, i48, i48, i48, 255, 1);
     i48 = i48 + 1 | 0;
     if ((i48 | 0) == 256) {
      i50 = 1;
      break;
     } else i2 = 74;
    }
    if ((HEAP8[i11 >> 0] | 0) != 6) if (!(HEAP16[i6 + 428 >> 1] | 0)) {
     i51 = i50;
     i52 = 0;
     i53 = 256;
     i54 = 256;
     i2 = 144;
     break L21;
    }
    if ((i50 | 0) == 3) {
     if (!i10) i55 = HEAPU16[21338 + (i14 << 1) >> 1] | 0; else i55 = i14;
     i19 = ((((_png_gamma_16bit_correct(i55, HEAP32[i16 >> 2] | 0) | 0) & 65535) * 255 | 0) + 32895 | 0) >>> 16;
     _png_create_colormap_entry(i1, i19, i14, i14, i14, 0, i8);
     i56 = i19;
    } else if (i9) {
     i19 = i14 * 255 | 0;
     i18 = i19 >>> 15;
     i17 = (((Math_imul(i19 & 32767, HEAPU8[58335 + i18 >> 0] | 0) | 0) >>> 12) + (HEAPU16[21850 + (i18 << 1) >> 1] | 0) | 0) >>> 8 & 255;
     _png_create_colormap_entry(i1, i17, i14, i14, i14, 0, 2);
     i56 = i17;
    } else i56 = i14;
    HEAP8[i4 >> 0] = 0;
    i17 = i56 & 65535;
    HEAP16[i4 + 6 >> 1] = i17;
    HEAP16[i4 + 4 >> 1] = i17;
    HEAP16[i4 + 2 >> 1] = i17;
    HEAP16[i4 + 8 >> 1] = i17;
    _png_set_background_fixed(i6, i4, 1, 0, 0);
    i33 = i50;
    i34 = 0;
    i35 = 256;
    i36 = 256;
    i2 = 141;
    break L21;
   }
   if (i12 << 24 >> 24 != 6) if (!(HEAP16[i6 + 428 >> 1] | 0)) if ((HEAP32[i5 + 24 >> 2] | 0) >>> 0 < 216) _png_error(i6, 66217); else {
    i28 = 3;
    i29 = 256;
    i30 = _make_rgb_colormap(i1) | 0;
    i2 = 146;
    break L21;
   }
   if (i7 & 1 | 0) if ((HEAP32[i5 + 24 >> 2] | 0) >>> 0 < 244) _png_error(i6, 66143); else {
    i17 = _make_rgb_colormap(i1) | 0;
    _png_create_colormap_entry(i1, i17, 255, 255, 255, 0, 1);
    _png_create_colormap_entry(i1, i17 + 1 | 0, 0, 0, 0, 128, 1);
    _png_create_colormap_entry(i1, i17 + 2 | 0, 0, 0, 127, 128, 1);
    _png_create_colormap_entry(i1, i17 + 3 | 0, 0, 0, 255, 128, 1);
    _png_create_colormap_entry(i1, i17 + 4 | 0, 0, 127, 0, 128, 1);
    _png_create_colormap_entry(i1, i17 + 5 | 0, 0, 127, 127, 128, 1);
    _png_create_colormap_entry(i1, i17 + 6 | 0, 0, 127, 255, 128, 1);
    _png_create_colormap_entry(i1, i17 + 7 | 0, 0, 255, 0, 128, 1);
    _png_create_colormap_entry(i1, i17 + 8 | 0, 0, 255, 127, 128, 1);
    _png_create_colormap_entry(i1, i17 + 9 | 0, 0, 255, 255, 128, 1);
    _png_create_colormap_entry(i1, i17 + 10 | 0, 127, 0, 0, 128, 1);
    _png_create_colormap_entry(i1, i17 + 11 | 0, 127, 0, 127, 128, 1);
    _png_create_colormap_entry(i1, i17 + 12 | 0, 127, 0, 255, 128, 1);
    _png_create_colormap_entry(i1, i17 + 13 | 0, 127, 127, 0, 128, 1);
    _png_create_colormap_entry(i1, i17 + 14 | 0, 127, 127, 127, 128, 1);
    _png_create_colormap_entry(i1, i17 + 15 | 0, 127, 127, 255, 128, 1);
    _png_create_colormap_entry(i1, i17 + 16 | 0, 127, 255, 0, 128, 1);
    _png_create_colormap_entry(i1, i17 + 17 | 0, 127, 255, 127, 128, 1);
    _png_create_colormap_entry(i1, i17 + 18 | 0, 127, 255, 255, 128, 1);
    _png_create_colormap_entry(i1, i17 + 19 | 0, 255, 0, 0, 128, 1);
    _png_create_colormap_entry(i1, i17 + 20 | 0, 255, 0, 127, 128, 1);
    _png_create_colormap_entry(i1, i17 + 21 | 0, 255, 0, 255, 128, 1);
    _png_create_colormap_entry(i1, i17 + 22 | 0, 255, 127, 0, 128, 1);
    _png_create_colormap_entry(i1, i17 + 23 | 0, 255, 127, 127, 128, 1);
    _png_create_colormap_entry(i1, i17 + 24 | 0, 255, 127, 255, 128, 1);
    _png_create_colormap_entry(i1, i17 + 25 | 0, 255, 255, 0, 128, 1);
    _png_create_colormap_entry(i1, i17 + 26 | 0, 255, 255, 127, 128, 1);
    _png_create_colormap_entry(i1, i17 + 27 | 0, 255, 255, 255, 128, 1);
    i33 = 1;
    i34 = 4;
    i35 = i17;
    i36 = i17 + 28 | 0;
    i2 = 141;
    break L21;
   }
   i17 = Math_imul(i8, (i7 & 3) + 1 | 0) | 0;
   if ((HEAP32[i5 + 24 >> 2] | 0) >>> 0 < 244) _png_error(i6, 66180);
   i18 = _make_rgb_colormap(i1) | 0;
   _png_create_colormap_entry(i1, i18, i13, i14, i15, 0, i8);
   if (i9) {
    i19 = i13 * 255 | 0;
    i23 = i19 >>> 15;
    i22 = (((Math_imul(i19 & 32767, HEAPU8[58335 + i23 >> 0] | 0) | 0) >>> 12) + (HEAPU16[21850 + (i23 << 1) >> 1] | 0) | 0) >>> 8 & 255;
    i23 = i14 * 255 | 0;
    i19 = i23 >>> 15;
    i41 = (((Math_imul(i23 & 32767, HEAPU8[58335 + i19 >> 0] | 0) | 0) >>> 12) + (HEAPU16[21850 + (i19 << 1) >> 1] | 0) | 0) >>> 8 & 255;
    i19 = i15 * 255 | 0;
    i23 = i19 >>> 15;
    i57 = (((Math_imul(i19 & 32767, HEAPU8[58335 + i23 >> 0] | 0) | 0) >>> 12) + (HEAPU16[21850 + (i23 << 1) >> 1] | 0) | 0) >>> 8 & 255;
    i58 = i41;
    i59 = i22;
   } else {
    i57 = i14;
    i58 = i14;
    i59 = i13;
   }
   i22 = HEAP32[i1 + 12 >> 2] | 0;
   if (!(_memcmp(i22 + (Math_imul(i18, i17) | 0) | 0, i22 + (Math_imul(((((((i59 * 5 | 0) + 130 | 0) >>> 8) * 6 | 0) + (((i58 * 5 | 0) + 130 | 0) >>> 8) | 0) * 6 | 0) + (((i57 * 5 | 0) + 130 | 0) >>> 8) & 255, i17) | 0) | 0, i17) | 0)) {
    HEAP8[i4 >> 0] = 0;
    HEAP16[i4 + 2 >> 1] = i13;
    i17 = i14 & 65535;
    HEAP16[i4 + 4 >> 1] = i17;
    HEAP16[i4 + 8 >> 1] = i17;
    HEAP16[i4 + 6 >> 1] = i15;
    _png_set_background_fixed(i6, i4, 1, 0, 0);
    i28 = 3;
    i29 = 256;
    i30 = i18;
    i2 = 146;
    break L21;
   }
   i17 = (i8 | 0) == 2;
   i22 = 0;
   i41 = i18 + 1 | 0;
   while (1) {
    i23 = 0;
    i19 = i41;
    while (1) {
     i42 = 0;
     i43 = i19;
     while (1) {
      i44 = _decode_gamma(i1, i22, 1) | 0;
      i45 = ((_decode_gamma(i1, i13, i8) | 0) * 127 | 0) + (i44 << 7) | 0;
      if (i17) {
       i44 = i45 * 257 | 0;
       i60 = (i44 + 32768 + (i44 >>> 16) | 0) >>> 16;
      } else {
       i44 = i45 >>> 15;
       i60 = (((Math_imul(i45 & 32767, HEAPU8[58335 + i44 >> 0] | 0) | 0) >>> 12) + (HEAPU16[21850 + (i44 << 1) >> 1] | 0) | 0) >>> 8 & 255;
      }
      i44 = _decode_gamma(i1, i23, 1) | 0;
      i45 = ((_decode_gamma(i1, i14, i8) | 0) * 127 | 0) + (i44 << 7) | 0;
      if (i17) {
       i44 = i45 * 257 | 0;
       i61 = (i44 + 32768 + (i44 >>> 16) | 0) >>> 16;
      } else {
       i44 = i45 >>> 15;
       i61 = (((Math_imul(i45 & 32767, HEAPU8[58335 + i44 >> 0] | 0) | 0) >>> 12) + (HEAPU16[21850 + (i44 << 1) >> 1] | 0) | 0) >>> 8 & 255;
      }
      i44 = _decode_gamma(i1, i42, 1) | 0;
      i45 = ((_decode_gamma(i1, i15, i8) | 0) * 127 | 0) + (i44 << 7) | 0;
      if (i17) {
       i44 = i45 * 257 | 0;
       i62 = (i44 + 32768 + (i44 >>> 16) | 0) >>> 16;
      } else {
       i44 = i45 >>> 15;
       i62 = (((Math_imul(i45 & 32767, HEAPU8[58335 + i44 >> 0] | 0) | 0) >>> 12) + (HEAPU16[21850 + (i44 << 1) >> 1] | 0) | 0) >>> 8 & 255;
      }
      _png_create_colormap_entry(i1, i43, i60, i61, i62, 0, i8);
      i42 = i42 << 1 | 127;
      if (i42 >>> 0 >= 256) break; else i43 = i43 + 1 | 0;
     }
     i23 = i23 << 1 | 127;
     if (i23 >>> 0 >= 256) break; else i19 = i19 + 3 | 0;
    }
    i22 = i22 << 1 | 127;
    if (i22 >>> 0 >= 256) break; else i41 = i41 + 9 | 0;
   }
   i33 = 1;
   i34 = 4;
   i35 = i18;
   i36 = i18 + 28 | 0;
   i2 = 141;
   break;
  }
 case 3:
  {
   i41 = HEAP16[i6 + 428 >> 1] | 0;
   if (!(i41 << 16 >> 16)) i63 = 0; else i63 = HEAP32[i6 + 528 >> 2] | 0;
   i22 = HEAP32[i6 + 416 >> 2] | 0;
   i17 = (i63 | 0) == 0;
   i19 = (i7 & 1 | 0) == 0 & (i17 ^ 1);
   i23 = i17 ? 0 : i41 & 65535;
   i41 = HEAPU16[i6 + 420 >> 1] | 0;
   i17 = i41 >>> 0 < 256 ? i41 : 256;
   if (i17 >>> 0 > (HEAP32[i5 + 24 >> 2] | 0) >>> 0) _png_error(i6, 66248);
   if (i17 | 0) {
    i41 = (i8 | 0) == 2;
    i43 = 0;
    do {
     i42 = i43 >>> 0 < i23 >>> 0;
     L188 : do if (i19 & i42) {
      i44 = i63 + i43 | 0;
      i45 = HEAP8[i44 >> 0] | 0;
      i64 = i45 & 255;
      switch (i45 << 24 >> 24) {
      case -1:
       {
        i2 = 133;
        break L188;
        break;
       }
      case 0:
       {
        _png_create_colormap_entry(i1, i43, i13, i14, i15, 0, i8);
        break L188;
        break;
       }
      default:
       {}
      }
      i45 = _decode_gamma(i1, HEAPU8[i22 + (i43 * 3 | 0) >> 0] | 0, 3) | 0;
      i65 = (Math_imul(_decode_gamma(i1, i13, i8) | 0, i64 ^ 255) | 0) + (Math_imul(i45, i64) | 0) | 0;
      if (i41) {
       i64 = i65 * 257 | 0;
       i66 = (i64 + 32768 + (i64 >>> 16) | 0) >>> 16;
      } else {
       i64 = i65 >>> 15;
       i66 = (((Math_imul(i65 & 32767, HEAPU8[58335 + i64 >> 0] | 0) | 0) >>> 12) + (HEAPU16[21850 + (i64 << 1) >> 1] | 0) | 0) >>> 8 & 255;
      }
      i64 = HEAPU8[i44 >> 0] | 0;
      i65 = _decode_gamma(i1, HEAPU8[i22 + (i43 * 3 | 0) + 1 >> 0] | 0, 3) | 0;
      i45 = (Math_imul(_decode_gamma(i1, i14, i8) | 0, i64 ^ 255) | 0) + (Math_imul(i65, i64) | 0) | 0;
      if (i41) {
       i64 = i45 * 257 | 0;
       i67 = (i64 + 32768 + (i64 >>> 16) | 0) >>> 16;
      } else {
       i64 = i45 >>> 15;
       i67 = (((Math_imul(i45 & 32767, HEAPU8[58335 + i64 >> 0] | 0) | 0) >>> 12) + (HEAPU16[21850 + (i64 << 1) >> 1] | 0) | 0) >>> 8 & 255;
      }
      i64 = HEAPU8[i44 >> 0] | 0;
      i45 = _decode_gamma(i1, HEAPU8[i22 + (i43 * 3 | 0) + 2 >> 0] | 0, 3) | 0;
      i65 = (Math_imul(_decode_gamma(i1, i15, i8) | 0, i64 ^ 255) | 0) + (Math_imul(i45, i64) | 0) | 0;
      if (i41) {
       i64 = i65 * 257 | 0;
       i68 = (i64 + 32768 + (i64 >>> 16) | 0) >>> 16;
      } else {
       i64 = i65 >>> 15;
       i68 = (((Math_imul(i65 & 32767, HEAPU8[58335 + i64 >> 0] | 0) | 0) >>> 12) + (HEAPU16[21850 + (i64 << 1) >> 1] | 0) | 0) >>> 8 & 255;
      }
      i64 = HEAPU8[i44 >> 0] | 0;
      _png_create_colormap_entry(i1, i43, i66, i67, i68, i9 ? i64 * 257 | 0 : i64, i8);
     } else i2 = 133; while (0);
     if ((i2 | 0) == 133) {
      i2 = 0;
      if (i42) i69 = HEAPU8[i63 + i43 >> 0] | 0; else i69 = 255;
      i64 = i22 + (i43 * 3 | 0) | 0;
      _png_create_colormap_entry(i1, i43, HEAPU8[i64 >> 0] | 0, HEAPU8[i64 + 1 >> 0] | 0, HEAPU8[i64 + 2 >> 0] | 0, i69, 3);
     }
     i43 = i43 + 1 | 0;
    } while (i43 >>> 0 < i17 >>> 0);
   }
   if ((HEAPU8[i6 + 436 >> 0] | 0) < 8) {
    _png_set_packing(i6);
    i24 = 0;
    i25 = 256;
    i26 = i17;
   } else {
    i24 = 0;
    i25 = 256;
    i26 = i17;
   }
   break;
  }
 default:
  _png_error(i6, 66283);
 } while (0);
 if ((i2 | 0) == 141) if (!(HEAP16[i6 + 428 >> 1] | 0)) {
  i51 = i33;
  i52 = i34;
  i53 = i35;
  i54 = i36;
  i2 = 144;
 } else if (!(HEAP8[i11 >> 0] & 4)) {
  _png_set_tRNS_to_alpha(i6);
  i51 = i33;
  i52 = i34;
  i53 = i35;
  i54 = i36;
  i2 = 144;
 } else {
  i51 = i33;
  i52 = i34;
  i53 = i35;
  i54 = i36;
  i2 = 144;
 }
 L217 : do if ((i2 | 0) == 144) {
  switch (i51 | 0) {
  case 1:
   {
    i28 = i52;
    i29 = i53;
    i30 = i54;
    i2 = 146;
    break L217;
    break;
   }
  case 3:
   {
    i24 = i52;
    i25 = i53;
    i26 = i54;
    break L217;
    break;
   }
  default:
   {}
  }
  _png_error(i6, 66306);
 } while (0);
 if ((i2 | 0) == 146) {
  _png_set_alpha_mode_fixed(i6, 0, 22e4);
  i24 = i28;
  i25 = i29;
  i26 = i30;
 }
 if ((HEAPU8[i6 + 436 >> 0] | 0) > 8) _png_set_scale_16(i6);
 if (i26 >>> 0 > 256) _png_error(i6, 66339);
 i30 = i5 + 24 | 0;
 if (i26 >>> 0 > (HEAP32[i30 >> 2] | 0) >>> 0) _png_error(i6, 66339);
 HEAP32[i30 >> 2] = i26;
 switch (i24 | 0) {
 case 0:
  {
   if ((i25 | 0) == 256) {
    i70 = i1 + 40 | 0;
    HEAP32[i70 >> 2] = i24;
    STACKTOP = i3;
    return 1;
   } else _png_error(i6, 66418);
   break;
  }
 case 1:
  {
   if ((i25 | 0) == 231) {
    i70 = i1 + 40 | 0;
    HEAP32[i70 >> 2] = i24;
    STACKTOP = i3;
    return 1;
   } else _png_error(i6, 66418);
   break;
  }
 case 2:
  {
   if ((i25 | 0) != 254 | i25 >>> 0 >= i26 >>> 0) _png_error(i6, 66418); else {
    i70 = i1 + 40 | 0;
    HEAP32[i70 >> 2] = i24;
    STACKTOP = i3;
    return 1;
   }
   break;
  }
 case 3:
  {
   if ((i25 | 0) == 256) {
    i70 = i1 + 40 | 0;
    HEAP32[i70 >> 2] = i24;
    STACKTOP = i3;
    return 1;
   } else _png_error(i6, 66418);
   break;
  }
 case 4:
  {
   if ((i25 | 0) == 216) {
    i70 = i1 + 40 | 0;
    HEAP32[i70 >> 2] = i24;
    STACKTOP = i3;
    return 1;
   } else _png_error(i6, 66418);
   break;
  }
 default:
  _png_error(i6, 66379);
 }
 return 0;
}
function __ZN15CityMapRenderer13drawCliffSideEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEEcb(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, f17 = f0, f18 = f0, f19 = f0, f20 = f0, f21 = f0, f22 = f0, f23 = f0, f24 = f0, f25 = f0, f26 = f0, f27 = f0, f28 = f0, f29 = f0, f30 = f0, f31 = f0, f32 = f0, f33 = f0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 464 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(464);
 i6 = i5 + 400 | 0;
 i7 = i5 + 336 | 0;
 i8 = i5;
 i9 = i5 + 272 | 0;
 i10 = i5 + 208 | 0;
 i11 = i5 + 144 | 0;
 i12 = i5 + 80 | 0;
 i13 = i5 + 16 | 0;
 if (i4) {
  STACKTOP = i5;
  return;
 }
 i4 = i1 + 252 | 0;
 __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i4 >> 2] | 0) + 44 >> 2] | 0);
 __ZN11RenderQueue7setMeshEi(i1, 25);
 i14 = i7;
 i15 = i2;
 i16 = i14 + 48 | 0;
 do {
  HEAP32[i14 >> 2] = HEAP32[i15 >> 2];
  i14 = i14 + 4 | 0;
  i15 = i15 + 4 | 0;
 } while ((i14 | 0) < (i16 | 0));
 f17 = Math_fround(HEAPF32[i2 >> 2]);
 f18 = Math_fround(HEAPF32[i2 + 4 >> 2]);
 f19 = Math_fround(HEAPF32[i2 + 8 >> 2]);
 f20 = Math_fround(f17 * Math_fround(0.0));
 f17 = Math_fround(f18 * Math_fround(0.0));
 f18 = Math_fround(f19 * Math_fround(0.0));
 f19 = Math_fround(Math_fround(HEAPF32[i2 + 12 >> 2]) * Math_fround(0.0));
 f21 = Math_fround(HEAPF32[i2 + 16 >> 2]);
 f22 = Math_fround(HEAPF32[i2 + 20 >> 2]);
 f23 = Math_fround(HEAPF32[i2 + 24 >> 2]);
 f24 = Math_fround(f20 + Math_fround(f21 * Math_fround(0.0)));
 f21 = Math_fround(f17 + Math_fround(f22 * Math_fround(0.0)));
 f22 = Math_fround(f18 + Math_fround(f23 * Math_fround(0.0)));
 f23 = Math_fround(f19 + Math_fround(Math_fround(HEAPF32[i2 + 28 >> 2]) * Math_fround(0.0)));
 f19 = Math_fround(HEAPF32[i2 + 32 >> 2]);
 f18 = Math_fround(HEAPF32[i2 + 36 >> 2]);
 f17 = Math_fround(HEAPF32[i2 + 40 >> 2]);
 f20 = Math_fround(f24 - Math_fround(f19 * Math_fround(.00999999977)));
 f19 = Math_fround(f21 - Math_fround(f18 * Math_fround(.00999999977)));
 f18 = Math_fround(f22 - Math_fround(f17 * Math_fround(.00999999977)));
 f17 = Math_fround(f23 - Math_fround(Math_fround(HEAPF32[i2 + 44 >> 2]) * Math_fround(.00999999977)));
 f23 = Math_fround(HEAPF32[i2 + 48 >> 2]);
 f22 = Math_fround(HEAPF32[i2 + 52 >> 2]);
 f21 = Math_fround(HEAPF32[i2 + 56 >> 2]);
 f24 = Math_fround(f20 + f23);
 f23 = Math_fround(f19 + f22);
 f22 = Math_fround(f18 + f21);
 f21 = Math_fround(f17 + Math_fround(HEAPF32[i2 + 60 >> 2]));
 HEAPF32[i7 + 48 >> 2] = f24;
 HEAPF32[i7 + 52 >> 2] = f23;
 HEAPF32[i7 + 56 >> 2] = f22;
 HEAPF32[i7 + 60 >> 2] = f21;
 i14 = i6;
 i15 = i7;
 i16 = i14 + 64 | 0;
 do {
  HEAP32[i14 >> 2] = HEAP32[i15 >> 2];
  i14 = i14 + 4 | 0;
  i15 = i15 + 4 | 0;
 } while ((i14 | 0) < (i16 | 0));
 __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i6);
 switch (i3 << 24 >> 24) {
 case 1:
  {
   HEAPF32[i8 >> 2] = Math_fround(0.0);
   HEAPF32[i8 + 4 >> 2] = Math_fround(0.0);
   HEAPF32[i8 + 8 >> 2] = Math_fround(1.0);
   __ZN3glm6rotateIfLNS_9qualifierE0EEENS_3matILi4ELi4ET_XT0_EEERKS4_S3_RKNS_3vecILi3ES3_XT0_EEE(i6, i2, Math_fround(1.57079637), i8);
   f21 = Math_fround(HEAPF32[i6 >> 2]);
   f22 = Math_fround(HEAPF32[i6 + 4 >> 2]);
   f23 = Math_fround(HEAPF32[i6 + 8 >> 2]);
   f24 = Math_fround(HEAPF32[i6 + 12 >> 2]);
   f17 = Math_fround(HEAPF32[i6 + 16 >> 2]);
   f18 = Math_fround(HEAPF32[i6 + 20 >> 2]);
   f19 = Math_fround(HEAPF32[i6 + 24 >> 2]);
   f20 = Math_fround(HEAPF32[i6 + 28 >> 2]);
   f25 = Math_fround(HEAPF32[i6 + 32 >> 2]);
   f26 = Math_fround(HEAPF32[i6 + 36 >> 2]);
   f27 = Math_fround(HEAPF32[i6 + 40 >> 2]);
   f28 = Math_fround(HEAPF32[i6 + 44 >> 2]);
   f29 = Math_fround(HEAPF32[i6 + 48 >> 2]);
   f30 = Math_fround(HEAPF32[i6 + 52 >> 2]);
   f31 = Math_fround(Math_fround(Math_fround(Math_fround(f21 * Math_fround(.5)) + Math_fround(f17 * Math_fround(.5))) + Math_fround(f25 * Math_fround(0.0))) + f29);
   f29 = Math_fround(Math_fround(Math_fround(Math_fround(f22 * Math_fround(.5)) + Math_fround(f18 * Math_fround(.5))) + Math_fround(f26 * Math_fround(0.0))) + f30);
   f30 = Math_fround(Math_fround(HEAPF32[i6 + 56 >> 2]) + Math_fround(Math_fround(Math_fround(f23 * Math_fround(.5)) + Math_fround(f19 * Math_fround(.5))) + Math_fround(f27 * Math_fround(0.0))));
   f32 = Math_fround(Math_fround(Math_fround(Math_fround(f24 * Math_fround(.5)) + Math_fround(f20 * Math_fround(.5))) + Math_fround(f28 * Math_fround(0.0))) + Math_fround(HEAPF32[i6 + 60 >> 2]));
   f33 = Math_fround(f21 * Math_fround(.333000004));
   f21 = Math_fround(f22 * Math_fround(.333000004));
   f22 = Math_fround(f23 * Math_fround(.333000004));
   f23 = Math_fround(f24 * Math_fround(.333000004));
   f24 = Math_fround(f17 * Math_fround(.333000004));
   f17 = Math_fround(f18 * Math_fround(.333000004));
   f18 = Math_fround(f19 * Math_fround(.333000004));
   f19 = Math_fround(f20 * Math_fround(.333000004));
   f20 = Math_fround(f25 * Math_fround(.333000004));
   f25 = Math_fround(f26 * Math_fround(.333000004));
   f26 = Math_fround(f27 * Math_fround(.333000004));
   f27 = Math_fround(f28 * Math_fround(.333000004));
   __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i4 >> 2] | 0) + 40 >> 2] | 0);
   __ZN11RenderQueue7setMeshEi(i1, 23);
   HEAPF32[i9 >> 2] = f33;
   HEAPF32[i9 + 4 >> 2] = f21;
   HEAPF32[i9 + 8 >> 2] = f22;
   HEAPF32[i9 + 12 >> 2] = f23;
   HEAPF32[i9 + 16 >> 2] = f24;
   HEAPF32[i9 + 20 >> 2] = f17;
   HEAPF32[i9 + 24 >> 2] = f18;
   HEAPF32[i9 + 28 >> 2] = f19;
   HEAPF32[i9 + 32 >> 2] = f20;
   HEAPF32[i9 + 36 >> 2] = f25;
   HEAPF32[i9 + 40 >> 2] = f26;
   HEAPF32[i9 + 44 >> 2] = f27;
   HEAPF32[i9 + 48 >> 2] = f31;
   HEAPF32[i9 + 52 >> 2] = f29;
   HEAPF32[i9 + 56 >> 2] = f30;
   HEAPF32[i9 + 60 >> 2] = f32;
   i14 = i6;
   i15 = i9;
   i16 = i14 + 64 | 0;
   do {
    HEAP32[i14 >> 2] = HEAP32[i15 >> 2];
    i14 = i14 + 4 | 0;
    i15 = i15 + 4 | 0;
   } while ((i14 | 0) < (i16 | 0));
   __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i6);
   STACKTOP = i5;
   return;
  }
 case 2:
  {
   HEAPF32[i8 >> 2] = Math_fround(0.0);
   HEAPF32[i8 + 4 >> 2] = Math_fround(0.0);
   HEAPF32[i8 + 8 >> 2] = Math_fround(1.0);
   __ZN3glm6rotateIfLNS_9qualifierE0EEENS_3matILi4ELi4ET_XT0_EEERKS4_S3_RKNS_3vecILi3ES3_XT0_EEE(i6, i2, Math_fround(1.57079637), i8);
   f32 = Math_fround(HEAPF32[i6 >> 2]);
   f30 = Math_fround(HEAPF32[i6 + 4 >> 2]);
   f29 = Math_fround(HEAPF32[i6 + 8 >> 2]);
   f31 = Math_fround(HEAPF32[i6 + 12 >> 2]);
   f27 = Math_fround(HEAPF32[i6 + 16 >> 2]);
   f26 = Math_fround(HEAPF32[i6 + 20 >> 2]);
   f25 = Math_fround(HEAPF32[i6 + 24 >> 2]);
   f20 = Math_fround(HEAPF32[i6 + 28 >> 2]);
   f19 = Math_fround(HEAPF32[i6 + 32 >> 2]);
   f18 = Math_fround(HEAPF32[i6 + 36 >> 2]);
   f17 = Math_fround(HEAPF32[i6 + 40 >> 2]);
   f24 = Math_fround(HEAPF32[i6 + 44 >> 2]);
   f23 = Math_fround(HEAPF32[i6 + 48 >> 2]);
   f22 = Math_fround(HEAPF32[i6 + 52 >> 2]);
   f21 = Math_fround(Math_fround(Math_fround(Math_fround(f32 * Math_fround(.5)) + Math_fround(f27 * Math_fround(0.0))) + Math_fround(f19 * Math_fround(0.0))) + f23);
   f23 = Math_fround(Math_fround(Math_fround(Math_fround(f30 * Math_fround(.5)) + Math_fround(f26 * Math_fround(0.0))) + Math_fround(f18 * Math_fround(0.0))) + f22);
   f22 = Math_fround(Math_fround(HEAPF32[i6 + 56 >> 2]) + Math_fround(Math_fround(Math_fround(f29 * Math_fround(.5)) + Math_fround(f25 * Math_fround(0.0))) + Math_fround(f17 * Math_fround(0.0))));
   f33 = Math_fround(Math_fround(Math_fround(Math_fround(f31 * Math_fround(.5)) + Math_fround(f20 * Math_fround(0.0))) + Math_fround(f24 * Math_fround(0.0))) + Math_fround(HEAPF32[i6 + 60 >> 2]));
   f28 = Math_fround(f32 * Math_fround(.333000004));
   f32 = Math_fround(f30 * Math_fround(.333000004));
   f30 = Math_fround(f29 * Math_fround(.333000004));
   f29 = Math_fround(f31 * Math_fround(.333000004));
   f31 = Math_fround(f27 * Math_fround(.333000004));
   f27 = Math_fround(f26 * Math_fround(.333000004));
   f26 = Math_fround(f25 * Math_fround(.333000004));
   f25 = Math_fround(f20 * Math_fround(.333000004));
   f20 = Math_fround(f19 * Math_fround(.333000004));
   f19 = Math_fround(f18 * Math_fround(.333000004));
   f18 = Math_fround(f17 * Math_fround(.333000004));
   f17 = Math_fround(f24 * Math_fround(.333000004));
   __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i4 >> 2] | 0) + 40 >> 2] | 0);
   __ZN11RenderQueue7setMeshEi(i1, 22);
   HEAPF32[i10 >> 2] = f28;
   HEAPF32[i10 + 4 >> 2] = f32;
   HEAPF32[i10 + 8 >> 2] = f30;
   HEAPF32[i10 + 12 >> 2] = f29;
   HEAPF32[i10 + 16 >> 2] = f31;
   HEAPF32[i10 + 20 >> 2] = f27;
   HEAPF32[i10 + 24 >> 2] = f26;
   HEAPF32[i10 + 28 >> 2] = f25;
   HEAPF32[i10 + 32 >> 2] = f20;
   HEAPF32[i10 + 36 >> 2] = f19;
   HEAPF32[i10 + 40 >> 2] = f18;
   HEAPF32[i10 + 44 >> 2] = f17;
   HEAPF32[i10 + 48 >> 2] = f21;
   HEAPF32[i10 + 52 >> 2] = f23;
   HEAPF32[i10 + 56 >> 2] = f22;
   HEAPF32[i10 + 60 >> 2] = f33;
   i14 = i6;
   i15 = i10;
   i16 = i14 + 64 | 0;
   do {
    HEAP32[i14 >> 2] = HEAP32[i15 >> 2];
    i14 = i14 + 4 | 0;
    i15 = i15 + 4 | 0;
   } while ((i14 | 0) < (i16 | 0));
   __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i6);
   STACKTOP = i5;
   return;
  }
 case 3:
  {
   HEAPF32[i8 >> 2] = Math_fround(0.0);
   HEAPF32[i8 + 4 >> 2] = Math_fround(0.0);
   HEAPF32[i8 + 8 >> 2] = Math_fround(1.0);
   __ZN3glm6rotateIfLNS_9qualifierE0EEENS_3matILi4ELi4ET_XT0_EEERKS4_S3_RKNS_3vecILi3ES3_XT0_EEE(i6, i2, Math_fround(3.14159274), i8);
   f33 = Math_fround(HEAPF32[i6 >> 2]);
   f22 = Math_fround(HEAPF32[i6 + 4 >> 2]);
   f23 = Math_fround(HEAPF32[i6 + 8 >> 2]);
   f21 = Math_fround(HEAPF32[i6 + 12 >> 2]);
   f17 = Math_fround(HEAPF32[i6 + 16 >> 2]);
   f18 = Math_fround(HEAPF32[i6 + 20 >> 2]);
   f19 = Math_fround(HEAPF32[i6 + 24 >> 2]);
   f20 = Math_fround(HEAPF32[i6 + 28 >> 2]);
   f25 = Math_fround(HEAPF32[i6 + 32 >> 2]);
   f26 = Math_fround(HEAPF32[i6 + 36 >> 2]);
   f27 = Math_fround(HEAPF32[i6 + 40 >> 2]);
   f31 = Math_fround(HEAPF32[i6 + 44 >> 2]);
   f29 = Math_fround(HEAPF32[i6 + 48 >> 2]);
   f30 = Math_fround(HEAPF32[i6 + 52 >> 2]);
   f32 = Math_fround(Math_fround(Math_fround(Math_fround(f33 * Math_fround(.5)) + Math_fround(f17 * Math_fround(0.0))) + Math_fround(f25 * Math_fround(0.0))) + f29);
   f29 = Math_fround(Math_fround(Math_fround(Math_fround(f22 * Math_fround(.5)) + Math_fround(f18 * Math_fround(0.0))) + Math_fround(f26 * Math_fround(0.0))) + f30);
   f30 = Math_fround(Math_fround(HEAPF32[i6 + 56 >> 2]) + Math_fround(Math_fround(Math_fround(f23 * Math_fround(.5)) + Math_fround(f19 * Math_fround(0.0))) + Math_fround(f27 * Math_fround(0.0))));
   f28 = Math_fround(Math_fround(Math_fround(Math_fround(f21 * Math_fround(.5)) + Math_fround(f20 * Math_fround(0.0))) + Math_fround(f31 * Math_fround(0.0))) + Math_fround(HEAPF32[i6 + 60 >> 2]));
   f24 = Math_fround(f33 * Math_fround(.333000004));
   f33 = Math_fround(f22 * Math_fround(.333000004));
   f22 = Math_fround(f23 * Math_fround(.333000004));
   f23 = Math_fround(f21 * Math_fround(.333000004));
   f21 = Math_fround(f17 * Math_fround(.333000004));
   f17 = Math_fround(f18 * Math_fround(.333000004));
   f18 = Math_fround(f19 * Math_fround(.333000004));
   f19 = Math_fround(f20 * Math_fround(.333000004));
   f20 = Math_fround(f25 * Math_fround(.333000004));
   f25 = Math_fround(f26 * Math_fround(.333000004));
   f26 = Math_fround(f27 * Math_fround(.333000004));
   f27 = Math_fround(f31 * Math_fround(.333000004));
   __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i4 >> 2] | 0) + 40 >> 2] | 0);
   __ZN11RenderQueue7setMeshEi(i1, 22);
   HEAPF32[i11 >> 2] = f24;
   HEAPF32[i11 + 4 >> 2] = f33;
   HEAPF32[i11 + 8 >> 2] = f22;
   HEAPF32[i11 + 12 >> 2] = f23;
   HEAPF32[i11 + 16 >> 2] = f21;
   HEAPF32[i11 + 20 >> 2] = f17;
   HEAPF32[i11 + 24 >> 2] = f18;
   HEAPF32[i11 + 28 >> 2] = f19;
   HEAPF32[i11 + 32 >> 2] = f20;
   HEAPF32[i11 + 36 >> 2] = f25;
   HEAPF32[i11 + 40 >> 2] = f26;
   HEAPF32[i11 + 44 >> 2] = f27;
   HEAPF32[i11 + 48 >> 2] = f32;
   HEAPF32[i11 + 52 >> 2] = f29;
   HEAPF32[i11 + 56 >> 2] = f30;
   HEAPF32[i11 + 60 >> 2] = f28;
   i14 = i6;
   i15 = i11;
   i16 = i14 + 64 | 0;
   do {
    HEAP32[i14 >> 2] = HEAP32[i15 >> 2];
    i14 = i14 + 4 | 0;
    i15 = i15 + 4 | 0;
   } while ((i14 | 0) < (i16 | 0));
   __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i6);
   STACKTOP = i5;
   return;
  }
 case 4:
  {
   HEAPF32[i8 >> 2] = Math_fround(0.0);
   HEAPF32[i8 + 4 >> 2] = Math_fround(0.0);
   HEAPF32[i8 + 8 >> 2] = Math_fround(1.0);
   __ZN3glm6rotateIfLNS_9qualifierE0EEENS_3matILi4ELi4ET_XT0_EEERKS4_S3_RKNS_3vecILi3ES3_XT0_EEE(i6, i2, Math_fround(3.14159274), i8);
   f28 = Math_fround(HEAPF32[i6 >> 2]);
   f30 = Math_fround(HEAPF32[i6 + 4 >> 2]);
   f29 = Math_fround(HEAPF32[i6 + 8 >> 2]);
   f32 = Math_fround(HEAPF32[i6 + 12 >> 2]);
   f27 = Math_fround(HEAPF32[i6 + 16 >> 2]);
   f26 = Math_fround(HEAPF32[i6 + 20 >> 2]);
   f25 = Math_fround(HEAPF32[i6 + 24 >> 2]);
   f20 = Math_fround(HEAPF32[i6 + 28 >> 2]);
   f19 = Math_fround(HEAPF32[i6 + 32 >> 2]);
   f18 = Math_fround(HEAPF32[i6 + 36 >> 2]);
   f17 = Math_fround(HEAPF32[i6 + 40 >> 2]);
   f21 = Math_fround(HEAPF32[i6 + 44 >> 2]);
   f23 = Math_fround(HEAPF32[i6 + 48 >> 2]);
   f22 = Math_fround(HEAPF32[i6 + 52 >> 2]);
   f33 = Math_fround(Math_fround(Math_fround(Math_fround(f28 * Math_fround(.5)) + Math_fround(f27 * Math_fround(0.0))) + Math_fround(f19 * Math_fround(0.0))) + f23);
   f23 = Math_fround(Math_fround(Math_fround(Math_fround(f30 * Math_fround(.5)) + Math_fround(f26 * Math_fround(0.0))) + Math_fround(f18 * Math_fround(0.0))) + f22);
   f22 = Math_fround(Math_fround(HEAPF32[i6 + 56 >> 2]) + Math_fround(Math_fround(Math_fround(f29 * Math_fround(.5)) + Math_fround(f25 * Math_fround(0.0))) + Math_fround(f17 * Math_fround(0.0))));
   f24 = Math_fround(Math_fround(Math_fround(Math_fround(f32 * Math_fround(.5)) + Math_fround(f20 * Math_fround(0.0))) + Math_fround(f21 * Math_fround(0.0))) + Math_fround(HEAPF32[i6 + 60 >> 2]));
   f31 = Math_fround(f28 * Math_fround(.333000004));
   f28 = Math_fround(f30 * Math_fround(.333000004));
   f30 = Math_fround(f29 * Math_fround(.333000004));
   f29 = Math_fround(f32 * Math_fround(.333000004));
   f32 = Math_fround(f27 * Math_fround(.333000004));
   f27 = Math_fround(f26 * Math_fround(.333000004));
   f26 = Math_fround(f25 * Math_fround(.333000004));
   f25 = Math_fround(f20 * Math_fround(.333000004));
   f20 = Math_fround(f19 * Math_fround(.333000004));
   f19 = Math_fround(f18 * Math_fround(.333000004));
   f18 = Math_fround(f17 * Math_fround(.333000004));
   f17 = Math_fround(f21 * Math_fround(.333000004));
   __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i4 >> 2] | 0) + 40 >> 2] | 0);
   __ZN11RenderQueue7setMeshEi(i1, 22);
   HEAPF32[i12 >> 2] = f31;
   HEAPF32[i12 + 4 >> 2] = f28;
   HEAPF32[i12 + 8 >> 2] = f30;
   HEAPF32[i12 + 12 >> 2] = f29;
   HEAPF32[i12 + 16 >> 2] = f32;
   HEAPF32[i12 + 20 >> 2] = f27;
   HEAPF32[i12 + 24 >> 2] = f26;
   HEAPF32[i12 + 28 >> 2] = f25;
   HEAPF32[i12 + 32 >> 2] = f20;
   HEAPF32[i12 + 36 >> 2] = f19;
   HEAPF32[i12 + 40 >> 2] = f18;
   HEAPF32[i12 + 44 >> 2] = f17;
   HEAPF32[i12 + 48 >> 2] = f33;
   HEAPF32[i12 + 52 >> 2] = f23;
   HEAPF32[i12 + 56 >> 2] = f22;
   HEAPF32[i12 + 60 >> 2] = f24;
   i14 = i6;
   i15 = i12;
   i16 = i14 + 64 | 0;
   do {
    HEAP32[i14 >> 2] = HEAP32[i15 >> 2];
    i14 = i14 + 4 | 0;
    i15 = i15 + 4 | 0;
   } while ((i14 | 0) < (i16 | 0));
   __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i6);
   HEAPF32[i8 >> 2] = Math_fround(0.0);
   HEAPF32[i8 + 4 >> 2] = Math_fround(0.0);
   HEAPF32[i8 + 8 >> 2] = Math_fround(1.0);
   __ZN3glm6rotateIfLNS_9qualifierE0EEENS_3matILi4ELi4ET_XT0_EEERKS4_S3_RKNS_3vecILi3ES3_XT0_EEE(i6, i2, Math_fround(1.57079637), i8);
   f24 = Math_fround(HEAPF32[i6 >> 2]);
   f22 = Math_fround(HEAPF32[i6 + 4 >> 2]);
   f23 = Math_fround(HEAPF32[i6 + 8 >> 2]);
   f33 = Math_fround(HEAPF32[i6 + 12 >> 2]);
   f17 = Math_fround(HEAPF32[i6 + 16 >> 2]);
   f18 = Math_fround(HEAPF32[i6 + 20 >> 2]);
   f19 = Math_fround(HEAPF32[i6 + 24 >> 2]);
   f20 = Math_fround(HEAPF32[i6 + 28 >> 2]);
   f25 = Math_fround(HEAPF32[i6 + 32 >> 2]);
   f26 = Math_fround(HEAPF32[i6 + 36 >> 2]);
   f27 = Math_fround(HEAPF32[i6 + 40 >> 2]);
   f32 = Math_fround(HEAPF32[i6 + 44 >> 2]);
   f29 = Math_fround(HEAPF32[i6 + 48 >> 2]);
   f30 = Math_fround(HEAPF32[i6 + 52 >> 2]);
   f28 = Math_fround(Math_fround(Math_fround(Math_fround(f24 * Math_fround(.5)) + Math_fround(f17 * Math_fround(0.0))) + Math_fround(f25 * Math_fround(0.0))) + f29);
   f29 = Math_fround(Math_fround(Math_fround(Math_fround(f22 * Math_fround(.5)) + Math_fround(f18 * Math_fround(0.0))) + Math_fround(f26 * Math_fround(0.0))) + f30);
   f30 = Math_fround(Math_fround(HEAPF32[i6 + 56 >> 2]) + Math_fround(Math_fround(Math_fround(f23 * Math_fround(.5)) + Math_fround(f19 * Math_fround(0.0))) + Math_fround(f27 * Math_fround(0.0))));
   f31 = Math_fround(Math_fround(Math_fround(Math_fround(f33 * Math_fround(.5)) + Math_fround(f20 * Math_fround(0.0))) + Math_fround(f32 * Math_fround(0.0))) + Math_fround(HEAPF32[i6 + 60 >> 2]));
   f21 = Math_fround(f24 * Math_fround(.333000004));
   f24 = Math_fround(f22 * Math_fround(.333000004));
   f22 = Math_fround(f23 * Math_fround(.333000004));
   f23 = Math_fround(f33 * Math_fround(.333000004));
   f33 = Math_fround(f17 * Math_fround(.333000004));
   f17 = Math_fround(f18 * Math_fround(.333000004));
   f18 = Math_fround(f19 * Math_fround(.333000004));
   f19 = Math_fround(f20 * Math_fround(.333000004));
   f20 = Math_fround(f25 * Math_fround(.333000004));
   f25 = Math_fround(f26 * Math_fround(.333000004));
   f26 = Math_fround(f27 * Math_fround(.333000004));
   f27 = Math_fround(f32 * Math_fround(.333000004));
   __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i4 >> 2] | 0) + 40 >> 2] | 0);
   __ZN11RenderQueue7setMeshEi(i1, 22);
   HEAPF32[i13 >> 2] = f21;
   HEAPF32[i13 + 4 >> 2] = f24;
   HEAPF32[i13 + 8 >> 2] = f22;
   HEAPF32[i13 + 12 >> 2] = f23;
   HEAPF32[i13 + 16 >> 2] = f33;
   HEAPF32[i13 + 20 >> 2] = f17;
   HEAPF32[i13 + 24 >> 2] = f18;
   HEAPF32[i13 + 28 >> 2] = f19;
   HEAPF32[i13 + 32 >> 2] = f20;
   HEAPF32[i13 + 36 >> 2] = f25;
   HEAPF32[i13 + 40 >> 2] = f26;
   HEAPF32[i13 + 44 >> 2] = f27;
   HEAPF32[i13 + 48 >> 2] = f28;
   HEAPF32[i13 + 52 >> 2] = f29;
   HEAPF32[i13 + 56 >> 2] = f30;
   HEAPF32[i13 + 60 >> 2] = f31;
   i14 = i6;
   i15 = i13;
   i16 = i14 + 64 | 0;
   do {
    HEAP32[i14 >> 2] = HEAP32[i15 >> 2];
    i14 = i14 + 4 | 0;
    i15 = i15 + 4 | 0;
   } while ((i14 | 0) < (i16 | 0));
   __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i6);
   STACKTOP = i5;
   return;
  }
 default:
  {
   STACKTOP = i5;
   return;
  }
 }
}

function _vfscanf(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, i90 = 0, i91 = 0, i92 = 0, i93 = 0, i94 = 0, d95 = 0.0, f96 = f0, i97 = 0, i98 = 0, i99 = 0, i100 = 0, i101 = 0, i102 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(288);
 i6 = i5 + 8 | 0;
 i7 = i5 + 17 | 0;
 i8 = i5;
 i9 = i5 + 16 | 0;
 if ((HEAP32[i1 + 76 >> 2] | 0) > -1) i10 = ___lockfile(i1) | 0; else i10 = 0;
 i11 = HEAP8[i2 >> 0] | 0;
 L4 : do if (!(i11 << 24 >> 24)) i12 = 0; else {
  i13 = i1 + 4 | 0;
  i14 = i1 + 100 | 0;
  i15 = i1 + 108 | 0;
  i16 = i1 + 8 | 0;
  i17 = i7 + 10 | 0;
  i18 = i7 + 33 | 0;
  i19 = i6 + 4 | 0;
  i20 = i2;
  i21 = 0;
  i22 = 0;
  i23 = 0;
  i24 = i11;
  i25 = 0;
  L6 : while (1) {
   L8 : do if (!(_isspace(i24 & 255) | 0)) {
    i26 = (HEAP8[i20 >> 0] | 0) == 37;
    L10 : do if (i26) {
     i27 = i20 + 1 | 0;
     i28 = HEAP8[i27 >> 0] | 0;
     L12 : do switch (i28 << 24 >> 24) {
     case 37:
      {
       break L10;
       break;
      }
     case 42:
      {
       i29 = 0;
       i30 = i20 + 2 | 0;
       break;
      }
     default:
      {
       if (_isdigit(i28 & 255) | 0) if ((HEAP8[i20 + 2 >> 0] | 0) == 36) {
        i29 = _arg_n(i3, (HEAPU8[i27 >> 0] | 0) + -48 | 0) | 0;
        i30 = i20 + 3 | 0;
        break L12;
       }
       i31 = (HEAP32[i3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
       i32 = HEAP32[i31 >> 2] | 0;
       HEAP32[i3 >> 2] = i31 + 4;
       i29 = i32;
       i30 = i27;
      }
     } while (0);
     if (!(_isdigit(HEAPU8[i30 >> 0] | 0) | 0)) {
      i33 = 0;
      i34 = i30;
     } else {
      i27 = 0;
      i28 = i30;
      while (1) {
       i32 = (i27 * 10 | 0) + -48 + (HEAPU8[i28 >> 0] | 0) | 0;
       i31 = i28 + 1 | 0;
       if (!(_isdigit(HEAPU8[i31 >> 0] | 0) | 0)) {
        i33 = i32;
        i34 = i31;
        break;
       } else {
        i27 = i32;
        i28 = i31;
       }
      }
     }
     i28 = HEAP8[i34 >> 0] | 0;
     i27 = i34 + 1 | 0;
     if (i28 << 24 >> 24 == 109) {
      i35 = (i29 | 0) != 0 & 1;
      i36 = 0;
      i37 = i27;
      i38 = HEAP8[i27 >> 0] | 0;
      i39 = 0;
     } else {
      i35 = 0;
      i36 = i23;
      i37 = i34;
      i38 = i28;
      i39 = i25;
     }
     i28 = i37 + 1 | 0;
     switch (i38 << 24 >> 24) {
     case 104:
      {
       i27 = (HEAP8[i28 >> 0] | 0) == 104;
       i40 = i27 ? -2 : -1;
       i41 = i27 ? i37 + 2 | 0 : i28;
       break;
      }
     case 108:
      {
       i27 = (HEAP8[i28 >> 0] | 0) == 108;
       i40 = i27 ? 3 : 1;
       i41 = i27 ? i37 + 2 | 0 : i28;
       break;
      }
     case 106:
      {
       i40 = 3;
       i41 = i28;
       break;
      }
     case 116:
     case 122:
      {
       i40 = 1;
       i41 = i28;
       break;
      }
     case 76:
      {
       i40 = 2;
       i41 = i28;
       break;
      }
     case 110:
     case 112:
     case 67:
     case 83:
     case 91:
     case 99:
     case 115:
     case 88:
     case 71:
     case 70:
     case 69:
     case 65:
     case 103:
     case 102:
     case 101:
     case 97:
     case 120:
     case 117:
     case 111:
     case 105:
     case 100:
      {
       i40 = 0;
       i41 = i37;
       break;
      }
     default:
      {
       i42 = i36;
       i43 = i39;
       i4 = 136;
       break L6;
      }
     }
     i28 = HEAPU8[i41 >> 0] | 0;
     i27 = (i28 & 47 | 0) == 3;
     i31 = i27 ? i28 | 32 : i28;
     i28 = i27 ? 1 : i40;
     i27 = i31 & 255;
     switch (i27 << 24 >> 24) {
     case 99:
      {
       i44 = (i33 | 0) > 1 ? i33 : 1;
       i45 = i21;
       break;
      }
     case 91:
      {
       i44 = i33;
       i45 = i21;
       break;
      }
     case 110:
      {
       _store_int(i29, i28, i21, ((i21 | 0) < 0) << 31 >> 31);
       i46 = i41;
       i47 = i22;
       i48 = i21;
       i49 = i36;
       i50 = i39;
       break L8;
       break;
      }
     default:
      {
       ___shlim(i1, 0);
       do {
        i32 = HEAP32[i13 >> 2] | 0;
        if (i32 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
         HEAP32[i13 >> 2] = i32 + 1;
         i51 = HEAPU8[i32 >> 0] | 0;
        } else i51 = ___shgetc(i1) | 0;
       } while ((_isspace(i51) | 0) != 0);
       if (!(HEAP32[i14 >> 2] | 0)) i52 = HEAP32[i13 >> 2] | 0; else {
        i32 = (HEAP32[i13 >> 2] | 0) + -1 | 0;
        HEAP32[i13 >> 2] = i32;
        i52 = i32;
       }
       i44 = i33;
       i45 = (HEAP32[i15 >> 2] | 0) + i21 + i52 - (HEAP32[i16 >> 2] | 0) | 0;
      }
     }
     ___shlim(i1, i44);
     i32 = HEAP32[i13 >> 2] | 0;
     i53 = HEAP32[i14 >> 2] | 0;
     if (i32 >>> 0 < i53 >>> 0) {
      HEAP32[i13 >> 2] = i32 + 1;
      i54 = i53;
     } else {
      if ((___shgetc(i1) | 0) < 0) {
       i42 = i36;
       i43 = i39;
       i4 = 136;
       break L6;
      }
      i54 = HEAP32[i14 >> 2] | 0;
     }
     if (i54 | 0) HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + -1;
     L58 : do switch (i27 << 24 >> 24) {
     case 91:
     case 99:
     case 115:
      {
       i53 = (i31 | 0) == 99;
       L60 : do if ((i31 | 16 | 0) == 115) {
        _memset(i7 | 0, -1, 257) | 0;
        HEAP8[i7 >> 0] = 0;
        if ((i31 | 0) == 115) {
         HEAP8[i18 >> 0] = 0;
         HEAP8[i17 >> 0] = 0;
         HEAP8[i17 + 1 >> 0] = 0;
         HEAP8[i17 + 2 >> 0] = 0;
         HEAP8[i17 + 3 >> 0] = 0;
         HEAP8[i17 + 4 >> 0] = 0;
         i55 = i41;
        } else i55 = i41;
       } else {
        i32 = i41 + 1 | 0;
        i56 = (HEAP8[i32 >> 0] | 0) == 94;
        i57 = i56 & 1;
        i58 = i56 ? i41 + 2 | 0 : i32;
        _memset(i7 | 0, i57 | 0, 257) | 0;
        HEAP8[i7 >> 0] = 0;
        i32 = HEAP8[i58 >> 0] | 0;
        switch (i32 << 24 >> 24) {
        case 45:
         {
          i59 = i58;
          i60 = 46;
          i4 = 65;
          break;
         }
        case 93:
         {
          i59 = i58;
          i60 = 94;
          i4 = 65;
          break;
         }
        default:
         {
          i61 = i58;
          i62 = i32;
         }
        }
        while (1) {
         if ((i4 | 0) == 65) {
          i4 = 0;
          HEAP8[i7 + i60 >> 0] = i57 ^ 1;
          i32 = i59 + 1 | 0;
          i61 = i32;
          i62 = HEAP8[i32 >> 0] | 0;
         }
         L70 : do switch (i62 << 24 >> 24) {
         case 0:
          {
           i42 = i36;
           i43 = i39;
           i4 = 136;
           break L6;
           break;
          }
         case 93:
          {
           i55 = i61;
           break L60;
           break;
          }
         case 45:
          {
           i32 = i61 + 1 | 0;
           i58 = HEAP8[i32 >> 0] | 0;
           switch (i58 << 24 >> 24) {
           case 93:
           case 0:
            {
             i63 = i61;
             i64 = 45;
             break L70;
             break;
            }
           default:
            {}
           }
           i56 = HEAP8[i61 + -1 >> 0] | 0;
           if ((i56 & 255) < (i58 & 255)) {
            i65 = (i57 ^ 1) & 255;
            i66 = i56 & 255;
            do {
             i66 = i66 + 1 | 0;
             HEAP8[i7 + i66 >> 0] = i65;
             i56 = HEAP8[i32 >> 0] | 0;
            } while ((i66 | 0) < (i56 & 255 | 0));
            i63 = i32;
            i64 = i56;
           } else {
            i63 = i32;
            i64 = i58;
           }
           break;
          }
         default:
          {
           i63 = i61;
           i64 = i62;
          }
         } while (0);
         i59 = i63;
         i60 = (i64 & 255) + 1 | 0;
         i4 = 65;
        }
       } while (0);
       i57 = i53 ? i44 + 1 | 0 : 31;
       i66 = (i28 | 0) == 1;
       i65 = (i35 | 0) != 0;
       L78 : do if (i66) {
        if (i65) {
         i56 = _malloc(i57 << 2) | 0;
         if (!i56) {
          i42 = 0;
          i43 = 0;
          i4 = 136;
          break L6;
         } else i67 = i56;
        } else i67 = i29;
        HEAP32[i6 >> 2] = 0;
        HEAP32[i19 >> 2] = 0;
        i56 = i57;
        i68 = 0;
        i69 = i67;
        L83 : while (1) {
         i70 = (i69 | 0) == 0;
         i71 = i68;
         while (1) {
          L87 : while (1) {
           i72 = HEAP32[i13 >> 2] | 0;
           if (i72 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
            HEAP32[i13 >> 2] = i72 + 1;
            i73 = HEAPU8[i72 >> 0] | 0;
           } else i73 = ___shgetc(i1) | 0;
           if (!(HEAP8[i7 + (i73 + 1) >> 0] | 0)) break L83;
           HEAP8[i9 >> 0] = i73;
           switch (_mbrtowc(i8, i9, 1, i6) | 0) {
           case -1:
            {
             i42 = 0;
             i43 = i69;
             i4 = 136;
             break L6;
             break;
            }
           case -2:
            break;
           default:
            break L87;
           }
          }
          if (i70) i74 = i71; else {
           HEAP32[i69 + (i71 << 2) >> 2] = HEAP32[i8 >> 2];
           i74 = i71 + 1 | 0;
          }
          if (i65 & (i74 | 0) == (i56 | 0)) break; else i71 = i74;
         }
         i70 = i56 << 1 | 1;
         i58 = _realloc(i69, i70 << 2) | 0;
         if (!i58) {
          i42 = 0;
          i43 = i69;
          i4 = 136;
          break L6;
         } else {
          i32 = i56;
          i56 = i70;
          i69 = i58;
          i68 = i32;
         }
        }
        if (!(_mbsinit(i6) | 0)) {
         i42 = 0;
         i43 = i69;
         i4 = 136;
         break L6;
        } else {
         i75 = i71;
         i76 = 0;
         i77 = i69;
         i78 = i69;
        }
       } else {
        if (i65) {
         i68 = _malloc(i57) | 0;
         if (!i68) {
          i42 = 0;
          i43 = 0;
          i4 = 136;
          break L6;
         } else {
          i79 = i57;
          i80 = 0;
          i81 = i68;
         }
         while (1) {
          i68 = i80;
          do {
           i56 = HEAP32[i13 >> 2] | 0;
           if (i56 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
            HEAP32[i13 >> 2] = i56 + 1;
            i82 = HEAPU8[i56 >> 0] | 0;
           } else i82 = ___shgetc(i1) | 0;
           if (!(HEAP8[i7 + (i82 + 1) >> 0] | 0)) {
            i75 = i68;
            i76 = i81;
            i77 = 0;
            i78 = 0;
            break L78;
           }
           HEAP8[i81 + i68 >> 0] = i82;
           i68 = i68 + 1 | 0;
          } while ((i68 | 0) != (i79 | 0));
          i68 = i79 << 1 | 1;
          i56 = _realloc(i81, i68) | 0;
          if (!i56) {
           i42 = i81;
           i43 = 0;
           i4 = 136;
           break L6;
          } else {
           i32 = i79;
           i79 = i68;
           i81 = i56;
           i80 = i32;
          }
         }
        }
        if (!i29) while (1) {
         i69 = HEAP32[i13 >> 2] | 0;
         if (i69 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
          HEAP32[i13 >> 2] = i69 + 1;
          i83 = HEAPU8[i69 >> 0] | 0;
         } else i83 = ___shgetc(i1) | 0;
         if (!(HEAP8[i7 + (i83 + 1) >> 0] | 0)) {
          i75 = 0;
          i76 = 0;
          i77 = 0;
          i78 = 0;
          break L78;
         }
        } else i84 = 0;
        while (1) {
         i69 = HEAP32[i13 >> 2] | 0;
         if (i69 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
          HEAP32[i13 >> 2] = i69 + 1;
          i85 = HEAPU8[i69 >> 0] | 0;
         } else i85 = ___shgetc(i1) | 0;
         if (!(HEAP8[i7 + (i85 + 1) >> 0] | 0)) {
          i75 = i84;
          i76 = i29;
          i77 = 0;
          i78 = 0;
          break L78;
         }
         HEAP8[i29 + i84 >> 0] = i85;
         i84 = i84 + 1 | 0;
        }
       } while (0);
       if (!(HEAP32[i14 >> 2] | 0)) i86 = HEAP32[i13 >> 2] | 0; else {
        i57 = (HEAP32[i13 >> 2] | 0) + -1 | 0;
        HEAP32[i13 >> 2] = i57;
        i86 = i57;
       }
       i57 = i86 - (HEAP32[i16 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) | 0;
       if (!i57) {
        i87 = i35;
        i88 = i22;
        i89 = i76;
        i90 = i78;
        break L6;
       }
       if (!((i57 | 0) == (i44 | 0) | i53 ^ 1)) {
        i87 = i35;
        i88 = i22;
        i89 = i76;
        i90 = i78;
        break L6;
       }
       do if (i65) if (i66) {
        HEAP32[i29 >> 2] = i77;
        break;
       } else {
        HEAP32[i29 >> 2] = i76;
        break;
       } while (0);
       if (i53) {
        i91 = i55;
        i92 = i76;
        i93 = i78;
       } else {
        if (i77 | 0) HEAP32[i77 + (i75 << 2) >> 2] = 0;
        if (!i76) {
         i91 = i55;
         i92 = 0;
         i93 = i78;
         break L58;
        }
        HEAP8[i76 + i75 >> 0] = 0;
        i91 = i55;
        i92 = i76;
        i93 = i78;
       }
       break;
      }
     case 120:
     case 88:
     case 112:
      {
       i94 = 16;
       i4 = 124;
       break;
      }
     case 111:
      {
       i94 = 8;
       i4 = 124;
       break;
      }
     case 117:
     case 100:
      {
       i94 = 10;
       i4 = 124;
       break;
      }
     case 105:
      {
       i94 = 0;
       i4 = 124;
       break;
      }
     case 71:
     case 103:
     case 70:
     case 102:
     case 69:
     case 101:
     case 65:
     case 97:
      {
       d95 = +___floatscan(i1, i28, 0);
       if ((HEAP32[i15 >> 2] | 0) == ((HEAP32[i16 >> 2] | 0) - (HEAP32[i13 >> 2] | 0) | 0)) {
        i87 = i35;
        i88 = i22;
        i89 = i36;
        i90 = i39;
        break L6;
       }
       if (!i29) {
        i91 = i41;
        i92 = i36;
        i93 = i39;
       } else switch (i28 | 0) {
       case 0:
        {
         f96 = Math_fround(d95);
         HEAPF32[i29 >> 2] = f96;
         i91 = i41;
         i92 = i36;
         i93 = i39;
         break L58;
         break;
        }
       case 1:
        {
         HEAPF64[i29 >> 3] = d95;
         i91 = i41;
         i92 = i36;
         i93 = i39;
         break L58;
         break;
        }
       case 2:
        {
         HEAPF64[i29 >> 3] = d95;
         i91 = i41;
         i92 = i36;
         i93 = i39;
         break L58;
         break;
        }
       default:
        {
         i91 = i41;
         i92 = i36;
         i93 = i39;
         break L58;
        }
       }
       break;
      }
     default:
      {
       i91 = i41;
       i92 = i36;
       i93 = i39;
      }
     } while (0);
     do if ((i4 | 0) == 124) {
      i4 = 0;
      i27 = ___intscan(i1, i94, 0, -1, -1) | 0;
      if ((HEAP32[i15 >> 2] | 0) == ((HEAP32[i16 >> 2] | 0) - (HEAP32[i13 >> 2] | 0) | 0)) {
       i87 = i35;
       i88 = i22;
       i89 = i36;
       i90 = i39;
       break L6;
      }
      if ((i29 | 0) != 0 & (i31 | 0) == 112) {
       HEAP32[i29 >> 2] = i27;
       i91 = i41;
       i92 = i36;
       i93 = i39;
       break;
      } else {
       _store_int(i29, i28, i27, tempRet0);
       i91 = i41;
       i92 = i36;
       i93 = i39;
       break;
      }
     } while (0);
     i46 = i91;
     i47 = i22 + ((i29 | 0) != 0 & 1) | 0;
     i48 = (HEAP32[i15 >> 2] | 0) + i45 + (HEAP32[i13 >> 2] | 0) - (HEAP32[i16 >> 2] | 0) | 0;
     i49 = i92;
     i50 = i93;
     break L8;
    } while (0);
    i28 = i20 + (i26 & 1) | 0;
    ___shlim(i1, 0);
    i31 = HEAP32[i13 >> 2] | 0;
    if (i31 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
     HEAP32[i13 >> 2] = i31 + 1;
     i97 = HEAPU8[i31 >> 0] | 0;
    } else i97 = ___shgetc(i1) | 0;
    if ((i97 | 0) != (HEAPU8[i28 >> 0] | 0)) {
     i4 = 22;
     break L6;
    }
    i46 = i28;
    i47 = i22;
    i48 = i21 + 1 | 0;
    i49 = i23;
    i50 = i25;
   } else {
    i28 = i20;
    while (1) {
     i31 = i28 + 1 | 0;
     if (!(_isspace(HEAPU8[i31 >> 0] | 0) | 0)) break; else i28 = i31;
    }
    ___shlim(i1, 0);
    do {
     i26 = HEAP32[i13 >> 2] | 0;
     if (i26 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
      HEAP32[i13 >> 2] = i26 + 1;
      i98 = HEAPU8[i26 >> 0] | 0;
     } else i98 = ___shgetc(i1) | 0;
    } while ((_isspace(i98) | 0) != 0);
    if (!(HEAP32[i14 >> 2] | 0)) i99 = HEAP32[i13 >> 2] | 0; else {
     i26 = (HEAP32[i13 >> 2] | 0) + -1 | 0;
     HEAP32[i13 >> 2] = i26;
     i99 = i26;
    }
    i46 = i28;
    i47 = i22;
    i48 = (HEAP32[i15 >> 2] | 0) + i21 + i99 - (HEAP32[i16 >> 2] | 0) | 0;
    i49 = i23;
    i50 = i25;
   } while (0);
   i20 = i46 + 1 | 0;
   i24 = HEAP8[i20 >> 0] | 0;
   if (!(i24 << 24 >> 24)) {
    i12 = i47;
    break L4;
   } else {
    i21 = i48;
    i22 = i47;
    i23 = i49;
    i25 = i50;
   }
  }
  if ((i4 | 0) == 22) {
   if (HEAP32[i14 >> 2] | 0) HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + -1;
   if ((i22 | 0) != 0 | (i97 | 0) > -1) {
    i12 = i22;
    break;
   } else {
    i100 = 0;
    i101 = i23;
    i102 = i25;
    i4 = 137;
   }
  } else if ((i4 | 0) == 136) if (!i22) {
   i100 = i35;
   i101 = i42;
   i102 = i43;
   i4 = 137;
  } else {
   i87 = i35;
   i88 = i22;
   i89 = i42;
   i90 = i43;
  }
  if ((i4 | 0) == 137) {
   i87 = i100;
   i88 = -1;
   i89 = i101;
   i90 = i102;
  }
  if (!i87) i12 = i88; else {
   _free(i89);
   _free(i90);
   i12 = i88;
  }
 } while (0);
 if (i10 | 0) ___unlockfile(i1);
 STACKTOP = i5;
 return i12 | 0;
}

function _png_init_read_transformations(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i3;
 i5 = i1 + 824 | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 i7 = i1 + 488 | 0;
 i8 = HEAP32[i7 >> 2] | 0;
 i9 = (i8 | 0) != 0;
 do if (!i6) if (i9) {
  i10 = _png_reciprocal(i8) | 0;
  HEAP32[i5 >> 2] = i10;
  i11 = 0;
  break;
 } else {
  HEAP32[i5 >> 2] = 1e5;
  HEAP32[i7 >> 2] = 1e5;
  i11 = 0;
  break;
 } else {
  if (!i9) {
   i10 = _png_reciprocal(i6) | 0;
   HEAP32[i7 >> 2] = i10;
   i11 = 0;
   break;
  }
  if (!(_png_muldiv(i4, i6, i8, 1e5) | 0)) i12 = 1; else i12 = (_png_gamma_significant(HEAP32[i4 >> 2] | 0) | 0) != 0 & 1;
  i11 = i12;
 } while (0);
 i12 = i1 + 898 | 0;
 HEAP16[i12 >> 1] = HEAP16[i12 >> 1] | 1;
 i12 = i1 + 216 | 0;
 i4 = HEAP32[i12 >> 2] | 0;
 i8 = i11 | 0 ? i4 | 8192 : i4 & -8193;
 HEAP32[i12 >> 2] = i8;
 if ((i8 & 262272 | 0) == 262144) {
  HEAP32[i12 >> 2] = i8 & -41943297;
  i8 = i1 + 212 | 0;
  HEAP32[i8 >> 2] = HEAP32[i8 >> 2] & -8193;
  HEAP16[i1 + 428 >> 1] = 0;
 }
 i8 = (_png_gamma_significant(HEAP32[i7 >> 2] | 0) | 0) == 0;
 i4 = HEAP32[i12 >> 2] | 0;
 if (i8) {
  i8 = i4 & -8388609;
  HEAP32[i12 >> 2] = i8;
  i11 = i1 + 212 | 0;
  HEAP32[i11 >> 2] = HEAP32[i11 >> 2] & -8193;
  i13 = i8;
 } else i13 = i4;
 if (!(i13 & 6291456)) i14 = i13; else {
  _png_colorspace_set_rgb_coefficients(i1);
  i14 = HEAP32[i12 >> 2] | 0;
 }
 if (!(i14 & 256)) {
  if ((i14 & 16512 | 0) == 16512) {
   i13 = HEAP16[i1 + 454 >> 1] | 0;
   if (i13 << 16 >> 16 == (HEAP16[i1 + 456 >> 1] | 0)) if (i13 << 16 >> 16 == (HEAP16[i1 + 458 >> 1] | 0)) {
    i4 = i1 + 208 | 0;
    HEAP32[i4 >> 2] = HEAP32[i4 >> 2] | 2048;
    HEAP16[i1 + 460 >> 1] = i13;
   }
  }
 } else if (!(HEAP8[i1 + 435 >> 0] & 2)) {
  i13 = i1 + 208 | 0;
  HEAP32[i13 >> 2] = HEAP32[i13 >> 2] | 2048;
 }
 i13 = i1 + 435 | 0;
 i4 = HEAP8[i13 >> 0] | 0;
 if (i4 << 24 >> 24 == 3) {
  i8 = HEAP16[i1 + 428 >> 1] | 0;
  i11 = i8 << 16 >> 16 == 0;
  L33 : do if (i11) {
   i15 = 0;
   i2 = 29;
  } else {
   i6 = HEAP32[i1 + 528 >> 2] | 0;
   i9 = i8 & 65535;
   i10 = 0;
   i16 = 0;
   while (1) {
    switch (HEAP8[i6 + i10 >> 0] | 0) {
    case -1:
     {
      i17 = i16;
      break;
     }
    case 0:
     {
      i17 = 1;
      break;
     }
    default:
     {
      i18 = i14;
      break L33;
     }
    }
    i10 = i10 + 1 | 0;
    if ((i10 | 0) >= (i9 | 0)) {
     i15 = i17;
     i2 = 29;
     break L33;
    } else i16 = i17;
   }
  } while (0);
  if ((i2 | 0) == 29) {
   i17 = i14 & -8388609;
   HEAP32[i12 >> 2] = i17;
   i16 = i1 + 212 | 0;
   HEAP32[i16 >> 2] = HEAP32[i16 >> 2] & -8193;
   i16 = i14 & -8388993;
   if (!i15) {
    HEAP32[i12 >> 2] = i16;
    i18 = i16;
   } else i18 = i17;
  }
  if ((i18 & 4352 | 0) == 4352) {
   i17 = HEAP32[i1 + 416 >> 2] | 0;
   i16 = HEAPU8[i1 + 452 >> 0] | 0;
   i15 = i17 + (i16 * 3 | 0) | 0;
   HEAP16[i1 + 454 >> 1] = HEAPU8[i15 >> 0] | 0;
   HEAP16[i1 + 456 >> 1] = HEAPU8[i15 + 1 >> 0] | 0;
   HEAP16[i1 + 458 >> 1] = HEAPU8[i15 + 2 >> 0] | 0;
   if ((i18 & 34078720 | 0) == 524288) {
    i15 = i8 & 65535;
    if (i11) i19 = i18; else {
     i11 = HEAP32[i1 + 528 >> 2] | 0;
     i8 = 0;
     do {
      i16 = i11 + i8 | 0;
      HEAP8[i16 >> 0] = ~HEAP8[i16 >> 0];
      i8 = i8 + 1 | 0;
     } while ((i8 | 0) != (i15 | 0));
     i19 = HEAP32[i12 >> 2] | 0;
    }
   } else i19 = i18;
  } else i19 = i18;
 } else {
  if (!(i4 & 4)) {
   i18 = (HEAP16[i1 + 428 >> 1] | 0) == 0;
   i15 = i14 & -8388609;
   HEAP32[i12 >> 2] = i15;
   i8 = i1 + 212 | 0;
   HEAP32[i8 >> 2] = HEAP32[i8 >> 2] & -8193;
   i8 = i14 & -8388993;
   if (i18) {
    HEAP32[i12 >> 2] = i8;
    i20 = i8;
   } else i20 = i15;
  } else i20 = i14;
  if ((i4 & 2) == 0 & (i20 & 4352 | 0) == 4352) {
   i4 = HEAPU16[i1 + 460 >> 1] | 0;
   i14 = HEAPU16[i1 + 540 >> 1] | 0;
   switch (HEAP8[i1 + 436 >> 0] | 0) {
   case 1:
    {
     i21 = i14 * 255 | 0;
     i22 = i4 * 255 | 0;
     break;
    }
   case 2:
    {
     i21 = i14 * 85 | 0;
     i22 = i4 * 85 | 0;
     break;
    }
   case 4:
    {
     i21 = i14 * 17 | 0;
     i22 = i4 * 17 | 0;
     break;
    }
   default:
    {
     i21 = i14;
     i22 = i4;
    }
   }
   i4 = i22 & 65535;
   HEAP16[i1 + 458 >> 1] = i4;
   HEAP16[i1 + 456 >> 1] = i4;
   HEAP16[i1 + 454 >> 1] = i4;
   if (!(i20 & 33554432)) {
    i4 = i21 & 65535;
    HEAP16[i1 + 538 >> 1] = i4;
    HEAP16[i1 + 536 >> 1] = i4;
    HEAP16[i1 + 534 >> 1] = i4;
    i19 = i20;
   } else i19 = i20;
  } else i19 = i20;
 }
 if ((i19 & 896 | 0) == 640) if ((HEAP8[i1 + 436 >> 0] | 0) != 16) {
  i20 = i1 + 454 | 0;
  HEAP16[i20 >> 1] = (((HEAPU16[i20 >> 1] | 0) * 255 | 0) + 32895 | 0) >>> 16;
  i20 = i1 + 456 | 0;
  HEAP16[i20 >> 1] = (((HEAPU16[i20 >> 1] | 0) * 255 | 0) + 32895 | 0) >>> 16;
  i20 = i1 + 458 | 0;
  HEAP16[i20 >> 1] = (((HEAPU16[i20 >> 1] | 0) * 255 | 0) + 32895 | 0) >>> 16;
  i20 = i1 + 460 | 0;
  HEAP16[i20 >> 1] = (((HEAPU16[i20 >> 1] | 0) * 255 | 0) + 32895 | 0) >>> 16;
 }
 if ((i19 & 384 | 0) == 128 & (i19 & 67109888 | 0) != 0) if ((HEAP8[i1 + 436 >> 0] | 0) == 16) {
  i20 = i1 + 454 | 0;
  HEAP16[i20 >> 1] = (HEAPU16[i20 >> 1] | 0) * 257;
  i20 = i1 + 456 | 0;
  HEAP16[i20 >> 1] = (HEAPU16[i20 >> 1] | 0) * 257;
  i20 = i1 + 458 | 0;
  HEAP16[i20 >> 1] = (HEAPU16[i20 >> 1] | 0) * 257;
  i20 = i1 + 460 | 0;
  HEAP16[i20 >> 1] = (HEAPU16[i20 >> 1] | 0) * 257;
 }
 i20 = i1 + 462 | 0;
 i4 = i1 + 452 | 0;
 HEAP16[i20 >> 1] = HEAP16[i4 >> 1] | 0;
 HEAP16[i20 + 2 >> 1] = HEAP16[i4 + 2 >> 1] | 0;
 HEAP16[i20 + 4 >> 1] = HEAP16[i4 + 4 >> 1] | 0;
 HEAP16[i20 + 6 >> 1] = HEAP16[i4 + 6 >> 1] | 0;
 HEAP16[i20 + 8 >> 1] = HEAP16[i4 + 8 >> 1] | 0;
 do if (!(i19 & 8192)) {
  if (!(i19 & 6291456)) i23 = i19; else {
   if (_png_gamma_significant(HEAP32[i5 >> 2] | 0) | 0) {
    i2 = 66;
    break;
   }
   if (_png_gamma_significant(HEAP32[i7 >> 2] | 0) | 0) {
    i2 = 66;
    break;
   }
   i23 = HEAP32[i12 >> 2] | 0;
  }
  if (i23 & 128 | 0) {
   if (_png_gamma_significant(HEAP32[i5 >> 2] | 0) | 0) {
    i2 = 66;
    break;
   }
   if (_png_gamma_significant(HEAP32[i7 >> 2] | 0) | 0) {
    i2 = 66;
    break;
   }
   if ((HEAP8[i1 + 446 >> 0] | 0) == 3) if (_png_gamma_significant(HEAP32[i1 + 448 >> 2] | 0) | 0) {
    i2 = 66;
    break;
   }
  }
  i4 = HEAP32[i12 >> 2] | 0;
  if (!(i4 & 8388608)) i24 = i4; else {
   if (_png_gamma_significant(HEAP32[i7 >> 2] | 0) | 0) {
    i2 = 66;
    break;
   }
   i24 = HEAP32[i12 >> 2] | 0;
  }
  if (!(i24 & 128)) i25 = i24; else if ((HEAP8[i13 >> 0] | 0) == 3) {
   i4 = HEAP16[i1 + 428 >> 1] | 0;
   i20 = i4 & 65535;
   i21 = HEAP32[i1 + 416 >> 2] | 0;
   i22 = HEAP16[i1 + 454 >> 1] | 0;
   i14 = i22 & 255;
   i15 = HEAP16[i1 + 456 >> 1] | 0;
   i8 = i15 & 255;
   i18 = HEAP16[i1 + 458 >> 1] | 0;
   i11 = i18 & 255;
   if (!(i4 << 16 >> 16)) i26 = i24; else {
    i4 = i1 + 528 | 0;
    i16 = i22 & 255;
    i22 = i15 & 255;
    i15 = i18 & 255;
    i18 = 0;
    do {
     i17 = (HEAP32[i4 >> 2] | 0) + i18 | 0;
     i9 = HEAP8[i17 >> 0] | 0;
     switch (i9 << 24 >> 24) {
     case 0:
      {
       i10 = i21 + (i18 * 3 | 0) | 0;
       HEAP8[i10 >> 0] = i14;
       HEAP8[i10 + 1 >> 0] = i8;
       HEAP8[i10 + 2 >> 0] = i11;
       break;
      }
     case -1:
      break;
     default:
      {
       i10 = i21 + (i18 * 3 | 0) | 0;
       i6 = i10 | 0;
       i27 = i9 & 255;
       i9 = (Math_imul(i27 ^ 255, i16) | 0) + 128 + (Math_imul(HEAPU8[i6 >> 0] | 0, i27) | 0) | 0;
       HEAP8[i6 >> 0] = ((i9 >>> 8 & 255) + i9 | 0) >>> 8;
       i9 = i10 + 1 | 0;
       i6 = HEAPU8[i17 >> 0] | 0;
       i27 = (Math_imul(i6, HEAPU8[i9 >> 0] | 0) | 0) + 128 + (Math_imul(i6 ^ 255, i22) | 0) | 0;
       HEAP8[i9 >> 0] = ((i27 >>> 8 & 255) + i27 | 0) >>> 8;
       i27 = i10 + 2 | 0;
       i10 = HEAPU8[i17 >> 0] | 0;
       i17 = (Math_imul(i10, HEAPU8[i27 >> 0] | 0) | 0) + 128 + (Math_imul(i10 ^ 255, i15) | 0) | 0;
       HEAP8[i27 >> 0] = ((i17 >>> 8 & 255) + i17 | 0) >>> 8;
      }
     }
     i18 = i18 + 1 | 0;
    } while ((i18 | 0) != (i20 | 0));
    i26 = HEAP32[i12 >> 2] | 0;
   }
   i20 = i26 & -129;
   HEAP32[i12 >> 2] = i20;
   i25 = i20;
  } else i25 = i24;
 } else i2 = 66; while (0);
 do if ((i2 | 0) == 66) {
  _png_build_gamma_table(i1, HEAPU8[i1 + 436 >> 0] | 0);
  i24 = HEAP32[i12 >> 2] | 0;
  if (!(i24 & 128)) {
   if ((HEAP8[i13 >> 0] | 0) != 3) {
    i25 = i24;
    break;
   }
   if (!((i24 & 4096 | 0) == 0 | (i24 & 6291456 | 0) == 0)) {
    i25 = i24;
    break;
   }
   i26 = HEAP32[i1 + 416 >> 2] | 0;
   i23 = HEAP16[i1 + 420 >> 1] | 0;
   i19 = i23 & 65535;
   if (i23 << 16 >> 16) {
    i23 = HEAP32[i1 + 492 >> 2] | 0;
    i20 = 0;
    do {
     i18 = i26 + (i20 * 3 | 0) | 0;
     i15 = i18 | 0;
     HEAP8[i15 >> 0] = HEAP8[i23 + (HEAPU8[i15 >> 0] | 0) >> 0] | 0;
     i15 = i18 + 1 | 0;
     HEAP8[i15 >> 0] = HEAP8[i23 + (HEAPU8[i15 >> 0] | 0) >> 0] | 0;
     i15 = i18 + 2 | 0;
     HEAP8[i15 >> 0] = HEAP8[i23 + (HEAPU8[i15 >> 0] | 0) >> 0] | 0;
     i20 = i20 + 1 | 0;
    } while ((i20 | 0) != (i19 | 0));
   }
   i19 = i24 & -8193;
   HEAP32[i12 >> 2] = i19;
   i25 = i19;
   break;
  }
  if (i24 & 6291456 | 0) _png_warning(i1, 59247);
  if ((HEAP8[i13 >> 0] | 0) != 3) {
   i19 = i1 + 446 | 0;
   switch (HEAP8[i19 >> 0] | 0) {
   case 1:
    {
     i28 = HEAP32[i7 >> 2] | 0;
     i29 = 1e5;
     break;
    }
   case 2:
    {
     i28 = _png_reciprocal(HEAP32[i5 >> 2] | 0) | 0;
     i29 = _png_reciprocal2(HEAP32[i5 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0;
     break;
    }
   case 3:
    {
     i20 = i1 + 448 | 0;
     i28 = _png_reciprocal(HEAP32[i20 >> 2] | 0) | 0;
     i29 = _png_reciprocal2(HEAP32[i20 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0;
     break;
    }
   default:
    _png_error(i1, 59300);
   }
   i20 = _png_gamma_significant(i28) | 0;
   i23 = _png_gamma_significant(i29) | 0;
   i26 = (i20 | 0) != 0;
   if (i26) {
    i20 = _png_gamma_correct(i1, HEAPU16[i1 + 460 >> 1] | 0, i28) | 0;
    HEAP16[i1 + 470 >> 1] = i20;
   }
   i20 = (i23 | 0) != 0;
   if (i20) {
    i23 = i1 + 460 | 0;
    i15 = _png_gamma_correct(i1, HEAPU16[i23 >> 1] | 0, i29) | 0;
    HEAP16[i23 >> 1] = i15;
   }
   i15 = i1 + 454 | 0;
   i23 = HEAP16[i15 >> 1] | 0;
   i18 = i1 + 456 | 0;
   if (i23 << 16 >> 16 == (HEAP16[i18 >> 1] | 0)) {
    i22 = i1 + 458 | 0;
    if (i23 << 16 >> 16 == (HEAP16[i22 >> 1] | 0)) if (i23 << 16 >> 16 == (HEAP16[i1 + 460 >> 1] | 0)) {
     i16 = HEAP16[i1 + 470 >> 1] | 0;
     HEAP16[i1 + 468 >> 1] = i16;
     HEAP16[i1 + 466 >> 1] = i16;
     HEAP16[i1 + 464 >> 1] = i16;
     HEAP16[i22 >> 1] = i23;
     HEAP16[i18 >> 1] = i23;
    } else i2 = 101; else i2 = 101;
   } else i2 = 101;
   if ((i2 | 0) == 101) {
    if (i26) {
     i26 = _png_gamma_correct(i1, i23 & 65535, i28) | 0;
     HEAP16[i1 + 464 >> 1] = i26;
     i26 = _png_gamma_correct(i1, HEAPU16[i18 >> 1] | 0, i28) | 0;
     HEAP16[i1 + 466 >> 1] = i26;
     i26 = _png_gamma_correct(i1, HEAPU16[i1 + 458 >> 1] | 0, i28) | 0;
     HEAP16[i1 + 468 >> 1] = i26;
    }
    if (i20) {
     i20 = _png_gamma_correct(i1, HEAPU16[i15 >> 1] | 0, i29) | 0;
     HEAP16[i15 >> 1] = i20;
     i20 = _png_gamma_correct(i1, HEAPU16[i18 >> 1] | 0, i29) | 0;
     HEAP16[i18 >> 1] = i20;
     i20 = i1 + 458 | 0;
     i18 = _png_gamma_correct(i1, HEAPU16[i20 >> 1] | 0, i29) | 0;
     HEAP16[i20 >> 1] = i18;
    }
   }
   HEAP8[i19 >> 0] = 1;
   i25 = HEAP32[i12 >> 2] | 0;
   break;
  }
  i19 = HEAP32[i1 + 416 >> 2] | 0;
  i18 = HEAP16[i1 + 420 >> 1] | 0;
  i20 = i18 & 65535;
  switch (HEAP8[i1 + 446 >> 0] | 0) {
  case 2:
   {
    i15 = HEAP32[i1 + 492 >> 2] | 0;
    i26 = HEAPU16[i1 + 454 >> 1] | 0;
    i23 = HEAPU16[i1 + 456 >> 1] | 0;
    i22 = HEAPU16[i1 + 458 >> 1] | 0;
    i16 = HEAP32[i1 + 504 >> 2] | 0;
    i30 = HEAP8[i16 + i26 >> 0] | 0;
    i31 = HEAP8[i15 + i26 >> 0] | 0;
    i32 = HEAP8[i16 + i22 >> 0] | 0;
    i33 = HEAP8[i16 + i23 >> 0] | 0;
    i34 = HEAP8[i15 + i23 >> 0] | 0;
    i35 = HEAP8[i15 + i22 >> 0] | 0;
    break;
   }
  case 1:
   {
    i36 = HEAP32[i7 >> 2] | 0;
    i37 = 1e5;
    i2 = 74;
    break;
   }
  case 3:
   {
    i22 = i1 + 448 | 0;
    i36 = _png_reciprocal(HEAP32[i22 >> 2] | 0) | 0;
    i37 = _png_reciprocal2(HEAP32[i22 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0;
    i2 = 74;
    break;
   }
  default:
   {
    i36 = 1e5;
    i37 = 1e5;
    i2 = 74;
   }
  }
  do if ((i2 | 0) == 74) {
   i22 = (_png_gamma_significant(i37) | 0) == 0;
   i15 = i1 + 454 | 0;
   i23 = HEAP16[i15 >> 1] | 0;
   if (i22) {
    i38 = HEAP16[i1 + 458 >> 1] & 255;
    i39 = i23 & 255;
    i40 = HEAP16[i1 + 456 >> 1] & 255;
   } else {
    i22 = _png_gamma_8bit_correct(i23 & 65535, i37) | 0;
    i23 = _png_gamma_8bit_correct(HEAPU16[i1 + 456 >> 1] | 0, i37) | 0;
    i38 = _png_gamma_8bit_correct(HEAPU16[i1 + 458 >> 1] | 0, i37) | 0;
    i39 = i22;
    i40 = i23;
   }
   i23 = (_png_gamma_significant(i36) | 0) == 0;
   i22 = HEAP16[i15 >> 1] | 0;
   if (i23) {
    i30 = i22 & 255;
    i31 = i39;
    i32 = HEAP16[i1 + 458 >> 1] & 255;
    i33 = HEAP16[i1 + 456 >> 1] & 255;
    i34 = i40;
    i35 = i38;
    break;
   } else {
    i23 = _png_gamma_8bit_correct(i22 & 65535, i36) | 0;
    i22 = _png_gamma_8bit_correct(HEAPU16[i1 + 456 >> 1] | 0, i36) | 0;
    i30 = i23;
    i31 = i39;
    i32 = _png_gamma_8bit_correct(HEAPU16[i1 + 458 >> 1] | 0, i36) | 0;
    i33 = i22;
    i34 = i40;
    i35 = i38;
    break;
   }
  } while (0);
  if (i18 << 16 >> 16) {
   i24 = i1 + 428 | 0;
   i22 = i1 + 528 | 0;
   i23 = i1 + 504 | 0;
   i15 = i30 & 255;
   i16 = i1 + 500 | 0;
   i26 = i33 & 255;
   i21 = i32 & 255;
   i11 = i1 + 492 | 0;
   i8 = 0;
   do {
    L159 : do if ((i8 | 0) < (HEAPU16[i24 >> 1] | 0)) {
     i14 = (HEAP32[i22 >> 2] | 0) + i8 | 0;
     i4 = HEAP8[i14 >> 0] | 0;
     switch (i4 << 24 >> 24) {
     case -1:
      {
       i2 = 86;
       break L159;
       break;
      }
     case 0:
      {
       i17 = i19 + (i8 * 3 | 0) | 0;
       HEAP8[i17 >> 0] = i31;
       HEAP8[i17 + 1 >> 0] = i34;
       HEAP8[i17 + 2 >> 0] = i35;
       break L159;
       break;
      }
     default:
      {
       i17 = HEAP32[i23 >> 2] | 0;
       i27 = i19 + (i8 * 3 | 0) | 0;
       i10 = i27 | 0;
       i9 = i4 & 255;
       i4 = (Math_imul(i9 ^ 255, i15) | 0) + 128 + (Math_imul(HEAPU8[i17 + (HEAPU8[i10 >> 0] | 0) >> 0] | 0, i9) | 0) | 0;
       i9 = HEAP32[i16 >> 2] | 0;
       HEAP8[i10 >> 0] = HEAP8[i9 + (((i4 >>> 8 & 255) + i4 | 0) >>> 8 & 255) >> 0] | 0;
       i4 = i27 + 1 | 0;
       i10 = HEAPU8[i14 >> 0] | 0;
       i6 = (Math_imul(i10, HEAPU8[i17 + (HEAPU8[i4 >> 0] | 0) >> 0] | 0) | 0) + 128 + (Math_imul(i10 ^ 255, i26) | 0) | 0;
       HEAP8[i4 >> 0] = HEAP8[i9 + (((i6 >>> 8 & 255) + i6 | 0) >>> 8 & 255) >> 0] | 0;
       i6 = i27 + 2 | 0;
       i27 = HEAPU8[i14 >> 0] | 0;
       i14 = (Math_imul(i27, HEAPU8[i17 + (HEAPU8[i6 >> 0] | 0) >> 0] | 0) | 0) + 128 + (Math_imul(i27 ^ 255, i21) | 0) | 0;
       HEAP8[i6 >> 0] = HEAP8[i9 + (((i14 >>> 8 & 255) + i14 | 0) >>> 8 & 255) >> 0] | 0;
       break L159;
      }
     }
    } else i2 = 86; while (0);
    if ((i2 | 0) == 86) {
     i2 = 0;
     i14 = HEAP32[i11 >> 2] | 0;
     i9 = i19 + (i8 * 3 | 0) | 0;
     i6 = i9 | 0;
     HEAP8[i6 >> 0] = HEAP8[i14 + (HEAPU8[i6 >> 0] | 0) >> 0] | 0;
     i6 = i9 + 1 | 0;
     HEAP8[i6 >> 0] = HEAP8[i14 + (HEAPU8[i6 >> 0] | 0) >> 0] | 0;
     i6 = i9 + 2 | 0;
     HEAP8[i6 >> 0] = HEAP8[i14 + (HEAPU8[i6 >> 0] | 0) >> 0] | 0;
    }
    i8 = i8 + 1 | 0;
   } while ((i8 | 0) != (i20 | 0));
  }
  i20 = HEAP32[i12 >> 2] & -8321;
  HEAP32[i12 >> 2] = i20;
  i25 = i20;
 } while (0);
 if ((i25 & 4104 | 0) != 8) {
  STACKTOP = i3;
  return;
 }
 if ((HEAP8[i13 >> 0] | 0) != 3) {
  STACKTOP = i3;
  return;
 }
 i13 = HEAP16[i1 + 420 >> 1] | 0;
 i2 = i13 & 65535;
 i35 = HEAP8[i1 + 516 >> 0] | 0;
 i34 = 8 - (i35 & 255) | 0;
 HEAP32[i12 >> 2] = i25 & -9;
 i25 = i13 << 16 >> 16 != 0;
 if (i35 << 24 >> 24 != 0 & (i34 | 0) > 0 & i25) {
  i35 = HEAP32[i1 + 416 >> 2] | 0;
  i13 = 0;
  do {
   i12 = i35 + (i13 * 3 | 0) | 0;
   HEAP8[i12 >> 0] = (HEAPU8[i12 >> 0] | 0) >>> i34;
   i13 = i13 + 1 | 0;
  } while ((i13 | 0) != (i2 | 0));
 }
 i13 = HEAP8[i1 + 517 >> 0] | 0;
 i34 = 8 - (i13 & 255) | 0;
 if (i13 << 24 >> 24 != 0 & (i34 | 0) > 0 & i25) {
  i13 = HEAP32[i1 + 416 >> 2] | 0;
  i35 = 0;
  do {
   i12 = i13 + (i35 * 3 | 0) + 1 | 0;
   HEAP8[i12 >> 0] = (HEAPU8[i12 >> 0] | 0) >>> i34;
   i35 = i35 + 1 | 0;
  } while ((i35 | 0) != (i2 | 0));
 }
 i35 = HEAP8[i1 + 518 >> 0] | 0;
 i34 = 8 - (i35 & 255) | 0;
 if (!(i35 << 24 >> 24 != 0 & (i34 | 0) > 0 & i25)) {
  STACKTOP = i3;
  return;
 }
 i25 = HEAP32[i1 + 416 >> 2] | 0;
 i1 = 0;
 do {
  i35 = i25 + (i1 * 3 | 0) + 2 | 0;
  HEAP8[i35 >> 0] = (HEAPU8[i35 >> 0] | 0) >>> i34;
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != (i2 | 0));
 STACKTOP = i3;
 return;
}

function __ZN10ImDrawList11AddPolylineEPK6ImVec2ijbf(i1, i2, i3, i4, i5, f6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 f6 = Math_fround(f6);
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, f13 = f0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, f21 = f0, i22 = 0, f23 = f0, f24 = f0, i25 = 0, f26 = f0, f27 = f0, f28 = f0, i29 = 0, f30 = f0, i31 = 0, i32 = 0, f33 = f0, f34 = f0, f35 = f0, i36 = 0, i37 = 0, f38 = f0, f39 = f0;
 i7 = STACKTOP;
 if ((i3 | 0) < 2) {
  STACKTOP = i7;
  return;
 }
 i8 = HEAP32[i1 + 40 >> 2] | 0;
 i9 = HEAP32[i8 >> 2] | 0;
 i10 = HEAP32[i8 + 4 >> 2] | 0;
 i8 = i3 + -1 | 0;
 i11 = i5 ? i3 : i8;
 i12 = f6 > Math_fround(1.0);
 if (!(HEAP32[i1 + 36 >> 2] & 1)) {
  __ZN10ImDrawList11PrimReserveEii(i1, i11 * 6 | 0, i11 << 2);
  f13 = Math_fround(f6 * Math_fround(.5));
  i14 = i1 + 52 | 0;
  i15 = i1 + 48 | 0;
  i16 = i1 + 56 | 0;
  i17 = 0;
  do {
   i18 = i17;
   i17 = i17 + 1 | 0;
   i19 = (i17 | 0) == (i3 | 0) ? 0 : i17;
   i20 = i2 + (i19 << 3) | 0;
   i19 = i20 | 0;
   f21 = Math_fround(HEAPF32[i19 >> 2]);
   i22 = i2 + (i18 << 3) | 0;
   i18 = i22 | 0;
   f23 = Math_fround(HEAPF32[i18 >> 2]);
   f24 = Math_fround(f21 - f23);
   i25 = i20 + 4 | 0;
   f21 = Math_fround(HEAPF32[i25 >> 2]);
   i20 = i22 + 4 | 0;
   f26 = Math_fround(HEAPF32[i20 >> 2]);
   f27 = Math_fround(f21 - f26);
   f21 = Math_fround(Math_fround(f24 * f24) + Math_fround(f27 * f27));
   if (f21 > Math_fround(0.0)) f28 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(f21)))); else f28 = Math_fround(1.0);
   f21 = Math_fround(f13 * Math_fround(f24 * f28));
   f24 = Math_fround(f13 * Math_fround(f27 * f28));
   f27 = Math_fround(f23 + f24);
   i22 = HEAP32[i14 >> 2] | 0;
   HEAPF32[i22 >> 2] = f27;
   f27 = Math_fround(f26 - f21);
   HEAPF32[i22 + 4 >> 2] = f27;
   i29 = i22 + 8 | 0;
   HEAP32[i29 >> 2] = i9;
   HEAP32[i29 + 4 >> 2] = i10;
   i29 = HEAP32[i14 >> 2] | 0;
   HEAP32[i29 + 16 >> 2] = i4;
   f27 = Math_fround(f24 + Math_fround(HEAPF32[i19 >> 2]));
   HEAPF32[i29 + 20 >> 2] = f27;
   f27 = Math_fround(Math_fround(HEAPF32[i25 >> 2]) - f21);
   HEAPF32[i29 + 24 >> 2] = f27;
   i22 = i29 + 28 | 0;
   HEAP32[i22 >> 2] = i9;
   HEAP32[i22 + 4 >> 2] = i10;
   i22 = HEAP32[i14 >> 2] | 0;
   HEAP32[i22 + 36 >> 2] = i4;
   f27 = Math_fround(Math_fround(HEAPF32[i19 >> 2]) - f24);
   HEAPF32[i22 + 40 >> 2] = f27;
   f27 = Math_fround(f21 + Math_fround(HEAPF32[i25 >> 2]));
   HEAPF32[i22 + 44 >> 2] = f27;
   i25 = i22 + 48 | 0;
   HEAP32[i25 >> 2] = i9;
   HEAP32[i25 + 4 >> 2] = i10;
   i25 = HEAP32[i14 >> 2] | 0;
   HEAP32[i25 + 56 >> 2] = i4;
   f27 = Math_fround(Math_fround(HEAPF32[i18 >> 2]) - f24);
   HEAPF32[i25 + 60 >> 2] = f27;
   f27 = Math_fround(f21 + Math_fround(HEAPF32[i20 >> 2]));
   HEAPF32[i25 + 64 >> 2] = f27;
   i20 = i25 + 68 | 0;
   HEAP32[i20 >> 2] = i9;
   HEAP32[i20 + 4 >> 2] = i10;
   i20 = HEAP32[i14 >> 2] | 0;
   HEAP32[i20 + 76 >> 2] = i4;
   HEAP32[i14 >> 2] = i20 + 80;
   i20 = HEAP32[i15 >> 2] | 0;
   i25 = i20 & 65535;
   i18 = HEAP32[i16 >> 2] | 0;
   HEAP16[i18 >> 1] = i25;
   HEAP16[i18 + 2 >> 1] = i20 + 1;
   i22 = i20 + 2 & 65535;
   HEAP16[i18 + 4 >> 1] = i22;
   HEAP16[i18 + 6 >> 1] = i25;
   HEAP16[i18 + 8 >> 1] = i22;
   HEAP16[i18 + 10 >> 1] = i20 + 3;
   HEAP32[i16 >> 2] = i18 + 12;
   HEAP32[i15 >> 2] = i20 + 4;
  } while ((i17 | 0) != (i11 | 0));
  STACKTOP = i7;
  return;
 }
 i17 = i4 & 16777215;
 i15 = Math_imul(i12 ? 18 : 12, i11) | 0;
 i16 = Math_imul(i12 ? 4 : 3, i3) | 0;
 __ZN10ImDrawList11PrimReserveEii(i1, i15, i16);
 i15 = Math_imul(i3 << 3, i12 ? 5 : 3) | 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * i15 | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * i15 | 0) + 15 & -16 | 0);
 i15 = i14 + (i3 << 3) | 0;
 i20 = 0;
 do {
  i18 = i20;
  i20 = i20 + 1 | 0;
  i22 = (i20 | 0) == (i3 | 0) ? 0 : i20;
  i25 = i2 + (i22 << 3) | 0;
  f28 = Math_fround(HEAPF32[i25 >> 2]);
  i22 = i2 + (i18 << 3) | 0;
  f13 = Math_fround(f28 - Math_fround(HEAPF32[i22 >> 2]));
  f28 = Math_fround(HEAPF32[i25 + 4 >> 2]);
  f27 = Math_fround(f28 - Math_fround(HEAPF32[i22 + 4 >> 2]));
  f28 = Math_fround(Math_fround(f13 * f13) + Math_fround(f27 * f27));
  if (f28 > Math_fround(0.0)) f30 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(f28)))); else f30 = Math_fround(1.0);
  f28 = Math_fround(f13 * f30);
  f13 = Math_fround(f27 * f30);
  i22 = i14 + (i18 << 3) | 0;
  HEAPF32[i22 >> 2] = f13;
  f13 = Math_fround(-f28);
  HEAPF32[i22 + 4 >> 2] = f13;
 } while ((i20 | 0) != (i11 | 0));
 if (!i5) {
  i20 = i14 + (i3 + -2 << 3) | 0;
  i22 = HEAP32[i20 + 4 >> 2] | 0;
  i18 = i14 + (i8 << 3) | 0;
  HEAP32[i18 >> 2] = HEAP32[i20 >> 2];
  HEAP32[i18 + 4 >> 2] = i22;
 }
 if (i12) {
  f30 = Math_fround(Math_fround(f6 + Math_fround(-1.0)) * Math_fround(.5));
  if (!i5) {
   f6 = Math_fround(f30 + Math_fround(1.0));
   f13 = Math_fround(f6 * Math_fround(HEAPF32[i14 >> 2]));
   i12 = i14 + 4 | 0;
   f28 = Math_fround(f6 * Math_fround(HEAPF32[i12 >> 2]));
   f27 = Math_fround(HEAPF32[i2 >> 2]);
   f21 = Math_fround(f13 + f27);
   f13 = Math_fround(HEAPF32[i2 + 4 >> 2]);
   f24 = Math_fround(f28 + f13);
   HEAPF32[i15 >> 2] = f21;
   HEAPF32[i14 + (i3 << 3) + 4 >> 2] = f24;
   f24 = Math_fround(f30 * Math_fround(HEAPF32[i14 >> 2]));
   f21 = Math_fround(f24 + f27);
   f24 = Math_fround(Math_fround(f30 * Math_fround(HEAPF32[i12 >> 2])) + f13);
   HEAPF32[i15 + 8 >> 2] = f21;
   HEAPF32[i15 + 12 >> 2] = f24;
   f24 = Math_fround(f30 * Math_fround(HEAPF32[i14 >> 2]));
   f21 = Math_fround(f27 - f24);
   f24 = Math_fround(f13 - Math_fround(f30 * Math_fround(HEAPF32[i12 >> 2])));
   HEAPF32[i15 + 16 >> 2] = f21;
   HEAPF32[i15 + 20 >> 2] = f24;
   f24 = Math_fround(f6 * Math_fround(HEAPF32[i14 >> 2]));
   f21 = Math_fround(f27 - f24);
   f24 = Math_fround(f13 - Math_fround(f6 * Math_fround(HEAPF32[i12 >> 2])));
   HEAPF32[i15 + 24 >> 2] = f21;
   HEAPF32[i15 + 28 >> 2] = f24;
   i12 = i14 + (i8 << 3) | 0;
   f24 = Math_fround(HEAPF32[i12 >> 2]);
   f21 = Math_fround(f6 * f24);
   f13 = Math_fround(HEAPF32[i12 + 4 >> 2]);
   f27 = Math_fround(f6 * f13);
   i12 = i2 + (i8 << 3) | 0;
   f6 = Math_fround(HEAPF32[i12 >> 2]);
   f28 = Math_fround(f21 + f6);
   f26 = Math_fround(HEAPF32[i12 + 4 >> 2]);
   f23 = Math_fround(f27 + f26);
   i12 = i8 << 2;
   i22 = i15 + (i12 << 3) | 0;
   HEAPF32[i22 >> 2] = f28;
   HEAPF32[i22 + 4 >> 2] = f23;
   f23 = Math_fround(f30 * f24);
   f24 = Math_fround(f30 * f13);
   f13 = Math_fround(f23 + f6);
   f28 = Math_fround(f24 + f26);
   i22 = i15 + ((i12 | 1) << 3) | 0;
   HEAPF32[i22 >> 2] = f13;
   HEAPF32[i22 + 4 >> 2] = f28;
   f28 = Math_fround(f6 - f23);
   f23 = Math_fround(f26 - f24);
   i22 = i15 + ((i12 | 2) << 3) | 0;
   HEAPF32[i22 >> 2] = f28;
   HEAPF32[i22 + 4 >> 2] = f23;
   f23 = Math_fround(f6 - f21);
   f21 = Math_fround(f26 - f27);
   i22 = i15 + ((i12 | 3) << 3) | 0;
   HEAPF32[i22 >> 2] = f23;
   HEAPF32[i22 + 4 >> 2] = f21;
  }
  i22 = i1 + 48 | 0;
  f21 = Math_fround(f30 + Math_fround(1.0));
  i12 = i1 + 56 | 0;
  i18 = HEAP32[i22 >> 2] | 0;
  i20 = 0;
  i25 = HEAP32[i12 >> 2] | 0;
  while (1) {
   i19 = i20;
   i20 = i20 + 1 | 0;
   i29 = (i20 | 0) == (i3 | 0);
   i31 = i29 ? 0 : i20;
   if (i29) i32 = HEAP32[i22 >> 2] | 0; else i32 = i18 + 4 | 0;
   i29 = i14 + (i19 << 3) | 0;
   f23 = Math_fround(HEAPF32[i29 >> 2]);
   i19 = i14 + (i31 << 3) | 0;
   f27 = Math_fround(f23 + Math_fround(HEAPF32[i19 >> 2]));
   f23 = Math_fround(HEAPF32[i29 + 4 >> 2]);
   f26 = Math_fround(f27 * Math_fround(.5));
   f27 = Math_fround(Math_fround(f23 + Math_fround(HEAPF32[i19 + 4 >> 2])) * Math_fround(.5));
   f23 = Math_fround(Math_fround(f26 * f26) + Math_fround(f27 * f27));
   if (f23 > Math_fround(9.99999997e-07)) {
    f6 = Math_fround(Math_fround(1.0) / f23);
    i19 = f6 > Math_fround(100.0);
    f23 = i19 ? Math_fround(100.0) : f6;
    f33 = Math_fround(f26 * f23);
    f34 = Math_fround(f27 * f23);
   } else {
    f33 = f26;
    f34 = f27;
   }
   f27 = Math_fround(f21 * f33);
   f26 = Math_fround(f21 * f34);
   f23 = Math_fround(f30 * f33);
   f6 = Math_fround(f30 * f34);
   i19 = i2 + (i31 << 3) | 0;
   f28 = Math_fround(HEAPF32[i19 >> 2]);
   f24 = Math_fround(f27 + f28);
   f13 = Math_fround(HEAPF32[i19 + 4 >> 2]);
   f35 = Math_fround(f26 + f13);
   i19 = i31 << 2;
   i31 = i15 + (i19 << 3) | 0;
   HEAPF32[i31 >> 2] = f24;
   HEAPF32[i31 + 4 >> 2] = f35;
   f35 = Math_fround(f23 + f28);
   f24 = Math_fround(f6 + f13);
   i31 = i15 + ((i19 | 1) << 3) | 0;
   HEAPF32[i31 >> 2] = f35;
   HEAPF32[i31 + 4 >> 2] = f24;
   f24 = Math_fround(f28 - f23);
   f23 = Math_fround(f13 - f6);
   i31 = i15 + ((i19 | 2) << 3) | 0;
   HEAPF32[i31 >> 2] = f24;
   HEAPF32[i31 + 4 >> 2] = f23;
   f23 = Math_fround(f28 - f27);
   f27 = Math_fround(f13 - f26);
   i31 = i15 + ((i19 | 3) << 3) | 0;
   HEAPF32[i31 >> 2] = f23;
   HEAPF32[i31 + 4 >> 2] = f27;
   i31 = i32 + 1 & 65535;
   HEAP16[i25 >> 1] = i31;
   i19 = i18 + 1 & 65535;
   HEAP16[i25 + 2 >> 1] = i19;
   i29 = i18 + 2 & 65535;
   HEAP16[i25 + 4 >> 1] = i29;
   HEAP16[i25 + 6 >> 1] = i29;
   i36 = i32 + 2 & 65535;
   HEAP16[i25 + 8 >> 1] = i36;
   HEAP16[i25 + 10 >> 1] = i31;
   HEAP16[i25 + 12 >> 1] = i31;
   HEAP16[i25 + 14 >> 1] = i19;
   i19 = i18 & 65535;
   HEAP16[i25 + 16 >> 1] = i19;
   HEAP16[i25 + 18 >> 1] = i19;
   HEAP16[i25 + 20 >> 1] = i32;
   HEAP16[i25 + 22 >> 1] = i31;
   HEAP16[i25 + 24 >> 1] = i36;
   HEAP16[i25 + 26 >> 1] = i29;
   i29 = i18 + 3 & 65535;
   HEAP16[i25 + 28 >> 1] = i29;
   HEAP16[i25 + 30 >> 1] = i29;
   HEAP16[i25 + 32 >> 1] = i32 + 3;
   HEAP16[i25 + 34 >> 1] = i36;
   i25 = i25 + 36 | 0;
   if ((i20 | 0) == (i11 | 0)) break; else i18 = i32;
  }
  HEAP32[i12 >> 2] = i25;
  if ((i3 | 0) > 0) {
   i25 = i1 + 52 | 0;
   i12 = 0;
   i32 = HEAP32[i25 >> 2] | 0;
   do {
    i18 = i12 << 2;
    i20 = i15 + (i18 << 3) | 0;
    i36 = HEAP32[i20 + 4 >> 2] | 0;
    i29 = i32;
    HEAP32[i29 >> 2] = HEAP32[i20 >> 2];
    HEAP32[i29 + 4 >> 2] = i36;
    i36 = (HEAP32[i25 >> 2] | 0) + 8 | 0;
    HEAP32[i36 >> 2] = i9;
    HEAP32[i36 + 4 >> 2] = i10;
    i36 = HEAP32[i25 >> 2] | 0;
    HEAP32[i36 + 16 >> 2] = i17;
    i29 = i15 + ((i18 | 1) << 3) | 0;
    i20 = HEAP32[i29 + 4 >> 2] | 0;
    i31 = i36 + 20 | 0;
    HEAP32[i31 >> 2] = HEAP32[i29 >> 2];
    HEAP32[i31 + 4 >> 2] = i20;
    i20 = (HEAP32[i25 >> 2] | 0) + 28 | 0;
    HEAP32[i20 >> 2] = i9;
    HEAP32[i20 + 4 >> 2] = i10;
    i20 = HEAP32[i25 >> 2] | 0;
    HEAP32[i20 + 36 >> 2] = i4;
    i31 = i15 + ((i18 | 2) << 3) | 0;
    i29 = HEAP32[i31 + 4 >> 2] | 0;
    i36 = i20 + 40 | 0;
    HEAP32[i36 >> 2] = HEAP32[i31 >> 2];
    HEAP32[i36 + 4 >> 2] = i29;
    i29 = (HEAP32[i25 >> 2] | 0) + 48 | 0;
    HEAP32[i29 >> 2] = i9;
    HEAP32[i29 + 4 >> 2] = i10;
    i29 = HEAP32[i25 >> 2] | 0;
    HEAP32[i29 + 56 >> 2] = i4;
    i36 = i15 + ((i18 | 3) << 3) | 0;
    i18 = HEAP32[i36 + 4 >> 2] | 0;
    i31 = i29 + 60 | 0;
    HEAP32[i31 >> 2] = HEAP32[i36 >> 2];
    HEAP32[i31 + 4 >> 2] = i18;
    i18 = (HEAP32[i25 >> 2] | 0) + 68 | 0;
    HEAP32[i18 >> 2] = i9;
    HEAP32[i18 + 4 >> 2] = i10;
    i18 = HEAP32[i25 >> 2] | 0;
    HEAP32[i18 + 76 >> 2] = i17;
    i32 = i18 + 80 | 0;
    HEAP32[i25 >> 2] = i32;
    i12 = i12 + 1 | 0;
   } while ((i12 | 0) != (i3 | 0));
   i37 = i22;
  } else i37 = i22;
 } else {
  if (!i5) {
   f34 = Math_fround(HEAPF32[i14 >> 2]);
   i5 = i14 + 4 | 0;
   f30 = Math_fround(HEAPF32[i5 >> 2]);
   f33 = Math_fround(HEAPF32[i2 >> 2]);
   f21 = Math_fround(f34 + f33);
   f34 = Math_fround(HEAPF32[i2 + 4 >> 2]);
   f27 = Math_fround(f30 + f34);
   HEAPF32[i15 >> 2] = f21;
   HEAPF32[i14 + (i3 << 3) + 4 >> 2] = f27;
   f27 = Math_fround(HEAPF32[i14 >> 2]);
   f21 = Math_fround(f33 - f27);
   f27 = Math_fround(f34 - Math_fround(HEAPF32[i5 >> 2]));
   HEAPF32[i15 + 8 >> 2] = f21;
   HEAPF32[i15 + 12 >> 2] = f27;
   i5 = i14 + (i8 << 3) | 0;
   f27 = Math_fround(HEAPF32[i5 >> 2]);
   f21 = Math_fround(HEAPF32[i5 + 4 >> 2]);
   i5 = i2 + (i8 << 3) | 0;
   f34 = Math_fround(HEAPF32[i5 >> 2]);
   f33 = Math_fround(f27 + f34);
   f30 = Math_fround(HEAPF32[i5 + 4 >> 2]);
   f23 = Math_fround(f21 + f30);
   i5 = i8 << 1;
   i8 = i15 + (i5 << 3) | 0;
   HEAPF32[i8 >> 2] = f33;
   HEAPF32[i8 + 4 >> 2] = f23;
   f23 = Math_fround(f34 - f27);
   f27 = Math_fround(f30 - f21);
   i8 = i15 + ((i5 | 1) << 3) | 0;
   HEAPF32[i8 >> 2] = f23;
   HEAPF32[i8 + 4 >> 2] = f27;
  }
  i8 = i1 + 48 | 0;
  i5 = HEAP32[i8 >> 2] | 0;
  i22 = i1 + 56 | 0;
  i12 = i5;
  i32 = 0;
  i25 = HEAP32[i22 >> 2] | 0;
  do {
   i18 = i32;
   i32 = i32 + 1 | 0;
   i31 = (i32 | 0) == (i3 | 0);
   i36 = i31 ? 0 : i32;
   i29 = i12;
   i12 = i31 ? i5 : i12 + 3 | 0;
   i31 = i14 + (i18 << 3) | 0;
   f27 = Math_fround(HEAPF32[i31 >> 2]);
   i18 = i14 + (i36 << 3) | 0;
   f23 = Math_fround(f27 + Math_fround(HEAPF32[i18 >> 2]));
   f27 = Math_fround(HEAPF32[i31 + 4 >> 2]);
   f21 = Math_fround(f23 * Math_fround(.5));
   f23 = Math_fround(Math_fround(f27 + Math_fround(HEAPF32[i18 + 4 >> 2])) * Math_fround(.5));
   f27 = Math_fround(Math_fround(f21 * f21) + Math_fround(f23 * f23));
   if (f27 > Math_fround(9.99999997e-07)) {
    f30 = Math_fround(Math_fround(1.0) / f27);
    i18 = f30 > Math_fround(100.0);
    f27 = i18 ? Math_fround(100.0) : f30;
    f38 = Math_fround(f21 * f27);
    f39 = Math_fround(f23 * f27);
   } else {
    f38 = f21;
    f39 = f23;
   }
   i18 = i2 + (i36 << 3) | 0;
   f23 = Math_fround(HEAPF32[i18 >> 2]);
   f21 = Math_fround(f38 + f23);
   f27 = Math_fround(HEAPF32[i18 + 4 >> 2]);
   f30 = Math_fround(f39 + f27);
   i18 = i36 << 1;
   i36 = i15 + (i18 << 3) | 0;
   HEAPF32[i36 >> 2] = f21;
   HEAPF32[i36 + 4 >> 2] = f30;
   f30 = Math_fround(f23 - f38);
   f23 = Math_fround(f27 - f39);
   i36 = i15 + ((i18 | 1) << 3) | 0;
   HEAPF32[i36 >> 2] = f30;
   HEAPF32[i36 + 4 >> 2] = f23;
   i36 = i12 & 65535;
   HEAP16[i25 >> 1] = i36;
   i18 = i29 & 65535;
   HEAP16[i25 + 2 >> 1] = i18;
   i31 = i29 + 2 & 65535;
   HEAP16[i25 + 4 >> 1] = i31;
   HEAP16[i25 + 6 >> 1] = i31;
   HEAP16[i25 + 8 >> 1] = i12 + 2;
   HEAP16[i25 + 10 >> 1] = i36;
   i31 = i12 + 1 & 65535;
   HEAP16[i25 + 12 >> 1] = i31;
   HEAP16[i25 + 14 >> 1] = i29 + 1;
   HEAP16[i25 + 16 >> 1] = i18;
   HEAP16[i25 + 18 >> 1] = i18;
   HEAP16[i25 + 20 >> 1] = i36;
   HEAP16[i25 + 22 >> 1] = i31;
   i25 = i25 + 24 | 0;
  } while ((i32 | 0) != (i11 | 0));
  HEAP32[i22 >> 2] = i25;
  if ((i3 | 0) > 0) {
   i25 = i1 + 52 | 0;
   i1 = 0;
   i22 = HEAP32[i25 >> 2] | 0;
   do {
    i11 = i2 + (i1 << 3) | 0;
    i32 = HEAP32[i11 + 4 >> 2] | 0;
    i12 = i22;
    HEAP32[i12 >> 2] = HEAP32[i11 >> 2];
    HEAP32[i12 + 4 >> 2] = i32;
    i32 = (HEAP32[i25 >> 2] | 0) + 8 | 0;
    HEAP32[i32 >> 2] = i9;
    HEAP32[i32 + 4 >> 2] = i10;
    i32 = HEAP32[i25 >> 2] | 0;
    HEAP32[i32 + 16 >> 2] = i4;
    i12 = i1 << 1;
    i11 = i15 + (i12 << 3) | 0;
    i14 = HEAP32[i11 + 4 >> 2] | 0;
    i5 = i32 + 20 | 0;
    HEAP32[i5 >> 2] = HEAP32[i11 >> 2];
    HEAP32[i5 + 4 >> 2] = i14;
    i14 = (HEAP32[i25 >> 2] | 0) + 28 | 0;
    HEAP32[i14 >> 2] = i9;
    HEAP32[i14 + 4 >> 2] = i10;
    i14 = HEAP32[i25 >> 2] | 0;
    HEAP32[i14 + 36 >> 2] = i17;
    i5 = i15 + ((i12 | 1) << 3) | 0;
    i12 = HEAP32[i5 + 4 >> 2] | 0;
    i11 = i14 + 40 | 0;
    HEAP32[i11 >> 2] = HEAP32[i5 >> 2];
    HEAP32[i11 + 4 >> 2] = i12;
    i12 = (HEAP32[i25 >> 2] | 0) + 48 | 0;
    HEAP32[i12 >> 2] = i9;
    HEAP32[i12 + 4 >> 2] = i10;
    i12 = HEAP32[i25 >> 2] | 0;
    HEAP32[i12 + 56 >> 2] = i17;
    i22 = i12 + 60 | 0;
    HEAP32[i25 >> 2] = i22;
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) != (i3 | 0));
   i37 = i8;
  } else i37 = i8;
 }
 HEAP32[i37 >> 2] = (HEAP32[i37 >> 2] | 0) + (i16 & 65535);
 STACKTOP = i7;
 return;
}

function __ZL19stbtt_GetGlyphShapePK14stbtt_fontinfoiPP12stbtt_vertex(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, f79 = f0, i80 = 0, f81 = f0, f82 = f0, i83 = 0, f84 = f0, f85 = f0, f86 = f0, f87 = f0, f88 = f0, f89 = f0, i90 = 0, f91 = f0, i92 = 0, i93 = 0, i94 = 0, i95 = 0, i96 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 i6 = i5 + 48 | 0;
 i7 = i5;
 if (HEAP32[i1 + 60 >> 2] | 0) {
  i8 = i6 + 4 | 0;
  i9 = i8 + 44 | 0;
  do {
   HEAP32[i8 >> 2] = 0;
   i8 = i8 + 4 | 0;
  } while ((i8 | 0) < (i9 | 0));
  HEAP32[i6 >> 2] = 1;
  i8 = i7;
  i9 = i8 + 48 | 0;
  do {
   HEAP32[i8 >> 2] = 0;
   i8 = i8 + 4 | 0;
  } while ((i8 | 0) < (i9 | 0));
  if (!(__ZL21stbtt__run_charstringPK14stbtt_fontinfoiP12stbtt__csctx(i1, i2, i6) | 0)) i4 = 84; else {
   i8 = i6 + 44 | 0;
   i9 = __ZN5ImGui8MemAllocEj((HEAP32[i8 >> 2] | 0) * 14 | 0) | 0;
   HEAP32[i3 >> 2] = i9;
   HEAP32[i7 + 40 >> 2] = i9;
   if (!(__ZL21stbtt__run_charstringPK14stbtt_fontinfoiP12stbtt__csctx(i1, i2, i7) | 0)) i4 = 84; else {
    i9 = HEAP32[i7 + 44 >> 2] | 0;
    if ((i9 | 0) == (HEAP32[i8 >> 2] | 0)) i10 = i9; else ___assert_fail(54934, 50789, 2230, 54984);
   }
  }
  if ((i4 | 0) == 84) {
   HEAP32[i3 >> 2] = 0;
   i10 = 0;
  }
  i11 = i10;
  STACKTOP = i5;
  return i11 | 0;
 }
 i10 = HEAP32[i1 + 4 >> 2] | 0;
 i9 = __ZL20stbtt__GetGlyfOffsetPK14stbtt_fontinfoi(i1, i2) | 0;
 HEAP32[i3 >> 2] = 0;
 if ((i9 | 0) < 0) {
  i11 = 0;
  STACKTOP = i5;
  return i11 | 0;
 }
 i2 = i10 + i9 | 0;
 i9 = HEAPU8[i2 >> 0] << 8 | HEAPU8[i2 + 1 >> 0];
 i10 = i9 & 65535;
 L15 : do if (i10 << 16 >> 16 > 0) {
  i8 = i2 + 10 | 0;
  i7 = i9 << 16 >> 15;
  i12 = i8 + i7 | 0;
  i13 = HEAP8[i12 >> 0] | 0;
  i14 = HEAP8[i12 + 1 >> 0] | 0;
  i15 = i12 + -2 | 0;
  i16 = HEAPU8[i15 >> 0] << 8 | HEAPU8[i15 + 1 >> 0];
  i15 = __ZN5ImGui8MemAllocEj(((i7 | 1) + i16 | 0) * 14 | 0) | 0;
  if (!i15) {
   i11 = 0;
   STACKTOP = i5;
   return i11 | 0;
  }
  i17 = 0;
  i18 = 0;
  i19 = 0;
  i20 = i12 + 2 + ((i13 & 255) << 8 | i14 & 255) | 0;
  while (1) {
   if (!(i18 << 24 >> 24)) {
    i14 = i20 + 1 | 0;
    i13 = HEAP8[i20 >> 0] | 0;
    if (!(i13 & 8)) {
     i21 = i13;
     i22 = 0;
     i23 = i14;
    } else {
     i21 = i13;
     i22 = HEAP8[i14 >> 0] | 0;
     i23 = i20 + 2 | 0;
    }
   } else {
    i21 = i17;
    i22 = i18 + -1 << 24 >> 24;
    i23 = i20;
   }
   HEAP8[i15 + ((i19 + i7 | 0) * 14 | 0) + 12 >> 0] = i21;
   if ((i19 | 0) < (i16 | 0)) {
    i17 = i21;
    i18 = i22;
    i19 = i19 + 1 | 0;
    i20 = i23;
   } else {
    i24 = 0;
    i25 = 0;
    i26 = i23;
    break;
   }
  }
  while (1) {
   i20 = i25 + i7 | 0;
   i19 = HEAPU8[i15 + (i20 * 14 | 0) + 12 >> 0] | 0;
   if (!(i19 & 2)) if (!(i19 & 16)) {
    i27 = ((HEAPU8[i26 >> 0] << 8 | HEAPU8[i26 + 1 >> 0]) << 16 >> 16) + i24 | 0;
    i28 = i26 + 2 | 0;
   } else {
    i27 = i24;
    i28 = i26;
   } else {
    i18 = HEAPU8[i26 >> 0] | 0;
    i27 = (i19 & 16 | 0 ? i18 : 0 - i18 | 0) + i24 | 0;
    i28 = i26 + 1 | 0;
   }
   HEAP16[i15 + (i20 * 14 | 0) >> 1] = i27;
   if ((i25 | 0) < (i16 | 0)) {
    i24 = i27;
    i25 = i25 + 1 | 0;
    i26 = i28;
   } else {
    i29 = 0;
    i30 = 0;
    i31 = i28;
    break;
   }
  }
  while (1) {
   i20 = i30 + i7 | 0;
   i18 = HEAPU8[i15 + (i20 * 14 | 0) + 12 >> 0] | 0;
   if (!(i18 & 4)) if (!(i18 & 32)) {
    i32 = ((HEAPU8[i31 >> 0] << 8 | HEAPU8[i31 + 1 >> 0]) << 16 >> 16) + i29 | 0;
    i33 = i31 + 2 | 0;
   } else {
    i32 = i29;
    i33 = i31;
   } else {
    i19 = HEAPU8[i31 >> 0] | 0;
    i32 = (i18 & 32 | 0 ? i19 : 0 - i19 | 0) + i29 | 0;
    i33 = i31 + 1 | 0;
   }
   HEAP16[i15 + (i20 * 14 | 0) + 2 >> 1] = i32;
   if ((i30 | 0) < (i16 | 0)) {
    i29 = i32;
    i30 = i30 + 1 | 0;
    i31 = i33;
   } else {
    i34 = 0;
    i35 = 0;
    i36 = 0;
    i37 = 0;
    i38 = 0;
    i39 = 0;
    i40 = 0;
    i41 = 0;
    i42 = 0;
    i43 = 0;
    i44 = 0;
    i45 = 0;
    break;
   }
  }
  while (1) {
   i20 = i45 + i7 | 0;
   i19 = i15 + (i20 * 14 | 0) | 0;
   i18 = HEAP8[i19 + 12 >> 0] | 0;
   i17 = HEAP16[i19 >> 1] | 0;
   i14 = i17 << 16 >> 16;
   i13 = HEAP16[i19 + 2 >> 1] | 0;
   i19 = i13 << 16 >> 16;
   do if ((i36 | 0) == (i45 | 0)) {
    if (!i45) i46 = i34; else {
     i12 = (i44 | 0) != 0;
     do if (!i43) {
      i47 = i34 + 1 | 0;
      i48 = i15 + (i34 * 14 | 0) | 0;
      i49 = i48 | 0;
      i50 = i48 + 12 | 0;
      if (i12) {
       HEAP8[i50 >> 0] = 3;
       HEAP16[i49 >> 1] = i40;
       i48 = i15 + (i34 * 14 | 0) | 0;
       HEAP16[i48 + 2 >> 1] = i39;
       HEAP16[i48 + 4 >> 1] = i42;
       i51 = i47;
       i52 = i41 & 65535;
       i53 = i34;
       break;
      } else {
       HEAP8[i50 >> 0] = 2;
       HEAP16[i49 >> 1] = i40;
       i49 = i15 + (i34 * 14 | 0) | 0;
       HEAP16[i49 + 2 >> 1] = i39;
       HEAP16[i49 + 4 >> 1] = 0;
       i51 = i47;
       i52 = 0;
       i53 = i34;
       break;
      }
     } else {
      if (i12) {
       i47 = i15 + (i34 * 14 | 0) | 0;
       HEAP8[i47 + 12 >> 0] = 3;
       HEAP16[i47 >> 1] = (i38 + i42 | 0) >>> 1;
       HEAP16[i47 + 2 >> 1] = (i37 + i41 | 0) >>> 1;
       HEAP16[i47 + 4 >> 1] = i42;
       HEAP16[i47 + 6 >> 1] = i41;
       i54 = i34 + 1 | 0;
      } else i54 = i34;
      i47 = i15 + (i54 * 14 | 0) | 0;
      HEAP8[i47 + 12 >> 0] = 3;
      HEAP16[i47 >> 1] = i40;
      HEAP16[i47 + 2 >> 1] = i39;
      HEAP16[i47 + 4 >> 1] = i38;
      i51 = i54 + 1 | 0;
      i52 = i37 & 65535;
      i53 = i54;
     } while (0);
     HEAP16[i15 + (i53 * 14 | 0) + 6 >> 1] = i52;
     i46 = i51;
    }
    i12 = i18 & 1;
    i47 = (i12 ^ 1) & 255;
    do if (!(i12 << 24 >> 24)) {
     i49 = i20 + 1 | 0;
     i50 = HEAP16[i15 + (i49 * 14 | 0) >> 1] | 0;
     if (!(HEAP8[i15 + (i49 * 14 | 0) + 12 >> 0] & 1)) {
      i55 = i19;
      i56 = i14;
      i57 = (HEAP16[i15 + (i49 * 14 | 0) + 2 >> 1] | 0) + i19 >> 1;
      i58 = i50 + i14 >> 1;
      i59 = i45;
      break;
     } else {
      i55 = i19;
      i56 = i14;
      i57 = HEAP16[i15 + (i49 * 14 | 0) + 2 >> 1] | 0;
      i58 = i50;
      i59 = i45 + 1 | 0;
      break;
     }
    } else {
     i55 = i37;
     i56 = i38;
     i57 = i19;
     i58 = i14;
     i59 = i45;
    } while (0);
    i12 = i15 + (i46 * 14 | 0) | 0;
    HEAP8[i12 + 12 >> 0] = 1;
    HEAP16[i12 >> 1] = i58;
    HEAP16[i12 + 2 >> 1] = i57;
    HEAP16[i12 + 4 >> 1] = 0;
    HEAP16[i12 + 6 >> 1] = 0;
    i12 = i8 + (i35 << 1) | 0;
    i60 = i35 + 1 | 0;
    i61 = (HEAPU8[i12 >> 0] << 8 | HEAPU8[i12 + 1 >> 0]) + 1 | 0;
    i62 = i41;
    i63 = i42;
    i64 = i47;
    i65 = 0;
    i66 = i55;
    i67 = i56;
    i68 = i57;
    i69 = i58;
    i70 = i46 + 1 | 0;
    i71 = i59;
   } else {
    i12 = (i44 | 0) != 0;
    if (!(i18 & 1)) {
     if (!i12) {
      i60 = i35;
      i61 = i36;
      i62 = i19;
      i63 = i14;
      i64 = i43;
      i65 = 1;
      i66 = i37;
      i67 = i38;
      i68 = i39;
      i69 = i40;
      i70 = i34;
      i71 = i45;
      break;
     }
     i50 = i15 + (i34 * 14 | 0) | 0;
     HEAP8[i50 + 12 >> 0] = 3;
     HEAP16[i50 >> 1] = (i42 + i14 | 0) >>> 1;
     HEAP16[i50 + 2 >> 1] = (i41 + i19 | 0) >>> 1;
     HEAP16[i50 + 4 >> 1] = i42;
     HEAP16[i50 + 6 >> 1] = i41;
     i60 = i35;
     i61 = i36;
     i62 = i19;
     i63 = i14;
     i64 = i43;
     i65 = 1;
     i66 = i37;
     i67 = i38;
     i68 = i39;
     i69 = i40;
     i70 = i34 + 1 | 0;
     i71 = i45;
     break;
    }
    i50 = i34 + 1 | 0;
    i49 = i15 + (i34 * 14 | 0) | 0;
    i48 = i49 | 0;
    i72 = i49 + 12 | 0;
    if (i12) {
     HEAP8[i72 >> 0] = 3;
     HEAP16[i48 >> 1] = i17;
     i12 = i15 + (i34 * 14 | 0) | 0;
     HEAP16[i12 + 2 >> 1] = i13;
     HEAP16[i12 + 4 >> 1] = i42;
     HEAP16[i12 + 6 >> 1] = i41;
     i60 = i35;
     i61 = i36;
     i62 = i41;
     i63 = i42;
     i64 = i43;
     i65 = 0;
     i66 = i37;
     i67 = i38;
     i68 = i39;
     i69 = i40;
     i70 = i50;
     i71 = i45;
     break;
    } else {
     HEAP8[i72 >> 0] = 2;
     HEAP16[i48 >> 1] = i17;
     i48 = i15 + (i34 * 14 | 0) | 0;
     HEAP16[i48 + 2 >> 1] = i13;
     HEAP16[i48 + 4 >> 1] = 0;
     HEAP16[i48 + 6 >> 1] = 0;
     i60 = i35;
     i61 = i36;
     i62 = i41;
     i63 = i42;
     i64 = i43;
     i65 = 0;
     i66 = i37;
     i67 = i38;
     i68 = i39;
     i69 = i40;
     i70 = i50;
     i71 = i45;
     break;
    }
   } while (0);
   if ((i71 | 0) < (i16 | 0)) {
    i34 = i70;
    i35 = i60;
    i36 = i61;
    i37 = i66;
    i38 = i67;
    i39 = i68;
    i40 = i69;
    i41 = i62;
    i42 = i63;
    i43 = i64;
    i44 = i65;
    i45 = i71 + 1 | 0;
   } else break;
  }
  i16 = (i65 | 0) != 0;
  do if (!i64) {
   i8 = i70 + 1 | 0;
   i7 = i15 + (i70 * 14 | 0) | 0;
   i13 = i7 | 0;
   i17 = i7 + 12 | 0;
   if (i16) {
    HEAP8[i17 >> 0] = 3;
    HEAP16[i13 >> 1] = i69;
    i7 = i15 + (i70 * 14 | 0) | 0;
    HEAP16[i7 + 2 >> 1] = i68;
    HEAP16[i7 + 4 >> 1] = i63;
    i73 = i8;
    i74 = i62 & 65535;
    i75 = i70;
    break;
   } else {
    HEAP8[i17 >> 0] = 2;
    HEAP16[i13 >> 1] = i69;
    i13 = i15 + (i70 * 14 | 0) | 0;
    HEAP16[i13 + 2 >> 1] = i68;
    HEAP16[i13 + 4 >> 1] = 0;
    i73 = i8;
    i74 = 0;
    i75 = i70;
    break;
   }
  } else {
   if (i16) {
    i8 = i15 + (i70 * 14 | 0) | 0;
    HEAP8[i8 + 12 >> 0] = 3;
    HEAP16[i8 >> 1] = (i67 + i63 | 0) >>> 1;
    HEAP16[i8 + 2 >> 1] = (i66 + i62 | 0) >>> 1;
    HEAP16[i8 + 4 >> 1] = i63;
    HEAP16[i8 + 6 >> 1] = i62;
    i76 = i70 + 1 | 0;
   } else i76 = i70;
   i8 = i15 + (i76 * 14 | 0) | 0;
   HEAP8[i8 + 12 >> 0] = 3;
   HEAP16[i8 >> 1] = i69;
   HEAP16[i8 + 2 >> 1] = i68;
   HEAP16[i8 + 4 >> 1] = i67;
   i73 = i76 + 1 | 0;
   i74 = i66 & 65535;
   i75 = i76;
  } while (0);
  HEAP16[i15 + (i75 * 14 | 0) + 6 >> 1] = i74;
  i77 = i15;
  i78 = i73;
 } else {
  if (i10 << 16 >> 16 != -1) {
   if (i10 << 16 >> 16 >= 0) {
    i77 = 0;
    i78 = 0;
    break;
   }
   ___assert_fail(54909, 50789, 1840, 54911);
  }
  i16 = 0;
  i8 = i2 + 10 | 0;
  i13 = 0;
  i17 = 0;
  i7 = 0;
  i14 = 0;
  while (1) {
   HEAP32[i6 >> 2] = 0;
   i19 = HEAPU8[i8 + 1 >> 0] | 0;
   i18 = HEAPU8[i8 + 2 >> 0] << 8 | HEAPU8[i8 + 3 >> 0];
   if (!(i19 & 2)) {
    i4 = 57;
    break;
   }
   i20 = HEAP8[i8 + 4 >> 0] | 0;
   if (!(i19 & 1)) {
    f79 = Math_fround(i20 << 24 >> 24);
    i80 = 6;
    f81 = f79;
    f82 = Math_fround(HEAP8[i8 + 5 >> 0] | 0);
   } else {
    f79 = Math_fround((((i20 & 255) << 8 | HEAPU8[i8 + 5 >> 0]) & 65535) << 16 >> 16);
    i80 = 8;
    f81 = f79;
    f82 = Math_fround(((HEAPU8[i8 + 6 >> 0] << 8 | HEAPU8[i8 + 7 >> 0]) & 65535) << 16 >> 16);
   }
   i20 = i8 + i80 | 0;
   do if (!(i19 & 8)) {
    if (i19 & 64 | 0) {
     f79 = Math_fround(Math_fround(((HEAPU8[i20 >> 0] << 8 | HEAPU8[i20 + 1 >> 0]) & 65535) << 16 >> 16) * Math_fround(.0000610351563));
     i50 = i20 + 2 | 0;
     i83 = i20 + 4 | 0;
     f84 = f79;
     f85 = Math_fround(0.0);
     f86 = Math_fround(0.0);
     f87 = Math_fround(Math_fround(((HEAPU8[i50 >> 0] << 8 | HEAPU8[i50 + 1 >> 0]) & 65535) << 16 >> 16) * Math_fround(.0000610351563));
     break;
    }
    if (!(i19 & 128)) {
     i83 = i20;
     f84 = Math_fround(1.0);
     f85 = Math_fround(0.0);
     f86 = Math_fround(0.0);
     f87 = Math_fround(1.0);
    } else {
     f79 = Math_fround(Math_fround(((HEAPU8[i20 >> 0] << 8 | HEAPU8[i20 + 1 >> 0]) & 65535) << 16 >> 16) * Math_fround(.0000610351563));
     i50 = i20 + 2 | 0;
     f88 = Math_fround(Math_fround(((HEAPU8[i50 >> 0] << 8 | HEAPU8[i50 + 1 >> 0]) & 65535) << 16 >> 16) * Math_fround(.0000610351563));
     i50 = i20 + 4 | 0;
     f89 = Math_fround(Math_fround(((HEAPU8[i50 >> 0] << 8 | HEAPU8[i50 + 1 >> 0]) & 65535) << 16 >> 16) * Math_fround(.0000610351563));
     i50 = i20 + 6 | 0;
     i83 = i20 + 8 | 0;
     f84 = f79;
     f85 = f88;
     f86 = f89;
     f87 = Math_fround(Math_fround(((HEAPU8[i50 >> 0] << 8 | HEAPU8[i50 + 1 >> 0]) & 65535) << 16 >> 16) * Math_fround(.0000610351563));
    }
   } else {
    f89 = Math_fround(Math_fround(((HEAPU8[i20 >> 0] << 8 | HEAPU8[i20 + 1 >> 0]) & 65535) << 16 >> 16) * Math_fround(.0000610351563));
    i83 = i20 + 2 | 0;
    f84 = f89;
    f85 = Math_fround(0.0);
    f86 = Math_fround(0.0);
    f87 = f89;
   } while (0);
   f89 = Math_fround(Math_sqrt(Math_fround(Math_fround(f85 * f85) + Math_fround(f84 * f84))));
   f88 = Math_fround(Math_sqrt(Math_fround(Math_fround(f87 * f87) + Math_fround(f86 * f86))));
   i20 = __ZL19stbtt_GetGlyphShapePK14stbtt_fontinfoiPP12stbtt_vertex(i1, i18, i6) | 0;
   if ((i20 | 0) > 0) {
    i90 = HEAP32[i6 >> 2] | 0;
    i50 = 0;
    do {
     i48 = i90 + (i50 * 14 | 0) | 0;
     i72 = i48 | 0;
     i12 = i48 + 2 | 0;
     f79 = Math_fround(HEAP16[i72 >> 1] | 0);
     f91 = Math_fround(HEAP16[i12 >> 1] | 0);
     i49 = ~~Math_fround(f89 * Math_fround(f81 + Math_fround(Math_fround(f84 * f79) + Math_fround(f86 * f91))));
     HEAP16[i72 >> 1] = i49;
     i49 = ~~Math_fround(f88 * Math_fround(f82 + Math_fround(Math_fround(f85 * f79) + Math_fround(f87 * f91))));
     HEAP16[i12 >> 1] = i49;
     i49 = i48 + 4 | 0;
     i12 = i48 + 6 | 0;
     f91 = Math_fround(HEAP16[i49 >> 1] | 0);
     f79 = Math_fround(HEAP16[i12 >> 1] | 0);
     i48 = ~~Math_fround(f89 * Math_fround(f81 + Math_fround(Math_fround(f84 * f91) + Math_fround(f86 * f79))));
     HEAP16[i49 >> 1] = i48;
     i48 = ~~Math_fround(f88 * Math_fround(f82 + Math_fround(Math_fround(f85 * f91) + Math_fround(f87 * f79))));
     HEAP16[i12 >> 1] = i48;
     i50 = i50 + 1 | 0;
    } while ((i50 | 0) != (i20 | 0));
    i50 = i20 + i13 | 0;
    i18 = __ZN5ImGui8MemAllocEj(i50 * 14 | 0) | 0;
    if (!i18) break;
    if ((i13 | 0) > 0) _memcpy(i18 | 0, i7 | 0, i13 * 14 | 0) | 0;
    _memcpy(i18 + (i13 * 14 | 0) | 0, i90 | 0, i20 * 14 | 0) | 0;
    if (i16 | 0) __ZN5ImGui7MemFreeEPv(i14);
    __ZN5ImGui7MemFreeEPv(i90);
    i92 = i18;
    i93 = i50;
    i94 = i18;
    i95 = i18;
    i96 = i18;
   } else {
    i92 = i16;
    i93 = i13;
    i94 = i17;
    i95 = i14;
    i96 = i7;
   }
   if (!(i19 & 32)) {
    i77 = i92;
    i78 = i93;
    break L15;
   } else {
    i16 = i92;
    i8 = i83;
    i13 = i93;
    i17 = i94;
    i7 = i96;
    i14 = i95;
   }
  }
  if ((i4 | 0) == 57) ___assert_fail(54909, 50789, 1787, 54911);
  if (i16 | 0) __ZN5ImGui7MemFreeEPv(i17);
  __ZN5ImGui7MemFreeEPv(i90);
  i11 = 0;
  STACKTOP = i5;
  return i11 | 0;
 } while (0);
 HEAP32[i3 >> 2] = i77;
 i11 = i78;
 STACKTOP = i5;
 return i11 | 0;
}

function __ZN5ImGui9BeginMenuEPKcb(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, f15 = f0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, f21 = f0, f22 = f0, f23 = f0, f24 = f0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, f29 = f0, f30 = f0, f31 = f0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, f45 = f0, f46 = f0, f47 = f0, f48 = f0, i49 = 0, f50 = f0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4;
 i6 = i4 + 8 | 0;
 i7 = HEAP32[1460598] | 0;
 i8 = HEAP32[i7 + 6392 >> 2] | 0;
 HEAP8[i8 + 120 >> 0] = 1;
 if (HEAP8[i8 + 123 >> 0] | 0) {
  i9 = 0;
  STACKTOP = i4;
  return i9 | 0;
 }
 i10 = i8 + 452 | 0;
 i11 = HEAP32[i10 >> 2] | 0;
 if ((i11 | 0) <= 0) ___assert_fail(38278, 56850, 1245, 38287);
 i12 = i8 + 460 | 0;
 i13 = __Z6ImHashPKvij(i1, 0, HEAP32[(HEAP32[i12 >> 2] | 0) + (i11 + -1 << 2) >> 2] | 0) | 0;
 i11 = HEAP32[1460598] | 0;
 if ((HEAP32[i11 + 6420 >> 2] | 0) == (i13 | 0)) HEAP8[i11 + 6432 >> 0] = 1;
 if ((HEAP32[i11 + 6424 >> 2] | 0) == (i13 | 0)) HEAP8[i11 + 6436 >> 0] = 1;
 if ((i1 | 0) == (-1 | 0)) {
  i14 = 0;
  f15 = Math_fround(0.0);
  i16 = i11;
 } else {
  i17 = i1;
  L14 : while (1) {
   switch (HEAP8[i17 >> 0] | 0) {
   case 0:
    {
     i18 = i17;
     break L14;
     break;
    }
   case 35:
    {
     i19 = i17 + 1 | 0;
     if ((HEAP8[i19 >> 0] | 0) == 35) {
      i18 = i17;
      break L14;
     } else i20 = i19;
     break;
    }
   default:
    i20 = i17 + 1 | 0;
   }
   if ((i20 | 0) == (-1 | 0)) {
    i18 = -1;
    break;
   } else i17 = i20;
  }
  i20 = HEAP32[i11 + 6180 >> 2] | 0;
  f21 = Math_fround(HEAPF32[i11 + 6184 >> 2]);
  if ((i18 | 0) == (i1 | 0)) {
   i14 = 0;
   f15 = Math_fround(0.0);
   i16 = i11;
  } else {
   __ZNK6ImFont13CalcTextSizeAEfffPKcS1_PS1_(i5, i20, f21, Math_fround(3402823469999999843913219.0e14), Math_fround(-1.0), i1, i18, 0);
   f22 = Math_fround(HEAPF32[i5 >> 2]);
   if (f22 > Math_fround(0.0)) {
    f23 = Math_fround(f22 - Math_fround(f21 / Math_fround(HEAPF32[i20 >> 2])));
    HEAPF32[i5 >> 2] = f23;
    f24 = f23;
   } else f24 = f22;
   f22 = Math_fround(~~Math_fround(f24 + Math_fround(.949999988)) | 0);
   i14 = (HEAPF32[tempDoublePtr >> 2] = f22, HEAP32[tempDoublePtr >> 2] | 0);
   f15 = f22;
   i16 = HEAP32[1460598] | 0;
  }
 }
 i20 = HEAP32[i16 + 6524 >> 2] | 0;
 if ((HEAP32[i16 + 6512 >> 2] | 0) > (i20 | 0)) i25 = (HEAP32[(HEAP32[i16 + 6520 >> 2] | 0) + (i20 * 36 | 0) >> 2] | 0) == (i13 | 0); else i25 = 0;
 i20 = i8 + 8 | 0;
 i18 = HEAP32[i20 >> 2] | 0;
 if (!(i18 & 67108864)) {
  i11 = HEAP32[i7 + 6524 >> 2] | 0;
  if ((HEAP32[i7 + 6512 >> 2] | 0) > (i11 | 0)) {
   i17 = HEAP32[i10 >> 2] | 0;
   if ((i17 | 0) <= 0) ___assert_fail(38278, 56850, 1245, 38287);
   i10 = i7 + 6644 | 0;
   i19 = HEAP32[i10 >> 2] | 0;
   if ((HEAP32[(HEAP32[i7 + 6520 >> 2] | 0) + (i11 * 36 | 0) + 16 >> 2] | 0) == (HEAP32[(HEAP32[i12 >> 2] | 0) + (i17 + -1 << 2) >> 2] | 0)) {
    HEAP32[i10 >> 2] = i8;
    i26 = i19;
    i27 = i10;
    i28 = 1;
   } else {
    i26 = i19;
    i27 = i10;
    i28 = 0;
   }
  } else i3 = 23;
 } else i3 = 23;
 if ((i3 | 0) == 23) {
  i10 = i7 + 6644 | 0;
  i26 = HEAP32[i10 >> 2] | 0;
  i27 = i10;
  i28 = 0;
 }
 i10 = i8 + 196 | 0;
 i19 = HEAP32[i10 >> 2] | 0;
 i17 = HEAP32[i8 + 200 >> 2] | 0;
 i12 = i8 + 344 | 0;
 f22 = (HEAP32[tempDoublePtr >> 2] = i19, Math_fround(HEAPF32[tempDoublePtr >> 2]));
 do if ((HEAP32[i12 >> 2] | 0) == 1) {
  f24 = Math_fround(f22 - Math_fround(HEAPF32[i8 + 60 >> 2]));
  f23 = (HEAP32[tempDoublePtr >> 2] = i17, Math_fround(HEAPF32[tempDoublePtr >> 2]));
  f21 = Math_fround(f23 - Math_fround(HEAPF32[i7 + 5412 >> 2]));
  if (!(i18 & 1024)) f29 = Math_fround(0.0); else {
   f23 = Math_fround(HEAPF32[i8 + 324 >> 2]);
   f30 = Math_fround(HEAPF32[i16 + 6188 >> 2]);
   f31 = Math_fround(f23 + Math_fround(f30 * Math_fround(HEAPF32[i8 + 624 >> 2])));
   f29 = Math_fround(f31 + Math_fround(Math_fround(HEAPF32[i16 + 5412 >> 2]) * Math_fround(2.0)));
  }
  f31 = Math_fround(f21 + f29);
  i11 = (HEAPF32[tempDoublePtr >> 2] = f24, HEAP32[tempDoublePtr >> 2] | 0);
  i32 = (HEAPF32[tempDoublePtr >> 2] = f31, HEAP32[tempDoublePtr >> 2] | 0);
  i33 = i7 + 5424 | 0;
  f31 = Math_fround(f22 + Math_fround(~~Math_fround(Math_fround(HEAPF32[i33 >> 2]) * Math_fround(.5)) | 0));
  HEAPF32[i10 >> 2] = f31;
  f31 = Math_fround(Math_fround(HEAPF32[i33 >> 2]) * Math_fround(2.0));
  f24 = Math_fround(Math_fround(HEAPF32[i7 + 5428 >> 2]) * Math_fround(2.0));
  HEAPF32[i5 >> 2] = f31;
  HEAPF32[i5 + 4 >> 2] = f24;
  __ZN5ImGui12PushStyleVarEiRK6ImVec2(13, i5);
  HEAP32[i5 >> 2] = i14;
  HEAPF32[i5 + 4 >> 2] = Math_fround(0.0);
  i34 = __ZN5ImGui10SelectableEPKcbiRK6ImVec2(i1, i25, i2 ? 25 : 89, i5) | 0;
  __ZN5ImGui11PopStyleVarEi(1);
  f24 = Math_fround(~~Math_fround(Math_fround(HEAPF32[i33 >> 2]) * Math_fround(-.5)) | 0);
  f31 = Math_fround(Math_fround(HEAPF32[i10 >> 2]) + f24);
  HEAPF32[i10 >> 2] = f31;
  i33 = i34 & 1;
  if (i2) {
   i35 = i34;
   i36 = i33;
   i37 = i11;
   i38 = i32;
   i3 = 47;
  } else {
   i39 = i34;
   i40 = i33;
   i41 = i11;
   i42 = i32;
   i43 = 0;
  }
 } else {
  f31 = (HEAP32[tempDoublePtr >> 2] = i17, Math_fround(HEAPF32[tempDoublePtr >> 2]));
  f24 = Math_fround(f31 - Math_fround(HEAPF32[i7 + 5364 >> 2]));
  i32 = (HEAPF32[tempDoublePtr >> 2] = f24, HEAP32[tempDoublePtr >> 2] | 0);
  i11 = i7 + 6184 | 0;
  f24 = Math_fround(~~Math_fround(Math_fround(HEAPF32[i11 >> 2]) * Math_fround(1.20000005)) | 0);
  i33 = i8 + 564 | 0;
  i34 = i8 + 584 | 0;
  f21 = Math_fround(HEAPF32[i34 >> 2]);
  f30 = f21 >= f15 ? f21 : f15;
  HEAPF32[i34 >> 2] = f30;
  i34 = i8 + 588 | 0;
  f21 = Math_fround(HEAPF32[i34 >> 2]);
  i44 = f21 >= Math_fround(0.0);
  f23 = i44 ? f21 : Math_fround(0.0);
  HEAPF32[i34 >> 2] = f23;
  i34 = i8 + 592 | 0;
  f21 = Math_fround(HEAPF32[i34 >> 2]);
  f45 = f21 >= f24 ? f21 : f24;
  HEAPF32[i34 >> 2] = f45;
  i34 = i8 + 556 | 0;
  f24 = Math_fround(f30 + Math_fround(0.0));
  HEAPF32[i33 >> 2] = f24;
  if (f23 > Math_fround(0.0)) f46 = Math_fround(HEAPF32[i34 >> 2]); else f46 = Math_fround(0.0);
  f30 = Math_fround(f24 + Math_fround(f23 + f46));
  HEAPF32[i33 >> 2] = f30;
  if (f45 > Math_fround(0.0)) f47 = Math_fround(HEAPF32[i34 >> 2]); else f47 = Math_fround(0.0);
  f23 = Math_fround(f30 + Math_fround(f45 + f47));
  HEAPF32[i33 >> 2] = f23;
  f45 = Math_fround(HEAPF32[i8 + 560 >> 2]);
  f30 = f45 >= f23 ? f45 : f23;
  i33 = HEAP32[i16 + 6392 >> 2] | 0;
  f23 = Math_fround(HEAPF32[i33 + 536 >> 2]);
  f45 = Math_fround(HEAPF32[i33 + 12 >> 2]);
  f24 = Math_fround(f23 - f45);
  i34 = HEAP32[i33 + 448 >> 2] | 0;
  do if (!i34) f48 = f24; else {
   i44 = HEAP32[i34 + 12 >> 2] | 0;
   i49 = i44 + ((i44 | 0) > -2 & 1) | 0;
   if ((i49 | 0) < (HEAP32[i34 + 44 >> 2] | 0)) {
    f23 = Math_fround(HEAPF32[(HEAP32[i34 + 52 >> 2] | 0) + (i49 * 28 | 0) >> 2]);
    f21 = Math_fround(HEAPF32[i34 + 20 >> 2]);
    f50 = Math_fround(f21 + Math_fround(f23 * Math_fround(Math_fround(HEAPF32[i34 + 24 >> 2]) - f21)));
    f48 = Math_fround(f50 - Math_fround(HEAPF32[i33 + 60 >> 2]));
    break;
   } else ___assert_fail(32132, 31803, 13059, 32169);
  } while (0);
  f24 = Math_fround(Math_fround(f48 - Math_fround(Math_fround(HEAPF32[i33 + 196 >> 2]) - f45)) - f30);
  i34 = f24 <= Math_fround(0.0);
  f50 = i34 ? Math_fround(0.0) : f24;
  HEAPF32[i5 >> 2] = f30;
  HEAPF32[i5 + 4 >> 2] = Math_fround(0.0);
  i34 = __ZN5ImGui10SelectableEPKcbiRK6ImVec2(i1, i25, i2 ? 153 : 217, i5) | 0;
  if (!i2) __ZN5ImGui14PushStyleColorEiRK6ImVec4(0, i7 + 5524 | 0);
  f24 = Math_fround(f50 + Math_fround(HEAPF32[i8 + 576 >> 2]));
  f50 = Math_fround(Math_fround(f24 + Math_fround(Math_fround(HEAPF32[i11 >> 2]) * Math_fround(.300000012))) + f22);
  f24 = Math_fround(f31 + Math_fround(0.0));
  HEAPF32[i6 >> 2] = f50;
  HEAPF32[i6 + 4 >> 2] = f24;
  HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i5 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
  __ZN5ImGui11RenderArrowE6ImVec2if(i5, 1, Math_fround(1.0));
  if (i2) {
   i35 = i34;
   i36 = i34 & 1;
   i37 = i19;
   i38 = i32;
   i3 = 47;
   break;
  }
  i49 = HEAP32[1460598] | 0;
  i44 = i49 + 6476 | 0;
  i51 = HEAP32[i44 >> 2] | 0;
  if ((i51 | 0) <= 0) ___assert_fail(38278, 56850, 1245, 38287);
  i52 = HEAP32[i49 + 6484 >> 2] | 0;
  i53 = i51 + -1 | 0;
  i51 = i52 + (i53 * 20 | 0) | 0;
  i53 = i51 + 4 | 0;
  i52 = i49 + 5508 + (HEAP32[i51 >> 2] << 4) | 0;
  HEAP32[i52 >> 2] = HEAP32[i53 >> 2];
  HEAP32[i52 + 4 >> 2] = HEAP32[i53 + 4 >> 2];
  HEAP32[i52 + 8 >> 2] = HEAP32[i53 + 8 >> 2];
  HEAP32[i52 + 12 >> 2] = HEAP32[i53 + 12 >> 2];
  i53 = HEAP32[i44 >> 2] | 0;
  if ((i53 | 0) > 0) {
   HEAP32[i44 >> 2] = i53 + -1;
   i39 = i34;
   i40 = i34 & 1;
   i41 = i19;
   i42 = i32;
   i43 = 0;
   break;
  } else ___assert_fail(38278, 56850, 1268, 31920);
 } while (0);
 if ((i3 | 0) == 47) {
  i39 = i35;
  i40 = i36;
  i41 = i37;
  i42 = i38;
  i43 = __ZN5ImGui13ItemHoverableERK6ImRectj(i8 + 264 | 0, i13) | 0;
 }
 if (i28) HEAP32[i27 >> 2] = i26;
 if (!(HEAP32[i12 >> 2] | 0)) {
  i12 = (HEAP32[i7 + 6396 >> 2] | 0) == (i8 | 0);
  if (i12) {
   i26 = HEAP32[i7 + 6524 >> 2] | 0;
   if ((HEAP32[i7 + 6512 >> 2] | 0) > (i26 | 0)) {
    i27 = HEAP32[i7 + 6520 >> 2] | 0;
    if ((HEAP32[i27 + (i26 * 36 | 0) + 8 >> 2] | 0) == (i8 | 0)) if (!(HEAP32[i20 >> 2] & 1024)) {
     i38 = HEAP32[i27 + (i26 * 36 | 0) + 4 >> 2] | 0;
     if (!i38) i54 = 0; else {
      f22 = Math_fround(HEAPF32[i38 + 12 >> 2]);
      f48 = Math_fround(HEAPF32[i38 + 16 >> 2]);
      f47 = Math_fround(f22 + Math_fround(HEAPF32[i38 + 20 >> 2]));
      f46 = Math_fround(f48 + Math_fround(HEAPF32[i38 + 24 >> 2]));
      f15 = Math_fround(HEAPF32[i7 + 212 >> 2]);
      f29 = Math_fround(f15 - Math_fround(HEAPF32[i7 + 896 >> 2]));
      f24 = Math_fround(HEAPF32[i7 + 216 >> 2]);
      f50 = Math_fround(f24 - Math_fround(HEAPF32[i7 + 900 >> 2]));
      i38 = Math_fround(HEAPF32[i8 + 12 >> 2]) < f22;
      f21 = i38 ? f22 : f47;
      f47 = Math_fround(Math_fround(Math_abs(Math_fround(f29 - f21))) * Math_fround(.300000012));
      i8 = f47 < Math_fround(5.0);
      i26 = f47 > Math_fround(30.0);
      f22 = i26 ? Math_fround(30.0) : f47;
      f47 = i8 ? Math_fround(5.0) : f22;
      f22 = Math_fround(f29 + (i38 ? Math_fround(-.5) : Math_fround(.5)));
      f29 = Math_fround(Math_fround(f48 - f47) - f50);
      i38 = f29 >= Math_fround(-100.0);
      f48 = Math_fround(f50 + (i38 ? f29 : Math_fround(-100.0)));
      f29 = Math_fround(Math_fround(f46 + f47) - f50);
      i38 = f29 < Math_fround(100.0);
      f47 = Math_fround(f50 + (i38 ? f29 : Math_fround(100.0)));
      f29 = Math_fround(f15 - f21);
      i38 = Math_fround(Math_fround(f29 * Math_fround(f48 - f47)) - Math_fround(Math_fround(f21 - f21) * Math_fround(f24 - f47))) < Math_fround(0.0);
      if (Math_fround(Math_fround(f29 * Math_fround(f50 - f48)) - Math_fround(Math_fround(f22 - f21) * Math_fround(f24 - f48))) < Math_fround(0.0) ^ i38) i54 = 0; else i54 = i38 ^ Math_fround(Math_fround(Math_fround(f15 - f22) * Math_fround(f47 - f50)) - Math_fround(Math_fround(f24 - f50) * Math_fround(f21 - f22))) < Math_fround(0.0) ^ 1;
     }
    } else i54 = 0; else i54 = 0;
   } else i54 = 0;
  } else i54 = 0;
  i38 = i25 ^ 1;
  if (i43 | i38 | i12 ^ 1) i55 = 0; else {
   i12 = HEAP32[i7 + 6412 >> 2] | 0;
   i55 = (i54 | ((i12 | 0) == 0 | (i12 | 0) == (i13 | 0))) ^ 1;
  }
  i12 = (i25 | i43 ^ 1 | i54) ^ 1;
  i54 = (HEAP32[i7 + 6652 >> 2] | 0) == (i13 | 0);
  i8 = i54 ? i38 & 1 : i25 | i12 ? i12 & 1 : i43 ? i40 : 0;
  i40 = i54 ? i25 : i55;
  if ((HEAP32[i7 + 6648 >> 2] | 0) == (i13 | 0)) if (!(HEAP8[i7 + 6757 >> 0] | 0)) i56 = i8; else if ((HEAP32[i7 + 6768 >> 2] | 0) == 1) {
   i55 = HEAP32[1460598] | 0;
   HEAP8[i55 + 6757 >> 0] = 0;
   i54 = HEAP8[i55 + 6733 >> 0] | 0;
   HEAP8[i55 + 6732 >> 0] = i54;
   if (!(i54 << 24 >> 24)) i56 = 1; else if (!(HEAP32[i55 + 6644 >> 2] | 0)) ___assert_fail(34237, 31803, 2509, 34255); else i56 = 1;
  } else i56 = i8; else i56 = i8;
  i57 = i25;
  i58 = i40;
  i59 = (i56 & 1) != 0;
 } else {
  i56 = i28 & (i25 & i39);
  if (i39 | i56) {
   i57 = i25 ^ i56;
   i58 = i56;
   i59 = i56 ^ 1;
  } else if (i25 | i28 & i43 ^ 1) if ((HEAP32[i7 + 6648 >> 2] | 0) == (i13 | 0)) if (!(HEAP8[i7 + 6757 >> 0] | 0)) {
   i57 = i25;
   i58 = 0;
   i59 = 0;
  } else if ((HEAP32[i7 + 6768 >> 2] | 0) == 3) {
   i43 = HEAP32[1460598] | 0;
   HEAP8[i43 + 6757 >> 0] = 0;
   i28 = HEAP8[i43 + 6733 >> 0] | 0;
   HEAP8[i43 + 6732 >> 0] = i28;
   if (!(i28 << 24 >> 24)) {
    i57 = i25;
    i58 = 0;
    i59 = 1;
   } else if (!(HEAP32[i43 + 6644 >> 2] | 0)) ___assert_fail(34237, 31803, 2509, 34255); else {
    i57 = i25;
    i58 = 0;
    i59 = 1;
   }
  } else {
   i57 = i25;
   i58 = 0;
   i59 = 0;
  } else {
   i57 = i25;
   i58 = 0;
   i59 = 0;
  } else {
   i57 = 0;
   i58 = 0;
   i59 = 1;
  }
 }
 if (i58 | i2 ^ 1) {
  i2 = HEAP32[1460598] | 0;
  i58 = HEAP32[i2 + 6524 >> 2] | 0;
  if ((HEAP32[i2 + 6512 >> 2] | 0) > (i58 | 0)) if ((HEAP32[(HEAP32[i2 + 6520 >> 2] | 0) + (i58 * 36 | 0) >> 2] | 0) == (i13 | 0)) __ZL17ClosePopupToLeveli(HEAP32[i7 + 6524 >> 2] | 0);
 }
 if (!(i57 | i59 ^ 1)) if ((HEAP32[i7 + 6512 >> 2] | 0) > (HEAP32[i7 + 6524 >> 2] | 0)) {
  i7 = HEAP32[(HEAP32[1460598] | 0) + 6392 >> 2] | 0;
  i58 = HEAP32[i7 + 452 >> 2] | 0;
  if ((i58 | 0) <= 0) ___assert_fail(38278, 56850, 1245, 38287);
  i2 = __Z6ImHashPKvij(i1, 0, HEAP32[(HEAP32[i7 + 460 >> 2] | 0) + (i58 + -1 << 2) >> 2] | 0) | 0;
  i58 = HEAP32[1460598] | 0;
  if ((HEAP32[i58 + 6420 >> 2] | 0) == (i2 | 0)) HEAP8[i58 + 6432 >> 0] = 1;
  if ((HEAP32[i58 + 6424 >> 2] | 0) == (i2 | 0)) HEAP8[i58 + 6436 >> 0] = 1;
  __ZN5ImGui11OpenPopupExEj(i2);
  i9 = 0;
  STACKTOP = i4;
  return i9 | 0;
 }
 i2 = i57 | i59;
 if (i59) {
  i59 = HEAP32[(HEAP32[1460598] | 0) + 6392 >> 2] | 0;
  i57 = HEAP32[i59 + 452 >> 2] | 0;
  if ((i57 | 0) <= 0) ___assert_fail(38278, 56850, 1245, 38287);
  i58 = __Z6ImHashPKvij(i1, 0, HEAP32[(HEAP32[i59 + 460 >> 2] | 0) + (i57 + -1 << 2) >> 2] | 0) | 0;
  i57 = HEAP32[1460598] | 0;
  if ((HEAP32[i57 + 6420 >> 2] | 0) == (i58 | 0)) HEAP8[i57 + 6432 >> 0] = 1;
  if ((HEAP32[i57 + 6424 >> 2] | 0) == (i58 | 0)) HEAP8[i57 + 6436 >> 0] = 1;
  __ZN5ImGui11OpenPopupExEj(i58);
 }
 if (!i2) {
  i9 = 0;
  STACKTOP = i4;
  return i9 | 0;
 }
 i2 = HEAP32[1460598] | 0;
 HEAP32[i2 + 6564 >> 2] = i41;
 HEAP32[i2 + 6568 >> 2] = i42;
 HEAP32[i2 + 6572 >> 2] = 0;
 HEAP32[i2 + 6576 >> 2] = 0;
 HEAP32[i2 + 6536 >> 2] = 1;
 i9 = __ZN5ImGui12BeginPopupExEji(i13, HEAP32[i20 >> 2] & 335544320 | 0 ? 285212997 : 268435781) | 0;
 STACKTOP = i4;
 return i9 | 0;
}

function _decfloat(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, d75 = 0.0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, i90 = 0, i91 = 0, i92 = 0, i93 = 0, i94 = 0, i95 = 0, i96 = 0, i97 = 0, i98 = 0, i99 = 0, i100 = 0, i101 = 0, i102 = 0, i103 = 0, d104 = 0.0, i105 = 0, i106 = 0, i107 = 0, i108 = 0, i109 = 0, i110 = 0, i111 = 0, d112 = 0.0, d113 = 0.0, d114 = 0.0, d115 = 0.0, d116 = 0.0, d117 = 0.0, d118 = 0.0, d119 = 0.0, d120 = 0.0, d121 = 0.0, i122 = 0;
 i7 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(512);
 i9 = i8;
 i10 = i4 + i3 | 0;
 i11 = 0 - i10 | 0;
 i12 = i1 + 4 | 0;
 i13 = i1 + 100 | 0;
 i14 = i2;
 i2 = 0;
 L1 : while (1) {
  switch (i14 | 0) {
  case 46:
   {
    i7 = 6;
    break L1;
    break;
   }
  case 48:
   break;
  default:
   {
    i15 = 0;
    i16 = i14;
    i17 = i2;
    i18 = 0;
    i19 = 0;
    break L1;
   }
  }
  i20 = HEAP32[i12 >> 2] | 0;
  if (i20 >>> 0 < (HEAP32[i13 >> 2] | 0) >>> 0) {
   HEAP32[i12 >> 2] = i20 + 1;
   i14 = HEAPU8[i20 >> 0] | 0;
   i2 = 1;
   continue;
  } else {
   i14 = ___shgetc(i1) | 0;
   i2 = 1;
   continue;
  }
 }
 if ((i7 | 0) == 6) {
  i14 = HEAP32[i12 >> 2] | 0;
  if (i14 >>> 0 < (HEAP32[i13 >> 2] | 0) >>> 0) {
   HEAP32[i12 >> 2] = i14 + 1;
   i21 = HEAPU8[i14 >> 0] | 0;
  } else i21 = ___shgetc(i1) | 0;
  if ((i21 | 0) == 48) {
   i14 = 0;
   i20 = 0;
   while (1) {
    i22 = _i64Add(i14 | 0, i20 | 0, -1, -1) | 0;
    i23 = tempRet0;
    i24 = HEAP32[i12 >> 2] | 0;
    if (i24 >>> 0 < (HEAP32[i13 >> 2] | 0) >>> 0) {
     HEAP32[i12 >> 2] = i24 + 1;
     i25 = HEAPU8[i24 >> 0] | 0;
    } else i25 = ___shgetc(i1) | 0;
    if ((i25 | 0) == 48) {
     i14 = i22;
     i20 = i23;
    } else {
     i15 = 1;
     i16 = i25;
     i17 = 1;
     i18 = i22;
     i19 = i23;
     break;
    }
   }
  } else {
   i15 = 1;
   i16 = i21;
   i17 = i2;
   i18 = 0;
   i19 = 0;
  }
 }
 HEAP32[i9 >> 2] = 0;
 i2 = i16 + -48 | 0;
 i21 = (i16 | 0) == 46;
 L20 : do if (i21 | i2 >>> 0 < 10) {
  i25 = i9 + 496 | 0;
  i20 = 0;
  i14 = 0;
  i23 = 0;
  i22 = i15;
  i24 = i17;
  i26 = i16;
  i27 = i21;
  i28 = i2;
  i29 = i18;
  i30 = i19;
  i31 = 0;
  i32 = 0;
  L22 : while (1) {
   do if (i27) if (!i22) {
    i33 = i20;
    i34 = i14;
    i35 = 1;
    i36 = i23;
    i37 = i24;
    i38 = i31;
    i39 = i32;
    i40 = i31;
    i41 = i32;
   } else break L22; else {
    i42 = _i64Add(i31 | 0, i32 | 0, 1, 0) | 0;
    i43 = tempRet0;
    i44 = (i26 | 0) != 48;
    if ((i14 | 0) >= 125) {
     if (!i44) {
      i33 = i20;
      i34 = i14;
      i35 = i22;
      i36 = i23;
      i37 = i24;
      i38 = i29;
      i39 = i30;
      i40 = i42;
      i41 = i43;
      break;
     }
     HEAP32[i25 >> 2] = HEAP32[i25 >> 2] | 1;
     i33 = i20;
     i34 = i14;
     i35 = i22;
     i36 = i23;
     i37 = i24;
     i38 = i29;
     i39 = i30;
     i40 = i42;
     i41 = i43;
     break;
    }
    i45 = i9 + (i14 << 2) | 0;
    if (!i20) i46 = i28; else i46 = i26 + -48 + ((HEAP32[i45 >> 2] | 0) * 10 | 0) | 0;
    HEAP32[i45 >> 2] = i46;
    i45 = i20 + 1 | 0;
    i47 = (i45 | 0) == 9;
    i33 = i47 ? 0 : i45;
    i34 = i14 + (i47 & 1) | 0;
    i35 = i22;
    i36 = i44 ? i42 : i23;
    i37 = 1;
    i38 = i29;
    i39 = i30;
    i40 = i42;
    i41 = i43;
   } while (0);
   i43 = HEAP32[i12 >> 2] | 0;
   if (i43 >>> 0 < (HEAP32[i13 >> 2] | 0) >>> 0) {
    HEAP32[i12 >> 2] = i43 + 1;
    i48 = HEAPU8[i43 >> 0] | 0;
   } else i48 = ___shgetc(i1) | 0;
   i28 = i48 + -48 | 0;
   i27 = (i48 | 0) == 46;
   if (!(i27 | i28 >>> 0 < 10)) {
    i49 = i33;
    i50 = i34;
    i51 = i36;
    i52 = i35;
    i53 = i48;
    i54 = i37;
    i55 = i38;
    i56 = i40;
    i57 = i39;
    i58 = i41;
    i7 = 29;
    break L20;
   } else {
    i20 = i33;
    i14 = i34;
    i23 = i36;
    i22 = i35;
    i24 = i37;
    i26 = i48;
    i29 = i38;
    i30 = i39;
    i31 = i40;
    i32 = i41;
   }
  }
  i59 = i20;
  i60 = i14;
  i61 = i23;
  i62 = i31;
  i63 = i32;
  i64 = i29;
  i65 = i30;
  i66 = (i24 | 0) != 0;
  i7 = 37;
 } else {
  i49 = 0;
  i50 = 0;
  i51 = 0;
  i52 = i15;
  i53 = i16;
  i54 = i17;
  i55 = i18;
  i56 = 0;
  i57 = i19;
  i58 = 0;
  i7 = 29;
 } while (0);
 do if ((i7 | 0) == 29) {
  i19 = (i52 | 0) == 0;
  i18 = i19 ? i56 : i55;
  i17 = i19 ? i58 : i57;
  i19 = (i54 | 0) != 0;
  if (!(i19 & (i53 | 32 | 0) == 101)) if ((i53 | 0) > -1) {
   i59 = i49;
   i60 = i50;
   i61 = i51;
   i62 = i56;
   i63 = i58;
   i64 = i18;
   i65 = i17;
   i66 = i19;
   i7 = 37;
   break;
  } else {
   i67 = i49;
   i68 = i50;
   i69 = i51;
   i70 = i56;
   i71 = i58;
   i72 = i19;
   i73 = i18;
   i74 = i17;
   i7 = 39;
   break;
  }
  i19 = _scanexp(i1, i6) | 0;
  i16 = tempRet0;
  if ((i19 | 0) == 0 & (i16 | 0) == -2147483648) {
   if (!i6) {
    ___shlim(i1, 0);
    d75 = 0.0;
    break;
   }
   if (!(HEAP32[i13 >> 2] | 0)) {
    i76 = 0;
    i77 = 0;
   } else {
    HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + -1;
    i76 = 0;
    i77 = 0;
   }
  } else {
   i76 = i19;
   i77 = i16;
  }
  i16 = _i64Add(i76 | 0, i77 | 0, i18 | 0, i17 | 0) | 0;
  i78 = i49;
  i79 = i50;
  i80 = i51;
  i81 = i16;
  i82 = i56;
  i83 = tempRet0;
  i84 = i58;
  i7 = 41;
 } while (0);
 if ((i7 | 0) == 37) if (!(HEAP32[i13 >> 2] | 0)) {
  i67 = i59;
  i68 = i60;
  i69 = i61;
  i70 = i62;
  i71 = i63;
  i72 = i66;
  i73 = i64;
  i74 = i65;
  i7 = 39;
 } else {
  HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + -1;
  if (i66) {
   i78 = i59;
   i79 = i60;
   i80 = i61;
   i81 = i64;
   i82 = i62;
   i83 = i65;
   i84 = i63;
   i7 = 41;
  } else i7 = 40;
 }
 if ((i7 | 0) == 39) if (i72) {
  i78 = i67;
  i79 = i68;
  i80 = i69;
  i81 = i73;
  i82 = i70;
  i83 = i74;
  i84 = i71;
  i7 = 41;
 } else i7 = 40;
 do if ((i7 | 0) == 40) {
  i71 = ___errno_location() | 0;
  HEAP32[i71 >> 2] = 22;
  ___shlim(i1, 0);
  d75 = 0.0;
 } else if ((i7 | 0) == 41) {
  i71 = HEAP32[i9 >> 2] | 0;
  if (!i71) {
   d75 = +(i5 | 0) * 0.0;
   break;
  }
  if (((i84 | 0) < 0 | (i84 | 0) == 0 & i82 >>> 0 < 10) & ((i81 | 0) == (i82 | 0) & (i83 | 0) == (i84 | 0))) if ((i3 | 0) > 30 | (i71 >>> i3 | 0) == 0) {
   d75 = +(i5 | 0) * +(i71 >>> 0);
   break;
  }
  i71 = (i4 | 0) / -2 | 0;
  i74 = ((i71 | 0) < 0) << 31 >> 31;
  if ((i83 | 0) > (i74 | 0) | (i83 | 0) == (i74 | 0) & i81 >>> 0 > i71 >>> 0) {
   i71 = ___errno_location() | 0;
   HEAP32[i71 >> 2] = 34;
   d75 = +(i5 | 0) * 1797693134862315708145274.0e284 * 1797693134862315708145274.0e284;
   break;
  }
  i71 = i4 + -106 | 0;
  i74 = ((i71 | 0) < 0) << 31 >> 31;
  if ((i83 | 0) < (i74 | 0) | (i83 | 0) == (i74 | 0) & i81 >>> 0 < i71 >>> 0) {
   i71 = ___errno_location() | 0;
   HEAP32[i71 >> 2] = 34;
   d75 = +(i5 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
   break;
  }
  if (!i78) i85 = i79; else {
   if ((i78 | 0) < 9) {
    i71 = i9 + (i79 << 2) | 0;
    i74 = i78;
    i70 = HEAP32[i71 >> 2] | 0;
    while (1) {
     i70 = i70 * 10 | 0;
     if ((i74 | 0) >= 8) break; else i74 = i74 + 1 | 0;
    }
    HEAP32[i71 >> 2] = i70;
   }
   i85 = i79 + 1 | 0;
  }
  if ((i80 | 0) < 9) if ((i80 | 0) <= (i81 | 0) & (i81 | 0) < 18) {
   if ((i81 | 0) == 9) {
    d75 = +(i5 | 0) * +((HEAP32[i9 >> 2] | 0) >>> 0);
    break;
   }
   if ((i81 | 0) < 9) {
    d75 = +(i5 | 0) * +((HEAP32[i9 >> 2] | 0) >>> 0) / +(HEAP32[14240 + (8 - i81 << 2) >> 2] | 0);
    break;
   }
   i74 = i3 + 27 + (Math_imul(i81, -3) | 0) | 0;
   i24 = HEAP32[i9 >> 2] | 0;
   if ((i74 | 0) > 30 | (i24 >>> i74 | 0) == 0) {
    d75 = +(i5 | 0) * +(i24 >>> 0) * +(HEAP32[14240 + (i81 + -10 << 2) >> 2] | 0);
    break;
   }
  }
  i24 = (i81 | 0) % 9 | 0;
  if (!i24) {
   i86 = 0;
   i87 = i85;
   i88 = 0;
   i89 = i81;
  } else {
   i74 = (i81 | 0) > -1 ? i24 : i24 + 9 | 0;
   i24 = HEAP32[14240 + (8 - i74 << 2) >> 2] | 0;
   if (!i85) {
    i90 = 0;
    i91 = 0;
    i92 = i81;
   } else {
    i30 = 1e9 / (i24 | 0) | 0;
    i29 = 0;
    i32 = 0;
    i31 = i81;
    i23 = 0;
    do {
     i14 = i9 + (i23 << 2) | 0;
     i20 = HEAP32[i14 >> 2] | 0;
     i73 = ((i20 >>> 0) / (i24 >>> 0) | 0) + i29 | 0;
     HEAP32[i14 >> 2] = i73;
     i29 = Math_imul(i30, (i20 >>> 0) % (i24 >>> 0) | 0) | 0;
     i20 = (i23 | 0) == (i32 | 0) & (i73 | 0) == 0;
     i31 = i20 ? i31 + -9 | 0 : i31;
     i32 = i20 ? i32 + 1 & 127 : i32;
     i23 = i23 + 1 | 0;
    } while ((i23 | 0) != (i85 | 0));
    if (!i29) {
     i90 = i32;
     i91 = i85;
     i92 = i31;
    } else {
     HEAP32[i9 + (i85 << 2) >> 2] = i29;
     i90 = i32;
     i91 = i85 + 1 | 0;
     i92 = i31;
    }
   }
   i86 = 0;
   i87 = i91;
   i88 = i90;
   i89 = 9 - i74 + i92 | 0;
  }
  L101 : while (1) {
   i23 = (i89 | 0) < 18;
   i24 = (i89 | 0) == 18;
   i30 = i9 + (i88 << 2) | 0;
   i70 = i86;
   i71 = i87;
   while (1) {
    if (!i23) {
     if (!i24) {
      i93 = i70;
      i94 = i88;
      i95 = i89;
      i96 = i71;
      break L101;
     }
     if ((HEAP32[i30 >> 2] | 0) >>> 0 >= 9007199) {
      i93 = i70;
      i94 = i88;
      i95 = 18;
      i96 = i71;
      break L101;
     }
    }
    i20 = 0;
    i97 = i71;
    i73 = i71 + 127 | 0;
    while (1) {
     i14 = i73 & 127;
     i69 = i9 + (i14 << 2) | 0;
     i68 = _bitshift64Shl(HEAP32[i69 >> 2] | 0, 0, 29) | 0;
     i67 = _i64Add(i68 | 0, tempRet0 | 0, i20 | 0, 0) | 0;
     i68 = tempRet0;
     if (i68 >>> 0 > 0 | (i68 | 0) == 0 & i67 >>> 0 > 1e9) {
      i72 = ___udivdi3(i67 | 0, i68 | 0, 1e9, 0) | 0;
      i63 = ___uremdi3(i67 | 0, i68 | 0, 1e9, 0) | 0;
      i98 = i72;
      i99 = i63;
     } else {
      i98 = 0;
      i99 = i67;
     }
     HEAP32[i69 >> 2] = i99;
     i69 = (i14 | 0) == (i88 | 0);
     i97 = (i99 | 0) == 0 & (((i14 | 0) != (i97 + 127 & 127 | 0) | i69) ^ 1) ? i14 : i97;
     if (i69) break; else {
      i20 = i98;
      i73 = i14 + -1 | 0;
     }
    }
    i70 = i70 + -29 | 0;
    if (i98 | 0) break; else i71 = i97;
   }
   i71 = i88 + 127 & 127;
   i30 = i97 + 127 & 127;
   i24 = i9 + ((i97 + 126 & 127) << 2) | 0;
   if ((i71 | 0) == (i97 | 0)) {
    HEAP32[i24 >> 2] = HEAP32[i24 >> 2] | HEAP32[i9 + (i30 << 2) >> 2];
    i100 = i30;
   } else i100 = i97;
   HEAP32[i9 + (i71 << 2) >> 2] = i98;
   i86 = i70;
   i87 = i100;
   i88 = i71;
   i89 = i89 + 9 | 0;
  }
  L119 : while (1) {
   i74 = i96 + 1 & 127;
   i31 = i9 + ((i96 + 127 & 127) << 2) | 0;
   i32 = i93;
   i29 = i94;
   i71 = i95;
   while (1) {
    i30 = (i71 | 0) == 18;
    i24 = (i71 | 0) > 27 ? 9 : 1;
    i101 = i32;
    i102 = i29;
    while (1) {
     i23 = 0;
     while (1) {
      i73 = i23 + i102 & 127;
      if ((i73 | 0) == (i96 | 0)) {
       i103 = 2;
       i7 = 88;
       break;
      }
      i20 = HEAP32[i9 + (i73 << 2) >> 2] | 0;
      i73 = HEAP32[14272 + (i23 << 2) >> 2] | 0;
      if (i20 >>> 0 < i73 >>> 0) {
       i103 = 2;
       i7 = 88;
       break;
      }
      if (i20 >>> 0 > i73 >>> 0) break;
      i73 = i23 + 1 | 0;
      if ((i23 | 0) < 1) i23 = i73; else {
       i103 = i73;
       i7 = 88;
       break;
      }
     }
     if ((i7 | 0) == 88) {
      i7 = 0;
      if (i30 & (i103 | 0) == 2) {
       d104 = 0.0;
       i105 = 0;
       i106 = i96;
       break L119;
      }
     }
     i107 = i24 + i101 | 0;
     if ((i102 | 0) == (i96 | 0)) {
      i101 = i107;
      i102 = i96;
     } else break;
    }
    i30 = (1 << i24) + -1 | 0;
    i23 = 1e9 >>> i24;
    i108 = 0;
    i109 = i102;
    i110 = i71;
    i73 = i102;
    do {
     i20 = i9 + (i73 << 2) | 0;
     i14 = HEAP32[i20 >> 2] | 0;
     i69 = (i14 >>> i24) + i108 | 0;
     HEAP32[i20 >> 2] = i69;
     i108 = Math_imul(i14 & i30, i23) | 0;
     i14 = (i73 | 0) == (i109 | 0) & (i69 | 0) == 0;
     i110 = i14 ? i110 + -9 | 0 : i110;
     i109 = i14 ? i109 + 1 & 127 : i109;
     i73 = i73 + 1 & 127;
    } while ((i73 | 0) != (i96 | 0));
    if (!i108) {
     i32 = i107;
     i29 = i109;
     i71 = i110;
     continue;
    }
    if ((i74 | 0) != (i109 | 0)) break;
    HEAP32[i31 >> 2] = HEAP32[i31 >> 2] | 1;
    i32 = i107;
    i29 = i109;
    i71 = i110;
   }
   HEAP32[i9 + (i96 << 2) >> 2] = i108;
   i93 = i107;
   i94 = i109;
   i95 = i110;
   i96 = i74;
  }
  while (1) {
   i71 = i105 + i102 & 127;
   i29 = i106 + 1 & 127;
   if ((i71 | 0) == (i106 | 0)) {
    HEAP32[i9 + (i29 + -1 << 2) >> 2] = 0;
    i111 = i29;
   } else i111 = i106;
   d104 = d104 * 1.0e9 + +((HEAP32[i9 + (i71 << 2) >> 2] | 0) >>> 0);
   i105 = i105 + 1 | 0;
   if ((i105 | 0) == 2) break; else i106 = i111;
  }
  d112 = +(i5 | 0);
  d113 = d104 * d112;
  i71 = i101 + 53 | 0;
  i29 = i71 - i4 | 0;
  i32 = (i29 | 0) < (i3 | 0);
  i31 = i32 ? ((i29 | 0) > 0 ? i29 : 0) : i3;
  if ((i31 | 0) < 53) {
   d114 = +_copysignl(+_scalbn(1.0, 105 - i31 | 0), d113);
   d115 = +_fmodl(d113, +_scalbn(1.0, 53 - i31 | 0));
   d116 = d114;
   d117 = d115;
   d118 = d114 + (d113 - d115);
  } else {
   d116 = 0.0;
   d117 = 0.0;
   d118 = d113;
  }
  i70 = i102 + 2 & 127;
  if ((i70 | 0) == (i111 | 0)) d119 = d117; else {
   i73 = HEAP32[i9 + (i70 << 2) >> 2] | 0;
   do if (i73 >>> 0 < 5e8) {
    if (!i73) if ((i102 + 3 & 127 | 0) == (i111 | 0)) {
     d120 = d117;
     break;
    }
    d120 = d112 * .25 + d117;
   } else {
    if ((i73 | 0) != 5e8) {
     d120 = d112 * .75 + d117;
     break;
    }
    if ((i102 + 3 & 127 | 0) == (i111 | 0)) {
     d120 = d112 * .5 + d117;
     break;
    } else {
     d120 = d112 * .75 + d117;
     break;
    }
   } while (0);
   if ((53 - i31 | 0) > 1) if (+_fmodl(d120, 1.0) != 0.0) d119 = d120; else d119 = d120 + 1.0; else d119 = d120;
  }
  d112 = d118 + d119 - d116;
  do if ((i71 & 2147483647 | 0) > (-2 - i10 | 0)) {
   i73 = !(+Math_abs(+d112) >= 9007199254740992.0);
   i70 = i101 + ((i73 ^ 1) & 1) | 0;
   d113 = i73 ? d112 : d112 * .5;
   if ((i70 + 50 | 0) <= (i11 | 0)) if (!(d119 != 0.0 & (i32 & ((i31 | 0) != (i29 | 0) | i73)))) {
    d121 = d113;
    i122 = i70;
    break;
   }
   i73 = ___errno_location() | 0;
   HEAP32[i73 >> 2] = 34;
   d121 = d113;
   i122 = i70;
  } else {
   d121 = d112;
   i122 = i101;
  } while (0);
  d75 = +_scalbnl(d121, i122);
 } while (0);
 STACKTOP = i8;
 return +d75;
}

function _fmt_fp(i1, d2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 d2 = +d2;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, d15 = 0.0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, d25 = 0.0, d26 = 0.0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, d31 = 0.0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, d37 = 0.0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, d58 = 0.0, d59 = 0.0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0;
 i7 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 560 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(560);
 i9 = i8 + 8 | 0;
 i10 = i8;
 i11 = i8 + 524 | 0;
 i12 = i11;
 i13 = i8 + 512 | 0;
 HEAP32[i10 >> 2] = 0;
 i14 = i13 + 12 | 0;
 ___DOUBLE_BITS_561(d2) | 0;
 if ((tempRet0 | 0) < 0) {
  d15 = -d2;
  i16 = 1;
  i17 = 67494;
 } else {
  d15 = d2;
  i16 = (i5 & 2049 | 0) != 0 & 1;
  i17 = (i5 & 2048 | 0) == 0 ? ((i5 & 1 | 0) == 0 ? 67495 : 67500) : 67497;
 }
 ___DOUBLE_BITS_561(d15) | 0;
 do if (0 == 0 & (tempRet0 & 2146435072 | 0) == 2146435072) {
  i18 = (i6 & 32 | 0) != 0;
  i19 = i16 + 3 | 0;
  _pad_560(i1, 32, i3, i19, i5 & -65537);
  _out(i1, i17, i16);
  _out(i1, d15 != d15 | 0.0 != 0.0 ? (i18 ? 69710 : 67521) : i18 ? 67513 : 67517, 3);
  _pad_560(i1, 32, i3, i19, i5 ^ 8192);
  i20 = i19;
 } else {
  d2 = +_frexpl(d15, i10) * 2.0;
  i19 = d2 != 0.0;
  if (i19) HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + -1;
  i18 = i6 | 32;
  if ((i18 | 0) == 97) {
   i21 = i6 & 32;
   i22 = (i21 | 0) == 0 ? i17 : i17 + 9 | 0;
   i23 = i16 | 2;
   i24 = 12 - i4 | 0;
   do if (i4 >>> 0 > 11 | (i24 | 0) == 0) d25 = d2; else {
    d26 = 8.0;
    i27 = i24;
    do {
     i27 = i27 + -1 | 0;
     d26 = d26 * 16.0;
    } while ((i27 | 0) != 0);
    if ((HEAP8[i22 >> 0] | 0) == 45) {
     d25 = -(d26 + (-d2 - d26));
     break;
    } else {
     d25 = d2 + d26 - d26;
     break;
    }
   } while (0);
   i24 = HEAP32[i10 >> 2] | 0;
   i27 = (i24 | 0) < 0 ? 0 - i24 | 0 : i24;
   i28 = _fmt_u(i27, ((i27 | 0) < 0) << 31 >> 31, i14) | 0;
   if ((i28 | 0) == (i14 | 0)) {
    i27 = i13 + 11 | 0;
    HEAP8[i27 >> 0] = 48;
    i29 = i27;
   } else i29 = i28;
   HEAP8[i29 + -1 >> 0] = (i24 >> 31 & 2) + 43;
   i24 = i29 + -2 | 0;
   HEAP8[i24 >> 0] = i6 + 15;
   i28 = (i4 | 0) < 1;
   i27 = (i5 & 8 | 0) == 0;
   i30 = i11;
   d31 = d25;
   while (1) {
    i32 = ~~d31;
    i33 = i30 + 1 | 0;
    HEAP8[i30 >> 0] = i21 | HEAPU8[67525 + i32 >> 0];
    d31 = (d31 - +(i32 | 0)) * 16.0;
    if ((i33 - i12 | 0) == 1) if (i27 & (i28 & d31 == 0.0)) i34 = i33; else {
     HEAP8[i33 >> 0] = 46;
     i34 = i30 + 2 | 0;
    } else i34 = i33;
    if (!(d31 != 0.0)) break; else i30 = i34;
   }
   i30 = i34;
   if (!i4) i7 = 24; else if ((-2 - i12 + i30 | 0) < (i4 | 0)) {
    i35 = i30 - i12 | 0;
    i36 = i4 + 2 | 0;
   } else i7 = 24;
   if ((i7 | 0) == 24) {
    i28 = i30 - i12 | 0;
    i35 = i28;
    i36 = i28;
   }
   i28 = i14 - i24 | 0;
   i30 = i28 + i23 + i36 | 0;
   _pad_560(i1, 32, i3, i30, i5);
   _out(i1, i22, i23);
   _pad_560(i1, 48, i3, i30, i5 ^ 65536);
   _out(i1, i11, i35);
   _pad_560(i1, 48, i36 - i35 | 0, 0, 0);
   _out(i1, i24, i28);
   _pad_560(i1, 32, i3, i30, i5 ^ 8192);
   i20 = i30;
   break;
  }
  i30 = (i4 | 0) < 0 ? 6 : i4;
  if (i19) {
   i28 = (HEAP32[i10 >> 2] | 0) + -28 | 0;
   HEAP32[i10 >> 2] = i28;
   d37 = d2 * 268435456.0;
   i38 = i28;
  } else {
   d37 = d2;
   i38 = HEAP32[i10 >> 2] | 0;
  }
  i28 = (i38 | 0) < 0 ? i9 : i9 + 288 | 0;
  i27 = i28;
  d31 = d37;
  do {
   i21 = ~~d31 >>> 0;
   HEAP32[i27 >> 2] = i21;
   i27 = i27 + 4 | 0;
   d31 = (d31 - +(i21 >>> 0)) * 1.0e9;
  } while (d31 != 0.0);
  if ((i38 | 0) > 0) {
   i19 = i28;
   i24 = i27;
   i23 = i38;
   while (1) {
    i22 = (i23 | 0) < 29 ? i23 : 29;
    i21 = i24 + -4 | 0;
    if (i21 >>> 0 < i19 >>> 0) i39 = i19; else {
     i33 = i21;
     i21 = 0;
     do {
      i32 = _bitshift64Shl(HEAP32[i33 >> 2] | 0, 0, i22 | 0) | 0;
      i40 = _i64Add(i32 | 0, tempRet0 | 0, i21 | 0, 0) | 0;
      i32 = tempRet0;
      i41 = ___uremdi3(i40 | 0, i32 | 0, 1e9, 0) | 0;
      HEAP32[i33 >> 2] = i41;
      i21 = ___udivdi3(i40 | 0, i32 | 0, 1e9, 0) | 0;
      i33 = i33 + -4 | 0;
     } while (i33 >>> 0 >= i19 >>> 0);
     if (!i21) i39 = i19; else {
      i33 = i19 + -4 | 0;
      HEAP32[i33 >> 2] = i21;
      i39 = i33;
     }
    }
    i33 = i24;
    while (1) {
     if (i33 >>> 0 <= i39 >>> 0) break;
     i32 = i33 + -4 | 0;
     if (!(HEAP32[i32 >> 2] | 0)) i33 = i32; else break;
    }
    i21 = (HEAP32[i10 >> 2] | 0) - i22 | 0;
    HEAP32[i10 >> 2] = i21;
    if ((i21 | 0) > 0) {
     i19 = i39;
     i24 = i33;
     i23 = i21;
    } else {
     i42 = i39;
     i43 = i33;
     i44 = i21;
     break;
    }
   }
  } else {
   i42 = i28;
   i43 = i27;
   i44 = i38;
  }
  if ((i44 | 0) < 0) {
   i23 = ((i30 + 25 | 0) / 9 | 0) + 1 | 0;
   i24 = (i18 | 0) == 102;
   i19 = i42;
   i21 = i43;
   i32 = i44;
   while (1) {
    i40 = 0 - i32 | 0;
    i41 = (i40 | 0) < 9 ? i40 : 9;
    if (i19 >>> 0 < i21 >>> 0) {
     i40 = (1 << i41) + -1 | 0;
     i45 = 1e9 >>> i41;
     i46 = 0;
     i47 = i19;
     do {
      i48 = HEAP32[i47 >> 2] | 0;
      HEAP32[i47 >> 2] = (i48 >>> i41) + i46;
      i46 = Math_imul(i48 & i40, i45) | 0;
      i47 = i47 + 4 | 0;
     } while (i47 >>> 0 < i21 >>> 0);
     i47 = (HEAP32[i19 >> 2] | 0) == 0 ? i19 + 4 | 0 : i19;
     if (!i46) {
      i49 = i47;
      i50 = i21;
     } else {
      HEAP32[i21 >> 2] = i46;
      i49 = i47;
      i50 = i21 + 4 | 0;
     }
    } else {
     i49 = (HEAP32[i19 >> 2] | 0) == 0 ? i19 + 4 | 0 : i19;
     i50 = i21;
    }
    i47 = i24 ? i28 : i49;
    i45 = (i50 - i47 >> 2 | 0) > (i23 | 0) ? i47 + (i23 << 2) | 0 : i50;
    i32 = (HEAP32[i10 >> 2] | 0) + i41 | 0;
    HEAP32[i10 >> 2] = i32;
    if ((i32 | 0) >= 0) {
     i51 = i49;
     i52 = i45;
     break;
    } else {
     i19 = i49;
     i21 = i45;
    }
   }
  } else {
   i51 = i42;
   i52 = i43;
  }
  i21 = i28;
  if (i51 >>> 0 < i52 >>> 0) {
   i19 = (i21 - i51 >> 2) * 9 | 0;
   i32 = HEAP32[i51 >> 2] | 0;
   if (i32 >>> 0 < 10) i53 = i19; else {
    i23 = i19;
    i19 = 10;
    while (1) {
     i19 = i19 * 10 | 0;
     i24 = i23 + 1 | 0;
     if (i32 >>> 0 < i19 >>> 0) {
      i53 = i24;
      break;
     } else i23 = i24;
    }
   }
  } else i53 = 0;
  i23 = (i18 | 0) == 103;
  i19 = (i30 | 0) != 0;
  i32 = i30 - ((i18 | 0) != 102 ? i53 : 0) + ((i19 & i23) << 31 >> 31) | 0;
  if ((i32 | 0) < (((i52 - i21 >> 2) * 9 | 0) + -9 | 0)) {
   i24 = i32 + 9216 | 0;
   i32 = i28 + 4 + (((i24 | 0) / 9 | 0) + -1024 << 2) | 0;
   i27 = (i24 | 0) % 9 | 0;
   if ((i27 | 0) < 8) {
    i24 = i27;
    i27 = 10;
    while (1) {
     i45 = i27 * 10 | 0;
     if ((i24 | 0) < 7) {
      i24 = i24 + 1 | 0;
      i27 = i45;
     } else {
      i54 = i45;
      break;
     }
    }
   } else i54 = 10;
   i27 = HEAP32[i32 >> 2] | 0;
   i24 = (i27 >>> 0) % (i54 >>> 0) | 0;
   i18 = (i32 + 4 | 0) == (i52 | 0);
   if (i18 & (i24 | 0) == 0) {
    i55 = i32;
    i56 = i53;
    i57 = i51;
   } else {
    d26 = (((i27 >>> 0) / (i54 >>> 0) | 0) & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0;
    i45 = (i54 | 0) / 2 | 0;
    d31 = i24 >>> 0 < i45 >>> 0 ? .5 : i18 & (i24 | 0) == (i45 | 0) ? 1.0 : 1.5;
    if (!i16) {
     d58 = d31;
     d59 = d26;
    } else {
     i45 = (HEAP8[i17 >> 0] | 0) == 45;
     d58 = i45 ? -d31 : d31;
     d59 = i45 ? -d26 : d26;
    }
    i45 = i27 - i24 | 0;
    HEAP32[i32 >> 2] = i45;
    if (d59 + d58 != d59) {
     i24 = i45 + i54 | 0;
     HEAP32[i32 >> 2] = i24;
     if (i24 >>> 0 > 999999999) {
      i24 = i51;
      i45 = i32;
      while (1) {
       i27 = i45 + -4 | 0;
       HEAP32[i45 >> 2] = 0;
       if (i27 >>> 0 < i24 >>> 0) {
        i18 = i24 + -4 | 0;
        HEAP32[i18 >> 2] = 0;
        i60 = i18;
       } else i60 = i24;
       i18 = (HEAP32[i27 >> 2] | 0) + 1 | 0;
       HEAP32[i27 >> 2] = i18;
       if (i18 >>> 0 > 999999999) {
        i24 = i60;
        i45 = i27;
       } else {
        i61 = i60;
        i62 = i27;
        break;
       }
      }
     } else {
      i61 = i51;
      i62 = i32;
     }
     i45 = (i21 - i61 >> 2) * 9 | 0;
     i24 = HEAP32[i61 >> 2] | 0;
     if (i24 >>> 0 < 10) {
      i55 = i62;
      i56 = i45;
      i57 = i61;
     } else {
      i27 = i45;
      i45 = 10;
      while (1) {
       i45 = i45 * 10 | 0;
       i18 = i27 + 1 | 0;
       if (i24 >>> 0 < i45 >>> 0) {
        i55 = i62;
        i56 = i18;
        i57 = i61;
        break;
       } else i27 = i18;
      }
     }
    } else {
     i55 = i32;
     i56 = i53;
     i57 = i51;
    }
   }
   i27 = i55 + 4 | 0;
   i63 = i56;
   i64 = i52 >>> 0 > i27 >>> 0 ? i27 : i52;
   i65 = i57;
  } else {
   i63 = i53;
   i64 = i52;
   i65 = i51;
  }
  i27 = i64;
  while (1) {
   if (i27 >>> 0 <= i65 >>> 0) {
    i66 = 0;
    break;
   }
   i45 = i27 + -4 | 0;
   if (!(HEAP32[i45 >> 2] | 0)) i27 = i45; else {
    i66 = 1;
    break;
   }
  }
  i32 = 0 - i63 | 0;
  do if (i23) {
   i45 = i30 + ((i19 ^ 1) & 1) | 0;
   if ((i45 | 0) > (i63 | 0) & (i63 | 0) > -5) {
    i67 = i6 + -1 | 0;
    i68 = i45 + -1 - i63 | 0;
   } else {
    i67 = i6 + -2 | 0;
    i68 = i45 + -1 | 0;
   }
   i45 = i5 & 8;
   if (!i45) {
    if (i66) {
     i24 = HEAP32[i27 + -4 >> 2] | 0;
     if (!i24) i69 = 9; else if (!((i24 >>> 0) % 10 | 0)) {
      i18 = 0;
      i47 = 10;
      while (1) {
       i47 = i47 * 10 | 0;
       i40 = i18 + 1 | 0;
       if ((i24 >>> 0) % (i47 >>> 0) | 0 | 0) {
        i69 = i40;
        break;
       } else i18 = i40;
      }
     } else i69 = 0;
    } else i69 = 9;
    i18 = ((i27 - i21 >> 2) * 9 | 0) + -9 | 0;
    if ((i67 | 32 | 0) == 102) {
     i47 = i18 - i69 | 0;
     i24 = (i47 | 0) > 0 ? i47 : 0;
     i70 = i67;
     i71 = (i68 | 0) < (i24 | 0) ? i68 : i24;
     i72 = 0;
     break;
    } else {
     i24 = i18 + i63 - i69 | 0;
     i18 = (i24 | 0) > 0 ? i24 : 0;
     i70 = i67;
     i71 = (i68 | 0) < (i18 | 0) ? i68 : i18;
     i72 = 0;
     break;
    }
   } else {
    i70 = i67;
    i71 = i68;
    i72 = i45;
   }
  } else {
   i70 = i6;
   i71 = i30;
   i72 = i5 & 8;
  } while (0);
  i30 = i71 | i72;
  i21 = (i30 | 0) != 0 & 1;
  i19 = (i70 | 32 | 0) == 102;
  if (i19) {
   i73 = 0;
   i74 = (i63 | 0) > 0 ? i63 : 0;
  } else {
   i23 = (i63 | 0) < 0 ? i32 : i63;
   i18 = _fmt_u(i23, ((i23 | 0) < 0) << 31 >> 31, i14) | 0;
   i23 = i14;
   if ((i23 - i18 | 0) < 2) {
    i24 = i18;
    while (1) {
     i47 = i24 + -1 | 0;
     HEAP8[i47 >> 0] = 48;
     if ((i23 - i47 | 0) < 2) i24 = i47; else {
      i75 = i47;
      break;
     }
    }
   } else i75 = i18;
   HEAP8[i75 + -1 >> 0] = (i63 >> 31 & 2) + 43;
   i24 = i75 + -2 | 0;
   HEAP8[i24 >> 0] = i70;
   i73 = i24;
   i74 = i23 - i24 | 0;
  }
  i24 = i16 + 1 + i71 + i21 + i74 | 0;
  _pad_560(i1, 32, i3, i24, i5);
  _out(i1, i17, i16);
  _pad_560(i1, 48, i3, i24, i5 ^ 65536);
  if (i19) {
   i32 = i65 >>> 0 > i28 >>> 0 ? i28 : i65;
   i47 = i11 + 9 | 0;
   i41 = i47;
   i46 = i11 + 8 | 0;
   i40 = i32;
   do {
    i33 = _fmt_u(HEAP32[i40 >> 2] | 0, 0, i47) | 0;
    if ((i40 | 0) == (i32 | 0)) if ((i33 | 0) == (i47 | 0)) {
     HEAP8[i46 >> 0] = 48;
     i76 = i46;
    } else i76 = i33; else if (i33 >>> 0 > i11 >>> 0) {
     _memset(i11 | 0, 48, i33 - i12 | 0) | 0;
     i22 = i33;
     while (1) {
      i48 = i22 + -1 | 0;
      if (i48 >>> 0 > i11 >>> 0) i22 = i48; else {
       i76 = i48;
       break;
      }
     }
    } else i76 = i33;
    _out(i1, i76, i41 - i76 | 0);
    i40 = i40 + 4 | 0;
   } while (i40 >>> 0 <= i28 >>> 0);
   if (i30 | 0) _out(i1, 67541, 1);
   if (i40 >>> 0 < i27 >>> 0 & (i71 | 0) > 0) {
    i28 = i71;
    i41 = i40;
    while (1) {
     i46 = _fmt_u(HEAP32[i41 >> 2] | 0, 0, i47) | 0;
     if (i46 >>> 0 > i11 >>> 0) {
      _memset(i11 | 0, 48, i46 - i12 | 0) | 0;
      i32 = i46;
      while (1) {
       i19 = i32 + -1 | 0;
       if (i19 >>> 0 > i11 >>> 0) i32 = i19; else {
        i77 = i19;
        break;
       }
      }
     } else i77 = i46;
     _out(i1, i77, (i28 | 0) < 9 ? i28 : 9);
     i41 = i41 + 4 | 0;
     i32 = i28 + -9 | 0;
     if (!(i41 >>> 0 < i27 >>> 0 & (i28 | 0) > 9)) {
      i78 = i32;
      break;
     } else i28 = i32;
    }
   } else i78 = i71;
   _pad_560(i1, 48, i78 + 9 | 0, 9, 0);
  } else {
   i28 = i66 ? i27 : i65 + 4 | 0;
   if ((i71 | 0) > -1) {
    i41 = i11 + 9 | 0;
    i47 = (i72 | 0) == 0;
    i40 = i41;
    i30 = 0 - i12 | 0;
    i32 = i11 + 8 | 0;
    i33 = i71;
    i19 = i65;
    while (1) {
     i21 = _fmt_u(HEAP32[i19 >> 2] | 0, 0, i41) | 0;
     if ((i21 | 0) == (i41 | 0)) {
      HEAP8[i32 >> 0] = 48;
      i79 = i32;
     } else i79 = i21;
     do if ((i19 | 0) == (i65 | 0)) {
      i21 = i79 + 1 | 0;
      _out(i1, i79, 1);
      if (i47 & (i33 | 0) < 1) {
       i80 = i21;
       break;
      }
      _out(i1, 67541, 1);
      i80 = i21;
     } else {
      if (i79 >>> 0 <= i11 >>> 0) {
       i80 = i79;
       break;
      }
      _memset(i11 | 0, 48, i79 + i30 | 0) | 0;
      i21 = i79;
      while (1) {
       i23 = i21 + -1 | 0;
       if (i23 >>> 0 > i11 >>> 0) i21 = i23; else {
        i80 = i23;
        break;
       }
      }
     } while (0);
     i46 = i40 - i80 | 0;
     _out(i1, i80, (i33 | 0) > (i46 | 0) ? i46 : i33);
     i21 = i33 - i46 | 0;
     i19 = i19 + 4 | 0;
     if (!(i19 >>> 0 < i28 >>> 0 & (i21 | 0) > -1)) {
      i81 = i21;
      break;
     } else i33 = i21;
    }
   } else i81 = i71;
   _pad_560(i1, 48, i81 + 18 | 0, 18, 0);
   _out(i1, i73, i14 - i73 | 0);
  }
  _pad_560(i1, 32, i3, i24, i5 ^ 8192);
  i20 = i24;
 } while (0);
 STACKTOP = i8;
 return ((i20 | 0) < (i3 | 0) ? i3 : i20) | 0;
}

function _printf_core(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0;
 i6 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i8 = i7 + 16 | 0;
 i9 = i7;
 i10 = i7 + 24 | 0;
 i11 = i7 + 8 | 0;
 i12 = i7 + 20 | 0;
 HEAP32[i8 >> 2] = i2;
 i2 = (i1 | 0) != 0;
 i13 = i10 + 40 | 0;
 i14 = i13;
 i15 = i10 + 39 | 0;
 i10 = i11 + 4 | 0;
 i16 = 0;
 i17 = 0;
 i18 = 0;
 L1 : while (1) {
  do if ((i17 | 0) > -1) if ((i16 | 0) > (2147483647 - i17 | 0)) {
   i19 = ___errno_location() | 0;
   HEAP32[i19 >> 2] = 75;
   i20 = -1;
   break;
  } else {
   i20 = i16 + i17 | 0;
   break;
  } else i20 = i17; while (0);
  i19 = HEAP32[i8 >> 2] | 0;
  i21 = HEAP8[i19 >> 0] | 0;
  if (!(i21 << 24 >> 24)) {
   i6 = 88;
   break;
  } else {
   i22 = i21;
   i23 = i19;
  }
  L9 : while (1) {
   switch (i22 << 24 >> 24) {
   case 37:
    {
     i24 = i23;
     i25 = i23;
     i6 = 9;
     break L9;
     break;
    }
   case 0:
    {
     i26 = i23;
     break L9;
     break;
    }
   default:
    {}
   }
   i21 = i23 + 1 | 0;
   HEAP32[i8 >> 2] = i21;
   i22 = HEAP8[i21 >> 0] | 0;
   i23 = i21;
  }
  L12 : do if ((i6 | 0) == 9) while (1) {
   i6 = 0;
   if ((HEAP8[i25 + 1 >> 0] | 0) != 37) {
    i26 = i24;
    break L12;
   }
   i21 = i24 + 1 | 0;
   i25 = i25 + 2 | 0;
   HEAP32[i8 >> 2] = i25;
   if ((HEAP8[i25 >> 0] | 0) != 37) {
    i26 = i21;
    break;
   } else {
    i24 = i21;
    i6 = 9;
   }
  } while (0);
  i21 = i26 - i19 | 0;
  if (i2) _out(i1, i19, i21);
  if (i21 | 0) {
   i16 = i21;
   i17 = i20;
   continue;
  }
  i21 = (_isdigit(HEAP8[(HEAP32[i8 >> 2] | 0) + 1 >> 0] | 0) | 0) == 0;
  i27 = HEAP32[i8 >> 2] | 0;
  if (i21) {
   i28 = -1;
   i29 = i18;
   i30 = 1;
  } else if ((HEAP8[i27 + 2 >> 0] | 0) == 36) {
   i28 = (HEAP8[i27 + 1 >> 0] | 0) + -48 | 0;
   i29 = 1;
   i30 = 3;
  } else {
   i28 = -1;
   i29 = i18;
   i30 = 1;
  }
  i21 = i27 + i30 | 0;
  HEAP32[i8 >> 2] = i21;
  i27 = HEAP8[i21 >> 0] | 0;
  i31 = (i27 << 24 >> 24) + -32 | 0;
  if (i31 >>> 0 > 31 | (1 << i31 & 75913 | 0) == 0) {
   i32 = 0;
   i33 = i27;
   i34 = i21;
  } else {
   i31 = 0;
   i35 = i27;
   i27 = i21;
   while (1) {
    i21 = 1 << (i35 << 24 >> 24) + -32 | i31;
    i36 = i27 + 1 | 0;
    HEAP32[i8 >> 2] = i36;
    i37 = HEAP8[i36 >> 0] | 0;
    i38 = (i37 << 24 >> 24) + -32 | 0;
    if (i38 >>> 0 > 31 | (1 << i38 & 75913 | 0) == 0) {
     i32 = i21;
     i33 = i37;
     i34 = i36;
     break;
    } else {
     i31 = i21;
     i35 = i37;
     i27 = i36;
    }
   }
  }
  if (i33 << 24 >> 24 == 42) {
   if (!(_isdigit(HEAP8[i34 + 1 >> 0] | 0) | 0)) i6 = 23; else {
    i27 = HEAP32[i8 >> 2] | 0;
    if ((HEAP8[i27 + 2 >> 0] | 0) == 36) {
     i35 = i27 + 1 | 0;
     HEAP32[i5 + ((HEAP8[i35 >> 0] | 0) + -48 << 2) >> 2] = 10;
     i39 = HEAP32[i4 + ((HEAP8[i35 >> 0] | 0) + -48 << 3) >> 2] | 0;
     i40 = 1;
     i41 = i27 + 3 | 0;
    } else i6 = 23;
   }
   if ((i6 | 0) == 23) {
    i6 = 0;
    if (i29 | 0) {
     i42 = -1;
     break;
    }
    if (i2) {
     i27 = (HEAP32[i3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
     i35 = HEAP32[i27 >> 2] | 0;
     HEAP32[i3 >> 2] = i27 + 4;
     i43 = i35;
    } else i43 = 0;
    i39 = i43;
    i40 = 0;
    i41 = (HEAP32[i8 >> 2] | 0) + 1 | 0;
   }
   HEAP32[i8 >> 2] = i41;
   i35 = (i39 | 0) < 0;
   i44 = i35 ? 0 - i39 | 0 : i39;
   i45 = i35 ? i32 | 8192 : i32;
   i46 = i40;
   i47 = i41;
  } else {
   i35 = _getint(i8) | 0;
   if ((i35 | 0) < 0) {
    i42 = -1;
    break;
   }
   i44 = i35;
   i45 = i32;
   i46 = i29;
   i47 = HEAP32[i8 >> 2] | 0;
  }
  do if ((HEAP8[i47 >> 0] | 0) == 46) {
   if ((HEAP8[i47 + 1 >> 0] | 0) != 42) {
    HEAP32[i8 >> 2] = i47 + 1;
    i35 = _getint(i8) | 0;
    i48 = i35;
    i49 = HEAP32[i8 >> 2] | 0;
    break;
   }
   if (_isdigit(HEAP8[i47 + 2 >> 0] | 0) | 0) {
    i35 = HEAP32[i8 >> 2] | 0;
    if ((HEAP8[i35 + 3 >> 0] | 0) == 36) {
     i27 = i35 + 2 | 0;
     HEAP32[i5 + ((HEAP8[i27 >> 0] | 0) + -48 << 2) >> 2] = 10;
     i31 = HEAP32[i4 + ((HEAP8[i27 >> 0] | 0) + -48 << 3) >> 2] | 0;
     i27 = i35 + 4 | 0;
     HEAP32[i8 >> 2] = i27;
     i48 = i31;
     i49 = i27;
     break;
    }
   }
   if (i46 | 0) {
    i42 = -1;
    break L1;
   }
   if (i2) {
    i27 = (HEAP32[i3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
    i31 = HEAP32[i27 >> 2] | 0;
    HEAP32[i3 >> 2] = i27 + 4;
    i50 = i31;
   } else i50 = 0;
   i31 = (HEAP32[i8 >> 2] | 0) + 2 | 0;
   HEAP32[i8 >> 2] = i31;
   i48 = i50;
   i49 = i31;
  } else {
   i48 = -1;
   i49 = i47;
  } while (0);
  i31 = 0;
  i27 = i49;
  while (1) {
   if (((HEAP8[i27 >> 0] | 0) + -65 | 0) >>> 0 > 57) {
    i42 = -1;
    break L1;
   }
   i35 = i27;
   i27 = i27 + 1 | 0;
   HEAP32[i8 >> 2] = i27;
   i51 = HEAP8[(HEAP8[i35 >> 0] | 0) + -65 + (67013 + (i31 * 58 | 0)) >> 0] | 0;
   i52 = i51 & 255;
   if ((i52 + -1 | 0) >>> 0 >= 8) break; else i31 = i52;
  }
  if (!(i51 << 24 >> 24)) {
   i42 = -1;
   break;
  }
  i35 = (i28 | 0) > -1;
  do if (i51 << 24 >> 24 == 19) if (i35) {
   i42 = -1;
   break L1;
  } else i6 = 50; else {
   if (i35) {
    HEAP32[i5 + (i28 << 2) >> 2] = i52;
    i36 = i4 + (i28 << 3) | 0;
    i37 = HEAP32[i36 + 4 >> 2] | 0;
    i21 = i9;
    HEAP32[i21 >> 2] = HEAP32[i36 >> 2];
    HEAP32[i21 + 4 >> 2] = i37;
    i6 = 50;
    break;
   }
   if (!i2) {
    i42 = 0;
    break L1;
   }
   _pop_arg(i9, i52, i3);
   i53 = HEAP32[i8 >> 2] | 0;
  } while (0);
  if ((i6 | 0) == 50) {
   i6 = 0;
   if (i2) i53 = i27; else {
    i16 = 0;
    i17 = i20;
    i18 = i46;
    continue;
   }
  }
  i35 = HEAP8[i53 + -1 >> 0] | 0;
  i37 = (i31 | 0) != 0 & (i35 & 15 | 0) == 3 ? i35 & -33 : i35;
  i35 = i45 & -65537;
  i21 = (i45 & 8192 | 0) == 0 ? i45 : i35;
  L73 : do switch (i37 | 0) {
  case 110:
   {
    switch ((i31 & 255) << 24 >> 24) {
    case 0:
     {
      HEAP32[HEAP32[i9 >> 2] >> 2] = i20;
      i16 = 0;
      i17 = i20;
      i18 = i46;
      continue L1;
      break;
     }
    case 1:
     {
      HEAP32[HEAP32[i9 >> 2] >> 2] = i20;
      i16 = 0;
      i17 = i20;
      i18 = i46;
      continue L1;
      break;
     }
    case 2:
     {
      i36 = HEAP32[i9 >> 2] | 0;
      HEAP32[i36 >> 2] = i20;
      HEAP32[i36 + 4 >> 2] = ((i20 | 0) < 0) << 31 >> 31;
      i16 = 0;
      i17 = i20;
      i18 = i46;
      continue L1;
      break;
     }
    case 3:
     {
      HEAP16[HEAP32[i9 >> 2] >> 1] = i20;
      i16 = 0;
      i17 = i20;
      i18 = i46;
      continue L1;
      break;
     }
    case 4:
     {
      HEAP8[HEAP32[i9 >> 2] >> 0] = i20;
      i16 = 0;
      i17 = i20;
      i18 = i46;
      continue L1;
      break;
     }
    case 6:
     {
      HEAP32[HEAP32[i9 >> 2] >> 2] = i20;
      i16 = 0;
      i17 = i20;
      i18 = i46;
      continue L1;
      break;
     }
    case 7:
     {
      i36 = HEAP32[i9 >> 2] | 0;
      HEAP32[i36 >> 2] = i20;
      HEAP32[i36 + 4 >> 2] = ((i20 | 0) < 0) << 31 >> 31;
      i16 = 0;
      i17 = i20;
      i18 = i46;
      continue L1;
      break;
     }
    default:
     {
      i16 = 0;
      i17 = i20;
      i18 = i46;
      continue L1;
     }
    }
    break;
   }
  case 112:
   {
    i54 = 120;
    i55 = i48 >>> 0 > 8 ? i48 : 8;
    i56 = i21 | 8;
    i6 = 62;
    break;
   }
  case 88:
  case 120:
   {
    i54 = i37;
    i55 = i48;
    i56 = i21;
    i6 = 62;
    break;
   }
  case 111:
   {
    i36 = i9;
    i38 = HEAP32[i36 >> 2] | 0;
    i57 = HEAP32[i36 + 4 >> 2] | 0;
    i36 = _fmt_o(i38, i57, i13) | 0;
    i58 = i14 - i36 | 0;
    i59 = i36;
    i60 = 0;
    i61 = 67477;
    i62 = (i21 & 8 | 0) == 0 | (i48 | 0) > (i58 | 0) ? i48 : i58 + 1 | 0;
    i63 = i21;
    i64 = i38;
    i65 = i57;
    i6 = 68;
    break;
   }
  case 105:
  case 100:
   {
    i57 = i9;
    i38 = HEAP32[i57 >> 2] | 0;
    i58 = HEAP32[i57 + 4 >> 2] | 0;
    if ((i58 | 0) < 0) {
     i57 = _i64Subtract(0, 0, i38 | 0, i58 | 0) | 0;
     i36 = tempRet0;
     i66 = i9;
     HEAP32[i66 >> 2] = i57;
     HEAP32[i66 + 4 >> 2] = i36;
     i67 = 1;
     i68 = 67477;
     i69 = i57;
     i70 = i36;
     i6 = 67;
     break L73;
    } else {
     i67 = (i21 & 2049 | 0) != 0 & 1;
     i68 = (i21 & 2048 | 0) == 0 ? ((i21 & 1 | 0) == 0 ? 67477 : 67479) : 67478;
     i69 = i38;
     i70 = i58;
     i6 = 67;
     break L73;
    }
    break;
   }
  case 117:
   {
    i58 = i9;
    i67 = 0;
    i68 = 67477;
    i69 = HEAP32[i58 >> 2] | 0;
    i70 = HEAP32[i58 + 4 >> 2] | 0;
    i6 = 67;
    break;
   }
  case 99:
   {
    HEAP8[i15 >> 0] = HEAP32[i9 >> 2];
    i71 = i15;
    i72 = 0;
    i73 = 67477;
    i74 = i13;
    i75 = 1;
    i76 = i35;
    break;
   }
  case 109:
   {
    i58 = ___errno_location() | 0;
    i77 = _strerror(HEAP32[i58 >> 2] | 0) | 0;
    i6 = 72;
    break;
   }
  case 115:
   {
    i58 = HEAP32[i9 >> 2] | 0;
    i77 = i58 | 0 ? i58 : 67487;
    i6 = 72;
    break;
   }
  case 67:
   {
    HEAP32[i11 >> 2] = HEAP32[i9 >> 2];
    HEAP32[i10 >> 2] = 0;
    HEAP32[i9 >> 2] = i11;
    i78 = -1;
    i79 = i11;
    i6 = 76;
    break;
   }
  case 83:
   {
    i58 = HEAP32[i9 >> 2] | 0;
    if (!i48) {
     _pad_560(i1, 32, i44, 0, i21);
     i80 = 0;
     i6 = 85;
    } else {
     i78 = i48;
     i79 = i58;
     i6 = 76;
    }
    break;
   }
  case 65:
  case 71:
  case 70:
  case 69:
  case 97:
  case 103:
  case 102:
  case 101:
   {
    i16 = _fmt_fp(i1, +HEAPF64[i9 >> 3], i44, i48, i21, i37) | 0;
    i17 = i20;
    i18 = i46;
    continue L1;
    break;
   }
  default:
   {
    i71 = i19;
    i72 = 0;
    i73 = 67477;
    i74 = i13;
    i75 = i48;
    i76 = i21;
   }
  } while (0);
  L97 : do if ((i6 | 0) == 62) {
   i6 = 0;
   i19 = i9;
   i37 = HEAP32[i19 >> 2] | 0;
   i31 = HEAP32[i19 + 4 >> 2] | 0;
   i19 = _fmt_x(i37, i31, i13, i54 & 32) | 0;
   i27 = (i56 & 8 | 0) == 0 | (i37 | 0) == 0 & (i31 | 0) == 0;
   i59 = i19;
   i60 = i27 ? 0 : 2;
   i61 = i27 ? 67477 : 67477 + (i54 >> 4) | 0;
   i62 = i55;
   i63 = i56;
   i64 = i37;
   i65 = i31;
   i6 = 68;
  } else if ((i6 | 0) == 67) {
   i6 = 0;
   i59 = _fmt_u(i69, i70, i13) | 0;
   i60 = i67;
   i61 = i68;
   i62 = i48;
   i63 = i21;
   i64 = i69;
   i65 = i70;
   i6 = 68;
  } else if ((i6 | 0) == 72) {
   i6 = 0;
   i31 = _memchr(i77, 0, i48) | 0;
   i37 = (i31 | 0) == 0;
   i71 = i77;
   i72 = 0;
   i73 = 67477;
   i74 = i37 ? i77 + i48 | 0 : i31;
   i75 = i37 ? i48 : i31 - i77 | 0;
   i76 = i35;
  } else if ((i6 | 0) == 76) {
   i6 = 0;
   i31 = i79;
   i37 = 0;
   i27 = 0;
   while (1) {
    i19 = HEAP32[i31 >> 2] | 0;
    if (!i19) {
     i81 = i37;
     i82 = i27;
     break;
    }
    i58 = _wctomb(i12, i19) | 0;
    if ((i58 | 0) < 0 | i58 >>> 0 > (i78 - i37 | 0) >>> 0) {
     i81 = i37;
     i82 = i58;
     break;
    }
    i19 = i58 + i37 | 0;
    if (i78 >>> 0 > i19 >>> 0) {
     i31 = i31 + 4 | 0;
     i37 = i19;
     i27 = i58;
    } else {
     i81 = i19;
     i82 = i58;
     break;
    }
   }
   if ((i82 | 0) < 0) {
    i42 = -1;
    break L1;
   }
   _pad_560(i1, 32, i44, i81, i21);
   if (!i81) {
    i80 = 0;
    i6 = 85;
   } else {
    i27 = i79;
    i37 = 0;
    while (1) {
     i31 = HEAP32[i27 >> 2] | 0;
     if (!i31) {
      i80 = i81;
      i6 = 85;
      break L97;
     }
     i58 = _wctomb(i12, i31) | 0;
     i37 = i58 + i37 | 0;
     if ((i37 | 0) > (i81 | 0)) {
      i80 = i81;
      i6 = 85;
      break L97;
     }
     _out(i1, i12, i58);
     if (i37 >>> 0 >= i81 >>> 0) {
      i80 = i81;
      i6 = 85;
      break;
     } else i27 = i27 + 4 | 0;
    }
   }
  } while (0);
  if ((i6 | 0) == 68) {
   i6 = 0;
   i35 = (i64 | 0) != 0 | (i65 | 0) != 0;
   i27 = (i62 | 0) != 0 | i35;
   i37 = i14 - i59 + ((i35 ^ 1) & 1) | 0;
   i71 = i27 ? i59 : i13;
   i72 = i60;
   i73 = i61;
   i74 = i13;
   i75 = i27 ? ((i62 | 0) > (i37 | 0) ? i62 : i37) : i62;
   i76 = (i62 | 0) > -1 ? i63 & -65537 : i63;
  } else if ((i6 | 0) == 85) {
   i6 = 0;
   _pad_560(i1, 32, i44, i80, i21 ^ 8192);
   i16 = (i44 | 0) > (i80 | 0) ? i44 : i80;
   i17 = i20;
   i18 = i46;
   continue;
  }
  i37 = i74 - i71 | 0;
  i27 = (i75 | 0) < (i37 | 0) ? i37 : i75;
  i35 = i27 + i72 | 0;
  i58 = (i44 | 0) < (i35 | 0) ? i35 : i44;
  _pad_560(i1, 32, i58, i35, i76);
  _out(i1, i73, i72);
  _pad_560(i1, 48, i58, i35, i76 ^ 65536);
  _pad_560(i1, 48, i27, i37, 0);
  _out(i1, i71, i37);
  _pad_560(i1, 32, i58, i35, i76 ^ 8192);
  i16 = i58;
  i17 = i20;
  i18 = i46;
 }
 L116 : do if ((i6 | 0) == 88) if (!i1) if (!i18) i42 = 0; else {
  i46 = 1;
  while (1) {
   i17 = HEAP32[i5 + (i46 << 2) >> 2] | 0;
   if (!i17) {
    i83 = i46;
    break;
   }
   _pop_arg(i4 + (i46 << 3) | 0, i17, i3);
   i17 = i46 + 1 | 0;
   if ((i46 | 0) < 9) i46 = i17; else {
    i83 = i17;
    break;
   }
  }
  if ((i83 | 0) < 10) {
   i46 = i83;
   while (1) {
    if (HEAP32[i5 + (i46 << 2) >> 2] | 0) {
     i42 = -1;
     break L116;
    }
    if ((i46 | 0) < 9) i46 = i46 + 1 | 0; else {
     i42 = 1;
     break;
    }
   }
  } else i42 = 1;
 } else i42 = i20; while (0);
 STACKTOP = i7;
 return i42 | 0;
}

function __ZN11ImFontAtlas30AddFontFromMemoryCompressedTTFEPKvifPK12ImFontConfigPKt(i1, i2, i3, f4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 f4 = Math_fround(f4);
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, f63 = f0, i64 = 0, i65 = 0, f66 = f0, i67 = 0, i68 = 0, f69 = f0, f70 = f0, i71 = 0;
 i3 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(208);
 i8 = i7 + 44 | 0;
 i9 = i7 + 190 | 0;
 i10 = i7 + 163 | 0;
 i11 = i7 + 160 | 0;
 i12 = i7;
 i13 = i2 + 8 | 0;
 i14 = i2 + 9 | 0;
 i15 = i2 + 10 | 0;
 i16 = i2 + 11 | 0;
 i17 = HEAPU8[i14 >> 0] << 16 | HEAPU8[i13 >> 0] << 24 | HEAPU8[i15 >> 0] << 8 | HEAPU8[i16 >> 0];
 i18 = __ZN5ImGui8MemAllocEj(i17) | 0;
 if ((HEAPU8[i2 + 1 >> 0] << 16 | HEAPU8[i2 >> 0] << 24 | HEAPU8[i2 + 3 >> 0] | HEAPU8[i2 + 2 >> 0] << 8 | 0) == 1471938560) if (!(HEAPU8[i2 + 5 >> 0] << 16 | HEAPU8[i2 + 4 >> 0] << 24 | HEAPU8[i2 + 7 >> 0] | HEAPU8[i2 + 6 >> 0] << 8)) {
  i19 = HEAPU8[i14 >> 0] << 16 | HEAPU8[i13 >> 0] << 24 | HEAPU8[i15 >> 0] << 8 | HEAPU8[i16 >> 0];
  HEAP32[1460856] = i2;
  i16 = i18 + i19 | 0;
  HEAP32[1460857] = i16;
  HEAP32[1460858] = i18;
  HEAP32[1460859] = i18;
  i19 = HEAP32[1460857] | 0;
  i15 = i19 | 0;
  i13 = i15 + 1 | 0;
  i14 = i19 | 0;
  i20 = i14 + 1 | 0;
  i21 = i19 | 0;
  i22 = i19 | 0;
  i23 = i22 + 1 | 0;
  i24 = i19 | 0;
  i25 = i24 + 1 | 0;
  i26 = i19 | 0;
  i27 = i19 | 0;
  i28 = i19 | 0;
  i29 = i28 + 1 | 0;
  i30 = i19 | 0;
  i19 = i30 + 1 | 0;
  i31 = i2 + 16 | 0;
  i32 = i18;
  L4 : while (1) {
   i33 = HEAP8[i31 >> 0] | 0;
   i34 = i33 & 255;
   L6 : do if ((i33 & 255) > 31) {
    if (i33 << 24 >> 24 < 0) {
     i35 = i32 + (0 - (HEAPU8[i31 + 1 >> 0] | 0)) + -1 | 0;
     i36 = i34 + -127 | 0;
     if ((i32 + i36 | 0) >>> 0 > i15 >>> 0) {
      i3 = 7;
      break L4;
     }
     if (i35 >>> 0 < i18 >>> 0) HEAP32[1460859] = i13; else if (i36 | 0) {
      i36 = i34 + -128 | 0;
      i37 = HEAP8[i35 >> 0] | 0;
      HEAP32[1460859] = i32 + 1;
      HEAP8[i32 >> 0] = i37;
      if (i36 | 0) {
       i37 = i35;
       i35 = i36;
       i36 = HEAP32[1460859] | 0;
       do {
        i37 = i37 + 1 | 0;
        i35 = i35 + -1 | 0;
        i38 = i36;
        i36 = i36 + 1 | 0;
        HEAP8[i38 >> 0] = HEAP8[i37 >> 0] | 0;
       } while ((i35 | 0) != 0);
       HEAP32[1460859] = i36;
      }
     }
     i39 = i31 + 2 | 0;
     break;
    }
    if ((i33 & 255) <= 63) {
     i35 = i31 + 1 | 0;
     i37 = i34 + -31 | 0;
     if ((i32 + i37 | 0) >>> 0 > i21 >>> 0) {
      i3 = 26;
      break L4;
     }
     if (i35 >>> 0 < i2 >>> 0) {
      i40 = 1;
      i41 = i21;
     } else {
      _memcpy(i32 | 0, i35 | 0, i37 | 0) | 0;
      i40 = i37;
      i41 = HEAP32[1460859] | 0;
     }
     i37 = i41 + i40 | 0;
     HEAP32[1460859] = i37;
     i42 = (HEAPU8[i31 >> 0] | 0) + -30 | 0;
     i43 = i37;
     i3 = 76;
     break;
    }
    i37 = i32 + (16383 - (i34 << 8 | HEAPU8[i31 + 1 >> 0])) | 0;
    i35 = HEAP8[i31 + 2 >> 0] | 0;
    i38 = i35 & 255;
    if ((i32 + (i38 + 1) | 0) >>> 0 > i14 >>> 0) {
     i3 = 18;
     break L4;
    }
    if (i37 >>> 0 < i18 >>> 0) {
     i44 = i20;
     i3 = 23;
    } else {
     i45 = HEAP8[i37 >> 0] | 0;
     HEAP32[1460859] = i32 + 1;
     HEAP8[i32 >> 0] = i45;
     if (i35 << 24 >> 24) {
      i35 = i37;
      i37 = i38;
      i38 = HEAP32[1460859] | 0;
      while (1) {
       i35 = i35 + 1 | 0;
       i37 = i37 + -1 | 0;
       i45 = i38 + 1 | 0;
       HEAP8[i38 >> 0] = HEAP8[i35 >> 0] | 0;
       if (!i37) {
        i44 = i45;
        i3 = 23;
        break;
       } else i38 = i45;
      }
     }
    }
    if ((i3 | 0) == 23) {
     i3 = 0;
     HEAP32[1460859] = i44;
    }
    i39 = i31 + 3 | 0;
   } else {
    if ((i33 & 255) > 23) {
     i38 = i32 + (1572863 - (i34 << 16 | HEAPU8[i31 + 2 >> 0] | HEAPU8[i31 + 1 >> 0] << 8)) | 0;
     i37 = HEAP8[i31 + 3 >> 0] | 0;
     i35 = i37 & 255;
     if ((i32 + (i35 + 1) | 0) >>> 0 > i22 >>> 0) {
      i3 = 32;
      break L4;
     }
     if (i38 >>> 0 < i18 >>> 0) {
      i46 = i23;
      i3 = 37;
     } else {
      i36 = HEAP8[i38 >> 0] | 0;
      HEAP32[1460859] = i32 + 1;
      HEAP8[i32 >> 0] = i36;
      if (i37 << 24 >> 24) {
       i37 = i38;
       i38 = i35;
       i35 = HEAP32[1460859] | 0;
       while (1) {
        i37 = i37 + 1 | 0;
        i38 = i38 + -1 | 0;
        i36 = i35 + 1 | 0;
        HEAP8[i35 >> 0] = HEAP8[i37 >> 0] | 0;
        if (!i38) {
         i46 = i36;
         i3 = 37;
         break;
        } else i35 = i36;
       }
      }
     }
     if ((i3 | 0) == 37) {
      i3 = 0;
      HEAP32[1460859] = i46;
     }
     i39 = i31 + 4 | 0;
     break;
    }
    if ((i33 & 255) > 15) {
     i35 = i32 + (1048575 - (i34 << 16 | HEAPU8[i31 + 2 >> 0] | HEAPU8[i31 + 1 >> 0] << 8)) | 0;
     i38 = HEAPU8[i31 + 3 >> 0] << 8 | HEAPU8[i31 + 4 >> 0];
     if ((i32 + (i38 + 1) | 0) >>> 0 > i24 >>> 0) {
      i3 = 41;
      break L4;
     }
     if (i35 >>> 0 < i18 >>> 0) {
      i47 = i25;
      i3 = 46;
     } else {
      i37 = HEAP8[i35 >> 0] | 0;
      HEAP32[1460859] = i32 + 1;
      HEAP8[i32 >> 0] = i37;
      if (i38 | 0) {
       i37 = i35;
       i35 = i38;
       i38 = HEAP32[1460859] | 0;
       while (1) {
        i37 = i37 + 1 | 0;
        i35 = i35 + -1 | 0;
        i36 = i38 + 1 | 0;
        HEAP8[i38 >> 0] = HEAP8[i37 >> 0] | 0;
        if (!i35) {
         i47 = i36;
         i3 = 46;
         break;
        } else i38 = i36;
       }
      }
     }
     if ((i3 | 0) == 46) {
      i3 = 0;
      HEAP32[1460859] = i47;
     }
     i39 = i31 + 5 | 0;
     break;
    }
    if ((i33 & 255) > 7) {
     i38 = i31 + 2 | 0;
     i35 = i31 + 1 | 0;
     i37 = (i34 << 8 | HEAPU8[i35 >> 0]) + -2047 | 0;
     if ((i32 + i37 | 0) >>> 0 > i26 >>> 0) {
      i3 = 50;
      break L4;
     }
     if (i38 >>> 0 < i2 >>> 0) {
      i48 = 1;
      i49 = i26;
     } else {
      _memcpy(i32 | 0, i38 | 0, i37 | 0) | 0;
      i48 = i37;
      i49 = HEAP32[1460859] | 0;
     }
     i37 = i49 + i48 | 0;
     HEAP32[1460859] = i37;
     i42 = (HEAPU8[i31 >> 0] << 8 | HEAPU8[i35 >> 0]) + -2045 | 0;
     i43 = i37;
     i3 = 76;
     break;
    }
    switch (i33 << 24 >> 24) {
    case 7:
     {
      i37 = i31 + 3 | 0;
      i35 = i31 + 1 | 0;
      i38 = i31 + 2 | 0;
      i36 = (HEAPU8[i35 >> 0] << 8 | HEAPU8[i38 >> 0]) + 1 | 0;
      if ((i32 + i36 | 0) >>> 0 > i27 >>> 0) {
       i3 = 56;
       break L4;
      }
      if (i37 >>> 0 < i2 >>> 0) {
       i50 = 1;
       i51 = i27;
      } else {
       _memcpy(i32 | 0, i37 | 0, i36 | 0) | 0;
       i50 = i36;
       i51 = HEAP32[1460859] | 0;
      }
      HEAP32[1460859] = i51 + i50;
      i39 = i31 + ((HEAPU8[i35 >> 0] << 8 | HEAPU8[i38 >> 0]) + 4) | 0;
      break L6;
      break;
     }
    case 6:
     {
      i38 = i32 + ~(HEAPU8[i31 + 1 >> 0] << 16 | HEAPU8[i31 + 3 >> 0] | HEAPU8[i31 + 2 >> 0] << 8) | 0;
      i35 = HEAP8[i31 + 4 >> 0] | 0;
      i36 = i35 & 255;
      if ((i32 + (i36 + 1) | 0) >>> 0 > i28 >>> 0) {
       i3 = 61;
       break L4;
      }
      if (i38 >>> 0 < i18 >>> 0) {
       i52 = i29;
       i3 = 66;
      } else {
       i37 = HEAP8[i38 >> 0] | 0;
       HEAP32[1460859] = i32 + 1;
       HEAP8[i32 >> 0] = i37;
       if (i35 << 24 >> 24) {
        i35 = i38;
        i38 = i36;
        i36 = HEAP32[1460859] | 0;
        while (1) {
         i35 = i35 + 1 | 0;
         i38 = i38 + -1 | 0;
         i37 = i36 + 1 | 0;
         HEAP8[i36 >> 0] = HEAP8[i35 >> 0] | 0;
         if (!i38) {
          i52 = i37;
          i3 = 66;
          break;
         } else i36 = i37;
        }
       }
      }
      if ((i3 | 0) == 66) {
       i3 = 0;
       HEAP32[1460859] = i52;
      }
      i39 = i31 + 5 | 0;
      break L6;
      break;
     }
    case 4:
     {
      i36 = i32 + ~(HEAPU8[i31 + 1 >> 0] << 16 | HEAPU8[i31 + 3 >> 0] | HEAPU8[i31 + 2 >> 0] << 8) | 0;
      i38 = HEAPU8[i31 + 4 >> 0] << 8 | HEAPU8[i31 + 5 >> 0];
      if ((i32 + (i38 + 1) | 0) >>> 0 > i30 >>> 0) {
       i3 = 69;
       break L4;
      }
      if (i36 >>> 0 < i18 >>> 0) {
       i53 = i19;
       i3 = 74;
      } else {
       i35 = HEAP8[i36 >> 0] | 0;
       HEAP32[1460859] = i32 + 1;
       HEAP8[i32 >> 0] = i35;
       if (i38 | 0) {
        i35 = i36;
        i36 = i38;
        i38 = HEAP32[1460859] | 0;
        while (1) {
         i35 = i35 + 1 | 0;
         i36 = i36 + -1 | 0;
         i37 = i38 + 1 | 0;
         HEAP8[i38 >> 0] = HEAP8[i35 >> 0] | 0;
         if (!i36) {
          i53 = i37;
          i3 = 74;
          break;
         } else i38 = i37;
        }
       }
      }
      if ((i3 | 0) == 74) {
       i3 = 0;
       HEAP32[1460859] = i53;
      }
      i39 = i31 + 6 | 0;
      break L6;
      break;
     }
    default:
     {
      i54 = i31;
      i55 = i33;
      i56 = i32;
      break L4;
     }
    }
   } while (0);
   if ((i3 | 0) == 76) {
    i3 = 0;
    i57 = i31 + i42 | 0;
    if (!i42) {
     i3 = 77;
     break;
    } else i39 = i57;
   }
   i32 = HEAP32[1460859] | 0;
   if (i32 >>> 0 > i16 >>> 0) {
    i3 = 84;
    break;
   } else i31 = i39;
  }
  switch (i3 | 0) {
  case 7:
   {
    ___assert_fail(55683, 38201, 2876, 55724);
    break;
   }
  case 18:
   {
    ___assert_fail(55683, 38201, 2876, 55724);
    break;
   }
  case 26:
   {
    ___assert_fail(55683, 38201, 2884, 55735);
    break;
   }
  case 32:
   {
    ___assert_fail(55683, 38201, 2876, 55724);
    break;
   }
  case 41:
   {
    ___assert_fail(55683, 38201, 2876, 55724);
    break;
   }
  case 50:
   {
    ___assert_fail(55683, 38201, 2884, 55735);
    break;
   }
  case 56:
   {
    ___assert_fail(55683, 38201, 2884, 55735);
    break;
   }
  case 61:
   {
    ___assert_fail(55683, 38201, 2876, 55724);
    break;
   }
  case 69:
   {
    ___assert_fail(55683, 38201, 2876, 55724);
    break;
   }
  case 77:
   {
    i54 = i57;
    i55 = HEAP8[i57 >> 0] | 0;
    i56 = i43;
    break;
   }
  case 84:
   {
    ___assert_fail(55786, 38201, 2970, 55771);
    break;
   }
  }
  if (i55 << 24 >> 24 != 5) ___assert_fail(54909, 38201, 2966, 55771);
  if ((HEAP8[i54 + 1 >> 0] | 0) != -6) ___assert_fail(54909, 38201, 2966, 55771);
  if ((i56 | 0) != (i16 | 0)) ___assert_fail(55744, 38201, 2960, 55771);
 }
 if (!i5) {
  i58 = i10 + 3 | 0;
  i59 = i58 + 24 | 0;
  do {
   HEAP8[i58 >> 0] = 0;
   i58 = i58 + 1 | 0;
  } while ((i58 | 0) < (i59 | 0));
  i58 = i12;
  i59 = i58 + 44 | 0;
  do {
   HEAP32[i58 >> 2] = 0;
   i58 = i58 + 4 | 0;
  } while ((i58 | 0) < (i59 | 0));
  i60 = 3;
  i61 = 1;
  i62 = 0;
  f63 = Math_fround(3402823469999999843913219.0e14);
  i64 = 0;
  i65 = 0;
  f66 = Math_fround(1.0);
  i67 = 0;
 } else {
  i16 = HEAP32[i5 >> 2] | 0;
  i56 = i5 + 9 | 0;
  HEAP8[i9 >> 0] = HEAP8[i56 >> 0] | 0;
  HEAP8[i9 + 1 >> 0] = HEAP8[i56 + 1 >> 0] | 0;
  HEAP8[i9 + 2 >> 0] = HEAP8[i56 + 2 >> 0] | 0;
  i56 = HEAP32[i5 + 12 >> 2] | 0;
  i54 = HEAP32[i5 + 20 >> 2] | 0;
  i55 = HEAP32[i5 + 24 >> 2] | 0;
  i43 = HEAP8[i5 + 28 >> 0] | 0;
  i58 = i10;
  i68 = i5 + 29 | 0;
  i59 = i58 + 27 | 0;
  do {
   HEAP8[i58 >> 0] = HEAP8[i68 >> 0] | 0;
   i58 = i58 + 1 | 0;
   i68 = i68 + 1 | 0;
  } while ((i58 | 0) < (i59 | 0));
  f69 = Math_fround(HEAPF32[i5 + 56 >> 2]);
  i57 = HEAP8[i5 + 60 >> 0] | 0;
  i3 = i5 + 61 | 0;
  HEAP8[i11 >> 0] = HEAP8[i3 >> 0] | 0;
  HEAP8[i11 + 1 >> 0] = HEAP8[i3 + 1 >> 0] | 0;
  HEAP8[i11 + 2 >> 0] = HEAP8[i3 + 2 >> 0] | 0;
  i3 = HEAP32[i5 + 64 >> 2] | 0;
  f70 = Math_fround(HEAPF32[i5 + 68 >> 2]);
  i58 = i12;
  i68 = i5 + 72 | 0;
  i59 = i58 + 44 | 0;
  do {
   HEAP32[i58 >> 2] = HEAP32[i68 >> 2];
   i58 = i58 + 4 | 0;
   i68 = i68 + 4 | 0;
  } while ((i58 | 0) < (i59 | 0));
  if (!i16) {
   i60 = i54;
   i61 = i55;
   i62 = i43;
   f63 = f69;
   i64 = i57;
   i65 = i3;
   f66 = f70;
   i67 = i56;
  } else ___assert_fail(55813, 38201, 1598, 55837);
 }
 i56 = i8 + 4 | 0;
 HEAP8[i8 + 8 >> 0] = 1;
 i3 = i8 + 9 | 0;
 HEAP8[i3 >> 0] = HEAP8[i9 >> 0] | 0;
 HEAP8[i3 + 1 >> 0] = HEAP8[i9 + 1 >> 0] | 0;
 HEAP8[i3 + 2 >> 0] = HEAP8[i9 + 2 >> 0] | 0;
 HEAP32[i8 + 12 >> 2] = i67;
 i67 = i8 + 16 | 0;
 HEAP32[i8 + 20 >> 2] = i60;
 HEAP32[i8 + 24 >> 2] = i61;
 HEAP8[i8 + 28 >> 0] = i62;
 i58 = i8 + 29 | 0;
 i68 = i10;
 i59 = i58 + 27 | 0;
 do {
  HEAP8[i58 >> 0] = HEAP8[i68 >> 0] | 0;
  i58 = i58 + 1 | 0;
  i68 = i68 + 1 | 0;
 } while ((i58 | 0) < (i59 | 0));
 HEAPF32[i8 + 56 >> 2] = f63;
 HEAP8[i8 + 60 >> 0] = i64;
 i64 = i8 + 61 | 0;
 HEAP8[i64 >> 0] = HEAP8[i11 >> 0] | 0;
 HEAP8[i64 + 1 >> 0] = HEAP8[i11 + 1 >> 0] | 0;
 HEAP8[i64 + 2 >> 0] = HEAP8[i11 + 2 >> 0] | 0;
 HEAP32[i8 + 64 >> 2] = i65;
 HEAPF32[i8 + 68 >> 2] = f66;
 i58 = i8 + 72 | 0;
 i68 = i12;
 i59 = i58 + 44 | 0;
 do {
  HEAP32[i58 >> 2] = HEAP32[i68 >> 2];
  i58 = i58 + 4 | 0;
  i68 = i68 + 4 | 0;
 } while ((i58 | 0) < (i59 | 0));
 HEAP32[i8 >> 2] = i18;
 HEAP32[i56 >> 2] = i17;
 HEAPF32[i67 >> 2] = f4;
 if (!i6) {
  i71 = __ZN11ImFontAtlas7AddFontEPK12ImFontConfig(i1, i8) | 0;
  STACKTOP = i7;
  return i71 | 0;
 }
 HEAP32[i8 + 48 >> 2] = i6;
 i71 = __ZN11ImFontAtlas7AddFontEPK12ImFontConfig(i1, i8) | 0;
 STACKTOP = i7;
 return i71 | 0;
}

function __ZN5ImGui14ButtonBehaviorERK6ImRectjPbS3_i(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, f20 = f0, f21 = f0, f22 = f0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, f27 = f0, f28 = f0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0;
 i6 = 0;
 i7 = HEAP32[1460598] | 0;
 i8 = HEAP32[i7 + 6392 >> 2] | 0;
 HEAP8[i8 + 120 >> 0] = 1;
 if (i5 & 256 | 0) {
  if (i3 | 0) HEAP8[i3 >> 0] = 0;
  if (i4 | 0) HEAP8[i4 >> 0] = 0;
  i9 = i7 + 6420 | 0;
  if ((HEAP32[i9 >> 2] | 0) != (i2 | 0)) {
   i10 = 0;
   return i10 | 0;
  }
  i11 = (i2 | 0) != 0;
  HEAP8[i7 + 6433 >> 0] = i11 & 1;
  if (i11) {
   HEAPF32[i7 + 6428 >> 2] = Math_fround(0.0);
   HEAP8[i7 + 6435 >> 0] = 0;
  }
  HEAP32[i9 >> 2] = 0;
  HEAP32[i7 + 6440 >> 2] = 0;
  HEAP8[i7 + 6434 >> 0] = 0;
  HEAP32[i7 + 6452 >> 2] = 0;
  i10 = 0;
  return i10 | 0;
 }
 i9 = (i5 & 30 | 0) == 0 ? i5 | 2 : i5;
 i5 = i7 + 6396 | 0;
 i11 = HEAP32[i5 >> 2] | 0;
 i12 = (i9 & 32 | 0) != 0;
 if (i12) if ((HEAP32[i7 + 6400 >> 2] | 0) == (i8 | 0)) HEAP32[i5 >> 2] = i8;
 i13 = __ZN5ImGui13ItemHoverableERK6ImRectj(i1, i2) | 0;
 i14 = i7 + 7072 | 0;
 i15 = HEAP8[i14 >> 0] | 0;
 if (i13) if (!(i15 << 24 >> 24)) {
  i16 = 0;
  i17 = 1;
 } else {
  i18 = (HEAP32[i7 + 7092 >> 2] | 0) != (i2 | 0);
  i19 = 1;
  i6 = 16;
 } else {
  i18 = 0;
  i19 = i15;
  i6 = 16;
 }
 do if ((i6 | 0) == 16) if ((i9 & 4096 | 0) == 0 | i19 << 24 >> 24 == 0) {
  i16 = 0;
  i17 = i18;
 } else if (!(HEAP32[i7 + 7076 >> 2] & 4)) if (__ZN5ImGui13IsItemHoveredEi(32) | 0) {
  i15 = HEAP32[1460598] | 0;
  HEAP32[i15 + 6404 >> 2] = i2;
  HEAP8[i15 + 6408 >> 0] = 0;
  if (!i2) f20 = Math_fround(0.0); else if ((HEAP32[i15 + 6412 >> 2] | 0) == (i2 | 0)) {
   f21 = Math_fround(HEAPF32[i15 + 6416 >> 2]);
   f20 = Math_fround(f21 + Math_fround(HEAPF32[i15 + 20 >> 2]));
  } else f20 = Math_fround(0.0);
  HEAPF32[i15 + 6416 >> 2] = f20;
  f21 = Math_fround(Math_fround(HEAPF32[i7 + 6416 >> 2]) + Math_fround(.0000999999974));
  f22 = Math_fround(f21 - Math_fround(HEAPF32[i7 + 20 >> 2]));
  if (!(f21 == Math_fround(0.0))) {
   if (f21 <= Math_fround(.00999999977)) {
    i16 = 0;
    i17 = 1;
    break;
   }
   if ((~~Math_fround(Math_fround(f21 + Math_fround(-.00999999977)) / Math_fround(.699999988)) | 0) <= (~~Math_fround(Math_fround(f22 + Math_fround(-.00999999977)) / Math_fround(.699999988)) | 0)) {
    i16 = 0;
    i17 = 1;
    break;
   }
  }
  __ZN5ImGui11FocusWindowEP11ImGuiWindow(i8);
  i16 = 1;
  i17 = 1;
 } else {
  i16 = 0;
  i17 = i18;
 } else {
  i16 = 0;
  i17 = i18;
 } while (0);
 if (i12) if ((HEAP32[i7 + 6400 >> 2] | 0) == (i8 | 0)) HEAP32[i5 >> 2] = i11;
 if ((i9 & 64 | 0) == 0 | i17 ^ 1) if (i17) i6 = 32; else {
  i23 = 0;
  i24 = i16;
 } else {
  i11 = HEAP32[i7 + 6412 >> 2] | 0;
  if (i17 & ((i11 | 0) == (i2 | 0) | (i11 | 0) == 0)) i6 = 32; else {
   i23 = 0;
   i24 = i16;
  }
 }
 do if ((i6 | 0) == 32) {
  if (!(i9 & 1024)) i6 = 36; else if (!(HEAP8[i7 + 237 >> 0] | 0)) if (!(HEAP8[i7 + 238 >> 0] | 0)) if (!(HEAP8[i7 + 239 >> 0] | 0)) i6 = 36; else {
   i25 = i16;
   i6 = 90;
  } else {
   i25 = i16;
   i6 = 90;
  } else {
   i25 = i16;
   i6 = 90;
  }
  if ((i6 | 0) == 36) {
   if (i9 & 2 | 0) if (HEAP8[i7 + 972 >> 0] | 0) {
    i11 = HEAP32[1460598] | 0;
    i17 = i11 + 6420 | 0;
    i5 = (HEAP32[i17 >> 2] | 0) != (i2 | 0);
    HEAP8[i11 + 6433 >> 0] = i5 & 1;
    if (i5) {
     HEAPF32[i11 + 6428 >> 2] = Math_fround(0.0);
     HEAP8[i11 + 6435 >> 0] = 0;
     if (i2 | 0) {
      HEAP32[i11 + 6464 >> 2] = i2;
      HEAPF32[i11 + 6468 >> 2] = Math_fround(0.0);
     }
    }
    HEAP32[i17 >> 2] = i2;
    HEAP32[i11 + 6440 >> 2] = 0;
    HEAP8[i11 + 6434 >> 0] = 0;
    HEAP32[i11 + 6452 >> 2] = i8;
    i17 = (i2 | 0) == 0;
    if (!i17) {
     HEAP8[i11 + 6432 >> 0] = 1;
     if ((HEAP32[i11 + 6652 >> 2] | 0) == (i2 | 0)) i26 = 2; else if ((HEAP32[i11 + 6664 >> 2] | 0) == (i2 | 0)) i26 = 2; else if ((HEAP32[i11 + 6668 >> 2] | 0) == (i2 | 0)) i26 = 2; else i26 = (HEAP32[i11 + 6672 >> 2] | 0) == (i2 | 0) ? 2 : 1;
     HEAP32[i11 + 6460 >> 2] = i26;
    }
    do if (!(i9 & 8192)) {
     if (i17) ___assert_fail(32302, 31803, 2206, 32310);
     i5 = HEAP32[i8 + 300 >> 2] | 0;
     i12 = i11 + 6644 | 0;
     if ((HEAP32[i12 >> 2] | 0) != (i8 | 0)) HEAP8[i11 + 6733 >> 0] = 0;
     HEAP32[i11 + 6648 >> 2] = i2;
     HEAP32[i12 >> 2] = i8;
     HEAP32[i11 + 6720 >> 2] = i5;
     HEAP32[i8 + 776 + (i5 << 2) >> 2] = i2;
     if ((HEAP32[i8 + 256 >> 2] | 0) == (i2 | 0)) {
      f20 = Math_fround(HEAPF32[i8 + 264 >> 2]);
      f22 = Math_fround(HEAPF32[i8 + 12 >> 2]);
      f21 = Math_fround(f20 - f22);
      f20 = Math_fround(HEAPF32[i8 + 268 >> 2]);
      f27 = Math_fround(HEAPF32[i8 + 16 >> 2]);
      f28 = Math_fround(f20 - f27);
      f20 = Math_fround(Math_fround(HEAPF32[i8 + 272 >> 2]) - f22);
      f22 = Math_fround(Math_fround(HEAPF32[i8 + 276 >> 2]) - f27);
      i12 = i8 + 784 + (i5 << 4) | 0;
      HEAPF32[i12 >> 2] = f21;
      HEAPF32[i12 + 4 >> 2] = f28;
      HEAPF32[i12 + 8 >> 2] = f20;
      HEAPF32[i12 + 12 >> 2] = f22;
     }
     if ((HEAP32[i11 + 6460 >> 2] | 0) == 2) {
      HEAP8[i11 + 6731 >> 0] = 1;
      break;
     } else {
      HEAP8[i11 + 6730 >> 0] = 1;
      break;
     }
    } while (0);
    __ZN5ImGui11FocusWindowEP11ImGuiWindow(i8);
   }
   if (!(i9 & 4)) i6 = 60; else if (!(HEAP8[i7 + 972 >> 0] | 0)) i6 = 60; else i6 = 62;
   if ((i6 | 0) == 60) if (!(i9 & 16)) i29 = i16; else if (!(HEAP8[i7 + 977 >> 0] | 0)) i29 = i16; else i6 = 62;
   if ((i6 | 0) == 62) {
    i11 = HEAP32[1460598] | 0;
    i17 = i11 + 6420 | 0;
    i12 = HEAP32[i17 >> 2] | 0;
    if (!(i9 & 2048)) {
     i5 = (i12 | 0) != (i2 | 0);
     HEAP8[i11 + 6433 >> 0] = i5 & 1;
     if (i5) {
      HEAPF32[i11 + 6428 >> 2] = Math_fround(0.0);
      HEAP8[i11 + 6435 >> 0] = 0;
      if (i2 | 0) {
       HEAP32[i11 + 6464 >> 2] = i2;
       HEAPF32[i11 + 6468 >> 2] = Math_fround(0.0);
      }
     }
     HEAP32[i17 >> 2] = i2;
     HEAP32[i11 + 6440 >> 2] = 0;
     HEAP8[i11 + 6434 >> 0] = 0;
     HEAP32[i11 + 6452 >> 2] = i8;
     if (i2 | 0) {
      HEAP8[i11 + 6432 >> 0] = 1;
      if ((HEAP32[i11 + 6652 >> 2] | 0) == (i2 | 0)) i30 = 2; else if ((HEAP32[i11 + 6664 >> 2] | 0) == (i2 | 0)) i30 = 2; else if ((HEAP32[i11 + 6668 >> 2] | 0) == (i2 | 0)) i30 = 2; else i30 = (HEAP32[i11 + 6672 >> 2] | 0) == (i2 | 0) ? 2 : 1;
      HEAP32[i11 + 6460 >> 2] = i30;
     }
    } else {
     i5 = (i12 | 0) != 0;
     HEAP8[i11 + 6433 >> 0] = i5 & 1;
     if (i5) {
      HEAPF32[i11 + 6428 >> 2] = Math_fround(0.0);
      HEAP8[i11 + 6435 >> 0] = 0;
     }
     HEAP32[i17 >> 2] = 0;
     HEAP32[i11 + 6440 >> 2] = 0;
     HEAP8[i11 + 6434 >> 0] = 0;
     HEAP32[i11 + 6452 >> 2] = 0;
    }
    __ZN5ImGui11FocusWindowEP11ImGuiWindow(i8);
    i29 = 1;
   }
   if (!(i9 & 8)) i31 = i29; else if (!(HEAP8[i7 + 982 >> 0] | 0)) i31 = i29; else {
    if (!(i9 & 1)) i6 = 80; else {
     f22 = Math_fround(HEAPF32[i7 + 1012 >> 2]);
     if (!(f22 >= Math_fround(HEAPF32[i7 + 132 >> 2]))) i6 = 80; else i32 = i29;
    }
    if ((i6 | 0) == 80) i32 = 1;
    i11 = HEAP32[1460598] | 0;
    i17 = i11 + 6420 | 0;
    i5 = (HEAP32[i17 >> 2] | 0) != 0;
    HEAP8[i11 + 6433 >> 0] = i5 & 1;
    if (i5) {
     HEAPF32[i11 + 6428 >> 2] = Math_fround(0.0);
     HEAP8[i11 + 6435 >> 0] = 0;
    }
    HEAP32[i17 >> 2] = 0;
    HEAP32[i11 + 6440 >> 2] = 0;
    HEAP8[i11 + 6434 >> 0] = 0;
    HEAP32[i11 + 6452 >> 2] = 0;
    i31 = i32;
   }
   if (!(i9 & 1)) {
    i25 = i31;
    i6 = 90;
   } else if ((HEAP32[i7 + 6420 >> 2] | 0) == (i2 | 0)) if (Math_fround(HEAPF32[i7 + 992 >> 2]) > Math_fround(0.0)) {
    i11 = HEAP32[1460598] | 0;
    f22 = Math_fround(HEAPF32[i11 + 992 >> 2]);
    if (!(f22 == Math_fround(0.0))) {
     f20 = Math_fround(HEAPF32[i11 + 132 >> 2]);
     if (f22 > f20) {
      f28 = Math_fround(HEAPF32[i11 + 136 >> 2]);
      f21 = Math_fround(f22 - f20);
      f20 = Math_fround(f28 * Math_fround(.5));
      i17 = Math_fround(_fmodf(f21, f28)) > f20;
      if (!(i17 ^ Math_fround(_fmodf(Math_fround(f21 - Math_fround(HEAPF32[i11 + 20 >> 2])), f28)) > f20)) {
       i25 = i31;
       i6 = 90;
      }
     } else {
      i25 = i31;
      i6 = 90;
     }
    }
   } else {
    i25 = i31;
    i6 = 90;
   } else {
    i25 = i31;
    i6 = 90;
   }
  }
  if ((i6 | 0) == 90) if (!i25) {
   i23 = 1;
   i24 = 0;
   break;
  }
  HEAP8[i7 + 6730 >> 0] = 1;
  i23 = 1;
  i24 = 1;
 } while (0);
 do if ((HEAP32[i7 + 6648 >> 2] | 0) == (i2 | 0)) if (!(HEAP8[i7 + 6730 >> 0] | 0)) if (!(HEAP8[i7 + 6731 >> 0] | 0)) i33 = i23; else {
  i25 = HEAP32[i7 + 6420 >> 2] | 0;
  if (!((i25 | 0) == 0 | (i25 | 0) == (i2 | 0))) if ((i25 | 0) != (HEAP32[i8 + 76 >> 2] | 0)) {
   i33 = i23;
   break;
  }
  i33 = 1;
 } else i33 = i23; else i33 = i23; while (0);
 i23 = i7 + 6656 | 0;
 do if ((HEAP32[i23 >> 2] | 0) == (i2 | 0)) {
  i25 = i7 + 6652 | 0;
  i6 = (HEAP32[i25 >> 2] | 0) == (i2 | 0);
  i31 = i6 | Math_fround(__ZN5ImGui17GetNavInputAmountEi18ImGuiInputReadMode(0, i9 << 1 & 2 | 1)) > Math_fround(0.0);
  i6 = i24 | i31;
  if (!i31) if ((HEAP32[i7 + 6420 >> 2] | 0) != (i2 | 0)) {
   i34 = i24;
   break;
  }
  HEAP32[i25 >> 2] = i2;
  i25 = HEAP32[1460598] | 0;
  i31 = i25 + 6420 | 0;
  i32 = (HEAP32[i31 >> 2] | 0) != (i2 | 0);
  HEAP8[i25 + 6433 >> 0] = i32 & 1;
  if (i32) {
   HEAPF32[i25 + 6428 >> 2] = Math_fround(0.0);
   HEAP8[i25 + 6435 >> 0] = 0;
   if (i2 | 0) {
    HEAP32[i25 + 6464 >> 2] = i2;
    HEAPF32[i25 + 6468 >> 2] = Math_fround(0.0);
   }
  }
  HEAP32[i31 >> 2] = i2;
  HEAP32[i25 + 6440 >> 2] = 0;
  HEAP8[i25 + 6434 >> 0] = 0;
  HEAP32[i25 + 6452 >> 2] = i8;
  i31 = (i2 | 0) == 0;
  if (!i31) {
   HEAP8[i25 + 6432 >> 0] = 1;
   if ((HEAP32[i25 + 6652 >> 2] | 0) == (i2 | 0)) i35 = 2; else if ((HEAP32[i25 + 6664 >> 2] | 0) == (i2 | 0)) i35 = 2; else if ((HEAP32[i25 + 6668 >> 2] | 0) == (i2 | 0)) i35 = 2; else i35 = (HEAP32[i25 + 6672 >> 2] | 0) == (i2 | 0) ? 2 : 1;
   HEAP32[i25 + 6460 >> 2] = i35;
  }
  do if (!(i9 & 8192)) {
   if (i31) ___assert_fail(32302, 31803, 2206, 32310);
   i32 = HEAP32[i8 + 300 >> 2] | 0;
   i29 = i25 + 6644 | 0;
   if ((HEAP32[i29 >> 2] | 0) != (i8 | 0)) HEAP8[i25 + 6733 >> 0] = 0;
   HEAP32[i25 + 6648 >> 2] = i2;
   HEAP32[i29 >> 2] = i8;
   HEAP32[i25 + 6720 >> 2] = i32;
   HEAP32[i8 + 776 + (i32 << 2) >> 2] = i2;
   if ((HEAP32[i8 + 256 >> 2] | 0) == (i2 | 0)) {
    f20 = Math_fround(HEAPF32[i8 + 264 >> 2]);
    f28 = Math_fround(HEAPF32[i8 + 12 >> 2]);
    f21 = Math_fround(f20 - f28);
    f20 = Math_fround(HEAPF32[i8 + 268 >> 2]);
    f22 = Math_fround(HEAPF32[i8 + 16 >> 2]);
    f27 = Math_fround(f20 - f22);
    f20 = Math_fround(Math_fround(HEAPF32[i8 + 272 >> 2]) - f28);
    f28 = Math_fround(Math_fround(HEAPF32[i8 + 276 >> 2]) - f22);
    i29 = i8 + 784 + (i32 << 4) | 0;
    HEAPF32[i29 >> 2] = f21;
    HEAPF32[i29 + 4 >> 2] = f27;
    HEAPF32[i29 + 8 >> 2] = f20;
    HEAPF32[i29 + 12 >> 2] = f28;
   }
   if ((HEAP32[i25 + 6460 >> 2] | 0) == 2) {
    HEAP8[i25 + 6731 >> 0] = 1;
    break;
   } else {
    HEAP8[i25 + 6730 >> 0] = 1;
    break;
   }
  } while (0);
  HEAP32[i7 + 6440 >> 2] = 15;
  i34 = i6;
 } else i34 = i24; while (0);
 L171 : do if ((HEAP32[i7 + 6420 >> 2] | 0) == (i2 | 0)) {
  switch (HEAP32[i7 + 6460 >> 2] | 0) {
  case 1:
   break;
  case 2:
   {
    if ((HEAP32[i23 >> 2] | 0) == (i2 | 0)) {
     i36 = 0;
     i37 = i34;
     break L171;
    }
    i24 = HEAP32[1460598] | 0;
    i8 = i24 + 6420 | 0;
    i35 = (HEAP32[i8 >> 2] | 0) != 0;
    HEAP8[i24 + 6433 >> 0] = i35 & 1;
    if (i35) {
     HEAPF32[i24 + 6428 >> 2] = Math_fround(0.0);
     HEAP8[i24 + 6435 >> 0] = 0;
    }
    HEAP32[i8 >> 2] = 0;
    HEAP32[i24 + 6440 >> 2] = 0;
    HEAP8[i24 + 6434 >> 0] = 0;
    HEAP32[i24 + 6452 >> 2] = 0;
    i36 = 0;
    i37 = i34;
    break L171;
    break;
   }
  default:
   {
    i36 = 0;
    i37 = i34;
    break L171;
   }
  }
  if (HEAP8[i7 + 6433 >> 0] | 0) {
   f28 = Math_fround(HEAPF32[i7 + 212 >> 2]);
   f20 = Math_fround(f28 - Math_fround(HEAPF32[i1 >> 2]));
   f28 = Math_fround(HEAPF32[i7 + 216 >> 2]);
   f27 = Math_fround(f28 - Math_fround(HEAPF32[i1 + 4 >> 2]));
   HEAPF32[i7 + 6444 >> 2] = f20;
   HEAPF32[i7 + 6448 >> 2] = f27;
  }
  if (!(HEAP8[i7 + 220 >> 0] | 0)) {
   do if ((i9 & 2 | 0) == 0 | i33 ^ 1) i38 = i34; else {
    if (i9 & 1 | 0) {
     f27 = Math_fround(HEAPF32[i7 + 1012 >> 2]);
     if (f27 >= Math_fround(HEAPF32[i7 + 132 >> 2])) {
      i38 = i34;
      break;
     }
    }
    i38 = i34 | (HEAP8[i14 >> 0] | 0) == 0;
   } while (0);
   i6 = HEAP32[1460598] | 0;
   i24 = i6 + 6420 | 0;
   i8 = (HEAP32[i24 >> 2] | 0) != 0;
   HEAP8[i6 + 6433 >> 0] = i8 & 1;
   if (i8) {
    HEAPF32[i6 + 6428 >> 2] = Math_fround(0.0);
    HEAP8[i6 + 6435 >> 0] = 0;
   }
   HEAP32[i24 >> 2] = 0;
   HEAP32[i6 + 6440 >> 2] = 0;
   HEAP8[i6 + 6434 >> 0] = 0;
   HEAP32[i6 + 6452 >> 2] = 0;
   i39 = 0;
   i40 = i38;
  } else {
   i39 = 1;
   i40 = i34;
  }
  if (!(i9 & 8192)) {
   HEAP8[i7 + 6730 >> 0] = 1;
   i36 = i39;
   i37 = i40;
  } else {
   i36 = i39;
   i37 = i40;
  }
 } else {
  i36 = 0;
  i37 = i34;
 } while (0);
 if (i3 | 0) HEAP8[i3 >> 0] = i33 & 1;
 if (!i4) {
  i10 = i37;
  return i10 | 0;
 }
 HEAP8[i4 >> 0] = i36 & 1;
 i10 = i37;
 return i10 | 0;
}

function __ZN5ImGui10SelectableEPKcbiRK6ImVec2(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, f26 = f0, i27 = 0, i28 = 0, f29 = f0, f30 = f0, f31 = f0, f32 = f0, f33 = f0, f34 = f0, f35 = f0, f36 = f0, f37 = f0, i38 = 0, i39 = 0, f40 = f0, i41 = 0, i42 = 0;
 i5 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 i7 = i6 + 40 | 0;
 i8 = i6 + 72 | 0;
 i9 = i6 + 32 | 0;
 i10 = i6 + 64 | 0;
 i11 = i6 + 48 | 0;
 i12 = i6 + 16 | 0;
 i13 = i6 + 81 | 0;
 i14 = i6 + 80 | 0;
 i15 = i6 + 8 | 0;
 i16 = i6;
 i17 = HEAP32[1460598] | 0;
 i18 = HEAP32[i17 + 6392 >> 2] | 0;
 i19 = i18 + 120 | 0;
 HEAP8[i19 >> 0] = 1;
 if (HEAP8[i18 + 123 >> 0] | 0) {
  i20 = 0;
  STACKTOP = i6;
  return i20 | 0;
 }
 i21 = (i3 & 2 | 0) != 0;
 do if (i21) if (HEAP32[i18 + 448 >> 2] | 0) {
  HEAP8[i19 >> 0] = 1;
  i22 = i18 + 632 | 0;
  __ZN10ImDrawList11PopClipRectEv(HEAP32[i22 >> 2] | 0);
  i23 = HEAP32[i22 >> 2] | 0;
  i22 = HEAP32[i23 + 60 >> 2] | 0;
  if ((i22 | 0) > 0) {
   i24 = HEAP32[i23 + 68 >> 2] | 0;
   i23 = i22 + -1 | 0;
   i22 = i24 + (i23 << 4) | 0;
   i23 = HEAP32[i22 + 4 >> 2] | 0;
   i24 = HEAP32[i22 + 8 >> 2] | 0;
   i25 = HEAP32[i22 + 12 >> 2] | 0;
   HEAP32[i18 + 464 >> 2] = HEAP32[i22 >> 2];
   HEAP32[i18 + 468 >> 2] = i23;
   HEAP32[i18 + 472 >> 2] = i24;
   HEAP32[i18 + 476 >> 2] = i25;
   break;
  } else ___assert_fail(38278, 56850, 1245, 38287);
 } while (0);
 i19 = HEAP32[i18 + 452 >> 2] | 0;
 if ((i19 | 0) <= 0) ___assert_fail(38278, 56850, 1245, 38287);
 i25 = __Z6ImHashPKvij(i1, 0, HEAP32[(HEAP32[i18 + 460 >> 2] | 0) + (i19 + -1 << 2) >> 2] | 0) | 0;
 i19 = HEAP32[1460598] | 0;
 if ((HEAP32[i19 + 6420 >> 2] | 0) == (i25 | 0)) HEAP8[i19 + 6432 >> 0] = 1;
 if ((HEAP32[i19 + 6424 >> 2] | 0) == (i25 | 0)) HEAP8[i19 + 6436 >> 0] = 1;
 if ((i1 | 0) == (-1 | 0)) {
  f26 = Math_fround(HEAPF32[i19 + 6184 >> 2]);
  i5 = 20;
 } else {
  i24 = i1;
  L22 : while (1) {
   switch (HEAP8[i24 >> 0] | 0) {
   case 0:
    {
     i27 = i24;
     break L22;
     break;
    }
   case 35:
    {
     i23 = i24 + 1 | 0;
     if ((HEAP8[i23 >> 0] | 0) == 35) {
      i27 = i24;
      break L22;
     } else i28 = i23;
     break;
    }
   default:
    i28 = i24 + 1 | 0;
   }
   if ((i28 | 0) == (-1 | 0)) {
    i27 = -1;
    break;
   } else i24 = i28;
  }
  i28 = HEAP32[i19 + 6180 >> 2] | 0;
  f29 = Math_fround(HEAPF32[i19 + 6184 >> 2]);
  if ((i27 | 0) == (i1 | 0)) {
   f26 = f29;
   i5 = 20;
  } else {
   __ZNK6ImFont13CalcTextSizeAEfffPKcS1_PS1_(i7, i28, f29, Math_fround(3402823469999999843913219.0e14), Math_fround(-1.0), i1, i27, 0);
   f30 = Math_fround(HEAPF32[i7 >> 2]);
   if (f30 > Math_fround(0.0)) {
    f31 = Math_fround(f30 - Math_fround(f29 / Math_fround(HEAPF32[i28 >> 2])));
    HEAPF32[i7 >> 2] = f31;
    f32 = f31;
   } else f32 = f30;
   f30 = Math_fround(~~Math_fround(f32 + Math_fround(.949999988)) | 0);
   HEAPF32[i7 >> 2] = f30;
   i28 = i7;
   i27 = HEAP32[i28 >> 2] | 0;
   i19 = HEAP32[i28 + 4 >> 2] | 0;
   i28 = i9;
   HEAP32[i28 >> 2] = i27;
   HEAP32[i28 + 4 >> 2] = i19;
   f33 = (HEAP32[tempDoublePtr >> 2] = i27, Math_fround(HEAPF32[tempDoublePtr >> 2]));
  }
 }
 if ((i5 | 0) == 20) {
  HEAPF32[i9 >> 2] = Math_fround(0.0);
  HEAPF32[i9 + 4 >> 2] = f26;
  f33 = Math_fround(0.0);
 }
 i5 = Math_fround(HEAPF32[i4 >> 2]) != Math_fround(0.0);
 i27 = HEAP32[(i5 ? i4 : i9) >> 2] | 0;
 i5 = i4 + 4 | 0;
 i19 = Math_fround(HEAPF32[i5 >> 2]) != Math_fround(0.0);
 i28 = HEAP32[(i19 ? i4 : i9) + 4 >> 2] | 0;
 HEAP32[i10 >> 2] = i27;
 HEAP32[i10 + 4 >> 2] = i28;
 i19 = i18 + 196 | 0;
 i24 = HEAP32[i19 >> 2] | 0;
 f26 = Math_fround(HEAPF32[i18 + 200 >> 2]);
 f30 = Math_fround(f26 + Math_fround(HEAPF32[i18 + 232 >> 2]));
 f26 = (HEAP32[tempDoublePtr >> 2] = i24, Math_fround(HEAPF32[tempDoublePtr >> 2]));
 f32 = Math_fround((HEAP32[tempDoublePtr >> 2] = i27, Math_fround(HEAPF32[tempDoublePtr >> 2])) + f26);
 f31 = Math_fround(f30 + (HEAP32[tempDoublePtr >> 2] = i28, Math_fround(HEAPF32[tempDoublePtr >> 2])));
 HEAP32[i11 >> 2] = i24;
 HEAPF32[i11 + 4 >> 2] = f30;
 HEAPF32[i11 + 8 >> 2] = f32;
 HEAPF32[i11 + 12 >> 2] = f31;
 f29 = Math_fround(f32 - f26);
 f32 = Math_fround(f31 - f30);
 HEAPF32[i7 >> 2] = f29;
 HEAPF32[i7 + 4 >> 2] = f32;
 __ZN5ImGui8ItemSizeERK6ImVec2f(i7, Math_fround(0.0));
 f32 = Math_fround(HEAPF32[i18 + 60 >> 2]);
 i28 = HEAP32[(HEAP32[1460598] | 0) + 6392 >> 2] | 0;
 f29 = Math_fround(HEAPF32[i28 + 536 >> 2]);
 f31 = Math_fround(f29 - Math_fround(HEAPF32[i28 + 12 >> 2]));
 do if (i21) f34 = f31; else {
  i27 = HEAP32[i28 + 448 >> 2] | 0;
  if (!i27) f34 = f31; else {
   i23 = HEAP32[i27 + 12 >> 2] | 0;
   i22 = i23 + ((i23 | 0) > -2 & 1) | 0;
   if ((i22 | 0) < (HEAP32[i27 + 44 >> 2] | 0)) {
    f29 = Math_fround(HEAPF32[(HEAP32[i27 + 52 >> 2] | 0) + (i22 * 28 | 0) >> 2]);
    f35 = Math_fround(HEAPF32[i27 + 20 >> 2]);
    f36 = Math_fround(f35 + Math_fround(f29 * Math_fround(Math_fround(HEAPF32[i27 + 24 >> 2]) - f35)));
    f34 = Math_fround(f36 - Math_fround(HEAPF32[i28 + 60 >> 2]));
    break;
   } else ___assert_fail(32132, 31803, 13059, 32169);
  }
 } while (0);
 f31 = Math_fround(Math_fround(f34 + Math_fround(HEAPF32[i18 + 12 >> 2])) - f32);
 f36 = Math_fround(f31 - Math_fround(HEAPF32[i19 >> 2]));
 f31 = Math_fround(HEAPF32[i4 >> 2]);
 i19 = (i3 & 128 | 0) == 0 & f31 != Math_fround(0.0);
 i28 = Math_fround(HEAPF32[i5 >> 2]) != Math_fround(0.0);
 f35 = Math_fround((i19 ? f31 : f33 >= f36 ? f33 : f36) + f26);
 f36 = Math_fround(f30 + Math_fround(HEAPF32[(i28 ? i4 : i10) + 4 >> 2]));
 HEAP32[i12 >> 2] = i24;
 i24 = i12 + 4 | 0;
 HEAPF32[i24 >> 2] = f30;
 i10 = i12 + 8 | 0;
 HEAPF32[i10 >> 2] = f35;
 i4 = i12 + 12 | 0;
 HEAPF32[i4 >> 2] = f36;
 if (i19) f37 = f35; else {
  f33 = Math_fround(f32 + f35);
  HEAPF32[i12 + 8 >> 2] = f33;
  f37 = f33;
 }
 f33 = Math_fround(HEAPF32[i17 + 5424 >> 2]);
 f35 = Math_fround(~~Math_fround(f33 * Math_fround(.5)) | 0);
 f32 = Math_fround(HEAPF32[i17 + 5428 >> 2]);
 f31 = Math_fround(~~Math_fround(f32 * Math_fround(.5)) | 0);
 f29 = Math_fround(f33 - f35);
 f33 = Math_fround(f32 - f31);
 f32 = Math_fround(f26 - f35);
 HEAPF32[i12 >> 2] = f32;
 f32 = Math_fround(f30 - f31);
 HEAPF32[i24 >> 2] = f32;
 f32 = Math_fround(f29 + f37);
 HEAPF32[i10 >> 2] = f32;
 f32 = Math_fround(f33 + f36);
 HEAPF32[i4 >> 2] = f32;
 i4 = i3 & 64;
 i24 = (i4 | 0) != 0;
 if (__ZN5ImGui7ItemAddERK6ImRectjPS1_(i12, i24 ? 0 : i25, 0) | 0) {
  i19 = i3 >>> 2;
  i28 = i19 & 4 | i3 << 8 & 2048 | i19 & 8 | i4 << 2;
  i4 = __ZN5ImGui14ButtonBehaviorERK6ImRectjPbS3_i(i12, i25, i13, i14, (i3 & 4 | 0) == 0 ? i28 : i28 | 18) | 0;
  i28 = (i24 ^ 1) & i2;
  i2 = HEAP8[i13 >> 0] | 0;
  i13 = i2 << 24 >> 24 == 0;
  do if (!(i13 & (i4 ^ 1))) if (!(HEAP8[i17 + 6731 >> 0] | 0)) if ((HEAP32[i17 + 6644 >> 2] | 0) == (i18 | 0)) {
   i19 = HEAP32[i17 + 6720 >> 2] | 0;
   if ((i19 | 0) == (HEAP32[i18 + 300 >> 2] | 0)) {
    HEAP8[i17 + 6730 >> 0] = 1;
    i5 = HEAP32[1460598] | 0;
    i27 = HEAP32[i5 + 6644 >> 2] | 0;
    if (!i27) ___assert_fail(36460, 31803, 2162, 33697);
    if (i19 >>> 0 < 2) {
     HEAP32[i5 + 6648 >> 2] = i25;
     HEAP32[i27 + 776 + (i19 << 2) >> 2] = i25;
     break;
    } else ___assert_fail(33664, 31803, 2163, 33697);
   }
  } while (0);
  do if (i4) {
   i19 = HEAP32[1460598] | 0;
   i27 = HEAP32[i19 + 6420 >> 2] | 0;
   if ((i27 | 0) == (i25 | 0) | (i27 | 0) == 0) {
    HEAP8[i19 + 6435 >> 0] = 1;
    break;
   } else ___assert_fail(32628, 31803, 2259, 32664);
  } while (0);
  if (i28 | i13 ^ 1) {
   i28 = i13 | (HEAP8[i14 >> 0] | 0) == 0 ? (i2 << 24 >> 24 ? 25 : 24) : 26;
   i2 = HEAP32[1460598] | 0;
   i14 = i2 + 5508 + (i28 << 4) | 0;
   f32 = Math_fround(HEAPF32[i14 >> 2]);
   f36 = Math_fround(HEAPF32[i14 + 4 >> 2]);
   f33 = Math_fround(HEAPF32[i14 + 8 >> 2]);
   f37 = Math_fround(HEAPF32[i14 + 12 >> 2]);
   f29 = Math_fround(f37 * Math_fround(HEAPF32[i2 + 5356 >> 2]));
   i2 = f32 < Math_fround(0.0);
   i14 = f32 > Math_fround(1.0);
   i28 = ~~Math_fround(Math_fround((i14 ? Math_fround(1.0) : f32) * Math_fround(255.0)) + Math_fround(.5));
   i14 = f36 < Math_fround(0.0);
   i13 = f36 > Math_fround(1.0);
   i19 = ~~Math_fround(Math_fround((i13 ? Math_fround(1.0) : f36) * Math_fround(255.0)) + Math_fround(.5)) << 8;
   i13 = f33 < Math_fround(0.0);
   i27 = f33 > Math_fround(1.0);
   i5 = ~~Math_fround(Math_fround((i27 ? Math_fround(1.0) : f33) * Math_fround(255.0)) + Math_fround(.5)) << 16;
   i27 = f29 < Math_fround(0.0);
   i22 = f29 > Math_fround(1.0);
   i23 = ~~Math_fround(Math_fround((i22 ? Math_fround(1.0) : f29) * Math_fround(255.0)) + Math_fround(.5)) << 24;
   i22 = i12;
   i38 = HEAP32[i22 + 4 >> 2] | 0;
   i39 = i15;
   HEAP32[i39 >> 2] = HEAP32[i22 >> 2];
   HEAP32[i39 + 4 >> 2] = i38;
   i38 = i10;
   i39 = HEAP32[i38 + 4 >> 2] | 0;
   i22 = i16;
   HEAP32[i22 >> 2] = HEAP32[i38 >> 2];
   HEAP32[i22 + 4 >> 2] = i39;
   HEAP32[i8 >> 2] = HEAP32[i15 >> 2];
   HEAP32[i8 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
   HEAP32[i7 >> 2] = HEAP32[i16 >> 2];
   HEAP32[i7 + 4 >> 2] = HEAP32[i16 + 4 >> 2];
   __ZN5ImGui11RenderFrameE6ImVec2S0_jbf(i8, i7, (i14 ? 0 : i19) | (i2 ? 0 : i28) | (i13 ? 0 : i5) | (i27 ? 0 : i23), 0, Math_fround(0.0));
   __ZN5ImGui18RenderNavHighlightERK6ImRectji(i12, i25, 10);
  }
  if (i21) if (HEAP32[i18 + 448 >> 2] | 0) {
   __ZN5ImGui18PushColumnClipRectEi(-1);
   i25 = HEAP32[(HEAP32[1460598] | 0) + 6392 >> 2] | 0;
   f29 = Math_fround(HEAPF32[i25 + 536 >> 2]);
   f33 = Math_fround(f29 - Math_fround(HEAPF32[i25 + 12 >> 2]));
   i12 = HEAP32[i25 + 448 >> 2] | 0;
   do if (!i12) f40 = f33; else {
    i23 = HEAP32[i12 + 12 >> 2] | 0;
    i27 = i23 + ((i23 | 0) > -2 & 1) | 0;
    if ((i27 | 0) < (HEAP32[i12 + 44 >> 2] | 0)) {
     f29 = Math_fround(HEAPF32[(HEAP32[i12 + 52 >> 2] | 0) + (i27 * 28 | 0) >> 2]);
     f36 = Math_fround(HEAPF32[i12 + 20 >> 2]);
     f32 = Math_fround(f36 + Math_fround(f29 * Math_fround(Math_fround(HEAPF32[i12 + 24 >> 2]) - f36)));
     f40 = Math_fround(f32 - Math_fround(HEAPF32[i25 + 60 >> 2]));
     break;
    } else ___assert_fail(32132, 31803, 13059, 32169);
   } while (0);
   f33 = Math_fround(f40 - f34);
   f34 = Math_fround(Math_fround(HEAPF32[i10 >> 2]) - f33);
   HEAPF32[i10 >> 2] = f34;
  }
  do if (i24) {
   __ZN5ImGui14PushStyleColorEiRK6ImVec4(0, i17 + 5524 | 0);
   HEAPF32[i7 >> 2] = Math_fround(0.0);
   HEAPF32[i7 + 4 >> 2] = Math_fround(0.0);
   __ZN5ImGui17RenderTextClippedERK6ImVec2S2_PKcS4_PS1_S2_PK6ImRect(i11, i10, i1, 0, i9, i7, 0);
   i25 = HEAP32[1460598] | 0;
   i12 = i25 + 6476 | 0;
   i27 = HEAP32[i12 >> 2] | 0;
   if ((i27 | 0) <= 0) ___assert_fail(38278, 56850, 1245, 38287);
   i23 = HEAP32[i25 + 6484 >> 2] | 0;
   i5 = i27 + -1 | 0;
   i27 = i23 + (i5 * 20 | 0) | 0;
   i5 = i27 + 4 | 0;
   i23 = i25 + 5508 + (HEAP32[i27 >> 2] << 4) | 0;
   HEAP32[i23 >> 2] = HEAP32[i5 >> 2];
   HEAP32[i23 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
   HEAP32[i23 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
   HEAP32[i23 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
   i5 = HEAP32[i12 >> 2] | 0;
   if ((i5 | 0) > 0) {
    HEAP32[i12 >> 2] = i5 + -1;
    break;
   } else ___assert_fail(38278, 56850, 1268, 31920);
  } else {
   HEAPF32[i7 >> 2] = Math_fround(0.0);
   HEAPF32[i7 + 4 >> 2] = Math_fround(0.0);
   __ZN5ImGui17RenderTextClippedERK6ImVec2S2_PKcS4_PS1_S2_PK6ImRect(i11, i10, i1, 0, i9, i7, 0);
  } while (0);
  do if (i4) if ((i3 & 1 | 0) == 0 ? (HEAP32[i18 + 8 >> 2] & 67108864 | 0) != 0 : 0) if (!(HEAP32[i18 + 352 >> 2] & 32)) {
   i7 = HEAP32[1460598] | 0;
   i9 = HEAP32[i7 + 6524 >> 2] | 0;
   i1 = i9 + -1 | 0;
   if ((i9 | 0) >= 1) {
    if ((i9 | 0) > (HEAP32[i7 + 6512 >> 2] | 0)) break;
    i10 = HEAP32[i7 + 6520 >> 2] | 0;
    if ((HEAP32[(HEAP32[i7 + 6532 >> 2] | 0) + (i1 * 36 | 0) >> 2] | 0) != (HEAP32[i10 + (i1 * 36 | 0) >> 2] | 0)) break;
    L96 : do if ((i9 | 0) > 1) {
     i7 = i1;
     while (1) {
      i11 = HEAP32[i10 + (i7 * 36 | 0) + 4 >> 2] | 0;
      if (!i11) {
       i41 = i7;
       break L96;
      }
      if (!(HEAP32[i11 + 8 >> 2] & 268435456)) {
       i41 = i7;
       break L96;
      }
      i11 = i7 + -1 | 0;
      if ((i7 | 0) > 1) i7 = i11; else {
       i41 = i11;
       break;
      }
     }
    } else i41 = i1; while (0);
    __ZL17ClosePopupToLeveli(i41);
   }
  } while (0);
  i42 = i4;
 } else if (i21) if (!(HEAP32[i18 + 448 >> 2] | 0)) i42 = 0; else {
  __ZN5ImGui18PushColumnClipRectEi(-1);
  i42 = 0;
 } else i42 = 0;
 i20 = i42;
 STACKTOP = i6;
 return i20 | 0;
}

function __ZN5ImGui15TextUnformattedEPKcS1_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, f12 = f0, f13 = f0, f14 = f0, f15 = f0, f16 = f0, f17 = f0, f18 = f0, f19 = f0, f20 = f0, f21 = f0, i22 = 0, i23 = 0, f24 = f0, f25 = f0, f26 = f0, f27 = f0, f28 = f0, f29 = f0, i30 = 0, f31 = f0, f32 = f0, f33 = f0, i34 = 0, i35 = 0, i36 = 0, f37 = f0, f38 = f0, f39 = f0, i40 = 0, i41 = 0, f42 = f0, i43 = 0, f44 = f0, f45 = f0, f46 = f0, f47 = f0, f48 = f0, f49 = f0, f50 = f0, i51 = 0, f52 = f0, f53 = f0, f54 = f0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i5 = i4 + 24 | 0;
 i6 = i4 + 16 | 0;
 i7 = i4;
 i8 = i4 + 8 | 0;
 i9 = HEAP32[1460598] | 0;
 i10 = HEAP32[i9 + 6392 >> 2] | 0;
 HEAP8[i10 + 120 >> 0] = 1;
 if (HEAP8[i10 + 123 >> 0] | 0) {
  STACKTOP = i4;
  return;
 }
 if (!i1) ___assert_fail(37642, 31803, 7737, 37653);
 if (!i2) i11 = i1 + (_strlen(i1) | 0) | 0; else i11 = i2;
 f12 = Math_fround(HEAPF32[i10 + 196 >> 2]);
 f13 = Math_fround(HEAPF32[i10 + 200 >> 2]);
 f14 = Math_fround(f13 + Math_fround(HEAPF32[i10 + 232 >> 2]));
 f13 = Math_fround(f12);
 f15 = Math_fround(f14);
 f16 = Math_fround(HEAPF32[i10 + 360 >> 2]);
 i2 = f16 >= Math_fround(0.0);
 if ((i11 - i1 | 0) < 2001 | i2) {
  if (f16 < Math_fround(0.0) | i2 ^ 1) f17 = Math_fround(0.0); else {
   if (f16 == Math_fround(0.0)) {
    f18 = Math_fround(HEAPF32[i10 + 536 >> 2]);
    f19 = Math_fround(HEAPF32[i10 + 12 >> 2]);
    f20 = Math_fround(f18 - f19);
    i2 = HEAP32[i10 + 448 >> 2] | 0;
    do if (!i2) f21 = f20; else {
     i22 = HEAP32[i2 + 12 >> 2] | 0;
     i23 = i22 + ((i22 | 0) > -2 & 1) | 0;
     if ((i23 | 0) < (HEAP32[i2 + 44 >> 2] | 0)) {
      f18 = Math_fround(HEAPF32[(HEAP32[i2 + 52 >> 2] | 0) + (i23 * 28 | 0) >> 2]);
      f24 = Math_fround(HEAPF32[i2 + 20 >> 2]);
      f25 = Math_fround(f24 + Math_fround(f18 * Math_fround(Math_fround(HEAPF32[i2 + 24 >> 2]) - f24)));
      f21 = Math_fround(f25 - Math_fround(HEAPF32[i10 + 60 >> 2]));
      break;
     } else ___assert_fail(32132, 31803, 13059, 32169);
    } while (0);
    f26 = Math_fround(f19 + f21);
   } else if (f16 > Math_fround(0.0)) {
    f21 = Math_fround(HEAPF32[i10 + 12 >> 2]);
    f26 = Math_fround(f16 + Math_fround(f21 - Math_fround(HEAPF32[i10 + 84 >> 2])));
   } else f26 = f16;
   f16 = Math_fround(f26 - f12);
   i2 = f16 >= Math_fround(1.0);
   f17 = i2 ? f16 : Math_fround(1.0);
  }
  i2 = HEAP32[i9 + 6180 >> 2] | 0;
  f16 = Math_fround(HEAPF32[i9 + 6184 >> 2]);
  if ((i11 | 0) == (i1 | 0)) {
   HEAPF32[i7 >> 2] = Math_fround(0.0);
   HEAPF32[i7 + 4 >> 2] = f16;
   f27 = Math_fround(0.0);
   f28 = f16;
  } else {
   __ZNK6ImFont13CalcTextSizeAEfffPKcS1_PS1_(i5, i2, f16, Math_fround(3402823469999999843913219.0e14), f17, i1, i11, 0);
   f26 = Math_fround(HEAPF32[i5 >> 2]);
   if (f26 > Math_fround(0.0)) {
    f21 = Math_fround(f26 - Math_fround(f16 / Math_fround(HEAPF32[i2 >> 2])));
    HEAPF32[i5 >> 2] = f21;
    f29 = f21;
   } else f29 = f26;
   f26 = Math_fround(~~Math_fround(f29 + Math_fround(.949999988)) | 0);
   HEAPF32[i5 >> 2] = f26;
   i2 = i5;
   i23 = HEAP32[i2 >> 2] | 0;
   i22 = HEAP32[i2 + 4 >> 2] | 0;
   i2 = i7;
   HEAP32[i2 >> 2] = i23;
   HEAP32[i2 + 4 >> 2] = i22;
   f26 = (HEAP32[tempDoublePtr >> 2] = i23, Math_fround(HEAPF32[tempDoublePtr >> 2]));
   f27 = f26;
   f28 = (HEAP32[tempDoublePtr >> 2] = i22, Math_fround(HEAPF32[tempDoublePtr >> 2]));
  }
  f26 = Math_fround(f12 + f27);
  f27 = Math_fround(f14 + f28);
  f28 = Math_fround(f26);
  f29 = Math_fround(f27);
  __ZN5ImGui8ItemSizeERK6ImVec2f(i7, Math_fround(0.0));
  i7 = HEAP32[1460598] | 0;
  i22 = i7 + 6392 | 0;
  i23 = HEAP32[i22 >> 2] | 0;
  HEAP32[i23 + 256 >> 2] = 0;
  HEAPF32[i23 + 264 >> 2] = f12;
  HEAPF32[i23 + 268 >> 2] = f14;
  HEAPF32[i23 + 272 >> 2] = f26;
  HEAPF32[i23 + 276 >> 2] = f27;
  i2 = i23 + 260 | 0;
  HEAP32[i2 >> 2] = 0;
  i23 = HEAP32[i22 >> 2] | 0;
  f21 = Math_fround(HEAPF32[i23 + 468 >> 2]);
  if (f21 < f27) {
   f16 = Math_fround(HEAPF32[i23 + 476 >> 2]);
   if (f16 > f14) {
    f19 = Math_fround(HEAPF32[i23 + 464 >> 2]);
    if (f19 < f26) {
     f20 = Math_fround(HEAPF32[i23 + 472 >> 2]);
     if (f20 > f12) {
      i30 = i23 + 472 | 0;
      f31 = f19;
      f32 = f20;
      f33 = f16;
     } else i3 = 63;
    } else i3 = 63;
   } else i3 = 63;
  } else i3 = 63;
  do if ((i3 | 0) == 63) {
   if (HEAP8[i7 + 11092 >> 0] | 0) {
    f16 = Math_fround(HEAPF32[i23 + 464 >> 2]);
    i22 = i23 + 472 | 0;
    f20 = Math_fround(HEAPF32[i22 >> 2]);
    i30 = i22;
    f31 = f16;
    f32 = f20;
    f33 = Math_fround(HEAPF32[i23 + 476 >> 2]);
    break;
   }
   STACKTOP = i4;
   return;
  } while (0);
  i22 = i5;
  HEAPF32[i22 >> 2] = f13;
  HEAPF32[i22 + 4 >> 2] = f15;
  i22 = i5 + 8 | 0;
  i34 = i22;
  HEAPF32[i34 >> 2] = f28;
  HEAPF32[i34 + 4 >> 2] = f29;
  i34 = i23 + 464 | 0;
  i23 = HEAP32[(f31 <= f12 ? i5 : i34) >> 2] | 0;
  i35 = HEAP32[(f21 <= f14 ? i5 : i34) + 4 >> 2] | 0;
  i34 = i5;
  HEAP32[i34 >> 2] = i23;
  HEAP32[i34 + 4 >> 2] = i35;
  i34 = HEAP32[(f32 > f26 ? i22 : i30) >> 2] | 0;
  i36 = HEAP32[(f33 > f27 ? i22 : i30) + 4 >> 2] | 0;
  i30 = i22;
  HEAP32[i30 >> 2] = i34;
  HEAP32[i30 + 4 >> 2] = i36;
  f27 = (HEAP32[tempDoublePtr >> 2] = i23, Math_fround(HEAPF32[tempDoublePtr >> 2]));
  f33 = Math_fround(HEAPF32[i7 + 5440 >> 2]);
  f26 = Math_fround(f27 - f33);
  f27 = Math_fround(HEAPF32[i7 + 5444 >> 2]);
  f32 = Math_fround(HEAPF32[i7 + 212 >> 2]);
  if (f32 >= f26) {
   f26 = (HEAP32[tempDoublePtr >> 2] = i35, Math_fround(HEAPF32[tempDoublePtr >> 2]));
   f21 = (HEAP32[tempDoublePtr >> 2] = i34, Math_fround(HEAPF32[tempDoublePtr >> 2]));
   f31 = Math_fround(f27 + (HEAP32[tempDoublePtr >> 2] = i36, Math_fround(HEAPF32[tempDoublePtr >> 2])));
   f29 = Math_fround(f33 + f21);
   f21 = Math_fround(f26 - f27);
   f27 = Math_fround(HEAPF32[i7 + 216 >> 2]);
   if (f27 < f31 & (f32 < f29 & f27 >= f21)) HEAP32[i2 >> 2] = 1;
  }
  HEAPF32[i8 >> 2] = f12;
  HEAPF32[i8 + 4 >> 2] = f14;
  HEAP32[i5 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i5 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
  __ZN5ImGui17RenderTextWrappedE6ImVec2PKcS2_f(i5, i1, i11, f17);
  STACKTOP = i4;
  return;
 }
 f17 = Math_fround(HEAPF32[i9 + 6184 >> 2]);
 f21 = Math_fround(HEAPF32[i10 + 468 >> 2]);
 if (!(f14 <= Math_fround(HEAPF32[i10 + 476 >> 2]))) {
  f37 = Math_fround(0.0);
  f38 = Math_fround(0.0);
 } else {
  if (!(HEAP8[i9 + 11092 >> 0] | 0)) {
   i8 = ~~Math_fround(Math_fround(f21 - f14) / f17);
   if ((i8 | 0) > 0) {
    if (i11 >>> 0 > i1 >>> 0) {
     i2 = 0;
     i7 = i1;
     do {
      i36 = _strchr(i7, 10) | 0;
      i7 = ((i36 | 0) == 0 ? i11 : i36) + 1 | 0;
      i2 = i2 + 1 | 0;
     } while (i7 >>> 0 < i11 >>> 0 & (i2 | 0) < (i8 | 0));
     f39 = Math_fround(i2 | 0);
     i40 = i7;
    } else {
     f39 = Math_fround(0.0);
     i40 = i1;
    }
    i41 = i40;
    f42 = Math_fround(f14 + Math_fround(f17 * f39));
   } else {
    i41 = i1;
    f42 = f14;
   }
  } else {
   i41 = i1;
   f42 = f14;
  }
  if (i41 >>> 0 < i11 >>> 0) {
   f39 = Math_fround(f12 + Math_fround(3402823469999999843913219.0e14));
   i1 = i6 + 4 | 0;
   i40 = i41;
   f27 = f42;
   f29 = Math_fround(0.0);
   f32 = f21;
   i41 = i10;
   f21 = f42;
   i10 = i9;
   f31 = f42;
   while (1) {
    f26 = Math_fround(f17 + f27);
    i9 = _strchr(i40, 10) | 0;
    if (f32 < f26) if (Math_fround(HEAPF32[i41 + 476 >> 2]) > f21) if (Math_fround(HEAPF32[i41 + 464 >> 2]) < f39) {
     if (!(Math_fround(HEAPF32[i41 + 472 >> 2]) > f12)) i3 = 20;
    } else i3 = 20; else i3 = 20; else i3 = 20;
    if ((i3 | 0) == 20) {
     i3 = 0;
     if (!(HEAP8[i10 + 11092 >> 0] | 0)) {
      i43 = i40;
      f44 = f31;
      f45 = f29;
      break;
     }
    }
    i7 = HEAP32[i10 + 6180 >> 2] | 0;
    f33 = Math_fround(HEAPF32[i10 + 6184 >> 2]);
    if ((i9 | 0) == (i40 | 0)) f46 = Math_fround(0.0); else {
     __ZNK6ImFont13CalcTextSizeAEfffPKcS1_PS1_(i5, i7, f33, Math_fround(3402823469999999843913219.0e14), Math_fround(-1.0), i40, i9, 0);
     f28 = Math_fround(HEAPF32[i5 >> 2]);
     if (f28 > Math_fround(0.0)) {
      f20 = Math_fround(f28 - Math_fround(f33 / Math_fround(HEAPF32[i7 >> 2])));
      HEAPF32[i5 >> 2] = f20;
      f47 = f20;
     } else f47 = f28;
     f46 = Math_fround(~~Math_fround(f47 + Math_fround(.949999988)) | 0);
    }
    f28 = f29 >= f46 ? f29 : f46;
    HEAPF32[i6 >> 2] = f12;
    HEAPF32[i1 >> 2] = f31;
    HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
    HEAP32[i5 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
    __ZN5ImGui10RenderTextE6ImVec2PKcS2_b(i5, i40, i9, 0);
    i7 = ((i9 | 0) == 0 ? i11 : i9) + 1 | 0;
    f20 = Math_fround(f17 + f31);
    if (i7 >>> 0 >= i11 >>> 0) {
     i43 = i7;
     f44 = f20;
     f45 = f28;
     break;
    }
    f33 = Math_fround(f17 + f21);
    i9 = HEAP32[1460598] | 0;
    i2 = HEAP32[i9 + 6392 >> 2] | 0;
    i40 = i7;
    f27 = f26;
    f29 = f28;
    f32 = Math_fround(HEAPF32[i2 + 468 >> 2]);
    i41 = i2;
    f21 = f33;
    i10 = i9;
    f31 = f20;
   }
   if (i43 >>> 0 < i11 >>> 0) {
    i10 = 0;
    i41 = i43;
    do {
     i43 = _strchr(i41, 10) | 0;
     i41 = ((i43 | 0) == 0 ? i11 : i43) + 1 | 0;
     i10 = i10 + 1 | 0;
    } while (i41 >>> 0 < i11 >>> 0);
    f48 = Math_fround(i10 | 0);
   } else f48 = Math_fround(0.0);
   f49 = f45;
   f50 = Math_fround(f44 + Math_fround(f17 * f48));
  } else {
   f49 = Math_fround(0.0);
   f50 = f42;
  }
  f37 = f49;
  f38 = Math_fround(Math_fround(f50 - f14) + Math_fround(0.0));
 }
 f50 = Math_fround(f12 + f37);
 f37 = Math_fround(f14 + f38);
 f38 = Math_fround(f50);
 f49 = Math_fround(f37);
 f42 = Math_fround(f50 - f12);
 f48 = Math_fround(f37 - f14);
 HEAPF32[i5 >> 2] = f42;
 HEAPF32[i5 + 4 >> 2] = f48;
 __ZN5ImGui8ItemSizeERK6ImVec2f(i5, Math_fround(0.0));
 i10 = HEAP32[1460598] | 0;
 i11 = i10 + 6392 | 0;
 i41 = HEAP32[i11 >> 2] | 0;
 HEAP32[i41 + 256 >> 2] = 0;
 HEAPF32[i41 + 264 >> 2] = f12;
 HEAPF32[i41 + 268 >> 2] = f14;
 HEAPF32[i41 + 272 >> 2] = f50;
 HEAPF32[i41 + 276 >> 2] = f37;
 i43 = i41 + 260 | 0;
 HEAP32[i43 >> 2] = 0;
 i41 = HEAP32[i11 >> 2] | 0;
 f48 = Math_fround(HEAPF32[i41 + 468 >> 2]);
 if (f48 < f37) {
  f42 = Math_fround(HEAPF32[i41 + 476 >> 2]);
  if (f42 > f14) {
   f17 = Math_fround(HEAPF32[i41 + 464 >> 2]);
   if (f17 < f50) {
    f44 = Math_fround(HEAPF32[i41 + 472 >> 2]);
    if (f44 > f12) {
     i51 = i41 + 472 | 0;
     f52 = f17;
     f53 = f44;
     f54 = f42;
    } else i3 = 37;
   } else i3 = 37;
  } else i3 = 37;
 } else i3 = 37;
 do if ((i3 | 0) == 37) if (!(HEAP8[i10 + 11092 >> 0] | 0)) {
  STACKTOP = i4;
  return;
 } else {
  f42 = Math_fround(HEAPF32[i41 + 464 >> 2]);
  i11 = i41 + 472 | 0;
  f44 = Math_fround(HEAPF32[i11 >> 2]);
  i51 = i11;
  f52 = f42;
  f53 = f44;
  f54 = Math_fround(HEAPF32[i41 + 476 >> 2]);
  break;
 } while (0);
 i3 = i5;
 HEAPF32[i3 >> 2] = f13;
 HEAPF32[i3 + 4 >> 2] = f15;
 i3 = i5 + 8 | 0;
 i11 = i3;
 HEAPF32[i11 >> 2] = f38;
 HEAPF32[i11 + 4 >> 2] = f49;
 i11 = i41 + 464 | 0;
 i41 = HEAP32[(f52 <= f12 ? i5 : i11) >> 2] | 0;
 i40 = HEAP32[(f48 <= f14 ? i5 : i11) + 4 >> 2] | 0;
 i11 = i5;
 HEAP32[i11 >> 2] = i41;
 HEAP32[i11 + 4 >> 2] = i40;
 i11 = HEAP32[(f53 > f50 ? i3 : i51) >> 2] | 0;
 i5 = HEAP32[(f54 > f37 ? i3 : i51) + 4 >> 2] | 0;
 i51 = i3;
 HEAP32[i51 >> 2] = i11;
 HEAP32[i51 + 4 >> 2] = i5;
 f37 = (HEAP32[tempDoublePtr >> 2] = i41, Math_fround(HEAPF32[tempDoublePtr >> 2]));
 f54 = Math_fround(HEAPF32[i10 + 5440 >> 2]);
 f50 = Math_fround(f37 - f54);
 f37 = Math_fround(HEAPF32[i10 + 5444 >> 2]);
 f53 = Math_fround(HEAPF32[i10 + 212 >> 2]);
 if (!(f53 >= f50)) {
  STACKTOP = i4;
  return;
 }
 f50 = (HEAP32[tempDoublePtr >> 2] = i40, Math_fround(HEAPF32[tempDoublePtr >> 2]));
 f14 = (HEAP32[tempDoublePtr >> 2] = i11, Math_fround(HEAPF32[tempDoublePtr >> 2]));
 f48 = Math_fround(f37 + (HEAP32[tempDoublePtr >> 2] = i5, Math_fround(HEAPF32[tempDoublePtr >> 2])));
 f12 = Math_fround(f54 + f14);
 f14 = Math_fround(f50 - f37);
 f37 = Math_fround(HEAPF32[i10 + 216 >> 2]);
 if (!(f37 < f48 & (f53 < f12 & f37 >= f14))) {
  STACKTOP = i4;
  return;
 }
 HEAP32[i43 >> 2] = 1;
 STACKTOP = i4;
 return;
}

function __ZNK6ImFont10RenderTextEP10ImDrawListf6ImVec2jRK6ImVec4PKcS7_fb(i1, i2, f3, i4, i5, i6, i7, i8, f9, i10) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 f3 = Math_fround(f3);
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 f9 = Math_fround(f9);
 i10 = i10 | 0;
 var i11 = 0, i12 = 0, i13 = 0, i14 = 0, f15 = f0, f16 = f0, f17 = f0, f18 = f0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, f37 = f0, i38 = 0, i39 = 0, f40 = f0, f41 = f0, i42 = 0, i43 = 0, f44 = f0, f45 = f0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, f57 = f0, i58 = 0, i59 = 0, i60 = 0, f61 = f0, i62 = 0, f63 = f0, i64 = 0, f65 = f0, i66 = 0, i67 = 0, i68 = 0, f69 = f0, f70 = f0, f71 = f0, f72 = f0, f73 = f0, f74 = f0, f75 = f0, f76 = f0, f77 = f0, f78 = f0, f79 = f0, f80 = f0, f81 = f0, f82 = f0, f83 = f0, f84 = f0, f85 = f0, f86 = f0, f87 = f0, f88 = f0, f89 = f0, f90 = f0, f91 = f0, f92 = f0, f93 = f0, i94 = 0, i95 = 0, i96 = 0, i97 = 0, i98 = 0;
 i11 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i13 = i12;
 if (!i8) i14 = i7 + (_strlen(i7) | 0) | 0; else i14 = i8;
 f15 = Math_fround(~~Math_fround(HEAPF32[i4 >> 2]) | 0);
 f16 = Math_fround(Math_fround(HEAPF32[i1 + 8 >> 2]) + f15);
 HEAPF32[i4 >> 2] = f16;
 i8 = i4 + 4 | 0;
 f15 = Math_fround(~~Math_fround(HEAPF32[i8 >> 2]) | 0);
 f17 = Math_fround(Math_fround(HEAPF32[i1 + 12 >> 2]) + f15);
 HEAPF32[i8 >> 2] = f17;
 i8 = i6 + 12 | 0;
 if (f17 > Math_fround(HEAPF32[i8 >> 2])) {
  STACKTOP = i12;
  return;
 }
 f15 = Math_fround(HEAPF32[i1 >> 2]);
 f18 = Math_fround(f3 / f15);
 f3 = Math_fround(f15 * f18);
 i19 = f9 > Math_fround(0.0);
 L7 : do if (i19) i20 = i7; else {
  f15 = Math_fround(f17 + f3);
  if (i14 >>> 0 > i7 >>> 0 ? f15 < Math_fround(HEAPF32[i6 + 4 >> 2]) : 0) {
   i21 = i7;
   while (1) {
    if ((HEAP8[i21 >> 0] | 0) == 10) {
     i20 = i21;
     break L7;
    }
    i22 = i21 + 1 | 0;
    if (i22 >>> 0 < i14 >>> 0) i21 = i22; else {
     i20 = i22;
     break;
    }
   }
  } else i20 = i7;
 } while (0);
 i7 = i14 - i20 | 0;
 i21 = i7 * 6 | 0;
 i22 = i2 + 12 | 0;
 i23 = HEAP32[i22 >> 2] | 0;
 __ZN10ImDrawList11PrimReserveEii(i2, i21, i7 << 2);
 i7 = i2 + 52 | 0;
 i24 = HEAP32[i7 >> 2] | 0;
 i25 = i2 + 56 | 0;
 i26 = HEAP32[i25 >> 2] | 0;
 i27 = i2 + 48 | 0;
 L13 : do if (i20 >>> 0 < i14 >>> 0) {
  i28 = i6 + 4 | 0;
  i29 = i1 + 40 | 0;
  i30 = i1 + 48 | 0;
  i31 = i1 + 52 | 0;
  i32 = i1 + 24 | 0;
  i33 = i6 + 8 | 0;
  f15 = f16;
  i34 = HEAP32[i27 >> 2] | 0;
  i35 = i26;
  i36 = i24;
  f37 = f17;
  i38 = 0;
  i39 = i20;
  L15 : while (1) {
   f40 = f15;
   f41 = f37;
   i42 = i38;
   i43 = i39;
   while (1) {
    if (!i19) {
     f44 = f15;
     f45 = f37;
     i46 = i38;
     i47 = i39;
     break;
    }
    if (!i42) {
     i48 = __ZNK6ImFont21CalcWordWrapPositionAEfPKcS1_f(i1, f18, i43, i14, Math_fround(f9 - Math_fround(f40 - Math_fround(HEAPF32[i4 >> 2])))) | 0;
     i49 = (i48 | 0) == (i43 | 0) ? i48 + 1 | 0 : i48;
    } else i49 = i42;
    if (i43 >>> 0 < i49 >>> 0) {
     f44 = f40;
     f45 = f41;
     i46 = i49;
     i47 = i43;
     break;
    }
    f40 = Math_fround(HEAPF32[i4 >> 2]);
    f41 = Math_fround(f3 + f41);
    L24 : do if (i43 >>> 0 < i14 >>> 0) {
     i48 = i43;
     while (1) {
      i50 = HEAP8[i48 >> 0] | 0;
      i51 = i50 << 24 >> 24 == 32 | (i50 + -9 & 255) < 2 ? i48 + 1 | 0 : i48;
      switch (i50 << 24 >> 24) {
      case 9:
      case 32:
       break;
      default:
       {
        i52 = i51;
        break L24;
       }
      }
      if (i51 >>> 0 < i14 >>> 0) i48 = i51; else {
       i52 = i51;
       break L24;
      }
     }
    } else i52 = i43; while (0);
    if (i52 >>> 0 >= i14 >>> 0) {
     i53 = i35;
     i54 = i36;
     break L13;
    } else {
     i42 = 0;
     i43 = i52;
    }
   }
   i43 = HEAP8[i47 >> 0] | 0;
   i42 = i43 << 24 >> 24;
   HEAP32[i13 >> 2] = i42;
   if (i43 << 24 >> 24 > -1) {
    i55 = i47 + 1 | 0;
    i56 = i42;
   } else {
    i42 = i47 + (__Z18ImTextCharFromUtf8PjPKcS1_(i13, i47, i14) | 0) | 0;
    i43 = HEAP32[i13 >> 2] | 0;
    if (!i43) break; else {
     i55 = i42;
     i56 = i43;
    }
   }
   L34 : do if (i56 >>> 0 < 32) {
    switch (i56 | 0) {
    case 13:
     {
      f57 = f45;
      i58 = i34;
      i59 = i35;
      i60 = i36;
      f61 = f44;
      i62 = i55;
      break L34;
      break;
     }
    case 10:
     break;
    default:
     {
      i11 = 29;
      break L34;
     }
    }
    f41 = Math_fround(HEAPF32[i4 >> 2]);
    f40 = Math_fround(f3 + f45);
    if (f40 > Math_fround(HEAPF32[i8 >> 2])) break L15;
    if (i19) {
     f57 = f40;
     i58 = i34;
     i59 = i35;
     i60 = i36;
     f61 = f41;
     i62 = i55;
    } else {
     f63 = Math_fround(f3 + f40);
     if (i55 >>> 0 < i14 >>> 0 ? f63 < Math_fround(HEAPF32[i28 >> 2]) : 0) {
      i43 = i55;
      while (1) {
       if ((HEAP8[i43 >> 0] | 0) == 10) {
        f57 = f40;
        i58 = i34;
        i59 = i35;
        i60 = i36;
        f61 = f41;
        i62 = i43;
        break L34;
       }
       i42 = i43 + 1 | 0;
       if (i42 >>> 0 < i14 >>> 0) i43 = i42; else {
        f57 = f40;
        i58 = i34;
        i59 = i35;
        i60 = i36;
        f61 = f41;
        i62 = i42;
        break;
       }
      }
     } else {
      f57 = f40;
      i58 = i34;
      i59 = i35;
      i60 = i36;
      f61 = f41;
      i62 = i55;
     }
    }
   } else i11 = 29; while (0);
   L42 : do if ((i11 | 0) == 29) {
    i11 = 0;
    i43 = i56 & 65535;
    do if ((HEAP32[i29 >> 2] | 0) > (i43 | 0)) {
     i42 = HEAP16[(HEAP32[i30 >> 2] | 0) + (i43 << 1) >> 1] | 0;
     if (i42 << 16 >> 16 == -1) {
      i64 = HEAP32[i31 >> 2] | 0;
      break;
     } else {
      i64 = (HEAP32[i32 >> 2] | 0) + ((i42 & 65535) * 40 | 0) | 0;
      break;
     }
    } else i64 = HEAP32[i31 >> 2] | 0; while (0);
    L51 : do if (!i64) {
     f65 = Math_fround(0.0);
     i66 = i34;
     i67 = i35;
     i68 = i36;
    } else {
     f41 = Math_fround(f18 * Math_fround(HEAPF32[i64 + 4 >> 2]));
     switch (i56 | 0) {
     case 9:
     case 32:
      {
       f65 = f41;
       i66 = i34;
       i67 = i35;
       i68 = i36;
       break L51;
       break;
      }
     default:
      {}
     }
     f40 = Math_fround(f44 + Math_fround(f18 * Math_fround(HEAPF32[i64 + 8 >> 2])));
     f63 = Math_fround(f44 + Math_fround(f18 * Math_fround(HEAPF32[i64 + 16 >> 2])));
     f69 = Math_fround(f45 + Math_fround(f18 * Math_fround(HEAPF32[i64 + 12 >> 2])));
     f70 = Math_fround(f45 + Math_fround(f18 * Math_fround(HEAPF32[i64 + 20 >> 2])));
     f71 = Math_fround(HEAPF32[i33 >> 2]);
     if (!(f40 <= f71)) {
      f65 = f41;
      i66 = i34;
      i67 = i35;
      i68 = i36;
     } else {
      f72 = Math_fround(HEAPF32[i6 >> 2]);
      if (!(f63 >= f72)) {
       f65 = f41;
       i66 = i34;
       i67 = i35;
       i68 = i36;
      } else {
       f73 = Math_fround(HEAPF32[i64 + 24 >> 2]);
       f74 = Math_fround(HEAPF32[i64 + 28 >> 2]);
       f75 = Math_fround(HEAPF32[i64 + 32 >> 2]);
       f76 = Math_fround(HEAPF32[i64 + 36 >> 2]);
       do if (i10) {
        if (f40 < f72) {
         f77 = Math_fround(f73 + Math_fround(Math_fround(Math_fround(1.0) - Math_fround(Math_fround(f63 - f72) / Math_fround(f63 - f40))) * Math_fround(f75 - f73)));
         f78 = f72;
        } else {
         f77 = f73;
         f78 = f40;
        }
        f79 = Math_fround(HEAPF32[i28 >> 2]);
        if (f69 < f79) {
         f80 = Math_fround(f74 + Math_fround(Math_fround(f76 - f74) * Math_fround(Math_fround(1.0) - Math_fround(Math_fround(f70 - f79) / Math_fround(f70 - f69)))));
         f81 = f79;
        } else {
         f80 = f74;
         f81 = f69;
        }
        if (f63 > f71) {
         f82 = Math_fround(f77 + Math_fround(Math_fround(f75 - f77) * Math_fround(Math_fround(f71 - f78) / Math_fround(f63 - f78))));
         f83 = f71;
        } else {
         f82 = f75;
         f83 = f63;
        }
        f79 = Math_fround(HEAPF32[i8 >> 2]);
        if (f70 > f79) {
         f84 = Math_fround(f80 + Math_fround(Math_fround(f76 - f80) * Math_fround(Math_fround(f79 - f81) / Math_fround(f70 - f81))));
         f85 = f79;
        } else {
         f84 = f76;
         f85 = f70;
        }
        if (!(f81 >= f85)) {
         f86 = f84;
         f87 = f82;
         f88 = f80;
         f89 = f77;
         f90 = f85;
         f91 = f81;
         f92 = f83;
         f93 = f78;
         break;
        }
        f57 = f45;
        i58 = i34;
        i59 = i35;
        i60 = i36;
        f61 = Math_fround(f44 + f41);
        i62 = i55;
        break L42;
       } else {
        f86 = f76;
        f87 = f75;
        f88 = f74;
        f89 = f73;
        f90 = f70;
        f91 = f69;
        f92 = f63;
        f93 = f40;
       } while (0);
       i43 = i34 & 65535;
       HEAP16[i35 >> 1] = i43;
       HEAP16[i35 + 2 >> 1] = i34 + 1;
       i42 = i34 + 2 & 65535;
       HEAP16[i35 + 4 >> 1] = i42;
       HEAP16[i35 + 6 >> 1] = i43;
       HEAP16[i35 + 8 >> 1] = i42;
       HEAP16[i35 + 10 >> 1] = i34 + 3;
       HEAPF32[i36 >> 2] = f93;
       HEAPF32[i36 + 4 >> 2] = f91;
       HEAP32[i36 + 16 >> 2] = i5;
       HEAPF32[i36 + 8 >> 2] = f89;
       HEAPF32[i36 + 12 >> 2] = f88;
       HEAPF32[i36 + 20 >> 2] = f92;
       HEAPF32[i36 + 24 >> 2] = f91;
       HEAP32[i36 + 36 >> 2] = i5;
       HEAPF32[i36 + 28 >> 2] = f87;
       HEAPF32[i36 + 32 >> 2] = f88;
       HEAPF32[i36 + 40 >> 2] = f92;
       HEAPF32[i36 + 44 >> 2] = f90;
       HEAP32[i36 + 56 >> 2] = i5;
       HEAPF32[i36 + 48 >> 2] = f87;
       HEAPF32[i36 + 52 >> 2] = f86;
       HEAPF32[i36 + 60 >> 2] = f93;
       HEAPF32[i36 + 64 >> 2] = f90;
       HEAP32[i36 + 76 >> 2] = i5;
       HEAPF32[i36 + 68 >> 2] = f89;
       HEAPF32[i36 + 72 >> 2] = f86;
       f65 = f41;
       i66 = i34 + 4 | 0;
       i67 = i35 + 12 | 0;
       i68 = i36 + 80 | 0;
      }
     }
    } while (0);
    f57 = f45;
    i58 = i66;
    i59 = i67;
    i60 = i68;
    f61 = Math_fround(f44 + f65);
    i62 = i55;
   } while (0);
   if (i62 >>> 0 < i14 >>> 0) {
    f15 = f61;
    i34 = i58;
    i35 = i59;
    i36 = i60;
    f37 = f57;
    i38 = i46;
    i39 = i62;
   } else {
    i53 = i59;
    i54 = i60;
    break L13;
   }
  }
  i53 = i35;
  i54 = i36;
 } else {
  i53 = i26;
  i54 = i24;
 } while (0);
 i24 = i2 + 24 | 0;
 i26 = i2 + 32 | 0;
 i60 = (i54 - (HEAP32[i26 >> 2] | 0) | 0) / 20 | 0;
 i59 = i2 + 28 | 0;
 i62 = HEAP32[i59 >> 2] | 0;
 if ((i62 | 0) < (i60 | 0)) {
  if (!i62) i94 = 8; else i94 = ((i62 | 0) / 2 | 0) + i62 | 0;
  i46 = (i94 | 0) > (i60 | 0) ? i94 : i60;
  if ((i62 | 0) < (i46 | 0)) {
   i62 = __ZN5ImGui8MemAllocEj(i46 * 20 | 0) | 0;
   i94 = HEAP32[i26 >> 2] | 0;
   if (!i94) i95 = i26; else {
    _memcpy(i62 | 0, i94 | 0, (HEAP32[i24 >> 2] | 0) * 20 | 0) | 0;
    __ZN5ImGui7MemFreeEPv(HEAP32[i26 >> 2] | 0);
    i95 = i26;
   }
   HEAP32[i95 >> 2] = i62;
   HEAP32[i59 >> 2] = i46;
  }
 }
 HEAP32[i24 >> 2] = i60;
 i46 = i2 + 20 | 0;
 i59 = i53 - (HEAP32[i46 >> 2] | 0) >> 1;
 i62 = i2 + 16 | 0;
 i95 = HEAP32[i62 >> 2] | 0;
 if ((i95 | 0) < (i59 | 0)) {
  if (!i95) i96 = 8; else i96 = ((i95 | 0) / 2 | 0) + i95 | 0;
  i26 = (i96 | 0) > (i59 | 0) ? i96 : i59;
  if ((i95 | 0) < (i26 | 0)) {
   i95 = __ZN5ImGui8MemAllocEj(i26 << 1) | 0;
   i96 = HEAP32[i46 >> 2] | 0;
   if (!i96) i97 = i46; else {
    _memcpy(i95 | 0, i96 | 0, HEAP32[i22 >> 2] << 1 | 0) | 0;
    __ZN5ImGui7MemFreeEPv(HEAP32[i46 >> 2] | 0);
    i97 = i46;
   }
   HEAP32[i97 >> 2] = i95;
   HEAP32[i62 >> 2] = i26;
   i98 = HEAP32[i24 >> 2] | 0;
  } else i98 = i60;
 } else i98 = i60;
 HEAP32[i22 >> 2] = i59;
 i22 = (HEAP32[i2 + 8 >> 2] | 0) + ((HEAP32[i2 >> 2] | 0) + -1 << 5) | 0;
 HEAP32[i22 >> 2] = i59 - (i21 + i23) + (HEAP32[i22 >> 2] | 0);
 HEAP32[i7 >> 2] = i54;
 HEAP32[i25 >> 2] = i53;
 HEAP32[i27 >> 2] = i98;
 STACKTOP = i12;
 return;
}

function __ZN15CityMapRenderer22generateQueue_overlay4Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, d68 = 0.0, f69 = f0, f70 = f0, i71 = 0, i72 = 0, f73 = f0, f74 = f0, f75 = f0, i76 = 0, f77 = f0, f78 = f0, f79 = f0, i80 = 0, i81 = 0, f82 = f0, f83 = f0, f84 = f0, f85 = f0, f86 = f0, f87 = f0, f88 = f0, f89 = f0, f90 = f0, f91 = f0, f92 = f0, f93 = f0, f94 = f0, f95 = f0, i96 = 0, i97 = 0, i98 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 384 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(384);
 i3 = i2 + 312 | 0;
 i4 = i2 + 300 | 0;
 i5 = i2 + 288 | 0;
 i6 = i2 + 224 | 0;
 i7 = i2 + 160 | 0;
 i8 = i2 + 144 | 0;
 i9 = i2 + 80 | 0;
 i10 = i2 + 64 | 0;
 i11 = i2;
 __ZN11RenderQueue5clearEv(i1);
 i12 = i1 + 248 | 0;
 i13 = HEAP32[i12 >> 2] | 0;
 if (!(HEAP32[i13 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 i14 = i1 + 252 | 0;
 i15 = i5 + 4 | 0;
 i16 = i5 + 8 | 0;
 i17 = i6 + 4 | 0;
 i18 = i6 + 20 | 0;
 i19 = i6 + 24 | 0;
 i20 = i6 + 40 | 0;
 i21 = i6 + 44 | 0;
 i22 = i6 + 48 | 0;
 i23 = i6 + 52 | 0;
 i24 = i6 + 56 | 0;
 i25 = i6 + 60 | 0;
 i26 = i8 + 4 | 0;
 i27 = i8 + 8 | 0;
 i28 = i9 + 4 | 0;
 i29 = i9 + 20 | 0;
 i30 = i9 + 24 | 0;
 i31 = i9 + 40 | 0;
 i32 = i9 + 44 | 0;
 i33 = i9 + 48 | 0;
 i34 = i9 + 52 | 0;
 i35 = i9 + 56 | 0;
 i36 = i9 + 60 | 0;
 i37 = i10 + 4 | 0;
 i38 = i10 + 8 | 0;
 i39 = i11 + 4 | 0;
 i40 = i11 + 20 | 0;
 i41 = i11 + 24 | 0;
 i42 = i11 + 40 | 0;
 i43 = i11 + 44 | 0;
 i44 = i11 + 48 | 0;
 i45 = i11 + 52 | 0;
 i46 = i11 + 56 | 0;
 i47 = i11 + 60 | 0;
 i48 = i7 + 4 | 0;
 i49 = i7 + 8 | 0;
 i50 = i7 + 12 | 0;
 i51 = i7 + 16 | 0;
 i52 = i7 + 20 | 0;
 i53 = i7 + 24 | 0;
 i54 = i7 + 28 | 0;
 i55 = i7 + 32 | 0;
 i56 = i7 + 36 | 0;
 i57 = i7 + 40 | 0;
 i58 = i7 + 44 | 0;
 i59 = i7 + 48 | 0;
 i60 = i7 + 52 | 0;
 i61 = i7 + 56 | 0;
 i62 = i7 + 60 | 0;
 i63 = i4 + 4 | 0;
 i64 = i4 + 8 | 0;
 i65 = 0;
 i66 = i13;
 while (1) {
  if (!(HEAP32[i66 + 4 >> 2] | 0)) i67 = i66; else {
   d68 = +(i65 | 0);
   f69 = Math_fround(i65 | 0);
   f70 = Math_fround(f69 * Math_fround(0.0));
   i13 = 0;
   i71 = i66;
   while (1) {
    i72 = HEAP32[i14 >> 2] | 0;
    f73 = Math_fround(HEAPF32[i72 + 68 >> 2]);
    f74 = Math_fround(d68 - +HEAPF64[i72 + 48 >> 3]);
    f75 = Math_fround(+(i13 | 0) - +HEAPF64[i72 + 56 >> 3]);
    i76 = HEAP32[i72 + 72 >> 2] | 0;
    f77 = Math_fround(Math_fround(13.1999998) / Math_fround(HEAP32[i76 + 4 >> 2] | 0));
    f78 = Math_fround(Math_fround(9.39999961) / Math_fround(HEAP32[i76 + 8 >> 2] | 0));
    f79 = Math_fround(f74 + f75);
    if (Math_fround(Math_fround(f73 * Math_fround(f79 + Math_fround(1.0))) * f78) > Math_fround(-1.0)) if (Math_fround(Math_fround(f73 * Math_fround(f79 + Math_fround(-1.0))) * f78) < Math_fround(1.0)) {
     f78 = Math_fround(f74 - f75);
     if (Math_fround(f77 * Math_fround(f73 * Math_fround(f78 + Math_fround(1.0)))) > Math_fround(-1.0)) if (Math_fround(f77 * Math_fround(f73 * Math_fround(f78 + Math_fround(-1.0)))) < Math_fround(1.0)) {
      f78 = Math_fround(i13 | 0);
      f73 = Math_fround(f78 * Math_fround(0.0));
      f77 = Math_fround(Math_fround(f73 + f69) + Math_fround(0.0));
      f75 = Math_fround(Math_fround(f70 + f78) + Math_fround(0.0));
      f78 = Math_fround(Math_fround(f70 + f73) + Math_fround(0.0));
      f73 = Math_fround(f78 + Math_fround(1.0));
      i76 = __ZN7CityMap7getTileEjj(i71, i65, i13) | 0;
      __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i14 >> 2] | 0) + 44 >> 2] | 0);
      __ZN11RenderQueue7setMeshEi(i1, 0);
      if (!(HEAP32[i76 + 72 >> 2] & 4)) {
       HEAPF32[i5 >> 2] = Math_fround(.689999997);
       HEAPF32[i15 >> 2] = Math_fround(.689999997);
       HEAPF32[i16 >> 2] = Math_fround(.689999997);
       HEAP32[i3 >> 2] = HEAP32[i5 >> 2];
       HEAP32[i3 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
       HEAP32[i3 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
       __ZN11RenderQueue10setDiffuseEN3glm3vecILi3EfLNS0_9qualifierE0EEE(i1, i3);
      } else {
       HEAPF32[i4 >> 2] = Math_fround(.600000024);
       HEAPF32[i63 >> 2] = Math_fround(.968999981);
       HEAPF32[i64 >> 2] = Math_fround(.600000024);
       HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
       HEAP32[i3 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
       HEAP32[i3 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
       __ZN11RenderQueue10setDiffuseEN3glm3vecILi3EfLNS0_9qualifierE0EEE(i1, i3);
      }
      HEAP32[i6 >> 2] = 1065353216;
      HEAP32[i17 >> 2] = 0;
      HEAP32[i17 + 4 >> 2] = 0;
      HEAP32[i17 + 8 >> 2] = 0;
      HEAP32[i17 + 12 >> 2] = 0;
      HEAP32[i18 >> 2] = 1065353216;
      HEAP32[i19 >> 2] = 0;
      HEAP32[i19 + 4 >> 2] = 0;
      HEAP32[i19 + 8 >> 2] = 0;
      HEAP32[i19 + 12 >> 2] = 0;
      HEAP32[i20 >> 2] = 1065353216;
      HEAPF32[i21 >> 2] = Math_fround(0.0);
      HEAPF32[i22 >> 2] = f77;
      HEAPF32[i23 >> 2] = f75;
      HEAPF32[i24 >> 2] = f78;
      HEAPF32[i25 >> 2] = f73;
      i72 = i3;
      i80 = i6;
      i81 = i72 + 64 | 0;
      do {
       HEAP32[i72 >> 2] = HEAP32[i80 >> 2];
       i72 = i72 + 4 | 0;
       i80 = i80 + 4 | 0;
      } while ((i72 | 0) < (i81 | 0));
      __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i3);
      if (HEAP32[i76 + 16 >> 2] | 0) {
       f74 = Math_fround(Math_fround(HEAP32[i76 + 24 >> 2] | 0) * Math_fround(1.57079637));
       f79 = Math_fround(_cosf(f74));
       f82 = Math_fround(_sinf(f74));
       f74 = Math_fround(Math_fround(1.0) - f79);
       f83 = Math_fround(f74 * Math_fround(0.0));
       f84 = Math_fround(f83 * Math_fround(0.0));
       f85 = Math_fround(f79 + f84);
       f86 = Math_fround(f82 + f84);
       f87 = Math_fround(f82 * Math_fround(0.0));
       f88 = Math_fround(f83 - f87);
       f89 = Math_fround(f84 - f82);
       f82 = Math_fround(f87 + f83);
       f83 = Math_fround(f79 + f74);
       f74 = Math_fround(f85 * Math_fround(.330000013));
       f79 = Math_fround(f85 * Math_fround(0.0));
       f85 = Math_fround(f86 * Math_fround(0.0));
       f87 = Math_fround(f79 + f85);
       f84 = Math_fround(f88 * Math_fround(0.0));
       f90 = Math_fround(f88 * Math_fround(.330000013));
       f88 = Math_fround(f84 + Math_fround(f74 + f85));
       f85 = Math_fround(f84 + Math_fround(f79 + Math_fround(f86 * Math_fround(.330000013))));
       f86 = Math_fround(f90 + f87);
       f91 = Math_fround(f84 + f87);
       f87 = Math_fround(f89 * Math_fround(0.0));
       f92 = Math_fround(f87 + f79);
       f93 = Math_fround(f82 * Math_fround(0.0));
       f94 = Math_fround(f82 * Math_fround(.330000013));
       f82 = Math_fround(f93 + Math_fround(Math_fround(f89 * Math_fround(.330000013)) + f79));
       f79 = Math_fround(f93 + Math_fround(f87 + f74));
       f74 = Math_fround(f94 + f92);
       f87 = Math_fround(f93 + f92);
       f92 = Math_fround(f93 + f84);
       f89 = Math_fround(f83 * Math_fround(0.0));
       f95 = Math_fround(f89 + Math_fround(f94 + f84));
       f84 = Math_fround(f89 + Math_fround(f93 + f90));
       f90 = Math_fround(Math_fround(f83 * Math_fround(.330000013)) + f92);
       f83 = Math_fround(f89 + f92);
       __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i14 >> 2] | 0) + 44 >> 2] | 0);
       __ZN11RenderQueue7setMeshEi(i1, (HEAP32[i76 + 20 >> 2] | 0) + 3 | 0);
       HEAPF32[i7 >> 2] = f88;
       HEAPF32[i48 >> 2] = f85;
       HEAPF32[i49 >> 2] = f86;
       HEAPF32[i50 >> 2] = f91;
       HEAPF32[i51 >> 2] = f82;
       HEAPF32[i52 >> 2] = f79;
       HEAPF32[i53 >> 2] = f74;
       HEAPF32[i54 >> 2] = f87;
       HEAPF32[i55 >> 2] = f95;
       HEAPF32[i56 >> 2] = f84;
       HEAPF32[i57 >> 2] = f90;
       HEAPF32[i58 >> 2] = f83;
       HEAPF32[i59 >> 2] = f77;
       HEAPF32[i60 >> 2] = f75;
       HEAPF32[i61 >> 2] = f78;
       HEAPF32[i62 >> 2] = f73;
       i72 = i3;
       i80 = i7;
       i81 = i72 + 64 | 0;
       do {
        HEAP32[i72 >> 2] = HEAP32[i80 >> 2];
        i72 = i72 + 4 | 0;
        i80 = i80 + 4 | 0;
       } while ((i72 | 0) < (i81 | 0));
       __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i3);
      }
      i96 = i76 + 12 | 0;
      i97 = HEAP32[i96 >> 2] | 0;
      if ((i97 | 0) == 3) {
       __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i14 >> 2] | 0) + 40 >> 2] | 0);
       __ZN11RenderQueue7setMeshEi(i1, 14);
       HEAPF32[i8 >> 2] = Math_fround(1.0);
       HEAPF32[i26 >> 2] = Math_fround(1.0);
       HEAPF32[i27 >> 2] = Math_fround(1.0);
       HEAP32[i3 >> 2] = HEAP32[i8 >> 2];
       HEAP32[i3 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
       HEAP32[i3 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
       __ZN11RenderQueue10setDiffuseEN3glm3vecILi3EfLNS0_9qualifierE0EEE(i1, i3);
       HEAPF32[i9 >> 2] = Math_fround(.639999986);
       HEAP32[i28 >> 2] = 0;
       HEAP32[i28 + 4 >> 2] = 0;
       HEAP32[i28 + 8 >> 2] = 0;
       HEAP32[i28 + 12 >> 2] = 0;
       HEAPF32[i29 >> 2] = Math_fround(.639999986);
       HEAP32[i30 >> 2] = 0;
       HEAP32[i30 + 4 >> 2] = 0;
       HEAP32[i30 + 8 >> 2] = 0;
       HEAP32[i30 + 12 >> 2] = 0;
       HEAPF32[i31 >> 2] = Math_fround(.639999986);
       HEAPF32[i32 >> 2] = Math_fround(0.0);
       HEAPF32[i33 >> 2] = f77;
       HEAPF32[i34 >> 2] = f75;
       HEAPF32[i35 >> 2] = f78;
       HEAPF32[i36 >> 2] = f73;
       i72 = i3;
       i80 = i9;
       i81 = i72 + 64 | 0;
       do {
        HEAP32[i72 >> 2] = HEAP32[i80 >> 2];
        i72 = i72 + 4 | 0;
        i80 = i80 + 4 | 0;
       } while ((i72 | 0) < (i81 | 0));
       __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i3);
       i98 = HEAP32[i96 >> 2] | 0;
      } else i98 = i97;
      if ((i98 | 0) == 4) {
       __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i14 >> 2] | 0) + 40 >> 2] | 0);
       __ZN11RenderQueue7setMeshEi(i1, 15);
       HEAPF32[i10 >> 2] = Math_fround(1.0);
       HEAPF32[i37 >> 2] = Math_fround(1.0);
       HEAPF32[i38 >> 2] = Math_fround(1.0);
       HEAP32[i3 >> 2] = HEAP32[i10 >> 2];
       HEAP32[i3 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
       HEAP32[i3 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
       __ZN11RenderQueue10setDiffuseEN3glm3vecILi3EfLNS0_9qualifierE0EEE(i1, i3);
       HEAPF32[i11 >> 2] = Math_fround(.200000003);
       HEAP32[i39 >> 2] = 0;
       HEAP32[i39 + 4 >> 2] = 0;
       HEAP32[i39 + 8 >> 2] = 0;
       HEAP32[i39 + 12 >> 2] = 0;
       HEAPF32[i40 >> 2] = Math_fround(.200000003);
       HEAP32[i41 >> 2] = 0;
       HEAP32[i41 + 4 >> 2] = 0;
       HEAP32[i41 + 8 >> 2] = 0;
       HEAP32[i41 + 12 >> 2] = 0;
       HEAPF32[i42 >> 2] = Math_fround(.200000003);
       HEAPF32[i43 >> 2] = Math_fround(0.0);
       HEAPF32[i44 >> 2] = f77;
       HEAPF32[i45 >> 2] = f75;
       HEAPF32[i46 >> 2] = f78;
       HEAPF32[i47 >> 2] = f73;
       i72 = i3;
       i80 = i11;
       i81 = i72 + 64 | 0;
       do {
        HEAP32[i72 >> 2] = HEAP32[i80 >> 2];
        i72 = i72 + 4 | 0;
        i80 = i80 + 4 | 0;
       } while ((i72 | 0) < (i81 | 0));
       __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i3);
      }
     }
    }
    i13 = i13 + 1 | 0;
    i80 = HEAP32[i12 >> 2] | 0;
    if (i13 >>> 0 >= (HEAP32[i80 + 4 >> 2] | 0) >>> 0) {
     i67 = i80;
     break;
    } else i71 = i80;
   }
  }
  i65 = i65 + 1 | 0;
  if (i65 >>> 0 >= (HEAP32[i67 >> 2] | 0) >>> 0) break; else i66 = i67;
 }
 STACKTOP = i2;
 return;
}

function __ZN15CityMapRenderer22generateQueue_overlay5Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, d68 = 0.0, f69 = f0, f70 = f0, i71 = 0, i72 = 0, f73 = f0, f74 = f0, f75 = f0, i76 = 0, f77 = f0, f78 = f0, f79 = f0, i80 = 0, i81 = 0, f82 = f0, f83 = f0, f84 = f0, f85 = f0, f86 = f0, f87 = f0, f88 = f0, f89 = f0, f90 = f0, f91 = f0, f92 = f0, f93 = f0, f94 = f0, f95 = f0, i96 = 0, i97 = 0, i98 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 384 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(384);
 i3 = i2 + 312 | 0;
 i4 = i2 + 300 | 0;
 i5 = i2 + 288 | 0;
 i6 = i2 + 224 | 0;
 i7 = i2 + 160 | 0;
 i8 = i2 + 144 | 0;
 i9 = i2 + 80 | 0;
 i10 = i2 + 64 | 0;
 i11 = i2;
 __ZN11RenderQueue5clearEv(i1);
 i12 = i1 + 248 | 0;
 i13 = HEAP32[i12 >> 2] | 0;
 if (!(HEAP32[i13 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 i14 = i1 + 252 | 0;
 i15 = i5 + 4 | 0;
 i16 = i5 + 8 | 0;
 i17 = i6 + 4 | 0;
 i18 = i6 + 20 | 0;
 i19 = i6 + 24 | 0;
 i20 = i6 + 40 | 0;
 i21 = i6 + 44 | 0;
 i22 = i6 + 48 | 0;
 i23 = i6 + 52 | 0;
 i24 = i6 + 56 | 0;
 i25 = i6 + 60 | 0;
 i26 = i8 + 4 | 0;
 i27 = i8 + 8 | 0;
 i28 = i9 + 4 | 0;
 i29 = i9 + 20 | 0;
 i30 = i9 + 24 | 0;
 i31 = i9 + 40 | 0;
 i32 = i9 + 44 | 0;
 i33 = i9 + 48 | 0;
 i34 = i9 + 52 | 0;
 i35 = i9 + 56 | 0;
 i36 = i9 + 60 | 0;
 i37 = i10 + 4 | 0;
 i38 = i10 + 8 | 0;
 i39 = i11 + 4 | 0;
 i40 = i11 + 20 | 0;
 i41 = i11 + 24 | 0;
 i42 = i11 + 40 | 0;
 i43 = i11 + 44 | 0;
 i44 = i11 + 48 | 0;
 i45 = i11 + 52 | 0;
 i46 = i11 + 56 | 0;
 i47 = i11 + 60 | 0;
 i48 = i7 + 4 | 0;
 i49 = i7 + 8 | 0;
 i50 = i7 + 12 | 0;
 i51 = i7 + 16 | 0;
 i52 = i7 + 20 | 0;
 i53 = i7 + 24 | 0;
 i54 = i7 + 28 | 0;
 i55 = i7 + 32 | 0;
 i56 = i7 + 36 | 0;
 i57 = i7 + 40 | 0;
 i58 = i7 + 44 | 0;
 i59 = i7 + 48 | 0;
 i60 = i7 + 52 | 0;
 i61 = i7 + 56 | 0;
 i62 = i7 + 60 | 0;
 i63 = i4 + 4 | 0;
 i64 = i4 + 8 | 0;
 i65 = 0;
 i66 = i13;
 while (1) {
  if (!(HEAP32[i66 + 4 >> 2] | 0)) i67 = i66; else {
   d68 = +(i65 | 0);
   f69 = Math_fround(i65 | 0);
   f70 = Math_fround(f69 * Math_fround(0.0));
   i13 = 0;
   i71 = i66;
   while (1) {
    i72 = HEAP32[i14 >> 2] | 0;
    f73 = Math_fround(HEAPF32[i72 + 68 >> 2]);
    f74 = Math_fround(d68 - +HEAPF64[i72 + 48 >> 3]);
    f75 = Math_fround(+(i13 | 0) - +HEAPF64[i72 + 56 >> 3]);
    i76 = HEAP32[i72 + 72 >> 2] | 0;
    f77 = Math_fround(Math_fround(13.1999998) / Math_fround(HEAP32[i76 + 4 >> 2] | 0));
    f78 = Math_fround(Math_fround(9.39999961) / Math_fround(HEAP32[i76 + 8 >> 2] | 0));
    f79 = Math_fround(f74 + f75);
    if (Math_fround(Math_fround(f73 * Math_fround(f79 + Math_fround(1.0))) * f78) > Math_fround(-1.0)) if (Math_fround(Math_fround(f73 * Math_fround(f79 + Math_fround(-1.0))) * f78) < Math_fround(1.0)) {
     f78 = Math_fround(f74 - f75);
     if (Math_fround(f77 * Math_fround(f73 * Math_fround(f78 + Math_fround(1.0)))) > Math_fround(-1.0)) if (Math_fround(f77 * Math_fround(f73 * Math_fround(f78 + Math_fround(-1.0)))) < Math_fround(1.0)) {
      f78 = Math_fround(i13 | 0);
      f73 = Math_fround(f78 * Math_fround(0.0));
      f77 = Math_fround(Math_fround(f73 + f69) + Math_fround(0.0));
      f75 = Math_fround(Math_fround(f70 + f78) + Math_fround(0.0));
      f78 = Math_fround(Math_fround(f70 + f73) + Math_fround(0.0));
      f73 = Math_fround(f78 + Math_fround(1.0));
      i76 = __ZN7CityMap7getTileEjj(i71, i65, i13) | 0;
      __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i14 >> 2] | 0) + 44 >> 2] | 0);
      __ZN11RenderQueue7setMeshEi(i1, 0);
      if (!(HEAP32[i76 + 72 >> 2] & 8)) {
       HEAPF32[i5 >> 2] = Math_fround(.689999997);
       HEAPF32[i15 >> 2] = Math_fround(.689999997);
       HEAPF32[i16 >> 2] = Math_fround(.689999997);
       HEAP32[i3 >> 2] = HEAP32[i5 >> 2];
       HEAP32[i3 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
       HEAP32[i3 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
       __ZN11RenderQueue10setDiffuseEN3glm3vecILi3EfLNS0_9qualifierE0EEE(i1, i3);
      } else {
       HEAPF32[i4 >> 2] = Math_fround(.600000024);
       HEAPF32[i63 >> 2] = Math_fround(.968999981);
       HEAPF32[i64 >> 2] = Math_fround(.600000024);
       HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
       HEAP32[i3 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
       HEAP32[i3 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
       __ZN11RenderQueue10setDiffuseEN3glm3vecILi3EfLNS0_9qualifierE0EEE(i1, i3);
      }
      HEAP32[i6 >> 2] = 1065353216;
      HEAP32[i17 >> 2] = 0;
      HEAP32[i17 + 4 >> 2] = 0;
      HEAP32[i17 + 8 >> 2] = 0;
      HEAP32[i17 + 12 >> 2] = 0;
      HEAP32[i18 >> 2] = 1065353216;
      HEAP32[i19 >> 2] = 0;
      HEAP32[i19 + 4 >> 2] = 0;
      HEAP32[i19 + 8 >> 2] = 0;
      HEAP32[i19 + 12 >> 2] = 0;
      HEAP32[i20 >> 2] = 1065353216;
      HEAPF32[i21 >> 2] = Math_fround(0.0);
      HEAPF32[i22 >> 2] = f77;
      HEAPF32[i23 >> 2] = f75;
      HEAPF32[i24 >> 2] = f78;
      HEAPF32[i25 >> 2] = f73;
      i72 = i3;
      i80 = i6;
      i81 = i72 + 64 | 0;
      do {
       HEAP32[i72 >> 2] = HEAP32[i80 >> 2];
       i72 = i72 + 4 | 0;
       i80 = i80 + 4 | 0;
      } while ((i72 | 0) < (i81 | 0));
      __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i3);
      if (HEAP32[i76 + 16 >> 2] | 0) {
       f74 = Math_fround(Math_fround(HEAP32[i76 + 24 >> 2] | 0) * Math_fround(1.57079637));
       f79 = Math_fround(_cosf(f74));
       f82 = Math_fround(_sinf(f74));
       f74 = Math_fround(Math_fround(1.0) - f79);
       f83 = Math_fround(f74 * Math_fround(0.0));
       f84 = Math_fround(f83 * Math_fround(0.0));
       f85 = Math_fround(f79 + f84);
       f86 = Math_fround(f82 + f84);
       f87 = Math_fround(f82 * Math_fround(0.0));
       f88 = Math_fround(f83 - f87);
       f89 = Math_fround(f84 - f82);
       f82 = Math_fround(f87 + f83);
       f83 = Math_fround(f79 + f74);
       f74 = Math_fround(f85 * Math_fround(.330000013));
       f79 = Math_fround(f85 * Math_fround(0.0));
       f85 = Math_fround(f86 * Math_fround(0.0));
       f87 = Math_fround(f79 + f85);
       f84 = Math_fround(f88 * Math_fround(0.0));
       f90 = Math_fround(f88 * Math_fround(.330000013));
       f88 = Math_fround(f84 + Math_fround(f74 + f85));
       f85 = Math_fround(f84 + Math_fround(f79 + Math_fround(f86 * Math_fround(.330000013))));
       f86 = Math_fround(f90 + f87);
       f91 = Math_fround(f84 + f87);
       f87 = Math_fround(f89 * Math_fround(0.0));
       f92 = Math_fround(f87 + f79);
       f93 = Math_fround(f82 * Math_fround(0.0));
       f94 = Math_fround(f82 * Math_fround(.330000013));
       f82 = Math_fround(f93 + Math_fround(Math_fround(f89 * Math_fround(.330000013)) + f79));
       f79 = Math_fround(f93 + Math_fround(f87 + f74));
       f74 = Math_fround(f94 + f92);
       f87 = Math_fround(f93 + f92);
       f92 = Math_fround(f93 + f84);
       f89 = Math_fround(f83 * Math_fround(0.0));
       f95 = Math_fround(f89 + Math_fround(f94 + f84));
       f84 = Math_fround(f89 + Math_fround(f93 + f90));
       f90 = Math_fround(Math_fround(f83 * Math_fround(.330000013)) + f92);
       f83 = Math_fround(f89 + f92);
       __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i14 >> 2] | 0) + 44 >> 2] | 0);
       __ZN11RenderQueue7setMeshEi(i1, (HEAP32[i76 + 20 >> 2] | 0) + 3 | 0);
       HEAPF32[i7 >> 2] = f88;
       HEAPF32[i48 >> 2] = f85;
       HEAPF32[i49 >> 2] = f86;
       HEAPF32[i50 >> 2] = f91;
       HEAPF32[i51 >> 2] = f82;
       HEAPF32[i52 >> 2] = f79;
       HEAPF32[i53 >> 2] = f74;
       HEAPF32[i54 >> 2] = f87;
       HEAPF32[i55 >> 2] = f95;
       HEAPF32[i56 >> 2] = f84;
       HEAPF32[i57 >> 2] = f90;
       HEAPF32[i58 >> 2] = f83;
       HEAPF32[i59 >> 2] = f77;
       HEAPF32[i60 >> 2] = f75;
       HEAPF32[i61 >> 2] = f78;
       HEAPF32[i62 >> 2] = f73;
       i72 = i3;
       i80 = i7;
       i81 = i72 + 64 | 0;
       do {
        HEAP32[i72 >> 2] = HEAP32[i80 >> 2];
        i72 = i72 + 4 | 0;
        i80 = i80 + 4 | 0;
       } while ((i72 | 0) < (i81 | 0));
       __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i3);
      }
      i96 = i76 + 12 | 0;
      i97 = HEAP32[i96 >> 2] | 0;
      if ((i97 | 0) == 5) {
       __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i14 >> 2] | 0) + 40 >> 2] | 0);
       __ZN11RenderQueue7setMeshEi(i1, 16);
       HEAPF32[i8 >> 2] = Math_fround(1.0);
       HEAPF32[i26 >> 2] = Math_fround(1.0);
       HEAPF32[i27 >> 2] = Math_fround(1.0);
       HEAP32[i3 >> 2] = HEAP32[i8 >> 2];
       HEAP32[i3 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
       HEAP32[i3 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
       __ZN11RenderQueue10setDiffuseEN3glm3vecILi3EfLNS0_9qualifierE0EEE(i1, i3);
       HEAPF32[i9 >> 2] = Math_fround(.75);
       HEAP32[i28 >> 2] = 0;
       HEAP32[i28 + 4 >> 2] = 0;
       HEAP32[i28 + 8 >> 2] = 0;
       HEAP32[i28 + 12 >> 2] = 0;
       HEAPF32[i29 >> 2] = Math_fround(.75);
       HEAP32[i30 >> 2] = 0;
       HEAP32[i30 + 4 >> 2] = 0;
       HEAP32[i30 + 8 >> 2] = 0;
       HEAP32[i30 + 12 >> 2] = 0;
       HEAPF32[i31 >> 2] = Math_fround(.75);
       HEAPF32[i32 >> 2] = Math_fround(0.0);
       HEAPF32[i33 >> 2] = f77;
       HEAPF32[i34 >> 2] = f75;
       HEAPF32[i35 >> 2] = f78;
       HEAPF32[i36 >> 2] = f73;
       i72 = i3;
       i80 = i9;
       i81 = i72 + 64 | 0;
       do {
        HEAP32[i72 >> 2] = HEAP32[i80 >> 2];
        i72 = i72 + 4 | 0;
        i80 = i80 + 4 | 0;
       } while ((i72 | 0) < (i81 | 0));
       __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i3);
       i98 = HEAP32[i96 >> 2] | 0;
      } else i98 = i97;
      if ((i98 | 0) == 6) {
       __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i14 >> 2] | 0) + 40 >> 2] | 0);
       __ZN11RenderQueue7setMeshEi(i1, 17);
       HEAPF32[i10 >> 2] = Math_fround(1.0);
       HEAPF32[i37 >> 2] = Math_fround(1.0);
       HEAPF32[i38 >> 2] = Math_fround(1.0);
       HEAP32[i3 >> 2] = HEAP32[i10 >> 2];
       HEAP32[i3 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
       HEAP32[i3 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
       __ZN11RenderQueue10setDiffuseEN3glm3vecILi3EfLNS0_9qualifierE0EEE(i1, i3);
       HEAPF32[i11 >> 2] = Math_fround(.5);
       HEAP32[i39 >> 2] = 0;
       HEAP32[i39 + 4 >> 2] = 0;
       HEAP32[i39 + 8 >> 2] = 0;
       HEAP32[i39 + 12 >> 2] = 0;
       HEAPF32[i40 >> 2] = Math_fround(.5);
       HEAP32[i41 >> 2] = 0;
       HEAP32[i41 + 4 >> 2] = 0;
       HEAP32[i41 + 8 >> 2] = 0;
       HEAP32[i41 + 12 >> 2] = 0;
       HEAPF32[i42 >> 2] = Math_fround(.5);
       HEAPF32[i43 >> 2] = Math_fround(0.0);
       HEAPF32[i44 >> 2] = f77;
       HEAPF32[i45 >> 2] = f75;
       HEAPF32[i46 >> 2] = f78;
       HEAPF32[i47 >> 2] = f73;
       i72 = i3;
       i80 = i11;
       i81 = i72 + 64 | 0;
       do {
        HEAP32[i72 >> 2] = HEAP32[i80 >> 2];
        i72 = i72 + 4 | 0;
        i80 = i80 + 4 | 0;
       } while ((i72 | 0) < (i81 | 0));
       __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i3);
      }
     }
    }
    i13 = i13 + 1 | 0;
    i80 = HEAP32[i12 >> 2] | 0;
    if (i13 >>> 0 >= (HEAP32[i80 + 4 >> 2] | 0) >>> 0) {
     i67 = i80;
     break;
    } else i71 = i80;
   }
  }
  i65 = i65 + 1 | 0;
  if (i65 >>> 0 >= (HEAP32[i67 >> 2] | 0) >>> 0) break; else i66 = i67;
 }
 STACKTOP = i2;
 return;
}

function __ZN5ImGui11RadioButtonEPKcb(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, f16 = f0, f17 = f0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, f22 = f0, f23 = f0, f24 = f0, f25 = f0, f26 = f0, f27 = f0, f28 = f0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, f33 = f0, f34 = f0, f35 = f0, i36 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i4 = i3 + 24 | 0;
 i5 = i3 + 40 | 0;
 i6 = i3 + 8 | 0;
 i7 = i3 + 32 | 0;
 i8 = i3 + 57 | 0;
 i9 = i3 + 56 | 0;
 i10 = i3;
 i11 = HEAP32[1460598] | 0;
 i12 = HEAP32[i11 + 6392 >> 2] | 0;
 HEAP8[i12 + 120 >> 0] = 1;
 if (HEAP8[i12 + 123 >> 0] | 0) {
  i13 = 0;
  STACKTOP = i3;
  return i13 | 0;
 }
 i14 = HEAP32[i12 + 452 >> 2] | 0;
 if ((i14 | 0) <= 0) ___assert_fail(38278, 56850, 1245, 38287);
 i15 = __Z6ImHashPKvij(i1, 0, HEAP32[(HEAP32[i12 + 460 >> 2] | 0) + (i14 + -1 << 2) >> 2] | 0) | 0;
 i14 = HEAP32[1460598] | 0;
 if ((HEAP32[i14 + 6420 >> 2] | 0) == (i15 | 0)) HEAP8[i14 + 6432 >> 0] = 1;
 if ((HEAP32[i14 + 6424 >> 2] | 0) == (i15 | 0)) HEAP8[i14 + 6436 >> 0] = 1;
 if ((i1 | 0) == (-1 | 0)) {
  f16 = Math_fround(HEAPF32[i14 + 6184 >> 2]);
  f17 = Math_fround(0.0);
 } else {
  i18 = i1;
  L15 : while (1) {
   switch (HEAP8[i18 >> 0] | 0) {
   case 0:
    {
     i19 = i18;
     break L15;
     break;
    }
   case 35:
    {
     i20 = i18 + 1 | 0;
     if ((HEAP8[i20 >> 0] | 0) == 35) {
      i19 = i18;
      break L15;
     } else i21 = i20;
     break;
    }
   default:
    i21 = i18 + 1 | 0;
   }
   if ((i21 | 0) == (-1 | 0)) {
    i19 = -1;
    break;
   } else i18 = i21;
  }
  i21 = HEAP32[i14 + 6180 >> 2] | 0;
  f22 = Math_fround(HEAPF32[i14 + 6184 >> 2]);
  if ((i19 | 0) == (i1 | 0)) {
   f16 = f22;
   f17 = Math_fround(0.0);
  } else {
   __ZNK6ImFont13CalcTextSizeAEfffPKcS1_PS1_(i4, i21, f22, Math_fround(3402823469999999843913219.0e14), Math_fround(-1.0), i1, i19, 0);
   f23 = Math_fround(HEAPF32[i4 >> 2]);
   if (f23 > Math_fround(0.0)) {
    f24 = Math_fround(f23 - Math_fround(f22 / Math_fround(HEAPF32[i21 >> 2])));
    HEAPF32[i4 >> 2] = f24;
    f25 = f24;
   } else f25 = f23;
   f23 = Math_fround(~~Math_fround(f25 + Math_fround(.949999988)) | 0);
   HEAPF32[i4 >> 2] = f23;
   f16 = Math_fround(HEAPF32[i4 + 4 >> 2]);
   f17 = f23;
  }
 }
 i21 = i11 + 5412 | 0;
 f23 = Math_fround(HEAPF32[i21 >> 2]);
 f25 = Math_fround(Math_fround(f16 + Math_fround(f23 * Math_fround(2.0))) + Math_fround(-1.0));
 i19 = i12 + 196 | 0;
 f24 = Math_fround(HEAPF32[i19 >> 2]);
 f22 = Math_fround(f24 + f25);
 i14 = i12 + 200 | 0;
 f26 = Math_fround(HEAPF32[i14 >> 2]);
 f27 = Math_fround(f26 + f25);
 f25 = Math_fround(f22 - f24);
 f28 = Math_fround(f27 - f26);
 HEAPF32[i4 >> 2] = f25;
 HEAPF32[i4 + 4 >> 2] = f28;
 __ZN5ImGui8ItemSizeERK6ImVec2f(i4, f23);
 HEAPF32[i5 >> 2] = f24;
 i18 = i5 + 4 | 0;
 HEAPF32[i18 >> 2] = f26;
 i20 = i5 + 8 | 0;
 HEAPF32[i20 >> 2] = f22;
 i29 = i5 + 12 | 0;
 HEAPF32[i29 >> 2] = f27;
 i30 = f17 > Math_fround(0.0);
 if (i30) {
  f23 = Math_fround(HEAPF32[i11 + 5432 >> 2]);
  i31 = HEAP32[1460598] | 0;
  i32 = HEAP32[i31 + 6392 >> 2] | 0;
  HEAP8[i32 + 120 >> 0] = 1;
  if (!(HEAP8[i32 + 123 >> 0] | 0)) {
   if (f23 < Math_fround(0.0)) f33 = Math_fround(HEAPF32[i31 + 5424 >> 2]); else f33 = f23;
   f23 = Math_fround(f33 + Math_fround(HEAPF32[i32 + 204 >> 2]));
   HEAPF32[i32 + 196 >> 2] = f23;
   HEAP32[i32 + 200 >> 2] = HEAP32[i32 + 208 >> 2];
   HEAP32[i32 + 228 >> 2] = HEAP32[i32 + 236 >> 2];
   HEAP32[i32 + 232 >> 2] = HEAP32[i32 + 240 >> 2];
  }
 }
 f23 = Math_fround(HEAPF32[i21 >> 2]);
 f33 = Math_fround(Math_fround(HEAPF32[i19 >> 2]) + Math_fround(0.0));
 f34 = Math_fround(f23 + Math_fround(HEAPF32[i14 >> 2]));
 f35 = Math_fround(f17 + f33);
 f17 = Math_fround(f16 + f34);
 HEAPF32[i6 >> 2] = f33;
 i14 = i6 + 4 | 0;
 HEAPF32[i14 >> 2] = f34;
 i19 = i6 + 8 | 0;
 HEAPF32[i19 >> 2] = f35;
 i21 = i6 + 12 | 0;
 HEAPF32[i21 >> 2] = f17;
 if (i30) {
  f17 = Math_fround(f35 - f33);
  HEAPF32[i4 >> 2] = f17;
  HEAPF32[i4 + 4 >> 2] = f28;
  __ZN5ImGui8ItemSizeERK6ImVec2f(i4, f23);
  f23 = Math_fround(HEAPF32[i6 >> 2]);
  if (f24 > f23) HEAPF32[i5 >> 2] = f23;
  f23 = Math_fround(HEAPF32[i14 >> 2]);
  if (f26 > f23) HEAPF32[i18 >> 2] = f23;
  f23 = Math_fround(HEAPF32[i19 >> 2]);
  if (f22 < f23) HEAPF32[i20 >> 2] = f23;
  f23 = Math_fround(HEAPF32[i21 >> 2]);
  if (f27 < f23) HEAPF32[i29 >> 2] = f23;
 }
 if (__ZN5ImGui7ItemAddERK6ImRectjPS1_(i5, i15, 0) | 0) {
  f23 = Math_fround(Math_fround(f27 + f26) * Math_fround(.5));
  i29 = i7 + 4 | 0;
  f26 = Math_fround(Math_fround(~~Math_fround(Math_fround(f22 + f24) * Math_fround(.5)) | 0) + Math_fround(.5));
  HEAPF32[i7 >> 2] = f26;
  f26 = Math_fround(Math_fround(~~f23 | 0) + Math_fround(.5));
  HEAPF32[i29 >> 2] = f26;
  f26 = Math_fround(f28 * Math_fround(.5));
  i21 = __ZN5ImGui14ButtonBehaviorERK6ImRectjPbS3_i(i5, i15, i8, i9, 0) | 0;
  do if (i21) {
   i20 = HEAP32[1460598] | 0;
   i19 = HEAP32[i20 + 6420 >> 2] | 0;
   if ((i19 | 0) == (i15 | 0) | (i19 | 0) == 0) {
    HEAP8[i20 + 6435 >> 0] = 1;
    break;
   } else ___assert_fail(32628, 31803, 2259, 32664);
  } while (0);
  __ZN5ImGui18RenderNavHighlightERK6ImRectji(i5, i15, 1);
  i15 = i12 + 632 | 0;
  i12 = HEAP8[i8 >> 0] | 0;
  i8 = i12 << 24 >> 24 | 0;
  i12 = (HEAP8[i9 >> 0] | 0) == 0 | (i8 | 0) == 0 ? (i8 | 0 ? 8 : 7) : 9;
  i8 = HEAP32[1460598] | 0;
  i9 = i8 + 5508 + (i12 << 4) | 0;
  f23 = Math_fround(HEAPF32[i9 >> 2]);
  f24 = Math_fround(HEAPF32[i9 + 4 >> 2]);
  f22 = Math_fround(HEAPF32[i9 + 8 >> 2]);
  f27 = Math_fround(HEAPF32[i9 + 12 >> 2]);
  f17 = Math_fround(f27 * Math_fround(HEAPF32[i8 + 5356 >> 2]));
  i8 = f23 < Math_fround(0.0);
  i9 = f23 > Math_fround(1.0);
  i12 = ~~Math_fround(Math_fround((i9 ? Math_fround(1.0) : f23) * Math_fround(255.0)) + Math_fround(.5));
  i9 = f24 < Math_fround(0.0);
  i5 = f24 > Math_fround(1.0);
  i20 = ~~Math_fround(Math_fround((i5 ? Math_fround(1.0) : f24) * Math_fround(255.0)) + Math_fround(.5)) << 8;
  i5 = f22 < Math_fround(0.0);
  i19 = f22 > Math_fround(1.0);
  i18 = ~~Math_fround(Math_fround((i19 ? Math_fround(1.0) : f22) * Math_fround(255.0)) + Math_fround(.5)) << 16;
  i19 = f17 < Math_fround(0.0);
  i14 = f17 > Math_fround(1.0);
  i32 = ~~Math_fround(Math_fround((i14 ? Math_fround(1.0) : f17) * Math_fround(255.0)) + Math_fround(.5)) << 24;
  __ZN10ImDrawList15AddCircleFilledERK6ImVec2fji(HEAP32[i15 >> 2] | 0, i7, f26, (i9 ? 0 : i20) | (i8 ? 0 : i12) | (i5 ? 0 : i18) | (i19 ? 0 : i32), 16);
  if (i2) {
   f17 = Math_fround(~~Math_fround((f25 < f28 ? f25 : f28) / Math_fround(6.0)) | 0);
   i32 = f17 <= Math_fround(1.0);
   f28 = i32 ? Math_fround(1.0) : f17;
   f17 = Math_fround(f26 - f28);
   i32 = HEAP32[1460598] | 0;
   f28 = Math_fround(HEAPF32[i32 + 5796 >> 2]);
   f25 = Math_fround(HEAPF32[i32 + 5800 >> 2]);
   f22 = Math_fround(HEAPF32[i32 + 5804 >> 2]);
   f24 = Math_fround(HEAPF32[i32 + 5808 >> 2]);
   f23 = Math_fround(f24 * Math_fround(HEAPF32[i32 + 5356 >> 2]));
   i32 = f28 < Math_fround(0.0);
   i19 = f28 > Math_fround(1.0);
   i18 = ~~Math_fround(Math_fround((i19 ? Math_fround(1.0) : f28) * Math_fround(255.0)) + Math_fround(.5));
   i19 = f25 < Math_fround(0.0);
   i5 = f25 > Math_fround(1.0);
   i12 = ~~Math_fround(Math_fround((i5 ? Math_fround(1.0) : f25) * Math_fround(255.0)) + Math_fround(.5)) << 8;
   i5 = f22 < Math_fround(0.0);
   i8 = f22 > Math_fround(1.0);
   i20 = ~~Math_fround(Math_fround((i8 ? Math_fround(1.0) : f22) * Math_fround(255.0)) + Math_fround(.5)) << 16;
   i8 = f23 < Math_fround(0.0);
   i9 = f23 > Math_fround(1.0);
   i14 = ~~Math_fround(Math_fround((i9 ? Math_fround(1.0) : f23) * Math_fround(255.0)) + Math_fround(.5)) << 24;
   __ZN10ImDrawList15AddCircleFilledERK6ImVec2fji(HEAP32[i15 >> 2] | 0, i7, f17, (i19 ? 0 : i12) | (i32 ? 0 : i18) | (i5 ? 0 : i20) | (i8 ? 0 : i14), 16);
  }
  i14 = i11 + 5420 | 0;
  f17 = Math_fround(HEAPF32[i14 >> 2]);
  if (f17 > Math_fround(0.0)) {
   i8 = HEAP32[i15 >> 2] | 0;
   f23 = Math_fround(Math_fround(HEAPF32[i7 >> 2]) + Math_fround(1.0));
   f22 = Math_fround(Math_fround(HEAPF32[i29 >> 2]) + Math_fround(1.0));
   HEAPF32[i4 >> 2] = f23;
   HEAPF32[i4 + 4 >> 2] = f22;
   i29 = HEAP32[1460598] | 0;
   f22 = Math_fround(HEAPF32[i29 + 5604 >> 2]);
   f23 = Math_fround(HEAPF32[i29 + 5608 >> 2]);
   f25 = Math_fround(HEAPF32[i29 + 5612 >> 2]);
   f28 = Math_fround(HEAPF32[i29 + 5616 >> 2]);
   f24 = Math_fround(f28 * Math_fround(HEAPF32[i29 + 5356 >> 2]));
   i29 = f22 < Math_fround(0.0);
   i20 = f22 > Math_fround(1.0);
   i5 = ~~Math_fround(Math_fround((i20 ? Math_fround(1.0) : f22) * Math_fround(255.0)) + Math_fround(.5));
   i20 = f23 < Math_fround(0.0);
   i18 = f23 > Math_fround(1.0);
   i32 = ~~Math_fround(Math_fround((i18 ? Math_fround(1.0) : f23) * Math_fround(255.0)) + Math_fround(.5)) << 8;
   i18 = f25 < Math_fround(0.0);
   i12 = f25 > Math_fround(1.0);
   i19 = ~~Math_fround(Math_fround((i12 ? Math_fround(1.0) : f25) * Math_fround(255.0)) + Math_fround(.5)) << 16;
   i12 = f24 < Math_fround(0.0);
   i9 = f24 > Math_fround(1.0);
   i31 = ~~Math_fround(Math_fround((i9 ? Math_fround(1.0) : f24) * Math_fround(255.0)) + Math_fround(.5)) << 24;
   __ZN10ImDrawList9AddCircleERK6ImVec2fjif(i8, i4, f26, (i20 ? 0 : i32) | (i29 ? 0 : i5) | (i18 ? 0 : i19) | (i12 ? 0 : i31), 16, f17);
   i31 = HEAP32[1460598] | 0;
   f17 = Math_fround(HEAPF32[i31 + 5588 >> 2]);
   f24 = Math_fround(HEAPF32[i31 + 5592 >> 2]);
   f25 = Math_fround(HEAPF32[i31 + 5596 >> 2]);
   f23 = Math_fround(HEAPF32[i31 + 5600 >> 2]);
   f22 = Math_fround(f23 * Math_fround(HEAPF32[i31 + 5356 >> 2]));
   i31 = f17 < Math_fround(0.0);
   i12 = f17 > Math_fround(1.0);
   i19 = ~~Math_fround(Math_fround((i12 ? Math_fround(1.0) : f17) * Math_fround(255.0)) + Math_fround(.5));
   i12 = f24 < Math_fround(0.0);
   i18 = f24 > Math_fround(1.0);
   i5 = ~~Math_fround(Math_fround((i18 ? Math_fround(1.0) : f24) * Math_fround(255.0)) + Math_fround(.5)) << 8;
   i18 = f25 < Math_fround(0.0);
   i29 = f25 > Math_fround(1.0);
   i32 = ~~Math_fround(Math_fround((i29 ? Math_fround(1.0) : f25) * Math_fround(255.0)) + Math_fround(.5)) << 16;
   i29 = f22 < Math_fround(0.0);
   i20 = f22 > Math_fround(1.0);
   i8 = ~~Math_fround(Math_fround((i20 ? Math_fround(1.0) : f22) * Math_fround(255.0)) + Math_fround(.5)) << 24;
   __ZN10ImDrawList9AddCircleERK6ImVec2fjif(HEAP32[i15 >> 2] | 0, i7, f26, (i12 ? 0 : i5) | (i31 ? 0 : i19) | (i18 ? 0 : i32) | (i29 ? 0 : i8), 16, Math_fround(HEAPF32[i14 >> 2]));
  }
  if (HEAP8[i11 + 11092 >> 0] | 0) __ZL15LogRenderedTextPK6ImVec2PKcS3_(i6, i2 ? 37917 : 37921, 0);
  if (i30) {
   i30 = i6;
   i6 = HEAP32[i30 + 4 >> 2] | 0;
   i2 = i10;
   HEAP32[i2 >> 2] = HEAP32[i30 >> 2];
   HEAP32[i2 + 4 >> 2] = i6;
   HEAP32[i4 >> 2] = HEAP32[i10 >> 2];
   HEAP32[i4 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
   __ZN5ImGui10RenderTextE6ImVec2PKcS2_b(i4, i1, 0, 1);
  }
  i36 = i21;
 } else i36 = 0;
 i13 = i36;
 STACKTOP = i3;
 return i13 | 0;
}

function _inflate_fast(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, i90 = 0, i91 = 0, i92 = 0, i93 = 0, i94 = 0, i95 = 0, i96 = 0, i97 = 0, i98 = 0, i99 = 0, i100 = 0, i101 = 0, i102 = 0, i103 = 0, i104 = 0, i105 = 0, i106 = 0, i107 = 0, i108 = 0, i109 = 0, i110 = 0, i111 = 0, i112 = 0, i113 = 0, i114 = 0, i115 = 0, i116 = 0, i117 = 0;
 i3 = 0;
 i4 = HEAP32[i1 + 28 >> 2] | 0;
 i5 = (HEAP32[i1 >> 2] | 0) + -1 | 0;
 i6 = i1 + 4 | 0;
 i7 = i5 + ((HEAP32[i6 >> 2] | 0) + -5) | 0;
 i8 = i1 + 12 | 0;
 i9 = (HEAP32[i8 >> 2] | 0) + -1 | 0;
 i10 = i1 + 16 | 0;
 i11 = HEAP32[i10 >> 2] | 0;
 i12 = i9 + (i11 + -257) | 0;
 i13 = HEAP32[i4 + 40 >> 2] | 0;
 i14 = HEAP32[i4 + 44 >> 2] | 0;
 i15 = HEAP32[i4 + 48 >> 2] | 0;
 i16 = i4 + 56 | 0;
 i17 = i4 + 60 | 0;
 i18 = HEAP32[i4 + 76 >> 2] | 0;
 i19 = HEAP32[i4 + 80 >> 2] | 0;
 i20 = (1 << HEAP32[i4 + 84 >> 2]) + -1 | 0;
 i21 = (1 << HEAP32[i4 + 88 >> 2]) + -1 | 0;
 i22 = i9 + (i11 - i2) | 0;
 i2 = i4 + 7104 | 0;
 i11 = (HEAP32[i4 + 52 >> 2] | 0) + -1 | 0;
 i23 = (i15 | 0) == 0;
 i24 = i15 + i13 | 0;
 i25 = i22 - i15 | 0;
 i26 = i5;
 i5 = i9;
 i9 = HEAP32[i16 >> 2] | 0;
 i27 = HEAP32[i17 >> 2] | 0;
 L1 : while (1) {
  if (i27 >>> 0 < 15) {
   i28 = i26 + 2 | 0;
   i29 = i28;
   i30 = (HEAPU8[i26 + 1 >> 0] << i27) + i9 + (HEAPU8[i28 >> 0] << i27 + 8) | 0;
   i31 = i27 + 16 | 0;
  } else {
   i29 = i26;
   i30 = i9;
   i31 = i27;
  }
  i28 = i30 & i20;
  i32 = i18 + (i28 << 2) | 0;
  i28 = HEAP8[i32 >> 0] | 0;
  i33 = HEAP16[i32 + 2 >> 1] | 0;
  i34 = HEAPU8[i32 + 1 >> 0] | 0;
  i32 = i30 >>> i34;
  i35 = i31 - i34 | 0;
  do if (!(i28 << 24 >> 24)) {
   i36 = i35;
   i37 = i32;
   i38 = i33 & 255;
   i3 = 7;
  } else {
   i34 = i33;
   i39 = i28 & 255;
   i40 = i35;
   i41 = i32;
   while (1) {
    if (i39 & 16 | 0) break;
    if (i39 & 64 | 0) {
     i3 = 53;
     break L1;
    }
    i42 = (i41 & (1 << i39) + -1) + (i34 & 65535) | 0;
    i43 = i18 + (i42 << 2) | 0;
    i42 = HEAP8[i43 >> 0] | 0;
    i44 = HEAP16[i43 + 2 >> 1] | 0;
    i45 = HEAPU8[i43 + 1 >> 0] | 0;
    i46 = i41 >>> i45;
    i47 = i40 - i45 | 0;
    if (!(i42 << 24 >> 24)) {
     i3 = 6;
     break;
    } else {
     i34 = i44;
     i39 = i42 & 255;
     i40 = i47;
     i41 = i46;
    }
   }
   if ((i3 | 0) == 6) {
    i3 = 0;
    i36 = i47;
    i37 = i46;
    i38 = i44 & 255;
    i3 = 7;
    break;
   }
   i42 = i34 & 65535;
   i45 = i39 & 15;
   if (!i45) {
    i48 = i42;
    i49 = i29;
    i50 = i41;
    i51 = i40;
   } else {
    i43 = i29 + 1 | 0;
    if (i40 >>> 0 < i45 >>> 0) {
     i52 = i43;
     i53 = (HEAPU8[i43 >> 0] << i40) + i41 | 0;
     i54 = i40 + 8 | 0;
    } else {
     i52 = i29;
     i53 = i41;
     i54 = i40;
    }
    i48 = (i53 & (1 << i45) + -1) + i42 | 0;
    i49 = i52;
    i50 = i53 >>> i45;
    i51 = i54 - i45 | 0;
   }
   if (i51 >>> 0 < 15) {
    i45 = i49 + 2 | 0;
    i55 = i45;
    i56 = (HEAPU8[i49 + 1 >> 0] << i51) + i50 + (HEAPU8[i45 >> 0] << i51 + 8) | 0;
    i57 = i51 + 16 | 0;
   } else {
    i55 = i49;
    i56 = i50;
    i57 = i51;
   }
   i45 = i56 & i21;
   i42 = i19 + (i45 << 2) | 0;
   i45 = HEAP16[i42 + 2 >> 1] | 0;
   i43 = HEAPU8[i42 + 1 >> 0] | 0;
   i58 = i56 >>> i43;
   i59 = i57 - i43 | 0;
   i43 = HEAPU8[i42 >> 0] | 0;
   if (!(i43 & 16)) {
    i42 = i45;
    i60 = i43;
    i61 = i58;
    i62 = i59;
    while (1) {
     if (i60 & 64 | 0) {
      i63 = i55;
      i64 = i61;
      i65 = i62;
      i66 = 66961;
      i3 = 55;
      break L1;
     }
     i67 = (i61 & (1 << i60) + -1) + (i42 & 65535) | 0;
     i68 = i19 + (i67 << 2) | 0;
     i67 = HEAP16[i68 + 2 >> 1] | 0;
     i69 = HEAPU8[i68 + 1 >> 0] | 0;
     i70 = i61 >>> i69;
     i71 = i62 - i69 | 0;
     i69 = HEAPU8[i68 >> 0] | 0;
     if (!(i69 & 16)) {
      i42 = i67;
      i60 = i69;
      i61 = i70;
      i62 = i71;
     } else {
      i72 = i69;
      i73 = i71;
      i74 = i70;
      i75 = i67;
      break;
     }
    }
   } else {
    i72 = i43;
    i73 = i59;
    i74 = i58;
    i75 = i45;
   }
   i62 = i75 & 65535;
   i61 = i72 & 15;
   if (i73 >>> 0 < i61 >>> 0) {
    i60 = i55 + 1 | 0;
    i42 = (HEAPU8[i60 >> 0] << i73) + i74 | 0;
    i34 = i73 + 8 | 0;
    i67 = i55 + 2 | 0;
    if (i34 >>> 0 < i61 >>> 0) {
     i76 = i67;
     i77 = (HEAPU8[i67 >> 0] << i34) + i42 | 0;
     i78 = i73 + 16 | 0;
    } else {
     i76 = i60;
     i77 = i42;
     i78 = i34;
    }
   } else {
    i76 = i55;
    i77 = i74;
    i78 = i73;
   }
   i34 = (i77 & (1 << i61) + -1) + i62 | 0;
   i62 = i77 >>> i61;
   i42 = i78 - i61 | 0;
   i61 = i5;
   i60 = i61 - i22 | 0;
   if (i34 >>> 0 <= i60 >>> 0) {
    i67 = i48;
    i70 = i5 + (0 - i34) | 0;
    i71 = i5;
    while (1) {
     HEAP8[i71 + 1 >> 0] = HEAP8[i70 + 1 >> 0] | 0;
     HEAP8[i71 + 2 >> 0] = HEAP8[i70 + 2 >> 0] | 0;
     i69 = i70 + 3 | 0;
     i79 = i71 + 3 | 0;
     HEAP8[i79 >> 0] = HEAP8[i69 >> 0] | 0;
     i67 = i67 + -3 | 0;
     if (i67 >>> 0 <= 2) break; else {
      i70 = i69;
      i71 = i79;
     }
    }
    if (!i67) {
     i80 = i76;
     i81 = i79;
     i82 = i62;
     i83 = i42;
     break;
    }
    i45 = i71 + 4 | 0;
    HEAP8[i45 >> 0] = HEAP8[i70 + 4 >> 0] | 0;
    if ((i67 | 0) == 1) {
     i80 = i76;
     i81 = i45;
     i82 = i62;
     i83 = i42;
     break;
    }
    i45 = i71 + 5 | 0;
    HEAP8[i45 >> 0] = HEAP8[i70 + 5 >> 0] | 0;
    i80 = i76;
    i81 = i45;
    i82 = i62;
    i83 = i42;
    break;
   }
   i45 = i34 - i60 | 0;
   if (i45 >>> 0 > i14 >>> 0) if (HEAP32[i2 >> 2] | 0) {
    i63 = i76;
    i64 = i62;
    i65 = i42;
    i66 = 66983;
    i3 = 55;
    break L1;
   }
   do if (i23) {
    i58 = i11 + (i13 - i45) | 0;
    if (i48 >>> 0 > i45 >>> 0) {
     i59 = i48 - i45 | 0;
     i43 = i34 - i61 | 0;
     i69 = i58;
     i68 = i45;
     i84 = i5;
     do {
      i69 = i69 + 1 | 0;
      i84 = i84 + 1 | 0;
      HEAP8[i84 >> 0] = HEAP8[i69 >> 0] | 0;
      i68 = i68 + -1 | 0;
     } while ((i68 | 0) != 0);
     i68 = i5 + i22 + i43 | 0;
     i85 = i59;
     i86 = i68 + (0 - i34) | 0;
     i87 = i68;
    } else {
     i85 = i48;
     i86 = i58;
     i87 = i5;
    }
   } else {
    if (i15 >>> 0 >= i45 >>> 0) {
     i68 = i11 + (i15 - i45) | 0;
     if (i48 >>> 0 <= i45 >>> 0) {
      i85 = i48;
      i86 = i68;
      i87 = i5;
      break;
     }
     i69 = i48 - i45 | 0;
     i84 = i34 - i61 | 0;
     i88 = i68;
     i68 = i45;
     i89 = i5;
     do {
      i88 = i88 + 1 | 0;
      i89 = i89 + 1 | 0;
      HEAP8[i89 >> 0] = HEAP8[i88 >> 0] | 0;
      i68 = i68 + -1 | 0;
     } while ((i68 | 0) != 0);
     i68 = i5 + i22 + i84 | 0;
     i85 = i69;
     i86 = i68 + (0 - i34) | 0;
     i87 = i68;
     break;
    }
    i68 = i11 + (i24 - i45) | 0;
    i88 = i45 - i15 | 0;
    if (i48 >>> 0 > i88 >>> 0) {
     i89 = i48 - i88 | 0;
     i58 = i34 - i61 | 0;
     i59 = i68;
     i43 = i88;
     i88 = i5;
     do {
      i59 = i59 + 1 | 0;
      i88 = i88 + 1 | 0;
      HEAP8[i88 >> 0] = HEAP8[i59 >> 0] | 0;
      i43 = i43 + -1 | 0;
     } while ((i43 | 0) != 0);
     i43 = i5 + i25 + i58 | 0;
     if (i89 >>> 0 > i15 >>> 0) {
      i59 = i5 + i22 | 0;
      i88 = i11;
      i69 = i15;
      i84 = i43;
      do {
       i88 = i88 + 1 | 0;
       i84 = i84 + 1 | 0;
       HEAP8[i84 >> 0] = HEAP8[i88 >> 0] | 0;
       i69 = i69 + -1 | 0;
      } while ((i69 | 0) != 0);
      i69 = i59 + i58 | 0;
      i85 = i89 - i15 | 0;
      i86 = i69 + (0 - i34) | 0;
      i87 = i69;
     } else {
      i85 = i89;
      i86 = i11;
      i87 = i43;
     }
    } else {
     i85 = i48;
     i86 = i68;
     i87 = i5;
    }
   } while (0);
   if (i85 >>> 0 > 2) {
    i34 = i85;
    i61 = i86;
    i45 = i87;
    while (1) {
     HEAP8[i45 + 1 >> 0] = HEAP8[i61 + 1 >> 0] | 0;
     HEAP8[i45 + 2 >> 0] = HEAP8[i61 + 2 >> 0] | 0;
     i60 = i61 + 3 | 0;
     i70 = i45 + 3 | 0;
     HEAP8[i70 >> 0] = HEAP8[i60 >> 0] | 0;
     i71 = i34 + -3 | 0;
     if (i71 >>> 0 > 2) {
      i34 = i71;
      i61 = i60;
      i45 = i70;
     } else {
      i90 = i71;
      i91 = i60;
      i92 = i70;
      break;
     }
    }
   } else {
    i90 = i85;
    i91 = i86;
    i92 = i87;
   }
   if (!i90) {
    i80 = i76;
    i81 = i92;
    i82 = i62;
    i83 = i42;
   } else {
    i45 = i92 + 1 | 0;
    HEAP8[i45 >> 0] = HEAP8[i91 + 1 >> 0] | 0;
    if ((i90 | 0) == 1) {
     i80 = i76;
     i81 = i45;
     i82 = i62;
     i83 = i42;
    } else {
     i45 = i92 + 2 | 0;
     HEAP8[i45 >> 0] = HEAP8[i91 + 2 >> 0] | 0;
     i80 = i76;
     i81 = i45;
     i82 = i62;
     i83 = i42;
    }
   }
  } while (0);
  if ((i3 | 0) == 7) {
   i3 = 0;
   i32 = i5 + 1 | 0;
   HEAP8[i32 >> 0] = i38;
   i80 = i29;
   i81 = i32;
   i82 = i37;
   i83 = i36;
  }
  if (i81 >>> 0 < i12 >>> 0 & i80 >>> 0 < i7 >>> 0) {
   i26 = i80;
   i5 = i81;
   i9 = i82;
   i27 = i83;
  } else {
   i93 = i82;
   i94 = i83;
   i95 = i80;
   i96 = i81;
   i3 = 57;
   break;
  }
 }
 if ((i3 | 0) == 53) if (!(i39 & 32)) {
  i63 = i29;
  i64 = i41;
  i65 = i40;
  i66 = 66933;
  i3 = 55;
 } else {
  i97 = i29;
  i98 = i41;
  i99 = i40;
  i100 = 11;
 } else if ((i3 | 0) == 57) {
  i101 = i94 >>> 3;
  i102 = 0 - i101 | 0;
  i103 = i95 + i102 | 0;
  i104 = i94 & 7;
  i105 = 1 << i104;
  i106 = i105 + -1 | 0;
  i107 = i106 & i93;
  i108 = i103 + 1 | 0;
  HEAP32[i1 >> 2] = i108;
  i109 = i96 + 1 | 0;
  HEAP32[i8 >> 2] = i109;
  i110 = i103;
  i111 = i7;
  i112 = i111 + 5 | 0;
  i113 = i112 - i110 | 0;
  HEAP32[i6 >> 2] = i113;
  i114 = i96;
  i115 = i12;
  i116 = i115 + 257 | 0;
  i117 = i116 - i114 | 0;
  HEAP32[i10 >> 2] = i117;
  HEAP32[i16 >> 2] = i107;
  HEAP32[i17 >> 2] = i104;
  return;
 }
 if ((i3 | 0) == 55) {
  HEAP32[i1 + 24 >> 2] = i66;
  i97 = i63;
  i98 = i64;
  i99 = i65;
  i100 = 29;
 }
 HEAP32[i4 >> 2] = i100;
 i93 = i98;
 i94 = i99;
 i95 = i97;
 i96 = i5;
 i101 = i94 >>> 3;
 i102 = 0 - i101 | 0;
 i103 = i95 + i102 | 0;
 i104 = i94 & 7;
 i105 = 1 << i104;
 i106 = i105 + -1 | 0;
 i107 = i106 & i93;
 i108 = i103 + 1 | 0;
 HEAP32[i1 >> 2] = i108;
 i109 = i96 + 1 | 0;
 HEAP32[i8 >> 2] = i109;
 i110 = i103;
 i111 = i7;
 i112 = i111 + 5 | 0;
 i113 = i112 - i110 | 0;
 HEAP32[i6 >> 2] = i113;
 i114 = i96;
 i115 = i12;
 i116 = i115 + 257 | 0;
 i117 = i116 - i114 | 0;
 HEAP32[i10 >> 2] = i117;
 HEAP32[i16 >> 2] = i107;
 HEAP32[i17 >> 2] = i104;
 return;
}

function __ZN5ImGui10EndColumnsEv() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, f18 = f0, f19 = f0, f20 = f0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, f25 = f0, i26 = 0, f27 = f0, f28 = f0, f29 = f0, i30 = 0, f31 = f0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, f44 = f0, i45 = 0, i46 = 0, f47 = f0, f48 = f0, f49 = f0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, f56 = f0, f57 = f0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, f63 = f0;
 i1 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i3 = i2 + 16 | 0;
 i4 = i2 + 33 | 0;
 i5 = i2 + 32 | 0;
 i6 = i2 + 8 | 0;
 i7 = i2;
 i8 = HEAP32[1460598] | 0;
 i9 = HEAP32[i8 + 6392 >> 2] | 0;
 i10 = i9 + 120 | 0;
 HEAP8[i10 >> 0] = 1;
 i11 = i9 + 448 | 0;
 i12 = HEAP32[i11 >> 2] | 0;
 if (!i12) ___assert_fail(33325, 31803, 13214, 33339);
 HEAP8[i10 >> 0] = 1;
 i13 = i9 + 376 | 0;
 i14 = HEAP32[i13 >> 2] | 0;
 if ((i14 | 0) <= 0) ___assert_fail(38278, 56850, 1268, 31920);
 i15 = i14 + -1 | 0;
 HEAP32[i13 >> 2] = i15;
 if (!i15) i16 = i9 + 548 | 0; else i16 = (HEAP32[i9 + 384 >> 2] | 0) + (i14 + -2 << 2) | 0;
 HEAP32[i9 + 356 >> 2] = HEAP32[i16 >> 2];
 HEAP8[i10 >> 0] = 1;
 i10 = i9 + 632 | 0;
 __ZN10ImDrawList11PopClipRectEv(HEAP32[i10 >> 2] | 0);
 i16 = HEAP32[i10 >> 2] | 0;
 i14 = HEAP32[i16 + 60 >> 2] | 0;
 if ((i14 | 0) <= 0) ___assert_fail(38278, 56850, 1245, 38287);
 i15 = HEAP32[i16 + 68 >> 2] | 0;
 i13 = i14 + -1 | 0;
 i14 = i15 + (i13 << 4) | 0;
 i13 = HEAP32[i14 + 4 >> 2] | 0;
 i15 = HEAP32[i14 + 8 >> 2] | 0;
 i17 = HEAP32[i14 + 12 >> 2] | 0;
 HEAP32[i9 + 464 >> 2] = HEAP32[i14 >> 2];
 i14 = i9 + 468 | 0;
 HEAP32[i14 >> 2] = i13;
 HEAP32[i9 + 472 >> 2] = i15;
 i15 = i9 + 476 | 0;
 HEAP32[i15 >> 2] = i17;
 __ZN10ImDrawList13ChannelsMergeEv(i16);
 i16 = i12 + 32 | 0;
 f18 = Math_fround(HEAPF32[i16 >> 2]);
 i17 = i9 + 200 | 0;
 f19 = Math_fround(HEAPF32[i17 >> 2]);
 f20 = f18 >= f19 ? f18 : f19;
 HEAPF32[i16 >> 2] = f20;
 HEAPF32[i17 >> 2] = f20;
 i17 = i12 + 4 | 0;
 i16 = HEAP32[i17 >> 2] | 0;
 if (!(i16 & 16)) HEAP32[i9 + 220 >> 2] = HEAP32[i12 + 40 >> 2];
 if (i16 & 1 | 0) {
  i21 = 0;
  i22 = i12 + 9 | 0;
  HEAP8[i22 >> 0] = i21;
  HEAP32[i11 >> 2] = 0;
  i23 = i9 + 444 | 0;
  HEAPF32[i23 >> 2] = Math_fround(0.0);
  i24 = i9 + 12 | 0;
  f25 = Math_fround(HEAPF32[i24 >> 2]);
  i26 = i9 + 436 | 0;
  f27 = Math_fround(HEAPF32[i26 >> 2]);
  f28 = Math_fround(f25 + f27);
  f29 = Math_fround(f28 + Math_fround(0.0));
  i30 = ~~f29;
  f31 = Math_fround(i30 | 0);
  i32 = i9 + 196 | 0;
  HEAPF32[i32 >> 2] = f31;
  STACKTOP = i2;
  return;
 }
 if (HEAP8[i9 + 123 >> 0] | 0) {
  i21 = 0;
  i22 = i12 + 9 | 0;
  HEAP8[i22 >> 0] = i21;
  HEAP32[i11 >> 2] = 0;
  i23 = i9 + 444 | 0;
  HEAPF32[i23 >> 2] = Math_fround(0.0);
  i24 = i9 + 12 | 0;
  f25 = Math_fround(HEAPF32[i24 >> 2]);
  i26 = i9 + 436 | 0;
  f27 = Math_fround(HEAPF32[i26 >> 2]);
  f28 = Math_fround(f25 + f27);
  f29 = Math_fround(f28 + Math_fround(0.0));
  i30 = ~~f29;
  f31 = Math_fround(i30 | 0);
  i32 = i9 + 196 | 0;
  HEAPF32[i32 >> 2] = f31;
  STACKTOP = i2;
  return;
 }
 f19 = Math_fround(HEAPF32[i12 + 36 >> 2]);
 i16 = i12 + 16 | 0;
 i13 = HEAP32[i16 >> 2] | 0;
 if ((i13 | 0) <= 1) {
  i21 = 0;
  i22 = i12 + 9 | 0;
  HEAP8[i22 >> 0] = i21;
  HEAP32[i11 >> 2] = 0;
  i23 = i9 + 444 | 0;
  HEAPF32[i23 >> 2] = Math_fround(0.0);
  i24 = i9 + 12 | 0;
  f25 = Math_fround(HEAPF32[i24 >> 2]);
  i26 = i9 + 436 | 0;
  f27 = Math_fround(HEAPF32[i26 >> 2]);
  f28 = Math_fround(f25 + f27);
  f29 = Math_fround(f28 + Math_fround(0.0));
  i30 = ~~f29;
  f31 = Math_fround(i30 | 0);
  i32 = i9 + 196 | 0;
  HEAPF32[i32 >> 2] = f31;
  STACKTOP = i2;
  return;
 }
 i33 = i9 + 12 | 0;
 i34 = i3 + 4 | 0;
 i35 = i3 + 8 | 0;
 i36 = i3 + 12 | 0;
 i37 = i8 + 7068 | 0;
 i8 = i12 + 44 | 0;
 i38 = i12 + 52 | 0;
 f18 = Math_fround(f19 + Math_fround(1.0));
 i39 = i6 + 4 | 0;
 i40 = i7 + 4 | 0;
 i41 = -1;
 i42 = 1;
 i43 = i13;
 while (1) {
  f44 = Math_fround(HEAPF32[i33 >> 2]);
  i13 = HEAP32[1460598] | 0;
  i45 = HEAP32[i13 + 6392 >> 2] | 0;
  i46 = HEAP32[i45 + 448 >> 2] | 0;
  if (!i46) {
   i1 = 18;
   break;
  }
  if ((i42 | 0) >= (HEAP32[i46 + 44 >> 2] | 0)) {
   i1 = 20;
   break;
  }
  f47 = Math_fround(HEAPF32[(HEAP32[i46 + 52 >> 2] | 0) + (i42 * 28 | 0) >> 2]);
  f48 = Math_fround(HEAPF32[i46 + 20 >> 2]);
  f49 = Math_fround(f44 + Math_fround(f48 + Math_fround(f47 * Math_fround(Math_fround(HEAPF32[i46 + 24 >> 2]) - f48))));
  i46 = (HEAP32[i12 >> 2] | 0) + i42 | 0;
  f48 = Math_fround(f49 + Math_fround(-4.0));
  f47 = Math_fround(f49 + Math_fround(4.0));
  HEAPF32[i3 >> 2] = f48;
  HEAPF32[i34 >> 2] = f19;
  HEAPF32[i35 >> 2] = f47;
  HEAPF32[i36 >> 2] = f20;
  i50 = (HEAP32[i13 + 6420 >> 2] | 0) == (i46 | 0);
  if (i50) HEAP8[i13 + 6432 >> 0] = 1;
  if ((HEAP32[i13 + 6424 >> 2] | 0) == (i46 | 0)) HEAP8[i13 + 6436 >> 0] = 1;
  if (Math_fround(HEAPF32[i45 + 468 >> 2]) < f20) if (Math_fround(HEAPF32[i45 + 476 >> 2]) > f19) if (Math_fround(HEAPF32[i45 + 464 >> 2]) < f47) if (Math_fround(HEAPF32[i45 + 472 >> 2]) > f48) i1 = 31; else i1 = 29; else i1 = 29; else i1 = 29; else i1 = 29;
  if ((i1 | 0) == 29) {
   i1 = 0;
   if ((i46 | 0) == 0 | i50 ^ 1) if (!(HEAP8[i13 + 11092 >> 0] | 0)) {
    i51 = i41;
    i52 = i43;
   } else i1 = 31; else i1 = 31;
  }
  if ((i1 | 0) == 31) {
   i1 = 0;
   HEAP8[i4 >> 0] = 0;
   HEAP8[i5 >> 0] = 0;
   if (!(HEAP32[i17 >> 2] & 2)) {
    __ZN5ImGui14ButtonBehaviorERK6ImRectjPbS3_i(i3, i46, i4, i5, 0) | 0;
    i46 = HEAP8[i4 >> 0] | 0;
    i13 = HEAP8[i5 >> 0] | 0;
    if (!((i13 | i46) << 24 >> 24)) {
     i53 = i46;
     i1 = 37;
    } else {
     HEAP32[i37 >> 2] = 4;
     if (!(i13 << 24 >> 24)) {
      i53 = i46;
      i1 = 37;
     } else {
      if ((HEAP32[i8 >> 2] | 0) <= (i42 | 0)) {
       i1 = 35;
       break;
      }
      i54 = (HEAP32[(HEAP32[i38 >> 2] | 0) + (i42 * 28 | 0) + 8 >> 2] & 2 | 0) == 0 ? i42 : i41;
      i55 = 29;
     }
    }
   } else {
    i53 = 0;
    i1 = 37;
   }
   if ((i1 | 0) == 37) {
    i1 = 0;
    i54 = i41;
    i55 = i53 << 24 >> 24 ? 28 : 27;
   }
   i46 = HEAP32[1460598] | 0;
   i13 = i46 + 5508 + (i55 << 4) | 0;
   f48 = Math_fround(HEAPF32[i13 >> 2]);
   f47 = Math_fround(HEAPF32[i13 + 4 >> 2]);
   f44 = Math_fround(HEAPF32[i13 + 8 >> 2]);
   f56 = Math_fround(HEAPF32[i13 + 12 >> 2]);
   f57 = Math_fround(f56 * Math_fround(HEAPF32[i46 + 5356 >> 2]));
   i46 = f48 < Math_fround(0.0);
   i13 = f48 > Math_fround(1.0);
   i50 = ~~Math_fround(Math_fround((i13 ? Math_fround(1.0) : f48) * Math_fround(255.0)) + Math_fround(.5));
   i13 = f47 < Math_fround(0.0);
   i45 = f47 > Math_fround(1.0);
   i58 = ~~Math_fround(Math_fround((i45 ? Math_fround(1.0) : f47) * Math_fround(255.0)) + Math_fround(.5)) << 8;
   i45 = f44 < Math_fround(0.0);
   i59 = f44 > Math_fround(1.0);
   i60 = ~~Math_fround(Math_fround((i59 ? Math_fround(1.0) : f44) * Math_fround(255.0)) + Math_fround(.5)) << 16;
   i59 = f57 < Math_fround(0.0);
   i61 = f57 > Math_fround(1.0);
   i62 = ~~Math_fround(Math_fround((i61 ? Math_fround(1.0) : f57) * Math_fround(255.0)) + Math_fround(.5)) << 24;
   f57 = Math_fround(~~f49 | 0);
   i61 = HEAP32[i10 >> 2] | 0;
   f49 = Math_fround(HEAPF32[i14 >> 2]);
   HEAPF32[i6 >> 2] = f57;
   HEAPF32[i39 >> 2] = f18 >= f49 ? f18 : f49;
   f49 = Math_fround(HEAPF32[i15 >> 2]);
   HEAPF32[i7 >> 2] = f57;
   HEAPF32[i40 >> 2] = f20 < f49 ? f20 : f49;
   __ZN10ImDrawList7AddLineERK6ImVec2S2_jf(i61, i6, i7, (i13 ? 0 : i58) | (i46 ? 0 : i50) | (i45 ? 0 : i60) | (i59 ? 0 : i62), Math_fround(1.0));
   i51 = i54;
   i52 = HEAP32[i16 >> 2] | 0;
  }
  i42 = i42 + 1 | 0;
  if ((i42 | 0) >= (i52 | 0)) {
   i1 = 16;
   break;
  } else {
   i41 = i51;
   i43 = i52;
  }
 }
 if ((i1 | 0) == 16) {
  if ((i51 | 0) == -1) {
   i21 = 0;
   i22 = i12 + 9 | 0;
   HEAP8[i22 >> 0] = i21;
   HEAP32[i11 >> 2] = 0;
   i23 = i9 + 444 | 0;
   HEAPF32[i23 >> 2] = Math_fround(0.0);
   i24 = i9 + 12 | 0;
   f25 = Math_fround(HEAPF32[i24 >> 2]);
   i26 = i9 + 436 | 0;
   f27 = Math_fround(HEAPF32[i26 >> 2]);
   f28 = Math_fround(f25 + f27);
   f29 = Math_fround(f28 + Math_fround(0.0));
   i30 = ~~f29;
   f31 = Math_fround(i30 | 0);
   i32 = i9 + 196 | 0;
   HEAPF32[i32 >> 2] = f31;
   STACKTOP = i2;
   return;
  }
  i43 = i12 + 9 | 0;
  L60 : do if (!((HEAP8[i43 >> 0] | 0) != 0 | (i52 | 0) < 0)) {
   i41 = HEAP32[i12 + 44 >> 2] | 0;
   i42 = i12 + 52 | 0;
   i16 = 0;
   while (1) {
    if ((i41 | 0) <= (i16 | 0)) break;
    i54 = HEAP32[i42 >> 2] | 0;
    i7 = i54 + (i16 * 28 | 0) | 0;
    HEAP32[i7 + 4 >> 2] = HEAP32[i7 >> 2];
    if ((i16 | 0) < (i52 | 0)) i16 = i16 + 1 | 0; else break L60;
   }
   ___assert_fail(56841, 56850, 1235, 56909);
  } while (0);
  HEAP8[i43 >> 0] = 1;
  i43 = HEAP32[1460598] | 0;
  i52 = HEAP32[i43 + 6392 >> 2] | 0;
  if ((i51 | 0) <= 0) ___assert_fail(33350, 31803, 13040, 33367);
  if ((HEAP32[i43 + 6420 >> 2] | 0) != ((HEAP32[i12 >> 2] | 0) + i51 | 0)) ___assert_fail(33390, 31803, 13041, 33367);
  f20 = Math_fround(HEAPF32[i43 + 212 >> 2]);
  f18 = Math_fround(Math_fround(f20 - Math_fround(HEAPF32[i43 + 6444 >> 2])) + Math_fround(4.0));
  f20 = Math_fround(f18 - Math_fround(HEAPF32[i52 + 12 >> 2]));
  i16 = HEAP32[i52 + 448 >> 2] | 0;
  if (!i16) ___assert_fail(33325, 31803, 13055, 32169);
  i52 = HEAP32[i16 + 44 >> 2] | 0;
  if ((i52 | 0) < (i51 | 0)) ___assert_fail(32132, 31803, 13059, 32169);
  i42 = HEAP32[i16 + 52 >> 2] | 0;
  f18 = Math_fround(HEAPF32[i42 + ((i51 + -1 | 0) * 28 | 0) >> 2]);
  f19 = Math_fround(HEAPF32[i16 + 20 >> 2]);
  f49 = Math_fround(Math_fround(HEAPF32[i16 + 24 >> 2]) - f19);
  f57 = Math_fround(f19 + Math_fround(f18 * f49));
  f18 = Math_fround(HEAPF32[i43 + 5452 >> 2]);
  f44 = Math_fround(f18 + f57);
  f57 = f20 >= f44 ? f20 : f44;
  do if (!(HEAP32[i17 >> 2] & 4)) f63 = f57; else {
   i43 = i51 + 1 | 0;
   if ((i43 | 0) < (i52 | 0)) {
    f44 = Math_fround(Math_fround(f19 + Math_fround(f49 * Math_fround(HEAPF32[i42 + (i43 * 28 | 0) >> 2]))) - f18);
    f63 = f57 < f44 ? f57 : f44;
    break;
   } else ___assert_fail(32132, 31803, 13059, 32169);
  } while (0);
  __ZN5ImGui15SetColumnOffsetEif(i51, f63);
  i21 = 1;
  i22 = i12 + 9 | 0;
  HEAP8[i22 >> 0] = i21;
  HEAP32[i11 >> 2] = 0;
  i23 = i9 + 444 | 0;
  HEAPF32[i23 >> 2] = Math_fround(0.0);
  i24 = i9 + 12 | 0;
  f25 = Math_fround(HEAPF32[i24 >> 2]);
  i26 = i9 + 436 | 0;
  f27 = Math_fround(HEAPF32[i26 >> 2]);
  f28 = Math_fround(f25 + f27);
  f29 = Math_fround(f28 + Math_fround(0.0));
  i30 = ~~f29;
  f31 = Math_fround(i30 | 0);
  i32 = i9 + 196 | 0;
  HEAPF32[i32 >> 2] = f31;
  STACKTOP = i2;
  return;
 } else if ((i1 | 0) == 18) ___assert_fail(33325, 31803, 13055, 32169); else if ((i1 | 0) == 20) ___assert_fail(32132, 31803, 13059, 32169); else if ((i1 | 0) == 35) ___assert_fail(56841, 56850, 1235, 56909);
}

function __ZN5ImGui9ScrollbarEi(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, f12 = f0, f13 = f0, f14 = f0, f15 = f0, f16 = f0, f17 = f0, f18 = f0, f19 = f0, f20 = f0, i21 = 0, i22 = 0, i23 = 0, f24 = f0, f25 = f0, f26 = f0, f27 = f0, i28 = 0, i29 = 0, f30 = f0, f31 = f0, f32 = f0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, f42 = f0, i43 = 0, f44 = f0, f45 = f0, f46 = f0, i47 = 0, f48 = f0, f49 = f0, f50 = f0, f51 = f0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i3 = i2 + 16 | 0;
 i4 = i2 + 33 | 0;
 i5 = i2 + 32 | 0;
 i6 = i2;
 i7 = HEAP32[1460598] | 0;
 i8 = HEAP32[i7 + 6392 >> 2] | 0;
 i9 = (i1 | 0) == 1;
 i1 = HEAP32[i8 + 452 >> 2] | 0;
 if ((i1 | 0) <= 0) ___assert_fail(38278, 56850, 1245, 38287);
 i10 = __Z6ImHashPKvij(i9 ? 34095 : 32293, 0, HEAP32[(HEAP32[i8 + 460 >> 2] | 0) + (i1 + -1 << 2) >> 2] | 0) | 0;
 i1 = HEAP32[1460598] | 0;
 if ((HEAP32[i1 + 6420 >> 2] | 0) == (i10 | 0)) HEAP8[i1 + 6432 >> 0] = 1;
 if ((HEAP32[i1 + 6424 >> 2] | 0) == (i10 | 0)) HEAP8[i1 + 6436 >> 0] = 1;
 i11 = (HEAP8[(i9 ? i8 + 117 | 0 : i8 + 116 | 0) >> 0] | 0) != 0;
 if (i11) f12 = Math_fround(HEAPF32[i7 + 5456 >> 2]); else f12 = Math_fround(0.0);
 f13 = Math_fround(HEAPF32[i8 + 12 >> 2]);
 f14 = Math_fround(HEAPF32[i8 + 16 >> 2]);
 f15 = Math_fround(f13 + Math_fround(HEAPF32[i8 + 20 >> 2]));
 f16 = Math_fround(f14 + Math_fround(HEAPF32[i8 + 24 >> 2]));
 f17 = Math_fround(HEAPF32[i8 + 72 >> 2]);
 if (i9) {
  f18 = Math_fround(f17 + f13);
  f13 = Math_fround(f16 - Math_fround(HEAPF32[i7 + 5456 >> 2]));
  f19 = Math_fround(Math_fround(f15 - f12) - f17);
  f20 = Math_fround(f16 - f17);
  HEAPF32[i3 >> 2] = f18;
  HEAPF32[i3 + 4 >> 2] = f13;
  i21 = i3 + 8 | 0;
  HEAPF32[i21 >> 2] = f19;
  HEAPF32[i3 + 12 >> 2] = f20;
  i22 = i3;
  i23 = i21;
  f24 = f13;
  f25 = f20;
  f26 = f18;
  f27 = f19;
 } else {
  f19 = Math_fround(f15 - Math_fround(HEAPF32[i7 + 5456 >> 2]));
  f18 = Math_fround(f17 + f14);
  f14 = Math_fround(f15 - f17);
  f20 = Math_fround(Math_fround(f16 - f12) - f17);
  HEAPF32[i3 >> 2] = f19;
  i21 = i3 + 4 | 0;
  HEAPF32[i21 >> 2] = f18;
  i28 = i3 + 8 | 0;
  HEAPF32[i28 >> 2] = f14;
  HEAPF32[i3 + 12 >> 2] = f20;
  i29 = HEAP32[i8 + 8 >> 2] | 0;
  if (!(i29 & 1)) {
   f17 = Math_fround(HEAPF32[i1 + 6188 >> 2]);
   f13 = Math_fround(f17 * Math_fround(HEAPF32[i8 + 624 >> 2]));
   f30 = Math_fround(f13 + Math_fround(Math_fround(HEAPF32[i1 + 5412 >> 2]) * Math_fround(2.0)));
  } else f30 = Math_fround(0.0);
  if (!(i29 & 1024)) f31 = Math_fround(0.0); else {
   f13 = Math_fround(HEAPF32[i8 + 324 >> 2]);
   f17 = Math_fround(HEAPF32[i1 + 6188 >> 2]);
   f32 = Math_fround(f13 + Math_fround(f17 * Math_fround(HEAPF32[i8 + 624 >> 2])));
   f31 = Math_fround(f32 + Math_fround(Math_fround(HEAPF32[i1 + 5412 >> 2]) * Math_fround(2.0)));
  }
  f32 = Math_fround(f18 + Math_fround(f30 + f31));
  HEAPF32[i21 >> 2] = f32;
  i22 = i3;
  i23 = i28;
  f24 = f32;
  f25 = f20;
  f26 = f19;
  f27 = f14;
 }
 if (Math_fround(f27 - f26) <= Math_fround(0.0)) {
  STACKTOP = i2;
  return;
 }
 i28 = i3 + 12 | 0;
 i21 = i3 + 4 | 0;
 if (Math_fround(f25 - f24) <= Math_fround(0.0)) {
  STACKTOP = i2;
  return;
 }
 if (i9) i33 = i11 ? 4 : 12; else {
  i29 = HEAP32[i8 + 8 >> 2] | 0;
  i33 = ((i29 & 1 | 0) == 0 ? 0 : i29 >>> 9 & 2 ^ 2) | (i11 ? 0 : 8);
 }
 i11 = i8 + 632 | 0;
 i29 = i3 + 8 | 0;
 f24 = Math_fround(HEAPF32[i1 + 5732 >> 2]);
 f25 = Math_fround(HEAPF32[i1 + 5736 >> 2]);
 f26 = Math_fround(HEAPF32[i1 + 5740 >> 2]);
 f27 = Math_fround(HEAPF32[i1 + 5744 >> 2]);
 f14 = Math_fround(f27 * Math_fround(HEAPF32[i1 + 5356 >> 2]));
 i1 = f24 < Math_fround(0.0);
 i34 = f24 > Math_fround(1.0);
 i35 = ~~Math_fround(Math_fround((i34 ? Math_fround(1.0) : f24) * Math_fround(255.0)) + Math_fround(.5));
 i34 = f25 < Math_fround(0.0);
 i36 = f25 > Math_fround(1.0);
 i37 = ~~Math_fround(Math_fround((i36 ? Math_fround(1.0) : f25) * Math_fround(255.0)) + Math_fround(.5)) << 8;
 i36 = f26 < Math_fround(0.0);
 i38 = f26 > Math_fround(1.0);
 i39 = ~~Math_fround(Math_fround((i38 ? Math_fround(1.0) : f26) * Math_fround(255.0)) + Math_fround(.5)) << 16;
 i38 = f14 < Math_fround(0.0);
 i40 = f14 > Math_fround(1.0);
 i41 = ~~Math_fround(Math_fround((i40 ? Math_fround(1.0) : f14) * Math_fround(255.0)) + Math_fround(.5)) << 24;
 __ZN10ImDrawList13AddRectFilledERK6ImVec2S2_jfi(HEAP32[i11 >> 2] | 0, i3, i29, (i34 ? 0 : i37) | (i1 ? 0 : i35) | (i36 ? 0 : i39) | (i38 ? 0 : i41), Math_fround(HEAPF32[i8 + 68 >> 2]), i33);
 f14 = Math_fround(HEAPF32[i29 >> 2]);
 f26 = Math_fround(HEAPF32[i22 >> 2]);
 i33 = ~~Math_fround(Math_fround(Math_fround(f14 - f26) + Math_fround(-2.0)) * Math_fround(.5));
 f25 = Math_fround(i33 | 0);
 i41 = f25 > Math_fround(3.0);
 f24 = Math_fround(-(i41 ? Math_fround(3.0) : f25));
 f25 = (i33 | 0) < 0 ? Math_fround(-0.0) : f24;
 f24 = Math_fround(HEAPF32[i28 >> 2]);
 f27 = Math_fround(HEAPF32[i21 >> 2]);
 i33 = ~~Math_fround(Math_fround(Math_fround(f24 - f27) + Math_fround(-2.0)) * Math_fround(.5));
 f19 = Math_fround(i33 | 0);
 i41 = f19 > Math_fround(3.0);
 f20 = Math_fround(-(i41 ? Math_fround(3.0) : f19));
 f19 = (i33 | 0) < 0 ? Math_fround(-0.0) : f20;
 f20 = Math_fround(f26 - f25);
 HEAPF32[i22 >> 2] = f20;
 f26 = Math_fround(f27 - f19);
 HEAPF32[i21 >> 2] = f26;
 f27 = Math_fround(f14 + f25);
 HEAPF32[i23 >> 2] = f27;
 f25 = Math_fround(f24 + f19);
 HEAPF32[i28 >> 2] = f25;
 f19 = Math_fround((i9 ? f27 : f25) - (i9 ? f20 : f26));
 i23 = i9 ? i8 + 84 | 0 : i8 + 88 | 0;
 f26 = Math_fround(Math_fround(HEAPF32[(i9 ? i8 + 28 | 0 : i8 + 32 | 0) >> 2]) - f12);
 f12 = Math_fround(HEAPF32[(i9 ? i8 + 44 | 0 : i8 + 48 | 0) >> 2]);
 f20 = f12 >= f26 ? f12 : f26;
 if (!(f20 > Math_fround(0.0))) ___assert_fail(34104, 31803, 6674, 34156);
 f25 = Math_fround(HEAPF32[i23 >> 2]);
 i8 = f20 >= Math_fround(1.0);
 f27 = Math_fround(f19 * Math_fround(f26 / (i8 ? f20 : Math_fround(1.0))));
 f20 = Math_fround(HEAPF32[i7 + 5464 >> 2]);
 f24 = f27 < f20 ? f20 : f27 > f19 ? f19 : f27;
 f27 = Math_fround(f24 / f19);
 HEAP8[i4 >> 0] = 0;
 HEAP8[i5 >> 0] = 0;
 i8 = HEAP32[i7 + 6420 >> 2] | 0;
 __ZN5ImGui14ButtonBehaviorERK6ImRectjPbS3_i(i3, i10, i5, i4, 8192) | 0;
 f20 = Math_fround(f12 - f26);
 i3 = f20 <= Math_fround(1.0);
 f26 = i3 ? Math_fround(1.0) : f20;
 f20 = Math_fround(f25 / f26);
 i3 = f20 < Math_fround(0.0);
 i33 = f20 > Math_fround(1.0);
 f25 = i33 ? Math_fround(1.0) : f20;
 f20 = Math_fround(f19 - f24);
 f12 = Math_fround(Math_fround((i3 ? Math_fround(0.0) : f25) * f20) / f19);
 i3 = HEAP8[i4 >> 0] | 0;
 if (f27 < Math_fround(1.0) & i3 << 24 >> 24 != 0) {
  i4 = (i8 | 0) == (i10 | 0);
  f25 = Math_fround(HEAPF32[i22 >> 2]);
  f14 = Math_fround(HEAPF32[i21 >> 2]);
  f32 = Math_fround(HEAPF32[(i9 ? i7 + 212 | 0 : i7 + 216 | 0) >> 2]);
  i8 = i9 ? i7 + 11008 | 0 : i7 + 11012 | 0;
  f31 = Math_fround(Math_fround(f32 - (i9 ? f25 : f14)) / f19);
  i33 = f31 < Math_fround(0.0);
  i41 = f31 > Math_fround(1.0);
  f14 = i41 ? Math_fround(1.0) : f31;
  f31 = i33 ? Math_fround(0.0) : f14;
  i33 = HEAP32[1460598] | 0;
  HEAP32[i33 + 6404 >> 2] = i10;
  HEAP8[i33 + 6408 >> 0] = 0;
  if (!i10) f42 = Math_fround(0.0); else if ((HEAP32[i33 + 6412 >> 2] | 0) == (i10 | 0)) {
   f14 = Math_fround(HEAPF32[i33 + 6416 >> 2]);
   f42 = Math_fround(f14 + Math_fround(HEAPF32[i33 + 20 >> 2]));
  } else f42 = Math_fround(0.0);
  HEAPF32[i33 + 6416 >> 2] = f42;
  if (i4) {
   i43 = 0;
   f44 = Math_fround(f27 * Math_fround(.5));
   f45 = Math_fround(HEAPF32[i8 >> 2]);
  } else {
   i4 = !(f31 >= f12) | !(f31 <= Math_fround(f27 + f12));
   f42 = Math_fround(f27 * Math_fround(.5));
   f14 = Math_fround(Math_fround(f31 - f12) - f42);
   f25 = i4 ? Math_fround(0.0) : f14;
   HEAPF32[i8 >> 2] = f25;
   i43 = i4;
   f44 = f42;
   f45 = f25;
  }
  f25 = Math_fround(Math_fround(Math_fround(f31 - f45) - f44) / Math_fround(Math_fround(1.0) - f27));
  i4 = f25 < Math_fround(0.0);
  i33 = f25 > Math_fround(1.0);
  f27 = i33 ? Math_fround(1.0) : f25;
  f25 = Math_fround(~~Math_fround(Math_fround(f26 * (i4 ? Math_fround(0.0) : f27)) + Math_fround(.5)) | 0);
  HEAPF32[i23 >> 2] = f25;
  f27 = Math_fround(f25 / f26);
  i23 = f27 < Math_fround(0.0);
  i4 = f27 > Math_fround(1.0);
  f26 = i4 ? Math_fround(1.0) : f27;
  f27 = Math_fround(Math_fround(f20 * (i23 ? Math_fround(0.0) : f26)) / f19);
  if (i43) {
   f19 = Math_fround(Math_fround(f31 - f27) - f44);
   HEAPF32[i8 >> 2] = f19;
   f46 = f27;
   i47 = 17;
  } else {
   f46 = f27;
   i47 = 17;
  }
 } else if (!(i3 << 24 >> 24)) {
  f46 = f12;
  i47 = HEAP8[i5 >> 0] | 0 ? 16 : 15;
 } else {
  f46 = f12;
  i47 = 17;
 }
 i5 = HEAP32[1460598] | 0;
 i3 = i5 + 5508 + (i47 << 4) | 0;
 f12 = Math_fround(HEAPF32[i3 >> 2]);
 f27 = Math_fround(HEAPF32[i3 + 4 >> 2]);
 f19 = Math_fround(HEAPF32[i3 + 8 >> 2]);
 f44 = Math_fround(HEAPF32[i3 + 12 >> 2]);
 f31 = Math_fround(f44 * Math_fround(HEAPF32[i5 + 5356 >> 2]));
 i5 = f12 < Math_fround(0.0);
 i3 = f12 > Math_fround(1.0);
 i47 = ~~Math_fround(Math_fround((i3 ? Math_fround(1.0) : f12) * Math_fround(255.0)) + Math_fround(.5));
 i3 = f27 < Math_fround(0.0);
 i8 = f27 > Math_fround(1.0);
 i43 = ~~Math_fround(Math_fround((i8 ? Math_fround(1.0) : f27) * Math_fround(255.0)) + Math_fround(.5)) << 8;
 i8 = f19 < Math_fround(0.0);
 i23 = f19 > Math_fround(1.0);
 i4 = ~~Math_fround(Math_fround((i23 ? Math_fround(1.0) : f19) * Math_fround(255.0)) + Math_fround(.5)) << 16;
 i23 = f31 < Math_fround(0.0);
 i33 = f31 > Math_fround(1.0);
 i10 = ~~Math_fround(Math_fround((i33 ? Math_fround(1.0) : f31) * Math_fround(255.0)) + Math_fround(.5)) << 24;
 HEAPF32[i6 >> 2] = Math_fround(3402823469999999843913219.0e14);
 i33 = i6 + 4 | 0;
 HEAPF32[i33 >> 2] = Math_fround(3402823469999999843913219.0e14);
 i41 = i6 + 8 | 0;
 HEAPF32[i41 >> 2] = Math_fround(-3402823469999999843913219.0e14);
 i38 = i6 + 12 | 0;
 HEAPF32[i38 >> 2] = Math_fround(-3402823469999999843913219.0e14);
 f31 = Math_fround(HEAPF32[i22 >> 2]);
 if (i9) {
  f19 = Math_fround(f31 + Math_fround(f46 * Math_fround(Math_fround(HEAPF32[i29 >> 2]) - f31)));
  f27 = Math_fround(HEAPF32[i21 >> 2]);
  f12 = Math_fround(f24 + f19);
  f48 = Math_fround(HEAPF32[i28 >> 2]);
  f49 = f12 < f15 ? f12 : f15;
  f50 = f27;
  f51 = f19;
 } else {
  f19 = Math_fround(HEAPF32[i21 >> 2]);
  f27 = Math_fround(f19 + Math_fround(f46 * Math_fround(Math_fround(HEAPF32[i28 >> 2]) - f19)));
  f19 = Math_fround(HEAPF32[i29 >> 2]);
  f46 = Math_fround(f24 + f27);
  f48 = f46 < f16 ? f46 : f16;
  f49 = f19;
  f50 = f27;
  f51 = f31;
 }
 HEAPF32[i6 >> 2] = f51;
 HEAPF32[i33 >> 2] = f50;
 HEAPF32[i41 >> 2] = f49;
 HEAPF32[i38 >> 2] = f48;
 __ZN10ImDrawList13AddRectFilledERK6ImVec2S2_jfi(HEAP32[i11 >> 2] | 0, i6, i6 + 8 | 0, (i3 ? 0 : i43) | (i5 ? 0 : i47) | (i8 ? 0 : i4) | (i23 ? 0 : i10), Math_fround(HEAPF32[i7 + 5460 >> 2]), 15);
 STACKTOP = i2;
 return;
}

function __ZN12ImGuiContextC2EP11ImFontAtlas(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 __ZN7ImGuiIOC2Ev(i1 + 4 | 0);
 i3 = i1 + 5356 | 0;
 _memset(i1 + 5508 | 0, 0, 672) | 0;
 HEAPF32[i3 >> 2] = Math_fround(1.0);
 HEAP32[i1 + 5360 >> 2] = 1090519040;
 HEAP32[i1 + 5364 >> 2] = 1090519040;
 HEAPF32[i1 + 5368 >> 2] = Math_fround(7.0);
 HEAPF32[i1 + 5372 >> 2] = Math_fround(1.0);
 HEAP32[i1 + 5376 >> 2] = 1107296256;
 HEAP32[i1 + 5380 >> 2] = 1107296256;
 HEAP32[i1 + 5384 >> 2] = 0;
 HEAP32[i1 + 5388 >> 2] = 1056964608;
 HEAPF32[i1 + 5392 >> 2] = Math_fround(0.0);
 HEAPF32[i1 + 5396 >> 2] = Math_fround(1.0);
 HEAPF32[i1 + 5400 >> 2] = Math_fround(0.0);
 HEAPF32[i1 + 5404 >> 2] = Math_fround(1.0);
 HEAP32[i1 + 5408 >> 2] = 1082130432;
 HEAP32[i1 + 5412 >> 2] = 1077936128;
 HEAPF32[i1 + 5416 >> 2] = Math_fround(0.0);
 HEAPF32[i1 + 5420 >> 2] = Math_fround(0.0);
 HEAP32[i1 + 5424 >> 2] = 1090519040;
 HEAP32[i1 + 5428 >> 2] = 1082130432;
 HEAP32[i1 + 5432 >> 2] = 1082130432;
 HEAP32[i1 + 5436 >> 2] = 1082130432;
 HEAP32[i1 + 5440 >> 2] = 0;
 HEAP32[i1 + 5444 >> 2] = 0;
 HEAPF32[i1 + 5448 >> 2] = Math_fround(21.0);
 HEAPF32[i1 + 5452 >> 2] = Math_fround(6.0);
 HEAPF32[i1 + 5456 >> 2] = Math_fround(16.0);
 HEAPF32[i1 + 5460 >> 2] = Math_fround(9.0);
 HEAPF32[i1 + 5464 >> 2] = Math_fround(10.0);
 HEAPF32[i1 + 5468 >> 2] = Math_fround(0.0);
 HEAP32[i1 + 5472 >> 2] = 1056964608;
 HEAP32[i1 + 5476 >> 2] = 1056964608;
 HEAP32[i1 + 5480 >> 2] = 1101004800;
 HEAP32[i1 + 5484 >> 2] = 1101004800;
 HEAP32[i1 + 5488 >> 2] = 1077936128;
 HEAP32[i1 + 5492 >> 2] = 1077936128;
 HEAPF32[i1 + 5496 >> 2] = Math_fround(1.0);
 HEAP8[i1 + 5500 >> 0] = 1;
 HEAP8[i1 + 5501 >> 0] = 1;
 HEAPF32[i1 + 5504 >> 2] = Math_fround(1.25);
 __ZN5ImGui15StyleColorsDarkEP10ImGuiStyle(i3);
 i3 = i1 + 6192 | 0;
 __ZN20ImDrawListSharedDataC2Ev(i3);
 i4 = i1 + 6444 | 0;
 i5 = i1 + 6448 | 0;
 HEAPF32[i5 >> 2] = Math_fround(0.0);
 HEAPF32[i4 >> 2] = Math_fround(0.0);
 i6 = i1 + 6476 | 0;
 i7 = i1 + 6600 | 0;
 i8 = i1 + 6604 | 0;
 i9 = i1 + 6608 | 0;
 i10 = i1 + 6612 | 0;
 i11 = i1 + 6628 | 0;
 i12 = i1 + 6632 | 0;
 i13 = i1 + 6340 | 0;
 i14 = i13 + 48 | 0;
 do {
  HEAP32[i13 >> 2] = 0;
  i13 = i13 + 4 | 0;
 } while ((i13 | 0) < (i14 | 0));
 i13 = i6;
 i14 = i13 + 120 | 0;
 do {
  HEAP32[i13 >> 2] = 0;
  i13 = i13 + 4 | 0;
 } while ((i13 | 0) < (i14 | 0));
 HEAP8[i6 + 120 >> 0] = 0;
 HEAPF32[i7 >> 2] = Math_fround(3402823469999999843913219.0e14);
 HEAPF32[i8 >> 2] = Math_fround(3402823469999999843913219.0e14);
 HEAPF32[i9 >> 2] = Math_fround(-3402823469999999843913219.0e14);
 HEAPF32[i10 >> 2] = Math_fround(-3402823469999999843913219.0e14);
 HEAP32[i1 + 6616 >> 2] = 0;
 HEAP32[i1 + 6620 >> 2] = 0;
 HEAPF32[i1 + 6624 >> 2] = Math_fround(3402823469999999843913219.0e14);
 HEAP32[i11 >> 2] = 0;
 HEAP32[i12 >> 2] = 0;
 i12 = i1 + 6684 | 0;
 HEAPF32[i12 >> 2] = Math_fround(3402823469999999843913219.0e14);
 i11 = i1 + 6688 | 0;
 HEAPF32[i11 >> 2] = Math_fround(3402823469999999843913219.0e14);
 i10 = i1 + 6692 | 0;
 HEAPF32[i10 >> 2] = Math_fround(-3402823469999999843913219.0e14);
 i9 = i1 + 6696 | 0;
 HEAPF32[i9 >> 2] = Math_fround(-3402823469999999843913219.0e14);
 HEAPF32[i1 + 6740 >> 2] = Math_fround(3402823469999999843913219.0e14);
 HEAPF32[i1 + 6744 >> 2] = Math_fround(3402823469999999843913219.0e14);
 HEAPF32[i1 + 6748 >> 2] = Math_fround(-3402823469999999843913219.0e14);
 HEAPF32[i1 + 6752 >> 2] = Math_fround(-3402823469999999843913219.0e14);
 HEAP32[i1 + 6780 >> 2] = 0;
 HEAP32[i1 + 6784 >> 2] = 0;
 HEAPF32[i1 + 6796 >> 2] = Math_fround(3402823469999999843913219.0e14);
 HEAPF32[i1 + 6792 >> 2] = Math_fround(3402823469999999843913219.0e14);
 HEAPF32[i1 + 6788 >> 2] = Math_fround(3402823469999999843913219.0e14);
 HEAPF32[i1 + 6800 >> 2] = Math_fround(3402823469999999843913219.0e14);
 HEAPF32[i1 + 6804 >> 2] = Math_fround(3402823469999999843913219.0e14);
 HEAPF32[i1 + 6808 >> 2] = Math_fround(-3402823469999999843913219.0e14);
 HEAPF32[i1 + 6812 >> 2] = Math_fround(-3402823469999999843913219.0e14);
 HEAP32[i1 + 6816 >> 2] = 0;
 HEAP32[i1 + 6820 >> 2] = 0;
 HEAPF32[i1 + 6832 >> 2] = Math_fround(3402823469999999843913219.0e14);
 HEAPF32[i1 + 6828 >> 2] = Math_fround(3402823469999999843913219.0e14);
 HEAPF32[i1 + 6824 >> 2] = Math_fround(3402823469999999843913219.0e14);
 HEAPF32[i1 + 6836 >> 2] = Math_fround(3402823469999999843913219.0e14);
 HEAPF32[i1 + 6840 >> 2] = Math_fround(3402823469999999843913219.0e14);
 HEAPF32[i1 + 6844 >> 2] = Math_fround(-3402823469999999843913219.0e14);
 HEAPF32[i1 + 6848 >> 2] = Math_fround(-3402823469999999843913219.0e14);
 HEAP32[i1 + 6852 >> 2] = 0;
 HEAP32[i1 + 6856 >> 2] = 0;
 HEAPF32[i1 + 6868 >> 2] = Math_fround(3402823469999999843913219.0e14);
 HEAPF32[i1 + 6864 >> 2] = Math_fround(3402823469999999843913219.0e14);
 HEAPF32[i1 + 6860 >> 2] = Math_fround(3402823469999999843913219.0e14);
 HEAPF32[i1 + 6872 >> 2] = Math_fround(3402823469999999843913219.0e14);
 HEAPF32[i1 + 6876 >> 2] = Math_fround(3402823469999999843913219.0e14);
 HEAPF32[i1 + 6880 >> 2] = Math_fround(-3402823469999999843913219.0e14);
 HEAPF32[i1 + 6884 >> 2] = Math_fround(-3402823469999999843913219.0e14);
 HEAP8[i1 + 6888 >> 0] = 0;
 i8 = i1 + 6952 | 0;
 i13 = i1 + 6892 | 0;
 i14 = i13 + 56 | 0;
 do {
  HEAP32[i13 >> 2] = 0;
  i13 = i13 + 4 | 0;
 } while ((i13 | 0) < (i14 | 0));
 __ZN10ImDrawListC2EPK20ImDrawListSharedData(i8, 0);
 i8 = i1 + 7084 | 0;
 i7 = i1 + 7104 | 0;
 HEAP32[i7 >> 2] = 0;
 HEAP32[i7 + 4 >> 2] = 0;
 HEAP32[i7 + 8 >> 2] = 0;
 HEAP32[i7 + 12 >> 2] = 0;
 HEAP32[i7 + 16 >> 2] = 0;
 HEAP32[i7 + 20 >> 2] = 0;
 HEAP32[i7 + 24 >> 2] = 0;
 HEAP32[i7 + 28 >> 2] = 0;
 HEAP8[i7 + 32 >> 0] = 0;
 HEAP32[i8 >> 2] = 0;
 HEAP32[i8 + 4 >> 2] = 0;
 HEAP32[i8 + 8 >> 2] = 0;
 HEAP32[i8 + 12 >> 2] = 0;
 HEAP32[i1 + 7100 >> 2] = -1;
 HEAP8[i1 + 7138 >> 0] = 0;
 HEAP8[i1 + 7137 >> 0] = 0;
 HEAPF32[i1 + 7140 >> 2] = Math_fround(3402823469999999843913219.0e14);
 HEAPF32[i1 + 7144 >> 2] = Math_fround(3402823469999999843913219.0e14);
 HEAPF32[i1 + 7148 >> 2] = Math_fround(-3402823469999999843913219.0e14);
 HEAPF32[i1 + 7152 >> 2] = Math_fround(-3402823469999999843913219.0e14);
 HEAP32[i1 + 7184 >> 2] = 0;
 HEAP32[i1 + 7180 >> 2] = 0;
 HEAP32[i1 + 7188 >> 2] = 0;
 _memset(i1 + 7200 | 0, 0, 3684) | 0;
 __ZN6ImFontC2Ev(i1 + 10884 | 0);
 i8 = i1 + 10980 | 0;
 HEAP32[i8 >> 2] = 0;
 HEAP32[i8 + 4 >> 2] = 0;
 HEAP32[i8 + 8 >> 2] = 0;
 HEAP32[i8 + 12 >> 2] = 0;
 i8 = i1 + 11008 | 0;
 i7 = i1 + 11012 | 0;
 HEAPF32[i7 >> 2] = Math_fround(0.0);
 HEAPF32[i8 >> 2] = Math_fround(0.0);
 i6 = i1 + 11020 | 0;
 i15 = i1 + 11032 | 0;
 i16 = i1 + 11036 | 0;
 i17 = i1 + 11040 | 0;
 i18 = i1 + 11044 | 0;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i6 + 4 >> 2] = 0;
 HEAP32[i6 + 8 >> 2] = 0;
 HEAP32[i6 + 12 >> 2] = 0;
 HEAP32[i6 + 16 >> 2] = 0;
 HEAP32[i6 + 20 >> 2] = 0;
 HEAP32[i6 + 24 >> 2] = 0;
 __ZN15ImGuiTextBufferC2Ev(i1 + 11056 | 0);
 i6 = i1 + 11068 | 0;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i6 + 4 >> 2] = 0;
 HEAP32[i6 + 8 >> 2] = 0;
 HEAP32[i6 + 12 >> 2] = 0;
 HEAP32[i6 + 16 >> 2] = 0;
 HEAP32[i6 + 20 >> 2] = 0;
 __ZN15ImGuiTextBufferC2Ev(i1 + 11100 | 0);
 HEAP8[i1 >> 0] = 0;
 HEAP32[i1 + 6180 >> 2] = 0;
 HEAPF32[i1 + 6188 >> 2] = Math_fround(0.0);
 HEAPF32[i1 + 6184 >> 2] = Math_fround(0.0);
 i6 = (i2 | 0) != 0;
 HEAP8[i1 + 1 >> 0] = (i6 ^ 1) & 1;
 if (i6) i19 = i2; else {
  HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
  i2 = __ZL13MallocWrapperjPv(88, 0) | 0;
  __ZN11ImFontAtlasC2Ev(i2);
  i19 = i2;
 }
 HEAP32[i1 + 144 >> 2] = i19;
 HEAPF32[i1 + 6324 >> 2] = Math_fround(0.0);
 HEAP32[i1 + 6328 >> 2] = 0;
 HEAP32[i1 + 6336 >> 2] = -1;
 HEAP32[i1 + 6332 >> 2] = -1;
 i19 = i1 + 6388 | 0;
 i2 = i1 + 6412 | 0;
 HEAP32[i1 + 6440 >> 2] = 0;
 HEAP32[i19 >> 2] = 0;
 HEAP32[i19 + 4 >> 2] = 0;
 HEAP32[i19 + 8 >> 2] = 0;
 HEAP32[i19 + 12 >> 2] = 0;
 HEAP32[i19 + 16 >> 2] = 0;
 HEAP8[i19 + 20 >> 0] = 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 HEAP32[i2 + 12 >> 2] = 0;
 HEAP32[i2 + 16 >> 2] = 0;
 HEAP32[i2 + 20 >> 2] = 0;
 HEAP16[i2 + 24 >> 1] = 0;
 HEAP32[i4 >> 2] = -1082130432;
 HEAP32[i5 >> 2] = -1082130432;
 i5 = i1 + 6452 | 0;
 HEAP8[i1 + 6636 >> 0] = 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 + 8 >> 2] = 0;
 HEAP32[i5 + 12 >> 2] = 0;
 HEAP32[i5 + 16 >> 2] = 0;
 HEAP32[i5 + 20 >> 2] = 0;
 i13 = i1 + 6640 | 0;
 i14 = i13 + 44 | 0;
 do {
  HEAP32[i13 >> 2] = 0;
  i13 = i13 + 4 | 0;
 } while ((i13 | 0) < (i14 | 0));
 HEAPF32[i12 >> 2] = Math_fround(3402823469999999843913219.0e14);
 HEAPF32[i11 >> 2] = Math_fround(3402823469999999843913219.0e14);
 HEAPF32[i10 >> 2] = Math_fround(-3402823469999999843913219.0e14);
 HEAPF32[i9 >> 2] = Math_fround(-3402823469999999843913219.0e14);
 i9 = i1 + 6700 | 0;
 HEAP32[i1 + 6720 >> 2] = 0;
 HEAP32[i9 >> 2] = 0;
 HEAP32[i9 + 4 >> 2] = 0;
 HEAP32[i9 + 8 >> 2] = 0;
 HEAP32[i9 + 12 >> 2] = 0;
 HEAP8[i9 + 16 >> 0] = 0;
 HEAP32[i1 + 6724 >> 2] = 2147483647;
 HEAP8[i1 + 6728 >> 0] = 0;
 HEAP8[i1 + 6729 >> 0] = 0;
 HEAP8[i1 + 6730 >> 0] = 1;
 i9 = i1 + 6731 | 0;
 HEAP32[i1 + 6736 >> 2] = 0;
 HEAP8[i1 + 6756 >> 0] = 0;
 HEAP8[i1 + 6757 >> 0] = 0;
 HEAP32[i1 + 6760 >> 2] = 0;
 HEAP32[i1 + 6764 >> 2] = 0;
 HEAP8[i9 >> 0] = 0;
 HEAP8[i9 + 1 >> 0] = 0;
 HEAP8[i9 + 2 >> 0] = 0;
 HEAP8[i9 + 3 >> 0] = 0;
 HEAP32[i1 + 6776 >> 2] = -1;
 HEAP32[i1 + 6772 >> 2] = -1;
 HEAP32[i1 + 6768 >> 2] = -1;
 HEAPF32[i1 + 6948 >> 2] = Math_fround(0.0);
 HEAP32[i1 + 6992 >> 2] = i3;
 HEAP32[i1 + 6996 >> 2] = 35002;
 HEAP32[i1 + 7068 >> 2] = 0;
 HEAP8[i1 + 7072 >> 0] = 0;
 HEAP32[i1 + 7076 >> 2] = 0;
 HEAP32[i1 + 7080 >> 2] = -1;
 i3 = i1 + 7156 | 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 HEAP32[i3 + 16 >> 2] = 0;
 HEAP32[i1 + 7176 >> 2] = -1;
 i3 = i1 + 7192 | 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i1 + 10972 >> 2] = 0;
 HEAP32[i1 + 10976 >> 2] = 42991616;
 HEAP8[i1 + 10996 >> 0] = 0;
 HEAPF32[i1 + 11e3 >> 2] = Math_fround(0.0);
 HEAPF32[i1 + 11004 >> 2] = Math_fround(.00999999977);
 HEAP32[i8 >> 2] = 0;
 HEAP32[i7 >> 2] = 0;
 HEAP32[i1 + 11016 >> 2] = 0;
 HEAP32[i17 >> 2] = 2139095039;
 HEAP32[i18 >> 2] = 2139095039;
 HEAP32[i15 >> 2] = 2139095039;
 HEAP32[i16 >> 2] = 2139095039;
 HEAP8[i1 + 11048 >> 0] = 0;
 HEAPF32[i1 + 11052 >> 2] = Math_fround(0.0);
 HEAP8[i1 + 11092 >> 0] = 0;
 HEAP32[i1 + 11096 >> 2] = 0;
 HEAP32[i1 + 11112 >> 2] = 0;
 HEAP32[i1 + 11116 >> 2] = 2;
 _memset(i1 + 11120 | 0, 0, 488) | 0;
 HEAP32[i1 + 11616 >> 2] = -1;
 HEAP32[i1 + 11612 >> 2] = -1;
 HEAP32[i1 + 11608 >> 2] = -1;
 _memset(i1 + 11620 | 0, 0, 3073) | 0;
 return;
}

function __ZN15CityMapRenderer22generateQueue_overlay1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, d43 = 0.0, f44 = f0, f45 = f0, i46 = 0, i47 = 0, f48 = f0, f49 = f0, f50 = f0, i51 = 0, f52 = f0, f53 = f0, f54 = f0, f55 = f0, f56 = f0, f57 = f0, f58 = f0, i59 = 0, f60 = f0, f61 = f0, f62 = f0, i63 = 0, i64 = 0, f65 = f0, f66 = f0, f67 = f0, f68 = f0, f69 = f0, f70 = f0, f71 = f0, f72 = f0, f73 = f0, f74 = f0, f75 = f0, i76 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256);
 i3 = i2 + 192 | 0;
 i4 = i2 + 180 | 0;
 i5 = i2 + 168 | 0;
 i6 = i2 + 144 | 0;
 i7 = i2 + 64 | 0;
 i8 = i2 + 156 | 0;
 i9 = i2 + 80 | 0;
 i10 = i2;
 __ZN11RenderQueue5clearEv(i1);
 i11 = i1 + 248 | 0;
 i12 = HEAP32[i11 >> 2] | 0;
 if (!(HEAP32[i12 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 i13 = i1 + 252 | 0;
 i14 = i8 + 4 | 0;
 i15 = i8 + 8 | 0;
 i16 = i9 + 4 | 0;
 i17 = i9 + 20 | 0;
 i18 = i9 + 24 | 0;
 i19 = i9 + 40 | 0;
 i20 = i9 + 44 | 0;
 i21 = i9 + 48 | 0;
 i22 = i9 + 52 | 0;
 i23 = i9 + 56 | 0;
 i24 = i9 + 60 | 0;
 i25 = i10 + 4 | 0;
 i26 = i10 + 8 | 0;
 i27 = i10 + 12 | 0;
 i28 = i10 + 16 | 0;
 i29 = i10 + 20 | 0;
 i30 = i10 + 24 | 0;
 i31 = i10 + 28 | 0;
 i32 = i10 + 32 | 0;
 i33 = i10 + 36 | 0;
 i34 = i10 + 40 | 0;
 i35 = i10 + 44 | 0;
 i36 = i10 + 48 | 0;
 i37 = i10 + 52 | 0;
 i38 = i10 + 56 | 0;
 i39 = i10 + 60 | 0;
 i40 = 0;
 i41 = i12;
 while (1) {
  if (!(HEAP32[i41 + 4 >> 2] | 0)) i42 = i41; else {
   d43 = +(i40 | 0);
   f44 = Math_fround(i40 | 0);
   f45 = Math_fround(f44 * Math_fround(0.0));
   i12 = 0;
   i46 = i41;
   while (1) {
    i47 = HEAP32[i13 >> 2] | 0;
    f48 = Math_fround(HEAPF32[i47 + 68 >> 2]);
    f49 = Math_fround(d43 - +HEAPF64[i47 + 48 >> 3]);
    f50 = Math_fround(+(i12 | 0) - +HEAPF64[i47 + 56 >> 3]);
    i51 = HEAP32[i47 + 72 >> 2] | 0;
    f52 = Math_fround(Math_fround(13.1999998) / Math_fround(HEAP32[i51 + 4 >> 2] | 0));
    f53 = Math_fround(Math_fround(9.39999961) / Math_fround(HEAP32[i51 + 8 >> 2] | 0));
    f54 = Math_fround(f49 + f50);
    if (Math_fround(Math_fround(f48 * Math_fround(f54 + Math_fround(1.0))) * f53) > Math_fround(-1.0)) if (Math_fround(Math_fround(f48 * Math_fround(f54 + Math_fround(-1.0))) * f53) < Math_fround(1.0)) {
     f53 = Math_fround(f49 - f50);
     if (Math_fround(f52 * Math_fround(f48 * Math_fround(f53 + Math_fround(1.0)))) > Math_fround(-1.0)) if (Math_fround(f52 * Math_fround(f48 * Math_fround(f53 + Math_fround(-1.0)))) < Math_fround(1.0)) {
      f53 = Math_fround(i12 | 0);
      f48 = Math_fround(f53 * Math_fround(0.0));
      f52 = Math_fround(Math_fround(f48 + f44) + Math_fround(0.0));
      f50 = Math_fround(Math_fround(f45 + f53) + Math_fround(0.0));
      f53 = Math_fround(Math_fround(f45 + f48) + Math_fround(0.0));
      f48 = Math_fround(f53 + Math_fround(1.0));
      i51 = __ZN7CityMap7getTileEjj(i46, i40, i12) | 0;
      __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i13 >> 2] | 0) + 44 >> 2] | 0);
      __ZN11RenderQueue7setMeshEi(i1, 0);
      f49 = Math_fround(__ZN7CityMap12getTileValueERK8CityTile(i51));
      HEAP32[i4 >> 2] = HEAP32[834];
      HEAP32[i4 + 4 >> 2] = HEAP32[835];
      HEAP32[i4 + 8 >> 2] = HEAP32[836];
      HEAP32[i5 >> 2] = HEAP32[837];
      HEAP32[i5 + 4 >> 2] = HEAP32[838];
      HEAP32[i5 + 8 >> 2] = HEAP32[839];
      HEAP32[i6 >> 2] = HEAP32[840];
      HEAP32[i6 + 4 >> 2] = HEAP32[841];
      HEAP32[i6 + 8 >> 2] = HEAP32[842];
      HEAP32[i7 >> 2] = HEAP32[843];
      HEAP32[i7 + 4 >> 2] = HEAP32[844];
      HEAP32[i7 + 8 >> 2] = HEAP32[845];
      do if (f49 < Math_fround(.25)) {
       f54 = Math_fround(f49 * Math_fround(4.0));
       f55 = Math_fround(Math_fround(1.0) - f54);
       f56 = Math_fround(f55 * Math_fround(.150000006));
       f57 = f54;
       f58 = f56;
       i59 = i4;
       f60 = Math_fround(f55 + f54);
       f61 = Math_fround(f56 + Math_fround(f54 * Math_fround(.150000006)));
      } else {
       if (f49 < Math_fround(.5)) {
        f54 = Math_fround(Math_fround(f49 + Math_fround(-.25)) * Math_fround(4.0));
        f56 = Math_fround(Math_fround(1.0) - f54);
        f55 = Math_fround(f56 * Math_fround(.150000006));
        f57 = f54;
        f58 = f55;
        i59 = i5;
        f60 = Math_fround(f56 + Math_fround(f54 * Math_fround(.550000012)));
        f61 = Math_fround(f55 + Math_fround(f54 * Math_fround(.75)));
        break;
       }
       if (f49 < Math_fround(.75)) {
        f54 = Math_fround(Math_fround(f49 + Math_fround(-.5)) * Math_fround(4.0));
        f55 = Math_fround(Math_fround(1.0) - f54);
        f57 = f54;
        f58 = Math_fround(f55 * Math_fround(.150000006));
        i59 = i6;
        f60 = Math_fround(Math_fround(f55 * Math_fround(.550000012)) + Math_fround(f54 * Math_fround(.150000006)));
        f61 = Math_fround(Math_fround(f55 * Math_fround(.75)) + f54);
        break;
       } else {
        f54 = Math_fround(Math_fround(f49 + Math_fround(-.75)) * Math_fround(4.0));
        f55 = Math_fround(Math_fround(1.0) - f54);
        f56 = Math_fround(f55 * Math_fround(.150000006));
        f62 = Math_fround(f54 * Math_fround(.150000006));
        f57 = f54;
        f58 = f56;
        i59 = i7;
        f60 = Math_fround(f56 + f62);
        f61 = Math_fround(f55 + f62);
        break;
       }
      } while (0);
      f49 = Math_fround(f58 + Math_fround(f57 * Math_fround(HEAPF32[i59 + 8 >> 2])));
      HEAPF32[i8 >> 2] = f60;
      HEAPF32[i14 >> 2] = f61;
      HEAPF32[i15 >> 2] = f49;
      HEAP32[i3 >> 2] = HEAP32[i8 >> 2];
      HEAP32[i3 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
      HEAP32[i3 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
      __ZN11RenderQueue10setDiffuseEN3glm3vecILi3EfLNS0_9qualifierE0EEE(i1, i3);
      HEAP32[i9 >> 2] = 1065353216;
      HEAP32[i16 >> 2] = 0;
      HEAP32[i16 + 4 >> 2] = 0;
      HEAP32[i16 + 8 >> 2] = 0;
      HEAP32[i16 + 12 >> 2] = 0;
      HEAP32[i17 >> 2] = 1065353216;
      HEAP32[i18 >> 2] = 0;
      HEAP32[i18 + 4 >> 2] = 0;
      HEAP32[i18 + 8 >> 2] = 0;
      HEAP32[i18 + 12 >> 2] = 0;
      HEAP32[i19 >> 2] = 1065353216;
      HEAPF32[i20 >> 2] = Math_fround(0.0);
      HEAPF32[i21 >> 2] = f52;
      HEAPF32[i22 >> 2] = f50;
      HEAPF32[i23 >> 2] = f53;
      HEAPF32[i24 >> 2] = f48;
      i47 = i3;
      i63 = i9;
      i64 = i47 + 64 | 0;
      do {
       HEAP32[i47 >> 2] = HEAP32[i63 >> 2];
       i47 = i47 + 4 | 0;
       i63 = i63 + 4 | 0;
      } while ((i47 | 0) < (i64 | 0));
      __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i3);
      if (HEAP32[i51 + 16 >> 2] | 0) {
       f49 = Math_fround(Math_fround(HEAP32[i51 + 24 >> 2] | 0) * Math_fround(1.57079637));
       f62 = Math_fround(_cosf(f49));
       f55 = Math_fround(_sinf(f49));
       f49 = Math_fround(Math_fround(1.0) - f62);
       f56 = Math_fround(f49 * Math_fround(0.0));
       f54 = Math_fround(f56 * Math_fround(0.0));
       f65 = Math_fround(f62 + f54);
       f66 = Math_fround(f55 + f54);
       f67 = Math_fround(f55 * Math_fround(0.0));
       f68 = Math_fround(f56 - f67);
       f69 = Math_fround(f54 - f55);
       f55 = Math_fround(f67 + f56);
       f56 = Math_fround(f62 + f49);
       f49 = Math_fround(f65 * Math_fround(.330000013));
       f62 = Math_fround(f65 * Math_fround(0.0));
       f65 = Math_fround(f66 * Math_fround(0.0));
       f67 = Math_fround(f62 + f65);
       f54 = Math_fround(f68 * Math_fround(0.0));
       f70 = Math_fround(f68 * Math_fround(.330000013));
       f68 = Math_fround(f54 + Math_fround(f49 + f65));
       f65 = Math_fround(f54 + Math_fround(f62 + Math_fround(f66 * Math_fround(.330000013))));
       f66 = Math_fround(f70 + f67);
       f71 = Math_fround(f54 + f67);
       f67 = Math_fround(f69 * Math_fround(0.0));
       f72 = Math_fround(f67 + f62);
       f73 = Math_fround(f55 * Math_fround(0.0));
       f74 = Math_fround(f55 * Math_fround(.330000013));
       f55 = Math_fround(f73 + Math_fround(Math_fround(f69 * Math_fround(.330000013)) + f62));
       f62 = Math_fround(f73 + Math_fround(f67 + f49));
       f49 = Math_fround(f74 + f72);
       f67 = Math_fround(f73 + f72);
       f72 = Math_fround(f73 + f54);
       f69 = Math_fround(f56 * Math_fround(0.0));
       f75 = Math_fround(f69 + Math_fround(f74 + f54));
       f54 = Math_fround(f69 + Math_fround(f73 + f70));
       f70 = Math_fround(Math_fround(f56 * Math_fround(.330000013)) + f72);
       f56 = Math_fround(f69 + f72);
       __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i13 >> 2] | 0) + 44 >> 2] | 0);
       __ZN11RenderQueue7setMeshEi(i1, (HEAP32[i51 + 20 >> 2] | 0) + 3 | 0);
       HEAPF32[i10 >> 2] = f68;
       HEAPF32[i25 >> 2] = f65;
       HEAPF32[i26 >> 2] = f66;
       HEAPF32[i27 >> 2] = f71;
       HEAPF32[i28 >> 2] = f55;
       HEAPF32[i29 >> 2] = f62;
       HEAPF32[i30 >> 2] = f49;
       HEAPF32[i31 >> 2] = f67;
       HEAPF32[i32 >> 2] = f75;
       HEAPF32[i33 >> 2] = f54;
       HEAPF32[i34 >> 2] = f70;
       HEAPF32[i35 >> 2] = f56;
       HEAPF32[i36 >> 2] = f52;
       HEAPF32[i37 >> 2] = f50;
       HEAPF32[i38 >> 2] = f53;
       HEAPF32[i39 >> 2] = f48;
       i47 = i3;
       i63 = i10;
       i64 = i47 + 64 | 0;
       do {
        HEAP32[i47 >> 2] = HEAP32[i63 >> 2];
        i47 = i47 + 4 | 0;
        i63 = i63 + 4 | 0;
       } while ((i47 | 0) < (i64 | 0));
       __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i3);
      }
      i76 = HEAP32[i11 >> 2] | 0;
     } else i76 = i46; else i76 = i46;
    } else i76 = i46; else i76 = i46;
    i12 = i12 + 1 | 0;
    if (i12 >>> 0 >= (HEAP32[i76 + 4 >> 2] | 0) >>> 0) {
     i42 = i76;
     break;
    } else i46 = i76;
   }
  }
  i40 = i40 + 1 | 0;
  if (i40 >>> 0 >= (HEAP32[i42 >> 2] | 0) >>> 0) break; else i41 = i42;
 }
 STACKTOP = i2;
 return;
}

function __ZN7CityMap6updateEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, f38 = f0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0;
 i2 = 0;
 i3 = i1 + 12 | 0;
 HEAP32[i3 >> 2] = 0;
 i4 = i1 + 16 | 0;
 HEAP32[i4 >> 2] = 0;
 if (!(HEAP32[i1 >> 2] | 0)) {
  i5 = 0;
  i6 = 0;
  i7 = i1 + 5767296 | 0;
  i8 = (i5 | 0) > 0;
  i9 = i8 & 1;
  HEAP8[i7 >> 0] = i9;
  i10 = i1 + 8 | 0;
  HEAP32[i10 >> 2] = i6;
  i11 = i1 + 20 | 0;
  HEAP32[i11 >> 2] = i5;
  return;
 }
 i12 = i1 + 4 | 0;
 i13 = i1 + 24 | 0;
 i14 = i1 + 32 | 0;
 i15 = i1 + 28 | 0;
 i16 = i1 + 5767296 | 0;
 i17 = i1 + 40 | 0;
 i18 = HEAP32[i12 >> 2] | 0;
 i19 = 0;
 i20 = 0;
 i21 = 0;
 i22 = i18;
 i23 = i18;
 while (1) {
  i18 = i20;
  i20 = i20 + 1 | 0;
  if (!i22) {
   i24 = i21;
   i25 = i19;
   i26 = i23;
   i27 = 0;
  } else {
   i28 = i18 + -1 | 0;
   i29 = 0;
   i30 = i19;
   i31 = i21;
   i32 = i23;
   while (1) {
    i33 = i1 + 128 + (i18 * 22528 | 0) + (i29 * 88 | 0) + 8 | 0;
    i34 = HEAP32[i33 >> 2] | 0;
    do if (!i34) i2 = 52; else {
     i35 = i1 + 128 + (i18 * 22528 | 0) + (i29 * 88 | 0) | 0;
     i36 = HEAP32[i35 + 72 >> 2] | 0;
     i37 = i36 >>> 1 & 1;
     f38 = Math_fround(Math_fround(((i36 & 4 | 0) == 0 ? i37 + 1 | 0 : i37 | 2) + (i36 >>> 3 & 1) | 0) * Math_fround(.25));
     i36 = ~~Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(1.0) - Math_fround(Math_fround(HEAP32[i35 + 80 >> 2] | 0) / Math_fround(255.0))) * f38) + Math_fround(0.0)) * Math_fround(200.0));
     L13 : do switch (i34 | 0) {
     case 1:
      {
       i35 = i29 + -1 | 0;
       i37 = HEAP32[i1 >> 2] | 0;
       if (i37 >>> 0 > i18 >>> 0) {
        i39 = i29 + 1 | 0;
        i40 = i1 + 128 + (i18 * 22528 | 0) | 0;
        i41 = i32 >>> 0 > i39 >>> 0 ? i40 + (i39 * 88 | 0) | 0 : i17;
        i42 = i32 >>> 0 > i35 >>> 0 ? i40 + (i35 * 88 | 0) | 0 : i17;
       } else {
        i41 = i17;
        i42 = i17;
       }
       if (i37 >>> 0 > i20 >>> 0) i43 = i32 >>> 0 > i29 >>> 0 ? i1 + 128 + (i20 * 22528 | 0) + (i29 * 88 | 0) | 0 : i17; else i43 = i17;
       if (i37 >>> 0 > i28 >>> 0) i44 = i32 >>> 0 > i29 >>> 0 ? i1 + 128 + (i28 * 22528 | 0) + (i29 * 88 | 0) | 0 : i17; else i44 = i17;
       i37 = i42 + 16 | 0;
       i35 = (HEAP32[i37 >> 2] | 0) != 0;
       i40 = i41 + 16 | 0;
       i39 = i43 + 16 | 0;
       if ((((HEAP32[i40 >> 2] | 0) == 0 ? i35 & 1 : i35 ? 2 : 1) + ((HEAP32[i39 >> 2] | 0) != 0 & 1) | 0) == (((HEAP32[i44 + 16 >> 2] | 0) != 0) << 31 >> 31 | 0)) i2 = 51; else {
        HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
        if (!(HEAP8[i16 >> 0] | 0)) i2 = 51; else if ((__ZN7CityMap4diceEv(0) | 0) < (i36 | 0)) {
         i35 = i1 + 128 + (i18 * 22528 | 0) + (i29 * 88 | 0) + 28 | 0;
         i45 = HEAP32[i35 >> 2] | 0;
         if ((i45 * 40 | 0) < (i36 | 0)) {
          i46 = i1 + 128 + (i18 * 22528 | 0) + (i29 * 88 | 0) + 32 | 0;
          i47 = HEAP32[i46 >> 2] | 0;
          i48 = (i47 | 0) > 48 ? 49 : i47 + 1 | 0;
          HEAP32[i46 >> 2] = i48;
          i46 = ((i48 | 0) / 10 | 0) + 1 | 0;
          if ((i46 | 0) == (i45 | 0)) i2 = 51; else {
           HEAP32[i35 >> 2] = i46;
           if (HEAP32[i40 >> 2] | 0) {
            HEAP32[i1 + 128 + (i18 * 22528 | 0) + (i29 * 88 | 0) + 36 >> 2] = 0;
            i2 = 51;
            break L13;
           }
           if (!(HEAP32[i39 >> 2] | 0)) {
            HEAP32[i1 + 128 + (i18 * 22528 | 0) + (i29 * 88 | 0) + 36 >> 2] = HEAP32[i37 >> 2] | 0 ? 2 : 1;
            i2 = 51;
            break L13;
           } else {
            HEAP32[i1 + 128 + (i18 * 22528 | 0) + (i29 * 88 | 0) + 36 >> 2] = 3;
            i2 = 51;
            break L13;
           }
          }
         } else i2 = 51;
        } else i2 = 51;
       }
       break;
      }
     case 2:
      {
       i37 = i29 + -1 | 0;
       i39 = HEAP32[i1 >> 2] | 0;
       if (i39 >>> 0 > i18 >>> 0) {
        i40 = i29 + 1 | 0;
        i46 = i1 + 128 + (i18 * 22528 | 0) | 0;
        i49 = i32 >>> 0 > i40 >>> 0 ? i46 + (i40 * 88 | 0) | 0 : i17;
        i50 = i32 >>> 0 > i37 >>> 0 ? i46 + (i37 * 88 | 0) | 0 : i17;
       } else {
        i49 = i17;
        i50 = i17;
       }
       if (i39 >>> 0 > i20 >>> 0) i51 = i32 >>> 0 > i29 >>> 0 ? i1 + 128 + (i20 * 22528 | 0) + (i29 * 88 | 0) | 0 : i17; else i51 = i17;
       if (i39 >>> 0 > i28 >>> 0) i52 = i32 >>> 0 > i29 >>> 0 ? i1 + 128 + (i28 * 22528 | 0) + (i29 * 88 | 0) | 0 : i17; else i52 = i17;
       i39 = i50 + 16 | 0;
       i37 = (HEAP32[i39 >> 2] | 0) != 0;
       i46 = i49 + 16 | 0;
       i40 = i51 + 16 | 0;
       if ((((HEAP32[i46 >> 2] | 0) == 0 ? i37 & 1 : i37 ? 2 : 1) + ((HEAP32[i40 >> 2] | 0) != 0 & 1) | 0) == (((HEAP32[i52 + 16 >> 2] | 0) != 0) << 31 >> 31 | 0)) i2 = 51; else {
        i37 = i1 + 128 + (i18 * 22528 | 0) + (i29 * 88 | 0) + 28 | 0;
        if ((HEAP32[i37 >> 2] | 0) < 3) if (!(HEAP8[i16 >> 0] | 0)) i2 = 51; else if ((__ZN7CityMap4diceEv(0) | 0) < (i36 | 0)) {
         i35 = HEAP32[i37 >> 2] | 0;
         if ((i36 | 0) > 60 & (i35 | 0) == 1 | ((i35 | 0) != 3 | (i36 | 0) > 120 & (i35 | 0) == 2)) {
          i45 = i1 + 128 + (i18 * 22528 | 0) + (i29 * 88 | 0) + 32 | 0;
          i48 = HEAP32[i45 >> 2] | 0;
          HEAP32[i45 >> 2] = i48 + 1;
          if ((i48 | 0) > 18) {
           HEAP32[i45 >> 2] = 0;
           i48 = i35 + 1 | 0;
           HEAP32[i37 >> 2] = i48;
           if (!i35) i2 = 41; else i53 = i48;
          } else {
           if (i35 | 0) {
            i2 = 51;
            break L13;
           }
           HEAP32[i45 >> 2] = 0;
           HEAP32[i37 >> 2] = 1;
           i2 = 41;
          }
          if ((i2 | 0) == 41) {
           i2 = 0;
           i45 = ((__ZN7CityMap4diceEv(0) | 0) % 3 | 0) + 200 | 0;
           HEAP32[i1 + 128 + (i18 * 22528 | 0) + (i29 * 88 | 0) + 12 >> 2] = i45;
           i53 = HEAP32[i37 >> 2] | 0;
          }
          if ((i53 | 0) == 2) {
           i45 = ((__ZN7CityMap4diceEv(0) | 0) % 4 | 0) + 210 | 0;
           HEAP32[i1 + 128 + (i18 * 22528 | 0) + (i29 * 88 | 0) + 12 >> 2] = i45;
           i54 = HEAP32[i37 >> 2] | 0;
          } else i54 = i53;
          if ((i54 | 0) == 3) {
           i37 = ((__ZN7CityMap4diceEv(0) | 0) % 4 | 0) + 220 | 0;
           HEAP32[i1 + 128 + (i18 * 22528 | 0) + (i29 * 88 | 0) + 12 >> 2] = i37;
          }
          if (HEAP32[i46 >> 2] | 0) {
           HEAP32[i1 + 128 + (i18 * 22528 | 0) + (i29 * 88 | 0) + 36 >> 2] = 0;
           i2 = 51;
           break L13;
          }
          if (!(HEAP32[i40 >> 2] | 0)) {
           HEAP32[i1 + 128 + (i18 * 22528 | 0) + (i29 * 88 | 0) + 36 >> 2] = HEAP32[i39 >> 2] | 0 ? 2 : 1;
           i2 = 51;
           break L13;
          } else {
           HEAP32[i1 + 128 + (i18 * 22528 | 0) + (i29 * 88 | 0) + 36 >> 2] = 3;
           i2 = 51;
           break L13;
          }
         } else i2 = 51;
        } else i2 = 51; else i2 = 51;
       }
       break;
      }
     default:
      i55 = i34;
     } while (0);
     if ((i2 | 0) == 51) {
      i2 = 0;
      i36 = HEAP32[i33 >> 2] | 0;
      if (!i36) {
       i2 = 52;
       break;
      } else i55 = i36;
     }
     i36 = i1 + 128 + (i18 * 22528 | 0) + (i29 * 88 | 0) | 0;
     i39 = i31 - (HEAP32[i36 + 32 >> 2] | 0) | 0;
     i40 = i36 + 12 | 0;
     i36 = (HEAP32[i40 >> 2] | 0) == 3 ? i39 + 5e5 | 0 : i39;
     do if ((i55 | 0) == 1) {
      i39 = i1 + 128 + (i18 * 22528 | 0) + (i29 * 88 | 0) | 0;
      i46 = (HEAP32[i39 + 32 >> 2] | 0) + i30 | 0;
      i37 = i39 + 72 | 0;
      if (HEAP32[i37 >> 2] & 2 | 0) {
       HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
       i39 = HEAP32[i33 >> 2] | 0;
       if ((i39 | 0) != 1) {
        i56 = i46;
        i57 = i39;
        i2 = 58;
        break;
       }
      }
      if (!(HEAP32[i37 >> 2] & 4)) i58 = i46; else {
       HEAP32[i13 >> 2] = 1;
       i56 = i46;
       i57 = HEAP32[i33 >> 2] | 0;
       i2 = 58;
      }
     } else {
      i56 = i30;
      i57 = i55;
      i2 = 58;
     } while (0);
     if ((i2 | 0) == 58) {
      i2 = 0;
      if ((i57 | 0) == 2) {
       HEAP32[i14 >> 2] = 1;
       i46 = HEAP32[i33 >> 2] | 0;
       if ((i46 | 0) == 2) {
        if (!(HEAP32[i1 + 128 + (i18 * 22528 | 0) + (i29 * 88 | 0) + 72 >> 2] & 8)) {
         i59 = i36;
         i60 = i56;
         break;
        }
        HEAP32[i15 >> 2] = 1;
        i59 = i36;
        i60 = i56;
        break;
       } else i61 = i46;
      } else i61 = i57;
      if ((i61 | 0) == 1) i58 = i56; else {
       i59 = i36;
       i60 = i56;
       break;
      }
     }
     i46 = HEAP32[i1 + 128 + (i18 * 22528 | 0) + (i29 * 88 | 0) + 32 >> 2] | 0;
     if ((i46 | 0) > 0) {
      HEAP32[i40 >> 2] = ((i46 >>> 0) / 10 | 0) + 101;
      i59 = i36;
      i60 = i58;
     } else {
      i59 = i36;
      i60 = i58;
     }
    } while (0);
    if ((i2 | 0) == 52) {
     i2 = 0;
     i59 = (HEAP32[i1 + 128 + (i18 * 22528 | 0) + (i29 * 88 | 0) + 12 >> 2] | 0) == 3 ? i31 + 5e5 | 0 : i31;
     i60 = i30;
    }
    i29 = i29 + 1 | 0;
    i33 = HEAP32[i12 >> 2] | 0;
    if (i29 >>> 0 >= i33 >>> 0) {
     i24 = i59;
     i25 = i60;
     i26 = i33;
     i27 = i33;
     break;
    } else {
     i30 = i60;
     i31 = i59;
     i32 = i33;
    }
   }
  }
  if (i20 >>> 0 >= (HEAP32[i1 >> 2] | 0) >>> 0) {
   i5 = i24;
   i6 = i25;
   i7 = i16;
   break;
  } else {
   i19 = i25;
   i21 = i24;
   i22 = i27;
   i23 = i26;
  }
 }
 i8 = (i5 | 0) > 0;
 i9 = i8 & 1;
 HEAP8[i7 >> 0] = i9;
 i10 = i1 + 8 | 0;
 HEAP32[i10 >> 2] = i6;
 i11 = i1 + 20 | 0;
 HEAP32[i11 >> 2] = i5;
 return;
}

function __ZN15CityMapRenderer22generateQueue_overlay3Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, d55 = 0.0, f56 = f0, f57 = f0, i58 = 0, i59 = 0, f60 = f0, f61 = f0, f62 = f0, i63 = 0, f64 = f0, f65 = f0, f66 = f0, i67 = 0, i68 = 0, f69 = f0, f70 = f0, f71 = f0, f72 = f0, f73 = f0, f74 = f0, f75 = f0, f76 = f0, f77 = f0, f78 = f0, f79 = f0, f80 = f0, f81 = f0, f82 = f0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(304);
 i3 = i2 + 232 | 0;
 i4 = i2 + 220 | 0;
 i5 = i2 + 208 | 0;
 i6 = i2 + 144 | 0;
 i7 = i2 + 80 | 0;
 i8 = i2 + 64 | 0;
 i9 = i2;
 __ZN11RenderQueue5clearEv(i1);
 i10 = i1 + 248 | 0;
 i11 = HEAP32[i10 >> 2] | 0;
 if (!(HEAP32[i11 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 i12 = i1 + 252 | 0;
 i13 = i5 + 4 | 0;
 i14 = i5 + 8 | 0;
 i15 = i6 + 4 | 0;
 i16 = i6 + 20 | 0;
 i17 = i6 + 24 | 0;
 i18 = i6 + 40 | 0;
 i19 = i6 + 44 | 0;
 i20 = i6 + 48 | 0;
 i21 = i6 + 52 | 0;
 i22 = i6 + 56 | 0;
 i23 = i6 + 60 | 0;
 i24 = i8 + 4 | 0;
 i25 = i8 + 8 | 0;
 i26 = i9 + 4 | 0;
 i27 = i9 + 20 | 0;
 i28 = i9 + 24 | 0;
 i29 = i9 + 40 | 0;
 i30 = i9 + 44 | 0;
 i31 = i9 + 48 | 0;
 i32 = i9 + 52 | 0;
 i33 = i9 + 56 | 0;
 i34 = i9 + 60 | 0;
 i35 = i7 + 4 | 0;
 i36 = i7 + 8 | 0;
 i37 = i7 + 12 | 0;
 i38 = i7 + 16 | 0;
 i39 = i7 + 20 | 0;
 i40 = i7 + 24 | 0;
 i41 = i7 + 28 | 0;
 i42 = i7 + 32 | 0;
 i43 = i7 + 36 | 0;
 i44 = i7 + 40 | 0;
 i45 = i7 + 44 | 0;
 i46 = i7 + 48 | 0;
 i47 = i7 + 52 | 0;
 i48 = i7 + 56 | 0;
 i49 = i7 + 60 | 0;
 i50 = i4 + 4 | 0;
 i51 = i4 + 8 | 0;
 i52 = 0;
 i53 = i11;
 while (1) {
  if (!(HEAP32[i53 + 4 >> 2] | 0)) i54 = i53; else {
   d55 = +(i52 | 0);
   f56 = Math_fround(i52 | 0);
   f57 = Math_fround(f56 * Math_fround(0.0));
   i11 = 0;
   i58 = i53;
   while (1) {
    i59 = HEAP32[i12 >> 2] | 0;
    f60 = Math_fround(HEAPF32[i59 + 68 >> 2]);
    f61 = Math_fround(d55 - +HEAPF64[i59 + 48 >> 3]);
    f62 = Math_fround(+(i11 | 0) - +HEAPF64[i59 + 56 >> 3]);
    i63 = HEAP32[i59 + 72 >> 2] | 0;
    f64 = Math_fround(Math_fround(13.1999998) / Math_fround(HEAP32[i63 + 4 >> 2] | 0));
    f65 = Math_fround(Math_fround(9.39999961) / Math_fround(HEAP32[i63 + 8 >> 2] | 0));
    f66 = Math_fround(f61 + f62);
    if (Math_fround(Math_fround(f60 * Math_fround(f66 + Math_fround(1.0))) * f65) > Math_fround(-1.0)) if (Math_fround(Math_fround(f60 * Math_fround(f66 + Math_fround(-1.0))) * f65) < Math_fround(1.0)) {
     f65 = Math_fround(f61 - f62);
     if (Math_fround(f64 * Math_fround(f60 * Math_fround(f65 + Math_fround(1.0)))) > Math_fround(-1.0)) if (Math_fround(f64 * Math_fround(f60 * Math_fround(f65 + Math_fround(-1.0)))) < Math_fround(1.0)) {
      f65 = Math_fround(i11 | 0);
      f60 = Math_fround(f65 * Math_fround(0.0));
      f64 = Math_fround(Math_fround(f60 + f56) + Math_fround(0.0));
      f62 = Math_fround(Math_fround(f57 + f65) + Math_fround(0.0));
      f65 = Math_fround(Math_fround(f57 + f60) + Math_fround(0.0));
      f60 = Math_fround(f65 + Math_fround(1.0));
      i63 = __ZN7CityMap7getTileEjj(i58, i52, i11) | 0;
      __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i12 >> 2] | 0) + 44 >> 2] | 0);
      __ZN11RenderQueue7setMeshEi(i1, 0);
      if (!(HEAP32[i63 + 72 >> 2] & 2)) {
       HEAPF32[i5 >> 2] = Math_fround(.689999997);
       HEAPF32[i13 >> 2] = Math_fround(.689999997);
       HEAPF32[i14 >> 2] = Math_fround(.689999997);
       HEAP32[i3 >> 2] = HEAP32[i5 >> 2];
       HEAP32[i3 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
       HEAP32[i3 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
       __ZN11RenderQueue10setDiffuseEN3glm3vecILi3EfLNS0_9qualifierE0EEE(i1, i3);
      } else {
       HEAPF32[i4 >> 2] = Math_fround(.600000024);
       HEAPF32[i50 >> 2] = Math_fround(.968999981);
       HEAPF32[i51 >> 2] = Math_fround(.600000024);
       HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
       HEAP32[i3 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
       HEAP32[i3 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
       __ZN11RenderQueue10setDiffuseEN3glm3vecILi3EfLNS0_9qualifierE0EEE(i1, i3);
      }
      HEAP32[i6 >> 2] = 1065353216;
      HEAP32[i15 >> 2] = 0;
      HEAP32[i15 + 4 >> 2] = 0;
      HEAP32[i15 + 8 >> 2] = 0;
      HEAP32[i15 + 12 >> 2] = 0;
      HEAP32[i16 >> 2] = 1065353216;
      HEAP32[i17 >> 2] = 0;
      HEAP32[i17 + 4 >> 2] = 0;
      HEAP32[i17 + 8 >> 2] = 0;
      HEAP32[i17 + 12 >> 2] = 0;
      HEAP32[i18 >> 2] = 1065353216;
      HEAPF32[i19 >> 2] = Math_fround(0.0);
      HEAPF32[i20 >> 2] = f64;
      HEAPF32[i21 >> 2] = f62;
      HEAPF32[i22 >> 2] = f65;
      HEAPF32[i23 >> 2] = f60;
      i59 = i3;
      i67 = i6;
      i68 = i59 + 64 | 0;
      do {
       HEAP32[i59 >> 2] = HEAP32[i67 >> 2];
       i59 = i59 + 4 | 0;
       i67 = i67 + 4 | 0;
      } while ((i59 | 0) < (i68 | 0));
      __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i3);
      if (HEAP32[i63 + 16 >> 2] | 0) {
       f61 = Math_fround(Math_fround(HEAP32[i63 + 24 >> 2] | 0) * Math_fround(1.57079637));
       f66 = Math_fround(_cosf(f61));
       f69 = Math_fround(_sinf(f61));
       f61 = Math_fround(Math_fround(1.0) - f66);
       f70 = Math_fround(f61 * Math_fround(0.0));
       f71 = Math_fround(f70 * Math_fround(0.0));
       f72 = Math_fround(f66 + f71);
       f73 = Math_fround(f69 + f71);
       f74 = Math_fround(f69 * Math_fround(0.0));
       f75 = Math_fround(f70 - f74);
       f76 = Math_fround(f71 - f69);
       f69 = Math_fround(f74 + f70);
       f70 = Math_fround(f66 + f61);
       f61 = Math_fround(f72 * Math_fround(.330000013));
       f66 = Math_fround(f72 * Math_fround(0.0));
       f72 = Math_fround(f73 * Math_fround(0.0));
       f74 = Math_fround(f66 + f72);
       f71 = Math_fround(f75 * Math_fround(0.0));
       f77 = Math_fround(f75 * Math_fround(.330000013));
       f75 = Math_fround(f71 + Math_fround(f61 + f72));
       f72 = Math_fround(f71 + Math_fround(f66 + Math_fround(f73 * Math_fround(.330000013))));
       f73 = Math_fround(f77 + f74);
       f78 = Math_fround(f71 + f74);
       f74 = Math_fround(f76 * Math_fround(0.0));
       f79 = Math_fround(f74 + f66);
       f80 = Math_fround(f69 * Math_fround(0.0));
       f81 = Math_fround(f69 * Math_fround(.330000013));
       f69 = Math_fround(f80 + Math_fround(Math_fround(f76 * Math_fround(.330000013)) + f66));
       f66 = Math_fround(f80 + Math_fround(f74 + f61));
       f61 = Math_fround(f81 + f79);
       f74 = Math_fround(f80 + f79);
       f79 = Math_fround(f80 + f71);
       f76 = Math_fround(f70 * Math_fround(0.0));
       f82 = Math_fround(f76 + Math_fround(f81 + f71));
       f71 = Math_fround(f76 + Math_fround(f80 + f77));
       f77 = Math_fround(Math_fround(f70 * Math_fround(.330000013)) + f79);
       f70 = Math_fround(f76 + f79);
       __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i12 >> 2] | 0) + 44 >> 2] | 0);
       __ZN11RenderQueue7setMeshEi(i1, (HEAP32[i63 + 20 >> 2] | 0) + 3 | 0);
       HEAPF32[i7 >> 2] = f75;
       HEAPF32[i35 >> 2] = f72;
       HEAPF32[i36 >> 2] = f73;
       HEAPF32[i37 >> 2] = f78;
       HEAPF32[i38 >> 2] = f69;
       HEAPF32[i39 >> 2] = f66;
       HEAPF32[i40 >> 2] = f61;
       HEAPF32[i41 >> 2] = f74;
       HEAPF32[i42 >> 2] = f82;
       HEAPF32[i43 >> 2] = f71;
       HEAPF32[i44 >> 2] = f77;
       HEAPF32[i45 >> 2] = f70;
       HEAPF32[i46 >> 2] = f64;
       HEAPF32[i47 >> 2] = f62;
       HEAPF32[i48 >> 2] = f65;
       HEAPF32[i49 >> 2] = f60;
       i59 = i3;
       i67 = i7;
       i68 = i59 + 64 | 0;
       do {
        HEAP32[i59 >> 2] = HEAP32[i67 >> 2];
        i59 = i59 + 4 | 0;
        i67 = i67 + 4 | 0;
       } while ((i59 | 0) < (i68 | 0));
       __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i3);
      }
      if ((HEAP32[i63 + 12 >> 2] | 0) == 2) {
       __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i12 >> 2] | 0) + 40 >> 2] | 0);
       __ZN11RenderQueue7setMeshEi(i1, 13);
       HEAPF32[i8 >> 2] = Math_fround(1.0);
       HEAPF32[i24 >> 2] = Math_fround(1.0);
       HEAPF32[i25 >> 2] = Math_fround(1.0);
       HEAP32[i3 >> 2] = HEAP32[i8 >> 2];
       HEAP32[i3 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
       HEAP32[i3 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
       __ZN11RenderQueue10setDiffuseEN3glm3vecILi3EfLNS0_9qualifierE0EEE(i1, i3);
       HEAPF32[i9 >> 2] = Math_fround(.75);
       HEAP32[i26 >> 2] = 0;
       HEAP32[i26 + 4 >> 2] = 0;
       HEAP32[i26 + 8 >> 2] = 0;
       HEAP32[i26 + 12 >> 2] = 0;
       HEAPF32[i27 >> 2] = Math_fround(.75);
       HEAP32[i28 >> 2] = 0;
       HEAP32[i28 + 4 >> 2] = 0;
       HEAP32[i28 + 8 >> 2] = 0;
       HEAP32[i28 + 12 >> 2] = 0;
       HEAPF32[i29 >> 2] = Math_fround(.75);
       HEAPF32[i30 >> 2] = Math_fround(0.0);
       HEAPF32[i31 >> 2] = f64;
       HEAPF32[i32 >> 2] = f62;
       HEAPF32[i33 >> 2] = f65;
       HEAPF32[i34 >> 2] = f60;
       i59 = i3;
       i67 = i9;
       i68 = i59 + 64 | 0;
       do {
        HEAP32[i59 >> 2] = HEAP32[i67 >> 2];
        i59 = i59 + 4 | 0;
        i67 = i67 + 4 | 0;
       } while ((i59 | 0) < (i68 | 0));
       __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i3);
      }
     }
    }
    i11 = i11 + 1 | 0;
    i67 = HEAP32[i10 >> 2] | 0;
    if (i11 >>> 0 >= (HEAP32[i67 + 4 >> 2] | 0) >>> 0) {
     i54 = i67;
     break;
    } else i58 = i67;
   }
  }
  i52 = i52 + 1 | 0;
  if (i52 >>> 0 >= (HEAP32[i54 >> 2] | 0) >>> 0) break; else i53 = i54;
 }
 STACKTOP = i2;
 return;
}

function _inflate_table(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0;
 i7 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i9 = i8 + 32 | 0;
 i10 = i8;
 i11 = i9;
 i12 = i11 + 32 | 0;
 do {
  HEAP16[i11 >> 1] = 0;
  i11 = i11 + 2 | 0;
 } while ((i11 | 0) < (i12 | 0));
 i11 = (i3 | 0) == 0;
 if (i11) {
  i13 = HEAP32[i5 >> 2] | 0;
  i7 = 5;
 } else {
  i12 = 0;
  do {
   i14 = i9 + (HEAPU16[i2 + (i12 << 1) >> 1] << 1) | 0;
   HEAP16[i14 >> 1] = (HEAP16[i14 >> 1] | 0) + 1 << 16 >> 16;
   i12 = i12 + 1 | 0;
  } while ((i12 | 0) != (i3 | 0));
  i12 = HEAP16[i9 + 30 >> 1] | 0;
  i14 = HEAP32[i5 >> 2] | 0;
  if (!(i12 << 16 >> 16)) {
   i13 = i14;
   i7 = 5;
  } else {
   i15 = 15;
   i16 = i14;
   i17 = i12;
   i7 = 7;
  }
 }
 do if ((i7 | 0) == 5) if (!(HEAP16[i9 + 28 >> 1] | 0)) if (!(HEAP16[i9 + 26 >> 1] | 0)) if (!(HEAP16[i9 + 24 >> 1] | 0)) if (!(HEAP16[i9 + 22 >> 1] | 0)) if (!(HEAP16[i9 + 20 >> 1] | 0)) if (!(HEAP16[i9 + 18 >> 1] | 0)) if (!(HEAP16[i9 + 16 >> 1] | 0)) if (!(HEAP16[i9 + 14 >> 1] | 0)) if (!(HEAP16[i9 + 12 >> 1] | 0)) if (!(HEAP16[i9 + 10 >> 1] | 0)) if (!(HEAP16[i9 + 8 >> 1] | 0)) if (!(HEAP16[i9 + 6 >> 1] | 0)) if (!(HEAP16[i9 + 4 >> 1] | 0)) {
  if (HEAP16[i9 + 2 >> 1] | 0) {
   i18 = (i13 | 0) != 0 & 1;
   i19 = 1;
   i20 = 1;
   i21 = 0;
   break;
  }
  i12 = HEAP32[i4 >> 2] | 0;
  HEAP32[i4 >> 2] = i12 + 4;
  HEAP8[i12 >> 0] = 64;
  HEAP8[i12 + 1 >> 0] = 1;
  HEAP16[i12 + 2 >> 1] = 0;
  i12 = HEAP32[i4 >> 2] | 0;
  HEAP32[i4 >> 2] = i12 + 4;
  HEAP8[i12 >> 0] = 64;
  HEAP8[i12 + 1 >> 0] = 1;
  HEAP16[i12 + 2 >> 1] = 0;
  HEAP32[i5 >> 2] = 1;
  i22 = 0;
  STACKTOP = i8;
  return i22 | 0;
 } else {
  i15 = 2;
  i16 = i13;
  i17 = 0;
  i7 = 7;
 } else {
  i15 = 3;
  i16 = i13;
  i17 = 0;
  i7 = 7;
 } else {
  i15 = 4;
  i16 = i13;
  i17 = 0;
  i7 = 7;
 } else {
  i15 = 5;
  i16 = i13;
  i17 = 0;
  i7 = 7;
 } else {
  i15 = 6;
  i16 = i13;
  i17 = 0;
  i7 = 7;
 } else {
  i15 = 7;
  i16 = i13;
  i17 = 0;
  i7 = 7;
 } else {
  i15 = 8;
  i16 = i13;
  i17 = 0;
  i7 = 7;
 } else {
  i15 = 9;
  i16 = i13;
  i17 = 0;
  i7 = 7;
 } else {
  i15 = 10;
  i16 = i13;
  i17 = 0;
  i7 = 7;
 } else {
  i15 = 11;
  i16 = i13;
  i17 = 0;
  i7 = 7;
 } else {
  i15 = 12;
  i16 = i13;
  i17 = 0;
  i7 = 7;
 } else {
  i15 = 13;
  i16 = i13;
  i17 = 0;
  i7 = 7;
 } else {
  i15 = 14;
  i16 = i13;
  i17 = 0;
  i7 = 7;
 } while (0);
 L25 : do if ((i7 | 0) == 7) {
  i13 = i16 >>> 0 > i15 >>> 0 ? i15 : i16;
  i12 = 1;
  while (1) {
   if (HEAP16[i9 + (i12 << 1) >> 1] | 0) {
    i18 = i13;
    i19 = i15;
    i20 = i12;
    i21 = i17;
    break L25;
   }
   i14 = i12 + 1 | 0;
   if (i14 >>> 0 < i15 >>> 0) i12 = i14; else {
    i18 = i13;
    i19 = i15;
    i20 = i14;
    i21 = i17;
    break;
   }
  }
 } while (0);
 i17 = i18 >>> 0 < i20 >>> 0 ? i20 : i18;
 i18 = HEAP16[i9 + 2 >> 1] | 0;
 i15 = i18 & 65535;
 i16 = 2 - i15 | 0;
 if ((i16 | 0) < 0) {
  i22 = -1;
  STACKTOP = i8;
  return i22 | 0;
 }
 i13 = HEAPU16[i9 + 4 >> 1] | 0;
 i12 = (i16 << 1) - i13 | 0;
 if ((i12 | 0) < 0) {
  i22 = -1;
  STACKTOP = i8;
  return i22 | 0;
 }
 i16 = HEAPU16[i9 + 6 >> 1] | 0;
 i14 = (i12 << 1) - i16 | 0;
 if ((i14 | 0) < 0) {
  i22 = -1;
  STACKTOP = i8;
  return i22 | 0;
 }
 i12 = HEAPU16[i9 + 8 >> 1] | 0;
 i23 = (i14 << 1) - i12 | 0;
 if ((i23 | 0) < 0) {
  i22 = -1;
  STACKTOP = i8;
  return i22 | 0;
 }
 i14 = HEAPU16[i9 + 10 >> 1] | 0;
 i24 = (i23 << 1) - i14 | 0;
 if ((i24 | 0) < 0) {
  i22 = -1;
  STACKTOP = i8;
  return i22 | 0;
 }
 i23 = HEAPU16[i9 + 12 >> 1] | 0;
 i25 = (i24 << 1) - i23 | 0;
 if ((i25 | 0) < 0) {
  i22 = -1;
  STACKTOP = i8;
  return i22 | 0;
 }
 i24 = HEAPU16[i9 + 14 >> 1] | 0;
 i26 = (i25 << 1) - i24 | 0;
 if ((i26 | 0) < 0) {
  i22 = -1;
  STACKTOP = i8;
  return i22 | 0;
 }
 i25 = HEAPU16[i9 + 16 >> 1] | 0;
 i27 = (i26 << 1) - i25 | 0;
 if ((i27 | 0) < 0) {
  i22 = -1;
  STACKTOP = i8;
  return i22 | 0;
 }
 i26 = HEAPU16[i9 + 18 >> 1] | 0;
 i28 = (i27 << 1) - i26 | 0;
 if ((i28 | 0) < 0) {
  i22 = -1;
  STACKTOP = i8;
  return i22 | 0;
 }
 i27 = HEAPU16[i9 + 20 >> 1] | 0;
 i29 = (i28 << 1) - i27 | 0;
 if ((i29 | 0) < 0) {
  i22 = -1;
  STACKTOP = i8;
  return i22 | 0;
 }
 i28 = HEAPU16[i9 + 22 >> 1] | 0;
 i30 = (i29 << 1) - i28 | 0;
 if ((i30 | 0) < 0) {
  i22 = -1;
  STACKTOP = i8;
  return i22 | 0;
 }
 i29 = HEAPU16[i9 + 24 >> 1] | 0;
 i31 = (i30 << 1) - i29 | 0;
 if ((i31 | 0) < 0) {
  i22 = -1;
  STACKTOP = i8;
  return i22 | 0;
 }
 i30 = HEAPU16[i9 + 26 >> 1] | 0;
 i32 = (i31 << 1) - i30 | 0;
 if ((i32 | 0) < 0) {
  i22 = -1;
  STACKTOP = i8;
  return i22 | 0;
 }
 i31 = HEAPU16[i9 + 28 >> 1] | 0;
 i33 = (i32 << 1) - i31 | 0;
 if ((i33 | 0) < 0) {
  i22 = -1;
  STACKTOP = i8;
  return i22 | 0;
 }
 i32 = (i33 << 1) - (i21 & 65535) | 0;
 if ((i32 | 0) < 0) {
  i22 = -1;
  STACKTOP = i8;
  return i22 | 0;
 }
 if (i32 | 0) if ((i1 | 0) == 0 | (i19 | 0) != 1) {
  i22 = -1;
  STACKTOP = i8;
  return i22 | 0;
 }
 HEAP16[i10 + 2 >> 1] = 0;
 HEAP16[i10 + 4 >> 1] = i18;
 i18 = i15 + i13 | 0;
 HEAP16[i10 + 6 >> 1] = i18;
 i13 = (i18 & 65535) + i16 | 0;
 HEAP16[i10 + 8 >> 1] = i13;
 i16 = (i13 & 65535) + i12 | 0;
 HEAP16[i10 + 10 >> 1] = i16;
 i12 = (i16 & 65535) + i14 | 0;
 HEAP16[i10 + 12 >> 1] = i12;
 i14 = (i12 & 65535) + i23 | 0;
 HEAP16[i10 + 14 >> 1] = i14;
 i23 = (i14 & 65535) + i24 | 0;
 HEAP16[i10 + 16 >> 1] = i23;
 i24 = (i23 & 65535) + i25 | 0;
 HEAP16[i10 + 18 >> 1] = i24;
 i25 = (i24 & 65535) + i26 | 0;
 HEAP16[i10 + 20 >> 1] = i25;
 i26 = (i25 & 65535) + i27 | 0;
 HEAP16[i10 + 22 >> 1] = i26;
 i27 = (i26 & 65535) + i28 | 0;
 HEAP16[i10 + 24 >> 1] = i27;
 i28 = (i27 & 65535) + i29 | 0;
 HEAP16[i10 + 26 >> 1] = i28;
 i29 = (i28 & 65535) + i30 | 0;
 HEAP16[i10 + 28 >> 1] = i29;
 HEAP16[i10 + 30 >> 1] = i29 + i31;
 if (!i11) {
  i11 = 0;
  do {
   i31 = HEAP16[i2 + (i11 << 1) >> 1] | 0;
   if (i31 << 16 >> 16) {
    i29 = i10 + ((i31 & 65535) << 1) | 0;
    i31 = HEAP16[i29 >> 1] | 0;
    HEAP16[i29 >> 1] = i31 + 1 << 16 >> 16;
    HEAP16[i6 + ((i31 & 65535) << 1) >> 1] = i11;
   }
   i11 = i11 + 1 | 0;
  } while ((i11 | 0) != (i3 | 0));
 }
 switch (i1 | 0) {
 case 0:
  {
   i34 = i6;
   i35 = i6;
   i36 = 19;
   i37 = 0;
   i38 = 0;
   break;
  }
 case 1:
  {
   if (i17 >>> 0 > 9) {
    i22 = 1;
    STACKTOP = i8;
    return i22 | 0;
   } else {
    i34 = 24764;
    i35 = 24638;
    i36 = 256;
    i37 = 0;
    i38 = 1;
   }
   break;
  }
 default:
  {
   i3 = (i1 | 0) == 2;
   if (i3 & i17 >>> 0 > 9) {
    i22 = 1;
    STACKTOP = i8;
    return i22 | 0;
   } else {
    i34 = 25214;
    i35 = 25088;
    i36 = -1;
    i37 = i3;
    i38 = 0;
   }
  }
 }
 i3 = 1 << i17;
 i1 = i3 + -1 | 0;
 i11 = i17 & 255;
 i10 = HEAP32[i4 >> 2] | 0;
 i31 = -1;
 i29 = 0;
 i30 = i3;
 i3 = 0;
 i28 = i17;
 i27 = 0;
 i26 = i20;
 L93 : while (1) {
  i20 = 1 << i28;
  i39 = i29;
  i25 = i27;
  i24 = i26;
  while (1) {
   i23 = i24 - i3 | 0;
   i40 = i23 & 255;
   i14 = HEAP16[i6 + (i25 << 1) >> 1] | 0;
   i12 = i14 & 65535;
   do if ((i36 | 0) > (i12 | 0)) {
    i41 = i14;
    i42 = 0;
   } else {
    if ((i36 | 0) >= (i12 | 0)) {
     i41 = 0;
     i42 = 96;
     break;
    }
    i41 = HEAP16[i35 + (i12 << 1) >> 1] | 0;
    i42 = HEAP16[i34 + (i12 << 1) >> 1] & 255;
   } while (0);
   i12 = 1 << i23;
   i14 = i39 >>> i3;
   i16 = i20;
   do {
    i16 = i16 - i12 | 0;
    i13 = i16 + i14 | 0;
    i18 = i10 + (i13 << 2) | 0;
    HEAP8[i18 >> 0] = i42;
    HEAP8[i18 + 1 >> 0] = i40;
    HEAP16[i18 + 2 >> 1] = i41;
   } while ((i16 | 0) != 0);
   i16 = 1 << i24 + -1;
   while (1) if (!(i16 & i39)) break; else i16 = i16 >>> 1;
   i14 = i39;
   i39 = (i16 | 0) == 0 ? 0 : (i16 + -1 & i39) + i16 | 0;
   i14 = i25;
   i25 = i25 + 1 | 0;
   i14 = i9 + (i24 << 1) | 0;
   i12 = (HEAP16[i14 >> 1] | 0) + -1 << 16 >> 16;
   HEAP16[i14 >> 1] = i12;
   if (!(i12 << 16 >> 16)) {
    if ((i24 | 0) == (i19 | 0)) break L93;
    i43 = HEAPU16[i2 + (HEAPU16[i6 + (i25 << 1) >> 1] << 1) >> 1] | 0;
   } else i43 = i24;
   if (i43 >>> 0 <= i17 >>> 0) {
    i39 = i39;
    i25 = i25;
    i24 = i43;
    continue;
   }
   i44 = i39 & i1;
   if ((i44 | 0) != (i31 | 0)) break; else i24 = i43;
  }
  i24 = (i3 | 0) == 0 ? i17 : i3;
  i12 = i10 + (i20 << 2) | 0;
  i14 = i43 - i24 | 0;
  L113 : do if (i43 >>> 0 < i19 >>> 0) {
   i23 = 1 << i14;
   i18 = i14;
   i13 = i43;
   while (1) {
    i15 = i23 - (HEAPU16[i9 + (i13 << 1) >> 1] | 0) | 0;
    if ((i15 | 0) < 1) {
     i45 = i18;
     break L113;
    }
    i32 = i18 + 1 | 0;
    i13 = i32 + i24 | 0;
    if (i13 >>> 0 >= i19 >>> 0) {
     i45 = i32;
     break;
    } else {
     i23 = i15 << 1;
     i18 = i32;
    }
   }
  } else i45 = i14; while (0);
  i14 = (1 << i45) + i30 | 0;
  if (i38 & i14 >>> 0 > 852 | i37 & i14 >>> 0 > 592) {
   i22 = 1;
   i7 = 43;
   break;
  }
  i20 = HEAP32[i4 >> 2] | 0;
  i18 = i20 + (i44 << 2) | 0;
  HEAP8[i18 >> 0] = i45;
  HEAP8[i18 + 1 >> 0] = i11;
  HEAP16[i18 + 2 >> 1] = (i12 - i20 | 0) >>> 2;
  i10 = i12;
  i31 = i44;
  i29 = i39;
  i30 = i14;
  i3 = i24;
  i28 = i45;
  i27 = i25;
  i26 = i43;
 }
 if ((i7 | 0) == 43) {
  STACKTOP = i8;
  return i22 | 0;
 }
 if (i39 | 0) {
  i7 = i10 + (i39 << 2) | 0;
  HEAP8[i7 >> 0] = 64;
  HEAP8[i7 + 1 >> 0] = i40;
  HEAP16[i7 + 2 >> 1] = 0;
 }
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + (i30 << 2);
 HEAP32[i5 >> 2] = i17;
 i22 = 0;
 STACKTOP = i8;
 return i22 | 0;
}

function __ZN11RenderQueue4drawEiiP12RenderSystem(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0;
 i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176);
 i5 = i2 + 152 | 0;
 i6 = i2 + 56 | 0;
 i7 = i2 + 40 | 0;
 i8 = i2 + 12 | 0;
 i9 = i2;
 i10 = HEAP32[i1 + 96 >> 2] | 0;
 i11 = i1 + 100 | 0;
 if ((i10 | 0) == (i11 | 0)) {
  STACKTOP = i2;
  return;
 }
 i1 = i7 + 4 | 0;
 i12 = i7 + 8 | 0;
 i13 = i7 + 12 | 0;
 i14 = i7 + 8 | 0;
 i15 = i7 + 4 | 0;
 i16 = i5 + 4 | 0;
 i17 = i4 + 76 | 0;
 i18 = i5 + 8 | 0;
 i19 = i5 + 4 | 0;
 i20 = i5 + 12 | 0;
 i21 = i6 + 80 | 0;
 i22 = i6 + 92 | 0;
 i23 = i4 + 8 | 0;
 i24 = i4 + 20 | 0;
 i25 = i6 + 80 | 0;
 i26 = i6 + 84 | 0;
 i27 = i8 + 4 | 0;
 i28 = i8 + 16 | 0;
 i29 = i8 + 24 | 0;
 i30 = i6 + 76 | 0;
 i31 = i8 + 20 | 0;
 i32 = i9 + 4 | 0;
 i33 = i4 + 16 | 0;
 i34 = i4 + 28 | 0;
 i35 = i8 + 4 | 0;
 i36 = i35 + 11 | 0;
 i37 = i9 + 8 | 0;
 i38 = i6 + 64 | 0;
 i39 = i6 + 68 | 0;
 i40 = i6 + 72 | 0;
 i41 = i14;
 i42 = i10;
 while (1) {
  i10 = HEAP32[i42 + 16 >> 2] | 0;
  HEAP32[i7 >> 2] = i10;
  HEAP32[i12 >> 2] = 0;
  HEAP32[i13 >> 2] = 0;
  HEAP32[i1 >> 2] = i14;
  i43 = HEAP32[i42 + 20 >> 2] | 0;
  i44 = i42 + 24 | 0;
  if ((i43 | 0) == (i44 | 0)) i45 = i10; else {
   i10 = i43;
   while (1) {
    i43 = i10 + 16 | 0;
    HEAP32[i6 >> 2] = i41;
    HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
    __ZNSt3__26__treeINS_12__value_typeIP4MeshNS_4listIN11RenderQueue9TransformENS_9allocatorIS6_EEEEEENS_19__map_value_compareIS3_SA_NS_4lessIS3_EELb1EEENS7_ISA_EEE30__emplace_hint_unique_key_argsIS3_JRKNS_4pairIKS3_S9_EEEEENS_15__tree_iteratorISA_PNS_11__tree_nodeISA_PvEEiEENS_21__tree_const_iteratorISA_SR_iEERKT_DpOT0_(i1, i5, i43, i43) | 0;
    i43 = HEAP32[i10 + 4 >> 2] | 0;
    if (!i43) {
     i46 = i10 + 8 | 0;
     i47 = HEAP32[i46 >> 2] | 0;
     if ((HEAP32[i47 >> 2] | 0) == (i10 | 0)) i48 = i47; else {
      i47 = i46;
      do {
       i46 = HEAP32[i47 >> 2] | 0;
       i47 = i46 + 8 | 0;
       i49 = HEAP32[i47 >> 2] | 0;
      } while ((HEAP32[i49 >> 2] | 0) != (i46 | 0));
      i48 = i49;
     }
    } else {
     i47 = i43;
     while (1) {
      i49 = HEAP32[i47 >> 2] | 0;
      if (!i49) break; else i47 = i49;
     }
     i48 = i47;
    }
    if ((i48 | 0) == (i44 | 0)) break; else i10 = i48;
   }
   i45 = HEAP32[i7 >> 2] | 0;
  }
  _glUseProgram(i45 | 0);
  i10 = HEAP32[i1 >> 2] | 0;
  if ((i10 | 0) != (i14 | 0)) {
   i44 = i10;
   while (1) {
    HEAP32[i5 >> 2] = HEAP32[i44 + 16 >> 2];
    __ZNSt3__24listIN11RenderQueue9TransformENS_9allocatorIS2_EEEC2ERKS5_(i16, i44 + 20 | 0);
    i10 = HEAP32[i5 >> 2] | 0;
    if (__ZN12RenderSystem15enableVertexPosEi(i4, HEAP32[i7 >> 2] | 0) | 0) {
     _glBindBuffer(34962, HEAP32[i10 + 124 >> 2] | 0);
     _glVertexAttribPointer(HEAP32[i17 >> 2] | 0, 4, 5126, 0, 0, 0);
    }
    if (__ZN12RenderSystem14enableVertexUVEi(i4, HEAP32[i7 >> 2] | 0) | 0) {
     _glBindBuffer(34962, HEAP32[i10 + 128 >> 2] | 0);
     _glVertexAttribPointer(HEAP32[i17 >> 2] | 0, 2, 5126, 0, 0, 0);
    }
    i43 = HEAP32[i10 + 144 >> 2] | 0;
    if (!i43) {
     _glActiveTexture(33984);
     _glBindTexture(3553, 0);
    } else __ZN7Texture4bindEv(i43);
    i43 = HEAP32[i18 >> 2] | 0;
    i49 = i43;
    if ((i16 | 0) != (i49 | 0)) {
     i46 = i10 + 132 | 0;
     i50 = i10 + 136 | 0;
     i51 = i10 + 148 | 0;
     i10 = i43;
     i43 = i49;
     do {
      i49 = i10;
      i52 = i49 + 8 | 0;
      i53 = i6;
      i54 = i52;
      i55 = i53 + 76 | 0;
      do {
       HEAP32[i53 >> 2] = HEAP32[i54 >> 2];
       i53 = i53 + 4 | 0;
       i54 = i54 + 4 | 0;
      } while ((i53 | 0) < (i55 | 0));
      HEAP8[i6 + 76 >> 0] = HEAP8[i52 + 76 >> 0] | 0;
      __ZNSt3__26vectorIiNS_9allocatorIiEEEC2ERKS3_(i21, i49 + 88 | 0);
      HEAP8[i22 >> 0] = HEAP8[i49 + 100 >> 0] | 0;
      _glUniformMatrix4fv(HEAP32[i23 >> 2] | 0, 1, 0, i6 | 0);
      _glUniformMatrix4fv(HEAP32[i24 >> 2] | 0, 1, 0, i6 | 0);
      i54 = HEAP32[i46 >> 2] | 0;
      if ((i54 | 0) != (i50 | 0)) {
       i53 = i54;
       while (1) {
        HEAP32[i8 >> 2] = HEAP32[i53 + 16 >> 2];
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_(i27, i53 + 20 | 0);
        i54 = i53 + 32 | 0;
        HEAP32[i28 >> 2] = HEAP32[i54 >> 2];
        HEAP32[i28 + 4 >> 2] = HEAP32[i54 + 4 >> 2];
        HEAP32[i28 + 8 >> 2] = HEAP32[i54 + 8 >> 2];
        _glBindBuffer(34963, HEAP32[i29 >> 2] | 0);
        HEAP32[i9 >> 2] = HEAP32[974];
        HEAP32[i9 + 4 >> 2] = HEAP32[975];
        HEAP32[i9 + 8 >> 2] = HEAP32[976];
        do if (!(HEAP8[i30 >> 0] | 0)) {
         if (HEAP8[i22 >> 0] | 0) {
          i54 = HEAP32[(HEAP32[i21 >> 2] | 0) + (HEAP32[i31 >> 2] << 2) >> 2] | 0;
          i55 = HEAP32[HEAP32[i51 >> 2] >> 2] | 0;
          i56 = i55 + (i54 * 12 | 0) | 0;
          HEAP32[i9 >> 2] = HEAP32[i56 >> 2];
          HEAP32[i32 >> 2] = HEAP32[i56 + 4 >> 2];
          i57 = i56 + 8 | 0;
          i3 = 53;
          break;
         }
         i56 = HEAP32[i51 >> 2] | 0;
         if (i56 | 0) {
          i54 = HEAP32[i56 >> 2] | 0;
          i55 = ((HEAP32[i31 >> 2] | 0) >>> 0) % ((((HEAP32[i56 + 4 >> 2] | 0) - i54 | 0) / 12 | 0) >>> 0) | 0;
          i56 = i54;
          i54 = i56 + (i55 * 12 | 0) | 0;
          HEAP32[i9 >> 2] = HEAP32[i54 >> 2];
          HEAP32[i32 >> 2] = HEAP32[i54 + 4 >> 2];
          i57 = i54 + 8 | 0;
          i3 = 53;
         }
        } else {
         HEAP32[i9 >> 2] = HEAP32[i38 >> 2];
         HEAP32[i32 >> 2] = HEAP32[i39 >> 2];
         i57 = i40;
         i3 = 53;
        } while (0);
        if ((i3 | 0) == 53) {
         i3 = 0;
         HEAP32[i37 >> 2] = HEAP32[i57 >> 2];
        }
        _glUniform3fv(HEAP32[i33 >> 2] | 0, 1, i9 | 0);
        _glUniform3fv(HEAP32[i34 >> 2] | 0, 1, i9 | 0);
        _glDrawElements(4, HEAP32[i28 >> 2] | 0, 5123, 0);
        if ((HEAP8[i36 >> 0] | 0) < 0) __ZdlPv(HEAP32[i35 >> 2] | 0);
        i54 = HEAP32[i53 + 4 >> 2] | 0;
        if (!i54) {
         i55 = i53 + 8 | 0;
         i56 = HEAP32[i55 >> 2] | 0;
         if ((HEAP32[i56 >> 2] | 0) == (i53 | 0)) i58 = i56; else {
          i56 = i55;
          do {
           i55 = HEAP32[i56 >> 2] | 0;
           i56 = i55 + 8 | 0;
           i59 = HEAP32[i56 >> 2] | 0;
          } while ((HEAP32[i59 >> 2] | 0) != (i55 | 0));
          i58 = i59;
         }
        } else {
         i56 = i54;
         while (1) {
          i59 = HEAP32[i56 >> 2] | 0;
          if (!i59) break; else i56 = i59;
         }
         i58 = i56;
        }
        if ((i58 | 0) == (i50 | 0)) break; else i53 = i58;
       }
      }
      i53 = HEAP32[i25 >> 2] | 0;
      if (i53 | 0) {
       i49 = HEAP32[i26 >> 2] | 0;
       if ((i49 | 0) != (i53 | 0)) HEAP32[i26 >> 2] = i49 + (~((i49 + -4 - i53 | 0) >>> 2) << 2);
       __ZdlPv(i53);
      }
      i10 = HEAP32[i43 + 4 >> 2] | 0;
      i43 = i10;
     } while ((i16 | 0) != (i43 | 0));
    }
    if (HEAP32[i20 >> 2] | 0) {
     i43 = HEAP32[i18 >> 2] | 0;
     i10 = (HEAP32[i19 >> 2] | 0) + 4 | 0;
     i50 = HEAP32[i43 >> 2] | 0;
     HEAP32[i50 + 4 >> 2] = HEAP32[i10 >> 2];
     HEAP32[HEAP32[i10 >> 2] >> 2] = i50;
     HEAP32[i20 >> 2] = 0;
     if ((i43 | 0) != (i19 | 0)) {
      i50 = i43;
      do {
       i43 = i50;
       i50 = HEAP32[i50 + 4 >> 2] | 0;
       i10 = HEAP32[i43 + 88 >> 2] | 0;
       if (i10 | 0) {
        i51 = i43 + 92 | 0;
        i46 = HEAP32[i51 >> 2] | 0;
        if ((i46 | 0) != (i10 | 0)) HEAP32[i51 >> 2] = i46 + (~((i46 + -4 - i10 | 0) >>> 2) << 2);
        __ZdlPv(i10);
       }
       __ZdlPv(i43);
      } while ((i50 | 0) != (i19 | 0));
     }
    }
    i50 = HEAP32[i44 + 4 >> 2] | 0;
    if (!i50) {
     i43 = i44 + 8 | 0;
     i10 = HEAP32[i43 >> 2] | 0;
     if ((HEAP32[i10 >> 2] | 0) == (i44 | 0)) i60 = i10; else {
      i10 = i43;
      do {
       i43 = HEAP32[i10 >> 2] | 0;
       i10 = i43 + 8 | 0;
       i46 = HEAP32[i10 >> 2] | 0;
      } while ((HEAP32[i46 >> 2] | 0) != (i43 | 0));
      i60 = i46;
     }
    } else {
     i10 = i50;
     while (1) {
      i46 = HEAP32[i10 >> 2] | 0;
      if (!i46) break; else i10 = i46;
     }
     i60 = i10;
    }
    if ((i60 | 0) == (i14 | 0)) break; else i44 = i60;
   }
  }
  __ZNSt3__26__treeINS_12__value_typeIP4MeshNS_4listIN11RenderQueue9TransformENS_9allocatorIS6_EEEEEENS_19__map_value_compareIS3_SA_NS_4lessIS3_EELb1EEENS7_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE(i15, HEAP32[i14 >> 2] | 0);
  i44 = HEAP32[i42 + 4 >> 2] | 0;
  if (!i44) {
   i50 = i42 + 8 | 0;
   i46 = HEAP32[i50 >> 2] | 0;
   if ((HEAP32[i46 >> 2] | 0) == (i42 | 0)) i61 = i46; else {
    i46 = i50;
    do {
     i50 = HEAP32[i46 >> 2] | 0;
     i46 = i50 + 8 | 0;
     i43 = HEAP32[i46 >> 2] | 0;
    } while ((HEAP32[i43 >> 2] | 0) != (i50 | 0));
    i61 = i43;
   }
  } else {
   i46 = i44;
   while (1) {
    i43 = HEAP32[i46 >> 2] | 0;
    if (!i43) break; else i46 = i43;
   }
   i61 = i46;
  }
  if ((i61 | 0) == (i11 | 0)) break; else i42 = i61;
 }
 STACKTOP = i2;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0;
 i8 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 i10 = i9 + 128 | 0;
 i11 = i9 + 112 | 0;
 i12 = i9 + 124 | 0;
 i13 = i9 + 120 | 0;
 i14 = i9 + 116 | 0;
 i15 = i9 + 108 | 0;
 i16 = i9 + 104 | 0;
 i17 = i9 + 100 | 0;
 i18 = i9 + 96 | 0;
 i19 = i9 + 92 | 0;
 i20 = i9 + 88 | 0;
 i21 = i9 + 84 | 0;
 i22 = i9 + 80 | 0;
 i23 = i9 + 76 | 0;
 i24 = i9 + 72 | 0;
 i25 = i9 + 68 | 0;
 i26 = i9 + 64 | 0;
 i27 = i9 + 60 | 0;
 i28 = i9 + 56 | 0;
 i29 = i9 + 52 | 0;
 i30 = i9 + 48 | 0;
 i31 = i9 + 44 | 0;
 i32 = i9 + 40 | 0;
 i33 = i9 + 36 | 0;
 i34 = i9 + 32 | 0;
 i35 = i9 + 28 | 0;
 i36 = i9 + 24 | 0;
 i37 = i9 + 20 | 0;
 i38 = i9 + 16 | 0;
 i39 = i9 + 12 | 0;
 i40 = i9 + 8 | 0;
 i41 = i9 + 4 | 0;
 i42 = i9;
 HEAP32[i5 >> 2] = 0;
 __ZNKSt3__28ios_base6getlocEv(i10, i4);
 i43 = __ZNKSt3__26locale9use_facetERNS0_2idE(i10, 5845220) | 0;
 __ZNSt3__26localeD2Ev(i10);
 do switch (i7 << 24 >> 24 | 0) {
 case 65:
 case 97:
  {
   HEAP32[i12 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i10 >> 2] = HEAP32[i12 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i6 + 24 | 0, i2, i10, i5, i43);
   i8 = 26;
   break;
  }
 case 104:
 case 66:
 case 98:
  {
   HEAP32[i13 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i10 >> 2] = HEAP32[i13 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i6 + 16 | 0, i2, i10, i5, i43);
   i8 = 26;
   break;
  }
 case 99:
  {
   i44 = i1 + 8 | 0;
   i45 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i44 >> 2] | 0) + 12 >> 2] & 127](i44) | 0;
   HEAP32[i14 >> 2] = HEAP32[i2 >> 2];
   HEAP32[i15 >> 2] = HEAP32[i3 >> 2];
   i44 = HEAP8[i45 + 8 + 3 >> 0] | 0;
   i46 = i44 << 24 >> 24 < 0;
   i47 = i46 ? HEAP32[i45 >> 2] | 0 : i45;
   i48 = i47 + ((i46 ? HEAP32[i45 + 4 >> 2] | 0 : i44 & 255) << 2) | 0;
   HEAP32[i11 >> 2] = HEAP32[i14 >> 2];
   HEAP32[i10 >> 2] = HEAP32[i15 >> 2];
   i44 = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i1, i11, i10, i4, i5, i6, i47, i48) | 0;
   HEAP32[i2 >> 2] = i44;
   i8 = 26;
   break;
  }
 case 101:
 case 100:
  {
   HEAP32[i16 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i10 >> 2] = HEAP32[i16 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i6 + 12 | 0, i2, i10, i5, i43);
   i8 = 26;
   break;
  }
 case 68:
  {
   HEAP32[i17 >> 2] = HEAP32[i2 >> 2];
   HEAP32[i18 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i11 >> 2] = HEAP32[i17 >> 2];
   HEAP32[i10 >> 2] = HEAP32[i18 >> 2];
   i44 = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i1, i11, i10, i4, i5, i6, 19836, 19868) | 0;
   HEAP32[i2 >> 2] = i44;
   i8 = 26;
   break;
  }
 case 70:
  {
   HEAP32[i19 >> 2] = HEAP32[i2 >> 2];
   HEAP32[i20 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i11 >> 2] = HEAP32[i19 >> 2];
   HEAP32[i10 >> 2] = HEAP32[i20 >> 2];
   i44 = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i1, i11, i10, i4, i5, i6, 19868, 19900) | 0;
   HEAP32[i2 >> 2] = i44;
   i8 = 26;
   break;
  }
 case 72:
  {
   HEAP32[i21 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i10 >> 2] = HEAP32[i21 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i6 + 8 | 0, i2, i10, i5, i43);
   i8 = 26;
   break;
  }
 case 73:
  {
   HEAP32[i22 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i10 >> 2] = HEAP32[i22 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i6 + 8 | 0, i2, i10, i5, i43);
   i8 = 26;
   break;
  }
 case 106:
  {
   HEAP32[i23 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i10 >> 2] = HEAP32[i23 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i6 + 28 | 0, i2, i10, i5, i43);
   i8 = 26;
   break;
  }
 case 109:
  {
   HEAP32[i24 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i10 >> 2] = HEAP32[i24 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i6 + 16 | 0, i2, i10, i5, i43);
   i8 = 26;
   break;
  }
 case 77:
  {
   HEAP32[i25 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i10 >> 2] = HEAP32[i25 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i6 + 4 | 0, i2, i10, i5, i43);
   i8 = 26;
   break;
  }
 case 116:
 case 110:
  {
   HEAP32[i26 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i10 >> 2] = HEAP32[i26 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE(i1, i2, i10, i5, i43);
   i8 = 26;
   break;
  }
 case 112:
  {
   HEAP32[i27 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i10 >> 2] = HEAP32[i27 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i6 + 8 | 0, i2, i10, i5, i43);
   i8 = 26;
   break;
  }
 case 114:
  {
   HEAP32[i28 >> 2] = HEAP32[i2 >> 2];
   HEAP32[i29 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i11 >> 2] = HEAP32[i28 >> 2];
   HEAP32[i10 >> 2] = HEAP32[i29 >> 2];
   i44 = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i1, i11, i10, i4, i5, i6, 19900, 19944) | 0;
   HEAP32[i2 >> 2] = i44;
   i8 = 26;
   break;
  }
 case 82:
  {
   HEAP32[i30 >> 2] = HEAP32[i2 >> 2];
   HEAP32[i31 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i11 >> 2] = HEAP32[i30 >> 2];
   HEAP32[i10 >> 2] = HEAP32[i31 >> 2];
   i44 = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i1, i11, i10, i4, i5, i6, 19944, 19964) | 0;
   HEAP32[i2 >> 2] = i44;
   i8 = 26;
   break;
  }
 case 83:
  {
   HEAP32[i32 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i10 >> 2] = HEAP32[i32 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i6, i2, i10, i5, i43);
   i8 = 26;
   break;
  }
 case 84:
  {
   HEAP32[i33 >> 2] = HEAP32[i2 >> 2];
   HEAP32[i34 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i11 >> 2] = HEAP32[i33 >> 2];
   HEAP32[i10 >> 2] = HEAP32[i34 >> 2];
   i44 = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i1, i11, i10, i4, i5, i6, 19964, 19996) | 0;
   HEAP32[i2 >> 2] = i44;
   i8 = 26;
   break;
  }
 case 119:
  {
   HEAP32[i35 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i10 >> 2] = HEAP32[i35 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i6 + 24 | 0, i2, i10, i5, i43);
   i8 = 26;
   break;
  }
 case 120:
  {
   i44 = HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] | 0;
   HEAP32[i36 >> 2] = HEAP32[i2 >> 2];
   HEAP32[i37 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i11 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i10 >> 2] = HEAP32[i37 >> 2];
   i49 = FUNCTION_TABLE_iiiiiii[i44 & 63](i1, i11, i10, i4, i5, i6) | 0;
   break;
  }
 case 88:
  {
   i44 = i1 + 8 | 0;
   i48 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i44 >> 2] | 0) + 24 >> 2] & 127](i44) | 0;
   HEAP32[i38 >> 2] = HEAP32[i2 >> 2];
   HEAP32[i39 >> 2] = HEAP32[i3 >> 2];
   i44 = HEAP8[i48 + 8 + 3 >> 0] | 0;
   i47 = i44 << 24 >> 24 < 0;
   i45 = i47 ? HEAP32[i48 >> 2] | 0 : i48;
   i46 = i45 + ((i47 ? HEAP32[i48 + 4 >> 2] | 0 : i44 & 255) << 2) | 0;
   HEAP32[i11 >> 2] = HEAP32[i38 >> 2];
   HEAP32[i10 >> 2] = HEAP32[i39 >> 2];
   i44 = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i1, i11, i10, i4, i5, i6, i45, i46) | 0;
   HEAP32[i2 >> 2] = i44;
   i8 = 26;
   break;
  }
 case 121:
  {
   HEAP32[i40 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i10 >> 2] = HEAP32[i40 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i6 + 20 | 0, i2, i10, i5, i43);
   i8 = 26;
   break;
  }
 case 89:
  {
   HEAP32[i41 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i10 >> 2] = HEAP32[i41 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i6 + 20 | 0, i2, i10, i5, i43);
   i8 = 26;
   break;
  }
 case 37:
  {
   HEAP32[i42 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i10 >> 2] = HEAP32[i42 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE(i1, i2, i10, i5, i43);
   i8 = 26;
   break;
  }
 default:
  {
   HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 4;
   i8 = 26;
  }
 } while (0);
 if ((i8 | 0) == 26) i49 = HEAP32[i2 >> 2] | 0;
 STACKTOP = i9;
 return i49 | 0;
}

function ___intscan(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0;
 i6 = 0;
 L1 : do if (i2 >>> 0 > 36) {
  i7 = ___errno_location() | 0;
  HEAP32[i7 >> 2] = 22;
  i8 = 0;
  i9 = 0;
 } else {
  i7 = i1 + 4 | 0;
  i10 = i1 + 100 | 0;
  do {
   i11 = HEAP32[i7 >> 2] | 0;
   if (i11 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
    HEAP32[i7 >> 2] = i11 + 1;
    i12 = HEAPU8[i11 >> 0] | 0;
   } else i12 = ___shgetc(i1) | 0;
  } while ((_isspace(i12) | 0) != 0);
  L11 : do switch (i12 | 0) {
  case 43:
  case 45:
   {
    i11 = ((i12 | 0) == 45) << 31 >> 31;
    i13 = HEAP32[i7 >> 2] | 0;
    if (i13 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
     HEAP32[i7 >> 2] = i13 + 1;
     i14 = i11;
     i15 = HEAPU8[i13 >> 0] | 0;
     break L11;
    } else {
     i14 = i11;
     i15 = ___shgetc(i1) | 0;
     break L11;
    }
    break;
   }
  default:
   {
    i14 = 0;
    i15 = i12;
   }
  } while (0);
  i11 = (i2 | 0) == 0;
  do if ((i2 | 16 | 0) == 16 & (i15 | 0) == 48) {
   i13 = HEAP32[i7 >> 2] | 0;
   if (i13 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
    HEAP32[i7 >> 2] = i13 + 1;
    i16 = HEAPU8[i13 >> 0] | 0;
   } else i16 = ___shgetc(i1) | 0;
   if ((i16 | 32 | 0) != 120) if (i11) {
    i17 = i16;
    i18 = 8;
    i6 = 46;
    break;
   } else {
    i19 = i16;
    i20 = i2;
    i6 = 32;
    break;
   }
   i13 = HEAP32[i7 >> 2] | 0;
   if (i13 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
    HEAP32[i7 >> 2] = i13 + 1;
    i21 = HEAPU8[i13 >> 0] | 0;
   } else i21 = ___shgetc(i1) | 0;
   if ((HEAPU8[69436 + i21 >> 0] | 0) > 15) {
    i13 = (HEAP32[i10 >> 2] | 0) == 0;
    if (!i13) HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + -1;
    if (!i3) {
     ___shlim(i1, 0);
     i8 = 0;
     i9 = 0;
     break L1;
    }
    if (i13) {
     i8 = 0;
     i9 = 0;
     break L1;
    }
    HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + -1;
    i8 = 0;
    i9 = 0;
    break L1;
   } else {
    i17 = i21;
    i18 = 16;
    i6 = 46;
   }
  } else {
   i13 = i11 ? 10 : i2;
   if (i13 >>> 0 > (HEAPU8[69436 + i15 >> 0] | 0) >>> 0) {
    i19 = i15;
    i20 = i13;
    i6 = 32;
   } else {
    if (HEAP32[i10 >> 2] | 0) HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + -1;
    ___shlim(i1, 0);
    i13 = ___errno_location() | 0;
    HEAP32[i13 >> 2] = 22;
    i8 = 0;
    i9 = 0;
    break L1;
   }
  } while (0);
  L43 : do if ((i6 | 0) == 32) if ((i20 | 0) == 10) {
   i11 = i19 + -48 | 0;
   if (i11 >>> 0 < 10) {
    i13 = 0;
    i22 = i11;
    do {
     i13 = (i13 * 10 | 0) + i22 | 0;
     i11 = HEAP32[i7 >> 2] | 0;
     if (i11 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
      HEAP32[i7 >> 2] = i11 + 1;
      i23 = HEAPU8[i11 >> 0] | 0;
     } else i23 = ___shgetc(i1) | 0;
     i22 = i23 + -48 | 0;
    } while (i22 >>> 0 < 10 & i13 >>> 0 < 429496729);
    i24 = i23;
    i25 = i13;
    i26 = 0;
   } else {
    i24 = i19;
    i25 = 0;
    i26 = 0;
   }
   i22 = i24 + -48 | 0;
   if (i22 >>> 0 < 10) {
    i11 = i24;
    i27 = i25;
    i28 = i26;
    i29 = i22;
    while (1) {
     i22 = ___muldi3(i27 | 0, i28 | 0, 10, 0) | 0;
     i30 = tempRet0;
     i31 = ((i29 | 0) < 0) << 31 >> 31;
     i32 = ~i31;
     if (i30 >>> 0 > i32 >>> 0 | (i30 | 0) == (i32 | 0) & i22 >>> 0 > ~i29 >>> 0) {
      i33 = 10;
      i34 = i11;
      i35 = i27;
      i36 = i28;
      i6 = 72;
      break L43;
     }
     i27 = _i64Add(i22 | 0, i30 | 0, i29 | 0, i31 | 0) | 0;
     i28 = tempRet0;
     i31 = HEAP32[i7 >> 2] | 0;
     if (i31 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
      HEAP32[i7 >> 2] = i31 + 1;
      i37 = HEAPU8[i31 >> 0] | 0;
     } else i37 = ___shgetc(i1) | 0;
     i29 = i37 + -48 | 0;
     if (!(i29 >>> 0 < 10 & (i28 >>> 0 < 429496729 | (i28 | 0) == 429496729 & i27 >>> 0 < 2576980378))) break; else i11 = i37;
    }
    if (i29 >>> 0 > 9) {
     i38 = i14;
     i39 = i28;
     i40 = i27;
    } else {
     i33 = 10;
     i34 = i37;
     i35 = i27;
     i36 = i28;
     i6 = 72;
    }
   } else {
    i38 = i14;
    i39 = i26;
    i40 = i25;
   }
  } else {
   i17 = i19;
   i18 = i20;
   i6 = 46;
  } while (0);
  L63 : do if ((i6 | 0) == 46) {
   if (!(i18 + -1 & i18)) {
    i11 = HEAP8[69692 + ((i18 * 23 | 0) >>> 5 & 7) >> 0] | 0;
    i13 = HEAP8[69436 + i17 >> 0] | 0;
    i31 = i13 & 255;
    if (i18 >>> 0 > i31 >>> 0) {
     i30 = 0;
     i22 = i31;
     do {
      i30 = i22 | i30 << i11;
      i31 = HEAP32[i7 >> 2] | 0;
      if (i31 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
       HEAP32[i7 >> 2] = i31 + 1;
       i41 = HEAPU8[i31 >> 0] | 0;
      } else i41 = ___shgetc(i1) | 0;
      i42 = HEAP8[69436 + i41 >> 0] | 0;
      i22 = i42 & 255;
     } while (i30 >>> 0 < 134217728 & i18 >>> 0 > i22 >>> 0);
     i43 = i41;
     i44 = i42;
     i45 = 0;
     i46 = i30;
    } else {
     i43 = i17;
     i44 = i13;
     i45 = 0;
     i46 = 0;
    }
    i22 = _bitshift64Lshr(-1, -1, i11 | 0) | 0;
    i28 = tempRet0;
    if (i18 >>> 0 <= (i44 & 255) >>> 0 | (i28 >>> 0 < i45 >>> 0 | (i28 | 0) == (i45 | 0) & i22 >>> 0 < i46 >>> 0)) {
     i33 = i18;
     i34 = i43;
     i35 = i46;
     i36 = i45;
     i6 = 72;
     break;
    } else {
     i47 = i46;
     i48 = i45;
     i49 = i44;
    }
    while (1) {
     i27 = _bitshift64Shl(i47 | 0, i48 | 0, i11 | 0) | 0;
     i29 = tempRet0;
     i31 = i27 | i49 & 255;
     i27 = HEAP32[i7 >> 2] | 0;
     if (i27 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
      HEAP32[i7 >> 2] = i27 + 1;
      i50 = HEAPU8[i27 >> 0] | 0;
     } else i50 = ___shgetc(i1) | 0;
     i49 = HEAP8[69436 + i50 >> 0] | 0;
     if (i18 >>> 0 <= (i49 & 255) >>> 0 | (i29 >>> 0 > i28 >>> 0 | (i29 | 0) == (i28 | 0) & i31 >>> 0 > i22 >>> 0)) {
      i33 = i18;
      i34 = i50;
      i35 = i31;
      i36 = i29;
      i6 = 72;
      break L63;
     } else {
      i47 = i31;
      i48 = i29;
     }
    }
   }
   i22 = HEAP8[69436 + i17 >> 0] | 0;
   i28 = i22 & 255;
   if (i18 >>> 0 > i28 >>> 0) {
    i11 = 0;
    i13 = i28;
    do {
     i11 = i13 + (Math_imul(i11, i18) | 0) | 0;
     i28 = HEAP32[i7 >> 2] | 0;
     if (i28 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
      HEAP32[i7 >> 2] = i28 + 1;
      i51 = HEAPU8[i28 >> 0] | 0;
     } else i51 = ___shgetc(i1) | 0;
     i52 = HEAP8[69436 + i51 >> 0] | 0;
     i13 = i52 & 255;
    } while (i11 >>> 0 < 119304647 & i18 >>> 0 > i13 >>> 0);
    i53 = i51;
    i54 = i52;
    i55 = i11;
    i56 = 0;
   } else {
    i53 = i17;
    i54 = i22;
    i55 = 0;
    i56 = 0;
   }
   if (i18 >>> 0 > (i54 & 255) >>> 0) {
    i13 = ___udivdi3(-1, -1, i18 | 0, 0) | 0;
    i28 = tempRet0;
    i30 = i53;
    i29 = i56;
    i31 = i55;
    i27 = i54;
    while (1) {
     if (i29 >>> 0 > i28 >>> 0 | (i29 | 0) == (i28 | 0) & i31 >>> 0 > i13 >>> 0) {
      i33 = i18;
      i34 = i30;
      i35 = i31;
      i36 = i29;
      i6 = 72;
      break L63;
     }
     i32 = ___muldi3(i31 | 0, i29 | 0, i18 | 0, 0) | 0;
     i57 = tempRet0;
     i58 = i27 & 255;
     if (i57 >>> 0 > 4294967295 | (i57 | 0) == -1 & i32 >>> 0 > ~i58 >>> 0) {
      i33 = i18;
      i34 = i30;
      i35 = i31;
      i36 = i29;
      i6 = 72;
      break L63;
     }
     i59 = _i64Add(i32 | 0, i57 | 0, i58 | 0, 0) | 0;
     i58 = tempRet0;
     i57 = HEAP32[i7 >> 2] | 0;
     if (i57 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
      HEAP32[i7 >> 2] = i57 + 1;
      i60 = HEAPU8[i57 >> 0] | 0;
     } else i60 = ___shgetc(i1) | 0;
     i27 = HEAP8[69436 + i60 >> 0] | 0;
     if (i18 >>> 0 <= (i27 & 255) >>> 0) {
      i33 = i18;
      i34 = i60;
      i35 = i59;
      i36 = i58;
      i6 = 72;
      break;
     } else {
      i30 = i60;
      i29 = i58;
      i31 = i59;
     }
    }
   } else {
    i33 = i18;
    i34 = i53;
    i35 = i55;
    i36 = i56;
    i6 = 72;
   }
  } while (0);
  if ((i6 | 0) == 72) if (i33 >>> 0 > (HEAPU8[69436 + i34 >> 0] | 0) >>> 0) {
   do {
    i31 = HEAP32[i7 >> 2] | 0;
    if (i31 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
     HEAP32[i7 >> 2] = i31 + 1;
     i61 = HEAPU8[i31 >> 0] | 0;
    } else i61 = ___shgetc(i1) | 0;
   } while (i33 >>> 0 > (HEAPU8[69436 + i61 >> 0] | 0) >>> 0);
   i31 = ___errno_location() | 0;
   HEAP32[i31 >> 2] = 34;
   i38 = (i4 & 1 | 0) == 0 & 0 == 0 ? i14 : 0;
   i39 = i5;
   i40 = i4;
  } else {
   i38 = i14;
   i39 = i36;
   i40 = i35;
  }
  if (HEAP32[i10 >> 2] | 0) HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + -1;
  if (!(i39 >>> 0 < i5 >>> 0 | (i39 | 0) == (i5 | 0) & i40 >>> 0 < i4 >>> 0)) {
   if (!((i4 & 1 | 0) != 0 | 0 != 0 | (i38 | 0) != 0)) {
    i31 = ___errno_location() | 0;
    HEAP32[i31 >> 2] = 34;
    i31 = _i64Add(i4 | 0, i5 | 0, -1, -1) | 0;
    i8 = tempRet0;
    i9 = i31;
    break;
   }
   if (i39 >>> 0 > i5 >>> 0 | (i39 | 0) == (i5 | 0) & i40 >>> 0 > i4 >>> 0) {
    i31 = ___errno_location() | 0;
    HEAP32[i31 >> 2] = 34;
    i8 = i5;
    i9 = i4;
    break;
   }
  }
  i31 = ((i38 | 0) < 0) << 31 >> 31;
  i29 = _i64Subtract(i40 ^ i38 | 0, i39 ^ i31 | 0, i38 | 0, i31 | 0) | 0;
  i8 = tempRet0;
  i9 = i29;
 } while (0);
 tempRet0 = i8;
 return i9 | 0;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0;
 i8 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 i10 = i9 + 128 | 0;
 i11 = i9 + 112 | 0;
 i12 = i9 + 124 | 0;
 i13 = i9 + 120 | 0;
 i14 = i9 + 116 | 0;
 i15 = i9 + 108 | 0;
 i16 = i9 + 104 | 0;
 i17 = i9 + 100 | 0;
 i18 = i9 + 96 | 0;
 i19 = i9 + 92 | 0;
 i20 = i9 + 88 | 0;
 i21 = i9 + 84 | 0;
 i22 = i9 + 80 | 0;
 i23 = i9 + 76 | 0;
 i24 = i9 + 72 | 0;
 i25 = i9 + 68 | 0;
 i26 = i9 + 64 | 0;
 i27 = i9 + 60 | 0;
 i28 = i9 + 56 | 0;
 i29 = i9 + 52 | 0;
 i30 = i9 + 48 | 0;
 i31 = i9 + 44 | 0;
 i32 = i9 + 40 | 0;
 i33 = i9 + 36 | 0;
 i34 = i9 + 32 | 0;
 i35 = i9 + 28 | 0;
 i36 = i9 + 24 | 0;
 i37 = i9 + 20 | 0;
 i38 = i9 + 16 | 0;
 i39 = i9 + 12 | 0;
 i40 = i9 + 8 | 0;
 i41 = i9 + 4 | 0;
 i42 = i9;
 HEAP32[i5 >> 2] = 0;
 __ZNKSt3__28ios_base6getlocEv(i10, i4);
 i43 = __ZNKSt3__26locale9use_facetERNS0_2idE(i10, 5845188) | 0;
 __ZNSt3__26localeD2Ev(i10);
 do switch (i7 << 24 >> 24 | 0) {
 case 65:
 case 97:
  {
   HEAP32[i12 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i10 >> 2] = HEAP32[i12 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i6 + 24 | 0, i2, i10, i5, i43);
   i8 = 26;
   break;
  }
 case 104:
 case 66:
 case 98:
  {
   HEAP32[i13 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i10 >> 2] = HEAP32[i13 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i6 + 16 | 0, i2, i10, i5, i43);
   i8 = 26;
   break;
  }
 case 99:
  {
   i44 = i1 + 8 | 0;
   i45 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i44 >> 2] | 0) + 12 >> 2] & 127](i44) | 0;
   HEAP32[i14 >> 2] = HEAP32[i2 >> 2];
   HEAP32[i15 >> 2] = HEAP32[i3 >> 2];
   i44 = HEAP8[i45 + 11 >> 0] | 0;
   i46 = i44 << 24 >> 24 < 0;
   i47 = i46 ? HEAP32[i45 >> 2] | 0 : i45;
   i48 = i47 + (i46 ? HEAP32[i45 + 4 >> 2] | 0 : i44 & 255) | 0;
   HEAP32[i11 >> 2] = HEAP32[i14 >> 2];
   HEAP32[i10 >> 2] = HEAP32[i15 >> 2];
   i44 = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i1, i11, i10, i4, i5, i6, i47, i48) | 0;
   HEAP32[i2 >> 2] = i44;
   i8 = 26;
   break;
  }
 case 101:
 case 100:
  {
   HEAP32[i16 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i10 >> 2] = HEAP32[i16 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i6 + 12 | 0, i2, i10, i5, i43);
   i8 = 26;
   break;
  }
 case 68:
  {
   HEAP32[i17 >> 2] = HEAP32[i2 >> 2];
   HEAP32[i18 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i11 >> 2] = HEAP32[i17 >> 2];
   HEAP32[i10 >> 2] = HEAP32[i18 >> 2];
   i44 = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i1, i11, i10, i4, i5, i6, 71202, 71210) | 0;
   HEAP32[i2 >> 2] = i44;
   i8 = 26;
   break;
  }
 case 70:
  {
   HEAP32[i19 >> 2] = HEAP32[i2 >> 2];
   HEAP32[i20 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i11 >> 2] = HEAP32[i19 >> 2];
   HEAP32[i10 >> 2] = HEAP32[i20 >> 2];
   i44 = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i1, i11, i10, i4, i5, i6, 71210, 71218) | 0;
   HEAP32[i2 >> 2] = i44;
   i8 = 26;
   break;
  }
 case 72:
  {
   HEAP32[i21 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i10 >> 2] = HEAP32[i21 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i6 + 8 | 0, i2, i10, i5, i43);
   i8 = 26;
   break;
  }
 case 73:
  {
   HEAP32[i22 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i10 >> 2] = HEAP32[i22 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i6 + 8 | 0, i2, i10, i5, i43);
   i8 = 26;
   break;
  }
 case 106:
  {
   HEAP32[i23 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i10 >> 2] = HEAP32[i23 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i6 + 28 | 0, i2, i10, i5, i43);
   i8 = 26;
   break;
  }
 case 109:
  {
   HEAP32[i24 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i10 >> 2] = HEAP32[i24 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i6 + 16 | 0, i2, i10, i5, i43);
   i8 = 26;
   break;
  }
 case 77:
  {
   HEAP32[i25 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i10 >> 2] = HEAP32[i25 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i6 + 4 | 0, i2, i10, i5, i43);
   i8 = 26;
   break;
  }
 case 116:
 case 110:
  {
   HEAP32[i26 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i10 >> 2] = HEAP32[i26 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE(i1, i2, i10, i5, i43);
   i8 = 26;
   break;
  }
 case 112:
  {
   HEAP32[i27 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i10 >> 2] = HEAP32[i27 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i6 + 8 | 0, i2, i10, i5, i43);
   i8 = 26;
   break;
  }
 case 114:
  {
   HEAP32[i28 >> 2] = HEAP32[i2 >> 2];
   HEAP32[i29 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i11 >> 2] = HEAP32[i28 >> 2];
   HEAP32[i10 >> 2] = HEAP32[i29 >> 2];
   i44 = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i1, i11, i10, i4, i5, i6, 71218, 71229) | 0;
   HEAP32[i2 >> 2] = i44;
   i8 = 26;
   break;
  }
 case 82:
  {
   HEAP32[i30 >> 2] = HEAP32[i2 >> 2];
   HEAP32[i31 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i11 >> 2] = HEAP32[i30 >> 2];
   HEAP32[i10 >> 2] = HEAP32[i31 >> 2];
   i44 = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i1, i11, i10, i4, i5, i6, 71229, 71234) | 0;
   HEAP32[i2 >> 2] = i44;
   i8 = 26;
   break;
  }
 case 83:
  {
   HEAP32[i32 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i10 >> 2] = HEAP32[i32 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i6, i2, i10, i5, i43);
   i8 = 26;
   break;
  }
 case 84:
  {
   HEAP32[i33 >> 2] = HEAP32[i2 >> 2];
   HEAP32[i34 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i11 >> 2] = HEAP32[i33 >> 2];
   HEAP32[i10 >> 2] = HEAP32[i34 >> 2];
   i44 = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i1, i11, i10, i4, i5, i6, 71234, 71242) | 0;
   HEAP32[i2 >> 2] = i44;
   i8 = 26;
   break;
  }
 case 119:
  {
   HEAP32[i35 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i10 >> 2] = HEAP32[i35 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i6 + 24 | 0, i2, i10, i5, i43);
   i8 = 26;
   break;
  }
 case 120:
  {
   i44 = HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] | 0;
   HEAP32[i36 >> 2] = HEAP32[i2 >> 2];
   HEAP32[i37 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i11 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i10 >> 2] = HEAP32[i37 >> 2];
   i49 = FUNCTION_TABLE_iiiiiii[i44 & 63](i1, i11, i10, i4, i5, i6) | 0;
   break;
  }
 case 88:
  {
   i44 = i1 + 8 | 0;
   i48 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i44 >> 2] | 0) + 24 >> 2] & 127](i44) | 0;
   HEAP32[i38 >> 2] = HEAP32[i2 >> 2];
   HEAP32[i39 >> 2] = HEAP32[i3 >> 2];
   i44 = HEAP8[i48 + 11 >> 0] | 0;
   i47 = i44 << 24 >> 24 < 0;
   i45 = i47 ? HEAP32[i48 >> 2] | 0 : i48;
   i46 = i45 + (i47 ? HEAP32[i48 + 4 >> 2] | 0 : i44 & 255) | 0;
   HEAP32[i11 >> 2] = HEAP32[i38 >> 2];
   HEAP32[i10 >> 2] = HEAP32[i39 >> 2];
   i44 = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i1, i11, i10, i4, i5, i6, i45, i46) | 0;
   HEAP32[i2 >> 2] = i44;
   i8 = 26;
   break;
  }
 case 121:
  {
   HEAP32[i40 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i10 >> 2] = HEAP32[i40 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i6 + 20 | 0, i2, i10, i5, i43);
   i8 = 26;
   break;
  }
 case 89:
  {
   HEAP32[i41 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i10 >> 2] = HEAP32[i41 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i6 + 20 | 0, i2, i10, i5, i43);
   i8 = 26;
   break;
  }
 case 37:
  {
   HEAP32[i42 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i10 >> 2] = HEAP32[i42 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE(i1, i2, i10, i5, i43);
   i8 = 26;
   break;
  }
 default:
  {
   HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 4;
   i8 = 26;
  }
 } while (0);
 if ((i8 | 0) == 26) i49 = HEAP32[i2 >> 2] | 0;
 STACKTOP = i9;
 return i49 | 0;
}

function __ZN5ImGui8CheckboxEPKcPb(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, f20 = f0, f21 = f0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, f26 = f0, f27 = f0, f28 = f0, f29 = f0, f30 = f0, f31 = f0, f32 = f0, i33 = 0, i34 = 0, i35 = 0, f36 = f0, f37 = f0, i38 = 0, i39 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 i4 = i3 + 72 | 0;
 i5 = i3 + 88 | 0;
 i6 = i3 + 56 | 0;
 i7 = i3 + 32 | 0;
 i8 = i3 + 8 | 0;
 i9 = i3 + 97 | 0;
 i10 = i3 + 96 | 0;
 i11 = i3 + 48 | 0;
 i12 = i3 + 24 | 0;
 i13 = i3 + 80 | 0;
 i14 = i3;
 i15 = HEAP32[1460598] | 0;
 i16 = HEAP32[i15 + 6392 >> 2] | 0;
 HEAP8[i16 + 120 >> 0] = 1;
 if (HEAP8[i16 + 123 >> 0] | 0) {
  i17 = 0;
  STACKTOP = i3;
  return i17 | 0;
 }
 i18 = HEAP32[i16 + 452 >> 2] | 0;
 if ((i18 | 0) <= 0) ___assert_fail(38278, 56850, 1245, 38287);
 i19 = __Z6ImHashPKvij(i1, 0, HEAP32[(HEAP32[i16 + 460 >> 2] | 0) + (i18 + -1 << 2) >> 2] | 0) | 0;
 i18 = HEAP32[1460598] | 0;
 if ((HEAP32[i18 + 6420 >> 2] | 0) == (i19 | 0)) HEAP8[i18 + 6432 >> 0] = 1;
 if ((HEAP32[i18 + 6424 >> 2] | 0) == (i19 | 0)) HEAP8[i18 + 6436 >> 0] = 1;
 if ((i1 | 0) == (-1 | 0)) {
  f20 = Math_fround(HEAPF32[i18 + 6184 >> 2]);
  f21 = Math_fround(0.0);
 } else {
  i22 = i1;
  L15 : while (1) {
   switch (HEAP8[i22 >> 0] | 0) {
   case 0:
    {
     i23 = i22;
     break L15;
     break;
    }
   case 35:
    {
     i24 = i22 + 1 | 0;
     if ((HEAP8[i24 >> 0] | 0) == 35) {
      i23 = i22;
      break L15;
     } else i25 = i24;
     break;
    }
   default:
    i25 = i22 + 1 | 0;
   }
   if ((i25 | 0) == (-1 | 0)) {
    i23 = -1;
    break;
   } else i22 = i25;
  }
  i25 = HEAP32[i18 + 6180 >> 2] | 0;
  f26 = Math_fround(HEAPF32[i18 + 6184 >> 2]);
  if ((i23 | 0) == (i1 | 0)) {
   f20 = f26;
   f21 = Math_fround(0.0);
  } else {
   __ZNK6ImFont13CalcTextSizeAEfffPKcS1_PS1_(i4, i25, f26, Math_fround(3402823469999999843913219.0e14), Math_fround(-1.0), i1, i23, 0);
   f27 = Math_fround(HEAPF32[i4 >> 2]);
   if (f27 > Math_fround(0.0)) {
    f28 = Math_fround(f27 - Math_fround(f26 / Math_fround(HEAPF32[i25 >> 2])));
    HEAPF32[i4 >> 2] = f28;
    f29 = f28;
   } else f29 = f27;
   f27 = Math_fround(~~Math_fround(f29 + Math_fround(.949999988)) | 0);
   HEAPF32[i4 >> 2] = f27;
   f20 = Math_fround(HEAPF32[i4 + 4 >> 2]);
   f21 = f27;
  }
 }
 i25 = i16 + 196 | 0;
 i23 = i15 + 5412 | 0;
 f27 = Math_fround(HEAPF32[i23 >> 2]);
 f29 = Math_fround(f20 + Math_fround(f27 * Math_fround(2.0)));
 f28 = Math_fround(Math_fround(HEAPF32[i25 >> 2]) + f29);
 i18 = i16 + 200 | 0;
 f26 = Math_fround(Math_fround(HEAPF32[i18 >> 2]) + f29);
 i16 = i25;
 i22 = HEAP32[i16 >> 2] | 0;
 i24 = HEAP32[i16 + 4 >> 2] | 0;
 i16 = i6;
 HEAP32[i16 >> 2] = i22;
 HEAP32[i16 + 4 >> 2] = i24;
 i16 = i6 + 8 | 0;
 HEAPF32[i16 >> 2] = f28;
 HEAPF32[i6 + 12 >> 2] = f26;
 f29 = (HEAP32[tempDoublePtr >> 2] = i22, Math_fround(HEAPF32[tempDoublePtr >> 2]));
 f30 = Math_fround(f28 - f29);
 f31 = (HEAP32[tempDoublePtr >> 2] = i24, Math_fround(HEAPF32[tempDoublePtr >> 2]));
 f32 = Math_fround(f26 - f31);
 HEAPF32[i4 >> 2] = f30;
 HEAPF32[i4 + 4 >> 2] = f32;
 __ZN5ImGui8ItemSizeERK6ImVec2f(i4, f27);
 HEAP32[i7 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i7 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 i33 = f21 > Math_fround(0.0);
 if (i33) {
  f27 = Math_fround(HEAPF32[i15 + 5432 >> 2]);
  i34 = HEAP32[1460598] | 0;
  i35 = HEAP32[i34 + 6392 >> 2] | 0;
  HEAP8[i35 + 120 >> 0] = 1;
  if (!(HEAP8[i35 + 123 >> 0] | 0)) {
   if (f27 < Math_fround(0.0)) f36 = Math_fround(HEAPF32[i34 + 5424 >> 2]); else f36 = f27;
   f27 = Math_fround(f36 + Math_fround(HEAPF32[i35 + 204 >> 2]));
   HEAPF32[i35 + 196 >> 2] = f27;
   HEAP32[i35 + 200 >> 2] = HEAP32[i35 + 208 >> 2];
   HEAP32[i35 + 228 >> 2] = HEAP32[i35 + 236 >> 2];
   HEAP32[i35 + 232 >> 2] = HEAP32[i35 + 240 >> 2];
  }
 }
 f27 = Math_fround(HEAPF32[i23 >> 2]);
 f36 = Math_fround(Math_fround(HEAPF32[i25 >> 2]) + Math_fround(0.0));
 f30 = Math_fround(f27 + Math_fround(HEAPF32[i18 >> 2]));
 f37 = Math_fround(f21 + f36);
 f21 = Math_fround(f20 + f30);
 HEAPF32[i8 >> 2] = f36;
 i18 = i8 + 4 | 0;
 HEAPF32[i18 >> 2] = f30;
 i25 = i8 + 8 | 0;
 HEAPF32[i25 >> 2] = f37;
 i23 = i8 + 12 | 0;
 HEAPF32[i23 >> 2] = f21;
 if (i33) {
  f21 = Math_fround(f37 - f36);
  HEAPF32[i4 >> 2] = f21;
  HEAPF32[i4 + 4 >> 2] = f32;
  __ZN5ImGui8ItemSizeERK6ImVec2f(i4, f27);
  i35 = Math_fround(HEAPF32[i8 >> 2]) > f29;
  i34 = Math_fround(HEAPF32[i18 >> 2]) > f31;
  i18 = HEAP32[(i34 ? i6 : i8) + 4 >> 2] | 0;
  i34 = f28 >= Math_fround(HEAPF32[i25 >> 2]);
  i38 = HEAP32[(i34 ? i16 : i25) >> 2] | 0;
  i34 = f26 >= Math_fround(HEAPF32[i23 >> 2]);
  i23 = HEAP32[(i34 ? i16 : i25) + 4 >> 2] | 0;
  i25 = i7;
  HEAP32[i25 >> 2] = HEAP32[(i35 ? i6 : i8) >> 2];
  HEAP32[i25 + 4 >> 2] = i18;
  i18 = i7 + 8 | 0;
  HEAP32[i18 >> 2] = i38;
  HEAP32[i18 + 4 >> 2] = i23;
 }
 if (__ZN5ImGui7ItemAddERK6ImRectjPS1_(i7, i19, 0) | 0) {
  i23 = __ZN5ImGui14ButtonBehaviorERK6ImRectjPbS3_i(i7, i19, i9, i10, 0) | 0;
  do if (i23) {
   HEAP8[i2 >> 0] = HEAP8[i2 >> 0] ^ 1;
   i18 = HEAP32[1460598] | 0;
   i38 = HEAP32[i18 + 6420 >> 2] | 0;
   if ((i38 | 0) == (i19 | 0) | (i38 | 0) == 0) {
    HEAP8[i18 + 6435 >> 0] = 1;
    break;
   } else ___assert_fail(32628, 31803, 2259, 32664);
  } while (0);
  __ZN5ImGui18RenderNavHighlightERK6ImRectji(i7, i19, 1);
  i19 = i11;
  HEAP32[i19 >> 2] = i22;
  HEAP32[i19 + 4 >> 2] = i24;
  i24 = i16;
  i16 = HEAP32[i24 >> 2] | 0;
  i19 = HEAP32[i24 + 4 >> 2] | 0;
  i24 = i12;
  HEAP32[i24 >> 2] = i16;
  HEAP32[i24 + 4 >> 2] = i19;
  i19 = HEAP8[i9 >> 0] | 0;
  i9 = i19 << 24 >> 24 | 0;
  i19 = (HEAP8[i10 >> 0] | 0) == 0 | (i9 | 0) == 0 ? (i9 | 0 ? 8 : 7) : 9;
  i9 = HEAP32[1460598] | 0;
  i10 = i9 + 5508 + (i19 << 4) | 0;
  f26 = Math_fround(HEAPF32[i10 >> 2]);
  f28 = Math_fround(HEAPF32[i10 + 4 >> 2]);
  f27 = Math_fround(HEAPF32[i10 + 8 >> 2]);
  f21 = Math_fround(HEAPF32[i10 + 12 >> 2]);
  f36 = Math_fround(f21 * Math_fround(HEAPF32[i9 + 5356 >> 2]));
  i9 = f26 < Math_fround(0.0);
  i10 = f26 > Math_fround(1.0);
  i19 = ~~Math_fround(Math_fround((i10 ? Math_fround(1.0) : f26) * Math_fround(255.0)) + Math_fround(.5));
  i10 = f28 < Math_fround(0.0);
  i24 = f28 > Math_fround(1.0);
  i22 = ~~Math_fround(Math_fround((i24 ? Math_fround(1.0) : f28) * Math_fround(255.0)) + Math_fround(.5)) << 8;
  i24 = f27 < Math_fround(0.0);
  i7 = f27 > Math_fround(1.0);
  i18 = ~~Math_fround(Math_fround((i7 ? Math_fround(1.0) : f27) * Math_fround(255.0)) + Math_fround(.5)) << 16;
  i7 = f36 < Math_fround(0.0);
  i38 = f36 > Math_fround(1.0);
  i25 = ~~Math_fround(Math_fround((i38 ? Math_fround(1.0) : f36) * Math_fround(255.0)) + Math_fround(.5)) << 24;
  f36 = Math_fround(HEAPF32[i15 + 5416 >> 2]);
  HEAP32[i5 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i5 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i4 >> 2] = HEAP32[i12 >> 2];
  HEAP32[i4 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
  __ZN5ImGui11RenderFrameE6ImVec2S0_jbf(i5, i4, (i10 ? 0 : i22) | (i9 ? 0 : i19) | (i24 ? 0 : i18) | (i7 ? 0 : i25), 1, f36);
  if (HEAP8[i2 >> 0] | 0) {
   f36 = Math_fround((HEAP32[tempDoublePtr >> 2] = i16, Math_fround(HEAPF32[tempDoublePtr >> 2])) - f29);
   f27 = Math_fround(~~Math_fround((f36 < f32 ? f36 : f32) / Math_fround(6.0)) | 0);
   i16 = f27 <= Math_fround(1.0);
   f32 = i16 ? Math_fround(1.0) : f27;
   f27 = Math_fround(f32 + f29);
   f29 = Math_fround(f32 + f31);
   HEAPF32[i13 >> 2] = f27;
   HEAPF32[i13 + 4 >> 2] = f29;
   i16 = HEAP32[1460598] | 0;
   f29 = Math_fround(HEAPF32[i16 + 5796 >> 2]);
   f27 = Math_fround(HEAPF32[i16 + 5800 >> 2]);
   f31 = Math_fround(HEAPF32[i16 + 5804 >> 2]);
   f28 = Math_fround(HEAPF32[i16 + 5808 >> 2]);
   f26 = Math_fround(f28 * Math_fround(HEAPF32[i16 + 5356 >> 2]));
   i16 = f29 < Math_fround(0.0);
   i25 = f29 > Math_fround(1.0);
   i7 = ~~Math_fround(Math_fround((i25 ? Math_fround(1.0) : f29) * Math_fround(255.0)) + Math_fround(.5));
   i25 = f27 < Math_fround(0.0);
   i18 = f27 > Math_fround(1.0);
   i24 = ~~Math_fround(Math_fround((i18 ? Math_fround(1.0) : f27) * Math_fround(255.0)) + Math_fround(.5)) << 8;
   i18 = f31 < Math_fround(0.0);
   i19 = f31 > Math_fround(1.0);
   i9 = ~~Math_fround(Math_fround((i19 ? Math_fround(1.0) : f31) * Math_fround(255.0)) + Math_fround(.5)) << 16;
   i19 = f26 < Math_fround(0.0);
   i22 = f26 > Math_fround(1.0);
   i10 = ~~Math_fround(Math_fround((i22 ? Math_fround(1.0) : f26) * Math_fround(255.0)) + Math_fround(.5)) << 24;
   f26 = Math_fround(f36 - Math_fround(f32 * Math_fround(2.0)));
   HEAP32[i4 >> 2] = HEAP32[i13 >> 2];
   HEAP32[i4 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
   __ZN5ImGui15RenderCheckMarkE6ImVec2jf(i4, (i25 ? 0 : i24) | (i16 ? 0 : i7) | (i18 ? 0 : i9) | (i19 ? 0 : i10), f26);
  }
  if (HEAP8[i15 + 11092 >> 0] | 0) __ZL15LogRenderedTextPK6ImVec2PKcS3_(i8, HEAP8[i2 >> 0] | 0 ? 37909 : 37913, 0);
  if (i33) {
   i33 = i8;
   i8 = HEAP32[i33 + 4 >> 2] | 0;
   i2 = i14;
   HEAP32[i2 >> 2] = HEAP32[i33 >> 2];
   HEAP32[i2 + 4 >> 2] = i8;
   HEAP32[i4 >> 2] = HEAP32[i14 >> 2];
   HEAP32[i4 + 4 >> 2] = HEAP32[i14 + 4 >> 2];
   __ZN5ImGui10RenderTextE6ImVec2PKcS2_b(i4, i1, 0, 1);
  }
  i39 = i23;
 } else i39 = 0;
 i17 = i39;
 STACKTOP = i3;
 return i17 | 0;
}

function ___rem_pio2_large(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, d20 = 0.0, i21 = 0, d22 = 0.0, d23 = 0.0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, d29 = 0.0, d30 = 0.0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, d36 = 0.0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, d49 = 0.0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, d54 = 0.0, d55 = 0.0, d56 = 0.0, i57 = 0, d58 = 0.0, d59 = 0.0, d60 = 0.0, d61 = 0.0, d62 = 0.0;
 i6 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 560 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(560);
 i8 = i7 + 480 | 0;
 i9 = i7 + 320 | 0;
 i10 = i7 + 160 | 0;
 i11 = i7;
 i12 = HEAP32[14280 + (i5 << 2) >> 2] | 0;
 i13 = i4 + -1 | 0;
 i14 = (i3 + -3 | 0) / 24 | 0;
 i15 = (i14 | 0) > 0 ? i14 : 0;
 i14 = Math_imul(i15, -24) | 0;
 i16 = i3 + -24 + i14 | 0;
 if ((i12 + i13 | 0) >= 0) {
  i17 = i12 + i4 | 0;
  i18 = i15 - i13 | 0;
  i19 = 0;
  while (1) {
   if ((i18 | 0) < 0) d20 = 0.0; else d20 = +(HEAP32[14296 + (i18 << 2) >> 2] | 0);
   HEAPF64[i9 + (i19 << 3) >> 3] = d20;
   i19 = i19 + 1 | 0;
   if ((i19 | 0) == (i17 | 0)) break; else i18 = i18 + 1 | 0;
  }
 }
 i18 = (i4 | 0) > 0;
 i17 = 0;
 while (1) {
  if (i18) {
   i19 = i17 + i13 | 0;
   d20 = 0.0;
   i21 = 0;
   while (1) {
    d22 = d20 + +HEAPF64[i1 + (i21 << 3) >> 3] * +HEAPF64[i9 + (i19 - i21 << 3) >> 3];
    i21 = i21 + 1 | 0;
    if ((i21 | 0) == (i4 | 0)) {
     d23 = d22;
     break;
    } else d20 = d22;
   }
  } else d23 = 0.0;
  HEAPF64[i11 + (i17 << 3) >> 3] = d23;
  if ((i17 | 0) < (i12 | 0)) i17 = i17 + 1 | 0; else break;
 }
 i17 = (i16 | 0) > 0;
 i13 = 24 - i16 | 0;
 i18 = 23 - i16 | 0;
 i21 = (i4 | 0) > 0;
 i19 = (i16 | 0) == 0;
 i24 = i12;
 L17 : while (1) {
  d23 = +HEAPF64[i11 + (i24 << 3) >> 3];
  i25 = (i24 | 0) > 0;
  if (i25) {
   d20 = d23;
   i26 = i24;
   i27 = 0;
   while (1) {
    d22 = +(~~(d20 * 5.9604644775390625e-08) | 0);
    HEAP32[i8 + (i27 << 2) >> 2] = ~~(d20 - d22 * 16777216.0);
    i28 = i26;
    i26 = i26 + -1 | 0;
    d29 = +HEAPF64[i11 + (i26 << 3) >> 3] + d22;
    if ((i28 | 0) <= 1) {
     d30 = d29;
     break;
    } else {
     d20 = d29;
     i27 = i27 + 1 | 0;
    }
   }
  } else d30 = d23;
  d20 = +_scalbn(d30, i16);
  d29 = d20 - +Math_floor(+(d20 * .125)) * 8.0;
  i27 = ~~d29;
  d20 = d29 - +(i27 | 0);
  do if (i17) {
   i26 = i8 + (i24 + -1 << 2) | 0;
   i28 = HEAP32[i26 >> 2] | 0;
   i31 = i28 >> i13;
   i32 = i28 - (i31 << i13) | 0;
   HEAP32[i26 >> 2] = i32;
   i33 = i32 >> i18;
   i34 = i31 + i27 | 0;
   i6 = 19;
  } else if (i19) {
   i33 = HEAP32[i8 + (i24 + -1 << 2) >> 2] >> 23;
   i34 = i27;
   i6 = 19;
   break;
  } else if (!(d20 >= .5)) {
   i35 = 0;
   d36 = d20;
   i37 = i27;
   break;
  } else {
   i38 = 2;
   i39 = i27;
   i6 = 20;
   break;
  } while (0);
  if ((i6 | 0) == 19) {
   i6 = 0;
   if ((i33 | 0) > 0) {
    i38 = i33;
    i39 = i34;
    i6 = 20;
   } else {
    i35 = i33;
    d36 = d20;
    i37 = i34;
   }
  }
  if ((i6 | 0) == 20) {
   i6 = 0;
   i27 = i39 + 1 | 0;
   if (i25) {
    i31 = 0;
    i32 = 0;
    while (1) {
     i26 = i8 + (i32 << 2) | 0;
     i28 = HEAP32[i26 >> 2] | 0;
     if (!i31) if (!i28) i40 = 0; else {
      i41 = 1;
      i42 = 16777216;
      i6 = 23;
     } else {
      i41 = i31;
      i42 = 16777215;
      i6 = 23;
     }
     if ((i6 | 0) == 23) {
      i6 = 0;
      HEAP32[i26 >> 2] = i42 - i28;
      i40 = i41;
     }
     i32 = i32 + 1 | 0;
     if ((i32 | 0) == (i24 | 0)) {
      i43 = i40;
      break;
     } else i31 = i40;
    }
   } else i43 = 0;
   L42 : do if (i17) {
    switch (i16 | 0) {
    case 1:
     {
      i44 = 8388607;
      break;
     }
    case 2:
     {
      i44 = 4194303;
      break;
     }
    default:
     break L42;
    }
    i31 = i8 + (i24 + -1 << 2) | 0;
    HEAP32[i31 >> 2] = HEAP32[i31 >> 2] & i44;
   } while (0);
   if ((i38 | 0) == 2) {
    d23 = 1.0 - d20;
    if (!i43) {
     i35 = 2;
     d36 = d23;
     i37 = i27;
    } else {
     i35 = 2;
     d36 = d23 - +_scalbn(1.0, i16);
     i37 = i27;
    }
   } else {
    i35 = i38;
    d36 = d20;
    i37 = i27;
   }
  }
  if (!(d36 == 0.0)) {
   i6 = 42;
   break;
  }
  if ((i24 | 0) > (i12 | 0)) {
   i31 = 0;
   i32 = i24;
   do {
    i32 = i32 + -1 | 0;
    i31 = HEAP32[i8 + (i32 << 2) >> 2] | i31;
   } while ((i32 | 0) > (i12 | 0));
   if (!i31) i45 = 1; else {
    i46 = i16;
    i47 = i24;
    i6 = 41;
    break;
   }
  } else i45 = 1;
  while (1) if (!(HEAP32[i8 + (i12 - i45 << 2) >> 2] | 0)) i45 = i45 + 1 | 0; else break;
  i31 = i45 + i24 | 0;
  if ((i45 | 0) > 0) i48 = i24; else {
   i24 = i31;
   continue;
  }
  while (1) {
   i32 = i48 + 1 | 0;
   i27 = i48 + i4 | 0;
   HEAPF64[i9 + (i27 << 3) >> 3] = +(HEAP32[14296 + (i32 + i15 << 2) >> 2] | 0);
   if (i21) {
    d20 = 0.0;
    i25 = 0;
    while (1) {
     d23 = d20 + +HEAPF64[i1 + (i25 << 3) >> 3] * +HEAPF64[i9 + (i27 - i25 << 3) >> 3];
     i25 = i25 + 1 | 0;
     if ((i25 | 0) == (i4 | 0)) {
      d49 = d23;
      break;
     } else d20 = d23;
    }
   } else d49 = 0.0;
   HEAPF64[i11 + (i32 << 3) >> 3] = d49;
   if ((i32 | 0) < (i31 | 0)) i48 = i32; else {
    i24 = i31;
    continue L17;
   }
  }
 }
 if ((i6 | 0) == 41) while (1) {
  i6 = 0;
  i48 = i46 + -24 | 0;
  i4 = i47 + -1 | 0;
  if (!(HEAP32[i8 + (i4 << 2) >> 2] | 0)) {
   i46 = i48;
   i47 = i4;
   i6 = 41;
  } else {
   i50 = i48;
   i51 = i4;
   break;
  }
 } else if ((i6 | 0) == 42) {
  d49 = +_scalbn(d36, 0 - i16 | 0);
  if (!(d49 >= 16777216.0)) {
   i52 = i16;
   i53 = i24;
   d54 = d49;
  } else {
   d36 = +(~~(d49 * 5.9604644775390625e-08) | 0);
   HEAP32[i8 + (i24 << 2) >> 2] = ~~(d49 - d36 * 16777216.0);
   i52 = i14 + i3 | 0;
   i53 = i24 + 1 | 0;
   d54 = d36;
  }
  HEAP32[i8 + (i53 << 2) >> 2] = ~~d54;
  i50 = i52;
  i51 = i53;
 }
 d54 = +_scalbn(1.0, i50);
 i50 = (i51 | 0) > -1;
 if (i50) {
  d36 = d54;
  i53 = i51;
  while (1) {
   HEAPF64[i11 + (i53 << 3) >> 3] = d36 * +(HEAP32[i8 + (i53 << 2) >> 2] | 0);
   if ((i53 | 0) > 0) {
    d36 = d36 * 5.9604644775390625e-08;
    i53 = i53 + -1 | 0;
   } else break;
  }
  if (i50) {
   i53 = i51;
   while (1) {
    i8 = i51 - i53 | 0;
    i52 = 0;
    d36 = 0.0;
    while (1) {
     d36 = d36 + +HEAPF64[1576 + (i52 << 3) >> 3] * +HEAPF64[i11 + (i52 + i53 << 3) >> 3];
     if ((i52 | 0) >= (i12 | 0) | (i52 | 0) >= (i8 | 0)) break; else i52 = i52 + 1 | 0;
    }
    HEAPF64[i10 + (i8 << 3) >> 3] = d36;
    if ((i53 | 0) > 0) i53 = i53 + -1 | 0; else break;
   }
  }
 }
 switch (i5 | 0) {
 case 0:
  {
   if (i50) {
    d54 = 0.0;
    i5 = i51;
    while (1) {
     d49 = d54 + +HEAPF64[i10 + (i5 << 3) >> 3];
     if ((i5 | 0) > 0) {
      d54 = d49;
      i5 = i5 + -1 | 0;
     } else {
      d55 = d49;
      break;
     }
    }
   } else d55 = 0.0;
   d56 = (i35 | 0) == 0 ? d55 : -d55;
   i57 = i2;
   i6 = 72;
   break;
  }
 case 2:
 case 1:
  {
   if (i50) {
    d55 = 0.0;
    i50 = i51;
    while (1) {
     d54 = d55 + +HEAPF64[i10 + (i50 << 3) >> 3];
     if ((i50 | 0) > 0) {
      d55 = d54;
      i50 = i50 + -1 | 0;
     } else {
      d58 = d54;
      break;
     }
    }
   } else d58 = 0.0;
   i50 = (i35 | 0) == 0;
   HEAPF64[i2 >> 3] = i50 ? d58 : -d58;
   d55 = +HEAPF64[i10 >> 3] - d58;
   if ((i51 | 0) < 1) d59 = d55; else {
    i5 = 1;
    d58 = d55;
    while (1) {
     d55 = d58 + +HEAPF64[i10 + (i5 << 3) >> 3];
     if ((i5 | 0) == (i51 | 0)) {
      d59 = d55;
      break;
     } else {
      i5 = i5 + 1 | 0;
      d58 = d55;
     }
    }
   }
   d56 = i50 ? d59 : -d59;
   i57 = i2 + 8 | 0;
   i6 = 72;
   break;
  }
 case 3:
  {
   if ((i51 | 0) > 0) {
    i50 = i51;
    d59 = +HEAPF64[i10 + (i51 << 3) >> 3];
    do {
     i5 = i50;
     i50 = i50 + -1 | 0;
     i53 = i10 + (i50 << 3) | 0;
     d58 = +HEAPF64[i53 >> 3];
     d55 = d59;
     d59 = d58 + d59;
     HEAPF64[i10 + (i5 << 3) >> 3] = d55 + (d58 - d59);
     HEAPF64[i53 >> 3] = d59;
    } while ((i5 | 0) > 1);
    i50 = (i51 | 0) > 1;
    if (i50) {
     i5 = i51;
     d59 = +HEAPF64[i10 + (i51 << 3) >> 3];
     do {
      i53 = i5;
      i5 = i5 + -1 | 0;
      i12 = i10 + (i5 << 3) | 0;
      d58 = +HEAPF64[i12 >> 3];
      d55 = d59;
      d59 = d58 + d59;
      HEAPF64[i10 + (i53 << 3) >> 3] = d55 + (d58 - d59);
      HEAPF64[i12 >> 3] = d59;
     } while ((i53 | 0) > 2);
     if (i50) {
      i50 = i51;
      d59 = 0.0;
      while (1) {
       d58 = d59 + +HEAPF64[i10 + (i50 << 3) >> 3];
       if ((i50 | 0) > 2) {
        i50 = i50 + -1 | 0;
        d59 = d58;
       } else {
        d60 = d58;
        break;
       }
      }
     } else d60 = 0.0;
    } else d60 = 0.0;
   } else d60 = 0.0;
   d59 = +HEAPF64[i10 >> 3];
   if (!i35) {
    HEAPF64[i2 >> 3] = d59;
    d61 = d60;
    d62 = +HEAPF64[i10 + 8 >> 3];
   } else {
    HEAPF64[i2 >> 3] = -d59;
    d61 = -d60;
    d62 = -+HEAPF64[i10 + 8 >> 3];
   }
   HEAPF64[i2 + 8 >> 3] = d62;
   d56 = d61;
   i57 = i2 + 16 | 0;
   i6 = 72;
   break;
  }
 default:
  {}
 }
 if ((i6 | 0) == 72) HEAPF64[i57 >> 3] = d56;
 STACKTOP = i7;
 return i37 & 7 | 0;
}

function __ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri(i1, i2, i3, i4, i5, i6, i7, i8, i9, i10) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 var i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i12 = i11 + 12 | 0;
 i13 = i11;
 if (i1) {
  i1 = __ZNKSt3__26locale9use_facetERNS0_2idE(i3, 5846908) | 0;
  if (i2) {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 63](i12, i1);
   i14 = HEAP32[i12 >> 2] | 0;
   HEAP8[i4 >> 0] = i14;
   HEAP8[i4 + 1 >> 0] = i14 >> 8;
   HEAP8[i4 + 2 >> 0] = i14 >> 16;
   HEAP8[i4 + 3 >> 0] = i14 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 32 >> 2] & 63](i13, i1);
   i14 = i9 + 11 | 0;
   if ((HEAP8[i14 >> 0] | 0) < 0) {
    i15 = HEAP32[i9 >> 2] | 0;
    HEAP8[i12 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc(i15, i12);
    HEAP32[i9 + 4 >> 2] = 0;
    i16 = i9;
   } else {
    HEAP8[i12 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc(i9, i12);
    HEAP8[i14 >> 0] = 0;
    i16 = i9;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i9, 0);
   HEAP32[i16 >> 2] = HEAP32[i13 >> 2];
   HEAP32[i16 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
   HEAP32[i16 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
   i16 = 0;
   while (1) {
    if ((i16 | 0) == 3) break;
    HEAP32[i13 + (i16 << 2) >> 2] = 0;
    i16 = i16 + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i13);
   i17 = i1;
  } else {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 63](i12, i1);
   i16 = HEAP32[i12 >> 2] | 0;
   HEAP8[i4 >> 0] = i16;
   HEAP8[i4 + 1 >> 0] = i16 >> 8;
   HEAP8[i4 + 2 >> 0] = i16 >> 16;
   HEAP8[i4 + 3 >> 0] = i16 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 63](i13, i1);
   i16 = i9 + 11 | 0;
   if ((HEAP8[i16 >> 0] | 0) < 0) {
    i14 = HEAP32[i9 >> 2] | 0;
    HEAP8[i12 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc(i14, i12);
    HEAP32[i9 + 4 >> 2] = 0;
    i18 = i9;
   } else {
    HEAP8[i12 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc(i9, i12);
    HEAP8[i16 >> 0] = 0;
    i18 = i9;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i9, 0);
   HEAP32[i18 >> 2] = HEAP32[i13 >> 2];
   HEAP32[i18 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
   HEAP32[i18 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
   i18 = 0;
   while (1) {
    if ((i18 | 0) == 3) break;
    HEAP32[i13 + (i18 << 2) >> 2] = 0;
    i18 = i18 + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i13);
   i17 = i1;
  }
  i18 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 127](i1) | 0;
  HEAP8[i5 >> 0] = i18;
  i18 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
  HEAP8[i6 >> 0] = i18;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i17 >> 2] | 0) + 20 >> 2] & 63](i13, i1);
  i18 = i7 + 11 | 0;
  if ((HEAP8[i18 >> 0] | 0) < 0) {
   i16 = HEAP32[i7 >> 2] | 0;
   HEAP8[i12 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i16, i12);
   HEAP32[i7 + 4 >> 2] = 0;
   i19 = i7;
  } else {
   HEAP8[i12 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i7, i12);
   HEAP8[i18 >> 0] = 0;
   i19 = i7;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i7, 0);
  HEAP32[i19 >> 2] = HEAP32[i13 >> 2];
  HEAP32[i19 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
  HEAP32[i19 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
  i19 = 0;
  while (1) {
   if ((i19 | 0) == 3) break;
   HEAP32[i13 + (i19 << 2) >> 2] = 0;
   i19 = i19 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i13);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i17 >> 2] | 0) + 24 >> 2] & 63](i13, i1);
  i17 = i8 + 11 | 0;
  if ((HEAP8[i17 >> 0] | 0) < 0) {
   i19 = HEAP32[i8 >> 2] | 0;
   HEAP8[i12 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i19, i12);
   HEAP32[i8 + 4 >> 2] = 0;
   i20 = i8;
  } else {
   HEAP8[i12 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i8, i12);
   HEAP8[i17 >> 0] = 0;
   i20 = i8;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i8, 0);
  HEAP32[i20 >> 2] = HEAP32[i13 >> 2];
  HEAP32[i20 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
  HEAP32[i20 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
  i20 = 0;
  while (1) {
   if ((i20 | 0) == 3) break;
   HEAP32[i13 + (i20 << 2) >> 2] = 0;
   i20 = i20 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i13);
  i21 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0;
 } else {
  i1 = __ZNKSt3__26locale9use_facetERNS0_2idE(i3, 5846900) | 0;
  if (i2) {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 63](i12, i1);
   i2 = HEAP32[i12 >> 2] | 0;
   HEAP8[i4 >> 0] = i2;
   HEAP8[i4 + 1 >> 0] = i2 >> 8;
   HEAP8[i4 + 2 >> 0] = i2 >> 16;
   HEAP8[i4 + 3 >> 0] = i2 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 32 >> 2] & 63](i13, i1);
   i2 = i9 + 11 | 0;
   if ((HEAP8[i2 >> 0] | 0) < 0) {
    i3 = HEAP32[i9 >> 2] | 0;
    HEAP8[i12 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc(i3, i12);
    HEAP32[i9 + 4 >> 2] = 0;
    i22 = i9;
   } else {
    HEAP8[i12 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc(i9, i12);
    HEAP8[i2 >> 0] = 0;
    i22 = i9;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i9, 0);
   HEAP32[i22 >> 2] = HEAP32[i13 >> 2];
   HEAP32[i22 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
   HEAP32[i22 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
   i22 = 0;
   while (1) {
    if ((i22 | 0) == 3) break;
    HEAP32[i13 + (i22 << 2) >> 2] = 0;
    i22 = i22 + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i13);
   i23 = i1;
  } else {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 63](i12, i1);
   i22 = HEAP32[i12 >> 2] | 0;
   HEAP8[i4 >> 0] = i22;
   HEAP8[i4 + 1 >> 0] = i22 >> 8;
   HEAP8[i4 + 2 >> 0] = i22 >> 16;
   HEAP8[i4 + 3 >> 0] = i22 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 63](i13, i1);
   i22 = i9 + 11 | 0;
   if ((HEAP8[i22 >> 0] | 0) < 0) {
    i4 = HEAP32[i9 >> 2] | 0;
    HEAP8[i12 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc(i4, i12);
    HEAP32[i9 + 4 >> 2] = 0;
    i24 = i9;
   } else {
    HEAP8[i12 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc(i9, i12);
    HEAP8[i22 >> 0] = 0;
    i24 = i9;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i9, 0);
   HEAP32[i24 >> 2] = HEAP32[i13 >> 2];
   HEAP32[i24 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
   HEAP32[i24 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
   i24 = 0;
   while (1) {
    if ((i24 | 0) == 3) break;
    HEAP32[i13 + (i24 << 2) >> 2] = 0;
    i24 = i24 + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i13);
   i23 = i1;
  }
  i24 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 127](i1) | 0;
  HEAP8[i5 >> 0] = i24;
  i24 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
  HEAP8[i6 >> 0] = i24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i23 >> 2] | 0) + 20 >> 2] & 63](i13, i1);
  i24 = i7 + 11 | 0;
  if ((HEAP8[i24 >> 0] | 0) < 0) {
   i6 = HEAP32[i7 >> 2] | 0;
   HEAP8[i12 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i6, i12);
   HEAP32[i7 + 4 >> 2] = 0;
   i25 = i7;
  } else {
   HEAP8[i12 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i7, i12);
   HEAP8[i24 >> 0] = 0;
   i25 = i7;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i7, 0);
  HEAP32[i25 >> 2] = HEAP32[i13 >> 2];
  HEAP32[i25 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
  HEAP32[i25 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
  i25 = 0;
  while (1) {
   if ((i25 | 0) == 3) break;
   HEAP32[i13 + (i25 << 2) >> 2] = 0;
   i25 = i25 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i13);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i23 >> 2] | 0) + 24 >> 2] & 63](i13, i1);
  i23 = i8 + 11 | 0;
  if ((HEAP8[i23 >> 0] | 0) < 0) {
   i25 = HEAP32[i8 >> 2] | 0;
   HEAP8[i12 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i25, i12);
   HEAP32[i8 + 4 >> 2] = 0;
   i26 = i8;
  } else {
   HEAP8[i12 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i8, i12);
   HEAP8[i23 >> 0] = 0;
   i26 = i8;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i8, 0);
  HEAP32[i26 >> 2] = HEAP32[i13 >> 2];
  HEAP32[i26 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
  HEAP32[i26 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
  i26 = 0;
  while (1) {
   if ((i26 | 0) == 3) break;
   HEAP32[i13 + (i26 << 2) >> 2] = 0;
   i26 = i26 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i13);
  i21 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0;
 }
 HEAP32[i10 >> 2] = i21;
 STACKTOP = i11;
 return;
}

function __ZN11ImGuiWindowC2EP12ImGuiContextPKc(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0;
 i4 = i1 + 44 | 0;
 i5 = i1 + 84 | 0;
 i6 = i1 + 88 | 0;
 i7 = i1 + 92 | 0;
 i8 = i1 + 96 | 0;
 i9 = i1 + 100 | 0;
 i10 = i1 + 104 | 0;
 i11 = i1 + 108 | 0;
 i12 = i1 + 180 | 0;
 i13 = i1 + 184 | 0;
 i14 = i1 + 188 | 0;
 i15 = i1 + 192 | 0;
 i16 = i1 + 264 | 0;
 i17 = i1 + 280 | 0;
 i18 = i1 + 284 | 0;
 i19 = i1 + 288 | 0;
 i20 = i1 + 292 | 0;
 i21 = i1 + 320 | 0;
 i22 = i1 + 324 | 0;
 i23 = i1 + 364 | 0;
 i24 = i1 + 244 | 0;
 i25 = i21 + 8 | 0;
 i26 = i1 + 12 | 0;
 i27 = i26 + 56 | 0;
 do {
  HEAP32[i26 >> 2] = 0;
  i26 = i26 + 4 | 0;
 } while ((i26 | 0) < (i27 | 0));
 HEAP32[i5 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 + 8 >> 2] = 0;
 HEAP32[i5 + 12 >> 2] = 0;
 HEAP32[i5 + 16 >> 2] = 0;
 HEAP32[i5 + 20 >> 2] = 0;
 HEAP32[i5 + 24 >> 2] = 0;
 HEAP32[i5 + 28 >> 2] = 0;
 i26 = i12;
 i27 = i26 + 64 | 0;
 do {
  HEAP32[i26 >> 2] = 0;
  i26 = i26 + 4 | 0;
 } while ((i26 | 0) < (i27 | 0));
 HEAP32[i25 >> 2] = 0;
 HEAP32[i25 + 4 >> 2] = 0;
 HEAP32[i25 + 8 >> 2] = 0;
 i26 = i23;
 i27 = i26 + 48 | 0;
 do {
  HEAP32[i26 >> 2] = 0;
  i26 = i26 + 4 | 0;
 } while ((i26 | 0) < (i27 | 0));
 HEAPF32[i24 >> 2] = Math_fround(-1.0);
 i24 = i1 + 248 | 0;
 HEAP32[i24 >> 2] = 0;
 HEAP32[i24 + 4 >> 2] = 0;
 HEAP32[i24 + 8 >> 2] = 0;
 HEAP32[i24 + 12 >> 2] = 0;
 HEAPF32[i1 + 280 >> 2] = Math_fround(3402823469999999843913219.0e14);
 HEAPF32[i18 >> 2] = Math_fround(3402823469999999843913219.0e14);
 HEAPF32[i19 >> 2] = Math_fround(-3402823469999999843913219.0e14);
 HEAPF32[i20 >> 2] = Math_fround(-3402823469999999843913219.0e14);
 HEAP32[i16 >> 2] = HEAP32[i17 >> 2];
 HEAP32[i16 + 4 >> 2] = HEAP32[i17 + 4 >> 2];
 HEAP32[i16 + 8 >> 2] = HEAP32[i17 + 8 >> 2];
 HEAP32[i16 + 12 >> 2] = HEAP32[i17 + 12 >> 2];
 HEAP8[i1 + 296 >> 0] = 0;
 HEAP8[i1 + 297 >> 0] = 0;
 HEAP32[i1 + 312 >> 2] = 0;
 HEAP32[i1 + 308 >> 2] = 0;
 HEAP32[i1 + 300 >> 2] = 0;
 HEAP32[i1 + 304 >> 2] = 1;
 HEAP8[i1 + 316 >> 0] = 0;
 HEAP32[i21 >> 2] = 0;
 HEAP32[i22 >> 2] = 0;
 HEAP32[i1 + 340 >> 2] = 0;
 HEAP32[i1 + 348 >> 2] = 0;
 HEAP32[i1 + 344 >> 2] = 0;
 HEAPF32[i1 + 356 >> 2] = Math_fround(0.0);
 HEAP32[i1 + 352 >> 2] = 1;
 HEAPF32[i1 + 360 >> 2] = Math_fround(-1.0);
 i22 = i1 + 456 | 0;
 i21 = i1 + 452 | 0;
 i17 = i1 + 460 | 0;
 i16 = i1 + 464 | 0;
 i26 = i1 + 412 | 0;
 i27 = i26 + 52 | 0;
 do {
  HEAP32[i26 >> 2] = 0;
  i26 = i26 + 4 | 0;
 } while ((i26 | 0) < (i27 | 0));
 HEAPF32[i16 >> 2] = Math_fround(3402823469999999843913219.0e14);
 HEAPF32[i1 + 468 >> 2] = Math_fround(3402823469999999843913219.0e14);
 HEAPF32[i1 + 472 >> 2] = Math_fround(-3402823469999999843913219.0e14);
 HEAPF32[i1 + 476 >> 2] = Math_fround(-3402823469999999843913219.0e14);
 HEAPF32[i1 + 480 >> 2] = Math_fround(3402823469999999843913219.0e14);
 HEAPF32[i1 + 484 >> 2] = Math_fround(3402823469999999843913219.0e14);
 HEAPF32[i1 + 488 >> 2] = Math_fround(-3402823469999999843913219.0e14);
 HEAPF32[i1 + 492 >> 2] = Math_fround(-3402823469999999843913219.0e14);
 HEAPF32[i1 + 496 >> 2] = Math_fround(3402823469999999843913219.0e14);
 HEAPF32[i1 + 500 >> 2] = Math_fround(3402823469999999843913219.0e14);
 HEAPF32[i1 + 504 >> 2] = Math_fround(-3402823469999999843913219.0e14);
 HEAPF32[i1 + 508 >> 2] = Math_fround(-3402823469999999843913219.0e14);
 HEAPF32[i1 + 512 >> 2] = Math_fround(3402823469999999843913219.0e14);
 HEAPF32[i1 + 516 >> 2] = Math_fround(3402823469999999843913219.0e14);
 HEAPF32[i1 + 520 >> 2] = Math_fround(-3402823469999999843913219.0e14);
 HEAPF32[i1 + 524 >> 2] = Math_fround(-3402823469999999843913219.0e14);
 HEAPF32[i1 + 528 >> 2] = Math_fround(3402823469999999843913219.0e14);
 HEAPF32[i1 + 532 >> 2] = Math_fround(3402823469999999843913219.0e14);
 HEAPF32[i1 + 536 >> 2] = Math_fround(-3402823469999999843913219.0e14);
 HEAPF32[i1 + 540 >> 2] = Math_fround(-3402823469999999843913219.0e14);
 i16 = i1 + 636 | 0;
 i20 = i2 + 6192 | 0;
 i26 = i1 + 552 | 0;
 i27 = i26 + 72 | 0;
 do {
  HEAP32[i26 >> 2] = 0;
  i26 = i26 + 4 | 0;
 } while ((i26 | 0) < (i27 | 0));
 __ZN10ImDrawListC2EPK20ImDrawListSharedData(i16, i20);
 i20 = i1 + 784 | 0;
 HEAPF32[i20 >> 2] = Math_fround(3402823469999999843913219.0e14);
 HEAPF32[i1 + 788 >> 2] = Math_fround(3402823469999999843913219.0e14);
 HEAPF32[i1 + 792 >> 2] = Math_fround(-3402823469999999843913219.0e14);
 HEAPF32[i1 + 796 >> 2] = Math_fround(-3402823469999999843913219.0e14);
 HEAPF32[i1 + 800 >> 2] = Math_fround(3402823469999999843913219.0e14);
 HEAPF32[i1 + 804 >> 2] = Math_fround(3402823469999999843913219.0e14);
 HEAPF32[i1 + 808 >> 2] = Math_fround(-3402823469999999843913219.0e14);
 HEAPF32[i1 + 812 >> 2] = Math_fround(-3402823469999999843913219.0e14);
 i26 = (_strlen(i3) | 0) + 1 | 0;
 HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
 i27 = __ZL13MallocWrapperjPv(i26, 0) | 0;
 _memcpy(i27 | 0, i3 | 0, i26 | 0) | 0;
 HEAP32[i1 >> 2] = i27;
 i27 = __Z6ImHashPKvij(i3, 0, 0) | 0;
 i3 = i1 + 4 | 0;
 HEAP32[i3 >> 2] = i27;
 i26 = HEAP32[i21 >> 2] | 0;
 if ((i26 | 0) == (HEAP32[i22 >> 2] | 0)) {
  i2 = i26 + 1 | 0;
  if (!i26) i28 = 8; else i28 = ((i26 | 0) / 2 | 0) + i26 | 0;
  i19 = (i28 | 0) > (i2 | 0) ? i28 : i2;
  if ((i26 | 0) < (i19 | 0)) {
   HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
   i2 = __ZL13MallocWrapperjPv(i19 << 2, 0) | 0;
   i28 = HEAP32[i17 >> 2] | 0;
   if (!i28) i29 = i17; else {
    _memcpy(i2 | 0, i28 | 0, HEAP32[i21 >> 2] << 2 | 0) | 0;
    i28 = HEAP32[i17 >> 2] | 0;
    if (i28 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
    __ZL11FreeWrapperPvS_(i28, 0);
    i29 = i17;
   }
   HEAP32[i29 >> 2] = i2;
   HEAP32[i22 >> 2] = i19;
   i30 = HEAP32[i21 >> 2] | 0;
   i31 = HEAP32[i3 >> 2] | 0;
  } else {
   i30 = i26;
   i31 = i27;
  }
 } else {
  i30 = i26;
  i31 = i27;
 }
 HEAP32[(HEAP32[i17 >> 2] | 0) + (i30 << 2) >> 2] = i31;
 i31 = HEAP32[i21 >> 2] | 0;
 HEAP32[i21 >> 2] = i31 + 1;
 i21 = i1 + 8 | 0;
 HEAP32[i21 >> 2] = 0;
 HEAP32[i21 + 4 >> 2] = 0;
 HEAP32[i21 + 8 >> 2] = 0;
 HEAP32[i21 + 12 >> 2] = 0;
 HEAP32[i21 + 16 >> 2] = 0;
 HEAP32[i21 + 20 >> 2] = 0;
 HEAP32[i21 + 24 >> 2] = 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 HEAP32[i4 + 12 >> 2] = 0;
 HEAP32[i4 + 16 >> 2] = 0;
 HEAP32[i4 + 20 >> 2] = 0;
 HEAP32[i4 + 24 >> 2] = 0;
 HEAP32[i4 + 28 >> 2] = 0;
 if ((i31 | 0) <= -1) ___assert_fail(38278, 56850, 1245, 38287);
 i4 = __Z6ImHashPKvij(34218, 0, HEAP32[(HEAP32[i17 >> 2] | 0) + (i31 << 2) >> 2] | 0) | 0;
 i31 = HEAP32[1460598] | 0;
 if ((HEAP32[i31 + 6420 >> 2] | 0) == (i4 | 0)) HEAP8[i31 + 6432 >> 0] = 1;
 if ((HEAP32[i31 + 6424 >> 2] | 0) == (i4 | 0)) HEAP8[i31 + 6436 >> 0] = 1;
 HEAP32[i1 + 76 >> 2] = i4;
 HEAP32[i1 + 80 >> 2] = 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i7 >> 2] = 2139095039;
 HEAP32[i8 >> 2] = 2139095039;
 HEAP32[i9 >> 2] = 1056964608;
 HEAP32[i10 >> 2] = 1056964608;
 HEAP32[i11 >> 2] = 0;
 HEAP32[i11 + 4 >> 2] = 0;
 HEAP32[i11 + 8 >> 2] = 0;
 HEAP32[i11 + 12 >> 2] = 0;
 HEAP16[i11 + 16 >> 1] = 0;
 HEAP32[i1 + 128 >> 2] = -1;
 HEAP32[i1 + 132 >> 2] = -1;
 HEAP32[i1 + 136 >> 2] = 0;
 HEAP32[i1 + 140 >> 2] = 0;
 HEAP32[i1 + 148 >> 2] = -1;
 HEAP32[i1 + 144 >> 2] = -1;
 HEAP8[i1 + 152 >> 0] = 0;
 HEAP32[i1 + 156 >> 2] = 0;
 HEAP32[i1 + 160 >> 2] = -1;
 HEAP32[i1 + 164 >> 2] = 0;
 HEAP32[i1 + 176 >> 2] = 15;
 HEAP32[i1 + 172 >> 2] = 15;
 HEAP32[i1 + 168 >> 2] = 15;
 HEAP32[i14 >> 2] = 2139095039;
 HEAP32[i15 >> 2] = 2139095039;
 HEAP32[i12 >> 2] = 2139095039;
 HEAP32[i13 >> 2] = 2139095039;
 HEAP32[i1 + 544 >> 2] = -1;
 HEAPF32[i1 + 548 >> 2] = Math_fround(0.0);
 HEAPF32[i1 + 624 >> 2] = Math_fround(1.0);
 HEAP32[i1 + 628 >> 2] = -1;
 HEAP32[i1 + 632 >> 2] = i16;
 HEAP32[i1 + 680 >> 2] = HEAP32[i1 >> 2];
 i16 = i1 + 752 | 0;
 HEAP32[i1 + 780 >> 2] = 0;
 HEAP32[i1 + 776 >> 2] = 0;
 i13 = i1 + 800 | 0;
 HEAP32[i16 >> 2] = 0;
 HEAP32[i16 + 4 >> 2] = 0;
 HEAP32[i16 + 8 >> 2] = 0;
 HEAP32[i16 + 12 >> 2] = 0;
 HEAP32[i16 + 16 >> 2] = 0;
 HEAPF32[i1 + 800 >> 2] = Math_fround(3402823469999999843913219.0e14);
 HEAPF32[i1 + 804 >> 2] = Math_fround(3402823469999999843913219.0e14);
 HEAPF32[i1 + 808 >> 2] = Math_fround(-3402823469999999843913219.0e14);
 HEAPF32[i1 + 812 >> 2] = Math_fround(-3402823469999999843913219.0e14);
 HEAP32[i20 >> 2] = HEAP32[i13 >> 2];
 HEAP32[i20 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
 HEAP32[i20 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
 HEAP32[i20 + 12 >> 2] = HEAP32[i13 + 12 >> 2];
 HEAP32[i1 + 772 >> 2] = 0;
 HEAP32[i1 + 820 >> 2] = -1;
 HEAP32[i1 + 816 >> 2] = -1;
 HEAP32[i1 + 828 >> 2] = 2147483647;
 HEAP32[i1 + 824 >> 2] = 2147483647;
 HEAP32[i1 + 836 >> 2] = 2147483647;
 HEAP32[i1 + 832 >> 2] = 2147483647;
 return;
}

function __ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri(i1, i2, i3, i4, i5, i6, i7, i8, i9, i10) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 var i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i12 = i11 + 12 | 0;
 i13 = i11;
 if (i1) {
  i1 = __ZNKSt3__26locale9use_facetERNS0_2idE(i3, 5846924) | 0;
  if (i2) {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 63](i12, i1);
   i14 = HEAP32[i12 >> 2] | 0;
   HEAP8[i4 >> 0] = i14;
   HEAP8[i4 + 1 >> 0] = i14 >> 8;
   HEAP8[i4 + 2 >> 0] = i14 >> 16;
   HEAP8[i4 + 3 >> 0] = i14 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 32 >> 2] & 63](i13, i1);
   i14 = i9 + 8 + 3 | 0;
   if ((HEAP8[i14 >> 0] | 0) < 0) {
    i15 = HEAP32[i9 >> 2] | 0;
    HEAP32[i12 >> 2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw(i15, i12);
    HEAP32[i9 + 4 >> 2] = 0;
   } else {
    HEAP32[i12 >> 2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw(i9, i12);
    HEAP8[i14 >> 0] = 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i9, 0);
   HEAP32[i9 >> 2] = HEAP32[i13 >> 2];
   HEAP32[i9 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
   HEAP32[i9 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
   i14 = 0;
   while (1) {
    if ((i14 | 0) == 3) break;
    HEAP32[i13 + (i14 << 2) >> 2] = 0;
    i14 = i14 + 1 | 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i13);
  } else {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 63](i12, i1);
   i14 = HEAP32[i12 >> 2] | 0;
   HEAP8[i4 >> 0] = i14;
   HEAP8[i4 + 1 >> 0] = i14 >> 8;
   HEAP8[i4 + 2 >> 0] = i14 >> 16;
   HEAP8[i4 + 3 >> 0] = i14 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 63](i13, i1);
   i14 = i9 + 8 + 3 | 0;
   if ((HEAP8[i14 >> 0] | 0) < 0) {
    i15 = HEAP32[i9 >> 2] | 0;
    HEAP32[i12 >> 2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw(i15, i12);
    HEAP32[i9 + 4 >> 2] = 0;
   } else {
    HEAP32[i12 >> 2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw(i9, i12);
    HEAP8[i14 >> 0] = 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i9, 0);
   HEAP32[i9 >> 2] = HEAP32[i13 >> 2];
   HEAP32[i9 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
   HEAP32[i9 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
   i14 = 0;
   while (1) {
    if ((i14 | 0) == 3) break;
    HEAP32[i13 + (i14 << 2) >> 2] = 0;
    i14 = i14 + 1 | 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i13);
  }
  i14 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 127](i1) | 0;
  HEAP32[i5 >> 2] = i14;
  i14 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
  HEAP32[i6 >> 2] = i14;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 63](i13, i1);
  i14 = i7 + 11 | 0;
  if ((HEAP8[i14 >> 0] | 0) < 0) {
   i15 = HEAP32[i7 >> 2] | 0;
   HEAP8[i12 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i15, i12);
   HEAP32[i7 + 4 >> 2] = 0;
   i16 = i7;
  } else {
   HEAP8[i12 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i7, i12);
   HEAP8[i14 >> 0] = 0;
   i16 = i7;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i7, 0);
  HEAP32[i16 >> 2] = HEAP32[i13 >> 2];
  HEAP32[i16 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
  HEAP32[i16 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
  i16 = 0;
  while (1) {
   if ((i16 | 0) == 3) break;
   HEAP32[i13 + (i16 << 2) >> 2] = 0;
   i16 = i16 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i13);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 63](i13, i1);
  i16 = i8 + 8 + 3 | 0;
  if ((HEAP8[i16 >> 0] | 0) < 0) {
   i14 = HEAP32[i8 >> 2] | 0;
   HEAP32[i12 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i14, i12);
   HEAP32[i8 + 4 >> 2] = 0;
  } else {
   HEAP32[i12 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i8, i12);
   HEAP8[i16 >> 0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i8, 0);
  HEAP32[i8 >> 2] = HEAP32[i13 >> 2];
  HEAP32[i8 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
  HEAP32[i8 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
  i16 = 0;
  while (1) {
   if ((i16 | 0) == 3) break;
   HEAP32[i13 + (i16 << 2) >> 2] = 0;
   i16 = i16 + 1 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i13);
  i17 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0;
 } else {
  i1 = __ZNKSt3__26locale9use_facetERNS0_2idE(i3, 5846916) | 0;
  if (i2) {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 63](i12, i1);
   i2 = HEAP32[i12 >> 2] | 0;
   HEAP8[i4 >> 0] = i2;
   HEAP8[i4 + 1 >> 0] = i2 >> 8;
   HEAP8[i4 + 2 >> 0] = i2 >> 16;
   HEAP8[i4 + 3 >> 0] = i2 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 32 >> 2] & 63](i13, i1);
   i2 = i9 + 8 + 3 | 0;
   if ((HEAP8[i2 >> 0] | 0) < 0) {
    i3 = HEAP32[i9 >> 2] | 0;
    HEAP32[i12 >> 2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw(i3, i12);
    HEAP32[i9 + 4 >> 2] = 0;
   } else {
    HEAP32[i12 >> 2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw(i9, i12);
    HEAP8[i2 >> 0] = 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i9, 0);
   HEAP32[i9 >> 2] = HEAP32[i13 >> 2];
   HEAP32[i9 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
   HEAP32[i9 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
   i2 = 0;
   while (1) {
    if ((i2 | 0) == 3) break;
    HEAP32[i13 + (i2 << 2) >> 2] = 0;
    i2 = i2 + 1 | 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i13);
  } else {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 63](i12, i1);
   i2 = HEAP32[i12 >> 2] | 0;
   HEAP8[i4 >> 0] = i2;
   HEAP8[i4 + 1 >> 0] = i2 >> 8;
   HEAP8[i4 + 2 >> 0] = i2 >> 16;
   HEAP8[i4 + 3 >> 0] = i2 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 63](i13, i1);
   i2 = i9 + 8 + 3 | 0;
   if ((HEAP8[i2 >> 0] | 0) < 0) {
    i4 = HEAP32[i9 >> 2] | 0;
    HEAP32[i12 >> 2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw(i4, i12);
    HEAP32[i9 + 4 >> 2] = 0;
   } else {
    HEAP32[i12 >> 2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw(i9, i12);
    HEAP8[i2 >> 0] = 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i9, 0);
   HEAP32[i9 >> 2] = HEAP32[i13 >> 2];
   HEAP32[i9 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
   HEAP32[i9 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
   i9 = 0;
   while (1) {
    if ((i9 | 0) == 3) break;
    HEAP32[i13 + (i9 << 2) >> 2] = 0;
    i9 = i9 + 1 | 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i13);
  }
  i9 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 127](i1) | 0;
  HEAP32[i5 >> 2] = i9;
  i9 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
  HEAP32[i6 >> 2] = i9;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 63](i13, i1);
  i9 = i7 + 11 | 0;
  if ((HEAP8[i9 >> 0] | 0) < 0) {
   i6 = HEAP32[i7 >> 2] | 0;
   HEAP8[i12 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i6, i12);
   HEAP32[i7 + 4 >> 2] = 0;
   i18 = i7;
  } else {
   HEAP8[i12 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i7, i12);
   HEAP8[i9 >> 0] = 0;
   i18 = i7;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i7, 0);
  HEAP32[i18 >> 2] = HEAP32[i13 >> 2];
  HEAP32[i18 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
  HEAP32[i18 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
  i18 = 0;
  while (1) {
   if ((i18 | 0) == 3) break;
   HEAP32[i13 + (i18 << 2) >> 2] = 0;
   i18 = i18 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i13);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 63](i13, i1);
  i18 = i8 + 8 + 3 | 0;
  if ((HEAP8[i18 >> 0] | 0) < 0) {
   i7 = HEAP32[i8 >> 2] | 0;
   HEAP32[i12 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i7, i12);
   HEAP32[i8 + 4 >> 2] = 0;
  } else {
   HEAP32[i12 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i8, i12);
   HEAP8[i18 >> 0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i8, 0);
  HEAP32[i8 >> 2] = HEAP32[i13 >> 2];
  HEAP32[i8 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
  HEAP32[i8 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
  i8 = 0;
  while (1) {
   if ((i8 | 0) == 3) break;
   HEAP32[i13 + (i8 << 2) >> 2] = 0;
   i8 = i8 + 1 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i13);
  i17 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0;
 }
 HEAP32[i10 >> 2] = i17;
 STACKTOP = i11;
 return;
}

function _png_colorspace_check_xy(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, d24 = 0.0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, d36 = 0.0, d37 = 0.0, d38 = 0.0, d39 = 0.0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i4 = i3;
 i5 = HEAP32[i2 >> 2] | 0;
 if (i5 >>> 0 > 1e5) {
  i6 = 1;
  STACKTOP = i3;
  return i6 | 0;
 }
 i7 = i2 + 4 | 0;
 i8 = HEAP32[i7 >> 2] | 0;
 if ((i8 | 0) < 0 | (i8 | 0) > (1e5 - i5 | 0)) {
  i6 = 1;
  STACKTOP = i3;
  return i6 | 0;
 }
 i9 = i2 + 8 | 0;
 i10 = HEAP32[i9 >> 2] | 0;
 if (i10 >>> 0 > 1e5) {
  i6 = 1;
  STACKTOP = i3;
  return i6 | 0;
 }
 i11 = i2 + 12 | 0;
 i12 = HEAP32[i11 >> 2] | 0;
 if ((i12 | 0) < 0 | (i12 | 0) > (1e5 - i10 | 0)) {
  i6 = 1;
  STACKTOP = i3;
  return i6 | 0;
 }
 i13 = i2 + 16 | 0;
 i14 = HEAP32[i13 >> 2] | 0;
 if (i14 >>> 0 > 1e5) {
  i6 = 1;
  STACKTOP = i3;
  return i6 | 0;
 }
 i15 = i2 + 20 | 0;
 i16 = HEAP32[i15 >> 2] | 0;
 if ((i16 | 0) < 0 | (i16 | 0) > (1e5 - i14 | 0)) {
  i6 = 1;
  STACKTOP = i3;
  return i6 | 0;
 }
 i17 = i2 + 24 | 0;
 i18 = HEAP32[i17 >> 2] | 0;
 if (i18 >>> 0 > 1e5) {
  i6 = 1;
  STACKTOP = i3;
  return i6 | 0;
 }
 i19 = i2 + 28 | 0;
 i20 = HEAP32[i19 >> 2] | 0;
 if ((i20 | 0) < 0 | (i20 | 0) > (1e5 - i18 | 0)) {
  i6 = 1;
  STACKTOP = i3;
  return i6 | 0;
 }
 i21 = i10 - i14 | 0;
 i10 = i8 - i16 | 0;
 i8 = (i21 | 0) == 0;
 i22 = (i10 | 0) == 0;
 if (i8 | i22) i23 = 0; else {
  d24 = +Math_floor(+(+(i21 | 0) * +(i10 | 0) / 7.0 + .5));
  if (d24 <= 2147483647.0 & d24 >= -2147483648.0) i23 = ~~d24; else {
   i6 = 2;
   STACKTOP = i3;
   return i6 | 0;
  }
 }
 i25 = i12 - i16 | 0;
 i12 = i5 - i14 | 0;
 i26 = (i25 | 0) == 0;
 i27 = (i12 | 0) == 0;
 if (i27 | i26) i28 = 0; else {
  d24 = +Math_floor(+(+(i12 | 0) * +(i25 | 0) / 7.0 + .5));
  if (d24 <= 2147483647.0 & d24 >= -2147483648.0) i28 = ~~d24; else {
   i6 = 2;
   STACKTOP = i3;
   return i6 | 0;
  }
 }
 i29 = i23 - i28 | 0;
 i28 = i20 - i16 | 0;
 i16 = (i28 | 0) == 0;
 if (i8 | i16) i30 = 0; else {
  d24 = +Math_floor(+(+(i21 | 0) * +(i28 | 0) / 7.0 + .5));
  if (d24 <= 2147483647.0 & d24 >= -2147483648.0) i30 = ~~d24; else {
   i6 = 2;
   STACKTOP = i3;
   return i6 | 0;
  }
 }
 i21 = i18 - i14 | 0;
 i14 = (i21 | 0) == 0;
 if (i26 | i14) i31 = 0; else {
  d24 = +Math_floor(+(+(i25 | 0) * +(i21 | 0) / 7.0 + .5));
  if (d24 <= 2147483647.0 & d24 >= -2147483648.0) i31 = ~~d24; else {
   i6 = 2;
   STACKTOP = i3;
   return i6 | 0;
  }
 }
 i25 = i30 - i31 | 0;
 if (!i25) {
  i6 = 1;
  STACKTOP = i3;
  return i6 | 0;
 }
 i31 = (i20 | 0) == 0 | (i29 | 0) == 0;
 if (i31) i32 = 0; else {
  d24 = +Math_floor(+(+(i20 | 0) * +(i29 | 0) / +(i25 | 0) + .5));
  if (d24 <= 2147483647.0 & d24 >= -2147483648.0) i32 = ~~d24; else {
   i6 = 1;
   STACKTOP = i3;
   return i6 | 0;
  }
 }
 if ((i32 | 0) <= (i20 | 0)) {
  i6 = 1;
  STACKTOP = i3;
  return i6 | 0;
 }
 if (i22 | i14) i33 = 0; else {
  d24 = +Math_floor(+(+(i10 | 0) * +(i21 | 0) / 7.0 + .5));
  if (d24 <= 2147483647.0 & d24 >= -2147483648.0) i33 = ~~d24; else {
   i6 = 2;
   STACKTOP = i3;
   return i6 | 0;
  }
 }
 if (i27 | i16) i34 = 0; else {
  d24 = +Math_floor(+(+(i12 | 0) * +(i28 | 0) / 7.0 + .5));
  if (d24 <= 2147483647.0 & d24 >= -2147483648.0) i34 = ~~d24; else {
   i6 = 2;
   STACKTOP = i3;
   return i6 | 0;
  }
 }
 i28 = i33 - i34 | 0;
 if (!i28) {
  i6 = 1;
  STACKTOP = i3;
  return i6 | 0;
 }
 do if (i31) i35 = 0; else {
  d24 = +Math_floor(+(+(i20 | 0) * +(i29 | 0) / +(i28 | 0) + .5));
  if (d24 <= 2147483647.0 & d24 >= -2147483648.0) {
   i35 = ~~d24;
   break;
  } else i6 = 1;
  STACKTOP = i3;
  return i6 | 0;
 } while (0);
 if ((i35 | 0) <= (i20 | 0)) {
  i6 = 1;
  STACKTOP = i3;
  return i6 | 0;
 }
 d24 = +Math_floor(+(1.0e10 / +(i20 | 0) + .5));
 d36 = +(i32 | 0);
 d37 = +Math_floor(+(1.0e10 / d36 + .5));
 d38 = +(i35 | 0);
 d39 = +Math_floor(+(1.0e10 / d38 + .5));
 i20 = (d39 <= 2147483647.0 & d39 >= -2147483648.0 ? 0 - ~~d39 | 0 : 0) + ((d24 <= 2147483647.0 & d24 >= -2147483648.0 ? ~~d24 : 0) - (d37 <= 2147483647.0 & d37 >= -2147483648.0 ? ~~d37 : 0)) | 0;
 if ((i20 | 0) < 1) {
  i6 = 1;
  STACKTOP = i3;
  return i6 | 0;
 }
 if (!i32) {
  i6 = 1;
  STACKTOP = i3;
  return i6 | 0;
 }
 do if (!i5) i40 = 0; else {
  d37 = +Math_floor(+(+(i5 | 0) * 1.0e5 / d36 + .5));
  if (d37 <= 2147483647.0 & d37 >= -2147483648.0) {
   i40 = ~~d37;
   break;
  } else i6 = 1;
  STACKTOP = i3;
  return i6 | 0;
 } while (0);
 HEAP32[i1 >> 2] = i40;
 i40 = i1 + 4 | 0;
 i5 = HEAP32[i7 >> 2] | 0;
 do if (!i5) i41 = 0; else {
  d37 = +Math_floor(+(+(i5 | 0) * 1.0e5 / d36 + .5));
  if (d37 <= 2147483647.0 & d37 >= -2147483648.0) {
   i41 = ~~d37;
   break;
  } else i6 = 1;
  STACKTOP = i3;
  return i6 | 0;
 } while (0);
 HEAP32[i40 >> 2] = i41;
 i41 = i1 + 8 | 0;
 i40 = 1e5 - (HEAP32[i2 >> 2] | 0) - (HEAP32[i7 >> 2] | 0) | 0;
 do if (!i40) i42 = 0; else {
  d37 = +Math_floor(+(+(i40 | 0) * 1.0e5 / d36 + .5));
  if (d37 <= 2147483647.0 & d37 >= -2147483648.0) {
   i42 = ~~d37;
   break;
  } else i6 = 1;
  STACKTOP = i3;
  return i6 | 0;
 } while (0);
 HEAP32[i41 >> 2] = i42;
 i42 = i1 + 12 | 0;
 i41 = HEAP32[i9 >> 2] | 0;
 if (!i35) {
  i6 = 1;
  STACKTOP = i3;
  return i6 | 0;
 }
 do if (!i41) i43 = 0; else {
  d36 = +Math_floor(+(+(i41 | 0) * 1.0e5 / d38 + .5));
  if (d36 <= 2147483647.0 & d36 >= -2147483648.0) {
   i43 = ~~d36;
   break;
  } else i6 = 1;
  STACKTOP = i3;
  return i6 | 0;
 } while (0);
 HEAP32[i42 >> 2] = i43;
 i43 = i1 + 16 | 0;
 i42 = HEAP32[i11 >> 2] | 0;
 do if (!i42) i44 = 0; else {
  d36 = +Math_floor(+(+(i42 | 0) * 1.0e5 / d38 + .5));
  if (d36 <= 2147483647.0 & d36 >= -2147483648.0) {
   i44 = ~~d36;
   break;
  } else i6 = 1;
  STACKTOP = i3;
  return i6 | 0;
 } while (0);
 HEAP32[i43 >> 2] = i44;
 i44 = i1 + 20 | 0;
 i43 = 1e5 - (HEAP32[i9 >> 2] | 0) - (HEAP32[i11 >> 2] | 0) | 0;
 do if (!i43) i45 = 0; else {
  d36 = +Math_floor(+(+(i43 | 0) * 1.0e5 / d38 + .5));
  if (d36 <= 2147483647.0 & d36 >= -2147483648.0) {
   i45 = ~~d36;
   break;
  } else i6 = 1;
  STACKTOP = i3;
  return i6 | 0;
 } while (0);
 HEAP32[i44 >> 2] = i45;
 i45 = i1 + 24 | 0;
 i44 = HEAP32[i13 >> 2] | 0;
 do if (!i44) i46 = 0; else {
  d38 = +Math_floor(+(+(i20 | 0) * +(i44 | 0) / 1.0e5 + .5));
  if (d38 <= 2147483647.0 & d38 >= -2147483648.0) {
   i46 = ~~d38;
   break;
  } else i6 = 1;
  STACKTOP = i3;
  return i6 | 0;
 } while (0);
 HEAP32[i45 >> 2] = i46;
 i46 = i1 + 28 | 0;
 i45 = HEAP32[i15 >> 2] | 0;
 do if (!i45) i47 = 0; else {
  d38 = +Math_floor(+(+(i20 | 0) * +(i45 | 0) / 1.0e5 + .5));
  if (d38 <= 2147483647.0 & d38 >= -2147483648.0) {
   i47 = ~~d38;
   break;
  } else i6 = 1;
  STACKTOP = i3;
  return i6 | 0;
 } while (0);
 HEAP32[i46 >> 2] = i47;
 i47 = i1 + 32 | 0;
 i46 = 1e5 - (HEAP32[i13 >> 2] | 0) - (HEAP32[i15 >> 2] | 0) | 0;
 do if (!i46) i48 = 0; else {
  d38 = +Math_floor(+(+(i20 | 0) * +(i46 | 0) / 1.0e5 + .5));
  if (d38 <= 2147483647.0 & d38 >= -2147483648.0) {
   i48 = ~~d38;
   break;
  } else i6 = 1;
  STACKTOP = i3;
  return i6 | 0;
 } while (0);
 HEAP32[i47 >> 2] = i48;
 i48 = _png_xy_from_XYZ(i4, i1) | 0;
 if (i48 | 0) {
  i6 = i48;
  STACKTOP = i3;
  return i6 | 0;
 }
 i48 = HEAP32[i17 >> 2] | 0;
 i17 = HEAP32[i4 + 24 >> 2] | 0;
 if ((i48 | 0) < (i17 + -5 | 0) | (i48 | 0) > (i17 + 5 | 0)) {
  i6 = 1;
  STACKTOP = i3;
  return i6 | 0;
 }
 i17 = HEAP32[i19 >> 2] | 0;
 i19 = HEAP32[i4 + 28 >> 2] | 0;
 if ((i17 | 0) < (i19 + -5 | 0) | (i17 | 0) > (i19 + 5 | 0)) {
  i6 = 1;
  STACKTOP = i3;
  return i6 | 0;
 }
 i19 = HEAP32[i2 >> 2] | 0;
 i2 = HEAP32[i4 >> 2] | 0;
 if ((i19 | 0) < (i2 + -5 | 0) | (i19 | 0) > (i2 + 5 | 0)) {
  i6 = 1;
  STACKTOP = i3;
  return i6 | 0;
 }
 i2 = HEAP32[i7 >> 2] | 0;
 i7 = HEAP32[i4 + 4 >> 2] | 0;
 if ((i2 | 0) < (i7 + -5 | 0) | (i2 | 0) > (i7 + 5 | 0)) {
  i6 = 1;
  STACKTOP = i3;
  return i6 | 0;
 }
 i7 = HEAP32[i9 >> 2] | 0;
 i9 = HEAP32[i4 + 8 >> 2] | 0;
 if ((i7 | 0) < (i9 + -5 | 0) | (i7 | 0) > (i9 + 5 | 0)) {
  i6 = 1;
  STACKTOP = i3;
  return i6 | 0;
 }
 i9 = HEAP32[i11 >> 2] | 0;
 i11 = HEAP32[i4 + 12 >> 2] | 0;
 if ((i9 | 0) < (i11 + -5 | 0) | (i9 | 0) > (i11 + 5 | 0)) {
  i6 = 1;
  STACKTOP = i3;
  return i6 | 0;
 }
 i11 = HEAP32[i13 >> 2] | 0;
 i13 = HEAP32[i4 + 16 >> 2] | 0;
 if ((i11 | 0) < (i13 + -5 | 0) | (i11 | 0) > (i13 + 5 | 0)) {
  i6 = 1;
  STACKTOP = i3;
  return i6 | 0;
 }
 i13 = HEAP32[i15 >> 2] | 0;
 i15 = HEAP32[i4 + 20 >> 2] | 0;
 i6 = ((i13 | 0) < (i15 + -5 | 0) | (i13 | 0) > (i15 + 5 | 0)) & 1;
 STACKTOP = i3;
 return i6 | 0;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0;
 i9 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i11 = i10 + 12 | 0;
 i12 = i10 + 8 | 0;
 i13 = i10 + 4 | 0;
 i14 = i10;
 __ZNKSt3__28ios_base6getlocEv(i11, i4);
 i15 = __ZNKSt3__26locale9use_facetERNS0_2idE(i11, 5845188) | 0;
 __ZNSt3__26localeD2Ev(i11);
 HEAP32[i5 >> 2] = 0;
 i16 = i15 + 8 | 0;
 i17 = i7;
 i7 = 0;
 L1 : while (1) {
  i18 = (i17 | 0) != (i8 | 0);
  i19 = i7;
  while (1) {
   i20 = HEAP32[i2 >> 2] | 0;
   if (!(i18 & (i19 | 0) == 0)) {
    i21 = i20;
    break L1;
   }
   i22 = i20;
   if (!i20) {
    i23 = 0;
    i24 = 1;
    i25 = i22;
   } else {
    i26 = HEAP32[i20 + 12 >> 2] | 0;
    if ((i26 | 0) == (HEAP32[i20 + 16 >> 2] | 0)) i27 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i20 >> 2] | 0) + 36 >> 2] & 127](i20) | 0; else i27 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i26 >> 0] | 0) | 0;
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i27, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
     HEAP32[i2 >> 2] = 0;
     i23 = 0;
     i24 = 1;
     i25 = 0;
    } else {
     i23 = i20;
     i24 = 0;
     i25 = i22;
    }
   }
   i22 = HEAP32[i3 >> 2] | 0;
   i20 = i22;
   do if (!i22) {
    i28 = i20;
    i9 = 16;
   } else {
    i26 = HEAP32[i22 + 12 >> 2] | 0;
    if ((i26 | 0) == (HEAP32[i22 + 16 >> 2] | 0)) i29 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i22 >> 2] | 0) + 36 >> 2] & 127](i22) | 0; else i29 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i26 >> 0] | 0) | 0;
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i29, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
     HEAP32[i3 >> 2] = 0;
     i28 = 0;
     i9 = 16;
     break;
    } else if (i24) {
     i30 = i22;
     i31 = i20;
     break;
    } else {
     i9 = 62;
     break L1;
    }
   } while (0);
   if ((i9 | 0) == 16) {
    i9 = 0;
    if (i24) {
     i9 = 62;
     break L1;
    } else {
     i30 = 0;
     i31 = i28;
    }
   }
   if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i15 >> 2] | 0) + 36 >> 2] & 31](i15, HEAP8[i17 >> 0] | 0, 0) | 0) << 24 >> 24 == 37) {
    i9 = 19;
    break;
   }
   i20 = HEAP8[i17 >> 0] | 0;
   if (i20 << 24 >> 24 > -1) {
    i32 = HEAP32[i16 >> 2] | 0;
    if (HEAP16[i32 + (i20 << 24 >> 24 << 1) >> 1] & 8192) {
     i33 = i17;
     i9 = 26;
     break;
    }
   }
   i34 = i23 + 12 | 0;
   i20 = HEAP32[i34 >> 2] | 0;
   i35 = i23 + 16 | 0;
   if ((i20 | 0) == (HEAP32[i35 >> 2] | 0)) i36 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 36 >> 2] & 127](i23) | 0; else i36 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i20 >> 0] | 0) | 0;
   i20 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i15 >> 2] | 0) + 12 >> 2] & 31](i15, i36 & 255) | 0;
   if (i20 << 24 >> 24 == (FUNCTION_TABLE_iii[HEAP32[(HEAP32[i15 >> 2] | 0) + 12 >> 2] & 31](i15, HEAP8[i17 >> 0] | 0) | 0) << 24 >> 24) {
    i9 = 56;
    break;
   }
   HEAP32[i5 >> 2] = 4;
   i19 = 4;
  }
  L35 : do if ((i9 | 0) == 19) {
   i9 = 0;
   i19 = i17 + 1 | 0;
   if ((i19 | 0) == (i8 | 0)) {
    i9 = 62;
    break L1;
   }
   i18 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i15 >> 2] | 0) + 36 >> 2] & 31](i15, HEAP8[i19 >> 0] | 0, 0) | 0;
   switch (i18 << 24 >> 24) {
   case 48:
   case 69:
    {
     i20 = i17 + 2 | 0;
     if ((i20 | 0) == (i8 | 0)) {
      i9 = 62;
      break L1;
     }
     i37 = i18;
     i38 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i15 >> 2] | 0) + 36 >> 2] & 31](i15, HEAP8[i20 >> 0] | 0, 0) | 0;
     i39 = i19;
     break;
    }
   default:
    {
     i37 = 0;
     i38 = i18;
     i39 = i17;
    }
   }
   i18 = HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] | 0;
   HEAP32[i13 >> 2] = i25;
   HEAP32[i14 >> 2] = i31;
   HEAP32[i12 >> 2] = HEAP32[i13 >> 2];
   HEAP32[i11 >> 2] = HEAP32[i14 >> 2];
   i19 = FUNCTION_TABLE_iiiiiiiii[i18 & 15](i1, i12, i11, i4, i5, i6, i38, i37) | 0;
   HEAP32[i2 >> 2] = i19;
   i40 = i39 + 2 | 0;
  } else if ((i9 | 0) == 26) {
   while (1) {
    i9 = 0;
    i19 = i33 + 1 | 0;
    if ((i19 | 0) == (i8 | 0)) {
     i41 = i8;
     break;
    }
    i18 = HEAP8[i19 >> 0] | 0;
    if (i18 << 24 >> 24 <= -1) {
     i41 = i19;
     break;
    }
    if (!(HEAP16[i32 + (i18 << 24 >> 24 << 1) >> 1] & 8192)) {
     i41 = i19;
     break;
    } else {
     i33 = i19;
     i9 = 26;
    }
   }
   i19 = i23;
   i18 = i30;
   i20 = i30;
   while (1) {
    if (!i19) {
     i42 = 1;
     i43 = 0;
    } else {
     i22 = HEAP32[i19 + 12 >> 2] | 0;
     if ((i22 | 0) == (HEAP32[i19 + 16 >> 2] | 0)) i44 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i19 >> 2] | 0) + 36 >> 2] & 127](i19) | 0; else i44 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i22 >> 0] | 0) | 0;
     if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i44, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
      HEAP32[i2 >> 2] = 0;
      i42 = 1;
      i43 = 0;
     } else {
      i42 = 0;
      i43 = i19;
     }
    }
    do if (!i20) {
     i45 = i18;
     i9 = 42;
    } else {
     i22 = HEAP32[i20 + 12 >> 2] | 0;
     if ((i22 | 0) == (HEAP32[i20 + 16 >> 2] | 0)) i46 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i20 >> 2] | 0) + 36 >> 2] & 127](i20) | 0; else i46 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i22 >> 0] | 0) | 0;
     if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i46, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
      HEAP32[i3 >> 2] = 0;
      i45 = 0;
      i9 = 42;
      break;
     } else if (i42 ^ (i18 | 0) == 0) {
      i47 = i18;
      i48 = i18;
      break;
     } else {
      i40 = i41;
      break L35;
     }
    } while (0);
    if ((i9 | 0) == 42) {
     i9 = 0;
     if (i42) {
      i40 = i41;
      break L35;
     } else {
      i47 = i45;
      i48 = 0;
     }
    }
    i22 = i43 + 12 | 0;
    i26 = HEAP32[i22 >> 2] | 0;
    i49 = i43 + 16 | 0;
    if ((i26 | 0) == (HEAP32[i49 >> 2] | 0)) i50 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i43 >> 2] | 0) + 36 >> 2] & 127](i43) | 0; else i50 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i26 >> 0] | 0) | 0;
    if ((i50 & 255) << 24 >> 24 <= -1) {
     i40 = i41;
     break L35;
    }
    if (!(HEAP16[(HEAP32[i16 >> 2] | 0) + (i50 << 24 >> 24 << 1) >> 1] & 8192)) {
     i40 = i41;
     break L35;
    }
    i26 = HEAP32[i22 >> 2] | 0;
    if ((i26 | 0) == (HEAP32[i49 >> 2] | 0)) {
     FUNCTION_TABLE_ii[HEAP32[(HEAP32[i43 >> 2] | 0) + 40 >> 2] & 127](i43) | 0;
     i19 = i43;
     i18 = i47;
     i20 = i48;
     continue;
    } else {
     HEAP32[i22 >> 2] = i26 + 1;
     __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i26 >> 0] | 0) | 0;
     i19 = i43;
     i18 = i47;
     i20 = i48;
     continue;
    }
   }
  } else if ((i9 | 0) == 56) {
   i9 = 0;
   i20 = HEAP32[i34 >> 2] | 0;
   if ((i20 | 0) == (HEAP32[i35 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 40 >> 2] & 127](i23) | 0; else {
    HEAP32[i34 >> 2] = i20 + 1;
    __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i20 >> 0] | 0) | 0;
   }
   i40 = i17 + 1 | 0;
  } while (0);
  i17 = i40;
  i7 = HEAP32[i5 >> 2] | 0;
 }
 if ((i9 | 0) == 62) {
  HEAP32[i5 >> 2] = 4;
  i21 = i23;
 }
 if (!i21) {
  i51 = 0;
  i52 = 1;
 } else {
  i23 = HEAP32[i21 + 12 >> 2] | 0;
  if ((i23 | 0) == (HEAP32[i21 + 16 >> 2] | 0)) i53 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i21 >> 2] | 0) + 36 >> 2] & 127](i21) | 0; else i53 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i23 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i53, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i2 >> 2] = 0;
   i51 = 0;
   i52 = 1;
  } else {
   i51 = i21;
   i52 = 0;
  }
 }
 i21 = HEAP32[i3 >> 2] | 0;
 do if (!i21) i9 = 75; else {
  i2 = HEAP32[i21 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i21 + 16 >> 2] | 0)) i54 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i21 >> 2] | 0) + 36 >> 2] & 127](i21) | 0; else i54 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i54, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i3 >> 2] = 0;
   i9 = 75;
   break;
  } else if (i52) break; else {
   i9 = 77;
   break;
  }
 } while (0);
 if ((i9 | 0) == 75) if (i52) i9 = 77;
 if ((i9 | 0) == 77) HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 2;
 STACKTOP = i10;
 return i51 | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0;
 i9 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i11 = i10 + 12 | 0;
 i12 = i10 + 8 | 0;
 i13 = i10 + 4 | 0;
 i14 = i10;
 __ZNKSt3__28ios_base6getlocEv(i11, i4);
 i15 = __ZNKSt3__26locale9use_facetERNS0_2idE(i11, 5845220) | 0;
 __ZNSt3__26localeD2Ev(i11);
 HEAP32[i5 >> 2] = 0;
 i16 = i7;
 i7 = 0;
 L1 : while (1) {
  i17 = (i16 | 0) != (i8 | 0);
  i18 = i7;
  while (1) {
   i19 = HEAP32[i2 >> 2] | 0;
   if (!(i17 & (i18 | 0) == 0)) {
    i20 = i19;
    break L1;
   }
   i21 = i19;
   if (!i19) {
    i22 = 0;
    i23 = 1;
    i24 = i21;
   } else {
    i25 = HEAP32[i19 + 12 >> 2] | 0;
    if ((i25 | 0) == (HEAP32[i19 + 16 >> 2] | 0)) i26 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i19 >> 2] | 0) + 36 >> 2] & 127](i19) | 0; else i26 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i25 >> 2] | 0) | 0;
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i26, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[i2 >> 2] = 0;
     i22 = 0;
     i23 = 1;
     i24 = 0;
    } else {
     i22 = i19;
     i23 = 0;
     i24 = i21;
    }
   }
   i21 = HEAP32[i3 >> 2] | 0;
   i19 = i21;
   do if (!i21) {
    i27 = i19;
    i9 = 16;
   } else {
    i25 = HEAP32[i21 + 12 >> 2] | 0;
    if ((i25 | 0) == (HEAP32[i21 + 16 >> 2] | 0)) i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i21 >> 2] | 0) + 36 >> 2] & 127](i21) | 0; else i28 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i25 >> 2] | 0) | 0;
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i28, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[i3 >> 2] = 0;
     i27 = 0;
     i9 = 16;
     break;
    } else if (i23) {
     i29 = i21;
     i30 = i19;
     break;
    } else {
     i9 = 59;
     break L1;
    }
   } while (0);
   if ((i9 | 0) == 16) {
    i9 = 0;
    if (i23) {
     i9 = 59;
     break L1;
    } else {
     i29 = 0;
     i30 = i27;
    }
   }
   if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i15 >> 2] | 0) + 52 >> 2] & 31](i15, HEAP32[i16 >> 2] | 0, 0) | 0) << 24 >> 24 == 37) {
    i9 = 19;
    break;
   }
   if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i15 >> 2] | 0) + 12 >> 2] & 31](i15, 8192, HEAP32[i16 >> 2] | 0) | 0) {
    i31 = i16;
    i9 = 25;
    break;
   }
   i32 = i22 + 12 | 0;
   i19 = HEAP32[i32 >> 2] | 0;
   i33 = i22 + 16 | 0;
   if ((i19 | 0) == (HEAP32[i33 >> 2] | 0)) i34 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i22 >> 2] | 0) + 36 >> 2] & 127](i22) | 0; else i34 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i19 >> 2] | 0) | 0;
   i19 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i15 >> 2] | 0) + 28 >> 2] & 31](i15, i34) | 0;
   if ((i19 | 0) == (FUNCTION_TABLE_iii[HEAP32[(HEAP32[i15 >> 2] | 0) + 28 >> 2] & 31](i15, HEAP32[i16 >> 2] | 0) | 0)) {
    i9 = 53;
    break;
   }
   HEAP32[i5 >> 2] = 4;
   i18 = 4;
  }
  L33 : do if ((i9 | 0) == 19) {
   i9 = 0;
   i18 = i16 + 4 | 0;
   if ((i18 | 0) == (i8 | 0)) {
    i9 = 59;
    break L1;
   }
   i17 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i15 >> 2] | 0) + 52 >> 2] & 31](i15, HEAP32[i18 >> 2] | 0, 0) | 0;
   switch (i17 << 24 >> 24) {
   case 48:
   case 69:
    {
     i19 = i16 + 8 | 0;
     if ((i19 | 0) == (i8 | 0)) {
      i9 = 59;
      break L1;
     }
     i35 = i17;
     i36 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i15 >> 2] | 0) + 52 >> 2] & 31](i15, HEAP32[i19 >> 2] | 0, 0) | 0;
     i37 = i18;
     break;
    }
   default:
    {
     i35 = 0;
     i36 = i17;
     i37 = i16;
    }
   }
   i17 = HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] | 0;
   HEAP32[i13 >> 2] = i24;
   HEAP32[i14 >> 2] = i30;
   HEAP32[i12 >> 2] = HEAP32[i13 >> 2];
   HEAP32[i11 >> 2] = HEAP32[i14 >> 2];
   i18 = FUNCTION_TABLE_iiiiiiiii[i17 & 15](i1, i12, i11, i4, i5, i6, i36, i35) | 0;
   HEAP32[i2 >> 2] = i18;
   i38 = i37 + 8 | 0;
  } else if ((i9 | 0) == 25) {
   while (1) {
    i9 = 0;
    i18 = i31 + 4 | 0;
    if ((i18 | 0) == (i8 | 0)) {
     i39 = i8;
     break;
    }
    if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i15 >> 2] | 0) + 12 >> 2] & 31](i15, 8192, HEAP32[i18 >> 2] | 0) | 0) {
     i31 = i18;
     i9 = 25;
    } else {
     i39 = i18;
     break;
    }
   }
   i18 = i22;
   i17 = i29;
   i19 = i29;
   while (1) {
    if (!i18) {
     i40 = 1;
     i41 = 0;
    } else {
     i21 = HEAP32[i18 + 12 >> 2] | 0;
     if ((i21 | 0) == (HEAP32[i18 + 16 >> 2] | 0)) i42 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i18 >> 2] | 0) + 36 >> 2] & 127](i18) | 0; else i42 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i21 >> 2] | 0) | 0;
     if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i42, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
      HEAP32[i2 >> 2] = 0;
      i40 = 1;
      i41 = 0;
     } else {
      i40 = 0;
      i41 = i18;
     }
    }
    do if (!i19) {
     i43 = i17;
     i9 = 40;
    } else {
     i21 = HEAP32[i19 + 12 >> 2] | 0;
     if ((i21 | 0) == (HEAP32[i19 + 16 >> 2] | 0)) i44 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i19 >> 2] | 0) + 36 >> 2] & 127](i19) | 0; else i44 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i21 >> 2] | 0) | 0;
     if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i44, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
      HEAP32[i3 >> 2] = 0;
      i43 = 0;
      i9 = 40;
      break;
     } else if (i40 ^ (i17 | 0) == 0) {
      i45 = i17;
      i46 = i17;
      break;
     } else {
      i38 = i39;
      break L33;
     }
    } while (0);
    if ((i9 | 0) == 40) {
     i9 = 0;
     if (i40) {
      i38 = i39;
      break L33;
     } else {
      i45 = i43;
      i46 = 0;
     }
    }
    i21 = i41 + 12 | 0;
    i25 = HEAP32[i21 >> 2] | 0;
    i47 = i41 + 16 | 0;
    if ((i25 | 0) == (HEAP32[i47 >> 2] | 0)) i48 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i41 >> 2] | 0) + 36 >> 2] & 127](i41) | 0; else i48 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i25 >> 2] | 0) | 0;
    if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i15 >> 2] | 0) + 12 >> 2] & 31](i15, 8192, i48) | 0)) {
     i38 = i39;
     break L33;
    }
    i25 = HEAP32[i21 >> 2] | 0;
    if ((i25 | 0) == (HEAP32[i47 >> 2] | 0)) {
     FUNCTION_TABLE_ii[HEAP32[(HEAP32[i41 >> 2] | 0) + 40 >> 2] & 127](i41) | 0;
     i18 = i41;
     i17 = i45;
     i19 = i46;
     continue;
    } else {
     HEAP32[i21 >> 2] = i25 + 4;
     __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i25 >> 2] | 0) | 0;
     i18 = i41;
     i17 = i45;
     i19 = i46;
     continue;
    }
   }
  } else if ((i9 | 0) == 53) {
   i9 = 0;
   i19 = HEAP32[i32 >> 2] | 0;
   if ((i19 | 0) == (HEAP32[i33 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i22 >> 2] | 0) + 40 >> 2] & 127](i22) | 0; else {
    HEAP32[i32 >> 2] = i19 + 4;
    __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i19 >> 2] | 0) | 0;
   }
   i38 = i16 + 4 | 0;
  } while (0);
  i16 = i38;
  i7 = HEAP32[i5 >> 2] | 0;
 }
 if ((i9 | 0) == 59) {
  HEAP32[i5 >> 2] = 4;
  i20 = i22;
 }
 if (!i20) {
  i49 = 0;
  i50 = 1;
 } else {
  i22 = HEAP32[i20 + 12 >> 2] | 0;
  if ((i22 | 0) == (HEAP32[i20 + 16 >> 2] | 0)) i51 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i20 >> 2] | 0) + 36 >> 2] & 127](i20) | 0; else i51 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i22 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i51, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i2 >> 2] = 0;
   i49 = 0;
   i50 = 1;
  } else {
   i49 = i20;
   i50 = 0;
  }
 }
 i20 = HEAP32[i3 >> 2] | 0;
 do if (!i20) i9 = 72; else {
  i2 = HEAP32[i20 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i20 + 16 >> 2] | 0)) i52 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i20 >> 2] | 0) + 36 >> 2] & 127](i20) | 0; else i52 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i52, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i3 >> 2] = 0;
   i9 = 72;
   break;
  } else if (i50) break; else {
   i9 = 74;
   break;
  }
 } while (0);
 if ((i9 | 0) == 72) if (i50) i9 = 74;
 if ((i9 | 0) == 74) HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 2;
 STACKTOP = i10;
 return i49 | 0;
}

function __ZNSt3__211__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri(i1, i2, i3, i4, i5, i6, i7, i8, i9, i10) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 var i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i12 = i11 + 12 | 0;
 i13 = i11;
 if (i1) {
  i1 = __ZNKSt3__26locale9use_facetERNS0_2idE(i2, 5846908) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 63](i12, i1);
  i14 = HEAP32[i12 >> 2] | 0;
  HEAP8[i3 >> 0] = i14;
  HEAP8[i3 + 1 >> 0] = i14 >> 8;
  HEAP8[i3 + 2 >> 0] = i14 >> 16;
  HEAP8[i3 + 3 >> 0] = i14 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 32 >> 2] & 63](i13, i1);
  i14 = i9 + 11 | 0;
  if ((HEAP8[i14 >> 0] | 0) < 0) {
   i15 = HEAP32[i9 >> 2] | 0;
   HEAP8[i12 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i15, i12);
   HEAP32[i9 + 4 >> 2] = 0;
   i16 = i9;
  } else {
   HEAP8[i12 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i9, i12);
   HEAP8[i14 >> 0] = 0;
   i16 = i9;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i9, 0);
  HEAP32[i16 >> 2] = HEAP32[i13 >> 2];
  HEAP32[i16 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
  HEAP32[i16 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
  i16 = 0;
  while (1) {
   if ((i16 | 0) == 3) break;
   HEAP32[i13 + (i16 << 2) >> 2] = 0;
   i16 = i16 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i13);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 63](i13, i1);
  i16 = i8 + 11 | 0;
  if ((HEAP8[i16 >> 0] | 0) < 0) {
   i14 = HEAP32[i8 >> 2] | 0;
   HEAP8[i12 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i14, i12);
   HEAP32[i8 + 4 >> 2] = 0;
   i17 = i8;
  } else {
   HEAP8[i12 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i8, i12);
   HEAP8[i16 >> 0] = 0;
   i17 = i8;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i8, 0);
  HEAP32[i17 >> 2] = HEAP32[i13 >> 2];
  HEAP32[i17 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
  HEAP32[i17 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
  i17 = 0;
  while (1) {
   if ((i17 | 0) == 3) break;
   HEAP32[i13 + (i17 << 2) >> 2] = 0;
   i17 = i17 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i13);
  i17 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 127](i1) | 0;
  HEAP8[i4 >> 0] = i17;
  i17 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
  HEAP8[i5 >> 0] = i17;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 63](i13, i1);
  i17 = i6 + 11 | 0;
  if ((HEAP8[i17 >> 0] | 0) < 0) {
   i16 = HEAP32[i6 >> 2] | 0;
   HEAP8[i12 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i16, i12);
   HEAP32[i6 + 4 >> 2] = 0;
   i18 = i6;
  } else {
   HEAP8[i12 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i6, i12);
   HEAP8[i17 >> 0] = 0;
   i18 = i6;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i6, 0);
  HEAP32[i18 >> 2] = HEAP32[i13 >> 2];
  HEAP32[i18 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
  HEAP32[i18 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
  i18 = 0;
  while (1) {
   if ((i18 | 0) == 3) break;
   HEAP32[i13 + (i18 << 2) >> 2] = 0;
   i18 = i18 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i13);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 63](i13, i1);
  i18 = i7 + 11 | 0;
  if ((HEAP8[i18 >> 0] | 0) < 0) {
   i17 = HEAP32[i7 >> 2] | 0;
   HEAP8[i12 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i17, i12);
   HEAP32[i7 + 4 >> 2] = 0;
   i19 = i7;
  } else {
   HEAP8[i12 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i7, i12);
   HEAP8[i18 >> 0] = 0;
   i19 = i7;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i7, 0);
  HEAP32[i19 >> 2] = HEAP32[i13 >> 2];
  HEAP32[i19 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
  HEAP32[i19 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
  i19 = 0;
  while (1) {
   if ((i19 | 0) == 3) break;
   HEAP32[i13 + (i19 << 2) >> 2] = 0;
   i19 = i19 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i13);
  i20 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0;
 } else {
  i1 = __ZNKSt3__26locale9use_facetERNS0_2idE(i2, 5846900) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 63](i12, i1);
  i2 = HEAP32[i12 >> 2] | 0;
  HEAP8[i3 >> 0] = i2;
  HEAP8[i3 + 1 >> 0] = i2 >> 8;
  HEAP8[i3 + 2 >> 0] = i2 >> 16;
  HEAP8[i3 + 3 >> 0] = i2 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 32 >> 2] & 63](i13, i1);
  i2 = i9 + 11 | 0;
  if ((HEAP8[i2 >> 0] | 0) < 0) {
   i3 = HEAP32[i9 >> 2] | 0;
   HEAP8[i12 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i3, i12);
   HEAP32[i9 + 4 >> 2] = 0;
   i21 = i9;
  } else {
   HEAP8[i12 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i9, i12);
   HEAP8[i2 >> 0] = 0;
   i21 = i9;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i9, 0);
  HEAP32[i21 >> 2] = HEAP32[i13 >> 2];
  HEAP32[i21 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
  HEAP32[i21 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
  i21 = 0;
  while (1) {
   if ((i21 | 0) == 3) break;
   HEAP32[i13 + (i21 << 2) >> 2] = 0;
   i21 = i21 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i13);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 63](i13, i1);
  i21 = i8 + 11 | 0;
  if ((HEAP8[i21 >> 0] | 0) < 0) {
   i9 = HEAP32[i8 >> 2] | 0;
   HEAP8[i12 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i9, i12);
   HEAP32[i8 + 4 >> 2] = 0;
   i22 = i8;
  } else {
   HEAP8[i12 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i8, i12);
   HEAP8[i21 >> 0] = 0;
   i22 = i8;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i8, 0);
  HEAP32[i22 >> 2] = HEAP32[i13 >> 2];
  HEAP32[i22 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
  HEAP32[i22 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
  i22 = 0;
  while (1) {
   if ((i22 | 0) == 3) break;
   HEAP32[i13 + (i22 << 2) >> 2] = 0;
   i22 = i22 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i13);
  i22 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 127](i1) | 0;
  HEAP8[i4 >> 0] = i22;
  i22 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
  HEAP8[i5 >> 0] = i22;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 63](i13, i1);
  i22 = i6 + 11 | 0;
  if ((HEAP8[i22 >> 0] | 0) < 0) {
   i5 = HEAP32[i6 >> 2] | 0;
   HEAP8[i12 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i5, i12);
   HEAP32[i6 + 4 >> 2] = 0;
   i23 = i6;
  } else {
   HEAP8[i12 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i6, i12);
   HEAP8[i22 >> 0] = 0;
   i23 = i6;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i6, 0);
  HEAP32[i23 >> 2] = HEAP32[i13 >> 2];
  HEAP32[i23 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
  HEAP32[i23 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
  i23 = 0;
  while (1) {
   if ((i23 | 0) == 3) break;
   HEAP32[i13 + (i23 << 2) >> 2] = 0;
   i23 = i23 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i13);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 63](i13, i1);
  i23 = i7 + 11 | 0;
  if ((HEAP8[i23 >> 0] | 0) < 0) {
   i6 = HEAP32[i7 >> 2] | 0;
   HEAP8[i12 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i6, i12);
   HEAP32[i7 + 4 >> 2] = 0;
   i24 = i7;
  } else {
   HEAP8[i12 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i7, i12);
   HEAP8[i23 >> 0] = 0;
   i24 = i7;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i7, 0);
  HEAP32[i24 >> 2] = HEAP32[i13 >> 2];
  HEAP32[i24 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
  HEAP32[i24 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
  i24 = 0;
  while (1) {
   if ((i24 | 0) == 3) break;
   HEAP32[i13 + (i24 << 2) >> 2] = 0;
   i24 = i24 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i13);
  i20 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0;
 }
 HEAP32[i10 >> 2] = i20;
 STACKTOP = i11;
 return;
}

function __ZN5ImGui8MenuItemEPKcS1_bb(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, f15 = f0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, f20 = f0, f21 = f0, f22 = f0, f23 = f0, f24 = f0, f25 = f0, f26 = f0, f27 = f0, f28 = f0, i29 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i6 = i5;
 i7 = i5 + 16 | 0;
 i8 = i5 + 8 | 0;
 i9 = HEAP32[1460598] | 0;
 i10 = HEAP32[i9 + 6392 >> 2] | 0;
 HEAP8[i10 + 120 >> 0] = 1;
 if (HEAP8[i10 + 123 >> 0] | 0) {
  i11 = 0;
  STACKTOP = i5;
  return i11 | 0;
 }
 i12 = i10 + 196 | 0;
 i13 = HEAP32[i12 >> 2] | 0;
 i14 = HEAP32[i10 + 200 >> 2] | 0;
 if ((i1 | 0) == (-1 | 0)) f15 = Math_fround(0.0); else {
  i16 = i1;
  L5 : while (1) {
   switch (HEAP8[i16 >> 0] | 0) {
   case 0:
    {
     i17 = i16;
     break L5;
     break;
    }
   case 35:
    {
     i18 = i16 + 1 | 0;
     if ((HEAP8[i18 >> 0] | 0) == 35) {
      i17 = i16;
      break L5;
     } else i19 = i18;
     break;
    }
   default:
    i19 = i16 + 1 | 0;
   }
   if ((i19 | 0) == (-1 | 0)) {
    i17 = -1;
    break;
   } else i16 = i19;
  }
  i19 = HEAP32[i9 + 6180 >> 2] | 0;
  f20 = Math_fround(HEAPF32[i9 + 6184 >> 2]);
  if ((i17 | 0) == (i1 | 0)) f15 = Math_fround(0.0); else {
   __ZNK6ImFont13CalcTextSizeAEfffPKcS1_PS1_(i6, i19, f20, Math_fround(3402823469999999843913219.0e14), Math_fround(-1.0), i1, i17, 0);
   f21 = Math_fround(HEAPF32[i6 >> 2]);
   if (f21 > Math_fround(0.0)) {
    f22 = Math_fround(f21 - Math_fround(f20 / Math_fround(HEAPF32[i19 >> 2])));
    HEAPF32[i6 >> 2] = f22;
    f23 = f22;
   } else f23 = f21;
   f15 = Math_fround(~~Math_fround(f23 + Math_fround(.949999988)) | 0);
  }
 }
 i19 = i4 ? 32 : 96;
 if ((HEAP32[i10 + 344 >> 2] | 0) == 1) {
  i17 = i9 + 5424 | 0;
  f23 = Math_fround(~~Math_fround(Math_fround(HEAPF32[i17 >> 2]) * Math_fround(.5)) | 0);
  f21 = Math_fround(Math_fround(HEAPF32[i12 >> 2]) + f23);
  HEAPF32[i12 >> 2] = f21;
  f21 = Math_fround(Math_fround(HEAPF32[i17 >> 2]) * Math_fround(2.0));
  f23 = Math_fround(Math_fround(HEAPF32[i9 + 5428 >> 2]) * Math_fround(2.0));
  HEAPF32[i6 >> 2] = f21;
  HEAPF32[i6 + 4 >> 2] = f23;
  __ZN5ImGui12PushStyleVarEiRK6ImVec2(13, i6);
  HEAPF32[i6 >> 2] = f15;
  HEAPF32[i6 + 4 >> 2] = Math_fround(0.0);
  i16 = __ZN5ImGui10SelectableEPKcbiRK6ImVec2(i1, 0, i19, i6) | 0;
  __ZN5ImGui11PopStyleVarEi(1);
  f23 = Math_fround(~~Math_fround(Math_fround(HEAPF32[i17 >> 2]) * Math_fround(-.5)) | 0);
  f21 = Math_fround(Math_fround(HEAPF32[i12 >> 2]) + f23);
  HEAPF32[i12 >> 2] = f21;
  i11 = i16;
  STACKTOP = i5;
  return i11 | 0;
 }
 if (!i2) f24 = Math_fround(0.0); else {
  i16 = HEAP32[1460598] | 0;
  i12 = HEAP32[i16 + 6180 >> 2] | 0;
  f21 = Math_fround(HEAPF32[i16 + 6184 >> 2]);
  __ZNK6ImFont13CalcTextSizeAEfffPKcS1_PS1_(i6, i12, f21, Math_fround(3402823469999999843913219.0e14), Math_fround(-1.0), i2, 0, 0);
  f23 = Math_fround(HEAPF32[i6 >> 2]);
  if (f23 > Math_fround(0.0)) {
   f22 = Math_fround(f23 - Math_fround(f21 / Math_fround(HEAPF32[i12 >> 2])));
   HEAPF32[i6 >> 2] = f22;
   f25 = f22;
  } else f25 = f23;
  f24 = Math_fround(~~Math_fround(f25 + Math_fround(.949999988)) | 0);
 }
 i12 = i9 + 6184 | 0;
 f25 = Math_fround(~~Math_fround(Math_fround(HEAPF32[i12 >> 2]) * Math_fround(1.20000005)) | 0);
 i16 = i10 + 564 | 0;
 i17 = i10 + 584 | 0;
 f23 = Math_fround(HEAPF32[i17 >> 2]);
 f22 = f23 >= f15 ? f23 : f15;
 HEAPF32[i17 >> 2] = f22;
 i17 = i10 + 588 | 0;
 f15 = Math_fround(HEAPF32[i17 >> 2]);
 f23 = f15 >= f24 ? f15 : f24;
 HEAPF32[i17 >> 2] = f23;
 i17 = i10 + 592 | 0;
 f15 = Math_fround(HEAPF32[i17 >> 2]);
 f21 = f15 >= f25 ? f15 : f25;
 HEAPF32[i17 >> 2] = f21;
 i17 = i10 + 556 | 0;
 f25 = Math_fround(f22 + Math_fround(0.0));
 HEAPF32[i16 >> 2] = f25;
 if (f23 > Math_fround(0.0)) f26 = Math_fround(HEAPF32[i17 >> 2]); else f26 = Math_fround(0.0);
 f22 = Math_fround(f25 + Math_fround(f23 + f26));
 HEAPF32[i16 >> 2] = f22;
 if (f21 > Math_fround(0.0)) f27 = Math_fround(HEAPF32[i17 >> 2]); else f27 = Math_fround(0.0);
 f26 = Math_fround(f22 + Math_fround(f21 + f27));
 HEAPF32[i16 >> 2] = f26;
 f27 = Math_fround(HEAPF32[i10 + 560 >> 2]);
 f21 = f27 >= f26 ? f27 : f26;
 i16 = HEAP32[(HEAP32[1460598] | 0) + 6392 >> 2] | 0;
 f26 = Math_fround(HEAPF32[i16 + 536 >> 2]);
 f27 = Math_fround(HEAPF32[i16 + 12 >> 2]);
 f22 = Math_fround(f26 - f27);
 i17 = HEAP32[i16 + 448 >> 2] | 0;
 do if (!i17) f28 = f22; else {
  i18 = HEAP32[i17 + 12 >> 2] | 0;
  i29 = i18 + ((i18 | 0) > -2 & 1) | 0;
  if ((i29 | 0) < (HEAP32[i17 + 44 >> 2] | 0)) {
   f26 = Math_fround(HEAPF32[(HEAP32[i17 + 52 >> 2] | 0) + (i29 * 28 | 0) >> 2]);
   f23 = Math_fround(HEAPF32[i17 + 20 >> 2]);
   f25 = Math_fround(f23 + Math_fround(f26 * Math_fround(Math_fround(HEAPF32[i17 + 24 >> 2]) - f23)));
   f28 = Math_fround(f25 - Math_fround(HEAPF32[i16 + 60 >> 2]));
   break;
  } else ___assert_fail(32132, 31803, 13059, 32169);
 } while (0);
 f22 = Math_fround(Math_fround(f28 - Math_fround(Math_fround(HEAPF32[i16 + 196 >> 2]) - f27)) - f21);
 i16 = f22 <= Math_fround(0.0);
 f27 = i16 ? Math_fround(0.0) : f22;
 HEAPF32[i6 >> 2] = f21;
 HEAPF32[i6 + 4 >> 2] = Math_fround(0.0);
 i16 = __ZN5ImGui10SelectableEPKcbiRK6ImVec2(i1, 0, i19 | 128, i6) | 0;
 do if (f24 > Math_fround(0.0)) {
  __ZN5ImGui14PushStyleColorEiRK6ImVec4(0, i9 + 5524 | 0);
  f21 = Math_fround(f27 + Math_fround(HEAPF32[i10 + 572 >> 2]));
  f22 = Math_fround(f21 + (HEAP32[tempDoublePtr >> 2] = i13, Math_fround(HEAPF32[tempDoublePtr >> 2])));
  f21 = Math_fround((HEAP32[tempDoublePtr >> 2] = i14, Math_fround(HEAPF32[tempDoublePtr >> 2])) + Math_fround(0.0));
  HEAPF32[i7 >> 2] = f22;
  HEAPF32[i7 + 4 >> 2] = f21;
  HEAP32[i6 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i6 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
  __ZN5ImGui10RenderTextE6ImVec2PKcS2_b(i6, i2, 0, 0);
  i19 = HEAP32[1460598] | 0;
  i1 = i19 + 6476 | 0;
  i17 = HEAP32[i1 >> 2] | 0;
  if ((i17 | 0) <= 0) ___assert_fail(38278, 56850, 1245, 38287);
  i29 = HEAP32[i19 + 6484 >> 2] | 0;
  i18 = i17 + -1 | 0;
  i17 = i29 + (i18 * 20 | 0) | 0;
  i18 = i17 + 4 | 0;
  i29 = i19 + 5508 + (HEAP32[i17 >> 2] << 4) | 0;
  HEAP32[i29 >> 2] = HEAP32[i18 >> 2];
  HEAP32[i29 + 4 >> 2] = HEAP32[i18 + 4 >> 2];
  HEAP32[i29 + 8 >> 2] = HEAP32[i18 + 8 >> 2];
  HEAP32[i29 + 12 >> 2] = HEAP32[i18 + 12 >> 2];
  i18 = HEAP32[i1 >> 2] | 0;
  if ((i18 | 0) > 0) {
   HEAP32[i1 >> 2] = i18 + -1;
   break;
  } else ___assert_fail(38278, 56850, 1268, 31920);
 } while (0);
 if (!i3) {
  i11 = i16;
  STACKTOP = i5;
  return i11 | 0;
 }
 f24 = Math_fround(f27 + Math_fround(HEAPF32[i10 + 576 >> 2]));
 f27 = Math_fround(HEAPF32[i12 >> 2]);
 f21 = Math_fround(f24 + Math_fround(f27 * Math_fround(.400000006)));
 f24 = Math_fround(Math_fround(f27 * Math_fround(.134000003)) * Math_fround(.5));
 f22 = Math_fround(f21 + (HEAP32[tempDoublePtr >> 2] = i13, Math_fround(HEAPF32[tempDoublePtr >> 2])));
 f21 = Math_fround(f24 + (HEAP32[tempDoublePtr >> 2] = i14, Math_fround(HEAPF32[tempDoublePtr >> 2])));
 HEAPF32[i8 >> 2] = f22;
 HEAPF32[i8 + 4 >> 2] = f21;
 i14 = (i4 ^ 1) & 1;
 i4 = HEAP32[1460598] | 0;
 i13 = i4 + 5508 + (i14 << 4) | 0;
 f21 = Math_fround(HEAPF32[i13 >> 2]);
 f22 = Math_fround(HEAPF32[i13 + 4 >> 2]);
 f24 = Math_fround(HEAPF32[i13 + 8 >> 2]);
 f28 = Math_fround(HEAPF32[i13 + 12 >> 2]);
 f25 = Math_fround(f28 * Math_fround(HEAPF32[i4 + 5356 >> 2]));
 i4 = f21 < Math_fround(0.0);
 i13 = f21 > Math_fround(1.0);
 i14 = ~~Math_fround(Math_fround((i13 ? Math_fround(1.0) : f21) * Math_fround(255.0)) + Math_fround(.5));
 i13 = f22 < Math_fround(0.0);
 i12 = f22 > Math_fround(1.0);
 i10 = ~~Math_fround(Math_fround((i12 ? Math_fround(1.0) : f22) * Math_fround(255.0)) + Math_fround(.5)) << 8;
 i12 = f24 < Math_fround(0.0);
 i3 = f24 > Math_fround(1.0);
 i2 = ~~Math_fround(Math_fround((i3 ? Math_fround(1.0) : f24) * Math_fround(255.0)) + Math_fround(.5)) << 16;
 i3 = f25 < Math_fround(0.0);
 i7 = f25 > Math_fround(1.0);
 i9 = ~~Math_fround(Math_fround((i7 ? Math_fround(1.0) : f25) * Math_fround(255.0)) + Math_fround(.5)) << 24;
 f25 = Math_fround(f27 * Math_fround(.865999996));
 HEAP32[i6 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
 __ZN5ImGui15RenderCheckMarkE6ImVec2jf(i6, (i13 ? 0 : i10) | (i4 ? 0 : i14) | (i12 ? 0 : i2) | (i3 ? 0 : i9), f25);
 i11 = i16;
 STACKTOP = i5;
 return i11 | 0;
}

function __ZN5ImGui15StyleColorsDarkEP10ImGuiStyle(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 if (!i1) i2 = __ZN5ImGui8GetStyleEv() | 0; else i2 = i1;
 HEAPF32[i2 + 152 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 156 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 160 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 164 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 168 >> 2] = Math_fround(.5);
 HEAPF32[i2 + 172 >> 2] = Math_fround(.5);
 HEAPF32[i2 + 176 >> 2] = Math_fround(.5);
 HEAPF32[i2 + 180 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 184 >> 2] = Math_fround(.0599999987);
 HEAPF32[i2 + 188 >> 2] = Math_fround(.0599999987);
 HEAPF32[i2 + 192 >> 2] = Math_fround(.0599999987);
 HEAPF32[i2 + 196 >> 2] = Math_fround(.939999997);
 HEAPF32[i2 + 200 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 204 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 208 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 212 >> 2] = Math_fround(0.0);
 HEAPF32[i2 + 216 >> 2] = Math_fround(.0799999982);
 HEAPF32[i2 + 220 >> 2] = Math_fround(.0799999982);
 HEAPF32[i2 + 224 >> 2] = Math_fround(.0799999982);
 HEAPF32[i2 + 228 >> 2] = Math_fround(.939999997);
 i1 = i2 + 232 | 0;
 HEAPF32[i2 + 232 >> 2] = Math_fround(.430000007);
 HEAPF32[i2 + 236 >> 2] = Math_fround(.430000007);
 HEAPF32[i2 + 240 >> 2] = Math_fround(.5);
 HEAPF32[i2 + 244 >> 2] = Math_fround(.5);
 i3 = i2 + 248 | 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 HEAPF32[i2 + 264 >> 2] = Math_fround(.159999996);
 HEAPF32[i2 + 268 >> 2] = Math_fround(.289999992);
 HEAPF32[i2 + 272 >> 2] = Math_fround(.479999989);
 HEAPF32[i2 + 276 >> 2] = Math_fround(.540000021);
 HEAPF32[i2 + 280 >> 2] = Math_fround(.25999999);
 HEAPF32[i2 + 284 >> 2] = Math_fround(.589999974);
 HEAPF32[i2 + 288 >> 2] = Math_fround(.980000019);
 HEAPF32[i2 + 292 >> 2] = Math_fround(.400000006);
 HEAPF32[i2 + 296 >> 2] = Math_fround(.25999999);
 HEAPF32[i2 + 300 >> 2] = Math_fround(.589999974);
 HEAPF32[i2 + 304 >> 2] = Math_fround(.980000019);
 HEAPF32[i2 + 308 >> 2] = Math_fround(.670000016);
 HEAPF32[i2 + 312 >> 2] = Math_fround(.0399999991);
 HEAPF32[i2 + 316 >> 2] = Math_fround(.0399999991);
 HEAPF32[i2 + 320 >> 2] = Math_fround(.0399999991);
 HEAPF32[i2 + 324 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 328 >> 2] = Math_fround(.159999996);
 HEAPF32[i2 + 332 >> 2] = Math_fround(.289999992);
 HEAPF32[i2 + 336 >> 2] = Math_fround(.479999989);
 HEAPF32[i2 + 340 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 344 >> 2] = Math_fround(0.0);
 HEAPF32[i2 + 348 >> 2] = Math_fround(0.0);
 HEAPF32[i2 + 352 >> 2] = Math_fround(0.0);
 HEAPF32[i2 + 356 >> 2] = Math_fround(.50999999);
 HEAPF32[i2 + 360 >> 2] = Math_fround(.140000001);
 HEAPF32[i2 + 364 >> 2] = Math_fround(.140000001);
 HEAPF32[i2 + 368 >> 2] = Math_fround(.140000001);
 HEAPF32[i2 + 372 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 376 >> 2] = Math_fround(.0199999996);
 HEAPF32[i2 + 380 >> 2] = Math_fround(.0199999996);
 HEAPF32[i2 + 384 >> 2] = Math_fround(.0199999996);
 HEAPF32[i2 + 388 >> 2] = Math_fround(.529999971);
 HEAPF32[i2 + 392 >> 2] = Math_fround(.310000002);
 HEAPF32[i2 + 396 >> 2] = Math_fround(.310000002);
 HEAPF32[i2 + 400 >> 2] = Math_fround(.310000002);
 HEAPF32[i2 + 404 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 408 >> 2] = Math_fround(.409999996);
 HEAPF32[i2 + 412 >> 2] = Math_fround(.409999996);
 HEAPF32[i2 + 416 >> 2] = Math_fround(.409999996);
 HEAPF32[i2 + 420 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 424 >> 2] = Math_fround(.50999999);
 HEAPF32[i2 + 428 >> 2] = Math_fround(.50999999);
 HEAPF32[i2 + 432 >> 2] = Math_fround(.50999999);
 HEAPF32[i2 + 436 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 440 >> 2] = Math_fround(.25999999);
 HEAPF32[i2 + 444 >> 2] = Math_fround(.589999974);
 HEAPF32[i2 + 448 >> 2] = Math_fround(.980000019);
 HEAPF32[i2 + 452 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 456 >> 2] = Math_fround(.239999995);
 HEAPF32[i2 + 460 >> 2] = Math_fround(.519999981);
 HEAPF32[i2 + 464 >> 2] = Math_fround(.879999995);
 HEAPF32[i2 + 468 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 472 >> 2] = Math_fround(.25999999);
 HEAPF32[i2 + 476 >> 2] = Math_fround(.589999974);
 HEAPF32[i2 + 480 >> 2] = Math_fround(.980000019);
 HEAPF32[i2 + 484 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 488 >> 2] = Math_fround(.25999999);
 HEAPF32[i2 + 492 >> 2] = Math_fround(.589999974);
 HEAPF32[i2 + 496 >> 2] = Math_fround(.980000019);
 HEAPF32[i2 + 500 >> 2] = Math_fround(.400000006);
 HEAPF32[i2 + 504 >> 2] = Math_fround(.25999999);
 HEAPF32[i2 + 508 >> 2] = Math_fround(.589999974);
 HEAPF32[i2 + 512 >> 2] = Math_fround(.980000019);
 HEAPF32[i2 + 516 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 520 >> 2] = Math_fround(.0599999987);
 HEAPF32[i2 + 524 >> 2] = Math_fround(.529999971);
 HEAPF32[i2 + 528 >> 2] = Math_fround(.980000019);
 HEAPF32[i2 + 532 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 536 >> 2] = Math_fround(.25999999);
 HEAPF32[i2 + 540 >> 2] = Math_fround(.589999974);
 HEAPF32[i2 + 544 >> 2] = Math_fround(.980000019);
 HEAPF32[i2 + 548 >> 2] = Math_fround(.310000002);
 HEAPF32[i2 + 552 >> 2] = Math_fround(.25999999);
 HEAPF32[i2 + 556 >> 2] = Math_fround(.589999974);
 HEAPF32[i2 + 560 >> 2] = Math_fround(.980000019);
 HEAPF32[i2 + 564 >> 2] = Math_fround(.800000011);
 HEAPF32[i2 + 568 >> 2] = Math_fround(.25999999);
 HEAPF32[i2 + 572 >> 2] = Math_fround(.589999974);
 HEAPF32[i2 + 576 >> 2] = Math_fround(.980000019);
 HEAPF32[i2 + 580 >> 2] = Math_fround(1.0);
 i3 = i2 + 584 | 0;
 HEAP32[i3 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
 HEAPF32[i2 + 600 >> 2] = Math_fround(.100000001);
 HEAPF32[i2 + 604 >> 2] = Math_fround(.400000006);
 HEAPF32[i2 + 608 >> 2] = Math_fround(.75);
 HEAPF32[i2 + 612 >> 2] = Math_fround(.779999971);
 HEAPF32[i2 + 616 >> 2] = Math_fround(.100000001);
 HEAPF32[i2 + 620 >> 2] = Math_fround(.400000006);
 HEAPF32[i2 + 624 >> 2] = Math_fround(.75);
 HEAPF32[i2 + 628 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 632 >> 2] = Math_fround(.25999999);
 HEAPF32[i2 + 636 >> 2] = Math_fround(.589999974);
 HEAPF32[i2 + 640 >> 2] = Math_fround(.980000019);
 HEAPF32[i2 + 644 >> 2] = Math_fround(.25);
 HEAPF32[i2 + 648 >> 2] = Math_fround(.25999999);
 HEAPF32[i2 + 652 >> 2] = Math_fround(.589999974);
 HEAPF32[i2 + 656 >> 2] = Math_fround(.980000019);
 HEAPF32[i2 + 660 >> 2] = Math_fround(.670000016);
 HEAPF32[i2 + 664 >> 2] = Math_fround(.25999999);
 HEAPF32[i2 + 668 >> 2] = Math_fround(.589999974);
 HEAPF32[i2 + 672 >> 2] = Math_fround(.980000019);
 HEAPF32[i2 + 676 >> 2] = Math_fround(.949999988);
 HEAPF32[i2 + 680 >> 2] = Math_fround(.610000014);
 HEAPF32[i2 + 684 >> 2] = Math_fround(.610000014);
 HEAPF32[i2 + 688 >> 2] = Math_fround(.610000014);
 HEAPF32[i2 + 692 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 696 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 700 >> 2] = Math_fround(.430000007);
 HEAPF32[i2 + 704 >> 2] = Math_fround(.349999994);
 HEAPF32[i2 + 708 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 712 >> 2] = Math_fround(.899999976);
 HEAPF32[i2 + 716 >> 2] = Math_fround(.699999988);
 HEAPF32[i2 + 720 >> 2] = Math_fround(0.0);
 HEAPF32[i2 + 724 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 728 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 732 >> 2] = Math_fround(.600000024);
 HEAPF32[i2 + 736 >> 2] = Math_fround(0.0);
 HEAPF32[i2 + 740 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 744 >> 2] = Math_fround(.25999999);
 HEAPF32[i2 + 748 >> 2] = Math_fround(.589999974);
 HEAPF32[i2 + 752 >> 2] = Math_fround(.980000019);
 HEAPF32[i2 + 756 >> 2] = Math_fround(.349999994);
 HEAPF32[i2 + 760 >> 2] = Math_fround(.800000011);
 HEAPF32[i2 + 764 >> 2] = Math_fround(.800000011);
 HEAPF32[i2 + 768 >> 2] = Math_fround(.800000011);
 HEAPF32[i2 + 772 >> 2] = Math_fround(.349999994);
 HEAPF32[i2 + 776 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 780 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 784 >> 2] = Math_fround(0.0);
 HEAPF32[i2 + 788 >> 2] = Math_fround(.899999976);
 HEAPF32[i2 + 792 >> 2] = Math_fround(.25999999);
 HEAPF32[i2 + 796 >> 2] = Math_fround(.589999974);
 HEAPF32[i2 + 800 >> 2] = Math_fround(.980000019);
 HEAPF32[i2 + 804 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 808 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 812 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 816 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 820 >> 2] = Math_fround(.699999988);
 return;
}

function __ZN5ImGui16StyleColorsLightEP10ImGuiStyle(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 if (!i1) i2 = __ZN5ImGui8GetStyleEv() | 0; else i2 = i1;
 HEAPF32[i2 + 152 >> 2] = Math_fround(0.0);
 HEAPF32[i2 + 156 >> 2] = Math_fround(0.0);
 HEAPF32[i2 + 160 >> 2] = Math_fround(0.0);
 HEAPF32[i2 + 164 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 168 >> 2] = Math_fround(.600000024);
 HEAPF32[i2 + 172 >> 2] = Math_fround(.600000024);
 HEAPF32[i2 + 176 >> 2] = Math_fround(.600000024);
 HEAPF32[i2 + 180 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 184 >> 2] = Math_fround(.939999997);
 HEAPF32[i2 + 188 >> 2] = Math_fround(.939999997);
 HEAPF32[i2 + 192 >> 2] = Math_fround(.939999997);
 HEAPF32[i2 + 196 >> 2] = Math_fround(1.0);
 i1 = i2 + 200 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAPF32[i2 + 216 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 220 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 224 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 228 >> 2] = Math_fround(.980000019);
 HEAPF32[i2 + 232 >> 2] = Math_fround(0.0);
 HEAPF32[i2 + 236 >> 2] = Math_fround(0.0);
 HEAPF32[i2 + 240 >> 2] = Math_fround(0.0);
 HEAPF32[i2 + 244 >> 2] = Math_fround(.300000012);
 i1 = i2 + 248 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAPF32[i2 + 264 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 268 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 272 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 276 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 280 >> 2] = Math_fround(.25999999);
 HEAPF32[i2 + 284 >> 2] = Math_fround(.589999974);
 HEAPF32[i2 + 288 >> 2] = Math_fround(.980000019);
 HEAPF32[i2 + 292 >> 2] = Math_fround(.400000006);
 HEAPF32[i2 + 296 >> 2] = Math_fround(.25999999);
 HEAPF32[i2 + 300 >> 2] = Math_fround(.589999974);
 HEAPF32[i2 + 304 >> 2] = Math_fround(.980000019);
 HEAPF32[i2 + 308 >> 2] = Math_fround(.670000016);
 HEAPF32[i2 + 312 >> 2] = Math_fround(.959999978);
 HEAPF32[i2 + 316 >> 2] = Math_fround(.959999978);
 HEAPF32[i2 + 320 >> 2] = Math_fround(.959999978);
 HEAPF32[i2 + 324 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 328 >> 2] = Math_fround(.819999992);
 HEAPF32[i2 + 332 >> 2] = Math_fround(.819999992);
 HEAPF32[i2 + 336 >> 2] = Math_fround(.819999992);
 HEAPF32[i2 + 340 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 344 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 348 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 352 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 356 >> 2] = Math_fround(.50999999);
 HEAPF32[i2 + 360 >> 2] = Math_fround(.860000014);
 HEAPF32[i2 + 364 >> 2] = Math_fround(.860000014);
 HEAPF32[i2 + 368 >> 2] = Math_fround(.860000014);
 HEAPF32[i2 + 372 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 376 >> 2] = Math_fround(.980000019);
 HEAPF32[i2 + 380 >> 2] = Math_fround(.980000019);
 HEAPF32[i2 + 384 >> 2] = Math_fround(.980000019);
 HEAPF32[i2 + 388 >> 2] = Math_fround(.529999971);
 HEAPF32[i2 + 392 >> 2] = Math_fround(.689999997);
 HEAPF32[i2 + 396 >> 2] = Math_fround(.689999997);
 HEAPF32[i2 + 400 >> 2] = Math_fround(.689999997);
 HEAPF32[i2 + 404 >> 2] = Math_fround(.800000011);
 HEAPF32[i2 + 408 >> 2] = Math_fround(.49000001);
 HEAPF32[i2 + 412 >> 2] = Math_fround(.49000001);
 HEAPF32[i2 + 416 >> 2] = Math_fround(.49000001);
 HEAPF32[i2 + 420 >> 2] = Math_fround(.800000011);
 HEAPF32[i2 + 424 >> 2] = Math_fround(.49000001);
 HEAPF32[i2 + 428 >> 2] = Math_fround(.49000001);
 HEAPF32[i2 + 432 >> 2] = Math_fround(.49000001);
 HEAPF32[i2 + 436 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 440 >> 2] = Math_fround(.25999999);
 HEAPF32[i2 + 444 >> 2] = Math_fround(.589999974);
 HEAPF32[i2 + 448 >> 2] = Math_fround(.980000019);
 HEAPF32[i2 + 452 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 456 >> 2] = Math_fround(.25999999);
 HEAPF32[i2 + 460 >> 2] = Math_fround(.589999974);
 HEAPF32[i2 + 464 >> 2] = Math_fround(.980000019);
 HEAPF32[i2 + 468 >> 2] = Math_fround(.779999971);
 HEAPF32[i2 + 472 >> 2] = Math_fround(.460000008);
 HEAPF32[i2 + 476 >> 2] = Math_fround(.540000021);
 HEAPF32[i2 + 480 >> 2] = Math_fround(.800000011);
 HEAPF32[i2 + 484 >> 2] = Math_fround(.600000024);
 HEAPF32[i2 + 488 >> 2] = Math_fround(.25999999);
 HEAPF32[i2 + 492 >> 2] = Math_fround(.589999974);
 HEAPF32[i2 + 496 >> 2] = Math_fround(.980000019);
 HEAPF32[i2 + 500 >> 2] = Math_fround(.400000006);
 HEAPF32[i2 + 504 >> 2] = Math_fround(.25999999);
 HEAPF32[i2 + 508 >> 2] = Math_fround(.589999974);
 HEAPF32[i2 + 512 >> 2] = Math_fround(.980000019);
 HEAPF32[i2 + 516 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 520 >> 2] = Math_fround(.0599999987);
 HEAPF32[i2 + 524 >> 2] = Math_fround(.529999971);
 HEAPF32[i2 + 528 >> 2] = Math_fround(.980000019);
 HEAPF32[i2 + 532 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 536 >> 2] = Math_fround(.25999999);
 HEAPF32[i2 + 540 >> 2] = Math_fround(.589999974);
 HEAPF32[i2 + 544 >> 2] = Math_fround(.980000019);
 HEAPF32[i2 + 548 >> 2] = Math_fround(.310000002);
 i1 = i2 + 552 | 0;
 HEAPF32[i2 + 552 >> 2] = Math_fround(.25999999);
 HEAPF32[i2 + 556 >> 2] = Math_fround(.589999974);
 HEAPF32[i2 + 560 >> 2] = Math_fround(.980000019);
 HEAPF32[i2 + 564 >> 2] = Math_fround(.800000011);
 HEAPF32[i2 + 568 >> 2] = Math_fround(.25999999);
 HEAPF32[i2 + 572 >> 2] = Math_fround(.589999974);
 HEAPF32[i2 + 576 >> 2] = Math_fround(.980000019);
 HEAPF32[i2 + 580 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 584 >> 2] = Math_fround(.389999986);
 HEAPF32[i2 + 588 >> 2] = Math_fround(.389999986);
 HEAPF32[i2 + 592 >> 2] = Math_fround(.389999986);
 HEAPF32[i2 + 596 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 600 >> 2] = Math_fround(.140000001);
 HEAPF32[i2 + 604 >> 2] = Math_fround(.439999998);
 HEAPF32[i2 + 608 >> 2] = Math_fround(.800000011);
 HEAPF32[i2 + 612 >> 2] = Math_fround(.779999971);
 HEAPF32[i2 + 616 >> 2] = Math_fround(.140000001);
 HEAPF32[i2 + 620 >> 2] = Math_fround(.439999998);
 HEAPF32[i2 + 624 >> 2] = Math_fround(.800000011);
 HEAPF32[i2 + 628 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 632 >> 2] = Math_fround(.800000011);
 HEAPF32[i2 + 636 >> 2] = Math_fround(.800000011);
 HEAPF32[i2 + 640 >> 2] = Math_fround(.800000011);
 HEAPF32[i2 + 644 >> 2] = Math_fround(.560000002);
 HEAPF32[i2 + 648 >> 2] = Math_fround(.25999999);
 HEAPF32[i2 + 652 >> 2] = Math_fround(.589999974);
 HEAPF32[i2 + 656 >> 2] = Math_fround(.980000019);
 HEAPF32[i2 + 660 >> 2] = Math_fround(.670000016);
 HEAPF32[i2 + 664 >> 2] = Math_fround(.25999999);
 HEAPF32[i2 + 668 >> 2] = Math_fround(.589999974);
 HEAPF32[i2 + 672 >> 2] = Math_fround(.980000019);
 HEAPF32[i2 + 676 >> 2] = Math_fround(.949999988);
 HEAPF32[i2 + 680 >> 2] = Math_fround(.389999986);
 HEAPF32[i2 + 684 >> 2] = Math_fround(.389999986);
 HEAPF32[i2 + 688 >> 2] = Math_fround(.389999986);
 HEAPF32[i2 + 692 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 696 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 700 >> 2] = Math_fround(.430000007);
 HEAPF32[i2 + 704 >> 2] = Math_fround(.349999994);
 HEAPF32[i2 + 708 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 712 >> 2] = Math_fround(.899999976);
 HEAPF32[i2 + 716 >> 2] = Math_fround(.699999988);
 HEAPF32[i2 + 720 >> 2] = Math_fround(0.0);
 HEAPF32[i2 + 724 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 728 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 732 >> 2] = Math_fround(.449999988);
 HEAPF32[i2 + 736 >> 2] = Math_fround(0.0);
 HEAPF32[i2 + 740 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 744 >> 2] = Math_fround(.25999999);
 HEAPF32[i2 + 748 >> 2] = Math_fround(.589999974);
 HEAPF32[i2 + 752 >> 2] = Math_fround(.980000019);
 HEAPF32[i2 + 756 >> 2] = Math_fround(.349999994);
 HEAPF32[i2 + 760 >> 2] = Math_fround(.200000003);
 HEAPF32[i2 + 764 >> 2] = Math_fround(.200000003);
 HEAPF32[i2 + 768 >> 2] = Math_fround(.200000003);
 HEAPF32[i2 + 772 >> 2] = Math_fround(.349999994);
 HEAPF32[i2 + 776 >> 2] = Math_fround(.25999999);
 HEAPF32[i2 + 780 >> 2] = Math_fround(.589999974);
 HEAPF32[i2 + 784 >> 2] = Math_fround(.980000019);
 HEAPF32[i2 + 788 >> 2] = Math_fround(.949999988);
 i3 = i2 + 792 | 0;
 HEAP32[i3 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
 HEAPF32[i2 + 808 >> 2] = Math_fround(.699999988);
 HEAPF32[i2 + 812 >> 2] = Math_fround(.699999988);
 HEAPF32[i2 + 816 >> 2] = Math_fround(.699999988);
 HEAPF32[i2 + 820 >> 2] = Math_fround(.699999988);
 return;
}

function __ZNSt3__211__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri(i1, i2, i3, i4, i5, i6, i7, i8, i9, i10) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 var i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i12 = i11 + 12 | 0;
 i13 = i11;
 if (i1) {
  i1 = __ZNKSt3__26locale9use_facetERNS0_2idE(i2, 5846924) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 63](i12, i1);
  i14 = HEAP32[i12 >> 2] | 0;
  HEAP8[i3 >> 0] = i14;
  HEAP8[i3 + 1 >> 0] = i14 >> 8;
  HEAP8[i3 + 2 >> 0] = i14 >> 16;
  HEAP8[i3 + 3 >> 0] = i14 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 32 >> 2] & 63](i13, i1);
  i14 = i9 + 8 + 3 | 0;
  if ((HEAP8[i14 >> 0] | 0) < 0) {
   i15 = HEAP32[i9 >> 2] | 0;
   HEAP32[i12 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i15, i12);
   HEAP32[i9 + 4 >> 2] = 0;
  } else {
   HEAP32[i12 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i9, i12);
   HEAP8[i14 >> 0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i9, 0);
  HEAP32[i9 >> 2] = HEAP32[i13 >> 2];
  HEAP32[i9 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
  HEAP32[i9 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
  i14 = 0;
  while (1) {
   if ((i14 | 0) == 3) break;
   HEAP32[i13 + (i14 << 2) >> 2] = 0;
   i14 = i14 + 1 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i13);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 63](i13, i1);
  i14 = i8 + 8 + 3 | 0;
  if ((HEAP8[i14 >> 0] | 0) < 0) {
   i15 = HEAP32[i8 >> 2] | 0;
   HEAP32[i12 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i15, i12);
   HEAP32[i8 + 4 >> 2] = 0;
  } else {
   HEAP32[i12 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i8, i12);
   HEAP8[i14 >> 0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i8, 0);
  HEAP32[i8 >> 2] = HEAP32[i13 >> 2];
  HEAP32[i8 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
  HEAP32[i8 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
  i14 = 0;
  while (1) {
   if ((i14 | 0) == 3) break;
   HEAP32[i13 + (i14 << 2) >> 2] = 0;
   i14 = i14 + 1 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i13);
  i14 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 127](i1) | 0;
  HEAP32[i4 >> 2] = i14;
  i14 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
  HEAP32[i5 >> 2] = i14;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 63](i13, i1);
  i14 = i6 + 11 | 0;
  if ((HEAP8[i14 >> 0] | 0) < 0) {
   i15 = HEAP32[i6 >> 2] | 0;
   HEAP8[i12 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i15, i12);
   HEAP32[i6 + 4 >> 2] = 0;
   i16 = i6;
  } else {
   HEAP8[i12 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i6, i12);
   HEAP8[i14 >> 0] = 0;
   i16 = i6;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i6, 0);
  HEAP32[i16 >> 2] = HEAP32[i13 >> 2];
  HEAP32[i16 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
  HEAP32[i16 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
  i16 = 0;
  while (1) {
   if ((i16 | 0) == 3) break;
   HEAP32[i13 + (i16 << 2) >> 2] = 0;
   i16 = i16 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i13);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 63](i13, i1);
  i16 = i7 + 8 + 3 | 0;
  if ((HEAP8[i16 >> 0] | 0) < 0) {
   i14 = HEAP32[i7 >> 2] | 0;
   HEAP32[i12 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i14, i12);
   HEAP32[i7 + 4 >> 2] = 0;
  } else {
   HEAP32[i12 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i7, i12);
   HEAP8[i16 >> 0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i7, 0);
  HEAP32[i7 >> 2] = HEAP32[i13 >> 2];
  HEAP32[i7 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
  HEAP32[i7 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
  i16 = 0;
  while (1) {
   if ((i16 | 0) == 3) break;
   HEAP32[i13 + (i16 << 2) >> 2] = 0;
   i16 = i16 + 1 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i13);
  i17 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0;
 } else {
  i1 = __ZNKSt3__26locale9use_facetERNS0_2idE(i2, 5846916) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 63](i12, i1);
  i2 = HEAP32[i12 >> 2] | 0;
  HEAP8[i3 >> 0] = i2;
  HEAP8[i3 + 1 >> 0] = i2 >> 8;
  HEAP8[i3 + 2 >> 0] = i2 >> 16;
  HEAP8[i3 + 3 >> 0] = i2 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 32 >> 2] & 63](i13, i1);
  i2 = i9 + 8 + 3 | 0;
  if ((HEAP8[i2 >> 0] | 0) < 0) {
   i3 = HEAP32[i9 >> 2] | 0;
   HEAP32[i12 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i3, i12);
   HEAP32[i9 + 4 >> 2] = 0;
  } else {
   HEAP32[i12 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i9, i12);
   HEAP8[i2 >> 0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i9, 0);
  HEAP32[i9 >> 2] = HEAP32[i13 >> 2];
  HEAP32[i9 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
  HEAP32[i9 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
  i9 = 0;
  while (1) {
   if ((i9 | 0) == 3) break;
   HEAP32[i13 + (i9 << 2) >> 2] = 0;
   i9 = i9 + 1 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i13);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 63](i13, i1);
  i9 = i8 + 8 + 3 | 0;
  if ((HEAP8[i9 >> 0] | 0) < 0) {
   i2 = HEAP32[i8 >> 2] | 0;
   HEAP32[i12 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i2, i12);
   HEAP32[i8 + 4 >> 2] = 0;
  } else {
   HEAP32[i12 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i8, i12);
   HEAP8[i9 >> 0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i8, 0);
  HEAP32[i8 >> 2] = HEAP32[i13 >> 2];
  HEAP32[i8 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
  HEAP32[i8 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
  i8 = 0;
  while (1) {
   if ((i8 | 0) == 3) break;
   HEAP32[i13 + (i8 << 2) >> 2] = 0;
   i8 = i8 + 1 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i13);
  i8 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 127](i1) | 0;
  HEAP32[i4 >> 2] = i8;
  i8 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
  HEAP32[i5 >> 2] = i8;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 63](i13, i1);
  i8 = i6 + 11 | 0;
  if ((HEAP8[i8 >> 0] | 0) < 0) {
   i5 = HEAP32[i6 >> 2] | 0;
   HEAP8[i12 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i5, i12);
   HEAP32[i6 + 4 >> 2] = 0;
   i18 = i6;
  } else {
   HEAP8[i12 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i6, i12);
   HEAP8[i8 >> 0] = 0;
   i18 = i6;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i6, 0);
  HEAP32[i18 >> 2] = HEAP32[i13 >> 2];
  HEAP32[i18 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
  HEAP32[i18 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
  i18 = 0;
  while (1) {
   if ((i18 | 0) == 3) break;
   HEAP32[i13 + (i18 << 2) >> 2] = 0;
   i18 = i18 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i13);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 63](i13, i1);
  i18 = i7 + 8 + 3 | 0;
  if ((HEAP8[i18 >> 0] | 0) < 0) {
   i6 = HEAP32[i7 >> 2] | 0;
   HEAP32[i12 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i6, i12);
   HEAP32[i7 + 4 >> 2] = 0;
  } else {
   HEAP32[i12 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i7, i12);
   HEAP8[i18 >> 0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i7, 0);
  HEAP32[i7 >> 2] = HEAP32[i13 >> 2];
  HEAP32[i7 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
  HEAP32[i7 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
  i7 = 0;
  while (1) {
   if ((i7 | 0) == 3) break;
   HEAP32[i13 + (i7 << 2) >> 2] = 0;
   i7 = i7 + 1 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i13);
  i17 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0;
 }
 HEAP32[i10 >> 2] = i17;
 STACKTOP = i11;
 return;
}

function __ZL16stbrp_pack_rectsP13stbrp_contextP10stbrp_recti(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i5;
 i7 = (i3 | 0) > 0;
 if (i7) {
  i8 = 0;
  do {
   HEAP32[i2 + (i8 << 4) + 12 >> 2] = i8;
   i8 = i8 + 1 | 0;
  } while ((i8 | 0) != (i3 | 0));
  _qsort(i2, i3, 16, 21);
  if (i7) {
   i8 = i1 + 8 | 0;
   i9 = i1 + 24 | 0;
   i10 = i1 + 16 | 0;
   i11 = i1 + 4 | 0;
   i12 = i1 + 28 | 0;
   i13 = 0;
   L6 : while (1) {
    i14 = HEAP16[i2 + (i13 << 4) + 4 >> 1] | 0;
    do if (!(i14 << 16 >> 16)) i4 = 8; else {
     i15 = HEAP16[i2 + (i13 << 4) + 6 >> 1] | 0;
     if (!(i15 << 16 >> 16)) i4 = 8; else {
      i16 = i14 & 65535;
      i17 = i15 & 65535;
      i15 = HEAP32[i8 >> 2] | 0;
      i18 = i16 + -1 + i15 | 0;
      i19 = i18 - ((i18 | 0) % (i15 | 0) | 0) | 0;
      if ((i19 | 0) % (i15 | 0) | 0 | 0) {
       i4 = 10;
       break L6;
      }
      i15 = HEAP32[i9 >> 2] | 0;
      i18 = HEAP16[i15 >> 1] | 0;
      if ((i19 + (i18 & 65535) | 0) > (HEAP32[i1 >> 2] | 0)) {
       i20 = 1073741824;
       i21 = 1073741824;
       i22 = 0;
       i23 = 0;
       i24 = HEAP32[i10 >> 2] | 0;
      } else {
       i25 = i15;
       i15 = i9;
       i26 = 1073741824;
       i27 = 1073741824;
       i28 = 0;
       i29 = i18;
       while (1) {
        i18 = __ZL25stbrp__skyline_find_min_yP13stbrp_contextP10stbrp_nodeiiPi(i25, i29 & 65535, i19, i6) | 0;
        i30 = HEAP32[i10 >> 2] | 0;
        do if (!i30) {
         i31 = (i18 | 0) < (i26 | 0);
         i32 = i27;
         i33 = i31 ? i18 : i26;
         i34 = i31 ? i15 : i28;
        } else if ((i18 + i17 | 0) > (HEAP32[i11 >> 2] | 0)) {
         i32 = i27;
         i33 = i26;
         i34 = i28;
        } else {
         if ((i18 | 0) < (i26 | 0)) i35 = HEAP32[i6 >> 2] | 0; else {
          i31 = HEAP32[i6 >> 2] | 0;
          if ((i18 | 0) == (i26 | 0) & (i31 | 0) < (i27 | 0)) i35 = i31; else {
           i32 = i27;
           i33 = i26;
           i34 = i28;
           break;
          }
         }
         i32 = i35;
         i33 = i18;
         i34 = i15;
        } while (0);
        i15 = i25 + 4 | 0;
        i25 = HEAP32[i15 >> 2] | 0;
        i29 = HEAP16[i25 >> 1] | 0;
        if ((i19 + (i29 & 65535) | 0) > (HEAP32[i1 >> 2] | 0)) break; else {
         i26 = i33;
         i27 = i32;
         i28 = i34;
        }
       }
       if (!i34) {
        i20 = i32;
        i21 = i33;
        i22 = 0;
        i23 = 0;
        i24 = i30;
       } else {
        i20 = i32;
        i21 = i33;
        i22 = i34;
        i23 = HEAPU16[HEAP32[i34 >> 2] >> 1] | 0;
        i24 = i30;
       }
      }
      if ((i24 | 0) == 1) {
       i28 = HEAP32[i9 >> 2] | 0;
       if ((i19 | 0) > (HEAPU16[i28 >> 1] | 0)) {
        i27 = i28;
        while (1) {
         i26 = HEAP32[i27 + 4 >> 2] | 0;
         if ((i19 | 0) > (HEAPU16[i26 >> 1] | 0)) i27 = i26; else {
          i36 = i26;
          break;
         }
        }
       } else i36 = i28;
       if (!i36) {
        i37 = i23;
        i38 = i22;
        i39 = i21;
       } else {
        i27 = i23;
        i26 = i36;
        i29 = i28;
        i25 = i9;
        i15 = i21;
        i18 = i20;
        i31 = i22;
        while (1) {
         i40 = (HEAPU16[i26 >> 1] | 0) - i19 | 0;
         if ((i40 | 0) > -1) {
          i41 = i29;
          i42 = i25;
         } else {
          i4 = 28;
          break L6;
         }
         while (1) {
          i43 = i41 + 4 | 0;
          i44 = HEAP32[i43 >> 2] | 0;
          if ((i40 | 0) < (HEAPU16[i44 >> 1] | 0)) break; else {
           i41 = i44;
           i42 = i43;
          }
         }
         if ((i40 | 0) < (HEAPU16[i41 >> 1] | 0)) {
          i4 = 31;
          break L6;
         }
         i43 = __ZL25stbrp__skyline_find_min_yP13stbrp_contextP10stbrp_nodeiiPi(i41, i40, i19, i6) | 0;
         do if ((i43 | 0) > (i15 | 0) ? 1 : (i43 + i17 | 0) >= (HEAP32[i11 >> 2] | 0)) {
          i45 = i27;
          i46 = i18;
          i47 = i31;
          i48 = i15;
         } else {
          i44 = HEAP32[i6 >> 2] | 0;
          if ((i43 | 0) < (i15 | 0) | (i44 | 0) < (i18 | 0)) i49 = i44; else if ((i40 | 0) < (i27 | 0) & (i44 | 0) == (i18 | 0)) i49 = i18; else {
           i45 = i27;
           i46 = i18;
           i47 = i31;
           i48 = i15;
           break;
          }
          i45 = i40;
          i46 = i49;
          i47 = i42;
          i48 = i43;
         } while (0);
         i26 = HEAP32[i26 + 4 >> 2] | 0;
         if (!i26) {
          i37 = i45;
          i38 = i47;
          i39 = i48;
          break;
         } else {
          i27 = i45;
          i29 = i41;
          i25 = i42;
          i15 = i48;
          i18 = i46;
          i31 = i47;
         }
        }
       }
      } else {
       i37 = i23;
       i38 = i22;
       i39 = i21;
      }
      if (i38 | 0) {
       i31 = i39 + i17 | 0;
       if ((i31 | 0) <= (HEAP32[i11 >> 2] | 0)) {
        i18 = HEAP32[i12 >> 2] | 0;
        if (i18 | 0) {
         i15 = i37 & 65535;
         HEAP16[i18 >> 1] = i15;
         HEAP16[i18 + 2 >> 1] = i31;
         i31 = i18 + 4 | 0;
         HEAP32[i12 >> 2] = HEAP32[i31 >> 2];
         i25 = HEAP32[i38 >> 2] | 0;
         if ((i37 | 0) > (HEAPU16[i25 >> 1] | 0)) {
          i29 = i25 + 4 | 0;
          i50 = HEAP32[i29 >> 2] | 0;
          i51 = i29;
         } else {
          i50 = i25;
          i51 = i38;
         }
         HEAP32[i51 >> 2] = i18;
         i18 = i50 + 4 | 0;
         i25 = HEAP32[i18 >> 2] | 0;
         i29 = i37 + i16 | 0;
         L54 : do if (!i25) i52 = i50; else {
          i27 = i50;
          i26 = i25;
          i19 = i18;
          while (1) {
           if ((i29 | 0) < (HEAPU16[i26 >> 1] | 0)) {
            i52 = i27;
            break L54;
           }
           HEAP32[i19 >> 2] = HEAP32[i12 >> 2];
           HEAP32[i12 >> 2] = i27;
           i19 = i26 + 4 | 0;
           i28 = HEAP32[i19 >> 2] | 0;
           if (!i28) {
            i52 = i26;
            break;
           } else {
            i43 = i26;
            i26 = i28;
            i27 = i43;
           }
          }
         } while (0);
         HEAP32[i31 >> 2] = i52;
         if ((i29 | 0) > (HEAPU16[i52 >> 1] | 0)) HEAP16[i52 >> 1] = i29;
         i18 = i2 + (i13 << 4) | 0;
         HEAP16[i18 + 8 >> 1] = i15;
         HEAP16[i18 + 10 >> 1] = i39;
         break;
        }
       }
      }
      i18 = i2 + (i13 << 4) | 0;
      HEAP16[i18 + 10 >> 1] = -1;
      HEAP16[i18 + 8 >> 1] = -1;
     }
    } while (0);
    if ((i4 | 0) == 8) {
     i4 = 0;
     i14 = i2 + (i13 << 4) | 0;
     HEAP16[i14 + 10 >> 1] = 0;
     HEAP16[i14 + 8 >> 1] = 0;
    }
    i13 = i13 + 1 | 0;
    if ((i13 | 0) >= (i3 | 0)) {
     i4 = 51;
     break;
    }
   }
   if ((i4 | 0) == 10) ___assert_fail(55059, 50526, 350, 55081); else if ((i4 | 0) == 28) ___assert_fail(55110, 50526, 407, 55081); else if ((i4 | 0) == 31) ___assert_fail(55120, 50526, 413, 55081); else if ((i4 | 0) == 51) {
    _qsort(i2, i3, 16, 22);
    if (i7) i53 = 0; else {
     STACKTOP = i5;
     return;
    }
    do {
     if ((HEAP16[i2 + (i53 << 4) + 8 >> 1] | 0) == -1) i54 = (HEAP16[i2 + (i53 << 4) + 10 >> 1] | 0) == -1; else i54 = 0;
     HEAP32[i2 + (i53 << 4) + 12 >> 2] = (i54 ^ 1) & 1;
     i53 = i53 + 1 | 0;
    } while ((i53 | 0) != (i3 | 0));
    STACKTOP = i5;
    return;
   }
  } else i55 = i2;
 } else {
  _qsort(i2, i3, 16, 21);
  i55 = i2;
 }
 _qsort(i55, i3, 16, 22);
 STACKTOP = i5;
 return;
}

function _free(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0;
 i2 = 0;
 if (!i1) return;
 i3 = i1 + -8 | 0;
 i4 = HEAP32[1460884] | 0;
 i5 = HEAP32[i1 + -4 >> 2] | 0;
 i1 = i5 & -8;
 i6 = i3 + i1 | 0;
 do if (!(i5 & 1)) {
  i7 = HEAP32[i3 >> 2] | 0;
  if (!(i5 & 3)) return;
  i8 = i3 + (0 - i7) | 0;
  i9 = i7 + i1 | 0;
  if (i8 >>> 0 < i4 >>> 0) return;
  if ((HEAP32[1460885] | 0) == (i8 | 0)) {
   i10 = i6 + 4 | 0;
   i11 = HEAP32[i10 >> 2] | 0;
   if ((i11 & 3 | 0) != 3) {
    i12 = i8;
    i13 = i9;
    i14 = i8;
    break;
   }
   HEAP32[1460882] = i9;
   HEAP32[i10 >> 2] = i11 & -2;
   HEAP32[i8 + 4 >> 2] = i9 | 1;
   HEAP32[i8 + i9 >> 2] = i9;
   return;
  }
  i11 = i7 >>> 3;
  if (i7 >>> 0 < 256) {
   i7 = HEAP32[i8 + 8 >> 2] | 0;
   i10 = HEAP32[i8 + 12 >> 2] | 0;
   if ((i10 | 0) == (i7 | 0)) {
    HEAP32[1460880] = HEAP32[1460880] & ~(1 << i11);
    i12 = i8;
    i13 = i9;
    i14 = i8;
    break;
   } else {
    HEAP32[i7 + 12 >> 2] = i10;
    HEAP32[i10 + 8 >> 2] = i7;
    i12 = i8;
    i13 = i9;
    i14 = i8;
    break;
   }
  }
  i7 = HEAP32[i8 + 24 >> 2] | 0;
  i10 = HEAP32[i8 + 12 >> 2] | 0;
  do if ((i10 | 0) == (i8 | 0)) {
   i11 = i8 + 16 | 0;
   i15 = i11 + 4 | 0;
   i16 = HEAP32[i15 >> 2] | 0;
   if (!i16) {
    i17 = HEAP32[i11 >> 2] | 0;
    if (!i17) {
     i18 = 0;
     break;
    } else {
     i19 = i17;
     i20 = i11;
    }
   } else {
    i19 = i16;
    i20 = i15;
   }
   while (1) {
    i15 = i19 + 20 | 0;
    i16 = HEAP32[i15 >> 2] | 0;
    if (i16 | 0) {
     i19 = i16;
     i20 = i15;
     continue;
    }
    i15 = i19 + 16 | 0;
    i16 = HEAP32[i15 >> 2] | 0;
    if (!i16) break; else {
     i19 = i16;
     i20 = i15;
    }
   }
   HEAP32[i20 >> 2] = 0;
   i18 = i19;
  } else {
   i15 = HEAP32[i8 + 8 >> 2] | 0;
   HEAP32[i15 + 12 >> 2] = i10;
   HEAP32[i10 + 8 >> 2] = i15;
   i18 = i10;
  } while (0);
  if (!i7) {
   i12 = i8;
   i13 = i9;
   i14 = i8;
  } else {
   i10 = HEAP32[i8 + 28 >> 2] | 0;
   i15 = 5843824 + (i10 << 2) | 0;
   if ((HEAP32[i15 >> 2] | 0) == (i8 | 0)) {
    HEAP32[i15 >> 2] = i18;
    if (!i18) {
     HEAP32[1460881] = HEAP32[1460881] & ~(1 << i10);
     i12 = i8;
     i13 = i9;
     i14 = i8;
     break;
    }
   } else {
    HEAP32[i7 + 16 + (((HEAP32[i7 + 16 >> 2] | 0) != (i8 | 0) & 1) << 2) >> 2] = i18;
    if (!i18) {
     i12 = i8;
     i13 = i9;
     i14 = i8;
     break;
    }
   }
   HEAP32[i18 + 24 >> 2] = i7;
   i10 = i8 + 16 | 0;
   i15 = HEAP32[i10 >> 2] | 0;
   if (i15 | 0) {
    HEAP32[i18 + 16 >> 2] = i15;
    HEAP32[i15 + 24 >> 2] = i18;
   }
   i15 = HEAP32[i10 + 4 >> 2] | 0;
   if (!i15) {
    i12 = i8;
    i13 = i9;
    i14 = i8;
   } else {
    HEAP32[i18 + 20 >> 2] = i15;
    HEAP32[i15 + 24 >> 2] = i18;
    i12 = i8;
    i13 = i9;
    i14 = i8;
   }
  }
 } else {
  i12 = i3;
  i13 = i1;
  i14 = i3;
 } while (0);
 if (i14 >>> 0 >= i6 >>> 0) return;
 i3 = i6 + 4 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if (!(i1 & 1)) return;
 if (!(i1 & 2)) {
  if ((HEAP32[1460886] | 0) == (i6 | 0)) {
   i18 = (HEAP32[1460883] | 0) + i13 | 0;
   HEAP32[1460883] = i18;
   HEAP32[1460886] = i12;
   HEAP32[i12 + 4 >> 2] = i18 | 1;
   if ((i12 | 0) != (HEAP32[1460885] | 0)) return;
   HEAP32[1460885] = 0;
   HEAP32[1460882] = 0;
   return;
  }
  if ((HEAP32[1460885] | 0) == (i6 | 0)) {
   i18 = (HEAP32[1460882] | 0) + i13 | 0;
   HEAP32[1460882] = i18;
   HEAP32[1460885] = i14;
   HEAP32[i12 + 4 >> 2] = i18 | 1;
   HEAP32[i14 + i18 >> 2] = i18;
   return;
  }
  i18 = (i1 & -8) + i13 | 0;
  i19 = i1 >>> 3;
  do if (i1 >>> 0 < 256) {
   i20 = HEAP32[i6 + 8 >> 2] | 0;
   i4 = HEAP32[i6 + 12 >> 2] | 0;
   if ((i4 | 0) == (i20 | 0)) {
    HEAP32[1460880] = HEAP32[1460880] & ~(1 << i19);
    break;
   } else {
    HEAP32[i20 + 12 >> 2] = i4;
    HEAP32[i4 + 8 >> 2] = i20;
    break;
   }
  } else {
   i20 = HEAP32[i6 + 24 >> 2] | 0;
   i4 = HEAP32[i6 + 12 >> 2] | 0;
   do if ((i4 | 0) == (i6 | 0)) {
    i5 = i6 + 16 | 0;
    i15 = i5 + 4 | 0;
    i10 = HEAP32[i15 >> 2] | 0;
    if (!i10) {
     i16 = HEAP32[i5 >> 2] | 0;
     if (!i16) {
      i21 = 0;
      break;
     } else {
      i22 = i16;
      i23 = i5;
     }
    } else {
     i22 = i10;
     i23 = i15;
    }
    while (1) {
     i15 = i22 + 20 | 0;
     i10 = HEAP32[i15 >> 2] | 0;
     if (i10 | 0) {
      i22 = i10;
      i23 = i15;
      continue;
     }
     i15 = i22 + 16 | 0;
     i10 = HEAP32[i15 >> 2] | 0;
     if (!i10) break; else {
      i22 = i10;
      i23 = i15;
     }
    }
    HEAP32[i23 >> 2] = 0;
    i21 = i22;
   } else {
    i15 = HEAP32[i6 + 8 >> 2] | 0;
    HEAP32[i15 + 12 >> 2] = i4;
    HEAP32[i4 + 8 >> 2] = i15;
    i21 = i4;
   } while (0);
   if (i20 | 0) {
    i4 = HEAP32[i6 + 28 >> 2] | 0;
    i8 = 5843824 + (i4 << 2) | 0;
    if ((HEAP32[i8 >> 2] | 0) == (i6 | 0)) {
     HEAP32[i8 >> 2] = i21;
     if (!i21) {
      HEAP32[1460881] = HEAP32[1460881] & ~(1 << i4);
      break;
     }
    } else {
     HEAP32[i20 + 16 + (((HEAP32[i20 + 16 >> 2] | 0) != (i6 | 0) & 1) << 2) >> 2] = i21;
     if (!i21) break;
    }
    HEAP32[i21 + 24 >> 2] = i20;
    i4 = i6 + 16 | 0;
    i8 = HEAP32[i4 >> 2] | 0;
    if (i8 | 0) {
     HEAP32[i21 + 16 >> 2] = i8;
     HEAP32[i8 + 24 >> 2] = i21;
    }
    i8 = HEAP32[i4 + 4 >> 2] | 0;
    if (i8 | 0) {
     HEAP32[i21 + 20 >> 2] = i8;
     HEAP32[i8 + 24 >> 2] = i21;
    }
   }
  } while (0);
  HEAP32[i12 + 4 >> 2] = i18 | 1;
  HEAP32[i14 + i18 >> 2] = i18;
  if ((i12 | 0) == (HEAP32[1460885] | 0)) {
   HEAP32[1460882] = i18;
   return;
  } else i24 = i18;
 } else {
  HEAP32[i3 >> 2] = i1 & -2;
  HEAP32[i12 + 4 >> 2] = i13 | 1;
  HEAP32[i14 + i13 >> 2] = i13;
  i24 = i13;
 }
 i13 = i24 >>> 3;
 if (i24 >>> 0 < 256) {
  i14 = 5843560 + (i13 << 1 << 2) | 0;
  i1 = HEAP32[1460880] | 0;
  i3 = 1 << i13;
  if (!(i1 & i3)) {
   HEAP32[1460880] = i1 | i3;
   i25 = i14;
   i26 = i14 + 8 | 0;
  } else {
   i3 = i14 + 8 | 0;
   i25 = HEAP32[i3 >> 2] | 0;
   i26 = i3;
  }
  HEAP32[i26 >> 2] = i12;
  HEAP32[i25 + 12 >> 2] = i12;
  HEAP32[i12 + 8 >> 2] = i25;
  HEAP32[i12 + 12 >> 2] = i14;
  return;
 }
 i14 = i24 >>> 8;
 if (!i14) i27 = 0; else if (i24 >>> 0 > 16777215) i27 = 31; else {
  i25 = (i14 + 1048320 | 0) >>> 16 & 8;
  i26 = i14 << i25;
  i14 = (i26 + 520192 | 0) >>> 16 & 4;
  i3 = i26 << i14;
  i26 = (i3 + 245760 | 0) >>> 16 & 2;
  i1 = 14 - (i14 | i25 | i26) + (i3 << i26 >>> 15) | 0;
  i27 = i24 >>> (i1 + 7 | 0) & 1 | i1 << 1;
 }
 i1 = 5843824 + (i27 << 2) | 0;
 HEAP32[i12 + 28 >> 2] = i27;
 HEAP32[i12 + 20 >> 2] = 0;
 HEAP32[i12 + 16 >> 2] = 0;
 i26 = HEAP32[1460881] | 0;
 i3 = 1 << i27;
 do if (!(i26 & i3)) {
  HEAP32[1460881] = i26 | i3;
  HEAP32[i1 >> 2] = i12;
  HEAP32[i12 + 24 >> 2] = i1;
  HEAP32[i12 + 12 >> 2] = i12;
  HEAP32[i12 + 8 >> 2] = i12;
 } else {
  i25 = i24 << ((i27 | 0) == 31 ? 0 : 25 - (i27 >>> 1) | 0);
  i14 = HEAP32[i1 >> 2] | 0;
  while (1) {
   if ((HEAP32[i14 + 4 >> 2] & -8 | 0) == (i24 | 0)) {
    i2 = 73;
    break;
   }
   i28 = i14 + 16 + (i25 >>> 31 << 2) | 0;
   i13 = HEAP32[i28 >> 2] | 0;
   if (!i13) {
    i2 = 72;
    break;
   } else {
    i25 = i25 << 1;
    i14 = i13;
   }
  }
  if ((i2 | 0) == 72) {
   HEAP32[i28 >> 2] = i12;
   HEAP32[i12 + 24 >> 2] = i14;
   HEAP32[i12 + 12 >> 2] = i12;
   HEAP32[i12 + 8 >> 2] = i12;
   break;
  } else if ((i2 | 0) == 73) {
   i25 = i14 + 8 | 0;
   i20 = HEAP32[i25 >> 2] | 0;
   HEAP32[i20 + 12 >> 2] = i12;
   HEAP32[i25 >> 2] = i12;
   HEAP32[i12 + 8 >> 2] = i20;
   HEAP32[i12 + 12 >> 2] = i14;
   HEAP32[i12 + 24 >> 2] = 0;
   break;
  }
 } while (0);
 i12 = (HEAP32[1460888] | 0) + -1 | 0;
 HEAP32[1460888] = i12;
 if (!i12) i29 = 5843976; else return;
 while (1) {
  i12 = HEAP32[i29 >> 2] | 0;
  if (!i12) break; else i29 = i12 + 8 | 0;
 }
 HEAP32[1460888] = -1;
 return;
}

function __ZN13ActionManager17performTileActionEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = i1 + 32 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if (!i3) return;
 do switch (HEAP32[i1 + 28 >> 2] | 0) {
 case 1:
  {
   i4 = i3 + 12 | 0;
   switch (HEAP32[i4 >> 2] | 0) {
   case 1:
    {
     HEAP32[i4 >> 2] = 0;
     i4 = i3 + 28 | 0;
     HEAP32[i4 >> 2] = 0;
     HEAP32[i4 + 4 >> 2] = 0;
     HEAP32[i4 + 8 >> 2] = 0;
     HEAP32[i4 + 12 >> 2] = 0;
     break;
    }
   case 0:
    break;
   default:
    return;
   }
   if (HEAP32[i3 + 16 >> 2] | 0) return;
   i4 = HEAP32[i2 >> 2] | 0;
   HEAP32[i4 + 16 >> 2] = 1;
   HEAP32[i4 + 8 >> 2] = 0;
   __ZN7CityMap14checkRoadTilesEii(HEAP32[i1 >> 2] | 0, HEAP32[i1 + 36 >> 2] | 0, HEAP32[i1 + 40 >> 2] | 0);
   return;
  }
 case 2:
  {
   i4 = i3 + 12 | 0;
   switch (HEAP32[i4 >> 2] | 0) {
   case 1:
    {
     HEAP32[i4 >> 2] = 0;
     i4 = i3 + 28 | 0;
     HEAP32[i4 >> 2] = 0;
     HEAP32[i4 + 4 >> 2] = 0;
     HEAP32[i4 + 8 >> 2] = 0;
     HEAP32[i4 + 12 >> 2] = 0;
     break;
    }
   case 0:
    break;
   default:
    return;
   }
   if (HEAP32[i3 + 16 >> 2] | 0) return;
   HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] = 1;
   return;
  }
 case 3:
  {
   i4 = i3 + 12 | 0;
   switch (HEAP32[i4 >> 2] | 0) {
   case 1:
    {
     HEAP32[i4 >> 2] = 0;
     i4 = i3 + 28 | 0;
     HEAP32[i4 >> 2] = 0;
     HEAP32[i4 + 4 >> 2] = 0;
     HEAP32[i4 + 8 >> 2] = 0;
     HEAP32[i4 + 12 >> 2] = 0;
     break;
    }
   case 0:
    break;
   default:
    return;
   }
   if (HEAP32[i3 + 16 >> 2] | 0) return;
   HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] = 2;
   return;
  }
 case 4:
  {
   if (HEAP32[i3 + 16 >> 2] | 0) return;
   i4 = i3 + 12 | 0;
   if (HEAP32[i4 >> 2] | 0) return;
   HEAP32[i4 >> 2] = 1;
   HEAP32[i3 + 28 >> 2] = 1;
   HEAP32[i3 + 32 >> 2] = 1;
   HEAP32[i3 + 36 >> 2] = 1;
   HEAP32[i3 + 40 >> 2] = 1;
   return;
  }
 case 5:
  {
   i4 = i3 + 12 | 0;
   switch (HEAP32[i4 >> 2] | 0) {
   case 1:
    {
     HEAP32[i4 >> 2] = 0;
     i4 = i3 + 28 | 0;
     HEAP32[i4 >> 2] = 0;
     HEAP32[i4 + 4 >> 2] = 0;
     HEAP32[i4 + 8 >> 2] = 0;
     HEAP32[i4 + 12 >> 2] = 0;
     break;
    }
   case 0:
    break;
   default:
    return;
   }
   if (HEAP32[i3 + 16 >> 2] | 0) return;
   i4 = HEAP32[i2 >> 2] | 0;
   i5 = i4 + 44 | 0;
   if ((HEAP32[i5 >> 2] | 0) >>> 0 >= 2) return;
   HEAP32[i4 + 12 >> 2] = 2;
   HEAP32[i5 >> 2] = 1;
   HEAP8[i4 + 84 >> 0] = 1;
   i5 = i4 + 76 | 0;
   HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 2;
   __ZN10Simulation14doConnectivityEP7CityMapi(HEAP32[i1 >> 2] | 0, 1);
   __ZN7CityMap14checkPipeTilesEii(HEAP32[i1 >> 2] | 0, HEAP32[i1 + 36 >> 2] | 0, HEAP32[i1 + 40 >> 2] | 0);
   return;
  }
 case 6:
  {
   i5 = i3 + 12 | 0;
   switch (HEAP32[i5 >> 2] | 0) {
   case 1:
    {
     HEAP32[i5 >> 2] = 0;
     i5 = i3 + 28 | 0;
     HEAP32[i5 >> 2] = 0;
     HEAP32[i5 + 4 >> 2] = 0;
     HEAP32[i5 + 8 >> 2] = 0;
     HEAP32[i5 + 12 >> 2] = 0;
     break;
    }
   case 0:
    break;
   default:
    return;
   }
   if (HEAP32[i3 + 16 >> 2] | 0) return;
   i5 = HEAP32[i2 >> 2] | 0;
   i4 = i5 + 44 | 0;
   switch (HEAP32[i4 >> 2] | 0) {
   case 2:
   case 0:
    break;
   default:
    return;
   }
   HEAP32[i5 + 12 >> 2] = 3;
   HEAP32[i4 >> 2] = 2;
   HEAP8[i5 + 84 >> 0] = 1;
   i4 = i5 + 76 | 0;
   HEAP32[i4 >> 2] = HEAP32[i4 >> 2] | 4;
   __ZN10Simulation14doConnectivityEP7CityMapi(HEAP32[i1 >> 2] | 0, 2);
   __ZN7CityMap14checkPipeTilesEii(HEAP32[i1 >> 2] | 0, HEAP32[i1 + 36 >> 2] | 0, HEAP32[i1 + 40 >> 2] | 0);
   return;
  }
 case 7:
  {
   i4 = i3 + 12 | 0;
   switch (HEAP32[i4 >> 2] | 0) {
   case 1:
    {
     HEAP32[i4 >> 2] = 0;
     i4 = i3 + 28 | 0;
     HEAP32[i4 >> 2] = 0;
     HEAP32[i4 + 4 >> 2] = 0;
     HEAP32[i4 + 8 >> 2] = 0;
     HEAP32[i4 + 12 >> 2] = 0;
     break;
    }
   case 0:
    break;
   default:
    return;
   }
   if (HEAP32[i3 + 16 >> 2] | 0) return;
   i4 = HEAP32[i2 >> 2] | 0;
   i5 = i4 + 44 | 0;
   switch (HEAP32[i5 >> 2] | 0) {
   case 2:
   case 0:
    break;
   default:
    return;
   }
   HEAP32[i4 + 12 >> 2] = 4;
   HEAP32[i5 >> 2] = 2;
   HEAP8[i4 + 84 >> 0] = 1;
   __ZN10Simulation14doConnectivityEP7CityMapi(HEAP32[i1 >> 2] | 0, 2);
   __ZN7CityMap14checkPipeTilesEii(HEAP32[i1 >> 2] | 0, HEAP32[i1 + 36 >> 2] | 0, HEAP32[i1 + 40 >> 2] | 0);
   return;
  }
 case 8:
  {
   i4 = i3 + 12 | 0;
   switch (HEAP32[i4 >> 2] | 0) {
   case 1:
    {
     HEAP32[i4 >> 2] = 0;
     i4 = i3 + 28 | 0;
     HEAP32[i4 >> 2] = 0;
     HEAP32[i4 + 4 >> 2] = 0;
     HEAP32[i4 + 8 >> 2] = 0;
     HEAP32[i4 + 12 >> 2] = 0;
     break;
    }
   case 0:
    break;
   default:
    return;
   }
   if (HEAP32[i3 + 16 >> 2] | 0) return;
   i4 = HEAP32[i2 >> 2] | 0;
   i5 = i4 + 44 | 0;
   switch (HEAP32[i5 >> 2] | 0) {
   case 3:
   case 0:
    break;
   default:
    return;
   }
   HEAP32[i4 + 12 >> 2] = 5;
   HEAP32[i5 >> 2] = 3;
   HEAP8[i4 + 84 >> 0] = 1;
   i5 = i4 + 76 | 0;
   HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 8;
   __ZN10Simulation14doConnectivityEP7CityMapi(HEAP32[i1 >> 2] | 0, 3);
   __ZN7CityMap14checkPipeTilesEii(HEAP32[i1 >> 2] | 0, HEAP32[i1 + 36 >> 2] | 0, HEAP32[i1 + 40 >> 2] | 0);
   return;
  }
 case 9:
  {
   i5 = i3 + 12 | 0;
   switch (HEAP32[i5 >> 2] | 0) {
   case 1:
    {
     HEAP32[i5 >> 2] = 0;
     i5 = i3 + 28 | 0;
     HEAP32[i5 >> 2] = 0;
     HEAP32[i5 + 4 >> 2] = 0;
     HEAP32[i5 + 8 >> 2] = 0;
     HEAP32[i5 + 12 >> 2] = 0;
     break;
    }
   case 0:
    break;
   default:
    return;
   }
   if (HEAP32[i3 + 16 >> 2] | 0) return;
   i5 = HEAP32[i2 >> 2] | 0;
   i4 = i5 + 44 | 0;
   switch (HEAP32[i4 >> 2] | 0) {
   case 3:
   case 0:
    break;
   default:
    return;
   }
   HEAP32[i5 + 12 >> 2] = 6;
   HEAP32[i4 >> 2] = 3;
   HEAP8[i5 + 84 >> 0] = 1;
   __ZN10Simulation14doConnectivityEP7CityMapi(HEAP32[i1 >> 2] | 0, 3);
   __ZN7CityMap14checkPipeTilesEii(HEAP32[i1 >> 2] | 0, HEAP32[i1 + 36 >> 2] | 0, HEAP32[i1 + 40 >> 2] | 0);
   return;
  }
 case 10:
  {
   HEAP32[i3 + 12 >> 2] = 0;
   HEAP32[i3 + 16 >> 2] = 0;
   HEAP32[i3 + 8 >> 2] = 0;
   i5 = i1 + 36 | 0;
   i4 = i1 + 40 | 0;
   __ZN7CityMap14checkRoadTilesEii(HEAP32[i1 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i4 >> 2] | 0);
   i6 = HEAP32[i2 >> 2] | 0;
   i7 = i6 + 84 | 0;
   if (!(HEAP8[i7 >> 0] | 0)) return;
   HEAP8[i7 >> 0] = 0;
   i7 = i6 + 44 | 0;
   i6 = HEAP32[i7 >> 2] | 0;
   HEAP32[i7 >> 2] = 0;
   __ZN10Simulation14doConnectivityEP7CityMapi(HEAP32[i1 >> 2] | 0, i6);
   __ZN7CityMap14checkPipeTilesEii(HEAP32[i1 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i4 >> 2] | 0);
   return;
  }
 case 101:
  {
   i4 = i3 + 44 | 0;
   if (!(HEAP32[i4 >> 2] | 0)) HEAP32[i4 >> 2] = 1;
   __ZN7CityMap14checkPipeTilesEii(HEAP32[i1 >> 2] | 0, HEAP32[i1 + 36 >> 2] | 0, HEAP32[i1 + 40 >> 2] | 0);
   __ZN10Simulation14doConnectivityEP7CityMapi(HEAP32[i1 >> 2] | 0, 1);
   return;
  }
 case 102:
  {
   i4 = i3 + 44 | 0;
   if (!(HEAP32[i4 >> 2] | 0)) HEAP32[i4 >> 2] = 2;
   __ZN7CityMap14checkPipeTilesEii(HEAP32[i1 >> 2] | 0, HEAP32[i1 + 36 >> 2] | 0, HEAP32[i1 + 40 >> 2] | 0);
   __ZN10Simulation14doConnectivityEP7CityMapi(HEAP32[i1 >> 2] | 0, 2);
   return;
  }
 case 103:
  {
   i4 = i3 + 44 | 0;
   if (!(HEAP32[i4 >> 2] | 0)) HEAP32[i4 >> 2] = 3;
   __ZN7CityMap14checkPipeTilesEii(HEAP32[i1 >> 2] | 0, HEAP32[i1 + 36 >> 2] | 0, HEAP32[i1 + 40 >> 2] | 0);
   __ZN10Simulation14doConnectivityEP7CityMapi(HEAP32[i1 >> 2] | 0, 3);
   return;
  }
 case 104:
  {
   if (HEAP8[i3 + 84 >> 0] | 0) return;
   i4 = i3 + 44 | 0;
   i5 = HEAP32[i4 >> 2] | 0;
   if (!i5) return;
   HEAP32[i4 >> 2] = 0;
   __ZN10Simulation14doConnectivityEP7CityMapi(HEAP32[i1 >> 2] | 0, i5);
   __ZN7CityMap14checkPipeTilesEii(HEAP32[i1 >> 2] | 0, HEAP32[i1 + 36 >> 2] | 0, HEAP32[i1 + 40 >> 2] | 0);
   return;
  }
 default:
  return;
 } while (0);
}

function __ZN4Mesh10upload_objEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i4 = i3 + 32 | 0;
 i5 = i3 + 28 | 0;
 i6 = i3 + 40 | 0;
 i7 = i3 + 24 | 0;
 i8 = i3;
 i9 = i1 + 24 | 0;
 i10 = i1 + 28 | 0;
 if ((HEAP32[i10 >> 2] | 0) == (HEAP32[i9 >> 2] | 0)) {
  i11 = __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(5844316, 29970, 14) | 0;
  __ZNKSt3__28ios_base6getlocEv(i4, i11 + (HEAP32[(HEAP32[i11 >> 2] | 0) + -12 >> 2] | 0) | 0);
  i12 = __ZNKSt3__26locale9use_facetERNS0_2idE(i4, 5845188) | 0;
  i13 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i12 >> 2] | 0) + 28 >> 2] & 31](i12, 10) | 0;
  __ZNSt3__26localeD2Ev(i4);
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc(i11, i13) | 0;
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i11) | 0;
 } else {
  i11 = i1 + 124 | 0;
  _glGenBuffers(1, i11 | 0);
  _glBindBuffer(34962, HEAP32[i11 >> 2] | 0);
  i11 = HEAP32[i9 >> 2] | 0;
  _glBufferData(34962, (HEAP32[i10 >> 2] | 0) - i11 | 0, i11 | 0, 35044);
 }
 i11 = i1 + 48 | 0;
 i10 = i1 + 52 | 0;
 if ((HEAP32[i10 >> 2] | 0) == (HEAP32[i11 >> 2] | 0)) {
  i9 = __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(5844316, 29985, 13) | 0;
  __ZNKSt3__28ios_base6getlocEv(i4, i9 + (HEAP32[(HEAP32[i9 >> 2] | 0) + -12 >> 2] | 0) | 0);
  i13 = __ZNKSt3__26locale9use_facetERNS0_2idE(i4, 5845188) | 0;
  i12 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i13 >> 2] | 0) + 28 >> 2] & 31](i13, 10) | 0;
  __ZNSt3__26localeD2Ev(i4);
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc(i9, i12) | 0;
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i9) | 0;
 } else {
  i9 = i1 + 128 | 0;
  _glGenBuffers(1, i9 | 0);
  _glBindBuffer(34962, HEAP32[i9 >> 2] | 0);
  i9 = HEAP32[i11 >> 2] | 0;
  _glBufferData(34962, (HEAP32[i10 >> 2] | 0) - i9 | 0, i9 | 0, 35044);
 }
 i9 = i1 + 36 | 0;
 i10 = i1 + 40 | 0;
 if ((HEAP32[i10 >> 2] | 0) == (HEAP32[i9 >> 2] | 0)) {
  i11 = __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(5844316, 29999, 13) | 0;
  __ZNKSt3__28ios_base6getlocEv(i4, i11 + (HEAP32[(HEAP32[i11 >> 2] | 0) + -12 >> 2] | 0) | 0);
  i12 = __ZNKSt3__26locale9use_facetERNS0_2idE(i4, 5845188) | 0;
  i13 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i12 >> 2] | 0) + 28 >> 2] & 31](i12, 10) | 0;
  __ZNSt3__26localeD2Ev(i4);
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc(i11, i13) | 0;
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i11) | 0;
 } else {
  i11 = i1 + 120 | 0;
  _glGenBuffers(1, i11 | 0);
  _glBindBuffer(34962, HEAP32[i11 >> 2] | 0);
  i11 = HEAP32[i9 >> 2] | 0;
  _glBufferData(34962, (HEAP32[i10 >> 2] | 0) - i11 | 0, i11 | 0, 35044);
 }
 i11 = i1 + 96 | 0;
 i10 = HEAP32[i11 >> 2] | 0;
 i9 = i1 + 100 | 0;
 if ((i10 | 0) == (i9 | 0)) {
  STACKTOP = i3;
  return;
 }
 i13 = i1 + 132 | 0;
 i12 = i1 + 140 | 0;
 i14 = i8 + 16 | 0;
 i15 = i8 + 12 | 0;
 i16 = i8 + 20 | 0;
 i17 = i1 + 136 | 0;
 i18 = i1 + 136 | 0;
 i1 = i8 + 11 | 0;
 i19 = i10;
 while (1) {
  i10 = i19 + 28 | 0;
  i20 = i19 + 32 | 0;
  if ((HEAP32[i20 >> 2] | 0) == (HEAP32[i10 >> 2] | 0)) {
   i21 = __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(5844316, 30013, 13) | 0;
   __ZNKSt3__28ios_base6getlocEv(i4, i21 + (HEAP32[(HEAP32[i21 >> 2] | 0) + -12 >> 2] | 0) | 0);
   i22 = __ZNKSt3__26locale9use_facetERNS0_2idE(i4, 5845188) | 0;
   i23 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i22 >> 2] | 0) + 28 >> 2] & 31](i22, 10) | 0;
   __ZNSt3__26localeD2Ev(i4);
   __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc(i21, i23) | 0;
   __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i21) | 0;
  } else {
   i21 = i19 + 16 | 0;
   _glGenBuffers(1, i7 | 0);
   _glBindBuffer(34963, HEAP32[i7 >> 2] | 0);
   i23 = HEAP32[i10 >> 2] | 0;
   _glBufferData(34963, (HEAP32[i20 >> 2] | 0) - i23 | 0, i23 | 0, 35044);
   HEAP32[i8 >> 2] = 0;
   HEAP32[i8 + 4 >> 2] = 0;
   HEAP32[i8 + 8 >> 2] = 0;
   HEAP32[i8 + 12 >> 2] = 0;
   HEAP32[i8 + 16 >> 2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_(i8, i21) | 0;
   HEAP32[i14 >> 2] = HEAP32[i12 >> 2];
   HEAP32[i5 >> 2] = i21;
   __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorItNS5_ItEEEEEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE25__emplace_unique_key_argsIS7_JRKNS_21piecewise_construct_tENS_5tupleIJRKS7_EEENSM_IJEEEEEENS_4pairINS_15__tree_iteratorISB_PNS_11__tree_nodeISB_PvEEiEEbEERKT_DpOT0_(i4, i11, i21, 5847248, i5, i6);
   i21 = HEAP32[i4 >> 2] | 0;
   HEAP32[i15 >> 2] = (HEAP32[i21 + 32 >> 2] | 0) - (HEAP32[i21 + 28 >> 2] | 0) >> 1;
   HEAP32[i16 >> 2] = HEAP32[i7 >> 2];
   i21 = HEAP32[i17 >> 2] | 0;
   do if (!i21) {
    i24 = i17;
    i25 = i17;
   } else {
    i23 = HEAP32[i14 >> 2] | 0;
    i20 = i18;
    i10 = i21;
    while (1) {
     i22 = HEAP32[i10 + 16 >> 2] | 0;
     if ((i23 | 0) < (i22 | 0)) {
      i26 = HEAP32[i10 >> 2] | 0;
      if (!i26) {
       i2 = 19;
       break;
      } else {
       i27 = i10;
       i28 = i26;
      }
     } else {
      if ((i22 | 0) >= (i23 | 0)) {
       i2 = 23;
       break;
      }
      i29 = i10 + 4 | 0;
      i22 = HEAP32[i29 >> 2] | 0;
      if (!i22) {
       i2 = 22;
       break;
      } else {
       i27 = i29;
       i28 = i22;
      }
     }
     i20 = i27;
     i10 = i28;
    }
    if ((i2 | 0) == 19) {
     i2 = 0;
     i24 = i10;
     i25 = i10;
     break;
    } else if ((i2 | 0) == 22) {
     i2 = 0;
     i24 = i10;
     i25 = i29;
     break;
    } else if ((i2 | 0) == 23) {
     i2 = 0;
     i24 = i10;
     i25 = i20;
     break;
    }
   } while (0);
   i21 = HEAP32[i25 >> 2] | 0;
   if (!i21) {
    i23 = __Znwj(44) | 0;
    HEAP32[i23 + 16 >> 2] = HEAP32[i14 >> 2];
    i22 = i23 + 20 | 0;
    HEAP32[i22 >> 2] = 0;
    HEAP32[i22 + 4 >> 2] = 0;
    HEAP32[i22 + 8 >> 2] = 0;
    HEAP32[i22 + 12 >> 2] = 0;
    HEAP32[i22 + 16 >> 2] = 0;
    HEAP32[i22 + 20 >> 2] = 0;
    HEAP32[i23 >> 2] = 0;
    HEAP32[i23 + 4 >> 2] = 0;
    HEAP32[i23 + 8 >> 2] = i24;
    HEAP32[i25 >> 2] = i23;
    i22 = HEAP32[HEAP32[i13 >> 2] >> 2] | 0;
    if (!i22) i30 = i23; else {
     HEAP32[i13 >> 2] = i22;
     i30 = HEAP32[i25 >> 2] | 0;
    }
    __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[i18 >> 2] | 0, i30);
    HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
    i31 = i23;
   } else i31 = i21;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_(i31 + 20 | 0, i8) | 0;
   i21 = i31 + 32 | 0;
   HEAP32[i21 >> 2] = HEAP32[i15 >> 2];
   HEAP32[i21 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
   HEAP32[i21 + 8 >> 2] = HEAP32[i15 + 8 >> 2];
   if ((HEAP8[i1 >> 0] | 0) < 0) __ZdlPv(HEAP32[i8 >> 2] | 0);
  }
  i21 = HEAP32[i19 + 4 >> 2] | 0;
  if (!i21) {
   i23 = i19 + 8 | 0;
   i22 = HEAP32[i23 >> 2] | 0;
   if ((HEAP32[i22 >> 2] | 0) == (i19 | 0)) i32 = i22; else {
    i22 = i23;
    do {
     i23 = HEAP32[i22 >> 2] | 0;
     i22 = i23 + 8 | 0;
     i26 = HEAP32[i22 >> 2] | 0;
    } while ((HEAP32[i26 >> 2] | 0) != (i23 | 0));
    i32 = i26;
   }
  } else {
   i22 = i21;
   while (1) {
    i26 = HEAP32[i22 >> 2] | 0;
    if (!i26) break; else i22 = i26;
   }
   i32 = i22;
  }
  if ((i32 | 0) == (i9 | 0)) break; else i19 = i32;
 }
 STACKTOP = i3;
 return;
}

function __ZL30SettingsHandlerWindow_WriteAllP12ImGuiContextP20ImGuiSettingsHandlerP15ImGuiTextBuffer(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i6 = i5 + 32 | 0;
 i7 = i5 + 24 | 0;
 i8 = i5 + 16 | 0;
 i9 = i5 + 8 | 0;
 i10 = i5;
 i11 = i5 + 36 | 0;
 i12 = i1 + 6340 | 0;
 i13 = HEAP32[i12 >> 2] | 0;
 L1 : do if (!i13) i14 = i1 + 11080 | 0; else {
  i15 = i1 + 6348 | 0;
  i16 = i1 + 11088 | 0;
  i17 = i1 + 11080 | 0;
  i18 = 0;
  i19 = i13;
  L4 : while (1) {
   if ((i19 | 0) <= (i18 | 0)) {
    i4 = 13;
    break;
   }
   i20 = HEAP32[(HEAP32[i15 >> 2] | 0) + (i18 << 2) >> 2] | 0;
   if (!(HEAP32[i20 + 8 >> 2] & 256)) {
    i21 = i20 + 628 | 0;
    i22 = HEAP32[i21 >> 2] | 0;
    L9 : do if ((i22 | 0) == -1) {
     i23 = HEAP32[i20 + 4 >> 2] | 0;
     i24 = HEAP32[1460598] | 0;
     i25 = HEAP32[i24 + 11080 >> 2] | 0;
     if (!i25) {
      i26 = i24;
      i27 = 0;
      i4 = 28;
     } else {
      i28 = i24 + 11088 | 0;
      i29 = 0;
      while (1) {
       if ((i25 | 0) <= (i29 | 0)) {
        i4 = 23;
        break L4;
       }
       i30 = HEAP32[i28 >> 2] | 0;
       i31 = i29 + 1 | 0;
       if ((HEAP32[i30 + (i29 * 28 | 0) + 4 >> 2] | 0) == (i23 | 0)) break;
       if ((i31 | 0) == (i25 | 0)) {
        i26 = i24;
        i27 = i25;
        i4 = 28;
        break L9;
       } else i29 = i31;
      }
      i32 = i30 + (i29 * 28 | 0) | 0;
      i4 = 26;
     }
    } else {
     if ((HEAP32[i17 >> 2] | 0) <= (i22 | 0)) {
      i4 = 17;
      break L4;
     }
     i32 = (HEAP32[i16 >> 2] | 0) + (i22 * 28 | 0) | 0;
     i4 = 26;
    } while (0);
    if ((i4 | 0) == 26) {
     i4 = 0;
     if (!i32) {
      i22 = HEAP32[1460598] | 0;
      i26 = i22;
      i27 = HEAP32[i22 + 11080 >> 2] | 0;
      i4 = 28;
     } else i33 = i32;
    }
    if ((i4 | 0) == 28) {
     i4 = 0;
     i22 = HEAP32[i20 >> 2] | 0;
     HEAP32[i11 >> 2] = 0;
     HEAP32[i11 + 4 >> 2] = 0;
     HEAP32[i11 + 8 >> 2] = 0;
     HEAP32[i11 + 12 >> 2] = 0;
     HEAP32[i11 + 16 >> 2] = 0;
     HEAP32[i11 + 20 >> 2] = 0;
     HEAP8[i11 + 24 >> 0] = 0;
     i25 = i26 + 11080 | 0;
     i24 = i26 + 11084 | 0;
     if ((i27 | 0) == (HEAP32[i24 >> 2] | 0)) {
      i23 = i27 + 1 | 0;
      if (!i27) i34 = 8; else i34 = ((i27 | 0) / 2 | 0) + i27 | 0;
      i28 = (i34 | 0) > (i23 | 0) ? i34 : i23;
      if ((i27 | 0) < (i28 | 0)) {
       HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
       i23 = __ZL13MallocWrapperjPv(i28 * 28 | 0, 0) | 0;
       i31 = i26 + 11088 | 0;
       i35 = HEAP32[i31 >> 2] | 0;
       if (!i35) i36 = i31; else {
        _memcpy(i23 | 0, i35 | 0, (HEAP32[i25 >> 2] | 0) * 28 | 0) | 0;
        i35 = HEAP32[i31 >> 2] | 0;
        if (i35 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
        __ZL11FreeWrapperPvS_(i35, 0);
        i36 = i31;
       }
       HEAP32[i36 >> 2] = i23;
       HEAP32[i24 >> 2] = i28;
       i37 = HEAP32[i25 >> 2] | 0;
      } else i37 = i27;
     } else i37 = i27;
     i28 = i26 + 11088 | 0;
     i24 = (HEAP32[i28 >> 2] | 0) + (i37 * 28 | 0) | 0;
     HEAP32[i24 >> 2] = HEAP32[i11 >> 2];
     HEAP32[i24 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
     HEAP32[i24 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
     HEAP32[i24 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
     HEAP32[i24 + 16 >> 2] = HEAP32[i11 + 16 >> 2];
     HEAP32[i24 + 20 >> 2] = HEAP32[i11 + 20 >> 2];
     HEAP32[i24 + 24 >> 2] = HEAP32[i11 + 24 >> 2];
     i24 = HEAP32[i25 >> 2] | 0;
     HEAP32[i25 >> 2] = i24 + 1;
     if ((i24 | 0) <= -1) {
      i4 = 39;
      break;
     }
     i25 = HEAP32[i28 >> 2] | 0;
     i28 = i25 + (i24 * 28 | 0) | 0;
     i24 = i28 | 0;
     i25 = (_strlen(i22) | 0) + 1 | 0;
     HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
     i23 = __ZL13MallocWrapperjPv(i25, 0) | 0;
     _memcpy(i23 | 0, i22 | 0, i25 | 0) | 0;
     HEAP32[i24 >> 2] = i23;
     i23 = __Z6ImHashPKvij(i22, 0, 0) | 0;
     HEAP32[i28 + 4 >> 2] = i23;
     i23 = HEAP32[i16 >> 2] | 0;
     if (i23 >>> 0 > i24 >>> 0) {
      i4 = 42;
      break;
     }
     if ((i23 + ((HEAP32[i17 >> 2] | 0) * 28 | 0) | 0) >>> 0 < i24 >>> 0) {
      i4 = 42;
      break;
     }
     HEAP32[i21 >> 2] = (i24 - i23 | 0) / 28 | 0;
     i33 = i24;
    }
    if ((HEAP32[i33 + 4 >> 2] | 0) != (HEAP32[i20 + 4 >> 2] | 0)) {
     i4 = 45;
     break;
    }
    i24 = i20 + 12 | 0;
    i23 = HEAP32[i24 + 4 >> 2] | 0;
    i28 = i33 + 8 | 0;
    HEAP32[i28 >> 2] = HEAP32[i24 >> 2];
    HEAP32[i28 + 4 >> 2] = i23;
    i23 = i20 + 28 | 0;
    i28 = HEAP32[i23 + 4 >> 2] | 0;
    i24 = i33 + 16 | 0;
    HEAP32[i24 >> 2] = HEAP32[i23 >> 2];
    HEAP32[i24 + 4 >> 2] = i28;
    HEAP8[i33 + 24 >> 0] = HEAP8[i20 + 121 >> 0] | 0;
    i38 = HEAP32[i12 >> 2] | 0;
   } else i38 = i19;
   i18 = i18 + 1 | 0;
   if ((i18 | 0) == (i38 | 0)) {
    i14 = i17;
    break L1;
   } else i19 = i38;
  }
  if ((i4 | 0) == 13) ___assert_fail(56841, 56850, 1235, 56909); else if ((i4 | 0) == 17) ___assert_fail(56841, 56850, 1235, 56909); else if ((i4 | 0) == 23) ___assert_fail(56841, 56850, 1235, 56909); else if ((i4 | 0) == 39) ___assert_fail(38278, 56850, 1245, 38287); else if ((i4 | 0) == 42) ___assert_fail(31883, 56850, 1275, 33771); else if ((i4 | 0) == 45) ___assert_fail(34859, 31803, 3887, 34886);
 } while (0);
 i38 = HEAP32[i14 >> 2] | 0;
 i12 = (HEAP32[i3 >> 2] | 0) + -1 + (i38 * 96 | 0) | 0;
 i33 = i3 + 4 | 0;
 if ((HEAP32[i33 >> 2] | 0) < (i12 | 0)) {
  HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
  i11 = __ZL13MallocWrapperjPv(i12, 0) | 0;
  i37 = i3 + 8 | 0;
  i26 = HEAP32[i37 >> 2] | 0;
  if (i26 | 0) {
   _memcpy(i11 | 0, i26 | 0, HEAP32[i3 >> 2] | 0) | 0;
   i26 = HEAP32[i37 >> 2] | 0;
   if (i26 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
   __ZL11FreeWrapperPvS_(i26, 0);
  }
  HEAP32[i37 >> 2] = i11;
  HEAP32[i33 >> 2] = i12;
  i39 = HEAP32[i14 >> 2] | 0;
 } else i39 = i38;
 if (!i39) {
  STACKTOP = i5;
  return;
 }
 i38 = i1 + 11088 | 0;
 i1 = 0;
 i12 = i39;
 while (1) {
  if ((i12 | 0) <= (i1 | 0)) {
   i4 = 50;
   break;
  }
  i39 = HEAP32[i38 >> 2] | 0;
  i33 = i39 + (i1 * 28 | 0) + 8 | 0;
  if (Math_fround(HEAPF32[i33 >> 2]) == Math_fround(3402823469999999843913219.0e14)) i40 = i12; else {
   i11 = i39 + (i1 * 28 | 0) | 0;
   i39 = HEAP32[i11 >> 2] | 0;
   i37 = _strstr(i39, 34917) | 0;
   HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
   HEAP32[i10 + 4 >> 2] = (i37 | 0) == 0 ? i39 : i37;
   __ZN15ImGuiTextBuffer7appendfEPKcz(i3, 34921, i10);
   i37 = ~~Math_fround(HEAPF32[i33 >> 2]);
   i33 = ~~Math_fround(HEAPF32[i11 + 12 >> 2]);
   HEAP32[i9 >> 2] = i37;
   HEAP32[i9 + 4 >> 2] = i33;
   __ZN15ImGuiTextBuffer7appendfEPKcz(i3, 34931, i9);
   i33 = ~~Math_fround(HEAPF32[i11 + 16 >> 2]);
   i37 = ~~Math_fround(HEAPF32[i11 + 20 >> 2]);
   HEAP32[i8 >> 2] = i33;
   HEAP32[i8 + 4 >> 2] = i37;
   __ZN15ImGuiTextBuffer7appendfEPKcz(i3, 34942, i8);
   HEAP32[i7 >> 2] = HEAPU8[i11 + 24 >> 0];
   __ZN15ImGuiTextBuffer7appendfEPKcz(i3, 34954, i7);
   __ZN15ImGuiTextBuffer7appendfEPKcz(i3, 56185, i6);
   i40 = HEAP32[i14 >> 2] | 0;
  }
  i1 = i1 + 1 | 0;
  if ((i1 | 0) == (i40 | 0)) {
   i4 = 48;
   break;
  } else i12 = i40;
 }
 if ((i4 | 0) == 48) {
  STACKTOP = i5;
  return;
 } else if ((i4 | 0) == 50) ___assert_fail(56841, 56850, 1235, 56909);
}

function _hexfloat(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, d14 = 0.0, d15 = 0.0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, d30 = 0.0, d31 = 0.0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, d39 = 0.0, d40 = 0.0, i41 = 0, d42 = 0.0, d43 = 0.0, i44 = 0, i45 = 0, i46 = 0, d47 = 0.0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, d54 = 0.0, i55 = 0, d56 = 0.0;
 i6 = 0;
 i7 = i1 + 4 | 0;
 i8 = HEAP32[i7 >> 2] | 0;
 i9 = i1 + 100 | 0;
 if (i8 >>> 0 < (HEAP32[i9 >> 2] | 0) >>> 0) {
  HEAP32[i7 >> 2] = i8 + 1;
  i10 = HEAPU8[i8 >> 0] | 0;
  i11 = 0;
 } else {
  i10 = ___shgetc(i1) | 0;
  i11 = 0;
 }
 L4 : while (1) {
  switch (i10 | 0) {
  case 46:
   {
    i6 = 8;
    break L4;
    break;
   }
  case 48:
   break;
  default:
   {
    i12 = 0;
    i13 = 0;
    d14 = 1.0;
    d15 = 0.0;
    i16 = 0;
    i17 = i10;
    i18 = i11;
    i19 = 0;
    i20 = 0;
    i21 = 0;
    i22 = 0;
    break L4;
   }
  }
  i8 = HEAP32[i7 >> 2] | 0;
  if (i8 >>> 0 < (HEAP32[i9 >> 2] | 0) >>> 0) {
   HEAP32[i7 >> 2] = i8 + 1;
   i10 = HEAPU8[i8 >> 0] | 0;
   i11 = 1;
   continue;
  } else {
   i10 = ___shgetc(i1) | 0;
   i11 = 1;
   continue;
  }
 }
 if ((i6 | 0) == 8) {
  i10 = HEAP32[i7 >> 2] | 0;
  if (i10 >>> 0 < (HEAP32[i9 >> 2] | 0) >>> 0) {
   HEAP32[i7 >> 2] = i10 + 1;
   i23 = HEAPU8[i10 >> 0] | 0;
  } else i23 = ___shgetc(i1) | 0;
  if ((i23 | 0) == 48) {
   i10 = 0;
   i8 = 0;
   while (1) {
    i24 = HEAP32[i7 >> 2] | 0;
    if (i24 >>> 0 < (HEAP32[i9 >> 2] | 0) >>> 0) {
     HEAP32[i7 >> 2] = i24 + 1;
     i25 = HEAPU8[i24 >> 0] | 0;
    } else i25 = ___shgetc(i1) | 0;
    i24 = _i64Add(i10 | 0, i8 | 0, -1, -1) | 0;
    i26 = tempRet0;
    if ((i25 | 0) == 48) {
     i10 = i24;
     i8 = i26;
    } else {
     i12 = 1;
     i13 = 0;
     d14 = 1.0;
     d15 = 0.0;
     i16 = 0;
     i17 = i25;
     i18 = 1;
     i19 = 0;
     i20 = 0;
     i21 = i24;
     i22 = i26;
     break;
    }
   }
  } else {
   i12 = 1;
   i13 = 0;
   d14 = 1.0;
   d15 = 0.0;
   i16 = 0;
   i17 = i23;
   i18 = i11;
   i19 = 0;
   i20 = 0;
   i21 = 0;
   i22 = 0;
  }
 }
 while (1) {
  i11 = i17 + -48 | 0;
  i23 = i17 | 32;
  if (i11 >>> 0 < 10) i6 = 20; else {
   i25 = (i17 | 0) == 46;
   if (!(i25 | (i23 + -97 | 0) >>> 0 < 6)) {
    i27 = i17;
    break;
   }
   if (i25) if (!i12) {
    i28 = 1;
    i29 = i13;
    d30 = d14;
    d31 = d15;
    i32 = i16;
    i33 = i18;
    i34 = i20;
    i35 = i19;
    i36 = i20;
    i37 = i19;
   } else {
    i27 = 46;
    break;
   } else i6 = 20;
  }
  if ((i6 | 0) == 20) {
   i6 = 0;
   i25 = (i17 | 0) > 57 ? i23 + -87 | 0 : i11;
   do if ((i19 | 0) < 0 | (i19 | 0) == 0 & i20 >>> 0 < 8) {
    i38 = i13;
    d39 = d14;
    d40 = d15;
    i41 = i25 + (i16 << 4) | 0;
   } else if ((i19 | 0) < 0 | (i19 | 0) == 0 & i20 >>> 0 < 14) {
    d42 = d14 * .0625;
    i38 = i13;
    d39 = d42;
    d40 = d15 + d42 * +(i25 | 0);
    i41 = i16;
    break;
   } else {
    i11 = (i13 | 0) != 0 | (i25 | 0) == 0;
    i38 = i11 ? i13 : 1;
    d39 = d14;
    d40 = i11 ? d15 : d15 + d14 * .5;
    i41 = i16;
    break;
   } while (0);
   i25 = _i64Add(i20 | 0, i19 | 0, 1, 0) | 0;
   i28 = i12;
   i29 = i38;
   d30 = d39;
   d31 = d40;
   i32 = i41;
   i33 = 1;
   i34 = i21;
   i35 = i22;
   i36 = i25;
   i37 = tempRet0;
  }
  i25 = HEAP32[i7 >> 2] | 0;
  if (i25 >>> 0 < (HEAP32[i9 >> 2] | 0) >>> 0) {
   HEAP32[i7 >> 2] = i25 + 1;
   i12 = i28;
   i13 = i29;
   d14 = d30;
   d15 = d31;
   i16 = i32;
   i17 = HEAPU8[i25 >> 0] | 0;
   i18 = i33;
   i19 = i37;
   i20 = i36;
   i21 = i34;
   i22 = i35;
   continue;
  } else {
   i12 = i28;
   i13 = i29;
   d14 = d30;
   d15 = d31;
   i16 = i32;
   i17 = ___shgetc(i1) | 0;
   i18 = i33;
   i19 = i37;
   i20 = i36;
   i21 = i34;
   i22 = i35;
   continue;
  }
 }
 do if (!i18) {
  i35 = (HEAP32[i9 >> 2] | 0) == 0;
  if (!i35) HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + -1;
  if (!i5) ___shlim(i1, 0); else {
   if (!i35) HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + -1;
   if (!((i12 | 0) == 0 | i35)) HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + -1;
  }
  d43 = +(i4 | 0) * 0.0;
 } else {
  i35 = (i12 | 0) == 0;
  i34 = i35 ? i20 : i21;
  i36 = i35 ? i19 : i22;
  if ((i19 | 0) < 0 | (i19 | 0) == 0 & i20 >>> 0 < 8) {
   i35 = i16;
   i37 = i20;
   i33 = i19;
   while (1) {
    i17 = i35 << 4;
    i32 = i37;
    i37 = _i64Add(i37 | 0, i33 | 0, 1, 0) | 0;
    if (!((i33 | 0) < 0 | (i33 | 0) == 0 & i32 >>> 0 < 7)) {
     i44 = i17;
     break;
    } else {
     i35 = i17;
     i33 = tempRet0;
    }
   }
  } else i44 = i16;
  if ((i27 | 32 | 0) == 112) {
   i33 = _scanexp(i1, i5) | 0;
   i35 = tempRet0;
   if ((i33 | 0) == 0 & (i35 | 0) == -2147483648) {
    if (!i5) {
     ___shlim(i1, 0);
     d43 = 0.0;
     break;
    }
    if (!(HEAP32[i9 >> 2] | 0)) {
     i45 = 0;
     i46 = 0;
    } else {
     HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + -1;
     i45 = 0;
     i46 = 0;
    }
   } else {
    i45 = i33;
    i46 = i35;
   }
  } else if (!(HEAP32[i9 >> 2] | 0)) {
   i45 = 0;
   i46 = 0;
  } else {
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + -1;
   i45 = 0;
   i46 = 0;
  }
  i35 = _bitshift64Shl(i34 | 0, i36 | 0, 2) | 0;
  i33 = _i64Add(i35 | 0, tempRet0 | 0, -32, -1) | 0;
  i35 = _i64Add(i33 | 0, tempRet0 | 0, i45 | 0, i46 | 0) | 0;
  i33 = tempRet0;
  if (!i44) {
   d43 = +(i4 | 0) * 0.0;
   break;
  }
  i37 = 0 - i3 | 0;
  i17 = ((i37 | 0) < 0) << 31 >> 31;
  if ((i33 | 0) > (i17 | 0) | (i33 | 0) == (i17 | 0) & i35 >>> 0 > i37 >>> 0) {
   i37 = ___errno_location() | 0;
   HEAP32[i37 >> 2] = 34;
   d43 = +(i4 | 0) * 1797693134862315708145274.0e284 * 1797693134862315708145274.0e284;
   break;
  }
  i37 = i3 + -106 | 0;
  i17 = ((i37 | 0) < 0) << 31 >> 31;
  if ((i33 | 0) < (i17 | 0) | (i33 | 0) == (i17 | 0) & i35 >>> 0 < i37 >>> 0) {
   i37 = ___errno_location() | 0;
   HEAP32[i37 >> 2] = 34;
   d43 = +(i4 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
   break;
  }
  if ((i44 | 0) > -1) {
   d31 = d15;
   i37 = i44;
   i17 = i35;
   i32 = i33;
   while (1) {
    i29 = !(d31 >= .5);
    i13 = i37 << 1 | (i29 ^ 1) & 1;
    d30 = d31 + (i29 ? d31 : d31 + -1.0);
    i29 = _i64Add(i17 | 0, i32 | 0, -1, -1) | 0;
    i28 = tempRet0;
    if ((i13 | 0) > -1) {
     d31 = d30;
     i37 = i13;
     i17 = i29;
     i32 = i28;
    } else {
     d47 = d30;
     i48 = i13;
     i49 = i29;
     i50 = i28;
     break;
    }
   }
  } else {
   d47 = d15;
   i48 = i44;
   i49 = i35;
   i50 = i33;
  }
  i32 = ((i2 | 0) < 0) << 31 >> 31;
  i17 = _i64Subtract(32, 0, i3 | 0, ((i3 | 0) < 0) << 31 >> 31 | 0) | 0;
  i37 = _i64Add(i17 | 0, tempRet0 | 0, i49 | 0, i50 | 0) | 0;
  i17 = tempRet0;
  if ((i17 | 0) < (i32 | 0) | (i17 | 0) == (i32 | 0) & i37 >>> 0 < i2 >>> 0) if ((i37 | 0) > 0) {
   i51 = i37;
   i6 = 59;
  } else {
   i52 = 0;
   i53 = 84;
   i6 = 61;
  } else {
   i51 = i2;
   i6 = 59;
  }
  if ((i6 | 0) == 59) if ((i51 | 0) < 53) {
   i52 = i51;
   i53 = 84 - i51 | 0;
   i6 = 61;
  } else {
   d54 = 0.0;
   i55 = i51;
   d56 = +(i4 | 0);
  }
  if ((i6 | 0) == 61) {
   d31 = +(i4 | 0);
   d54 = +_copysignl(+_scalbn(1.0, i53), d31);
   i55 = i52;
   d56 = d31;
  }
  i37 = (i48 & 1 | 0) == 0 & (d47 != 0.0 & (i55 | 0) < 32);
  d31 = (i37 ? 0.0 : d47) * d56 + (d54 + d56 * +((i48 + (i37 & 1) | 0) >>> 0)) - d54;
  if (!(d31 != 0.0)) {
   i37 = ___errno_location() | 0;
   HEAP32[i37 >> 2] = 34;
  }
  d43 = +_scalbnl(d31, i49);
 } while (0);
 return +d43;
}
function _png_combine_row(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0;
 i4 = 0;
 i5 = HEAP8[i1 + 443 >> 0] | 0;
 i6 = i5 & 255;
 i7 = (HEAP32[i1 + 384 >> 2] | 0) + 1 | 0;
 i8 = HEAP32[i1 + 348 >> 2] | 0;
 i9 = HEAP8[i1 + 433 >> 0] | 0;
 i10 = i9 & 255;
 if (!(i5 << 24 >> 24)) _png_error(i1, 64705);
 i11 = HEAP32[i1 + 404 >> 2] | 0;
 if (i11 | 0) {
  if ((i5 & 255) > 7) i12 = Math_imul(i8, i6 >>> 3) | 0; else i12 = ((Math_imul(i8, i6) | 0) + 7 | 0) >>> 3;
  if ((i11 | 0) != (i12 | 0)) _png_error(i1, 64730);
 }
 if (!i8) _png_error(i1, 64766);
 i12 = Math_imul(i8, i6) | 0;
 i11 = i12 & 7;
 do if (!i11) {
  i13 = 0;
  i14 = 0;
  i15 = 0;
 } else {
  i16 = Math_imul(i8, i6 >>> 3) | 0;
  i17 = i2 + ((i5 & 255) > 7 ? i16 : (i12 + 7 | 0) >>> 3) + -1 | 0;
  i16 = HEAP8[i17 >> 0] | 0;
  if (!(HEAP32[i1 + 216 >> 2] & 65536)) {
   i13 = i17;
   i14 = 255 >>> i11;
   i15 = i16;
   break;
  } else {
   i13 = i17;
   i14 = 255 << i11;
   i15 = i16;
   break;
  }
 } while (0);
 L21 : do if (!(HEAP8[i1 + 432 >> 0] | 0)) i4 = 63; else {
  i11 = HEAP32[i1 + 216 >> 2] | 0;
  if ((i9 & 255) < 6 & (i11 & 2 | 0) != 0) {
   switch (i3 | 0) {
   case 0:
    {
     i18 = i10 & 1;
     break;
    }
   case 1:
    {
     if (!(i10 & 1)) {
      i4 = 63;
      break L21;
     } else i18 = 1;
     break;
    }
   default:
    {
     i4 = 63;
     break L21;
    }
   }
   i16 = i18 << 3 - ((i10 + 1 | 0) >>> 1) & 7;
   if (i8 >>> 0 <= i16 >>> 0) return;
   if ((i5 & 255) < 8) {
    i17 = 8 / (i6 >>> 0) | 0;
    i19 = (i3 | 0) != 0;
    i20 = i5 << 24 >> 24 | 0;
    i21 = (i20 | 0) == 1 ? 0 : (i20 | 0) == 2 ? 1 : 2;
    do if (!(i11 & 65536)) if (i19) {
     i22 = 4980 + (i21 * 12 | 0) + (i10 >>> 1 << 2) | 0;
     break;
    } else {
     i22 = 4872 + (i21 * 24 | 0) + (i10 << 2) | 0;
     break;
    } else i22 = i19 ? 4944 + (i21 * 12 | 0) + (i10 >>> 1 << 2) | 0 : 4800 + (i21 * 24 | 0) + (i10 << 2) | 0; while (0);
    i21 = i2;
    i19 = i7;
    i11 = i8;
    i20 = HEAP32[i22 >> 2] | 0;
    while (1) {
     switch ((i20 & 255) << 24 >> 24) {
     case 0:
      break;
     case -1:
      {
       i23 = HEAP8[i19 >> 0] | 0;
       i4 = 31;
       break;
      }
     default:
      {
       i23 = (i20 & HEAPU8[i19 >> 0] | (i20 ^ 255) & HEAPU8[i21 >> 0]) & 255;
       i4 = 31;
      }
     }
     i20 = i20 >>> 8 | i20 << 24;
     if ((i4 | 0) == 31) {
      i4 = 0;
      HEAP8[i21 >> 0] = i23;
     }
     if (i11 >>> 0 <= i17 >>> 0) break L21; else {
      i21 = i21 + 1 | 0;
      i19 = i19 + 1 | 0;
      i11 = i11 - i17 | 0;
     }
    }
   }
   if (i6 & 7 | 0) _png_error(i1, 64791);
   i17 = i6 >>> 3;
   i11 = Math_imul(i16, i17) | 0;
   i19 = (Math_imul(i8, i17) | 0) - i11 | 0;
   i21 = i2 + i11 | 0;
   i20 = i7 + i11 | 0;
   i11 = i17 << ((6 - i10 | 0) >>> 1);
   i24 = (i3 | 0) == 0 ? i17 : i11 >>> 0 > i19 >>> 0 ? i19 : i11;
   i11 = i17 << ((7 - i10 | 0) >>> 1);
   switch (i24 | 0) {
   case 1:
    {
     HEAP8[i21 >> 0] = HEAP8[i20 >> 0] | 0;
     if (i19 >>> 0 > i11 >>> 0) {
      i25 = i20;
      i26 = i19;
      i27 = i21;
     } else return;
     do {
      i27 = i27 + i11 | 0;
      i25 = i25 + i11 | 0;
      i26 = i26 - i11 | 0;
      HEAP8[i27 >> 0] = HEAP8[i25 >> 0] | 0;
     } while (i26 >>> 0 > i11 >>> 0);
     return;
    }
   case 2:
    {
     i16 = i21;
     i17 = i20;
     i28 = i19;
     do {
      HEAP8[i16 >> 0] = HEAP8[i17 >> 0] | 0;
      HEAP8[i16 + 1 >> 0] = HEAP8[i17 + 1 >> 0] | 0;
      if (i28 >>> 0 <= i11 >>> 0) {
       i4 = 66;
       break;
      }
      i17 = i17 + i11 | 0;
      i16 = i16 + i11 | 0;
      i28 = i28 - i11 | 0;
     } while (i28 >>> 0 > 1);
     if ((i4 | 0) == 66) return;
     HEAP8[i16 >> 0] = HEAP8[i17 >> 0] | 0;
     return;
    }
   case 3:
    {
     HEAP8[i21 >> 0] = HEAP8[i20 >> 0] | 0;
     HEAP8[i21 + 1 >> 0] = HEAP8[i20 + 1 >> 0] | 0;
     HEAP8[i21 + 2 >> 0] = HEAP8[i20 + 2 >> 0] | 0;
     if (i19 >>> 0 > i11 >>> 0) {
      i29 = i20;
      i30 = i19;
      i31 = i21;
     } else return;
     do {
      i29 = i29 + i11 | 0;
      i31 = i31 + i11 | 0;
      i30 = i30 - i11 | 0;
      HEAP8[i31 >> 0] = HEAP8[i29 >> 0] | 0;
      HEAP8[i31 + 1 >> 0] = HEAP8[i29 + 1 >> 0] | 0;
      HEAP8[i31 + 2 >> 0] = HEAP8[i29 + 2 >> 0] | 0;
     } while (i30 >>> 0 > i11 >>> 0);
     return;
    }
   default:
    {
     if (i24 >>> 0 < 16) {
      i17 = i21;
      if (!(i17 & 1)) {
       i16 = i11 | i20;
       if (!((i16 | i24) & 1)) if (!((i16 | i17 | i24) & 3)) {
        i17 = (i11 - i24 | 0) >>> 2;
        i16 = i20;
        i28 = i21;
        i32 = i19;
        do {
         i33 = i24;
         i34 = i16;
         i35 = i28;
         do {
          i36 = i34;
          i34 = i34 + 4 | 0;
          i37 = i35;
          i35 = i35 + 4 | 0;
          HEAP32[i37 >> 2] = HEAP32[i36 >> 2];
          i33 = i33 + -4 | 0;
         } while ((i33 | 0) != 0);
         i28 = i35 + (i17 << 2) | 0;
         i16 = i34 + (i17 << 2) | 0;
         i33 = i32;
         i32 = i32 - i11 | 0;
         if (i33 >>> 0 <= i11 >>> 0) {
          i4 = 66;
          break;
         }
        } while (i24 >>> 0 <= i32 >>> 0);
        if ((i4 | 0) == 66) return;
        i17 = i28;
        i33 = i16;
        i36 = i32;
        while (1) {
         HEAP8[i17 >> 0] = HEAP8[i33 >> 0] | 0;
         i36 = i36 + -1 | 0;
         if (!i36) break; else {
          i17 = i17 + 1 | 0;
          i33 = i33 + 1 | 0;
         }
        }
        return;
       } else {
        i33 = (i11 - i24 | 0) >>> 1;
        i17 = i20;
        i36 = i21;
        i32 = i19;
        do {
         i16 = i24;
         i28 = i17;
         i37 = i36;
         do {
          i38 = i28;
          i28 = i28 + 2 | 0;
          i39 = i37;
          i37 = i37 + 2 | 0;
          HEAP16[i39 >> 1] = HEAP16[i38 >> 1] | 0;
          i16 = i16 + -2 | 0;
         } while ((i16 | 0) != 0);
         i36 = i37 + (i33 << 1) | 0;
         i17 = i28 + (i33 << 1) | 0;
         i16 = i32;
         i32 = i32 - i11 | 0;
         if (i16 >>> 0 <= i11 >>> 0) {
          i4 = 66;
          break;
         }
        } while (i24 >>> 0 <= i32 >>> 0);
        if ((i4 | 0) == 66) return;
        i33 = i32;
        i16 = i36;
        i34 = i17;
        while (1) {
         HEAP8[i16 >> 0] = HEAP8[i34 >> 0] | 0;
         i33 = i33 + -1 | 0;
         if (!i33) break; else {
          i16 = i16 + 1 | 0;
          i34 = i34 + 1 | 0;
         }
        }
        return;
       }
      }
     }
     _memcpy(i21 | 0, i20 | 0, i24 | 0) | 0;
     if (i19 >>> 0 > i11 >>> 0) {
      i40 = i19;
      i41 = i24;
      i42 = i20;
      i43 = i21;
     } else return;
     do {
      i42 = i42 + i11 | 0;
      i43 = i43 + i11 | 0;
      i40 = i40 - i11 | 0;
      i41 = i41 >>> 0 > i40 >>> 0 ? i40 : i41;
      _memcpy(i43 | 0, i42 | 0, i41 | 0) | 0;
     } while (i40 >>> 0 > i11 >>> 0);
     return;
    }
   }
  } else i4 = 63;
 } while (0);
 if ((i4 | 0) == 63) {
  i4 = Math_imul(i8, i6 >>> 3) | 0;
  _memcpy(i2 | 0, i7 | 0, ((i5 & 255) > 7 ? i4 : (i12 + 7 | 0) >>> 3) | 0) | 0;
 }
 if (!i13) return;
 HEAP8[i13 >> 0] = (i14 ^ 255) & HEAPU8[i13 >> 0] | i14 & (i15 & 255);
 return;
}

function __Z4drawv() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, f11 = f0, i12 = 0, f13 = f0, f14 = f0, f15 = f0, f16 = f0, f17 = f0, f18 = f0, f19 = f0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(192);
 i2 = i1 + 120 | 0;
 i3 = i1 + 96 | 0;
 i4 = i1 + 108 | 0;
 i5 = i1 + 84 | 0;
 i6 = i1 + 80 | 0;
 i7 = i1 + 76 | 0;
 i8 = i1 + 72 | 0;
 i9 = i1;
 i10 = i1 + 8 | 0;
 if (__ZN11MeshManager7loadingEv(5842084) | 0) {
  __ZN11MeshManager4loadEPiS0_(5842084, i2, i3);
  __ZN11MenuManager7predrawEv(5841612);
  __ZN9MenuBuild11drawLoadingEii(5841632, HEAP32[i2 >> 2] | 0, HEAP32[i3 >> 2] | 0);
  __ZN11MenuManager8postdrawER13WindowManager(5841612, 5841600);
  STACKTOP = i1;
  return;
 }
 do if (!(HEAP8[74288] | 0)) {
  _glClearColor(.933333337, .933333337, .933333337, 1.0);
  _glClear(16384);
  if (HEAP32[1460416] | 0) {
   if (!(HEAP32[1460417] | 0)) {
    __ZN7CityMap8generateEv(74252);
    __ZN7CityMap12processTreesEv(74252);
    break;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_(i4, 5841652);
   __ZN7CityMap8loadFileENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(74252, i4);
   if ((HEAP8[i4 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[i4 >> 2] | 0);
  }
 } else {
  f11 = Math_fround(HEAPF32[1460537]);
  i12 = HEAP32[18562] | 0;
  HEAPF64[i12 + 48 >> 3] = +f11;
  f13 = Math_fround(HEAPF32[1460538]);
  HEAPF64[i12 + 56 >> 3] = +f13;
  f14 = Math_fround(HEAPF32[1460536]);
  f15 = Math_fround(HEAPF32[1460534]);
  f16 = Math_fround(_sinf(f15));
  f17 = Math_fround(HEAPF32[1460535]);
  f18 = Math_fround(_cosf(f17));
  f19 = Math_fround(f16 * f18);
  f16 = Math_fround(f18 * Math_fround(_cosf(f15)));
  f15 = Math_fround(f14 * Math_fround(_sinf(f17)));
  f17 = Math_fround(Math_fround(f14 * f19) + f11);
  f11 = Math_fround(Math_fround(f14 * f16) + f13);
  f13 = Math_fround(f15 + Math_fround(HEAPF32[1460539]));
  HEAPF32[i2 >> 2] = f17;
  HEAPF32[i2 + 4 >> 2] = f11;
  HEAPF32[i2 + 8 >> 2] = f13;
  __ZN12RenderSystem5startERKN3glm3vecILi3EfLNS0_9qualifierE0EEES5_(i12, i2, 5842148);
  i12 = HEAP32[1460411] | 0;
  if ((i12 | 0) == -1) __ZN15CityMapRenderer13generateQueueEi(5841692, HEAP32[1460408] | 0); else __ZN15CityMapRenderer13generateQueueEi(5841692, i12 + 2 | 0);
  __ZN15CityMapRenderer4tickEv(5841692);
  i12 = HEAP32[18562] | 0;
  __ZN11RenderQueue4drawEiiP12RenderSystem(5841692, HEAP32[i12 + 8 >> 2] | 0, HEAP32[i12 + 16 >> 2] | 0, i12);
  if ((HEAP32[1460395] | 0) > 0) {
   i12 = HEAP32[18562] | 0;
   __ZN11RenderQueue4drawEiiP12RenderSystem(5841816, HEAP32[i12 + 8 >> 2] | 0, HEAP32[i12 + 16 >> 2] | 0, i12);
   i12 = HEAP32[18562] | 0;
   __ZN11RenderQueue4drawEiiP12RenderSystem(5841960, HEAP32[i12 + 8 >> 2] | 0, HEAP32[i12 + 16 >> 2] | 0, i12);
  }
  __ZN12RenderSystem3endEv(HEAP32[18562] | 0);
 } while (0);
 HEAP32[i3 >> 2] = 0;
 i4 = i3 + 4 | 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 if ((HEAP8[5841649] | 0) != 0 | (HEAP8[74288] | 0) == 0) __ZN7CityMap18availableLoadFilesERNSt3__26vectorINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS5_IS7_EEEE(i3);
 if (HEAP32[1460418] | 0) {
  HEAP32[1460418] = 0;
  HEAP8[74288] = 0;
 }
 __ZN11MenuManager7predrawEv(5841612);
 __ZN9MenuBuild4drawERNSt3__26vectorINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS5_IS7_EEEE(5841632, i3);
 __ZN11MenuManager8postdrawER13WindowManager(5841612, 5841600);
 if (HEAP8[5841648] | 0) {
  HEAP8[5841648] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_(i5, 5841652);
  __ZN7CityMap8saveFileENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(74252, i5);
  if ((HEAP8[i5 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[i5 >> 2] | 0);
 }
 if (HEAP8[5841650] | 0) {
  HEAP8[5841650] = 0;
  __ZN7CityMap12processTreesEv(74252);
 }
 __ZN13ActionManager13setNextActionEi(5841552, HEAP32[1460420] | 0);
 i5 = HEAP32[18562] | 0;
 i12 = ~~Math_fround(Math_fround(HEAPF32[i5 >> 2]) + Math_fround(.5));
 __ZN13ActionManager12setCursorPosEii(5841552, i12, ~~Math_fround(Math_fround(HEAPF32[i5 + 4 >> 2]) + Math_fround(.5)));
 __ZN11RenderQueue5clearEv(5841960);
 if (__ZN8LineTool7getLineERiS0_S0_S0_(5841556, i6, i7, i8, i9) | 0) {
  i5 = HEAP32[i6 >> 2] | 0;
  i12 = HEAP32[i8 >> 2] | 0;
  if ((i5 | 0) > (i12 | 0)) {
   HEAP32[i6 >> 2] = i12;
   HEAP32[i8 >> 2] = i5;
  }
  i5 = HEAP32[i7 >> 2] | 0;
  i12 = HEAP32[i9 >> 2] | 0;
  if ((i5 | 0) > (i12 | 0)) {
   HEAP32[i7 >> 2] = i12;
   HEAP32[i9 >> 2] = i5;
  }
  __ZN11RenderQueue10setProgramEi(5841960, HEAP32[(HEAP32[18562] | 0) + 44 >> 2] | 0);
  __ZN11RenderQueue7setMeshEi(5841960, 0);
  i5 = HEAP32[i6 >> 2] | 0;
  i6 = HEAP32[i8 >> 2] | 0;
  if ((i5 | 0) <= (i6 | 0)) {
   i12 = i10 + 4 | 0;
   i20 = i10 + 20 | 0;
   i21 = i10 + 24 | 0;
   i22 = i10 + 40 | 0;
   i23 = i10 + 44 | 0;
   i24 = i10 + 48 | 0;
   i25 = i10 + 52 | 0;
   i26 = i10 + 56 | 0;
   i27 = i10 + 60 | 0;
   i28 = i5;
   i5 = HEAP32[i9 >> 2] | 0;
   i29 = i6;
   while (1) {
    i6 = HEAP32[i7 >> 2] | 0;
    if ((i6 | 0) > (i5 | 0)) {
     i30 = i29;
     i31 = i5;
    } else {
     f13 = Math_fround(i28 | 0);
     f11 = Math_fround(f13 * Math_fround(0.0));
     i32 = i6;
     while (1) {
      f17 = Math_fround(i32 | 0);
      HEAP32[i10 >> 2] = 1065353216;
      HEAP32[i12 >> 2] = 0;
      HEAP32[i12 + 4 >> 2] = 0;
      HEAP32[i12 + 8 >> 2] = 0;
      HEAP32[i12 + 12 >> 2] = 0;
      HEAP32[i20 >> 2] = 1065353216;
      HEAP32[i21 >> 2] = 0;
      HEAP32[i21 + 4 >> 2] = 0;
      HEAP32[i21 + 8 >> 2] = 0;
      HEAP32[i21 + 12 >> 2] = 0;
      HEAP32[i22 >> 2] = 1065353216;
      HEAPF32[i23 >> 2] = Math_fround(0.0);
      f15 = Math_fround(f17 * Math_fround(0.0));
      f16 = Math_fround(f11 + f15);
      f14 = Math_fround(Math_fround(f15 + f13) + Math_fround(0.0));
      f15 = Math_fround(Math_fround(f11 + f17) + Math_fround(0.0));
      f17 = Math_fround(Math_fround(f16 + Math_fround(.200000003)) + Math_fround(0.0));
      f19 = Math_fround(Math_fround(f16 + Math_fround(0.0)) + Math_fround(1.0));
      HEAPF32[i24 >> 2] = f14;
      HEAPF32[i25 >> 2] = f15;
      HEAPF32[i26 >> 2] = f17;
      HEAPF32[i27 >> 2] = f19;
      i6 = i2;
      i33 = i10;
      i34 = i6 + 64 | 0;
      do {
       HEAP32[i6 >> 2] = HEAP32[i33 >> 2];
       i6 = i6 + 4 | 0;
       i33 = i33 + 4 | 0;
      } while ((i6 | 0) < (i34 | 0));
      __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(5841960, i2);
      i35 = HEAP32[i9 >> 2] | 0;
      if ((i32 | 0) < (i35 | 0)) i32 = i32 + 1 | 0; else break;
     }
     i30 = HEAP32[i8 >> 2] | 0;
     i31 = i35;
    }
    if ((i28 | 0) < (i30 | 0)) {
     i28 = i28 + 1 | 0;
     i5 = i31;
     i29 = i30;
    } else break;
   }
  }
 }
 i30 = HEAP32[i3 >> 2] | 0;
 if (i30 | 0) {
  i29 = HEAP32[i4 >> 2] | 0;
  if ((i29 | 0) == (i30 | 0)) i36 = i30; else {
   i31 = i29;
   while (1) {
    i29 = i31 + -12 | 0;
    HEAP32[i4 >> 2] = i29;
    if ((HEAP8[i29 + 11 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[i29 >> 2] | 0);
     i37 = HEAP32[i4 >> 2] | 0;
    } else i37 = i29;
    if ((i37 | 0) == (i30 | 0)) break; else i31 = i37;
   }
   i36 = HEAP32[i3 >> 2] | 0;
  }
  __ZdlPv(i36);
 }
 STACKTOP = i1;
 return;
}

function _png_image_read_background(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0;
 i2 = 0;
 i3 = HEAP32[i1 >> 2] | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 i6 = HEAP32[i4 + 4 >> 2] | 0;
 i4 = HEAP32[i3 + 12 >> 2] | 0;
 i7 = HEAP32[i3 + 8 >> 2] | 0;
 i8 = HEAP32[i5 + 216 >> 2] | 0;
 if (!(i8 & 6291456)) _png_error(i5, 65336);
 if (i8 & 128 | 0) _png_error(i5, 65353);
 if ((_png_get_channels(i5, i6) | 0) << 24 >> 24 != 2) _png_error(i5, 65372);
 i8 = HEAP32[i3 + 16 >> 2] | 0;
 if ((i8 & 5 | 0) == 1) _png_error(i5, 65393);
 i3 = i5 + 432 | 0;
 i9 = HEAP8[i3 >> 0] | 0;
 switch (i9 << 24 >> 24) {
 case 0:
  {
   i10 = 1;
   break;
  }
 case 1:
  {
   i10 = 7;
   break;
  }
 default:
  _png_error(i5, 65425);
 }
 switch (HEAP8[i6 + 24 >> 0] | 0) {
 case 8:
  {
   i6 = HEAP32[i1 + 24 >> 2] | 0;
   i11 = HEAP32[i1 + 28 >> 2] | 0;
   i12 = i7 + -1 | 0;
   i13 = i1 + 16 | 0;
   i14 = i1 + 20 | 0;
   i15 = 0;
   i16 = i9;
   while (1) {
    if (i16 << 24 >> 24 == 1) {
     i17 = 7 - i15 >> 1;
     i18 = (i15 | 0) > 1 ? i17 : 3;
     i19 = i15 & 1;
     i20 = i19 << 3 - (i15 + 1 >> 1) & 7;
     if ((i12 + (1 << i18) - i20 | 0) >>> i18 | 0) {
      i21 = i20;
      i22 = 1 << i17;
      i23 = (i15 | 0) > 2 ? 8 >>> (i15 + -1 >> 1) : 8;
      i24 = (i19 ^ 1) << 3 - (i15 >> 1) & 7;
      i2 = 18;
     }
    } else {
     i21 = 0;
     i22 = 1;
     i23 = 1;
     i24 = 0;
     i2 = 18;
    }
    do if ((i2 | 0) == 18) {
     i2 = 0;
     i19 = HEAP32[i13 >> 2] | 0;
     if (!i19) {
      if (i24 >>> 0 >= i4 >>> 0) break;
      i17 = (i21 | 0) < (i7 | 0);
      i20 = i24;
      do {
       i18 = HEAP32[i14 >> 2] | 0;
       i25 = i6 + (Math_imul(i20, i11) | 0) | 0;
       i26 = i25 + i7 | 0;
       _png_read_row(i5, i18, 0);
       if (i17) {
        i27 = i18;
        i18 = i25 + i21 | 0;
        while (1) {
         i25 = HEAP8[i27 + 1 >> 0] | 0;
         i28 = i25 & 255;
         if (i25 << 24 >> 24) {
          i29 = HEAPU8[i27 >> 0] | 0;
          if (i25 << 24 >> 24 == -1) i30 = i29; else {
           i25 = Math_imul(HEAPU16[21338 + (i29 << 1) >> 1] | 0, i28) | 0;
           i29 = (Math_imul(i28 ^ 255, HEAPU16[21338 + (HEAPU8[i18 >> 0] << 1) >> 1] | 0) | 0) + i25 | 0;
           i25 = i29 >>> 15;
           i30 = (((Math_imul(i29 & 32767, HEAPU8[58335 + i25 >> 0] | 0) | 0) >>> 12) + (HEAPU16[21850 + (i25 << 1) >> 1] | 0) | 0) >>> 8 & 255;
          }
          HEAP8[i18 >> 0] = i30;
         }
         i18 = i18 + i22 | 0;
         if (i18 >>> 0 >= i26 >>> 0) break; else i27 = i27 + 2 | 0;
        }
       }
       i20 = i20 + i23 | 0;
      } while (i20 >>> 0 < i4 >>> 0);
     } else {
      i20 = HEAP8[i19 + 1 >> 0] | 0;
      if (i24 >>> 0 >= i4 >>> 0) break;
      i17 = HEAPU16[21338 + ((i20 & 255) << 1) >> 1] | 0;
      i27 = (i21 | 0) < (i7 | 0);
      i26 = i24;
      do {
       i18 = HEAP32[i14 >> 2] | 0;
       i25 = i6 + (Math_imul(i26, i11) | 0) | 0;
       i29 = i25 + i7 | 0;
       _png_read_row(i5, i18, 0);
       if (i27) {
        i28 = i25 + i21 | 0;
        i25 = i18;
        while (1) {
         i18 = HEAP8[i25 + 1 >> 0] | 0;
         i31 = i18 & 255;
         if (!(i18 << 24 >> 24)) i32 = i20; else {
          i33 = HEAPU8[i25 >> 0] | 0;
          if (i18 << 24 >> 24 == -1) i34 = i33; else {
           i18 = (Math_imul(HEAPU16[21338 + (i33 << 1) >> 1] | 0, i31) | 0) + (Math_imul(i31 ^ 255, i17) | 0) | 0;
           i31 = i18 >>> 15;
           i34 = (((Math_imul(i18 & 32767, HEAPU8[58335 + i31 >> 0] | 0) | 0) >>> 12) + (HEAPU16[21850 + (i31 << 1) >> 1] | 0) | 0) >>> 8 & 255;
          }
          i32 = i34 & 255;
         }
         HEAP8[i28 >> 0] = i32;
         i28 = i28 + i22 | 0;
         if (i28 >>> 0 >= i29 >>> 0) break; else i25 = i25 + 2 | 0;
        }
       }
       i26 = i26 + i23 | 0;
      } while (i26 >>> 0 < i4 >>> 0);
     }
    } while (0);
    i26 = i15 + 1 | 0;
    if ((i26 | 0) >= (i10 | 0)) break;
    i15 = i26;
    i16 = HEAP8[i3 >> 0] | 0;
   }
   return 1;
  }
 case 16:
  {
   i16 = HEAP32[i1 + 24 >> 2] | 0;
   i15 = (HEAP32[i1 + 28 >> 2] | 0) / 2 | 0;
   i23 = i8 & 1;
   i22 = (i23 | 0) == 0;
   i32 = i23 + 1 | 0;
   i23 = (i8 & 33 | 0) == 33 & 1;
   i8 = i7 + -1 | 0;
   i34 = Math_imul(i32, i7) | 0;
   i7 = i1 + 20 | 0;
   i1 = i23 ^ 1;
   i21 = 0;
   i11 = i9;
   while (1) {
    if (i11 << 24 >> 24 == 1) {
     i9 = 7 - i21 >> 1;
     i6 = (i21 | 0) > 1 ? i9 : 3;
     i14 = i21 & 1;
     i24 = i14 << 3 - (i21 + 1 >> 1) & 7;
     if ((i8 + (1 << i6) - i24 | 0) >>> i6 | 0) {
      i6 = Math_imul(i24, i32) | 0;
      i35 = (i14 ^ 1) << 3 - (i21 >> 1) & 7;
      i36 = (i21 | 0) > 2 ? 8 >>> (i21 + -1 >> 1) : 8;
      i37 = i32 << i9;
      i38 = i6;
      i2 = 45;
     }
    } else {
     i35 = 0;
     i36 = 1;
     i37 = i32;
     i38 = 0;
     i2 = 45;
    }
    if ((i2 | 0) == 45) {
     i2 = 0;
     if (i35 >>> 0 < i4 >>> 0) {
      i6 = (i38 | 0) < (i34 | 0);
      if (i22) {
       i9 = i35;
       do {
        i14 = i16 + ((Math_imul(i9, i15) | 0) << 1) | 0;
        i24 = i14 + (i34 << 1) | 0;
        _png_read_row(i5, HEAP32[i7 >> 2] | 0, 0);
        L73 : do if (i6) {
         i30 = i14 + (i38 << 1) | 0;
         i13 = HEAP32[i7 >> 2] | 0;
         while (1) {
          i12 = HEAPU16[i13 >> 1] | 0;
          i26 = HEAP16[i13 + 2 >> 1] | 0;
          switch (i26 << 16 >> 16) {
          case 0:
           {
            i39 = 0;
            break;
           }
          case -1:
           {
            i39 = i12;
            break;
           }
          default:
           i39 = (((Math_imul(i26 & 65535, i12) | 0) + 32767 | 0) >>> 0) / 65535 | 0;
          }
          HEAP16[i30 + (i23 << 1) >> 1] = i39;
          i30 = i30 + (i37 << 1) | 0;
          if (i30 >>> 0 >= i24 >>> 0) break L73; else i13 = i13 + 4 | 0;
         }
        } while (0);
        i9 = i9 + i36 | 0;
       } while (i9 >>> 0 < i4 >>> 0);
      } else {
       i9 = i35;
       do {
        i24 = i16 + ((Math_imul(i9, i15) | 0) << 1) | 0;
        i14 = i24 + (i34 << 1) | 0;
        _png_read_row(i5, HEAP32[i7 >> 2] | 0, 0);
        L84 : do if (i6) {
         i13 = i24 + (i38 << 1) | 0;
         i30 = HEAP32[i7 >> 2] | 0;
         while (1) {
          i12 = HEAPU16[i30 >> 1] | 0;
          i26 = HEAP16[i30 + 2 >> 1] | 0;
          switch (i26 << 16 >> 16) {
          case 0:
           {
            i40 = 0;
            break;
           }
          case -1:
           {
            i40 = i12;
            break;
           }
          default:
           i40 = (((Math_imul(i26 & 65535, i12) | 0) + 32767 | 0) >>> 0) / 65535 | 0;
          }
          HEAP16[i13 + (i23 << 1) >> 1] = i40;
          HEAP16[i13 + (i1 << 1) >> 1] = i26;
          i13 = i13 + (i37 << 1) | 0;
          if (i13 >>> 0 >= i14 >>> 0) break L84; else i30 = i30 + 4 | 0;
         }
        } while (0);
        i9 = i9 + i36 | 0;
       } while (i9 >>> 0 < i4 >>> 0);
      }
     }
    }
    i9 = i21 + 1 | 0;
    if ((i9 | 0) >= (i10 | 0)) break;
    i21 = i9;
    i11 = HEAP8[i3 >> 0] | 0;
   }
   return 1;
  }
 default:
  _png_error(i5, 65448);
 }
 return 0;
}

function _dispose_chunk(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0;
 i3 = 0;
 i4 = i1 + i2 | 0;
 i5 = HEAP32[i1 + 4 >> 2] | 0;
 do if (!(i5 & 1)) {
  i6 = HEAP32[i1 >> 2] | 0;
  if (!(i5 & 3)) return;
  i7 = i1 + (0 - i6) | 0;
  i8 = i6 + i2 | 0;
  if ((HEAP32[1460885] | 0) == (i7 | 0)) {
   i9 = i4 + 4 | 0;
   i10 = HEAP32[i9 >> 2] | 0;
   if ((i10 & 3 | 0) != 3) {
    i11 = i7;
    i12 = i8;
    break;
   }
   HEAP32[1460882] = i8;
   HEAP32[i9 >> 2] = i10 & -2;
   HEAP32[i7 + 4 >> 2] = i8 | 1;
   HEAP32[i4 >> 2] = i8;
   return;
  }
  i10 = i6 >>> 3;
  if (i6 >>> 0 < 256) {
   i6 = HEAP32[i7 + 8 >> 2] | 0;
   i9 = HEAP32[i7 + 12 >> 2] | 0;
   if ((i9 | 0) == (i6 | 0)) {
    HEAP32[1460880] = HEAP32[1460880] & ~(1 << i10);
    i11 = i7;
    i12 = i8;
    break;
   } else {
    HEAP32[i6 + 12 >> 2] = i9;
    HEAP32[i9 + 8 >> 2] = i6;
    i11 = i7;
    i12 = i8;
    break;
   }
  }
  i6 = HEAP32[i7 + 24 >> 2] | 0;
  i9 = HEAP32[i7 + 12 >> 2] | 0;
  do if ((i9 | 0) == (i7 | 0)) {
   i10 = i7 + 16 | 0;
   i13 = i10 + 4 | 0;
   i14 = HEAP32[i13 >> 2] | 0;
   if (!i14) {
    i15 = HEAP32[i10 >> 2] | 0;
    if (!i15) {
     i16 = 0;
     break;
    } else {
     i17 = i15;
     i18 = i10;
    }
   } else {
    i17 = i14;
    i18 = i13;
   }
   while (1) {
    i13 = i17 + 20 | 0;
    i14 = HEAP32[i13 >> 2] | 0;
    if (i14 | 0) {
     i17 = i14;
     i18 = i13;
     continue;
    }
    i13 = i17 + 16 | 0;
    i14 = HEAP32[i13 >> 2] | 0;
    if (!i14) break; else {
     i17 = i14;
     i18 = i13;
    }
   }
   HEAP32[i18 >> 2] = 0;
   i16 = i17;
  } else {
   i13 = HEAP32[i7 + 8 >> 2] | 0;
   HEAP32[i13 + 12 >> 2] = i9;
   HEAP32[i9 + 8 >> 2] = i13;
   i16 = i9;
  } while (0);
  if (!i6) {
   i11 = i7;
   i12 = i8;
  } else {
   i9 = HEAP32[i7 + 28 >> 2] | 0;
   i13 = 5843824 + (i9 << 2) | 0;
   if ((HEAP32[i13 >> 2] | 0) == (i7 | 0)) {
    HEAP32[i13 >> 2] = i16;
    if (!i16) {
     HEAP32[1460881] = HEAP32[1460881] & ~(1 << i9);
     i11 = i7;
     i12 = i8;
     break;
    }
   } else {
    HEAP32[i6 + 16 + (((HEAP32[i6 + 16 >> 2] | 0) != (i7 | 0) & 1) << 2) >> 2] = i16;
    if (!i16) {
     i11 = i7;
     i12 = i8;
     break;
    }
   }
   HEAP32[i16 + 24 >> 2] = i6;
   i9 = i7 + 16 | 0;
   i13 = HEAP32[i9 >> 2] | 0;
   if (i13 | 0) {
    HEAP32[i16 + 16 >> 2] = i13;
    HEAP32[i13 + 24 >> 2] = i16;
   }
   i13 = HEAP32[i9 + 4 >> 2] | 0;
   if (!i13) {
    i11 = i7;
    i12 = i8;
   } else {
    HEAP32[i16 + 20 >> 2] = i13;
    HEAP32[i13 + 24 >> 2] = i16;
    i11 = i7;
    i12 = i8;
   }
  }
 } else {
  i11 = i1;
  i12 = i2;
 } while (0);
 i2 = i4 + 4 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if (!(i1 & 2)) {
  if ((HEAP32[1460886] | 0) == (i4 | 0)) {
   i16 = (HEAP32[1460883] | 0) + i12 | 0;
   HEAP32[1460883] = i16;
   HEAP32[1460886] = i11;
   HEAP32[i11 + 4 >> 2] = i16 | 1;
   if ((i11 | 0) != (HEAP32[1460885] | 0)) return;
   HEAP32[1460885] = 0;
   HEAP32[1460882] = 0;
   return;
  }
  if ((HEAP32[1460885] | 0) == (i4 | 0)) {
   i16 = (HEAP32[1460882] | 0) + i12 | 0;
   HEAP32[1460882] = i16;
   HEAP32[1460885] = i11;
   HEAP32[i11 + 4 >> 2] = i16 | 1;
   HEAP32[i11 + i16 >> 2] = i16;
   return;
  }
  i16 = (i1 & -8) + i12 | 0;
  i17 = i1 >>> 3;
  do if (i1 >>> 0 < 256) {
   i18 = HEAP32[i4 + 8 >> 2] | 0;
   i5 = HEAP32[i4 + 12 >> 2] | 0;
   if ((i5 | 0) == (i18 | 0)) {
    HEAP32[1460880] = HEAP32[1460880] & ~(1 << i17);
    break;
   } else {
    HEAP32[i18 + 12 >> 2] = i5;
    HEAP32[i5 + 8 >> 2] = i18;
    break;
   }
  } else {
   i18 = HEAP32[i4 + 24 >> 2] | 0;
   i5 = HEAP32[i4 + 12 >> 2] | 0;
   do if ((i5 | 0) == (i4 | 0)) {
    i13 = i4 + 16 | 0;
    i9 = i13 + 4 | 0;
    i14 = HEAP32[i9 >> 2] | 0;
    if (!i14) {
     i10 = HEAP32[i13 >> 2] | 0;
     if (!i10) {
      i19 = 0;
      break;
     } else {
      i20 = i10;
      i21 = i13;
     }
    } else {
     i20 = i14;
     i21 = i9;
    }
    while (1) {
     i9 = i20 + 20 | 0;
     i14 = HEAP32[i9 >> 2] | 0;
     if (i14 | 0) {
      i20 = i14;
      i21 = i9;
      continue;
     }
     i9 = i20 + 16 | 0;
     i14 = HEAP32[i9 >> 2] | 0;
     if (!i14) break; else {
      i20 = i14;
      i21 = i9;
     }
    }
    HEAP32[i21 >> 2] = 0;
    i19 = i20;
   } else {
    i9 = HEAP32[i4 + 8 >> 2] | 0;
    HEAP32[i9 + 12 >> 2] = i5;
    HEAP32[i5 + 8 >> 2] = i9;
    i19 = i5;
   } while (0);
   if (i18 | 0) {
    i5 = HEAP32[i4 + 28 >> 2] | 0;
    i8 = 5843824 + (i5 << 2) | 0;
    if ((HEAP32[i8 >> 2] | 0) == (i4 | 0)) {
     HEAP32[i8 >> 2] = i19;
     if (!i19) {
      HEAP32[1460881] = HEAP32[1460881] & ~(1 << i5);
      break;
     }
    } else {
     HEAP32[i18 + 16 + (((HEAP32[i18 + 16 >> 2] | 0) != (i4 | 0) & 1) << 2) >> 2] = i19;
     if (!i19) break;
    }
    HEAP32[i19 + 24 >> 2] = i18;
    i5 = i4 + 16 | 0;
    i8 = HEAP32[i5 >> 2] | 0;
    if (i8 | 0) {
     HEAP32[i19 + 16 >> 2] = i8;
     HEAP32[i8 + 24 >> 2] = i19;
    }
    i8 = HEAP32[i5 + 4 >> 2] | 0;
    if (i8 | 0) {
     HEAP32[i19 + 20 >> 2] = i8;
     HEAP32[i8 + 24 >> 2] = i19;
    }
   }
  } while (0);
  HEAP32[i11 + 4 >> 2] = i16 | 1;
  HEAP32[i11 + i16 >> 2] = i16;
  if ((i11 | 0) == (HEAP32[1460885] | 0)) {
   HEAP32[1460882] = i16;
   return;
  } else i22 = i16;
 } else {
  HEAP32[i2 >> 2] = i1 & -2;
  HEAP32[i11 + 4 >> 2] = i12 | 1;
  HEAP32[i11 + i12 >> 2] = i12;
  i22 = i12;
 }
 i12 = i22 >>> 3;
 if (i22 >>> 0 < 256) {
  i1 = 5843560 + (i12 << 1 << 2) | 0;
  i2 = HEAP32[1460880] | 0;
  i16 = 1 << i12;
  if (!(i2 & i16)) {
   HEAP32[1460880] = i2 | i16;
   i23 = i1;
   i24 = i1 + 8 | 0;
  } else {
   i16 = i1 + 8 | 0;
   i23 = HEAP32[i16 >> 2] | 0;
   i24 = i16;
  }
  HEAP32[i24 >> 2] = i11;
  HEAP32[i23 + 12 >> 2] = i11;
  HEAP32[i11 + 8 >> 2] = i23;
  HEAP32[i11 + 12 >> 2] = i1;
  return;
 }
 i1 = i22 >>> 8;
 if (!i1) i25 = 0; else if (i22 >>> 0 > 16777215) i25 = 31; else {
  i23 = (i1 + 1048320 | 0) >>> 16 & 8;
  i24 = i1 << i23;
  i1 = (i24 + 520192 | 0) >>> 16 & 4;
  i16 = i24 << i1;
  i24 = (i16 + 245760 | 0) >>> 16 & 2;
  i2 = 14 - (i1 | i23 | i24) + (i16 << i24 >>> 15) | 0;
  i25 = i22 >>> (i2 + 7 | 0) & 1 | i2 << 1;
 }
 i2 = 5843824 + (i25 << 2) | 0;
 HEAP32[i11 + 28 >> 2] = i25;
 HEAP32[i11 + 20 >> 2] = 0;
 HEAP32[i11 + 16 >> 2] = 0;
 i24 = HEAP32[1460881] | 0;
 i16 = 1 << i25;
 if (!(i24 & i16)) {
  HEAP32[1460881] = i24 | i16;
  HEAP32[i2 >> 2] = i11;
  HEAP32[i11 + 24 >> 2] = i2;
  HEAP32[i11 + 12 >> 2] = i11;
  HEAP32[i11 + 8 >> 2] = i11;
  return;
 }
 i16 = i22 << ((i25 | 0) == 31 ? 0 : 25 - (i25 >>> 1) | 0);
 i25 = HEAP32[i2 >> 2] | 0;
 while (1) {
  if ((HEAP32[i25 + 4 >> 2] & -8 | 0) == (i22 | 0)) {
   i3 = 69;
   break;
  }
  i26 = i25 + 16 + (i16 >>> 31 << 2) | 0;
  i2 = HEAP32[i26 >> 2] | 0;
  if (!i2) {
   i3 = 68;
   break;
  } else {
   i16 = i16 << 1;
   i25 = i2;
  }
 }
 if ((i3 | 0) == 68) {
  HEAP32[i26 >> 2] = i11;
  HEAP32[i11 + 24 >> 2] = i25;
  HEAP32[i11 + 12 >> 2] = i11;
  HEAP32[i11 + 8 >> 2] = i11;
  return;
 } else if ((i3 | 0) == 69) {
  i3 = i25 + 8 | 0;
  i26 = HEAP32[i3 >> 2] | 0;
  HEAP32[i26 + 12 >> 2] = i11;
  HEAP32[i3 >> 2] = i11;
  HEAP32[i11 + 8 >> 2] = i26;
  HEAP32[i11 + 12 >> 2] = i25;
  HEAP32[i11 + 24 >> 2] = 0;
  return;
 }
}

function __ZN5ImGui8ButtonExEPKcRK6ImVec2i(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, f21 = f0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, f26 = f0, f27 = f0, f28 = f0, f29 = f0, f30 = f0, f31 = f0, i32 = 0, i33 = 0, i34 = 0, i35 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 i6 = i5 + 48 | 0;
 i7 = i5 + 64 | 0;
 i8 = i5 + 32 | 0;
 i9 = i5 + 56 | 0;
 i10 = i5 + 40 | 0;
 i11 = i5 + 16 | 0;
 i12 = i5 + 73 | 0;
 i13 = i5 + 72 | 0;
 i14 = i5 + 8 | 0;
 i15 = i5;
 i16 = HEAP32[1460598] | 0;
 i17 = HEAP32[i16 + 6392 >> 2] | 0;
 HEAP8[i17 + 120 >> 0] = 1;
 if (HEAP8[i17 + 123 >> 0] | 0) {
  i18 = 0;
  STACKTOP = i5;
  return i18 | 0;
 }
 i19 = HEAP32[i17 + 452 >> 2] | 0;
 if ((i19 | 0) <= 0) ___assert_fail(38278, 56850, 1245, 38287);
 i20 = __Z6ImHashPKvij(i1, 0, HEAP32[(HEAP32[i17 + 460 >> 2] | 0) + (i19 + -1 << 2) >> 2] | 0) | 0;
 i19 = HEAP32[1460598] | 0;
 if ((HEAP32[i19 + 6420 >> 2] | 0) == (i20 | 0)) HEAP8[i19 + 6432 >> 0] = 1;
 if ((HEAP32[i19 + 6424 >> 2] | 0) == (i20 | 0)) HEAP8[i19 + 6436 >> 0] = 1;
 if ((i1 | 0) == (-1 | 0)) {
  f21 = Math_fround(HEAPF32[i19 + 6184 >> 2]);
  i4 = 15;
 } else {
  i22 = i1;
  L15 : while (1) {
   switch (HEAP8[i22 >> 0] | 0) {
   case 0:
    {
     i23 = i22;
     break L15;
     break;
    }
   case 35:
    {
     i24 = i22 + 1 | 0;
     if ((HEAP8[i24 >> 0] | 0) == 35) {
      i23 = i22;
      break L15;
     } else i25 = i24;
     break;
    }
   default:
    i25 = i22 + 1 | 0;
   }
   if ((i25 | 0) == (-1 | 0)) {
    i23 = -1;
    break;
   } else i22 = i25;
  }
  i25 = HEAP32[i19 + 6180 >> 2] | 0;
  f26 = Math_fround(HEAPF32[i19 + 6184 >> 2]);
  if ((i23 | 0) == (i1 | 0)) {
   f21 = f26;
   i4 = 15;
  } else {
   __ZNK6ImFont13CalcTextSizeAEfffPKcS1_PS1_(i6, i25, f26, Math_fround(3402823469999999843913219.0e14), Math_fround(-1.0), i1, i23, 0);
   f27 = Math_fround(HEAPF32[i6 >> 2]);
   if (f27 > Math_fround(0.0)) {
    f28 = Math_fround(f27 - Math_fround(f26 / Math_fround(HEAPF32[i25 >> 2])));
    HEAPF32[i6 >> 2] = f28;
    f29 = f28;
   } else f29 = f27;
   f27 = Math_fround(~~Math_fround(f29 + Math_fround(.949999988)) | 0);
   HEAPF32[i6 >> 2] = f27;
   i25 = i6;
   i23 = HEAP32[i25 >> 2] | 0;
   i19 = HEAP32[i25 + 4 >> 2] | 0;
   i25 = i8;
   HEAP32[i25 >> 2] = i23;
   HEAP32[i25 + 4 >> 2] = i19;
   f27 = (HEAP32[tempDoublePtr >> 2] = i23, Math_fround(HEAPF32[tempDoublePtr >> 2]));
   f30 = (HEAP32[tempDoublePtr >> 2] = i19, Math_fround(HEAPF32[tempDoublePtr >> 2]));
   f31 = f27;
  }
 }
 if ((i4 | 0) == 15) {
  HEAPF32[i8 >> 2] = Math_fround(0.0);
  HEAPF32[i8 + 4 >> 2] = f21;
  f30 = f21;
  f31 = Math_fround(0.0);
 }
 i4 = HEAP32[i17 + 196 >> 2] | 0;
 i19 = HEAP32[i17 + 200 >> 2] | 0;
 i23 = i16 + 5412 | 0;
 f21 = Math_fround(HEAPF32[i23 >> 2]);
 if (!(i3 & 512)) i32 = i19; else {
  f27 = Math_fround(HEAPF32[i17 + 232 >> 2]);
  if (f21 < f27) {
   f29 = Math_fround(f27 - f21);
   f27 = Math_fround(f29 + (HEAP32[tempDoublePtr >> 2] = i19, Math_fround(HEAPF32[tempDoublePtr >> 2])));
   i32 = (HEAPF32[tempDoublePtr >> 2] = f27, HEAP32[tempDoublePtr >> 2] | 0);
  } else i32 = i19;
 }
 i19 = i2;
 i2 = HEAP32[i19 + 4 >> 2] | 0;
 i25 = i10;
 HEAP32[i25 >> 2] = HEAP32[i19 >> 2];
 HEAP32[i25 + 4 >> 2] = i2;
 i2 = i16 + 5408 | 0;
 f27 = Math_fround(f31 + Math_fround(Math_fround(HEAPF32[i2 >> 2]) * Math_fround(2.0)));
 f31 = Math_fround(f30 + Math_fround(f21 * Math_fround(2.0)));
 HEAP32[i6 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
 __ZN5ImGui12CalcItemSizeE6ImVec2ff(i9, i6, f27, f31);
 f31 = (HEAP32[tempDoublePtr >> 2] = i4, Math_fround(HEAPF32[tempDoublePtr >> 2]));
 f27 = Math_fround(Math_fround(HEAPF32[i9 >> 2]) + f31);
 f21 = (HEAP32[tempDoublePtr >> 2] = i32, Math_fround(HEAPF32[tempDoublePtr >> 2]));
 f30 = Math_fround(Math_fround(HEAPF32[i9 + 4 >> 2]) + f21);
 HEAP32[i11 >> 2] = i4;
 i4 = i11 + 4 | 0;
 HEAP32[i4 >> 2] = i32;
 i32 = i11 + 8 | 0;
 HEAPF32[i32 >> 2] = f27;
 i9 = i11 + 12 | 0;
 HEAPF32[i9 >> 2] = f30;
 f29 = Math_fround(HEAPF32[i23 >> 2]);
 f28 = Math_fround(f27 - f31);
 f31 = Math_fround(f30 - f21);
 HEAPF32[i6 >> 2] = f28;
 HEAPF32[i6 + 4 >> 2] = f31;
 __ZN5ImGui8ItemSizeERK6ImVec2f(i6, f29);
 if (__ZN5ImGui7ItemAddERK6ImRectjPS1_(i11, i20, 0) | 0) {
  i10 = __ZN5ImGui14ButtonBehaviorERK6ImRectjPbS3_i(i11, i20, i12, i13, (HEAP32[i17 + 352 >> 2] | 0) >>> 1 & 1 | i3) | 0;
  i3 = HEAP32[1460598] | 0;
  do if (i10) {
   i17 = HEAP32[i3 + 6420 >> 2] | 0;
   if ((i17 | 0) == (i20 | 0) | (i17 | 0) == 0) {
    HEAP8[i3 + 6435 >> 0] = 1;
    break;
   } else ___assert_fail(32628, 31803, 2259, 32664);
  } while (0);
  i17 = HEAP8[i12 >> 0] | 0;
  i12 = i17 << 24 >> 24 | 0;
  i17 = (i12 | 0) == 0 | (HEAP8[i13 >> 0] | 0) == 0 ? (i12 | 0 ? 22 : 21) : 23;
  i12 = i3 + 5508 + (i17 << 4) | 0;
  f29 = Math_fround(HEAPF32[i12 >> 2]);
  f31 = Math_fround(HEAPF32[i12 + 4 >> 2]);
  f28 = Math_fround(HEAPF32[i12 + 8 >> 2]);
  f21 = Math_fround(HEAPF32[i12 + 12 >> 2]);
  f30 = Math_fround(f21 * Math_fround(HEAPF32[i3 + 5356 >> 2]));
  i3 = f29 < Math_fround(0.0);
  i12 = f29 > Math_fround(1.0);
  i17 = ~~Math_fround(Math_fround((i12 ? Math_fround(1.0) : f29) * Math_fround(255.0)) + Math_fround(.5));
  i12 = f31 < Math_fround(0.0);
  i13 = f31 > Math_fround(1.0);
  i25 = ~~Math_fround(Math_fround((i13 ? Math_fround(1.0) : f31) * Math_fround(255.0)) + Math_fround(.5)) << 8;
  i13 = f28 < Math_fround(0.0);
  i19 = f28 > Math_fround(1.0);
  i22 = ~~Math_fround(Math_fround((i19 ? Math_fround(1.0) : f28) * Math_fround(255.0)) + Math_fround(.5)) << 16;
  i19 = f30 < Math_fround(0.0);
  i24 = f30 > Math_fround(1.0);
  i33 = ~~Math_fround(Math_fround((i24 ? Math_fround(1.0) : f30) * Math_fround(255.0)) + Math_fround(.5)) << 24;
  __ZN5ImGui18RenderNavHighlightERK6ImRectji(i11, i20, 1);
  i20 = i11;
  i24 = HEAP32[i20 >> 2] | 0;
  i34 = HEAP32[i20 + 4 >> 2] | 0;
  i20 = i14;
  HEAP32[i20 >> 2] = i24;
  HEAP32[i20 + 4 >> 2] = i34;
  i34 = i32;
  i32 = HEAP32[i34 >> 2] | 0;
  i20 = HEAP32[i34 + 4 >> 2] | 0;
  i34 = i15;
  HEAP32[i34 >> 2] = i32;
  HEAP32[i34 + 4 >> 2] = i20;
  f30 = Math_fround(HEAPF32[i16 + 5416 >> 2]);
  HEAP32[i7 >> 2] = HEAP32[i14 >> 2];
  HEAP32[i7 + 4 >> 2] = HEAP32[i14 + 4 >> 2];
  HEAP32[i6 >> 2] = HEAP32[i15 >> 2];
  HEAP32[i6 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
  __ZN5ImGui11RenderFrameE6ImVec2S0_jbf(i7, i6, (i12 ? 0 : i25) | (i3 ? 0 : i17) | (i13 ? 0 : i22) | (i19 ? 0 : i33), 1, f30);
  f30 = (HEAP32[tempDoublePtr >> 2] = i24, Math_fround(HEAPF32[tempDoublePtr >> 2]));
  f28 = Math_fround(HEAPF32[i2 >> 2]);
  f31 = Math_fround(f28 + f30);
  f30 = Math_fround(HEAPF32[i4 >> 2]);
  f29 = Math_fround(HEAPF32[i23 >> 2]);
  f21 = Math_fround(f30 + f29);
  HEAPF32[i6 >> 2] = f31;
  HEAPF32[i6 + 4 >> 2] = f21;
  f21 = Math_fround((HEAP32[tempDoublePtr >> 2] = i32, Math_fround(HEAPF32[tempDoublePtr >> 2])) - f28);
  f28 = Math_fround(Math_fround(HEAPF32[i9 >> 2]) - f29);
  HEAPF32[i7 >> 2] = f21;
  HEAPF32[i7 + 4 >> 2] = f28;
  __ZN5ImGui17RenderTextClippedERK6ImVec2S2_PKcS4_PS1_S2_PK6ImRect(i6, i7, i1, 0, i8, i16 + 5472 | 0, i11);
  i35 = i10;
 } else i35 = 0;
 i18 = i35;
 STACKTOP = i5;
 return i18 | 0;
}

function __ZL25FindBestWindowPosForPopupP11ImGuiWindow(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, f9 = f0, f10 = f0, i11 = 0, f12 = f0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, f23 = f0, f24 = f0, f25 = f0, f26 = f0, f27 = f0, f28 = f0, f29 = f0, f30 = f0, f31 = f0, f32 = f0, f33 = f0, f34 = f0, f35 = f0, f36 = f0, f37 = f0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i5 = i4;
 i6 = i4 + 32 | 0;
 i7 = i4 + 16 | 0;
 i8 = HEAP32[1460598] | 0;
 f9 = Math_fround(HEAPF32[i8 + 5488 >> 2]);
 f10 = Math_fround(HEAPF32[i8 + 5492 >> 2]);
 i11 = i8 + 168 | 0;
 f12 = Math_fround(HEAPF32[i11 >> 2]);
 i13 = i8 + 176 | 0;
 if (f12 != Math_fround(HEAPF32[i13 >> 2])) {
  f12 = Math_fround(HEAPF32[i8 + 172 >> 2]);
  if (f12 != Math_fround(HEAPF32[i8 + 180 >> 2])) {
   i14 = i11;
   i11 = HEAP32[i14 >> 2] | 0;
   i15 = HEAP32[i14 + 4 >> 2] | 0;
   i14 = i5;
   HEAP32[i14 >> 2] = i11;
   HEAP32[i14 + 4 >> 2] = i15;
   i14 = i13;
   i13 = HEAP32[i14 >> 2] | 0;
   i16 = HEAP32[i14 + 4 >> 2] | 0;
   i14 = i5 + 8 | 0;
   HEAP32[i14 >> 2] = i13;
   HEAP32[i14 + 4 >> 2] = i16;
   f12 = (HEAP32[tempDoublePtr >> 2] = i11, Math_fround(HEAPF32[tempDoublePtr >> 2]));
   i17 = i16;
   i18 = i13;
   i19 = i5 + 8 | 0;
   i20 = i5 + 4 | 0;
   i21 = i5;
   i22 = i5 + 12 | 0;
   f23 = f12;
   f24 = (HEAP32[tempDoublePtr >> 2] = i15, Math_fround(HEAPF32[tempDoublePtr >> 2]));
  } else i3 = 4;
 } else i3 = 4;
 if ((i3 | 0) == 4) {
  i15 = HEAP32[i8 + 12 >> 2] | 0;
  i13 = HEAP32[i8 + 16 >> 2] | 0;
  HEAPF32[i5 >> 2] = Math_fround(0.0);
  i16 = i5 + 4 | 0;
  HEAPF32[i16 >> 2] = Math_fround(0.0);
  i11 = i5 + 8 | 0;
  HEAP32[i11 >> 2] = i15;
  i14 = i5 + 12 | 0;
  HEAP32[i14 >> 2] = i13;
  i17 = i13;
  i18 = i15;
  i19 = i11;
  i20 = i16;
  i21 = i5;
  i22 = i14;
  f23 = Math_fround(0.0);
  f24 = Math_fround(0.0);
 }
 f12 = (HEAP32[tempDoublePtr >> 2] = i18, Math_fround(HEAPF32[tempDoublePtr >> 2]));
 f25 = (HEAP32[tempDoublePtr >> 2] = i17, Math_fround(HEAPF32[tempDoublePtr >> 2]));
 i17 = Math_fround(f12 - f23) > Math_fround(f9 * Math_fround(2.0));
 f26 = Math_fround(-f9);
 f9 = i17 ? f26 : Math_fround(0.0);
 i17 = Math_fround(f25 - f24) > Math_fround(f10 * Math_fround(2.0));
 f26 = Math_fround(-f10);
 f10 = i17 ? f26 : Math_fround(0.0);
 f26 = Math_fround(f23 - f9);
 HEAPF32[i21 >> 2] = f26;
 f26 = Math_fround(f24 - f10);
 HEAPF32[i20 >> 2] = f26;
 f26 = Math_fround(f9 + f12);
 HEAPF32[i19 >> 2] = f26;
 f26 = Math_fround(f10 + f25);
 HEAPF32[i22 >> 2] = f26;
 i22 = HEAP32[i2 + 8 >> 2] | 0;
 if (i22 & 268435456 | 0) {
  if ((HEAP32[i8 + 6392 >> 2] | 0) != (i2 | 0)) ___assert_fail(34166, 31803, 5638, 34192);
  i19 = HEAP32[(HEAP32[i8 + 6372 >> 2] | 0) + ((HEAP32[i8 + 6364 >> 2] | 0) + -2 << 2) >> 2] | 0;
  f26 = Math_fround(HEAPF32[i8 + 5424 >> 2]);
  HEAPF32[i6 >> 2] = Math_fround(3402823469999999843913219.0e14);
  i20 = i6 + 4 | 0;
  HEAPF32[i20 >> 2] = Math_fround(3402823469999999843913219.0e14);
  i21 = i6 + 8 | 0;
  HEAPF32[i21 >> 2] = Math_fround(-3402823469999999843913219.0e14);
  i17 = i6 + 12 | 0;
  HEAPF32[i17 >> 2] = Math_fround(-3402823469999999843913219.0e14);
  if (!(HEAP8[i19 + 316 >> 0] | 0)) {
   f25 = Math_fround(HEAPF32[i19 + 12 >> 2]);
   f10 = Math_fround(f26 + f25);
   f12 = Math_fround(Math_fround(f25 + Math_fround(HEAPF32[i19 + 20 >> 2])) - f26);
   f27 = Math_fround(3402823469999999843913219.0e14);
   f28 = Math_fround(-3402823469999999843913219.0e14);
   f29 = f10;
   f30 = Math_fround(f12 - Math_fround(HEAPF32[i19 + 108 >> 2]));
  } else {
   f12 = Math_fround(HEAPF32[i19 + 16 >> 2]);
   i18 = HEAP32[i19 + 8 >> 2] | 0;
   if (!(i18 & 1)) {
    f10 = Math_fround(HEAPF32[i8 + 6188 >> 2]);
    f26 = Math_fround(f10 * Math_fround(HEAPF32[i19 + 624 >> 2]));
    f10 = Math_fround(f26 + Math_fround(Math_fround(HEAPF32[i8 + 5412 >> 2]) * Math_fround(2.0)));
    f26 = Math_fround(HEAPF32[i8 + 6188 >> 2]);
    f25 = Math_fround(f26 * Math_fround(HEAPF32[i19 + 624 >> 2]));
    f31 = f10;
    f32 = Math_fround(f25 + Math_fround(Math_fround(HEAPF32[i8 + 5412 >> 2]) * Math_fround(2.0)));
   } else {
    f31 = Math_fround(0.0);
    f32 = Math_fround(0.0);
   }
   f25 = Math_fround(f12 + f31);
   f31 = Math_fround(f12 + f32);
   if (!(i18 & 1024)) f33 = Math_fround(0.0); else {
    f32 = Math_fround(HEAPF32[i19 + 324 >> 2]);
    f12 = Math_fround(HEAPF32[i8 + 6188 >> 2]);
    f10 = Math_fround(f32 + Math_fround(f12 * Math_fround(HEAPF32[i19 + 624 >> 2])));
    f33 = Math_fround(f10 + Math_fround(Math_fround(HEAPF32[i8 + 5412 >> 2]) * Math_fround(2.0)));
   }
   f27 = Math_fround(f31 + f33);
   f28 = f25;
   f29 = Math_fround(-3402823469999999843913219.0e14);
   f30 = Math_fround(3402823469999999843913219.0e14);
  }
  HEAPF32[i6 >> 2] = f29;
  HEAPF32[i20 >> 2] = f28;
  HEAPF32[i21 >> 2] = f30;
  HEAPF32[i17 >> 2] = f27;
  __ZL27FindBestWindowPosForPopupExRK6ImVec2S1_PiRK6ImRectS5_24ImGuiPopupPositionPolicy(i1, i2 + 12 | 0, i2 + 20 | 0, i2 + 160 | 0, i5, i6, 0);
  STACKTOP = i4;
  return;
 }
 if (i22 & 67108864 | 0) {
  i17 = i2 + 12 | 0;
  f27 = Math_fround(HEAPF32[i17 >> 2]);
  f30 = Math_fround(f27 + Math_fround(-1.0));
  f28 = Math_fround(HEAPF32[i2 + 16 >> 2]);
  f29 = Math_fround(f28 + Math_fround(-1.0));
  f25 = Math_fround(f27 + Math_fround(1.0));
  f27 = Math_fround(f28 + Math_fround(1.0));
  HEAPF32[i6 >> 2] = f30;
  HEAPF32[i6 + 4 >> 2] = f29;
  HEAPF32[i6 + 8 >> 2] = f25;
  HEAPF32[i6 + 12 >> 2] = f27;
  __ZL27FindBestWindowPosForPopupExRK6ImVec2S1_PiRK6ImRectS5_24ImGuiPopupPositionPolicy(i1, i17, i2 + 20 | 0, i2 + 160 | 0, i5, i6, 0);
  STACKTOP = i4;
  return;
 }
 if (!(i22 & 33554432)) ___assert_fail(54909, 31803, 5668, 34192);
 f27 = Math_fround(HEAPF32[i8 + 5496 >> 2]);
 __ZL22NavCalcPreferredRefPosv(i6);
 HEAPF32[i7 >> 2] = Math_fround(3402823469999999843913219.0e14);
 i22 = i7 + 4 | 0;
 HEAPF32[i22 >> 2] = Math_fround(3402823469999999843913219.0e14);
 i17 = i7 + 8 | 0;
 HEAPF32[i17 >> 2] = Math_fround(-3402823469999999843913219.0e14);
 i21 = i7 + 12 | 0;
 HEAPF32[i21 >> 2] = Math_fround(-3402823469999999843913219.0e14);
 if (!(HEAP8[i8 + 6730 >> 0] | 0)) if (!(HEAP8[i8 + 6731 >> 0] | 0)) i3 = 23; else if (!(HEAP32[i8 + 4 >> 2] & 4)) {
  f25 = Math_fround(HEAPF32[i6 >> 2]);
  f29 = Math_fround(HEAPF32[i6 + 4 >> 2]);
  f34 = Math_fround(f29 + Math_fround(8.0));
  f35 = Math_fround(f25 + Math_fround(16.0));
  f36 = f29;
  f37 = f25;
 } else i3 = 23; else i3 = 23;
 if ((i3 | 0) == 23) {
  f25 = Math_fround(HEAPF32[i6 >> 2]);
  f29 = Math_fround(HEAPF32[i6 + 4 >> 2]);
  f30 = Math_fround(f27 * Math_fround(24.0));
  f34 = Math_fround(f30 + f29);
  f35 = Math_fround(f30 + f25);
  f36 = f29;
  f37 = f25;
 }
 f25 = Math_fround(f36 + Math_fround(-8.0));
 f29 = Math_fround(f37 + Math_fround(-16.0));
 HEAPF32[i7 >> 2] = f29;
 HEAPF32[i22 >> 2] = f25;
 HEAPF32[i17 >> 2] = f35;
 HEAPF32[i21 >> 2] = f34;
 i21 = i2 + 160 | 0;
 __ZL27FindBestWindowPosForPopupExRK6ImVec2S1_PiRK6ImRectS5_24ImGuiPopupPositionPolicy(i1, i6, i2 + 20 | 0, i21, i5, i7, 0);
 if ((HEAP32[i21 >> 2] | 0) == -1) {
  f34 = Math_fround(f37 + Math_fround(2.0));
  f37 = Math_fround(f36 + Math_fround(2.0));
  HEAPF32[i1 >> 2] = f34;
  HEAPF32[i1 + 4 >> 2] = f37;
 }
 STACKTOP = i4;
 return;
}

function __ZN5ImGui8EndFrameEv() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, f6 = f0, f7 = f0, f8 = f0, f9 = f0, f10 = f0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0;
 i1 = 0;
 i2 = HEAP32[1460598] | 0;
 if (!(HEAP8[i2 >> 0] | 0)) ___assert_fail(33723, 31803, 4270, 37041);
 i3 = i2 + 6332 | 0;
 i4 = i2 + 6328 | 0;
 if ((HEAP32[i3 >> 2] | 0) == (HEAP32[i4 >> 2] | 0)) return;
 i5 = HEAP32[i2 + 200 >> 2] | 0;
 if (i5 | 0) {
  f6 = Math_fround(HEAPF32[i2 + 11040 >> 2]);
  f7 = Math_fround(HEAPF32[i2 + 11032 >> 2]);
  f8 = Math_fround(f6 - f7);
  f6 = Math_fround(HEAPF32[i2 + 11044 >> 2]);
  f9 = Math_fround(HEAPF32[i2 + 11036 >> 2]);
  f10 = Math_fround(f6 - f9);
  if (Math_fround(Math_fround(f8 * f8) + Math_fround(f10 * f10)) > Math_fround(.0000999999974)) {
   FUNCTION_TABLE_vii[i5 & 63](~~f7, ~~f9);
   i5 = i2 + 11032 | 0;
   i11 = HEAP32[i5 + 4 >> 2] | 0;
   i12 = i2 + 11040 | 0;
   HEAP32[i12 >> 2] = HEAP32[i5 >> 2];
   HEAP32[i12 + 4 >> 2] = i11;
  }
 }
 if ((HEAP32[i2 + 6364 >> 2] | 0) != 1) ___assert_fail(37050, 31803, 4282, 37041);
 i11 = HEAP32[i2 + 6392 >> 2] | 0;
 if (i11 | 0) if (!(HEAP8[i11 + 120 >> 0] | 0)) HEAP8[i11 + 118 >> 0] = 0;
 __ZN5ImGui3EndEv();
 do if (!(HEAP32[i2 + 6420 >> 2] | 0)) if (!(HEAP32[i2 + 6404 >> 2] | 0)) {
  i11 = HEAP32[i2 + 6644 >> 2] | 0;
  i12 = (i11 | 0) == 0;
  if (!i12) if (HEAP8[i11 + 124 >> 0] | 0) break;
  L24 : do if (HEAP8[i2 + 972 >> 0] | 0) {
   i11 = i2 + 6400 | 0;
   if (!(HEAP32[i11 >> 2] | 0)) {
    if (i12) break;
    i5 = HEAP32[1460598] | 0;
    i13 = HEAP32[i5 + 6512 >> 2] | 0;
    if ((i13 | 0) > 0) {
     i14 = HEAP32[i5 + 6520 >> 2] | 0;
     i15 = i13;
     do {
      i13 = i15;
      i15 = i15 + -1 | 0;
      i16 = HEAP32[i14 + (i15 * 36 | 0) + 4 >> 2] | 0;
      if (i16 | 0) if (HEAP32[i16 + 8 >> 2] & 134217728 | 0) break L24;
     } while ((i13 | 0) > 1);
    }
    i15 = i5 + 6644 | 0;
    if (!(HEAP32[i15 >> 2] | 0)) break;
    HEAP32[i15 >> 2] = 0;
    HEAP8[i5 + 6733 >> 0] = 0;
    HEAP32[i5 + 6648 >> 2] = 0;
    HEAP8[i5 + 6728 >> 0] = 0;
    HEAP32[i5 + 6720 >> 2] = 0;
    break;
   }
   i15 = i2 + 6396 | 0;
   __ZN5ImGui11FocusWindowEP11ImGuiWindow(HEAP32[i15 >> 2] | 0);
   i14 = HEAP32[i15 >> 2] | 0;
   i15 = HEAP32[i14 + 76 >> 2] | 0;
   i13 = HEAP32[1460598] | 0;
   i16 = i13 + 6420 | 0;
   i17 = (HEAP32[i16 >> 2] | 0) != (i15 | 0);
   HEAP8[i13 + 6433 >> 0] = i17 & 1;
   if (i17) {
    HEAPF32[i13 + 6428 >> 2] = Math_fround(0.0);
    HEAP8[i13 + 6435 >> 0] = 0;
    if (i15 | 0) {
     HEAP32[i13 + 6464 >> 2] = i15;
     HEAPF32[i13 + 6468 >> 2] = Math_fround(0.0);
    }
   }
   HEAP32[i16 >> 2] = i15;
   HEAP32[i13 + 6440 >> 2] = 0;
   HEAP8[i13 + 6434 >> 0] = 0;
   HEAP32[i13 + 6452 >> 2] = i14;
   if (i15 | 0) {
    HEAP8[i13 + 6432 >> 0] = 1;
    if ((HEAP32[i13 + 6652 >> 2] | 0) == (i15 | 0)) i18 = 2; else if ((HEAP32[i13 + 6664 >> 2] | 0) == (i15 | 0)) i18 = 2; else if ((HEAP32[i13 + 6668 >> 2] | 0) == (i15 | 0)) i18 = 2; else i18 = (HEAP32[i13 + 6672 >> 2] | 0) == (i15 | 0) ? 2 : 1;
    HEAP32[i13 + 6460 >> 2] = i18;
   }
   HEAP8[i2 + 6730 >> 0] = 1;
   i13 = HEAP32[i11 >> 2] | 0;
   f9 = Math_fround(HEAPF32[i2 + 212 >> 2]);
   f7 = Math_fround(f9 - Math_fround(HEAPF32[i13 + 12 >> 2]));
   f9 = Math_fround(HEAPF32[i2 + 216 >> 2]);
   f10 = Math_fround(f9 - Math_fround(HEAPF32[i13 + 16 >> 2]));
   HEAPF32[i2 + 6444 >> 2] = f7;
   HEAPF32[i2 + 6448 >> 2] = f10;
   if (!(HEAP32[i14 + 8 >> 2] & 4)) if (!(HEAP32[i13 + 8 >> 2] & 4)) HEAP32[i2 + 6472 >> 2] = i14;
  } while (0);
  if (HEAP8[i2 + 973 >> 0] | 0) {
   i12 = HEAP32[1460598] | 0;
   i14 = HEAP32[i12 + 6512 >> 2] | 0;
   L55 : do if ((i14 | 0) > 0) {
    i13 = HEAP32[i12 + 6520 >> 2] | 0;
    i15 = i14;
    while (1) {
     i16 = i15;
     i15 = i15 + -1 | 0;
     i19 = HEAP32[i13 + (i15 * 36 | 0) + 4 >> 2] | 0;
     if (i19 | 0) if (HEAP32[i19 + 8 >> 2] & 134217728 | 0) break;
     if ((i16 | 0) <= 1) {
      i1 = 49;
      break L55;
     }
    }
    i15 = HEAP32[i2 + 6340 >> 2] | 0;
    if ((i15 | 0) < 1) i20 = i19; else {
     i13 = i2 + 6396 | 0;
     i11 = HEAP32[i2 + 6348 >> 2] | 0;
     i5 = i15;
     do {
      i15 = i5;
      i5 = i5 + -1 | 0;
      i16 = HEAP32[i11 + (i5 << 2) >> 2] | 0;
      if ((i16 | 0) == (i19 | 0)) {
       i20 = i19;
       break L55;
      }
      i21 = (i16 | 0) == (HEAP32[i13 >> 2] | 0);
     } while (!(i21 | (i15 | 0) < 2));
     if (i21) i1 = 49; else i20 = i19;
    }
   } else i1 = 49; while (0);
   if ((i1 | 0) == 49) i20 = HEAP32[i2 + 6396 >> 2] | 0;
   __ZN5ImGui21ClosePopupsOverWindowEP11ImGuiWindow(i20);
  }
 } while (0);
 i20 = i2 + 6352 | 0;
 i19 = i2 + 6356 | 0;
 i21 = HEAP32[i19 >> 2] | 0;
 if ((i21 | 0) < 0) {
  i18 = ((i21 | 0) / 2 | 0) + i21 | 0;
  i14 = (i18 | 0) > 0 ? i18 : 0;
  if ((i21 | 0) < (i14 | 0)) {
   HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
   i18 = __ZL13MallocWrapperjPv(i14 << 2, 0) | 0;
   i12 = i2 + 6360 | 0;
   i13 = HEAP32[i12 >> 2] | 0;
   if (!i13) i22 = i12; else {
    _memcpy(i18 | 0, i13 | 0, HEAP32[i20 >> 2] << 2 | 0) | 0;
    i13 = HEAP32[i12 >> 2] | 0;
    if (i13 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
    __ZL11FreeWrapperPvS_(i13, 0);
    i22 = i12;
   }
   HEAP32[i22 >> 2] = i18;
   HEAP32[i19 >> 2] = i14;
   i23 = i14;
  } else i23 = i21;
 } else i23 = i21;
 HEAP32[i20 >> 2] = 0;
 i21 = i2 + 6340 | 0;
 i14 = HEAP32[i21 >> 2] | 0;
 if ((i23 | 0) < (i14 | 0)) {
  HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
  i23 = __ZL13MallocWrapperjPv(i14 << 2, 0) | 0;
  i18 = i2 + 6360 | 0;
  i22 = HEAP32[i18 >> 2] | 0;
  if (!i22) i24 = i18; else {
   _memcpy(i23 | 0, i22 | 0, HEAP32[i20 >> 2] << 2 | 0) | 0;
   i22 = HEAP32[i18 >> 2] | 0;
   if (i22 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
   __ZL11FreeWrapperPvS_(i22, 0);
   i24 = i18;
  }
  HEAP32[i24 >> 2] = i23;
  HEAP32[i19 >> 2] = i14;
  i25 = HEAP32[i21 >> 2] | 0;
 } else i25 = i14;
 L93 : do if (!i25) i26 = 0; else {
  i14 = i2 + 6348 | 0;
  i23 = 0;
  i24 = i25;
  while (1) {
   if ((i24 | 0) <= (i23 | 0)) break;
   i18 = HEAP32[(HEAP32[i14 >> 2] | 0) + (i23 << 2) >> 2] | 0;
   if (!(HEAP8[i18 + 118 >> 0] | 0)) i1 = 73; else if (!(HEAP32[i18 + 8 >> 2] & 16777216)) i1 = 73; else i27 = i24;
   if ((i1 | 0) == 73) {
    i1 = 0;
    __ZL23AddWindowToSortedBufferP8ImVectorIP11ImGuiWindowES1_(i20, i18);
    i27 = HEAP32[i21 >> 2] | 0;
   }
   i23 = i23 + 1 | 0;
   if ((i23 | 0) == (i27 | 0)) {
    i26 = i27;
    break L93;
   } else i24 = i27;
  }
  ___assert_fail(56841, 56850, 1235, 56909);
 } while (0);
 if ((i26 | 0) != (HEAP32[i20 >> 2] | 0)) ___assert_fail(37081, 31803, 4346, 37041);
 HEAP32[i20 >> 2] = i26;
 HEAP32[i21 >> 2] = i26;
 i26 = HEAP32[i19 >> 2] | 0;
 i21 = i2 + 6344 | 0;
 HEAP32[i19 >> 2] = HEAP32[i21 >> 2];
 HEAP32[i21 >> 2] = i26;
 i26 = i2 + 6360 | 0;
 i21 = HEAP32[i26 >> 2] | 0;
 i19 = i2 + 6348 | 0;
 HEAP32[i26 >> 2] = HEAP32[i19 >> 2];
 HEAP32[i19 >> 2] = i21;
 HEAPF32[i2 + 232 >> 2] = Math_fround(0.0);
 HEAPF32[i2 + 228 >> 2] = Math_fround(0.0);
 i21 = i2 + 754 | 0;
 i2 = i21 + 118 | 0;
 do {
  HEAP16[i21 >> 1] = 0;
  i21 = i21 + 2 | 0;
 } while ((i21 | 0) < (i2 | 0));
 HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
 return;
}

function _mbsrtowcs(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0;
 i5 = 0;
 i6 = HEAP32[i2 >> 2] | 0;
 if (!i4) i5 = 5; else {
  i7 = HEAP32[i4 >> 2] | 0;
  if (!i7) i5 = 5; else if (!i1) {
   i8 = i7;
   i9 = i6;
   i10 = i3;
   i5 = 25;
  } else {
   HEAP32[i4 >> 2] = 0;
   i11 = i7;
   i12 = i1;
   i13 = i3;
   i14 = i6;
   i5 = 43;
  }
 }
 L5 : do if ((i5 | 0) == 5) {
  i7 = (___pthread_self_60() | 0) + 188 | 0;
  i4 = (i1 | 0) != 0;
  if (HEAP32[HEAP32[i7 >> 2] >> 2] | 0) if (i4) {
   i15 = i1;
   i16 = i3;
   i17 = i6;
   i5 = 15;
   break;
  } else {
   i18 = i6;
   i19 = i3;
   i5 = 14;
   break;
  }
  if (!i4) {
   i20 = _strlen(i6) | 0;
   i5 = 59;
   break;
  }
  L13 : do if (!i3) i21 = i6; else {
   i4 = i6;
   i7 = i1;
   i22 = i3;
   while (1) {
    i23 = HEAP8[i4 >> 0] | 0;
    if (!(i23 << 24 >> 24)) break;
    i24 = i4 + 1 | 0;
    HEAP32[i7 >> 2] = i23 << 24 >> 24 & 57343;
    i23 = i22 + -1 | 0;
    if (!i23) {
     i21 = i24;
     break L13;
    } else {
     i4 = i24;
     i7 = i7 + 4 | 0;
     i22 = i23;
    }
   }
   HEAP32[i7 >> 2] = 0;
   HEAP32[i2 >> 2] = 0;
   i20 = i3 - i22 | 0;
   i5 = 59;
   break L5;
  } while (0);
  HEAP32[i2 >> 2] = i21;
  i20 = i3;
  i5 = 59;
 } while (0);
 L19 : while (1) {
  L20 : do if ((i5 | 0) == 14) {
   i5 = 0;
   i21 = i18;
   i6 = i19;
   while (1) {
    i4 = HEAP8[i21 >> 0] | 0;
    if (((i4 & 255) + -1 | 0) >>> 0 < 127) if (!(i21 & 3)) {
     i23 = HEAP32[i21 >> 2] | 0;
     i24 = i23 & 255;
     if (!((i23 + -16843009 | i23) & -2139062144)) {
      i23 = i21;
      i25 = i6;
      do {
       i23 = i23 + 4 | 0;
       i25 = i25 + -4 | 0;
       i26 = HEAP32[i23 >> 2] | 0;
      } while (!((i26 + -16843009 | i26) & -2139062144 | 0));
      i27 = i23;
      i28 = i25;
      i29 = i26 & 255;
     } else {
      i27 = i21;
      i28 = i6;
      i29 = i24;
     }
    } else {
     i27 = i21;
     i28 = i6;
     i29 = i4;
    } else {
     i27 = i21;
     i28 = i6;
     i29 = i4;
    }
    i30 = i29 & 255;
    if ((i30 + -1 | 0) >>> 0 >= 127) break;
    i21 = i27 + 1 | 0;
    i6 = i28 + -1 | 0;
   }
   i6 = i30 + -194 | 0;
   if (i6 >>> 0 > 50) {
    i31 = i27;
    i32 = i1;
    i33 = i28;
    i5 = 53;
   } else {
    i8 = HEAP32[13208 + (i6 << 2) >> 2] | 0;
    i9 = i27 + 1 | 0;
    i10 = i28;
    i5 = 25;
    continue L19;
   }
  } else if ((i5 | 0) == 15) {
   i5 = 0;
   L22 : do if (!i16) i34 = i17; else {
    i6 = i15;
    i21 = i16;
    i22 = i17;
    while (1) {
     i7 = HEAP8[i22 >> 0] | 0;
     do if (((i7 & 255) + -1 | 0) >>> 0 < 127) if (i21 >>> 0 > 4 & (i22 & 3 | 0) == 0) {
      i35 = i6;
      i36 = i21;
      i37 = i22;
      while (1) {
       i38 = HEAP32[i37 >> 2] | 0;
       if ((i38 + -16843009 | i38) & -2139062144 | 0) {
        i5 = 38;
        break;
       }
       HEAP32[i35 >> 2] = i38 & 255;
       HEAP32[i35 + 4 >> 2] = HEAPU8[i37 + 1 >> 0];
       HEAP32[i35 + 8 >> 2] = HEAPU8[i37 + 2 >> 0];
       i39 = i37 + 4 | 0;
       i40 = i35 + 16 | 0;
       HEAP32[i35 + 12 >> 2] = HEAPU8[i37 + 3 >> 0];
       i41 = i36 + -4 | 0;
       if (i41 >>> 0 > 4) {
        i35 = i40;
        i36 = i41;
        i37 = i39;
       } else {
        i5 = 37;
        break;
       }
      }
      if ((i5 | 0) == 37) {
       i5 = 0;
       i42 = i40;
       i43 = i41;
       i44 = i39;
       i45 = HEAP8[i39 >> 0] | 0;
       break;
      } else if ((i5 | 0) == 38) {
       i5 = 0;
       i42 = i35;
       i43 = i36;
       i44 = i37;
       i45 = i38 & 255;
       break;
      }
     } else {
      i42 = i6;
      i43 = i21;
      i44 = i22;
      i45 = i7;
     } else {
      i42 = i6;
      i43 = i21;
      i44 = i22;
      i45 = i7;
     } while (0);
     i46 = i45 & 255;
     if ((i46 + -1 | 0) >>> 0 >= 127) break;
     i7 = i44 + 1 | 0;
     HEAP32[i42 >> 2] = i46;
     i21 = i43 + -1 | 0;
     if (!i21) {
      i34 = i7;
      break L22;
     } else {
      i6 = i42 + 4 | 0;
      i22 = i7;
     }
    }
    i22 = i46 + -194 | 0;
    if (i22 >>> 0 > 50) {
     i31 = i44;
     i32 = i42;
     i33 = i43;
     i5 = 53;
     break L20;
    }
    i11 = HEAP32[13208 + (i22 << 2) >> 2] | 0;
    i12 = i42;
    i13 = i43;
    i14 = i44 + 1 | 0;
    i5 = 43;
    continue L19;
   } while (0);
   HEAP32[i2 >> 2] = i34;
   i20 = i3;
   i5 = 59;
   continue L19;
  } else if ((i5 | 0) == 25) {
   i5 = 0;
   i22 = (HEAPU8[i9 >> 0] | 0) >>> 3;
   if ((i22 + -16 | i22 + (i8 >> 26)) >>> 0 > 7) {
    i47 = i1;
    i48 = i8;
    i49 = i9;
    i50 = i10;
    i5 = 52;
   } else {
    i22 = i9 + 1 | 0;
    if (!(i8 & 33554432)) i51 = i22; else {
     if ((HEAP8[i22 >> 0] & -64) << 24 >> 24 != -128) {
      i47 = i1;
      i48 = i8;
      i49 = i9;
      i50 = i10;
      i5 = 52;
      break;
     }
     i22 = i9 + 2 | 0;
     if (!(i8 & 524288)) i51 = i22; else {
      if ((HEAP8[i22 >> 0] & -64) << 24 >> 24 != -128) {
       i47 = i1;
       i48 = i8;
       i49 = i9;
       i50 = i10;
       i5 = 52;
       break;
      }
      i51 = i9 + 3 | 0;
     }
    }
    i18 = i51;
    i19 = i10 + -1 | 0;
    i5 = 14;
    continue L19;
   }
  } else if ((i5 | 0) == 43) {
   i5 = 0;
   i22 = HEAPU8[i14 >> 0] | 0;
   i6 = i22 >>> 3;
   if ((i6 + -16 | i6 + (i11 >> 26)) >>> 0 > 7) {
    i47 = i12;
    i48 = i11;
    i49 = i14;
    i50 = i13;
    i5 = 52;
   } else {
    i6 = i14 + 1 | 0;
    i21 = i22 + -128 | i11 << 6;
    do if ((i21 | 0) < 0) {
     i22 = (HEAPU8[i6 >> 0] | 0) + -128 | 0;
     if (i22 >>> 0 > 63) {
      i52 = i14 + -1 | 0;
      i53 = i12;
      break L20;
     }
     i4 = i14 + 2 | 0;
     i24 = i22 | i21 << 6;
     if ((i24 | 0) < 0) {
      i22 = (HEAPU8[i4 >> 0] | 0) + -128 | 0;
      if (i22 >>> 0 > 63) {
       i52 = i14 + -1 | 0;
       i53 = i12;
       break L20;
      } else {
       i54 = i14 + 3 | 0;
       i55 = i22 | i24 << 6;
       break;
      }
     } else {
      i54 = i4;
      i55 = i24;
     }
    } else {
     i54 = i6;
     i55 = i21;
    } while (0);
    HEAP32[i12 >> 2] = i55;
    i15 = i12 + 4 | 0;
    i16 = i13 + -1 | 0;
    i17 = i54;
    i5 = 15;
    continue L19;
   }
  } else if ((i5 | 0) == 59) {
   i5 = 0;
   return i20 | 0;
  } while (0);
  if ((i5 | 0) == 52) {
   i5 = 0;
   i21 = i49 + -1 | 0;
   if (!i48) {
    i31 = i21;
    i32 = i47;
    i33 = i50;
    i5 = 53;
   } else {
    i52 = i21;
    i53 = i47;
   }
  }
  if ((i5 | 0) == 53) {
   i5 = 0;
   if (!(HEAP8[i31 >> 0] | 0)) {
    if (i32 | 0) {
     HEAP32[i32 >> 2] = 0;
     HEAP32[i2 >> 2] = 0;
    }
    i20 = i3 - i33 | 0;
    i5 = 59;
    continue;
   } else {
    i52 = i31;
    i53 = i32;
   }
  }
  i21 = ___errno_location() | 0;
  HEAP32[i21 >> 2] = 84;
  if (!i53) {
   i20 = -1;
   i5 = 59;
   continue;
  }
  HEAP32[i2 >> 2] = i52;
  i20 = -1;
  i5 = 59;
 }
 return 0;
}

function __ZN9MenuBuild9drawIntroERNSt3__26vectorINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS5_IS7_EEEE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, f17 = f0, f18 = f0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 i4 = i3 + 120 | 0;
 i5 = i3 + 112 | 0;
 i6 = i3 + 104 | 0;
 i7 = i3 + 96 | 0;
 i8 = i3 + 88 | 0;
 i9 = i3 + 72 | 0;
 i10 = i3 + 56 | 0;
 i11 = i3 + 48 | 0;
 i12 = i3 + 40 | 0;
 i13 = i3 + 32 | 0;
 i14 = i3 + 136 | 0;
 i15 = i3 + 128 | 0;
 i16 = __ZN5ImGui5GetIOEv() | 0;
 f17 = Math_fround(Math_fround(HEAPF32[i16 + 8 >> 2]) * Math_fround(.5));
 f18 = Math_fround(Math_fround(HEAPF32[i16 + 12 >> 2]) * Math_fround(.5));
 HEAPF32[i14 >> 2] = f17;
 HEAPF32[i14 + 4 >> 2] = f18;
 HEAPF32[i15 >> 2] = Math_fround(.5);
 HEAPF32[i15 + 4 >> 2] = Math_fround(.5);
 __ZN5ImGui16SetNextWindowPosERK6ImVec2iS2_(i14, 2, i15);
 __ZN5ImGui5BeginEPKcPbi(26273, 0, 71) | 0;
 __ZN5ImGui13PushItemWidthEf(Math_fround(__ZN5ImGui26GetContentRegionAvailWidthEv()));
 i15 = (__ZN5ImGui5GetIOEv() | 0) + 140 | 0;
 i14 = HEAP32[i15 >> 2] | 0;
 if ((HEAP32[i14 + 48 >> 2] | 0) <= 1) ___assert_fail(56841, 26279, 1235, 56909);
 __ZN5ImGui8PushFontEP6ImFont(HEAP32[(HEAP32[i14 + 56 >> 2] | 0) + 4 >> 2] | 0);
 __ZN5ImGui4TextEPKcz(26342, i3);
 __ZN5ImGui7PopFontEv();
 i14 = i1 + 52 | 0;
 if (HEAP32[i14 >> 2] | 0) {
  __ZN5ImGui4TextEPKcz(5849359, i3 + 8 | 0);
  __ZN5ImGui4TextEPKcz(26352, i3 + 16 | 0);
  __ZN5ImGui13PushItemWidthEf(Math_fround(300.0));
  __ZN5ImGui9InputTextEPKcPcjiPFiP25ImGuiTextEditCallbackDataEPv(5849359, 5847120, 128, 0, 0, 0) | 0;
  __ZN5ImGui12PopItemWidthEv();
  i15 = i1 + 20 | 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(i15, 5847120) | 0;
  __ZN5ImGui4TextEPKcz(5849359, i3 + 24 | 0);
  __ZN5ImGui8CheckboxEPKcPb(26367, 26376) | 0;
  __ZN5ImGui4TextEPKcz(26377, i13);
  __ZN5ImGui8SameLineEff(Math_fround(0.0), Math_fround(-1.0));
  if (__ZN5ImGui11RadioButtonEPKcb(26386, (HEAP32[1460543] | 0) == 0) | 0) HEAP32[1460543] = 0;
  __ZN5ImGui8SameLineEff(Math_fround(0.0), Math_fround(-1.0));
  if (__ZN5ImGui11RadioButtonEPKcb(26392, (HEAP32[1460543] | 0) == 1) | 0) HEAP32[1460543] = 1;
  __ZN5ImGui8SameLineEff(Math_fround(0.0), Math_fround(-1.0));
  if (__ZN5ImGui11RadioButtonEPKcb(26399, (HEAP32[1460543] | 0) == 2) | 0) HEAP32[1460543] = 2;
  HEAPF32[i13 >> 2] = Math_fround(0.0);
  HEAPF32[i13 + 4 >> 2] = Math_fround(0.0);
  do if (__ZN5ImGui6ButtonEPKcRK6ImVec2(26405, i13) | 0) {
   i16 = HEAP8[i15 + 11 >> 0] | 0;
   if (i16 << 24 >> 24 < 0) i19 = HEAP32[i1 + 24 >> 2] | 0; else i19 = i16 & 255;
   if (!i19) {
    __ZN5ImGui8SameLineEff(Math_fround(0.0), Math_fround(-1.0));
    __ZN5ImGui4TextEPKcz(26416, i12);
    break;
   } else {
    HEAP32[i1 + 4 >> 2] = HEAPU8[26376];
    HEAP32[i1 + 44 >> 2] = 0;
    HEAP32[i1 + 32 >> 2] = 1;
    break;
   }
  } while (0);
  HEAPF32[i13 >> 2] = Math_fround(0.0);
  HEAPF32[i13 + 4 >> 2] = Math_fround(0.0);
  if (!(__ZN5ImGui6ButtonEPKcRK6ImVec2(26438, i13) | 0)) {
   __ZN5ImGui12PopItemWidthEv();
   __ZN5ImGui3EndEv();
   STACKTOP = i3;
   return;
  }
  HEAP32[i14 >> 2] = 0;
  __ZN5ImGui12PopItemWidthEv();
  __ZN5ImGui3EndEv();
  STACKTOP = i3;
  return;
 }
 i13 = i1 + 56 | 0;
 if (!(HEAP32[i13 >> 2] | 0)) {
  __ZN5ImGui4TextEPKcz(26461, i7);
  __ZN5ImGui4TextEPKcz(5849359, i6);
  __ZN5ImGui4TextEPKcz(26492, i5);
  __ZN5ImGui4TextEPKcz(5849359, i4);
  HEAPF32[i4 >> 2] = Math_fround(0.0);
  HEAPF32[i4 + 4 >> 2] = Math_fround(0.0);
  if (__ZN5ImGui6ButtonEPKcRK6ImVec2(26500, i4) | 0) HEAP32[i14 >> 2] = 1;
  HEAPF32[i4 >> 2] = Math_fround(0.0);
  HEAPF32[i4 + 4 >> 2] = Math_fround(0.0);
  if (!(__ZN5ImGui6ButtonEPKcRK6ImVec2(26509, i4) | 0)) {
   __ZN5ImGui12PopItemWidthEv();
   __ZN5ImGui3EndEv();
   STACKTOP = i3;
   return;
  }
  HEAP32[i13 >> 2] = 1;
  __ZN5ImGui12PopItemWidthEv();
  __ZN5ImGui3EndEv();
  STACKTOP = i3;
  return;
 }
 __ZN5ImGui4TextEPKcz(5849359, i11);
 __ZN5ImGui4TextEPKcz(26445, i10);
 __ZN5ImGui4TextEPKcz(5849359, i9);
 i4 = HEAP32[i2 >> 2] | 0;
 i14 = HEAP32[i2 + 4 >> 2] | 0;
 if ((i4 | 0) != (i14 | 0)) {
  i2 = i9 + 11 | 0;
  i5 = i9 + 4 | 0;
  i6 = i10 + 11 | 0;
  i7 = i10 + 4 | 0;
  i12 = i10 + 11 | 0;
  i19 = i11 + 4 | 0;
  i15 = i1 + 20 | 0;
  i16 = i15 + 11 | 0;
  i20 = i1 + 24 | 0;
  i21 = i1 + 36 | 0;
  i22 = i1 + 44 | 0;
  i23 = i1 + 32 | 0;
  i1 = i4;
  do {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_(i9, i1);
   i4 = HEAP8[i2 >> 0] | 0;
   i24 = i4 << 24 >> 24 < 0 ? HEAP32[i5 >> 2] | 0 : i4 & 255;
   if (i24 >>> 0 > 5) {
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_(i10, i9, i24 + -5 | 0, i24, i9);
    i24 = HEAP8[i6 >> 0] | 0;
    if (((i24 << 24 >> 24 < 0 ? HEAP32[i7 >> 2] | 0 : i24 & 255) | 0) == 5) {
     i4 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKcj(i10, 0, -1, 26455, 5) | 0) == 0;
     i25 = i4;
     i26 = HEAP8[i6 >> 0] | 0;
    } else {
     i25 = 0;
     i26 = i24;
    }
    if (i26 << 24 >> 24 < 0) __ZdlPv(HEAP32[i10 >> 2] | 0);
    if (i25) {
     i24 = HEAP8[i2 >> 0] | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_(i10, i9, 0, (i24 << 24 >> 24 < 0 ? HEAP32[i5 >> 2] | 0 : i24 & 255) + -5 | 0, i9);
     i24 = (HEAP8[i12 >> 0] | 0) < 0 ? HEAP32[i10 >> 2] | 0 : i10;
     HEAPF32[i11 >> 2] = Math_fround(0.0);
     HEAPF32[i19 >> 2] = Math_fround(0.0);
     i4 = __ZN5ImGui6ButtonEPKcRK6ImVec2(i24, i11) | 0;
     if ((HEAP8[i12 >> 0] | 0) < 0) __ZdlPv(HEAP32[i10 >> 2] | 0);
     if (i4) {
      i4 = HEAP8[i2 >> 0] | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_(i10, i9, 0, (i4 << 24 >> 24 < 0 ? HEAP32[i5 >> 2] | 0 : i4 & 255) + -5 | 0, i9);
      if ((HEAP8[i16 >> 0] | 0) < 0) {
       HEAP8[HEAP32[i15 >> 2] >> 0] = 0;
       HEAP32[i20 >> 2] = 0;
      } else {
       HEAP8[i15 >> 0] = 0;
       HEAP8[i16 >> 0] = 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i15, 0);
      HEAP32[i15 >> 2] = HEAP32[i10 >> 2];
      HEAP32[i15 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
      HEAP32[i15 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
      HEAP32[i21 >> 2] = 1;
      HEAP32[i22 >> 2] = 0;
      HEAP32[i23 >> 2] = 1;
     }
    }
   }
   if ((HEAP8[i2 >> 0] | 0) < 0) __ZdlPv(HEAP32[i9 >> 2] | 0);
   i1 = i1 + 12 | 0;
  } while ((i1 | 0) != (i14 | 0));
 }
 __ZN5ImGui4TextEPKcz(5849359, i8);
 HEAPF32[i8 >> 2] = Math_fround(0.0);
 HEAPF32[i8 + 4 >> 2] = Math_fround(0.0);
 if (!(__ZN5ImGui6ButtonEPKcRK6ImVec2(26438, i8) | 0)) {
  __ZN5ImGui12PopItemWidthEv();
  __ZN5ImGui3EndEv();
  STACKTOP = i3;
  return;
 }
 HEAP32[i13 >> 2] = 0;
 __ZN5ImGui12PopItemWidthEv();
 __ZN5ImGui3EndEv();
 STACKTOP = i3;
 return;
}

function __Z23ImGui_ImplGlfw_NewFramev() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, f11 = f0, f12 = f0, f13 = f0, f14 = f0, d15 = 0.0, d16 = 0.0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, f23 = f0, f24 = f0, f25 = f0, f26 = f0;
 i1 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i3 = i2 + 8 | 0;
 i4 = i2;
 i5 = i2 + 28 | 0;
 i6 = i2 + 24 | 0;
 i7 = i2 + 20 | 0;
 i8 = i2 + 16 | 0;
 i9 = __ZN5ImGui5GetIOEv() | 0;
 i10 = HEAP32[i9 + 140 >> 2] | 0;
 if ((HEAP32[i10 + 48 >> 2] | 0) <= 0) ___assert_fail(56070, 56090, 243, 56161);
 if (!(HEAP32[i10 + 16 >> 2] | 0)) if (!(HEAP32[i10 + 20 >> 2] | 0)) ___assert_fail(56070, 56090, 243, 56161);
 _glfwGetWindowSize(HEAP32[1460860] | 0, i5 | 0, i6 | 0);
 _glfwGetFramebufferSize(HEAP32[1460860] | 0, i7 | 0, i8 | 0);
 i10 = HEAP32[i5 >> 2] | 0;
 f11 = Math_fround(i10 | 0);
 i5 = HEAP32[i6 >> 2] | 0;
 f12 = Math_fround(i5 | 0);
 HEAPF32[i9 + 8 >> 2] = f11;
 HEAPF32[i9 + 12 >> 2] = f12;
 if ((i10 | 0) > 0) f13 = Math_fround(Math_fround(HEAP32[i7 >> 2] | 0) / f11); else f13 = Math_fround(0.0);
 if ((i5 | 0) > 0) f14 = Math_fround(Math_fround(HEAP32[i8 >> 2] | 0) / f12); else f14 = Math_fround(0.0);
 HEAPF32[i9 + 156 >> 2] = f13;
 HEAPF32[i9 + 160 >> 2] = f14;
 d15 = +_glfwGetTime();
 d16 = +HEAPF64[9198];
 f14 = Math_fround(d15 - d16);
 f13 = d16 > 0.0 ? f14 : Math_fround(.0166666675);
 HEAPF32[i9 + 16 >> 2] = f13;
 HEAPF64[9198] = d15;
 i8 = __ZN5ImGui5GetIOEv() | 0;
 if (!(HEAP8[5847250] | 0)) i17 = (_glfwGetMouseButton(HEAP32[1460860] | 0, 0) | 0) != 0 & 1; else i17 = 1;
 HEAP8[i8 + 216 >> 0] = i17;
 HEAP8[5847250] = 0;
 if (!(HEAP8[5847251] | 0)) i18 = (_glfwGetMouseButton(HEAP32[1460860] | 0, 1) | 0) != 0 & 1; else i18 = 1;
 HEAP8[i8 + 217 >> 0] = i18;
 HEAP8[5847251] = 0;
 if (!(HEAP8[5847252] | 0)) i19 = (_glfwGetMouseButton(HEAP32[1460860] | 0, 2) | 0) != 0 & 1; else i19 = 1;
 HEAP8[i8 + 218 >> 0] = i19;
 HEAP8[5847252] = 0;
 if (!(HEAP8[5847253] | 0)) i20 = (_glfwGetMouseButton(HEAP32[1460860] | 0, 3) | 0) != 0 & 1; else i20 = 1;
 HEAP8[i8 + 219 >> 0] = i20;
 HEAP8[5847253] = 0;
 if (!(HEAP8[5847254] | 0)) i21 = (_glfwGetMouseButton(HEAP32[1460860] | 0, 4) | 0) != 0 & 1; else i21 = 1;
 HEAP8[i8 + 220 >> 0] = i21;
 HEAP8[5847254] = 0;
 f13 = Math_fround(HEAPF32[i8 + 208 >> 2]);
 i21 = i8 + 212 | 0;
 f14 = Math_fround(HEAPF32[i21 >> 2]);
 i20 = i8 + 208 | 0;
 HEAP32[i20 >> 2] = -8388609;
 HEAP32[i21 >> 2] = -8388609;
 if (!(HEAP8[i8 + 871 >> 0] | 0)) {
  _glfwGetCursorPos(HEAP32[1460860] | 0, i3 | 0, i4 | 0);
  f12 = Math_fround(+HEAPF64[i3 >> 3]);
  f11 = Math_fround(+HEAPF64[i4 >> 3]);
  HEAPF32[i20 >> 2] = f12;
  HEAPF32[i21 >> 2] = f11;
 } else _glfwSetCursorPos(HEAP32[1460860] | 0, +(+f13), +(+f14));
 i21 = __ZN5ImGui5GetIOEv() | 0;
 do if (!(HEAP32[i21 >> 2] & 32)) if ((_glfwGetInputMode(HEAP32[1460860] | 0, 208897) | 0) != 212995) {
  i20 = __ZN5ImGui14GetMouseCursorEv() | 0;
  if ((i20 | 0) != -1) if (!(HEAP8[i21 + 232 >> 0] | 0)) {
   i8 = HEAP32[5843444 + (i20 << 2) >> 2] | 0;
   _glfwSetCursor(HEAP32[1460860] | 0, (i8 | 0 ? i8 : HEAP32[1460861] | 0) | 0);
   _glfwSetInputMode(HEAP32[1460860] | 0, 208897, 212993);
   break;
  }
  _glfwSetInputMode(HEAP32[1460860] | 0, 208897, 212994);
 } while (0);
 i21 = i9 + 784 | 0;
 i8 = i21;
 i20 = i8 + 84 | 0;
 do {
  HEAP32[i8 >> 2] = 0;
  i8 = i8 + 4 | 0;
 } while ((i8 | 0) < (i20 | 0));
 if (!(HEAP32[i9 >> 2] & 2)) {
  STACKTOP = i2;
  return;
 }
 HEAP32[i3 >> 2] = 0;
 HEAP32[i4 >> 2] = 0;
 i8 = _glfwGetJoystickAxes(0, i3 | 0) | 0;
 i20 = _glfwGetJoystickButtons(0, i4 | 0) | 0;
 i19 = HEAP32[i4 >> 2] | 0;
 i4 = (i19 | 0) > 0;
 L44 : do if (i4) {
  if ((HEAP8[i20 >> 0] | 0) == 1) HEAPF32[i21 >> 2] = Math_fround(1.0);
  if ((i19 | 0) > 1) {
   if ((HEAP8[i20 + 1 >> 0] | 0) == 1) HEAPF32[i9 + 788 >> 2] = Math_fround(1.0);
   if ((i19 | 0) > 2) {
    if ((HEAP8[i20 + 2 >> 0] | 0) == 1) HEAPF32[i9 + 796 >> 2] = Math_fround(1.0);
    if ((i19 | 0) > 3) {
     if ((HEAP8[i20 + 3 >> 0] | 0) == 1) HEAPF32[i9 + 792 >> 2] = Math_fround(1.0);
     do if ((i19 | 0) > 13) {
      if ((HEAP8[i20 + 13 >> 0] | 0) != 1) {
       i1 = 45;
       break;
      }
      HEAPF32[i9 + 800 >> 2] = Math_fround(1.0);
      i1 = 45;
     } else {
      if ((i19 | 0) > 11) {
       i1 = 45;
       break;
      }
      if ((i19 | 0) == 11) {
       i1 = 48;
       break;
      }
      if ((i19 | 0) <= 4) break L44;
     } while (0);
     do if ((i1 | 0) == 45) {
      if ((HEAP8[i20 + 11 >> 0] | 0) != 1) {
       i1 = 48;
       break;
      }
      HEAPF32[i9 + 804 >> 2] = Math_fround(1.0);
      i1 = 48;
     } while (0);
     do if ((i1 | 0) == 48) {
      if ((HEAP8[i20 + 10 >> 0] | 0) == 1) HEAPF32[i9 + 808 >> 2] = Math_fround(1.0);
      if ((i19 | 0) <= 12) break;
      if ((HEAP8[i20 + 12 >> 0] | 0) != 1) break;
      HEAPF32[i9 + 812 >> 2] = Math_fround(1.0);
     } while (0);
     if ((HEAP8[i20 + 4 >> 0] | 0) == 1) HEAPF32[i9 + 832 >> 2] = Math_fround(1.0);
     do if ((i19 | 0) > 5) {
      if ((HEAP8[i20 + 5 >> 0] | 0) != 1) {
       i22 = 1;
       break;
      }
      HEAPF32[i9 + 836 >> 2] = Math_fround(1.0);
      i22 = 1;
     } else i22 = 0; while (0);
     if ((HEAP8[i20 + 4 >> 0] | 0) == 1) {
      HEAPF32[i9 + 840 >> 2] = Math_fround(1.0);
      if (!i22) break;
     } else if (!i22) break;
     if ((HEAP8[i20 + 5 >> 0] | 0) != 1) break;
     HEAPF32[i9 + 844 >> 2] = Math_fround(1.0);
    }
   }
  }
 } while (0);
 i20 = HEAP32[i3 >> 2] | 0;
 i3 = (i20 | 0) > 0;
 if (i3) f23 = Math_fround(Math_fround(HEAPF32[i8 >> 2]) + Math_fround(.300000012)); else f23 = Math_fround(0.0);
 f14 = Math_fround(f23 / Math_fround(-.599999964));
 i22 = f14 > Math_fround(1.0);
 f23 = i22 ? Math_fround(1.0) : f14;
 i22 = i9 + 816 | 0;
 if (Math_fround(HEAPF32[i22 >> 2]) < f23) HEAPF32[i22 >> 2] = f23;
 if (i3) f24 = Math_fround(Math_fround(HEAPF32[i8 >> 2]) + Math_fround(-.300000012)); else f24 = Math_fround(0.0);
 f23 = Math_fround(f24 / Math_fround(.599999964));
 i22 = f23 > Math_fround(1.0);
 f24 = i22 ? Math_fround(1.0) : f23;
 i22 = i9 + 820 | 0;
 if (Math_fround(HEAPF32[i22 >> 2]) < f24) HEAPF32[i22 >> 2] = f24;
 i22 = (i20 | 0) > 1;
 if (i22) f25 = Math_fround(Math_fround(HEAPF32[i8 + 4 >> 2]) + Math_fround(-.300000012)); else f25 = Math_fround(0.0);
 f24 = Math_fround(f25 / Math_fround(.599999964));
 i20 = f24 > Math_fround(1.0);
 f25 = i20 ? Math_fround(1.0) : f24;
 i20 = i9 + 824 | 0;
 if (Math_fround(HEAPF32[i20 >> 2]) < f25) HEAPF32[i20 >> 2] = f25;
 if (i22) f26 = Math_fround(Math_fround(HEAPF32[i8 + 4 >> 2]) + Math_fround(.300000012)); else f26 = Math_fround(0.0);
 f25 = Math_fround(f26 / Math_fround(-.599999964));
 i8 = f25 > Math_fround(1.0);
 f26 = i8 ? Math_fround(1.0) : f25;
 i8 = i9 + 828 | 0;
 if (Math_fround(HEAPF32[i8 >> 2]) < f26) HEAPF32[i8 >> 2] = f26;
 i8 = i9 + 4 | 0;
 i9 = HEAP32[i8 >> 2] | 0;
 HEAP32[i8 >> 2] = i3 & i4 ? i9 | 1 : i9 & -2;
 STACKTOP = i2;
 return;
}

function __ZN9MenuBuild9drawBuildEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, f13 = f0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 i4 = i3 + 16 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3;
 i7 = i3 + 72 | 0;
 i8 = i3 + 64 | 0;
 i9 = i3 + 56 | 0;
 i10 = i3 + 48 | 0;
 i11 = i3 + 40 | 0;
 i12 = i3 + 24 | 0;
 f13 = Math_fround(Math_fround(HEAP32[(HEAP32[1460597] | 0) + 4 >> 2] | 0) + Math_fround(-154.0));
 HEAPF32[i7 >> 2] = f13;
 HEAPF32[i7 + 4 >> 2] = Math_fround(52.0);
 HEAPF32[i8 >> 2] = Math_fround(0.0);
 HEAPF32[i8 + 4 >> 2] = Math_fround(0.0);
 __ZN5ImGui16SetNextWindowPosERK6ImVec2iS2_(i7, 0, i8);
 __ZN5ImGui5BeginEPKcPbi(27871, 0, 103) | 0;
 if (!(HEAP32[i1 >> 2] | 0)) {
  HEAPF32[i9 >> 2] = Math_fround(0.0);
  HEAPF32[i9 + 4 >> 2] = Math_fround(0.0);
  if (__ZN5ImGui6ButtonEPKcRK6ImVec2(27878, i9) | 0) {
   HEAP32[i1 >> 2] = 1;
   HEAP32[i1 + 48 >> 2] = 0;
  }
 } else {
  HEAPF32[i9 >> 2] = Math_fround(0.0);
  HEAPF32[i9 + 4 >> 2] = Math_fround(0.0);
  if (__ZN5ImGui6ButtonEPKcRK6ImVec2(27886, i9) | 0) {
   HEAP32[i1 >> 2] = 0;
   HEAP32[i1 + 48 >> 2] = 0;
  }
 }
 __ZN5ImGui3EndEv();
 HEAPF32[i9 >> 2] = Math_fround(12.0);
 HEAPF32[i9 + 4 >> 2] = Math_fround(52.0);
 HEAPF32[i10 >> 2] = Math_fround(0.0);
 HEAPF32[i10 + 4 >> 2] = Math_fround(0.0);
 HEAPF32[i11 >> 2] = Math_fround(80.0);
 HEAPF32[i11 + 4 >> 2] = Math_fround(30.0);
 __ZN5ImGui16SetNextWindowPosERK6ImVec2iS2_(i9, 0, i10);
 __ZN5ImGui5BeginEPKcPbi(27898, 0, 103) | 0;
 __ZN5ImGui4TextEPKcz(27898, i6);
 switch (HEAP32[i1 >> 2] | 0) {
 case 0:
  {
   i10 = i1 + 4 | 0;
   i9 = i1 + 48 | 0;
   i14 = i12 + 4 | 0;
   i15 = i12 + 8 | 0;
   i16 = i12 + 12 | 0;
   i17 = i12 + 4 | 0;
   i18 = i12 + 8 | 0;
   i19 = i12 + 12 | 0;
   i20 = i12 + 4 | 0;
   i21 = i12 + 8 | 0;
   i22 = i12 + 12 | 0;
   i23 = 0;
   do {
    i24 = HEAP32[i10 >> 2] | 0;
    L11 : do switch (i24 | 0) {
    case 0:
     {
      i2 = 16;
      break;
     }
    case 1:
     {
      switch (i23 | 0) {
      case 0:
      case 1:
      case 9:
       {
        i2 = 16;
        break;
       }
      default:
       {}
      }
      break;
     }
    case 2:
     {
      switch (i23 | 0) {
      case 0:
      case 1:
      case 4:
      case 9:
       {
        i2 = 16;
        break;
       }
      default:
       {}
      }
      break;
     }
    case 3:
     {
      switch (i23 | 0) {
      case 0:
      case 1:
      case 4:
      case 5:
      case 9:
       break;
      default:
       break L11;
      }
      if ((i24 | 0) == 4) i2 = 14; else i2 = 15;
      break;
     }
    case 4:
     {
      i2 = 14;
      break;
     }
    default:
     i2 = 15;
    } while (0);
    if ((i2 | 0) == 14) {
     i2 = 0;
     switch (i23 | 0) {
     case 0:
     case 1:
     case 4:
     case 5:
     case 6:
     case 9:
      {
       i2 = 16;
       break;
      }
     default:
      {}
     }
    } else if ((i2 | 0) == 15) {
     i2 = 0;
     if (!((i23 + -7 | 0) >>> 0 < 2 & (i24 | 0) == 5)) i2 = 16;
    }
    if ((i2 | 0) == 16) {
     i2 = 0;
     i25 = i23 + 1 | 0;
     f13 = (HEAP32[i9 >> 2] | 0) == (i25 | 0) ? Math_fround(.285714298) : Math_fround(.571428597);
     __ZN5ImGui20ColorConvertHSVtoRGBEfffRfS0_S0_(f13, Math_fround(.600000024), Math_fround(.600000024), i6, i7, i8);
     i26 = HEAP32[i7 >> 2] | 0;
     i27 = HEAP32[i8 >> 2] | 0;
     HEAP32[i12 >> 2] = HEAP32[i6 >> 2];
     HEAP32[i14 >> 2] = i26;
     HEAP32[i15 >> 2] = i27;
     HEAPF32[i16 >> 2] = Math_fround(1.0);
     __ZN5ImGui14PushStyleColorEiRK6ImVec4(21, i12);
     __ZN5ImGui20ColorConvertHSVtoRGBEfffRfS0_S0_(f13, Math_fround(.699999988), Math_fround(.699999988), i6, i7, i8);
     i27 = HEAP32[i7 >> 2] | 0;
     i26 = HEAP32[i8 >> 2] | 0;
     HEAP32[i12 >> 2] = HEAP32[i6 >> 2];
     HEAP32[i17 >> 2] = i27;
     HEAP32[i18 >> 2] = i26;
     HEAPF32[i19 >> 2] = Math_fround(1.0);
     __ZN5ImGui14PushStyleColorEiRK6ImVec4(22, i12);
     __ZN5ImGui20ColorConvertHSVtoRGBEfffRfS0_S0_(f13, Math_fround(.800000011), Math_fround(.800000011), i6, i7, i8);
     i26 = HEAP32[i7 >> 2] | 0;
     i27 = HEAP32[i8 >> 2] | 0;
     HEAP32[i12 >> 2] = HEAP32[i6 >> 2];
     HEAP32[i20 >> 2] = i26;
     HEAP32[i21 >> 2] = i27;
     HEAPF32[i22 >> 2] = Math_fround(1.0);
     __ZN5ImGui14PushStyleColorEiRK6ImVec4(23, i12);
     i27 = i23 << 1;
     if (__ZN5ImGui6ButtonEPKcRK6ImVec2(HEAP32[3608 + (i27 << 2) >> 2] | 0, i11) | 0) HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) == (i25 | 0) ? 0 : i25;
     if (__ZN5ImGui13IsItemHoveredEi(0) | 0) __ZN5ImGui10SetTooltipEPKcz(HEAP32[3608 + ((i27 | 1) << 2) >> 2] | 0, i5);
     __ZN5ImGui13PopStyleColorEi(3);
    }
    i23 = i23 + 1 | 0;
   } while ((i23 | 0) != 10);
   __ZN5ImGui3EndEv();
   STACKTOP = i3;
   return;
  }
 case 1:
  {
   i23 = i1 + 48 | 0;
   i1 = i12 + 4 | 0;
   i5 = i12 + 8 | 0;
   i9 = i12 + 12 | 0;
   i22 = i12 + 4 | 0;
   i21 = i12 + 8 | 0;
   i20 = i12 + 12 | 0;
   i19 = i12 + 4 | 0;
   i18 = i12 + 8 | 0;
   i17 = i12 + 12 | 0;
   i16 = 0;
   do {
    i15 = i16 + 101 | 0;
    f13 = (HEAP32[i23 >> 2] | 0) == (i15 | 0) ? Math_fround(.285714298) : Math_fround(.571428597);
    __ZN5ImGui20ColorConvertHSVtoRGBEfffRfS0_S0_(f13, Math_fround(.600000024), Math_fround(.600000024), i6, i7, i8);
    i14 = HEAP32[i7 >> 2] | 0;
    i2 = HEAP32[i8 >> 2] | 0;
    HEAP32[i12 >> 2] = HEAP32[i6 >> 2];
    HEAP32[i1 >> 2] = i14;
    HEAP32[i5 >> 2] = i2;
    HEAPF32[i9 >> 2] = Math_fround(1.0);
    __ZN5ImGui14PushStyleColorEiRK6ImVec4(21, i12);
    __ZN5ImGui20ColorConvertHSVtoRGBEfffRfS0_S0_(f13, Math_fround(.699999988), Math_fround(.699999988), i6, i7, i8);
    i2 = HEAP32[i7 >> 2] | 0;
    i14 = HEAP32[i8 >> 2] | 0;
    HEAP32[i12 >> 2] = HEAP32[i6 >> 2];
    HEAP32[i22 >> 2] = i2;
    HEAP32[i21 >> 2] = i14;
    HEAPF32[i20 >> 2] = Math_fround(1.0);
    __ZN5ImGui14PushStyleColorEiRK6ImVec4(22, i12);
    __ZN5ImGui20ColorConvertHSVtoRGBEfffRfS0_S0_(f13, Math_fround(.800000011), Math_fround(.800000011), i6, i7, i8);
    i14 = HEAP32[i7 >> 2] | 0;
    i2 = HEAP32[i8 >> 2] | 0;
    HEAP32[i12 >> 2] = HEAP32[i6 >> 2];
    HEAP32[i19 >> 2] = i14;
    HEAP32[i18 >> 2] = i2;
    HEAPF32[i17 >> 2] = Math_fround(1.0);
    __ZN5ImGui14PushStyleColorEiRK6ImVec4(23, i12);
    i2 = i16 << 1;
    if (__ZN5ImGui6ButtonEPKcRK6ImVec2(HEAP32[3688 + (i2 << 2) >> 2] | 0, i11) | 0) HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) == (i15 | 0) ? 0 : i15;
    if (__ZN5ImGui13IsItemHoveredEi(0) | 0) __ZN5ImGui10SetTooltipEPKcz(HEAP32[3688 + ((i2 | 1) << 2) >> 2] | 0, i4);
    __ZN5ImGui13PopStyleColorEi(3);
    i16 = i16 + 1 | 0;
   } while ((i16 | 0) != 4);
   __ZN5ImGui3EndEv();
   STACKTOP = i3;
   return;
  }
 default:
  {
   __ZN5ImGui3EndEv();
   STACKTOP = i3;
   return;
  }
 }
}

function __ZL12NavScoreItemP18ImGuiNavMoveResult6ImRect(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, f11 = f0, f12 = f0, f13 = f0, f14 = f0, f15 = f0, f16 = f0, i17 = 0, i18 = 0, i19 = 0, f20 = f0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, f27 = f0, f28 = f0, f29 = f0, f30 = f0, f31 = f0, f32 = f0, f33 = f0, f34 = f0, f35 = f0, f36 = f0, i37 = 0, i38 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i3;
 i5 = HEAP32[1460598] | 0;
 i6 = HEAP32[i5 + 6392 >> 2] | 0;
 i7 = HEAP32[i5 + 6720 >> 2] | 0;
 if ((i7 | 0) != (HEAP32[i6 + 300 >> 2] | 0)) {
  i8 = 0;
  STACKTOP = i3;
  return i8 | 0;
 }
 i9 = i5 + 6700 | 0;
 HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
 i9 = HEAP32[i6 + 752 >> 2] | 0;
 i10 = HEAP32[i5 + 6644 >> 2] | 0;
 if ((i9 | 0) == (i10 | 0)) {
  if (!((HEAP32[i9 + 8 >> 2] | HEAP32[i6 + 8 >> 2]) & 8388608)) ___assert_fail(34279, 31803, 2359, 34348);
  i9 = i6 + 464 | 0;
  f11 = Math_fround(HEAPF32[i2 >> 2]);
  f12 = Math_fround(HEAPF32[i9 >> 2]);
  if (!(f11 >= f12)) {
   i8 = 0;
   STACKTOP = i3;
   return i8 | 0;
  }
  f13 = Math_fround(HEAPF32[i2 + 4 >> 2]);
  f14 = Math_fround(HEAPF32[i6 + 468 >> 2]);
  if (!(f13 >= f14)) {
   i8 = 0;
   STACKTOP = i3;
   return i8 | 0;
  }
  f15 = Math_fround(HEAPF32[i2 + 8 >> 2]);
  if (!(f15 <= Math_fround(HEAPF32[i6 + 472 >> 2]))) {
   i8 = 0;
   STACKTOP = i3;
   return i8 | 0;
  }
  f16 = Math_fround(HEAPF32[i2 + 12 >> 2]);
  if (!(f16 <= Math_fround(HEAPF32[i6 + 476 >> 2]))) {
   i8 = 0;
   STACKTOP = i3;
   return i8 | 0;
  }
  i17 = i6 + 472 | 0;
  i18 = HEAP32[i17 >> 2] | 0;
  i19 = HEAP32[i17 + 4 >> 2] | 0;
  i17 = i4;
  HEAP32[i17 >> 2] = i18;
  HEAP32[i17 + 4 >> 2] = i19;
  f20 = (HEAP32[tempDoublePtr >> 2] = i19, Math_fround(HEAPF32[tempDoublePtr >> 2]));
  if (f11 < f12) i21 = i9; else {
   i17 = f11 > (HEAP32[tempDoublePtr >> 2] = i18, Math_fround(HEAPF32[tempDoublePtr >> 2]));
   i21 = i17 ? i4 : i2;
  }
  i17 = HEAP32[(f13 < f14 ? i9 : f13 > f20 ? i4 : i2) + 4 >> 2] | 0;
  i22 = i2;
  HEAP32[i22 >> 2] = HEAP32[i21 >> 2];
  HEAP32[i22 + 4 >> 2] = i17;
  i17 = i2 + 8 | 0;
  i22 = i4;
  HEAP32[i22 >> 2] = i18;
  HEAP32[i22 + 4 >> 2] = i19;
  if (f15 < f12) i23 = i9; else {
   i19 = f15 > (HEAP32[tempDoublePtr >> 2] = i18, Math_fround(HEAPF32[tempDoublePtr >> 2]));
   i23 = i19 ? i4 : i17;
  }
  i19 = HEAP32[(f16 < f14 ? i9 : f16 > f20 ? i4 : i17) + 4 >> 2] | 0;
  i4 = i17;
  HEAP32[i4 >> 2] = HEAP32[i23 >> 2];
  HEAP32[i4 + 4 >> 2] = i19;
 }
 if ((HEAP32[i5 + 6776 >> 2] | 0) >>> 0 < 2) {
  i19 = i2 + 4 | 0;
  f20 = Math_fround(HEAPF32[i19 >> 2]);
  f16 = Math_fround(HEAPF32[i6 + 468 >> 2]);
  f14 = Math_fround(HEAPF32[i6 + 476 >> 2]);
  HEAPF32[i19 >> 2] = f20 < f16 ? f16 : f20 > f14 ? f14 : f20;
  i24 = i2 + 8 | 0;
  i25 = i2;
  i26 = i2 + 12 | 0;
  f27 = f16;
  f28 = f14;
  f29 = Math_fround(HEAPF32[i2 >> 2]);
 } else {
  f14 = Math_fround(HEAPF32[i2 >> 2]);
  f16 = Math_fround(HEAPF32[i6 + 464 >> 2]);
  f20 = Math_fround(HEAPF32[i6 + 472 >> 2]);
  f15 = f14 < f16 ? f16 : f14 > f20 ? f20 : f14;
  HEAPF32[i2 >> 2] = f15;
  i19 = i2 + 8 | 0;
  i24 = i19;
  i25 = i2;
  i26 = i19;
  f27 = f16;
  f28 = f20;
  f29 = f15;
 }
 f15 = Math_fround(HEAPF32[i26 >> 2]);
 HEAPF32[i26 >> 2] = f15 < f27 ? f27 : f15 > f28 ? f28 : f15;
 f15 = Math_fround(HEAPF32[i24 >> 2]);
 f28 = Math_fround(HEAPF32[i5 + 6684 >> 2]);
 f27 = Math_fround(HEAPF32[i5 + 6692 >> 2]);
 if (f15 < f28) f30 = Math_fround(f15 - f28); else if (f27 < f29) f30 = Math_fround(f29 - f27); else f30 = Math_fround(0.0);
 f29 = Math_fround(HEAPF32[i2 + 4 >> 2]);
 f20 = Math_fround(HEAPF32[i2 + 12 >> 2]);
 f16 = Math_fround(f20 - f29);
 f14 = Math_fround(f29 + Math_fround(f16 * Math_fround(.200000003)));
 f12 = Math_fround(f29 + Math_fround(f16 * Math_fround(.800000011)));
 f16 = Math_fround(HEAPF32[i5 + 6688 >> 2]);
 f13 = Math_fround(HEAPF32[i5 + 6696 >> 2]);
 f11 = Math_fround(f13 - f16);
 f31 = Math_fround(f16 + Math_fround(f11 * Math_fround(.200000003)));
 f32 = Math_fround(f16 + Math_fround(f11 * Math_fround(.800000011)));
 if (f12 < f31) f33 = Math_fround(f12 - f31); else if (f32 < f14) f33 = Math_fround(f14 - f32); else f33 = Math_fround(0.0);
 i2 = f33 != Math_fround(0.0);
 i24 = f30 != Math_fround(0.0) & i2;
 f32 = Math_fround(f30 / Math_fround(1.0e3));
 i26 = f30 > Math_fround(0.0);
 f14 = Math_fround(f32 + (i26 ? Math_fround(1.0) : Math_fround(-1.0)));
 f32 = i24 ? f14 : f30;
 f30 = Math_fround(Math_abs(Math_fround(f32)));
 f14 = Math_fround(Math_abs(Math_fround(f33)));
 f31 = Math_fround(f14 + f30);
 f12 = Math_fround(Math_fround(Math_fround(HEAPF32[i25 >> 2]) + f15) - Math_fround(f28 + f27));
 f27 = Math_fround(Math_fround(f29 + f20) - Math_fround(f16 + f13));
 f13 = Math_fround(Math_abs(Math_fround(f12)));
 f16 = Math_fround(Math_abs(Math_fround(f27)));
 f20 = Math_fround(f13 + f16);
 do if (i2 | f32 != Math_fround(0.0)) {
  i25 = f32 > Math_fround(0.0) & 1;
  i24 = f33 > Math_fround(0.0);
  f34 = f31;
  f35 = f33;
  f36 = f32;
  i37 = f30 > f14 ? i25 : i24 ? 3 : 2;
 } else if (f12 != Math_fround(0.0) | f27 != Math_fround(0.0)) {
  i24 = f12 > Math_fround(0.0) & 1;
  i25 = f27 > Math_fround(0.0);
  f34 = f20;
  f35 = f27;
  f36 = f12;
  i37 = f13 > f16 ? i24 : i25 ? 3 : 2;
  break;
 } else {
  f34 = Math_fround(0.0);
  f35 = Math_fround(0.0);
  f36 = Math_fround(0.0);
  i37 = (HEAP32[i6 + 256 >> 2] | 0) >>> 0 >= (HEAP32[i5 + 6648 >> 2] | 0) >>> 0 & 1;
  break;
 } while (0);
 i6 = HEAP32[i5 + 6768 >> 2] | 0;
 i5 = i1 + 8 | 0;
 f16 = Math_fround(HEAPF32[i5 >> 2]);
 do if ((i37 | 0) == (i6 | 0)) {
  if (f31 < f16) {
   HEAPF32[i5 >> 2] = f31;
   HEAPF32[i1 + 12 >> 2] = f20;
   i8 = 1;
   STACKTOP = i3;
   return i8 | 0;
  }
  if (f31 == f16) {
   i2 = i1 + 12 | 0;
   f13 = Math_fround(HEAPF32[i2 >> 2]);
   if (f20 < f13) {
    HEAPF32[i2 >> 2] = f20;
    i38 = 1;
    break;
   }
   if (f20 == f13) if (((i37 & -2 | 0) == 2 ? f33 : f32) < Math_fround(0.0)) i38 = 1; else i38 = 0; else i38 = 0;
  } else i38 = 0;
 } else i38 = 0; while (0);
 if (!(f16 == Math_fround(3402823469999999843913219.0e14))) {
  i8 = i38;
  STACKTOP = i3;
  return i8 | 0;
 }
 i37 = i1 + 16 | 0;
 if (!((i7 | 0) == 1 ? f34 < Math_fround(HEAPF32[i37 >> 2]) : 0)) {
  i8 = i38;
  STACKTOP = i3;
  return i8 | 0;
 }
 if (HEAP32[i10 + 8 >> 2] & 268435456 | 0) {
  i8 = i38;
  STACKTOP = i3;
  return i8 | 0;
 }
 if (!(f36 < Math_fround(0.0) & (i6 | 0) == 0)) if (!(f36 > Math_fround(0.0) & (i6 | 0) == 1)) if (!(f35 < Math_fround(0.0) & (i6 | 0) == 2)) if (!(f35 > Math_fround(0.0) & (i6 | 0) == 3)) {
  i8 = i38;
  STACKTOP = i3;
  return i8 | 0;
 }
 HEAPF32[i37 >> 2] = f34;
 i8 = 1;
 STACKTOP = i3;
 return i8 | 0;
}

function _png_create_colormap_entry(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0;
 i8 = 0;
 i9 = HEAP32[i1 >> 2] | 0;
 i10 = i9 + 16 | 0;
 i11 = HEAP32[i10 >> 2] | 0;
 i12 = i11 & 4;
 i13 = (i12 | 0) != 0;
 i14 = i12 >>> 2;
 i12 = i14 + 1 | 0;
 i15 = ((i3 | 0) != (i4 | 0) | (i4 | 0) != (i5 | 0)) & (i11 & 2 | 0) == 0;
 if (i2 >>> 0 > 255) _png_error(HEAP32[HEAP32[i9 >> 2] >> 2] | 0, 66493);
 L4 : do if ((i7 | 0) == 3) {
  i11 = i1 + 32 | 0;
  i16 = HEAP32[i11 >> 2] | 0;
  if (!i16) {
   i17 = HEAP32[(HEAP32[HEAP32[i9 >> 2] >> 2] | 0) + 824 >> 2] | 0;
   if (!(_png_gamma_significant(i17) | 0)) {
    HEAP32[i11 >> 2] = 4;
    i8 = 16;
    break;
   }
   do if ((i17 | 0) < 1e5) {
    if (i17 | 0) if (_png_gamma_significant(((i17 * 11 | 0) + 2 | 0) / 5 | 0) | 0) break;
    HEAP32[i11 >> 2] = 1;
    i8 = 17;
    break L4;
   } while (0);
   HEAP32[i11 >> 2] = 3;
   i18 = _png_reciprocal(i17) | 0;
   HEAP32[i1 + 36 >> 2] = i18;
   i19 = HEAP32[i11 >> 2] | 0;
   i8 = 12;
  } else {
   i19 = i16;
   i8 = 12;
  }
 } else {
  i19 = i7;
  i8 = 12;
 } while (0);
 L16 : do if ((i8 | 0) == 12) {
  switch (i19 | 0) {
  case 4:
   {
    i8 = 16;
    break L16;
    break;
   }
  case 1:
   {
    i8 = 17;
    break L16;
    break;
   }
  case 2:
   {
    i20 = i4;
    i21 = i5;
    i22 = i6;
    i23 = i3;
    i8 = 19;
    break L16;
    break;
   }
  case 3:
   break;
  default:
   {
    i24 = i3;
    i25 = i4;
    i26 = i5;
    i27 = i6;
    i28 = i19;
    break L16;
   }
  }
  i7 = HEAP32[i1 + 36 >> 2] | 0;
  i18 = _png_gamma_16bit_correct(i3 * 257 | 0, i7) | 0;
  i29 = i18 & 65535;
  i30 = _png_gamma_16bit_correct(i4 * 257 | 0, i7) | 0;
  i31 = i30 & 65535;
  i32 = _png_gamma_16bit_correct(i5 * 257 | 0, i7) | 0;
  i7 = i32 & 65535;
  if (i13 | i15) {
   i20 = i31;
   i21 = i7;
   i22 = i6 * 257 | 0;
   i23 = i29;
   i8 = 19;
   break;
  } else {
   i33 = (i29 * 255 | 0) >>> 15;
   i29 = (((Math_imul(HEAPU8[58335 + i33 >> 0] | 0, i18 * 255 & 32767) | 0) >>> 12) + (HEAPU16[21850 + (i33 << 1) >> 1] | 0) | 0) >>> 8 & 255;
   i33 = (i31 * 255 | 0) >>> 15;
   i31 = (((Math_imul(HEAPU8[58335 + i33 >> 0] | 0, i30 * 255 & 32767) | 0) >>> 12) + (HEAPU16[21850 + (i33 << 1) >> 1] | 0) | 0) >>> 8 & 255;
   i33 = (i7 * 255 | 0) >>> 15;
   i24 = i29;
   i25 = i31;
   i26 = (((Math_imul(HEAPU8[58335 + i33 >> 0] | 0, i32 * 255 & 32767) | 0) >>> 12) + (HEAPU16[21850 + (i33 << 1) >> 1] | 0) | 0) >>> 8 & 255;
   i27 = i6;
   i28 = 1;
   break;
  }
 } while (0);
 if ((i8 | 0) == 16) {
  i20 = i4 * 257 | 0;
  i21 = i5 * 257 | 0;
  i22 = i6 * 257 | 0;
  i23 = i3 * 257 | 0;
  i8 = 19;
 } else if ((i8 | 0) == 17) if (i13 | i15) {
  i20 = HEAPU16[21338 + (i4 << 1) >> 1] | 0;
  i21 = HEAPU16[21338 + (i5 << 1) >> 1] | 0;
  i22 = i6 * 257 | 0;
  i23 = HEAPU16[21338 + (i3 << 1) >> 1] | 0;
  i8 = 19;
 } else {
  i24 = i3;
  i25 = i4;
  i26 = i5;
  i27 = i6;
  i28 = 1;
 }
 do if ((i8 | 0) == 19) {
  if (!i15) {
   if (i14 | 0) {
    i24 = i23;
    i25 = i20;
    i26 = i21;
    i27 = i22;
    i28 = 2;
    break;
   }
   i6 = i23 * 255 | 0;
   i5 = i6 >>> 15;
   i4 = (((Math_imul(i6 & 32767, HEAPU8[58335 + i5 >> 0] | 0) | 0) >>> 12) + (HEAPU16[21850 + (i5 << 1) >> 1] | 0) | 0) >>> 8 & 255;
   i5 = i20 * 255 | 0;
   i6 = i5 >>> 15;
   i3 = (((Math_imul(i5 & 32767, HEAPU8[58335 + i6 >> 0] | 0) | 0) >>> 12) + (HEAPU16[21850 + (i6 << 1) >> 1] | 0) | 0) >>> 8 & 255;
   i6 = i21 * 255 | 0;
   i5 = i6 >>> 15;
   i24 = i4;
   i25 = i3;
   i26 = (((Math_imul(i6 & 32767, HEAPU8[58335 + i5 >> 0] | 0) | 0) >>> 12) + (HEAPU16[21850 + (i5 << 1) >> 1] | 0) | 0) >>> 8 & 255;
   i27 = ((i22 * 255 | 0) + 32895 | 0) >>> 16;
   i28 = 1;
   break;
  }
  i5 = (i20 * 23434 | 0) + (i23 * 6968 | 0) + (i21 * 2366 | 0) | 0;
  if (i13) {
   i6 = (i5 + 16384 | 0) >>> 15;
   i24 = i6;
   i25 = i6;
   i26 = i6;
   i27 = i22;
   i28 = 2;
   break;
  } else {
   i6 = (((i5 + 128 | 0) >>> 8) * 255 | 0) + 64 | 0;
   i5 = i6 >>> 22;
   i3 = (((Math_imul(i6 >>> 7 & 32767, HEAPU8[58335 + i5 >> 0] | 0) | 0) >>> 12) + (HEAPU16[21850 + (i5 << 1) >> 1] | 0) | 0) >>> 8 & 255;
   i24 = i3;
   i25 = i3;
   i26 = i3;
   i27 = ((i22 * 255 | 0) + 32895 | 0) >>> 16;
   i28 = 1;
   break;
  }
 } while (0);
 if ((i28 | 0) != (i12 | 0)) _png_error(HEAP32[HEAP32[i9 >> 2] >> 2] | 0, 66522);
 i9 = HEAP32[i10 >> 2] | 0;
 i10 = (i9 & 33 | 0) == 33;
 i12 = i10 & 1;
 i28 = i9 >>> 3 & 2;
 i22 = i1 + 12 | 0;
 if (!i13) {
  i13 = (HEAP32[i22 >> 2] | 0) + (Math_imul((i9 & 3) + 1 | 0, i2) | 0) | 0;
  switch (i9 & 3) {
  case 3:
   {
    HEAP8[i13 + (i10 ? 0 : 3) >> 0] = i27;
    i8 = 42;
    break;
   }
  case 2:
   {
    i8 = 42;
    break;
   }
  case 1:
   {
    i34 = i12;
    i35 = i27;
    i36 = i12 ^ 1;
    i37 = i25;
    i8 = 44;
    break;
   }
  case 0:
   {
    i38 = i12;
    i39 = i25;
    break;
   }
  default:
   {}
  }
  if ((i8 | 0) == 42) {
   i1 = i28 | i12;
   HEAP8[i13 + (i1 ^ 2) >> 0] = i26;
   i34 = i1;
   i35 = i25;
   i36 = i10 ? 2 : 1;
   i37 = i24;
   i8 = 44;
  }
  if ((i8 | 0) == 44) {
   HEAP8[i13 + i36 >> 0] = i35;
   i38 = i34;
   i39 = i37;
  }
  HEAP8[i13 + i38 >> 0] = i39;
  return;
 }
 i39 = (HEAP32[i22 >> 2] | 0) + ((Math_imul((i9 & 3) + 1 | 0, i2) | 0) << 1) | 0;
 switch (i9 & 3) {
 case 3:
  {
   HEAP16[i39 + ((i10 ? 0 : 3) << 1) >> 1] = i27;
   i8 = 30;
   break;
  }
 case 2:
  {
   i8 = 30;
   break;
  }
 case 1:
  {
   HEAP16[i39 + ((i12 ^ 1) << 1) >> 1] = i27;
   i8 = 35;
   break;
  }
 case 0:
  {
   i8 = 35;
   break;
  }
 default:
  {}
 }
 if ((i8 | 0) == 30) {
  if (i27 >>> 0 < 65535) if (!i27) {
   i40 = 0;
   i41 = 0;
   i42 = 0;
  } else {
   i40 = (((Math_imul(i24, i27) | 0) + 32767 | 0) >>> 0) / 65535 | 0;
   i41 = (((Math_imul(i25, i27) | 0) + 32767 | 0) >>> 0) / 65535 | 0;
   i42 = (((Math_imul(i26, i27) | 0) + 32767 | 0) >>> 0) / 65535 | 0;
  } else {
   i40 = i24;
   i41 = i25;
   i42 = i26;
  }
  i26 = i28 | i12;
  HEAP16[i39 + ((i26 ^ 2) << 1) >> 1] = i42;
  HEAP16[i39 + ((i10 ? 2 : 1) << 1) >> 1] = i41;
  i43 = i26;
  i44 = i40;
 } else if ((i8 | 0) == 35) if (i27 >>> 0 < 65535) if (!i27) {
  i43 = i12;
  i44 = 0;
 } else {
  i43 = i12;
  i44 = (((Math_imul(i25, i27) | 0) + 32767 | 0) >>> 0) / 65535 | 0;
 } else {
  i43 = i12;
  i44 = i25;
 }
 HEAP16[i39 + (i43 << 1) >> 1] = i44;
 return;
}

function __ZN5ImGui6RenderEv() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, f22 = f0, f23 = f0, f24 = f0, f25 = f0, f26 = f0, f27 = f0, f28 = f0, i29 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 i2 = i1 + 64 | 0;
 i3 = i1 + 56 | 0;
 i4 = i1 + 24 | 0;
 i5 = i1 + 16 | 0;
 i6 = i1 + 8 | 0;
 i7 = i1;
 i8 = HEAP32[1460598] | 0;
 if (!(HEAP8[i8 >> 0] | 0)) ___assert_fail(33723, 31803, 4360, 37124);
 i9 = HEAP32[i8 + 6332 >> 2] | 0;
 i10 = i8 + 6328 | 0;
 if ((i9 | 0) == (HEAP32[i10 >> 2] | 0)) i11 = i9; else {
  __ZN5ImGui8EndFrameEv();
  i11 = HEAP32[i10 >> 2] | 0;
 }
 HEAP32[i8 + 6336 >> 2] = i11;
 HEAP32[i8 + 892 >> 2] = 0;
 i11 = i8 + 888 | 0;
 HEAP32[i11 >> 2] = 0;
 i10 = i8 + 884 | 0;
 HEAP32[i10 >> 2] = 0;
 i9 = i8 + 6924 | 0;
 __ZN17ImDrawDataBuilder5ClearEv(i9);
 i12 = HEAP32[i8 + 6704 >> 2] | 0;
 if (!i12) i13 = 0; else i13 = (HEAP32[i12 + 8 >> 2] & 8192 | 0) == 0 ? i12 : 0;
 i12 = i8 + 6340 | 0;
 i14 = HEAP32[i12 >> 2] | 0;
 L10 : do if (i14 | 0) {
  i15 = i8 + 6348 | 0;
  i16 = 0;
  i17 = i14;
  while (1) {
   if ((i17 | 0) <= (i16 | 0)) break;
   i18 = HEAP32[(HEAP32[i15 >> 2] | 0) + (i16 << 2) >> 2] | 0;
   do if (HEAP8[i18 + 118 >> 0] | 0) if (!(HEAP32[i18 + 164 >> 2] | 0)) {
    i19 = HEAP32[i18 + 8 >> 2] | 0;
    if (!((i18 | 0) == (i13 | 0) | (i19 & 16777216 | 0) != 0)) {
     i20 = HEAP32[1460598] | 0;
     i21 = i20 + 892 | 0;
     HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + 1;
     if (!(i19 & 33554432)) {
      __ZL19AddWindowToDrawDataP8ImVectorIP10ImDrawListEP11ImGuiWindow(i20 + 6924 | 0, i18);
      break;
     } else {
      __ZL19AddWindowToDrawDataP8ImVectorIP10ImDrawListEP11ImGuiWindow(i20 + 6936 | 0, i18);
      break;
     }
    }
   } while (0);
   i16 = i16 + 1 | 0;
   i17 = HEAP32[i12 >> 2] | 0;
   if ((i16 | 0) == (i17 | 0)) break L10;
  }
  ___assert_fail(56841, 56850, 1235, 56909);
 } while (0);
 do if (i13 | 0) if (HEAP8[i13 + 118 >> 0] | 0) if (!(HEAP32[i13 + 164 >> 2] | 0)) {
  i12 = HEAP32[1460598] | 0;
  i14 = i12 + 892 | 0;
  HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
  if (!(HEAP32[i13 + 8 >> 2] & 33554432)) {
   __ZL19AddWindowToDrawDataP8ImVectorIP10ImDrawListEP11ImGuiWindow(i12 + 6924 | 0, i13);
   break;
  } else {
   __ZL19AddWindowToDrawDataP8ImVectorIP10ImDrawListEP11ImGuiWindow(i12 + 6936 | 0, i13);
   break;
  }
 } while (0);
 __ZN17ImDrawDataBuilder22FlattenIntoSingleLayerEv(i9);
 i13 = i2 + 4 | 0;
 HEAPF32[i13 >> 2] = Math_fround(0.0);
 HEAPF32[i2 >> 2] = Math_fround(0.0);
 i12 = i3 + 4 | 0;
 HEAPF32[i12 >> 2] = Math_fround(0.0);
 HEAPF32[i3 >> 2] = Math_fround(0.0);
 HEAP32[i4 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 HEAP32[i4 + 12 >> 2] = 0;
 HEAP32[i4 + 16 >> 2] = 0;
 HEAP32[i4 + 20 >> 2] = 0;
 HEAP32[i4 + 24 >> 2] = 0;
 HEAP32[i4 + 28 >> 2] = 0;
 if (HEAP8[i8 + 236 >> 0] | 0) {
  i14 = i8 + 144 | 0;
  i17 = i4 + 16 | 0;
  if (__ZN11ImFontAtlas21GetMouseCursorTexDataEiP6ImVec2S1_S1_S1_(HEAP32[i14 >> 2] | 0, HEAP32[i8 + 7068 >> 2] | 0, i2, i3, i4, i17) | 0) {
   f22 = Math_fround(HEAPF32[i8 + 212 >> 2]);
   f23 = Math_fround(f22 - Math_fround(HEAPF32[i2 >> 2]));
   f22 = Math_fround(HEAPF32[i8 + 216 >> 2]);
   f24 = Math_fround(f22 - Math_fround(HEAPF32[i13 >> 2]));
   HEAPF32[i5 >> 2] = f23;
   i13 = i5 + 4 | 0;
   HEAPF32[i13 >> 2] = f24;
   i2 = HEAP32[(HEAP32[i14 >> 2] | 0) + 4 >> 2] | 0;
   f22 = Math_fround(HEAPF32[i8 + 5496 >> 2]);
   i14 = i8 + 6952 | 0;
   __ZN10ImDrawList13PushTextureIDEPv(i14, i2);
   f25 = Math_fround(f22 + f23);
   f26 = Math_fround(Math_fround(f22 * Math_fround(0.0)) + f24);
   HEAPF32[i6 >> 2] = f25;
   HEAPF32[i6 + 4 >> 2] = f26;
   f27 = Math_fround(f22 * Math_fround(HEAPF32[i3 >> 2]));
   f28 = Math_fround(f25 + f27);
   f27 = Math_fround(f26 + Math_fround(f22 * Math_fround(HEAPF32[i12 >> 2])));
   HEAPF32[i7 >> 2] = f28;
   HEAPF32[i7 + 4 >> 2] = f27;
   i16 = i4 + 24 | 0;
   __ZN10ImDrawList8AddImageEPvRK6ImVec2S3_S3_S3_j(i14, i2, i6, i7, i17, i16, 805306368);
   f27 = Math_fround(Math_fround(f22 * Math_fround(2.0)) + f23);
   HEAPF32[i6 >> 2] = f27;
   HEAPF32[i6 + 4 >> 2] = f26;
   f28 = Math_fround(f22 * Math_fround(HEAPF32[i3 >> 2]));
   f25 = Math_fround(f27 + f28);
   f28 = Math_fround(f26 + Math_fround(f22 * Math_fround(HEAPF32[i12 >> 2])));
   HEAPF32[i7 >> 2] = f25;
   HEAPF32[i7 + 4 >> 2] = f28;
   __ZN10ImDrawList8AddImageEPvRK6ImVec2S3_S3_S3_j(i14, i2, i6, i7, i17, i16, 805306368);
   f28 = Math_fround(f22 * Math_fround(HEAPF32[i3 >> 2]));
   f25 = Math_fround(f28 + f23);
   f23 = Math_fround(Math_fround(f22 * Math_fround(HEAPF32[i12 >> 2])) + f24);
   HEAPF32[i6 >> 2] = f25;
   HEAPF32[i6 + 4 >> 2] = f23;
   __ZN10ImDrawList8AddImageEPvRK6ImVec2S3_S3_S3_j(i14, i2, i5, i6, i17, i16, -16777216);
   f23 = Math_fround(f22 * Math_fround(HEAPF32[i3 >> 2]));
   f25 = Math_fround(f22 * Math_fround(HEAPF32[i12 >> 2]));
   f22 = Math_fround(f23 + Math_fround(HEAPF32[i5 >> 2]));
   f23 = Math_fround(f25 + Math_fround(HEAPF32[i13 >> 2]));
   HEAPF32[i6 >> 2] = f22;
   HEAPF32[i6 + 4 >> 2] = f23;
   __ZN10ImDrawList8AddImageEPvRK6ImVec2S3_S3_S3_j(i14, i2, i5, i6, i4, i4 + 8 | 0, -1);
   __ZN10ImDrawList12PopTextureIDEv(i14);
  }
 }
 if (HEAP32[i8 + 6976 >> 2] | 0) __ZL21AddDrawListToDrawDataP8ImVectorIP10ImDrawListES1_(i9, i8 + 6952 | 0);
 i14 = i8 + 6888 | 0;
 i4 = HEAP32[1460598] | 0;
 if (!i4) ___assert_fail(35015, 31803, 2854, 35120);
 HEAP8[i14 >> 0] = 1;
 i6 = HEAP32[i9 >> 2] | 0;
 i9 = (i6 | 0) > 0;
 if (i9) i29 = HEAP32[i8 + 6932 >> 2] | 0; else i29 = 0;
 HEAP32[i8 + 6892 >> 2] = i29;
 HEAP32[i8 + 6896 >> 2] = i6;
 i29 = i8 + 6900 | 0;
 i5 = i8 + 6904 | 0;
 HEAP32[i29 >> 2] = 0;
 HEAP32[i29 + 4 >> 2] = 0;
 HEAP32[i29 + 8 >> 2] = 0;
 HEAP32[i29 + 12 >> 2] = 0;
 i2 = i4 + 12 | 0;
 i4 = HEAP32[i2 + 4 >> 2] | 0;
 i13 = i8 + 6916 | 0;
 HEAP32[i13 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i13 + 4 >> 2] = i4;
 if (!i9) {
  HEAP32[i10 >> 2] = 0;
  HEAP32[i11 >> 2] = 0;
  STACKTOP = i1;
  return;
 }
 i4 = HEAP32[i8 + 6932 >> 2] | 0;
 i13 = 0;
 i2 = 0;
 i12 = 0;
 do {
  i3 = HEAP32[i4 + (i13 << 2) >> 2] | 0;
  i2 = (HEAP32[i3 + 24 >> 2] | 0) + i2 | 0;
  i12 = (HEAP32[i3 + 12 >> 2] | 0) + i12 | 0;
  i13 = i13 + 1 | 0;
 } while ((i13 | 0) != (i6 | 0));
 HEAP32[i5 >> 2] = i2;
 HEAP32[i29 >> 2] = i12;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i11 >> 2] = i12;
 if (!i9) {
  STACKTOP = i1;
  return;
 }
 i9 = HEAP32[i8 + 208 >> 2] | 0;
 if (!i9) {
  STACKTOP = i1;
  return;
 }
 FUNCTION_TABLE_vi[i9 & 255](i14);
 STACKTOP = i1;
 return;
}

function __Z32ImGui_ImplOpenGL3_RenderDrawDataP10ImDrawData(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, f20 = f0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, f28 = f0, f29 = f0, f30 = f0, f31 = f0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, f40 = f0, f41 = f0, f42 = f0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160);
 i3 = i2 + 148 | 0;
 i4 = i2 + 144 | 0;
 i5 = i2 + 140 | 0;
 i6 = i2 + 132 | 0;
 i7 = i2 + 128 | 0;
 i8 = i2 + 112 | 0;
 i9 = i2 + 96 | 0;
 i10 = i2 + 92 | 0;
 i11 = i2 + 88 | 0;
 i12 = i2 + 84 | 0;
 i13 = i2 + 80 | 0;
 i14 = i2 + 76 | 0;
 i15 = i2 + 72 | 0;
 i16 = i2 + 8 | 0;
 i17 = i2;
 i18 = __ZN5ImGui5GetIOEv() | 0;
 i19 = i1 + 28 | 0;
 f20 = Math_fround(HEAPF32[i19 >> 2]);
 i21 = i18 + 156 | 0;
 i22 = ~~Math_fround(f20 * Math_fround(HEAPF32[i21 >> 2]));
 i23 = i1 + 32 | 0;
 f20 = Math_fround(HEAPF32[i23 >> 2]);
 i24 = ~~Math_fround(f20 * Math_fround(HEAPF32[i18 + 160 >> 2]));
 if ((i22 | 0) < 1 | (i24 | 0) < 1) {
  STACKTOP = i2;
  return;
 }
 __ZN10ImDrawData14ScaleClipRectsERK6ImVec2(i1, i21);
 _glGetIntegerv(34016, i3 | 0);
 _glActiveTexture(33984);
 _glGetIntegerv(35725, i4 | 0);
 _glGetIntegerv(32873, i5 | 0);
 _glGetIntegerv(35097, i2 + 136 | 0);
 _glGetIntegerv(34964, i6 | 0);
 _glGetIntegerv(34229, i7 | 0);
 _glGetIntegerv(2978, i8 | 0);
 _glGetIntegerv(3088, i9 | 0);
 _glGetIntegerv(32969, i10 | 0);
 _glGetIntegerv(32968, i11 | 0);
 _glGetIntegerv(32971, i12 | 0);
 _glGetIntegerv(32970, i13 | 0);
 _glGetIntegerv(32777, i14 | 0);
 _glGetIntegerv(34877, i15 | 0);
 i21 = _glIsEnabled(3042) | 0;
 i18 = _glIsEnabled(2884) | 0;
 i25 = _glIsEnabled(2929) | 0;
 i26 = _glIsEnabled(3089) | 0;
 _glEnable(3042);
 _glBlendEquation(32774);
 _glBlendFunc(770, 771);
 _glDisable(2884);
 _glDisable(2929);
 _glEnable(3089);
 _glViewport(0, 0, i22 | 0, i24 | 0);
 i27 = i1 + 20 | 0;
 f20 = Math_fround(HEAPF32[i27 >> 2]);
 f28 = Math_fround(f20 + Math_fround(HEAPF32[i19 >> 2]));
 i19 = i1 + 24 | 0;
 f29 = Math_fround(HEAPF32[i19 >> 2]);
 f30 = Math_fround(f29 + Math_fround(HEAPF32[i23 >> 2]));
 f31 = Math_fround(Math_fround(2.0) / Math_fround(f28 - f20));
 HEAPF32[i16 >> 2] = f31;
 i23 = i16 + 4 | 0;
 f31 = Math_fround(Math_fround(2.0) / Math_fround(f29 - f30));
 HEAP32[i23 >> 2] = 0;
 HEAP32[i23 + 4 >> 2] = 0;
 HEAP32[i23 + 8 >> 2] = 0;
 HEAP32[i23 + 12 >> 2] = 0;
 HEAPF32[i16 + 20 >> 2] = f31;
 i23 = i16 + 24 | 0;
 HEAP32[i23 >> 2] = 0;
 HEAP32[i23 + 4 >> 2] = 0;
 HEAP32[i23 + 8 >> 2] = 0;
 HEAP32[i23 + 12 >> 2] = 0;
 HEAPF32[i16 + 40 >> 2] = Math_fround(-1.0);
 HEAPF32[i16 + 44 >> 2] = Math_fround(0.0);
 f31 = Math_fround(Math_fround(f20 + f28) / Math_fround(f20 - f28));
 HEAPF32[i16 + 48 >> 2] = f31;
 f31 = Math_fround(Math_fround(f29 + f30) / Math_fround(f30 - f29));
 HEAPF32[i16 + 52 >> 2] = f31;
 HEAPF32[i16 + 56 >> 2] = Math_fround(0.0);
 HEAPF32[i16 + 60 >> 2] = Math_fround(1.0);
 _glUseProgram(HEAP32[1460871] | 0);
 _glUniform1i(HEAP32[1460875] | 0, 0);
 _glUniformMatrix4fv(HEAP32[1460876] | 0, 1, 0, i16 | 0);
 HEAP32[i17 >> 2] = 0;
 _glGenVertexArrays(1, i17 | 0);
 _glBindVertexArray(HEAP32[i17 >> 2] | 0);
 _glBindBuffer(34962, HEAP32[1460869] | 0);
 _glEnableVertexAttribArray(HEAP32[1460877] | 0);
 _glEnableVertexAttribArray(HEAP32[1460878] | 0);
 _glEnableVertexAttribArray(HEAP32[1460879] | 0);
 _glVertexAttribPointer(HEAP32[1460877] | 0, 2, 5126, 0, 20, 0);
 _glVertexAttribPointer(HEAP32[1460878] | 0, 2, 5126, 0, 20, 8);
 _glVertexAttribPointer(HEAP32[1460879] | 0, 4, 5121, 1, 20, 16);
 f31 = Math_fround(HEAPF32[i27 >> 2]);
 f29 = Math_fround(HEAPF32[i19 >> 2]);
 i19 = i1 + 8 | 0;
 L4 : do if ((HEAP32[i19 >> 2] | 0) > 0) {
  i27 = i1 + 4 | 0;
  f30 = Math_fround(i22 | 0);
  f28 = Math_fround(i24 | 0);
  i16 = 0;
  L6 : while (1) {
   i23 = HEAP32[(HEAP32[i27 >> 2] | 0) + (i16 << 2) >> 2] | 0;
   _glBindBuffer(34962, HEAP32[1460869] | 0);
   _glBufferData(34962, (HEAP32[i23 + 24 >> 2] | 0) * 20 | 0, HEAP32[i23 + 32 >> 2] | 0, 35040);
   _glBindBuffer(34963, HEAP32[1460870] | 0);
   _glBufferData(34963, HEAP32[i23 + 12 >> 2] << 1 | 0, HEAP32[i23 + 20 >> 2] | 0, 35040);
   i32 = HEAP32[i23 >> 2] | 0;
   if ((i32 | 0) > 0) {
    i33 = i23 + 8 | 0;
    i34 = 0;
    i35 = 0;
    i36 = i32;
    while (1) {
     if ((i36 | 0) <= (i34 | 0)) break L6;
     i32 = HEAP32[i33 >> 2] | 0;
     i37 = i32 + (i34 << 5) | 0;
     i38 = i37 | 0;
     i39 = HEAP32[i37 + 24 >> 2] | 0;
     if (!i39) {
      i37 = i32 + (i34 << 5) | 0;
      f20 = Math_fround(Math_fround(HEAPF32[i37 + 4 >> 2]) - f31);
      f40 = Math_fround(Math_fround(HEAPF32[i37 + 8 >> 2]) - f29);
      f41 = Math_fround(Math_fround(HEAPF32[i37 + 12 >> 2]) - f31);
      f42 = Math_fround(Math_fround(HEAPF32[i37 + 16 >> 2]) - f29);
      if (f20 < f30) if (!(!(f40 < f28) | !(f41 >= Math_fround(0.0)) | !(f42 >= Math_fround(0.0)))) {
       _glScissor(~~f20 | 0, ~~Math_fround(f28 - f42) | 0, ~~Math_fround(f41 - f20) | 0, ~~Math_fround(f42 - f40) | 0);
       _glBindTexture(3553, HEAP32[i32 + (i34 << 5) + 20 >> 2] | 0);
       _glDrawElements(4, HEAP32[i38 >> 2] | 0, 5123, i35 | 0);
      }
     } else FUNCTION_TABLE_vii[i39 & 63](i23, i38);
     i34 = i34 + 1 | 0;
     i36 = HEAP32[i23 >> 2] | 0;
     if ((i34 | 0) >= (i36 | 0)) break; else i35 = i35 + (HEAP32[i38 >> 2] << 1) | 0;
    }
   }
   i16 = i16 + 1 | 0;
   if ((i16 | 0) >= (HEAP32[i19 >> 2] | 0)) break L4;
  }
  ___assert_fail(56841, 56850, 1236, 56909);
 } while (0);
 _glDeleteVertexArrays(1, i17 | 0);
 _glUseProgram(HEAP32[i4 >> 2] | 0);
 _glBindTexture(3553, HEAP32[i5 >> 2] | 0);
 _glActiveTexture(HEAP32[i3 >> 2] | 0);
 _glBindVertexArray(HEAP32[i7 >> 2] | 0);
 _glBindBuffer(34962, HEAP32[i6 >> 2] | 0);
 _glBlendEquationSeparate(HEAP32[i14 >> 2] | 0, HEAP32[i15 >> 2] | 0);
 _glBlendFuncSeparate(HEAP32[i10 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP32[i12 >> 2] | 0, HEAP32[i13 >> 2] | 0);
 if (!(i21 << 24 >> 24)) _glDisable(3042); else _glEnable(3042);
 if (!(i18 << 24 >> 24)) _glDisable(2884); else _glEnable(2884);
 if (!(i25 << 24 >> 24)) _glDisable(2929); else _glEnable(2929);
 if (!(i26 << 24 >> 24)) _glDisable(3089); else _glEnable(3089);
 _glViewport(HEAP32[i8 >> 2] | 0, HEAP32[i8 + 4 >> 2] | 0, HEAP32[i8 + 8 >> 2] | 0, HEAP32[i8 + 12 >> 2] | 0);
 _glScissor(HEAP32[i9 >> 2] | 0, HEAP32[i9 + 4 >> 2] | 0, HEAP32[i9 + 8 >> 2] | 0, HEAP32[i9 + 12 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function __ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0;
 i8 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 i10 = i9;
 i11 = (i4 - i3 | 0) / 12 | 0;
 if (i11 >>> 0 > 100) {
  i12 = _malloc(i11) | 0;
  if (!i12) __ZSt17__throw_bad_allocv(); else {
   i13 = i12;
   i14 = i12;
  }
 } else {
  i13 = i10;
  i14 = 0;
 }
 i10 = i11;
 i11 = i3;
 i12 = i13;
 i15 = 0;
 while (1) {
  if ((i11 | 0) == (i4 | 0)) break;
  i16 = HEAP8[i11 + 11 >> 0] | 0;
  if (i16 << 24 >> 24 < 0) i17 = HEAP32[i11 + 4 >> 2] | 0; else i17 = i16 & 255;
  if (!i17) {
   HEAP8[i12 >> 0] = 2;
   i18 = i10 + -1 | 0;
   i19 = i15 + 1 | 0;
  } else {
   HEAP8[i12 >> 0] = 1;
   i18 = i10;
   i19 = i15;
  }
  i10 = i18;
  i11 = i11 + 12 | 0;
  i12 = i12 + 1 | 0;
  i15 = i19;
 }
 i19 = 0;
 i12 = i10;
 i10 = i15;
 L17 : while (1) {
  i15 = HEAP32[i1 >> 2] | 0;
  do if (!i15) i20 = 1; else {
   i11 = HEAP32[i15 + 12 >> 2] | 0;
   if ((i11 | 0) == (HEAP32[i15 + 16 >> 2] | 0)) i21 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i15 >> 2] | 0) + 36 >> 2] & 127](i15) | 0; else i21 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i11 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i21, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i1 >> 2] = 0;
    i20 = 1;
    break;
   } else {
    i20 = (HEAP32[i1 >> 2] | 0) == 0;
    break;
   }
  } while (0);
  i15 = HEAP32[i2 >> 2] | 0;
  if (!i15) {
   i22 = 0;
   i23 = 1;
  } else {
   i11 = HEAP32[i15 + 12 >> 2] | 0;
   if ((i11 | 0) == (HEAP32[i15 + 16 >> 2] | 0)) i24 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i15 >> 2] | 0) + 36 >> 2] & 127](i15) | 0; else i24 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i11 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i24, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i2 >> 2] = 0;
    i22 = 0;
    i23 = 1;
   } else {
    i22 = i15;
    i23 = 0;
   }
  }
  i25 = HEAP32[i1 >> 2] | 0;
  if (!((i12 | 0) != 0 & (i20 ^ i23))) break;
  i15 = HEAP32[i25 + 12 >> 2] | 0;
  if ((i15 | 0) == (HEAP32[i25 + 16 >> 2] | 0)) i26 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i25 >> 2] | 0) + 36 >> 2] & 127](i25) | 0; else i26 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i15 >> 0] | 0) | 0;
  i15 = i26 & 255;
  if (i7) i27 = i15; else i27 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] & 31](i5, i15) | 0;
  i15 = i19 + 1 | 0;
  i11 = i3;
  i18 = 0;
  i17 = i13;
  i16 = i10;
  i28 = i12;
  while (1) {
   if ((i11 | 0) == (i4 | 0)) break;
   do if ((HEAP8[i17 >> 0] | 0) == 1) {
    i29 = i11 + 11 | 0;
    if ((HEAP8[i29 >> 0] | 0) < 0) i30 = HEAP32[i11 >> 2] | 0; else i30 = i11;
    i31 = HEAP8[i30 + i19 >> 0] | 0;
    if (i7) i32 = i31; else i32 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] & 31](i5, i31) | 0;
    if (i27 << 24 >> 24 != i32 << 24 >> 24) {
     HEAP8[i17 >> 0] = 0;
     i33 = i18;
     i34 = i16;
     i35 = i28 + -1 | 0;
     break;
    }
    i31 = HEAP8[i29 >> 0] | 0;
    if (i31 << 24 >> 24 < 0) i36 = HEAP32[i11 + 4 >> 2] | 0; else i36 = i31 & 255;
    if ((i36 | 0) == (i15 | 0)) {
     HEAP8[i17 >> 0] = 2;
     i33 = 1;
     i34 = i16 + 1 | 0;
     i35 = i28 + -1 | 0;
    } else {
     i33 = 1;
     i34 = i16;
     i35 = i28;
    }
   } else {
    i33 = i18;
    i34 = i16;
    i35 = i28;
   } while (0);
   i11 = i11 + 12 | 0;
   i18 = i33;
   i17 = i17 + 1 | 0;
   i16 = i34;
   i28 = i35;
  }
  if (!i18) {
   i19 = i15;
   i12 = i28;
   i10 = i16;
   continue;
  }
  i17 = HEAP32[i1 >> 2] | 0;
  i11 = i17 + 12 | 0;
  i31 = HEAP32[i11 >> 2] | 0;
  if ((i31 | 0) == (HEAP32[i17 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i17 >> 2] | 0) + 40 >> 2] & 127](i17) | 0; else {
   HEAP32[i11 >> 2] = i31 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i31 >> 0] | 0) | 0;
  }
  if ((i16 + i28 | 0) >>> 0 > 1) {
   i37 = i3;
   i38 = i13;
   i39 = i16;
  } else {
   i19 = i15;
   i12 = i28;
   i10 = i16;
   continue;
  }
  while (1) {
   if ((i37 | 0) == (i4 | 0)) {
    i19 = i15;
    i12 = i28;
    i10 = i39;
    continue L17;
   }
   if ((HEAP8[i38 >> 0] | 0) == 2) {
    i31 = HEAP8[i37 + 11 >> 0] | 0;
    if (i31 << 24 >> 24 < 0) i40 = HEAP32[i37 + 4 >> 2] | 0; else i40 = i31 & 255;
    if ((i40 | 0) == (i15 | 0)) i41 = i39; else {
     HEAP8[i38 >> 0] = 0;
     i41 = i39 + -1 | 0;
    }
   } else i41 = i39;
   i37 = i37 + 12 | 0;
   i38 = i38 + 1 | 0;
   i39 = i41;
  }
 }
 do if (!i25) i42 = 1; else {
  i41 = HEAP32[i25 + 12 >> 2] | 0;
  if ((i41 | 0) == (HEAP32[i25 + 16 >> 2] | 0)) i43 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i25 >> 2] | 0) + 36 >> 2] & 127](i25) | 0; else i43 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i41 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i43, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i1 >> 2] = 0;
   i42 = 1;
   break;
  } else {
   i42 = (HEAP32[i1 >> 2] | 0) == 0;
   break;
  }
 } while (0);
 do if (!i22) i8 = 41; else {
  i1 = HEAP32[i22 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i22 + 16 >> 2] | 0)) i44 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i22 >> 2] | 0) + 36 >> 2] & 127](i22) | 0; else i44 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i44, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i2 >> 2] = 0;
   i8 = 41;
   break;
  } else if (i42) {
   i45 = i3;
   i46 = i13;
   break;
  } else {
   i8 = 77;
   break;
  }
 } while (0);
 if ((i8 | 0) == 41) if (i42) i8 = 77; else {
  i45 = i3;
  i46 = i13;
 }
 if ((i8 | 0) == 77) {
  HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 2;
  i45 = i3;
  i46 = i13;
 }
 while (1) {
  if ((i45 | 0) == (i4 | 0)) {
   i8 = 81;
   break;
  }
  if ((HEAP8[i46 >> 0] | 0) == 2) {
   i47 = i45;
   break;
  }
  i45 = i45 + 12 | 0;
  i46 = i46 + 1 | 0;
 }
 if ((i8 | 0) == 81) {
  HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 4;
  i47 = i4;
 }
 _free(i14);
 STACKTOP = i9;
 return i47 | 0;
}

function __ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0;
 i8 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 i10 = i9;
 i11 = (i4 - i3 | 0) / 12 | 0;
 if (i11 >>> 0 > 100) {
  i12 = _malloc(i11) | 0;
  if (!i12) __ZSt17__throw_bad_allocv(); else {
   i13 = i12;
   i14 = i12;
  }
 } else {
  i13 = i10;
  i14 = 0;
 }
 i10 = 0;
 i12 = i11;
 i11 = i3;
 i15 = i13;
 while (1) {
  if ((i11 | 0) == (i4 | 0)) break;
  i16 = HEAP8[i11 + 8 + 3 >> 0] | 0;
  if (i16 << 24 >> 24 < 0) i17 = HEAP32[i11 + 4 >> 2] | 0; else i17 = i16 & 255;
  if (!i17) {
   HEAP8[i15 >> 0] = 2;
   i18 = i10 + 1 | 0;
   i19 = i12 + -1 | 0;
  } else {
   HEAP8[i15 >> 0] = 1;
   i18 = i10;
   i19 = i12;
  }
  i10 = i18;
  i12 = i19;
  i11 = i11 + 12 | 0;
  i15 = i15 + 1 | 0;
 }
 i15 = 0;
 i11 = i10;
 i10 = i12;
 L17 : while (1) {
  i12 = HEAP32[i1 >> 2] | 0;
  do if (!i12) i20 = 1; else {
   i19 = HEAP32[i12 + 12 >> 2] | 0;
   if ((i19 | 0) == (HEAP32[i12 + 16 >> 2] | 0)) i21 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i12 >> 2] | 0) + 36 >> 2] & 127](i12) | 0; else i21 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i19 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i21, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i1 >> 2] = 0;
    i20 = 1;
    break;
   } else {
    i20 = (HEAP32[i1 >> 2] | 0) == 0;
    break;
   }
  } while (0);
  i12 = HEAP32[i2 >> 2] | 0;
  if (!i12) {
   i22 = 0;
   i23 = 1;
  } else {
   i19 = HEAP32[i12 + 12 >> 2] | 0;
   if ((i19 | 0) == (HEAP32[i12 + 16 >> 2] | 0)) i24 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i12 >> 2] | 0) + 36 >> 2] & 127](i12) | 0; else i24 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i19 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i24, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i2 >> 2] = 0;
    i22 = 0;
    i23 = 1;
   } else {
    i22 = i12;
    i23 = 0;
   }
  }
  i25 = HEAP32[i1 >> 2] | 0;
  if (!((i10 | 0) != 0 & (i20 ^ i23))) break;
  i12 = HEAP32[i25 + 12 >> 2] | 0;
  if ((i12 | 0) == (HEAP32[i25 + 16 >> 2] | 0)) i26 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i25 >> 2] | 0) + 36 >> 2] & 127](i25) | 0; else i26 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i12 >> 2] | 0) | 0;
  if (i7) i27 = i26; else i27 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2] & 31](i5, i26) | 0;
  i12 = i15 + 1 | 0;
  i19 = i3;
  i18 = 0;
  i17 = i13;
  i16 = i11;
  i28 = i10;
  while (1) {
   if ((i19 | 0) == (i4 | 0)) break;
   do if ((HEAP8[i17 >> 0] | 0) == 1) {
    i29 = i19 + 8 + 3 | 0;
    if ((HEAP8[i29 >> 0] | 0) < 0) i30 = HEAP32[i19 >> 2] | 0; else i30 = i19;
    i31 = HEAP32[i30 + (i15 << 2) >> 2] | 0;
    if (i7) i32 = i31; else i32 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2] & 31](i5, i31) | 0;
    if ((i27 | 0) != (i32 | 0)) {
     HEAP8[i17 >> 0] = 0;
     i33 = i18;
     i34 = i16;
     i35 = i28 + -1 | 0;
     break;
    }
    i31 = HEAP8[i29 >> 0] | 0;
    if (i31 << 24 >> 24 < 0) i36 = HEAP32[i19 + 4 >> 2] | 0; else i36 = i31 & 255;
    if ((i36 | 0) == (i12 | 0)) {
     HEAP8[i17 >> 0] = 2;
     i33 = 1;
     i34 = i16 + 1 | 0;
     i35 = i28 + -1 | 0;
    } else {
     i33 = 1;
     i34 = i16;
     i35 = i28;
    }
   } else {
    i33 = i18;
    i34 = i16;
    i35 = i28;
   } while (0);
   i19 = i19 + 12 | 0;
   i18 = i33;
   i17 = i17 + 1 | 0;
   i16 = i34;
   i28 = i35;
  }
  if (!i18) {
   i15 = i12;
   i11 = i16;
   i10 = i28;
   continue;
  }
  i17 = HEAP32[i1 >> 2] | 0;
  i19 = i17 + 12 | 0;
  i31 = HEAP32[i19 >> 2] | 0;
  if ((i31 | 0) == (HEAP32[i17 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i17 >> 2] | 0) + 40 >> 2] & 127](i17) | 0; else {
   HEAP32[i19 >> 2] = i31 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i31 >> 2] | 0) | 0;
  }
  if ((i16 + i28 | 0) >>> 0 > 1) {
   i37 = i3;
   i38 = i13;
   i39 = i16;
  } else {
   i15 = i12;
   i11 = i16;
   i10 = i28;
   continue;
  }
  while (1) {
   if ((i37 | 0) == (i4 | 0)) {
    i15 = i12;
    i11 = i39;
    i10 = i28;
    continue L17;
   }
   if ((HEAP8[i38 >> 0] | 0) == 2) {
    i31 = HEAP8[i37 + 8 + 3 >> 0] | 0;
    if (i31 << 24 >> 24 < 0) i40 = HEAP32[i37 + 4 >> 2] | 0; else i40 = i31 & 255;
    if ((i40 | 0) == (i12 | 0)) i41 = i39; else {
     HEAP8[i38 >> 0] = 0;
     i41 = i39 + -1 | 0;
    }
   } else i41 = i39;
   i37 = i37 + 12 | 0;
   i38 = i38 + 1 | 0;
   i39 = i41;
  }
 }
 do if (!i25) i42 = 1; else {
  i41 = HEAP32[i25 + 12 >> 2] | 0;
  if ((i41 | 0) == (HEAP32[i25 + 16 >> 2] | 0)) i43 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i25 >> 2] | 0) + 36 >> 2] & 127](i25) | 0; else i43 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i41 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i43, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i1 >> 2] = 0;
   i42 = 1;
   break;
  } else {
   i42 = (HEAP32[i1 >> 2] | 0) == 0;
   break;
  }
 } while (0);
 do if (!i22) i8 = 41; else {
  i1 = HEAP32[i22 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i22 + 16 >> 2] | 0)) i44 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i22 >> 2] | 0) + 36 >> 2] & 127](i22) | 0; else i44 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i44, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i2 >> 2] = 0;
   i8 = 41;
   break;
  } else if (i42) {
   i45 = i3;
   i46 = i13;
   break;
  } else {
   i8 = 77;
   break;
  }
 } while (0);
 if ((i8 | 0) == 41) if (i42) i8 = 77; else {
  i45 = i3;
  i46 = i13;
 }
 if ((i8 | 0) == 77) {
  HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 2;
  i45 = i3;
  i46 = i13;
 }
 while (1) {
  if ((i45 | 0) == (i4 | 0)) {
   i8 = 81;
   break;
  }
  if ((HEAP8[i46 >> 0] | 0) == 2) {
   i47 = i45;
   break;
  }
  i45 = i45 + 12 | 0;
  i46 = i46 + 1 | 0;
 }
 if ((i8 | 0) == 81) {
  HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 4;
  i47 = i4;
 }
 _free(i14);
 STACKTOP = i9;
 return i47 | 0;
}

function __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0;
 i6 = 0;
 i7 = HEAP32[i1 >> 2] | 0;
 do if (!i7) i8 = 1; else {
  i9 = HEAP32[i7 + 12 >> 2] | 0;
  if ((i9 | 0) == (HEAP32[i7 + 16 >> 2] | 0)) i10 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i7 >> 2] | 0) + 36 >> 2] & 127](i7) | 0; else i10 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i9 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i10, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i1 >> 2] = 0;
   i8 = 1;
   break;
  } else {
   i8 = (HEAP32[i1 >> 2] | 0) == 0;
   break;
  }
 } while (0);
 i10 = HEAP32[i2 >> 2] | 0;
 do if (!i10) i6 = 14; else {
  i7 = HEAP32[i10 + 12 >> 2] | 0;
  if ((i7 | 0) == (HEAP32[i10 + 16 >> 2] | 0)) i11 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 36 >> 2] & 127](i10) | 0; else i11 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i7 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i11, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i2 >> 2] = 0;
   i6 = 14;
   break;
  } else if (i8) {
   i12 = i10;
   i6 = 17;
   break;
  } else {
   i6 = 16;
   break;
  }
 } while (0);
 if ((i6 | 0) == 14) if (i8) i6 = 16; else {
  i12 = 0;
  i6 = 17;
 }
 L22 : do if ((i6 | 0) == 16) {
  HEAP32[i3 >> 2] = HEAP32[i3 >> 2] | 6;
  i13 = 0;
 } else if ((i6 | 0) == 17) {
  i8 = HEAP32[i1 >> 2] | 0;
  i10 = HEAP32[i8 + 12 >> 2] | 0;
  if ((i10 | 0) == (HEAP32[i8 + 16 >> 2] | 0)) i14 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 36 >> 2] & 127](i8) | 0; else i14 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i10 >> 0] | 0) | 0;
  i10 = i14 & 255;
  if (i10 << 24 >> 24 > -1) {
   i8 = i4 + 8 | 0;
   if (HEAP16[(HEAP32[i8 >> 2] | 0) + (i14 << 24 >> 24 << 1) >> 1] & 2048) {
    i11 = (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 31](i4, i10, 0) | 0) << 24 >> 24;
    i10 = HEAP32[i1 >> 2] | 0;
    i7 = i10 + 12 | 0;
    i9 = HEAP32[i7 >> 2] | 0;
    if ((i9 | 0) == (HEAP32[i10 + 16 >> 2] | 0)) {
     FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 40 >> 2] & 127](i10) | 0;
     i15 = i11;
     i16 = i5;
     i17 = i12;
     i18 = i12;
    } else {
     HEAP32[i7 >> 2] = i9 + 1;
     __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i9 >> 0] | 0) | 0;
     i15 = i11;
     i16 = i5;
     i17 = i12;
     i18 = i12;
    }
    while (1) {
     i19 = i15 + -48 | 0;
     i11 = i16 + -1 | 0;
     i9 = HEAP32[i1 >> 2] | 0;
     do if (!i9) i20 = 1; else {
      i7 = HEAP32[i9 + 12 >> 2] | 0;
      if ((i7 | 0) == (HEAP32[i9 + 16 >> 2] | 0)) i21 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i9 >> 2] | 0) + 36 >> 2] & 127](i9) | 0; else i21 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i7 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i21, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[i1 >> 2] = 0;
       i20 = 1;
       break;
      } else {
       i20 = (HEAP32[i1 >> 2] | 0) == 0;
       break;
      }
     } while (0);
     do if (!i18) {
      i22 = i17;
      i23 = 1;
      i24 = 0;
     } else {
      i9 = HEAP32[i18 + 12 >> 2] | 0;
      if ((i9 | 0) == (HEAP32[i18 + 16 >> 2] | 0)) i25 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i18 >> 2] | 0) + 36 >> 2] & 127](i18) | 0; else i25 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i9 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i25, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[i2 >> 2] = 0;
       i22 = 0;
       i23 = 1;
       i24 = 0;
       break;
      } else {
       i22 = i17;
       i23 = (i17 | 0) == 0;
       i24 = i17;
       break;
      }
     } while (0);
     i26 = HEAP32[i1 >> 2] | 0;
     if (!((i16 | 0) > 1 & (i20 ^ i23))) break;
     i9 = HEAP32[i26 + 12 >> 2] | 0;
     if ((i9 | 0) == (HEAP32[i26 + 16 >> 2] | 0)) i27 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i26 >> 2] | 0) + 36 >> 2] & 127](i26) | 0; else i27 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i9 >> 0] | 0) | 0;
     i9 = i27 & 255;
     if (i9 << 24 >> 24 <= -1) {
      i13 = i19;
      break L22;
     }
     if (!(HEAP16[(HEAP32[i8 >> 2] | 0) + (i27 << 24 >> 24 << 1) >> 1] & 2048)) {
      i13 = i19;
      break L22;
     }
     i7 = (i19 * 10 | 0) + ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 31](i4, i9, 0) | 0) << 24 >> 24) | 0;
     i9 = HEAP32[i1 >> 2] | 0;
     i10 = i9 + 12 | 0;
     i28 = HEAP32[i10 >> 2] | 0;
     if ((i28 | 0) == (HEAP32[i9 + 16 >> 2] | 0)) {
      FUNCTION_TABLE_ii[HEAP32[(HEAP32[i9 >> 2] | 0) + 40 >> 2] & 127](i9) | 0;
      i15 = i7;
      i16 = i11;
      i17 = i22;
      i18 = i24;
      continue;
     } else {
      HEAP32[i10 >> 2] = i28 + 1;
      __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i28 >> 0] | 0) | 0;
      i15 = i7;
      i16 = i11;
      i17 = i22;
      i18 = i24;
      continue;
     }
    }
    do if (!i26) i29 = 1; else {
     i8 = HEAP32[i26 + 12 >> 2] | 0;
     if ((i8 | 0) == (HEAP32[i26 + 16 >> 2] | 0)) i30 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i26 >> 2] | 0) + 36 >> 2] & 127](i26) | 0; else i30 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i8 >> 0] | 0) | 0;
     if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i30, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
      HEAP32[i1 >> 2] = 0;
      i29 = 1;
      break;
     } else {
      i29 = (HEAP32[i1 >> 2] | 0) == 0;
      break;
     }
    } while (0);
    do if (!i22) i6 = 62; else {
     i8 = HEAP32[i22 + 12 >> 2] | 0;
     if ((i8 | 0) == (HEAP32[i22 + 16 >> 2] | 0)) i31 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i22 >> 2] | 0) + 36 >> 2] & 127](i22) | 0; else i31 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i8 >> 0] | 0) | 0;
     if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i31, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
      HEAP32[i2 >> 2] = 0;
      i6 = 62;
      break;
     } else if (i29) {
      i13 = i19;
      break L22;
     } else break;
    } while (0);
    if ((i6 | 0) == 62) if (!i29) {
     i13 = i19;
     break;
    }
    HEAP32[i3 >> 2] = HEAP32[i3 >> 2] | 2;
    i13 = i19;
    break;
   }
  }
  HEAP32[i3 >> 2] = HEAP32[i3 >> 2] | 4;
  i13 = 0;
 } while (0);
 return i13 | 0;
}

function __ZN5ImGui34UpdateHoveredWindowAndCaptureFlagsEv() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, f15 = f0, f16 = f0, f17 = f0, f18 = f0, f19 = f0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0;
 i1 = 0;
 i2 = HEAP32[1460598] | 0;
 i3 = HEAP32[i2 + 6472 >> 2] | 0;
 if (!i3) i1 = 3; else if (!(HEAP32[i3 + 8 >> 2] & 512)) {
  i4 = i3;
  i1 = 15;
 } else i1 = 3;
 L3 : do if ((i1 | 0) == 3) {
  i3 = HEAP32[i2 + 6340 >> 2] | 0;
  i5 = i2 + 6348 | 0;
  i6 = i2 + 5440 | 0;
  i7 = i2 + 5444 | 0;
  i8 = i2 + 212 | 0;
  i9 = i2 + 216 | 0;
  i10 = i3;
  L5 : while (1) {
   if ((i10 | 0) <= 0) {
    i1 = 14;
    break;
   }
   if ((i10 | 0) > (i3 | 0)) {
    i1 = 8;
    break;
   }
   i11 = HEAP32[i5 >> 2] | 0;
   i12 = i10;
   while (1) {
    i13 = i12;
    i12 = i12 + -1 | 0;
    i14 = HEAP32[i11 + (i12 << 2) >> 2] | 0;
    if (HEAP8[i14 + 118 >> 0] | 0) if (!(HEAP32[i14 + 8 >> 2] & 512)) {
     f15 = Math_fround(HEAPF32[i14 + 480 >> 2]);
     f16 = Math_fround(HEAPF32[i6 >> 2]);
     f17 = Math_fround(f15 - f16);
     f18 = Math_fround(HEAPF32[i7 >> 2]);
     f15 = Math_fround(HEAPF32[i8 >> 2]);
     if (f15 >= f17) {
      f17 = Math_fround(f16 + Math_fround(HEAPF32[i14 + 488 >> 2]));
      f16 = Math_fround(Math_fround(HEAPF32[i14 + 484 >> 2]) - f18);
      f19 = Math_fround(HEAPF32[i9 >> 2]);
      if (f15 < f17 & f19 >= f16) break;
     }
    }
    if ((i13 | 0) <= 1) {
     i1 = 14;
     break L5;
    }
   }
   if (f19 < Math_fround(f18 + Math_fround(HEAPF32[i14 + 492 >> 2]))) {
    i4 = i14;
    i1 = 15;
    break L3;
   } else i10 = i12;
  }
  if ((i1 | 0) == 8) ___assert_fail(56841, 56850, 1235, 56909); else if ((i1 | 0) == 14) {
   i10 = i2 + 6396 | 0;
   HEAP32[i10 >> 2] = 0;
   i20 = 0;
   i21 = 0;
   i22 = i10;
   break;
  }
 } while (0);
 if ((i1 | 0) == 15) {
  i14 = i2 + 6396 | 0;
  HEAP32[i14 >> 2] = i4;
  i20 = i4;
  i21 = HEAP32[i4 + 756 >> 2] | 0;
  i22 = i14;
 }
 i14 = i2 + 6400 | 0;
 HEAP32[i14 >> 2] = i21;
 i4 = HEAP32[i2 + 6512 >> 2] | 0;
 L23 : do if ((i4 | 0) > 0) {
  i10 = HEAP32[i2 + 6520 >> 2] | 0;
  i9 = i4;
  while (1) {
   i8 = i9;
   i9 = i9 + -1 | 0;
   i23 = HEAP32[i10 + (i9 * 36 | 0) + 4 >> 2] | 0;
   if (i23 | 0) if (HEAP32[i23 + 8 >> 2] & 134217728 | 0) break;
   if ((i8 | 0) <= 1) {
    i24 = 0;
    i25 = i20;
    break L23;
   }
  }
  if (!i21) {
   i24 = 1;
   i25 = i20;
  } else if ((HEAP32[i21 + 756 >> 2] | 0) == (i23 | 0)) {
   i24 = 1;
   i25 = i20;
  } else {
   i9 = i21;
   do {
    if ((i9 | 0) == (i23 | 0)) {
     i24 = 1;
     i25 = i20;
     break L23;
    }
    i9 = HEAP32[i9 + 752 >> 2] | 0;
   } while ((i9 | 0) != 0);
   HEAP32[i22 >> 2] = 0;
   HEAP32[i14 >> 2] = 0;
   i24 = 1;
   i25 = 0;
  }
 } else {
  i24 = 0;
  i25 = i20;
 } while (0);
 i20 = HEAP32[i2 + 4 >> 2] | 0;
 if (!(i20 & 16)) i26 = i25; else {
  HEAP32[i14 >> 2] = 0;
  HEAP32[i22 >> 2] = 0;
  i26 = 0;
 }
 if (HEAP8[i2 + 972 >> 0] | 0) HEAP8[i2 + 987 >> 0] = ((i4 | 0) != 0 | (i26 | 0) != 0) & 1;
 i25 = HEAP8[i2 + 220 >> 0] | 0;
 i23 = i25 + -1 << 24 >> 24 << 24 >> 24;
 if (HEAP8[i2 + 973 >> 0] | 0) HEAP8[i2 + 988 >> 0] = ((i4 | 0) != 0 | (i26 | 0) != 0) & 1;
 i21 = HEAP8[i2 + 221 >> 0] | 0;
 i9 = i21 | i25;
 do if (!(i21 << 24 >> 24)) i27 = i23; else {
  if (i25 << 24 >> 24) {
   f18 = Math_fround(HEAPF32[i2 + 956 >> 2]);
   if (!(f18 < Math_fround(HEAPF32[i2 + 952 + (i23 << 2) >> 2]))) {
    i27 = 0;
    break;
   }
  }
  i27 = 1;
 } while (0);
 if (HEAP8[i2 + 974 >> 0] | 0) HEAP8[i2 + 989 >> 0] = ((i4 | 0) != 0 | (i26 | 0) != 0) & 1;
 i23 = HEAP8[i2 + 222 >> 0] | 0;
 i25 = i23 | i9;
 do if (!(i23 << 24 >> 24)) i28 = i27; else {
  if ((i27 | 0) != -1) {
   f18 = Math_fround(HEAPF32[i2 + 960 >> 2]);
   if (!(f18 < Math_fround(HEAPF32[i2 + 952 + (i27 << 2) >> 2]))) {
    i28 = i27;
    break;
   }
  }
  i28 = 2;
 } while (0);
 if (HEAP8[i2 + 975 >> 0] | 0) HEAP8[i2 + 990 >> 0] = ((i4 | 0) != 0 | (i26 | 0) != 0) & 1;
 i27 = HEAP8[i2 + 223 >> 0] | 0;
 i23 = i27 | i25;
 do if (!(i27 << 24 >> 24)) i29 = i28; else {
  if ((i28 | 0) != -1) {
   f18 = Math_fround(HEAPF32[i2 + 964 >> 2]);
   if (!(f18 < Math_fround(HEAPF32[i2 + 952 + (i28 << 2) >> 2]))) {
    i29 = i28;
    break;
   }
  }
  i29 = 3;
 } while (0);
 if (HEAP8[i2 + 976 >> 0] | 0) HEAP8[i2 + 991 >> 0] = ((i4 | 0) != 0 | (i26 | 0) != 0) & 1;
 i28 = HEAP8[i2 + 224 >> 0] | 0;
 i27 = (i28 | i23) << 24 >> 24 != 0;
 i23 = (i29 | 0) == -1;
 do if (!(i28 << 24 >> 24)) if (i23) i30 = 1; else {
  i31 = i29;
  i1 = 31;
 } else {
  if (!i23) {
   f18 = Math_fround(HEAPF32[i2 + 968 >> 2]);
   if (!(f18 < Math_fround(HEAPF32[i2 + 952 + (i29 << 2) >> 2]))) {
    i31 = i29;
    i1 = 31;
    break;
   }
  }
  i31 = 4;
  i1 = 31;
 } while (0);
 if ((i1 | 0) == 31) i30 = (HEAP8[i2 + 987 + i31 >> 0] | 0) != 0;
 if (!(HEAP8[i2 + 7072 >> 0] | 0)) i32 = 0; else i32 = (HEAP32[i2 + 7076 >> 2] & 16 | 0) != 0;
 if (i30 | i32) i33 = i26; else {
  HEAP32[i14 >> 2] = 0;
  HEAP32[i22 >> 2] = 0;
  i33 = 0;
 }
 i22 = HEAP32[i2 + 11608 >> 2] | 0;
 if ((i22 | 0) == -1) i34 = i30 & (i27 | (i33 | 0) != 0) | (i4 | 0) != 0; else i34 = (i22 | 0) != 0;
 HEAP8[i2 + 872 >> 0] = i34 & 1;
 i34 = HEAP32[i2 + 11612 >> 2] | 0;
 if ((i34 | 0) == -1) {
  i35 = i24 | (HEAP32[i2 + 6420 >> 2] | 0) != 0;
  i36 = i2 + 873 | 0;
  i37 = i35 & 1;
  HEAP8[i36 >> 0] = i37;
  i38 = i2 + 877 | 0;
  i39 = HEAP8[i38 >> 0] | 0;
  i40 = i39 << 24 >> 24 != 0;
  i41 = i20 & 9;
  i42 = (i41 | 0) == 1;
  i43 = i40 & i42;
  i44 = i43 | i35;
  i45 = i44 & 1;
  HEAP8[i36 >> 0] = i45;
  i46 = i2 + 11616 | 0;
  i47 = HEAP32[i46 >> 2] | 0;
  i48 = i47 + 1 | 0;
  i49 = i48 >>> 0 > 1;
  i50 = i49 & 1;
  i51 = i2 + 874 | 0;
  HEAP8[i51 >> 0] = i50;
  return;
 } else {
  i35 = (i34 | 0) != 0;
  i36 = i2 + 873 | 0;
  i37 = i35 & 1;
  HEAP8[i36 >> 0] = i37;
  i38 = i2 + 877 | 0;
  i39 = HEAP8[i38 >> 0] | 0;
  i40 = i39 << 24 >> 24 != 0;
  i41 = i20 & 9;
  i42 = (i41 | 0) == 1;
  i43 = i40 & i42;
  i44 = i43 | i35;
  i45 = i44 & 1;
  HEAP8[i36 >> 0] = i45;
  i46 = i2 + 11616 | 0;
  i47 = HEAP32[i46 >> 2] | 0;
  i48 = i47 + 1 | 0;
  i49 = i48 >>> 0 > 1;
  i50 = i49 & 1;
  i51 = i2 + 874 | 0;
  HEAP8[i51 >> 0] = i50;
  return;
 }
}

function _png_do_expand(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0;
 i4 = 0;
 i5 = HEAP32[i1 >> 2] | 0;
 i6 = i1 + 8 | 0;
 i7 = HEAP8[i6 >> 0] | 0;
 if (i7 << 24 >> 24) {
  if (!((i3 | 0) != 0 & i7 << 24 >> 24 == 2)) return;
  i7 = i1 + 9 | 0;
  switch (HEAP8[i7 >> 0] | 0) {
  case 8:
   {
    if (i5 | 0) {
     i8 = HEAP16[i3 + 2 >> 1] & 255;
     i9 = HEAP16[i3 + 4 >> 1] & 255;
     i10 = HEAP16[i3 + 6 >> 1] & 255;
     i11 = 0;
     i12 = i2 + (i5 << 2) | 0;
     i13 = i2 + (HEAP32[i1 + 4 >> 2] | 0) | 0;
     do {
      i14 = i13 + -1 | 0;
      i15 = i12 + -1 | 0;
      i16 = i13 + -2 | 0;
      i13 = i13 + -3 | 0;
      if ((HEAPU8[i13 >> 0] | 0) == (i8 | 0)) if ((HEAPU8[i16 >> 0] | 0) == (i9 | 0)) if ((HEAPU8[i14 >> 0] | 0) == (i10 | 0)) i17 = 0; else i4 = 37; else i4 = 37; else i4 = 37;
      if ((i4 | 0) == 37) {
       i4 = 0;
       i17 = -1;
      }
      HEAP8[i15 >> 0] = i17;
      HEAP8[i12 + -2 >> 0] = HEAP8[i14 >> 0] | 0;
      HEAP8[i12 + -3 >> 0] = HEAP8[i16 >> 0] | 0;
      i12 = i12 + -4 | 0;
      HEAP8[i12 >> 0] = HEAP8[i13 >> 0] | 0;
      i11 = i11 + 1 | 0;
     } while ((i11 | 0) != (i5 | 0));
    }
    break;
   }
  case 16:
   {
    i11 = HEAP16[i3 + 2 >> 1] | 0;
    i13 = (i11 & 65535) >>> 8 & 65535;
    i12 = HEAP16[i3 + 4 >> 1] | 0;
    i17 = (i12 & 65535) >>> 8 & 65535;
    i4 = HEAP16[i3 + 6 >> 1] | 0;
    i10 = (i4 & 65535) >>> 8 & 65535;
    if (i5 | 0) {
     i9 = i11 & 255;
     i11 = i12 & 255;
     i12 = i4 & 255;
     i4 = 0;
     i8 = i2 + (HEAP32[i1 + 4 >> 2] | 0) | 0;
     i16 = i2 + (i5 << 3) | 0;
     do {
      i14 = i8 + -1 | 0;
      i15 = i16 + -1 | 0;
      i18 = i8;
      i8 = i8 + -6 | 0;
      i19 = i18 + -5 | 0;
      if ((HEAPU8[i8 >> 0] | 0) == (i13 | 0)) if ((HEAPU8[i19 >> 0] | 0) == (i9 | 0)) if ((HEAPU8[i18 + -4 >> 0] | 0) == (i17 | 0)) if ((HEAPU8[i18 + -3 >> 0] | 0) == (i11 | 0)) if ((HEAPU8[i18 + -2 >> 0] | 0) == (i10 | 0)) i20 = ((HEAPU8[i14 >> 0] | 0) != (i12 | 0)) << 31 >> 31; else i20 = -1; else i20 = -1; else i20 = -1; else i20 = -1; else i20 = -1;
      HEAP8[i15 >> 0] = i20;
      HEAP8[i16 + -2 >> 0] = i20;
      HEAP8[i16 + -3 >> 0] = HEAP8[i14 >> 0] | 0;
      HEAP8[i16 + -4 >> 0] = HEAP8[i18 + -2 >> 0] | 0;
      HEAP8[i16 + -5 >> 0] = HEAP8[i18 + -3 >> 0] | 0;
      HEAP8[i16 + -6 >> 0] = HEAP8[i18 + -4 >> 0] | 0;
      HEAP8[i16 + -7 >> 0] = HEAP8[i19 >> 0] | 0;
      i16 = i16 + -8 | 0;
      HEAP8[i16 >> 0] = HEAP8[i8 >> 0] | 0;
      i4 = i4 + 1 | 0;
     } while ((i4 | 0) != (i5 | 0));
    }
    break;
   }
  default:
   {}
  }
  HEAP8[i6 >> 0] = 6;
  HEAP8[i1 + 10 >> 0] = 4;
  i4 = HEAPU8[i7 >> 0] << 2;
  HEAP8[i1 + 11 >> 0] = i4;
  i7 = i4 & 252;
  if (i7 >>> 0 > 7) i21 = Math_imul(i7 >>> 3, i5) | 0; else i21 = ((Math_imul(i7, i5) | 0) + 7 | 0) >>> 3;
  HEAP32[i1 + 4 >> 2] = i21;
  return;
 }
 i21 = (i3 | 0) != 0;
 if (i21) i22 = HEAPU16[i3 + 8 >> 1] | 0; else i22 = 0;
 i3 = i1 + 9 | 0;
 i7 = HEAP8[i3 >> 0] | 0;
 if ((i7 & 255) < 8) {
  switch (i7 << 24 >> 24) {
  case 1:
   {
    i4 = 0 - (i22 & 1) & 255;
    if (!i5) i23 = i4; else {
     i8 = i2 + ((i5 + -1 | 0) >>> 3) | 0;
     i16 = i2 + i5 | 0;
     i20 = 0;
     i12 = i5 + 7 & 7 ^ 7;
     while (1) {
      i16 = i16 + -1 | 0;
      HEAP8[i16 >> 0] = ((1 << i12 & HEAPU8[i8 >> 0] | 0) != 0) << 31 >> 31;
      i10 = (i12 | 0) == 7;
      i20 = i20 + 1 | 0;
      if ((i20 | 0) == (i5 | 0)) {
       i23 = i4;
       break;
      } else {
       i8 = i10 ? i8 + -1 | 0 : i8;
       i12 = i10 ? 0 : i12 + 1 | 0;
      }
     }
    }
    break;
   }
  case 2:
   {
    i12 = (i22 & 3) * 85 | 0;
    if (!i5) i23 = i12; else {
     i8 = i2 + i5 | 0;
     i4 = 0;
     i20 = i2 + ((i5 + -1 | 0) >>> 2) | 0;
     i16 = (i5 << 1) + 6 & 6 ^ 6;
     while (1) {
      i8 = i8 + -1 | 0;
      i10 = (HEAPU8[i20 >> 0] | 0) >>> i16 & 3;
      HEAP8[i8 >> 0] = i10 << 2 | i10 | i10 << 4 | i10 << 6;
      i10 = (i16 | 0) == 6;
      i4 = i4 + 1 | 0;
      if ((i4 | 0) == (i5 | 0)) {
       i23 = i12;
       break;
      } else {
       i20 = i10 ? i20 + -1 | 0 : i20;
       i16 = i10 ? 0 : i16 + 2 | 0;
      }
     }
    }
    break;
   }
  case 4:
   {
    i16 = (i22 & 15) * 17 | 0;
    if (!i5) i23 = i16; else {
     i20 = i2 + i5 | 0;
     i12 = 0;
     i4 = i2 + ((i5 + -1 | 0) >>> 1) | 0;
     i8 = i5 << 2 & 4;
     while (1) {
      i20 = i20 + -1 | 0;
      i10 = (HEAPU8[i4 >> 0] | 0) >>> i8 & 15;
      HEAP8[i20 >> 0] = i10 << 4 | i10;
      i10 = (i8 | 0) == 4;
      i12 = i12 + 1 | 0;
      if ((i12 | 0) == (i5 | 0)) {
       i23 = i16;
       break;
      } else {
       i4 = i10 ? i4 + -1 | 0 : i4;
       i8 = i10 ? 0 : 4;
      }
     }
    }
    break;
   }
  default:
   i23 = i22;
  }
  HEAP8[i3 >> 0] = 8;
  HEAP8[i1 + 11 >> 0] = 8;
  HEAP32[i1 + 4 >> 2] = i5;
  i24 = i23;
  i25 = 8;
 } else {
  i24 = i22;
  i25 = i7;
 }
 if (!i21) return;
 switch (i25 << 24 >> 24) {
 case 8:
  {
   if (i5 | 0) {
    i25 = i24 & 255;
    i21 = 0;
    i7 = i2 + (i5 << 1) | 0;
    i22 = i2 + i5 | 0;
    do {
     i22 = i22 + -1 | 0;
     i23 = i7;
     i7 = i7 + -2 | 0;
     HEAP8[i23 + -1 >> 0] = ((HEAP8[i22 >> 0] | 0) != i25 << 24 >> 24) << 31 >> 31;
     HEAP8[i7 >> 0] = HEAP8[i22 >> 0] | 0;
     i21 = i21 + 1 | 0;
    } while ((i21 | 0) != (i5 | 0));
   }
   break;
  }
 case 16:
  {
   i21 = HEAP32[i1 + 4 >> 2] | 0;
   if (i5 | 0) {
    i22 = i24 >>> 8 & 255;
    i7 = i24 & 255;
    i24 = 0;
    i25 = i2 + (i21 << 1) | 0;
    i23 = i2 + i21 | 0;
    do {
     i21 = i23 + -1 | 0;
     i23 = i23 + -2 | 0;
     if ((HEAP8[i23 >> 0] | 0) == i22 << 24 >> 24) i26 = ((HEAP8[i21 >> 0] | 0) != i7 << 24 >> 24) << 31 >> 31; else i26 = -1;
     HEAP8[i25 + -1 >> 0] = i26;
     HEAP8[i25 + -2 >> 0] = i26;
     HEAP8[i25 + -3 >> 0] = HEAP8[i21 >> 0] | 0;
     i25 = i25 + -4 | 0;
     HEAP8[i25 >> 0] = HEAP8[i23 >> 0] | 0;
     i24 = i24 + 1 | 0;
    } while ((i24 | 0) != (i5 | 0));
   }
   break;
  }
 default:
  {}
 }
 HEAP8[i6 >> 0] = 4;
 HEAP8[i1 + 10 >> 0] = 2;
 i6 = HEAPU8[i3 >> 0] << 1;
 HEAP8[i1 + 11 >> 0] = i6;
 i3 = i6 & 254;
 if (i3 >>> 0 > 7) i27 = Math_imul(i3 >>> 3, i5) | 0; else i27 = ((Math_imul(i3, i5) | 0) + 7 | 0) >>> 3;
 HEAP32[i1 + 4 >> 2] = i27;
 return;
}

function __ZN5ImGui8EndGroupEv() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, f18 = f0, f19 = f0, f20 = f0, f21 = f0, f22 = f0, f23 = f0, f24 = f0, f25 = f0, f26 = f0, i27 = 0, f28 = f0, f29 = f0, f30 = f0, i31 = 0, i32 = 0, i33 = 0, f34 = f0, f35 = f0, f36 = f0;
 i1 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i3 = i2 + 16 | 0;
 i4 = i2;
 i5 = HEAP32[1460598] | 0;
 i6 = HEAP32[i5 + 6392 >> 2] | 0;
 HEAP8[i6 + 120 >> 0] = 1;
 i7 = i6 + 400 | 0;
 i8 = HEAP32[i7 >> 2] | 0;
 if (!i8) ___assert_fail(32835, 31803, 12896, 32866);
 if ((i8 | 0) <= 0) ___assert_fail(38278, 56850, 1245, 38287);
 i9 = HEAP32[i6 + 408 >> 2] | 0;
 i10 = i8 + -1 | 0;
 i8 = i6 + 220 | 0;
 i11 = i9 + (i10 * 40 | 0) | 0;
 i12 = i11 | 0;
 i13 = HEAP32[i12 >> 2] | 0;
 i14 = HEAP32[i12 + 4 >> 2] | 0;
 i12 = i4;
 HEAP32[i12 >> 2] = i13;
 HEAP32[i12 + 4 >> 2] = i14;
 i12 = i4 + 8 | 0;
 i15 = i8;
 i16 = HEAP32[i15 >> 2] | 0;
 i17 = HEAP32[i15 + 4 >> 2] | 0;
 i15 = i12;
 HEAP32[i15 >> 2] = i16;
 HEAP32[i15 + 4 >> 2] = i17;
 f18 = (HEAP32[tempDoublePtr >> 2] = i13, Math_fround(HEAPF32[tempDoublePtr >> 2]));
 f19 = (HEAP32[tempDoublePtr >> 2] = i16, Math_fround(HEAPF32[tempDoublePtr >> 2]));
 i16 = HEAP32[(f18 >= f19 ? i4 : i12) >> 2] | 0;
 f20 = (HEAP32[tempDoublePtr >> 2] = i14, Math_fround(HEAPF32[tempDoublePtr >> 2]));
 i15 = f20 >= (HEAP32[tempDoublePtr >> 2] = i17, Math_fround(HEAPF32[tempDoublePtr >> 2]));
 i17 = HEAP32[(i15 ? i4 : i12) + 4 >> 2] | 0;
 i15 = i12;
 HEAP32[i15 >> 2] = i16;
 HEAP32[i15 + 4 >> 2] = i17;
 i15 = i6 + 196 | 0;
 HEAP32[i15 >> 2] = i13;
 HEAP32[i15 + 4 >> 2] = i14;
 i14 = i11 + 8 | 0;
 i15 = Math_fround(HEAPF32[i14 >> 2]) >= f19;
 f19 = Math_fround(HEAPF32[i11 + 12 >> 2]);
 i13 = f19 >= Math_fround(HEAPF32[i6 + 224 >> 2]);
 i12 = HEAP32[(i13 ? i14 : i8) + 4 >> 2] | 0;
 i13 = i8;
 HEAP32[i13 >> 2] = HEAP32[(i15 ? i14 : i8) >> 2];
 HEAP32[i13 + 4 >> 2] = i12;
 HEAP32[i6 + 436 >> 2] = HEAP32[i11 + 16 >> 2];
 HEAP32[i6 + 440 >> 2] = HEAP32[i11 + 20 >> 2];
 HEAP32[i6 + 228 >> 2] = HEAP32[i11 + 24 >> 2];
 i12 = HEAP32[i11 + 28 >> 2] | 0;
 i11 = i6 + 232 | 0;
 HEAP32[i11 >> 2] = i12;
 f19 = Math_fround(f20 + Math_fround(-9999.0));
 HEAPF32[i6 + 244 >> 2] = f19;
 f19 = (HEAP32[tempDoublePtr >> 2] = i12, Math_fround(HEAPF32[tempDoublePtr >> 2]));
 f21 = (HEAP32[tempDoublePtr >> 2] = i16, Math_fround(HEAPF32[tempDoublePtr >> 2]));
 f22 = (HEAP32[tempDoublePtr >> 2] = i17, Math_fround(HEAPF32[tempDoublePtr >> 2]));
 do if (HEAP8[i9 + (i10 * 40 | 0) + 38 >> 0] | 0) {
  f23 = Math_fround(HEAPF32[i6 + 240 >> 2]);
  HEAPF32[i11 >> 2] = f23 >= f19 ? f23 : f19;
  f23 = Math_fround(f21 - f18);
  f24 = Math_fround(f22 - f20);
  HEAPF32[i3 >> 2] = f23;
  HEAPF32[i3 + 4 >> 2] = f24;
  __ZN5ImGui8ItemSizeERK6ImVec2f(i3, f19);
  i12 = HEAP32[1460598] | 0;
  i13 = i12 + 6392 | 0;
  i8 = HEAP32[i13 >> 2] | 0;
  HEAP32[i8 + 256 >> 2] = 0;
  i14 = i8 + 264 | 0;
  HEAP32[i14 >> 2] = HEAP32[i4 >> 2];
  HEAP32[i14 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
  HEAP32[i14 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
  HEAP32[i14 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
  i14 = i8 + 260 | 0;
  HEAP32[i14 >> 2] = 0;
  i8 = HEAP32[i13 >> 2] | 0;
  f24 = Math_fround(HEAPF32[i8 + 468 >> 2]);
  if (f24 < f22) {
   f23 = Math_fround(HEAPF32[i8 + 476 >> 2]);
   if (f23 > f20) {
    f25 = Math_fround(HEAPF32[i8 + 464 >> 2]);
    if (f25 < f21) {
     f26 = Math_fround(HEAPF32[i8 + 472 >> 2]);
     if (f26 > Math_fround(HEAPF32[i4 >> 2])) {
      i27 = i8 + 472 | 0;
      f28 = f25;
      f29 = f26;
      f30 = f23;
     } else i1 = 11;
    } else i1 = 11;
   } else i1 = 11;
  } else i1 = 11;
  if ((i1 | 0) == 11) {
   if (!(HEAP8[i12 + 11092 >> 0] | 0)) break;
   f23 = Math_fround(HEAPF32[i8 + 464 >> 2]);
   i13 = i8 + 472 | 0;
   f26 = Math_fround(HEAPF32[i13 >> 2]);
   i27 = i13;
   f28 = f23;
   f29 = f26;
   f30 = Math_fround(HEAPF32[i8 + 476 >> 2]);
  }
  i13 = i4;
  i15 = HEAP32[i13 >> 2] | 0;
  i31 = HEAP32[i13 + 4 >> 2] | 0;
  i13 = i3;
  HEAP32[i13 >> 2] = i15;
  HEAP32[i13 + 4 >> 2] = i31;
  i13 = i3 + 8 | 0;
  i32 = i13;
  HEAP32[i32 >> 2] = i16;
  HEAP32[i32 + 4 >> 2] = i17;
  f26 = (HEAP32[tempDoublePtr >> 2] = i15, Math_fround(HEAPF32[tempDoublePtr >> 2]));
  f23 = (HEAP32[tempDoublePtr >> 2] = i31, Math_fround(HEAPF32[tempDoublePtr >> 2]));
  i31 = i8 + 464 | 0;
  i8 = HEAP32[(f28 <= f26 ? i3 : i31) >> 2] | 0;
  i15 = HEAP32[(f24 <= f23 ? i3 : i31) + 4 >> 2] | 0;
  i31 = i3;
  HEAP32[i31 >> 2] = i8;
  HEAP32[i31 + 4 >> 2] = i15;
  i31 = HEAP32[(f29 > f21 ? i13 : i27) >> 2] | 0;
  i32 = HEAP32[(f30 > f22 ? i13 : i27) + 4 >> 2] | 0;
  i33 = i13;
  HEAP32[i33 >> 2] = i31;
  HEAP32[i33 + 4 >> 2] = i32;
  f23 = (HEAP32[tempDoublePtr >> 2] = i8, Math_fround(HEAPF32[tempDoublePtr >> 2]));
  f24 = Math_fround(HEAPF32[i12 + 5440 >> 2]);
  f26 = Math_fround(f23 - f24);
  f23 = Math_fround(HEAPF32[i12 + 5444 >> 2]);
  f25 = Math_fround(HEAPF32[i12 + 212 >> 2]);
  if (!(f25 >= f26)) break;
  f26 = (HEAP32[tempDoublePtr >> 2] = i15, Math_fround(HEAPF32[tempDoublePtr >> 2]));
  f34 = (HEAP32[tempDoublePtr >> 2] = i31, Math_fround(HEAPF32[tempDoublePtr >> 2]));
  f35 = Math_fround(f23 + (HEAP32[tempDoublePtr >> 2] = i32, Math_fround(HEAPF32[tempDoublePtr >> 2])));
  f36 = Math_fround(f24 + f34);
  f34 = Math_fround(f26 - f23);
  f23 = Math_fround(HEAPF32[i12 + 216 >> 2]);
  if (f23 < f35 & (f25 < f36 & f23 >= f34)) HEAP32[i14 >> 2] = 1;
 } while (0);
 if (!(HEAP8[i9 + (i10 * 40 | 0) + 36 >> 0] | 0)) if (!(HEAP8[i5 + 6432 >> 0] | 0)) i1 = 21; else {
  i27 = HEAP32[i5 + 6420 >> 2] | 0;
  if (!i27) i1 = 21; else HEAP32[i6 + 256 >> 2] = i27;
 } else i1 = 21;
 if ((i1 | 0) == 21) if (!(HEAP8[i9 + (i10 * 40 | 0) + 37 >> 0] | 0)) if (HEAP8[i5 + 6436 >> 0] | 0) HEAP32[i6 + 256 >> 2] = HEAP32[i5 + 6424 >> 2];
 i5 = i6 + 264 | 0;
 HEAP32[i5 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
 i4 = HEAP32[i7 >> 2] | 0;
 if ((i4 | 0) > 0) {
  HEAP32[i7 >> 2] = i4 + -1;
  STACKTOP = i2;
  return;
 } else ___assert_fail(38278, 56850, 1268, 31920);
}

function __ZN5ImGui18RenderNavHighlightERK6ImRectji(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, f11 = f0, f12 = f0, f13 = f0, i14 = 0, i15 = 0, f16 = f0, i17 = 0, i18 = 0, f19 = f0, i20 = 0, i21 = 0, f22 = f0, i23 = 0, f24 = f0, f25 = f0, f26 = f0, f27 = f0, f28 = f0, f29 = f0, i30 = 0, i31 = 0, f32 = f0, f33 = f0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i5 = i4 + 40 | 0;
 i6 = i4 + 32 | 0;
 i7 = i4 + 16 | 0;
 i8 = i4 + 8 | 0;
 i9 = i4;
 i10 = HEAP32[1460598] | 0;
 if ((HEAP32[i10 + 6648 >> 2] | 0) != (i2 | 0)) {
  STACKTOP = i4;
  return;
 }
 if ((i3 & 4 | 0) == 0 & (HEAP8[i10 + 6730 >> 0] | 0) != 0) {
  STACKTOP = i4;
  return;
 }
 i2 = HEAP32[i10 + 6392 >> 2] | 0;
 HEAP8[i2 + 120 >> 0] = 1;
 if (HEAP8[i2 + 296 >> 0] | 0) {
  STACKTOP = i4;
  return;
 }
 if (!(i3 & 8)) f11 = Math_fround(HEAPF32[i10 + 5416 >> 2]); else f11 = Math_fround(0.0);
 HEAP32[i7 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAP32[i7 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
 i1 = i2 + 464 | 0;
 f12 = Math_fround(HEAPF32[i7 >> 2]);
 f13 = Math_fround(HEAPF32[i1 >> 2]);
 i14 = HEAP32[(f12 >= f13 ? i7 : i1) >> 2] | 0;
 i15 = i7 + 4 | 0;
 f12 = Math_fround(HEAPF32[i15 >> 2]);
 f16 = Math_fround(HEAPF32[i2 + 468 >> 2]);
 i17 = HEAP32[(f12 >= f16 ? i7 : i1) + 4 >> 2] | 0;
 i1 = i7;
 HEAP32[i1 >> 2] = i14;
 HEAP32[i1 + 4 >> 2] = i17;
 i1 = i7 + 8 | 0;
 i18 = i2 + 472 | 0;
 f12 = Math_fround(HEAPF32[i1 >> 2]);
 f19 = Math_fround(HEAPF32[i18 >> 2]);
 i20 = HEAP32[(f12 < f19 ? i1 : i18) >> 2] | 0;
 i21 = i7 + 12 | 0;
 f12 = Math_fround(HEAPF32[i21 >> 2]);
 f22 = Math_fround(HEAPF32[i2 + 476 >> 2]);
 i23 = HEAP32[(f12 < f22 ? i1 : i18) + 4 >> 2] | 0;
 i18 = i1;
 HEAP32[i18 >> 2] = i20;
 HEAP32[i18 + 4 >> 2] = i23;
 if (i3 & 1 | 0) {
  f12 = (HEAP32[tempDoublePtr >> 2] = i23, Math_fround(HEAPF32[tempDoublePtr >> 2]));
  f24 = (HEAP32[tempDoublePtr >> 2] = i20, Math_fround(HEAPF32[tempDoublePtr >> 2]));
  f25 = (HEAP32[tempDoublePtr >> 2] = i17, Math_fround(HEAPF32[tempDoublePtr >> 2]));
  f26 = Math_fround((HEAP32[tempDoublePtr >> 2] = i14, Math_fround(HEAPF32[tempDoublePtr >> 2])) + Math_fround(-4.0));
  HEAPF32[i7 >> 2] = f26;
  f27 = Math_fround(f25 + Math_fround(-4.0));
  HEAPF32[i15 >> 2] = f27;
  f25 = Math_fround(f24 + Math_fround(4.0));
  HEAPF32[i7 + 8 >> 2] = f25;
  f24 = Math_fround(f12 + Math_fround(4.0));
  HEAPF32[i21 >> 2] = f24;
  i14 = i2 + 632 | 0;
  if (!(f26 >= f13) | !(f27 >= f16) | !(f25 <= f19) | !(f24 <= f22)) {
   i17 = HEAP32[i14 >> 2] | 0;
   i20 = i7;
   i23 = HEAP32[i20 + 4 >> 2] | 0;
   i18 = i8;
   HEAP32[i18 >> 2] = HEAP32[i20 >> 2];
   HEAP32[i18 + 4 >> 2] = i23;
   i23 = i1;
   i18 = HEAP32[i23 + 4 >> 2] | 0;
   i20 = i9;
   HEAP32[i20 >> 2] = HEAP32[i23 >> 2];
   HEAP32[i20 + 4 >> 2] = i18;
   HEAP32[i6 >> 2] = HEAP32[i8 >> 2];
   HEAP32[i6 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
   HEAP32[i5 >> 2] = HEAP32[i9 >> 2];
   HEAP32[i5 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
   __ZN10ImDrawList12PushClipRectE6ImVec2S0_b(i17, i6, i5, 0);
   f22 = Math_fround(HEAPF32[i7 >> 2]);
   f19 = Math_fround(HEAPF32[i15 >> 2]);
   f16 = Math_fround(HEAPF32[i1 >> 2]);
   f13 = Math_fround(HEAPF32[i21 >> 2]);
   f28 = f16;
   f29 = f13;
   i30 = HEAP32[1460598] | 0;
   i31 = 0;
   f32 = f22;
   f33 = f19;
  } else {
   f28 = f25;
   f29 = f24;
   i30 = i10;
   i31 = 1;
   f32 = f26;
   f33 = f27;
  }
  i10 = HEAP32[i14 >> 2] | 0;
  f27 = Math_fround(f32 + Math_fround(1.0));
  f32 = Math_fround(f33 + Math_fround(1.0));
  HEAPF32[i5 >> 2] = f27;
  HEAPF32[i5 + 4 >> 2] = f32;
  f32 = Math_fround(f28 + Math_fround(-1.0));
  f28 = Math_fround(f29 + Math_fround(-1.0));
  HEAPF32[i6 >> 2] = f32;
  HEAPF32[i6 + 4 >> 2] = f28;
  f28 = Math_fround(HEAPF32[i30 + 6148 >> 2]);
  f32 = Math_fround(HEAPF32[i30 + 6152 >> 2]);
  f29 = Math_fround(HEAPF32[i30 + 6156 >> 2]);
  f27 = Math_fround(HEAPF32[i30 + 6160 >> 2]);
  f33 = Math_fround(f27 * Math_fround(HEAPF32[i30 + 5356 >> 2]));
  i30 = f28 < Math_fround(0.0);
  i21 = f28 > Math_fround(1.0);
  i15 = ~~Math_fround(Math_fround((i21 ? Math_fround(1.0) : f28) * Math_fround(255.0)) + Math_fround(.5));
  i21 = f32 < Math_fround(0.0);
  i17 = f32 > Math_fround(1.0);
  i9 = ~~Math_fround(Math_fround((i17 ? Math_fround(1.0) : f32) * Math_fround(255.0)) + Math_fround(.5)) << 8;
  i17 = f29 < Math_fround(0.0);
  i8 = f29 > Math_fround(1.0);
  i18 = ~~Math_fround(Math_fround((i8 ? Math_fround(1.0) : f29) * Math_fround(255.0)) + Math_fround(.5)) << 16;
  i8 = f33 < Math_fround(0.0);
  i20 = f33 > Math_fround(1.0);
  i23 = ~~Math_fround(Math_fround((i20 ? Math_fround(1.0) : f33) * Math_fround(255.0)) + Math_fround(.5)) << 24;
  __ZN10ImDrawList7AddRectERK6ImVec2S2_jfif(i10, i5, i6, (i21 ? 0 : i9) | (i30 ? 0 : i15) | (i17 ? 0 : i18) | (i8 ? 0 : i23), f11, 15, Math_fround(2.0));
  if (!i31) __ZN10ImDrawList11PopClipRectEv(HEAP32[i14 >> 2] | 0);
 }
 if (i3 & 2 | 0) {
  i3 = HEAP32[1460598] | 0;
  f33 = Math_fround(HEAPF32[i3 + 6148 >> 2]);
  f29 = Math_fround(HEAPF32[i3 + 6152 >> 2]);
  f32 = Math_fround(HEAPF32[i3 + 6156 >> 2]);
  f28 = Math_fround(HEAPF32[i3 + 6160 >> 2]);
  f27 = Math_fround(f28 * Math_fround(HEAPF32[i3 + 5356 >> 2]));
  i3 = f33 < Math_fround(0.0);
  i14 = f33 > Math_fround(1.0);
  i31 = ~~Math_fround(Math_fround((i14 ? Math_fround(1.0) : f33) * Math_fround(255.0)) + Math_fround(.5));
  i14 = f29 < Math_fround(0.0);
  i23 = f29 > Math_fround(1.0);
  i8 = ~~Math_fround(Math_fround((i23 ? Math_fround(1.0) : f29) * Math_fround(255.0)) + Math_fround(.5)) << 8;
  i23 = f32 < Math_fround(0.0);
  i18 = f32 > Math_fround(1.0);
  i17 = ~~Math_fround(Math_fround((i18 ? Math_fround(1.0) : f32) * Math_fround(255.0)) + Math_fround(.5)) << 16;
  i18 = f27 < Math_fround(0.0);
  i15 = f27 > Math_fround(1.0);
  i30 = ~~Math_fround(Math_fround((i15 ? Math_fround(1.0) : f27) * Math_fround(255.0)) + Math_fround(.5)) << 24;
  __ZN10ImDrawList7AddRectERK6ImVec2S2_jfif(HEAP32[i2 + 632 >> 2] | 0, i7, i1, (i14 ? 0 : i8) | (i3 ? 0 : i31) | (i23 ? 0 : i17) | (i18 ? 0 : i30), f11, -1, Math_fround(1.0));
 }
 STACKTOP = i4;
 return;
}

function __ZN5ImGui17RenderTextClippedERK6ImVec2S2_PKcS4_PS1_S2_PK6ImRect(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, f16 = f0, f17 = f0, f18 = f0, f19 = f0, i20 = 0, i21 = 0, f22 = f0, f23 = f0, i24 = 0, i25 = 0, i26 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i8 + 8 | 0;
 i10 = i8;
 i11 = (i4 | 0) == 0 ? -1 : i4;
 if (i11 >>> 0 > i3 >>> 0) i12 = i3; else {
  STACKTOP = i8;
  return;
 }
 L3 : while (1) {
  switch (HEAP8[i12 >> 0] | 0) {
  case 0:
   {
    i13 = i12;
    break L3;
    break;
   }
  case 35:
   {
    i4 = i12 + 1 | 0;
    if ((HEAP8[i4 >> 0] | 0) == 35) {
     i13 = i12;
     break L3;
    } else i14 = i4;
    break;
   }
  default:
   i14 = i12 + 1 | 0;
  }
  if (i14 >>> 0 < i11 >>> 0) i12 = i14; else {
   i13 = i14;
   break;
  }
 }
 if ((i13 | 0) == (i3 | 0)) {
  STACKTOP = i8;
  return;
 }
 i14 = HEAP32[1460598] | 0;
 i12 = HEAP32[i14 + 6392 >> 2] | 0;
 i11 = i1;
 i4 = HEAP32[i11 >> 2] | 0;
 i15 = HEAP32[i11 + 4 >> 2] | 0;
 i11 = i10;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i11 + 4 >> 2] = i15;
 if (!i5) {
  i15 = HEAP32[i14 + 6180 >> 2] | 0;
  f16 = Math_fround(HEAPF32[i14 + 6184 >> 2]);
  __ZNK6ImFont13CalcTextSizeAEfffPKcS1_PS1_(i9, i15, f16, Math_fround(3402823469999999843913219.0e14), Math_fround(0.0), i3, i13, 0);
  f17 = Math_fround(HEAPF32[i9 >> 2]);
  if (f17 > Math_fround(0.0)) {
   f18 = Math_fround(f17 - Math_fround(f16 / Math_fround(HEAPF32[i15 >> 2])));
   HEAPF32[i9 >> 2] = f18;
   f19 = f18;
  } else f19 = f17;
  f17 = Math_fround(~~Math_fround(f19 + Math_fround(.949999988)) | 0);
  HEAPF32[i9 >> 2] = f17;
  i20 = HEAP32[i9 + 4 >> 2] | 0;
  i21 = i10;
  f22 = Math_fround(HEAPF32[i10 >> 2]);
  f23 = f17;
 } else {
  f17 = (HEAP32[tempDoublePtr >> 2] = i4, Math_fround(HEAPF32[tempDoublePtr >> 2]));
  f19 = Math_fround(HEAPF32[i5 >> 2]);
  i20 = HEAP32[i5 + 4 >> 2] | 0;
  i21 = i10;
  f22 = f17;
  f23 = f19;
 }
 f19 = (HEAP32[tempDoublePtr >> 2] = i20, Math_fround(HEAPF32[tempDoublePtr >> 2]));
 i5 = (i7 | 0) != 0;
 i4 = i5 ? i7 : i1;
 i1 = i5 ? i7 + 8 | 0 : i2;
 f17 = Math_fround(f23 + f22);
 f22 = Math_fround(HEAPF32[i1 >> 2]);
 if (!(f17 >= f22)) {
  f17 = (HEAP32[tempDoublePtr >> 2] = i20, Math_fround(HEAPF32[tempDoublePtr >> 2]));
  f18 = Math_fround(Math_fround(HEAPF32[i10 + 4 >> 2]) + f17);
  i24 = f18 >= Math_fround(HEAPF32[i1 + 4 >> 2]);
 } else i24 = 1;
 if (i5) {
  f18 = Math_fround(HEAPF32[i21 >> 2]);
  if (f18 < Math_fround(HEAPF32[i4 >> 2])) i25 = 1; else {
   f18 = Math_fround(HEAPF32[i10 + 4 >> 2]);
   i25 = f18 < Math_fround(HEAPF32[i4 + 4 >> 2]) & 1;
  }
  i26 = (i25 | i24 & 1 | 0) != 0;
 } else i26 = i24;
 f18 = Math_fround(HEAPF32[i6 >> 2]);
 if (f18 > Math_fround(0.0)) {
  f17 = Math_fround(HEAPF32[i21 >> 2]);
  f16 = Math_fround(f17 + Math_fround(f18 * Math_fround(Math_fround(Math_fround(HEAPF32[i2 >> 2]) - f17) - f23)));
  HEAPF32[i21 >> 2] = f17 >= f16 ? f17 : f16;
 }
 f16 = Math_fround(HEAPF32[i6 + 4 >> 2]);
 if (f16 > Math_fround(0.0)) {
  i6 = i10 + 4 | 0;
  f17 = Math_fround(HEAPF32[i6 >> 2]);
  f23 = Math_fround(f17 + Math_fround(f16 * Math_fround(Math_fround(Math_fround(HEAPF32[i2 + 4 >> 2]) - f17) - f19)));
  HEAPF32[i6 >> 2] = f17 >= f23 ? f17 : f23;
 }
 if (i26) {
  i26 = HEAP32[i4 + 4 >> 2] | 0;
  i6 = HEAP32[i1 + 4 >> 2] | 0;
  HEAP32[i9 >> 2] = HEAP32[i4 >> 2];
  HEAP32[i9 + 4 >> 2] = i26;
  HEAPF32[i9 + 8 >> 2] = f22;
  HEAP32[i9 + 12 >> 2] = i6;
  f22 = Math_fround(HEAPF32[i14 + 6184 >> 2]);
  i6 = HEAP32[1460598] | 0;
  f23 = Math_fround(HEAPF32[i6 + 5508 >> 2]);
  f17 = Math_fround(HEAPF32[i6 + 5512 >> 2]);
  f19 = Math_fround(HEAPF32[i6 + 5516 >> 2]);
  f16 = Math_fround(HEAPF32[i6 + 5520 >> 2]);
  f18 = Math_fround(f16 * Math_fround(HEAPF32[i6 + 5356 >> 2]));
  i6 = f23 < Math_fround(0.0);
  i26 = f23 > Math_fround(1.0);
  i4 = ~~Math_fround(Math_fround((i26 ? Math_fround(1.0) : f23) * Math_fround(255.0)) + Math_fround(.5));
  i26 = f17 < Math_fround(0.0);
  i1 = f17 > Math_fround(1.0);
  i2 = ~~Math_fround(Math_fround((i1 ? Math_fround(1.0) : f17) * Math_fround(255.0)) + Math_fround(.5)) << 8;
  i1 = f19 < Math_fround(0.0);
  i21 = f19 > Math_fround(1.0);
  i24 = ~~Math_fround(Math_fround((i21 ? Math_fround(1.0) : f19) * Math_fround(255.0)) + Math_fround(.5)) << 16;
  i21 = f18 < Math_fround(0.0);
  i25 = f18 > Math_fround(1.0);
  i5 = ~~Math_fround(Math_fround((i25 ? Math_fround(1.0) : f18) * Math_fround(255.0)) + Math_fround(.5)) << 24;
  __ZN10ImDrawList7AddTextEPK6ImFontfRK6ImVec2jPKcS7_fPK6ImVec4(HEAP32[i12 + 632 >> 2] | 0, HEAP32[i14 + 6180 >> 2] | 0, f22, i10, (i26 ? 0 : i2) | (i6 ? 0 : i4) | (i1 ? 0 : i24) | (i21 ? 0 : i5), i3, i13, Math_fround(0.0), i9);
 } else {
  f22 = Math_fround(HEAPF32[i14 + 6184 >> 2]);
  i9 = HEAP32[1460598] | 0;
  f18 = Math_fround(HEAPF32[i9 + 5508 >> 2]);
  f19 = Math_fround(HEAPF32[i9 + 5512 >> 2]);
  f17 = Math_fround(HEAPF32[i9 + 5516 >> 2]);
  f23 = Math_fround(HEAPF32[i9 + 5520 >> 2]);
  f16 = Math_fround(f23 * Math_fround(HEAPF32[i9 + 5356 >> 2]));
  i9 = f18 < Math_fround(0.0);
  i5 = f18 > Math_fround(1.0);
  i21 = ~~Math_fround(Math_fround((i5 ? Math_fround(1.0) : f18) * Math_fround(255.0)) + Math_fround(.5));
  i5 = f19 < Math_fround(0.0);
  i24 = f19 > Math_fround(1.0);
  i1 = ~~Math_fround(Math_fround((i24 ? Math_fround(1.0) : f19) * Math_fround(255.0)) + Math_fround(.5)) << 8;
  i24 = f17 < Math_fround(0.0);
  i4 = f17 > Math_fround(1.0);
  i6 = ~~Math_fround(Math_fround((i4 ? Math_fround(1.0) : f17) * Math_fround(255.0)) + Math_fround(.5)) << 16;
  i4 = f16 < Math_fround(0.0);
  i2 = f16 > Math_fround(1.0);
  i26 = ~~Math_fround(Math_fround((i2 ? Math_fround(1.0) : f16) * Math_fround(255.0)) + Math_fround(.5)) << 24;
  __ZN10ImDrawList7AddTextEPK6ImFontfRK6ImVec2jPKcS7_fPK6ImVec4(HEAP32[i12 + 632 >> 2] | 0, HEAP32[i14 + 6180 >> 2] | 0, f22, i10, (i5 ? 0 : i1) | (i9 ? 0 : i21) | (i24 ? 0 : i6) | (i4 ? 0 : i26), i3, i13, Math_fround(0.0), 0);
 }
 if (HEAP8[i14 + 11092 >> 0] | 0) __ZL15LogRenderedTextPK6ImVec2PKcS3_(i10, i3, i13);
 STACKTOP = i8;
 return;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, f38 = f0, i39 = 0, i40 = 0, i41 = 0;
 i1 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(352);
 i8 = i7 + 208 | 0;
 i9 = i7 + 200 | 0;
 i10 = i7 + 196 | 0;
 i11 = i7 + 184 | 0;
 i12 = i7 + 172 | 0;
 i13 = i7 + 168 | 0;
 i14 = i7 + 8 | 0;
 i15 = i7 + 4 | 0;
 i16 = i7;
 i17 = i7 + 337 | 0;
 i18 = i7 + 336 | 0;
 __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_(i11, i4, i8, i9, i10);
 HEAP32[i12 >> 2] = 0;
 HEAP32[i12 + 4 >> 2] = 0;
 HEAP32[i12 + 8 >> 2] = 0;
 i4 = 0;
 while (1) {
  if ((i4 | 0) == 3) break;
  HEAP32[i12 + (i4 << 2) >> 2] = 0;
  i4 = i4 + 1 | 0;
 }
 i4 = i12 + 11 | 0;
 i19 = i12 + 8 | 0;
 if ((HEAP8[i4 >> 0] | 0) < 0) i20 = (HEAP32[i19 >> 2] & 2147483647) + -1 | 0; else i20 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i12, i20, 0);
 i20 = (HEAP8[i4 >> 0] | 0) < 0 ? HEAP32[i12 >> 2] | 0 : i12;
 HEAP32[i13 >> 2] = i20;
 HEAP32[i15 >> 2] = i14;
 HEAP32[i16 >> 2] = 0;
 HEAP8[i17 >> 0] = 1;
 HEAP8[i18 >> 0] = 69;
 i21 = i12 + 4 | 0;
 i22 = HEAP32[i2 >> 2] | 0;
 i23 = i20;
 i20 = i22;
 i24 = i22;
 L8 : while (1) {
  if (!i20) {
   i25 = 0;
   i26 = 0;
   i27 = 1;
  } else {
   i22 = HEAP32[i20 + 12 >> 2] | 0;
   if ((i22 | 0) == (HEAP32[i20 + 16 >> 2] | 0)) i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i20 >> 2] | 0) + 36 >> 2] & 127](i20) | 0; else i28 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i22 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i28, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i2 >> 2] = 0;
    i25 = 0;
    i26 = 0;
    i27 = 1;
   } else {
    i25 = i20;
    i26 = i24;
    i27 = 0;
   }
  }
  i22 = HEAP32[i3 >> 2] | 0;
  do if (!i22) i1 = 19; else {
   i29 = HEAP32[i22 + 12 >> 2] | 0;
   if ((i29 | 0) == (HEAP32[i22 + 16 >> 2] | 0)) i30 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i22 >> 2] | 0) + 36 >> 2] & 127](i22) | 0; else i30 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i29 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i30, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i3 >> 2] = 0;
    i1 = 19;
    break;
   } else if (i27) {
    i31 = i22;
    break;
   } else {
    i32 = i23;
    i33 = i22;
    break L8;
   }
  } while (0);
  if ((i1 | 0) == 19) {
   i1 = 0;
   if (i27) {
    i32 = i23;
    i33 = 0;
    break;
   } else i31 = 0;
  }
  i22 = HEAP8[i4 >> 0] | 0;
  i29 = i22 << 24 >> 24 < 0 ? HEAP32[i21 >> 2] | 0 : i22 & 255;
  if ((HEAP32[i13 >> 2] | 0) == (i23 + i29 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i12, i29 << 1, 0);
   if ((HEAP8[i4 >> 0] | 0) < 0) i34 = (HEAP32[i19 >> 2] & 2147483647) + -1 | 0; else i34 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i12, i34, 0);
   i22 = (HEAP8[i4 >> 0] | 0) < 0 ? HEAP32[i12 >> 2] | 0 : i12;
   HEAP32[i13 >> 2] = i22 + i29;
   i35 = i22;
  } else i35 = i23;
  i22 = i25 + 12 | 0;
  i29 = HEAP32[i22 >> 2] | 0;
  i36 = i25 + 16 | 0;
  if ((i29 | 0) == (HEAP32[i36 >> 2] | 0)) i37 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i25 >> 2] | 0) + 36 >> 2] & 127](i25) | 0; else i37 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i29 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw(i37, i17, i18, i35, i13, HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0, i11, i14, i15, i16, i8) | 0) {
   i32 = i35;
   i33 = i31;
   break;
  }
  i29 = HEAP32[i22 >> 2] | 0;
  if ((i29 | 0) == (HEAP32[i36 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i25 >> 2] | 0) + 40 >> 2] & 127](i25) | 0;
   i23 = i35;
   i20 = i25;
   i24 = i26;
   continue;
  } else {
   HEAP32[i22 >> 2] = i29 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i29 >> 2] | 0) | 0;
   i23 = i35;
   i20 = i25;
   i24 = i26;
   continue;
  }
 }
 i24 = HEAP8[i11 + 11 >> 0] | 0;
 if (!((HEAP8[i17 >> 0] | 0) == 0 ? 1 : ((i24 << 24 >> 24 < 0 ? HEAP32[i11 + 4 >> 2] | 0 : i24 & 255) | 0) == 0)) {
  i24 = HEAP32[i15 >> 2] | 0;
  if ((i24 - i14 | 0) < 160) {
   i17 = HEAP32[i16 >> 2] | 0;
   HEAP32[i15 >> 2] = i24 + 4;
   HEAP32[i24 >> 2] = i17;
  }
 }
 f38 = Math_fround(__ZNSt3__215__num_get_floatIfEET_PKcS3_Rj(i32, HEAP32[i13 >> 2] | 0, i5));
 HEAPF32[i6 >> 2] = f38;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i11, i14, HEAP32[i15 >> 2] | 0, i5);
 if (!i25) i39 = 1; else {
  i15 = HEAP32[i25 + 12 >> 2] | 0;
  if ((i15 | 0) == (HEAP32[i25 + 16 >> 2] | 0)) i40 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i26 >> 2] | 0) + 36 >> 2] & 127](i25) | 0; else i40 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i15 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i40, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i2 >> 2] = 0;
   i39 = 1;
  } else i39 = 0;
 }
 do if (!i33) i1 = 47; else {
  i40 = HEAP32[i33 + 12 >> 2] | 0;
  if ((i40 | 0) == (HEAP32[i33 + 16 >> 2] | 0)) i41 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i33 >> 2] | 0) + 36 >> 2] & 127](i33) | 0; else i41 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i40 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i41, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i3 >> 2] = 0;
   i1 = 47;
   break;
  } else if (i39) break; else {
   i1 = 49;
   break;
  }
 } while (0);
 if ((i1 | 0) == 47) if (i39) i1 = 49;
 if ((i1 | 0) == 49) HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 2;
 i5 = HEAP32[i2 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i12);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i11);
 STACKTOP = i7;
 return i5 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, f38 = f0, i39 = 0, i40 = 0, i41 = 0;
 i1 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 i8 = i7 + 200 | 0;
 i9 = i7 + 199 | 0;
 i10 = i7 + 198 | 0;
 i11 = i7 + 184 | 0;
 i12 = i7 + 172 | 0;
 i13 = i7 + 168 | 0;
 i14 = i7 + 8 | 0;
 i15 = i7 + 4 | 0;
 i16 = i7;
 i17 = i7 + 197 | 0;
 i18 = i7 + 196 | 0;
 __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_(i11, i4, i8, i9, i10);
 HEAP32[i12 >> 2] = 0;
 HEAP32[i12 + 4 >> 2] = 0;
 HEAP32[i12 + 8 >> 2] = 0;
 i4 = 0;
 while (1) {
  if ((i4 | 0) == 3) break;
  HEAP32[i12 + (i4 << 2) >> 2] = 0;
  i4 = i4 + 1 | 0;
 }
 i4 = i12 + 11 | 0;
 i19 = i12 + 8 | 0;
 if ((HEAP8[i4 >> 0] | 0) < 0) i20 = (HEAP32[i19 >> 2] & 2147483647) + -1 | 0; else i20 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i12, i20, 0);
 i20 = (HEAP8[i4 >> 0] | 0) < 0 ? HEAP32[i12 >> 2] | 0 : i12;
 HEAP32[i13 >> 2] = i20;
 HEAP32[i15 >> 2] = i14;
 HEAP32[i16 >> 2] = 0;
 HEAP8[i17 >> 0] = 1;
 HEAP8[i18 >> 0] = 69;
 i21 = i12 + 4 | 0;
 i22 = HEAP32[i2 >> 2] | 0;
 i23 = i20;
 i20 = i22;
 i24 = i22;
 L8 : while (1) {
  if (!i20) {
   i25 = 0;
   i26 = 0;
   i27 = 1;
  } else {
   i22 = HEAP32[i20 + 12 >> 2] | 0;
   if ((i22 | 0) == (HEAP32[i20 + 16 >> 2] | 0)) i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i20 >> 2] | 0) + 36 >> 2] & 127](i20) | 0; else i28 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i22 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i28, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i2 >> 2] = 0;
    i25 = 0;
    i26 = 0;
    i27 = 1;
   } else {
    i25 = i20;
    i26 = i24;
    i27 = 0;
   }
  }
  i22 = HEAP32[i3 >> 2] | 0;
  do if (!i22) i1 = 19; else {
   i29 = HEAP32[i22 + 12 >> 2] | 0;
   if ((i29 | 0) == (HEAP32[i22 + 16 >> 2] | 0)) i30 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i22 >> 2] | 0) + 36 >> 2] & 127](i22) | 0; else i30 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i29 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i30, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i3 >> 2] = 0;
    i1 = 19;
    break;
   } else if (i27) {
    i31 = i22;
    break;
   } else {
    i32 = i23;
    i33 = i22;
    break L8;
   }
  } while (0);
  if ((i1 | 0) == 19) {
   i1 = 0;
   if (i27) {
    i32 = i23;
    i33 = 0;
    break;
   } else i31 = 0;
  }
  i22 = HEAP8[i4 >> 0] | 0;
  i29 = i22 << 24 >> 24 < 0 ? HEAP32[i21 >> 2] | 0 : i22 & 255;
  if ((HEAP32[i13 >> 2] | 0) == (i23 + i29 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i12, i29 << 1, 0);
   if ((HEAP8[i4 >> 0] | 0) < 0) i34 = (HEAP32[i19 >> 2] & 2147483647) + -1 | 0; else i34 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i12, i34, 0);
   i22 = (HEAP8[i4 >> 0] | 0) < 0 ? HEAP32[i12 >> 2] | 0 : i12;
   HEAP32[i13 >> 2] = i22 + i29;
   i35 = i22;
  } else i35 = i23;
  i22 = i25 + 12 | 0;
  i29 = HEAP32[i22 >> 2] | 0;
  i36 = i25 + 16 | 0;
  if ((i29 | 0) == (HEAP32[i36 >> 2] | 0)) i37 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i25 >> 2] | 0) + 36 >> 2] & 127](i25) | 0; else i37 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i29 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_(i37 & 255, i17, i18, i35, i13, HEAP8[i9 >> 0] | 0, HEAP8[i10 >> 0] | 0, i11, i14, i15, i16, i8) | 0) {
   i32 = i35;
   i33 = i31;
   break;
  }
  i29 = HEAP32[i22 >> 2] | 0;
  if ((i29 | 0) == (HEAP32[i36 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i25 >> 2] | 0) + 40 >> 2] & 127](i25) | 0;
   i23 = i35;
   i20 = i25;
   i24 = i26;
   continue;
  } else {
   HEAP32[i22 >> 2] = i29 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i29 >> 0] | 0) | 0;
   i23 = i35;
   i20 = i25;
   i24 = i26;
   continue;
  }
 }
 i24 = HEAP8[i11 + 11 >> 0] | 0;
 if (!((HEAP8[i17 >> 0] | 0) == 0 ? 1 : ((i24 << 24 >> 24 < 0 ? HEAP32[i11 + 4 >> 2] | 0 : i24 & 255) | 0) == 0)) {
  i24 = HEAP32[i15 >> 2] | 0;
  if ((i24 - i14 | 0) < 160) {
   i17 = HEAP32[i16 >> 2] | 0;
   HEAP32[i15 >> 2] = i24 + 4;
   HEAP32[i24 >> 2] = i17;
  }
 }
 f38 = Math_fround(__ZNSt3__215__num_get_floatIfEET_PKcS3_Rj(i32, HEAP32[i13 >> 2] | 0, i5));
 HEAPF32[i6 >> 2] = f38;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i11, i14, HEAP32[i15 >> 2] | 0, i5);
 if (!i25) i39 = 1; else {
  i15 = HEAP32[i25 + 12 >> 2] | 0;
  if ((i15 | 0) == (HEAP32[i25 + 16 >> 2] | 0)) i40 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i26 >> 2] | 0) + 36 >> 2] & 127](i25) | 0; else i40 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i15 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i40, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i2 >> 2] = 0;
   i39 = 1;
  } else i39 = 0;
 }
 do if (!i33) i1 = 47; else {
  i40 = HEAP32[i33 + 12 >> 2] | 0;
  if ((i40 | 0) == (HEAP32[i33 + 16 >> 2] | 0)) i41 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i33 >> 2] | 0) + 36 >> 2] & 127](i33) | 0; else i41 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i40 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i41, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i3 >> 2] = 0;
   i1 = 47;
   break;
  } else if (i39) break; else {
   i1 = 49;
   break;
  }
 } while (0);
 if ((i1 | 0) == 47) if (i39) i1 = 49;
 if ((i1 | 0) == 49) HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 2;
 i5 = HEAP32[i2 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i12);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i11);
 STACKTOP = i7;
 return i5 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, d38 = 0.0, i39 = 0, i40 = 0, i41 = 0;
 i1 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(352);
 i8 = i7 + 208 | 0;
 i9 = i7 + 200 | 0;
 i10 = i7 + 196 | 0;
 i11 = i7 + 184 | 0;
 i12 = i7 + 172 | 0;
 i13 = i7 + 168 | 0;
 i14 = i7 + 8 | 0;
 i15 = i7 + 4 | 0;
 i16 = i7;
 i17 = i7 + 337 | 0;
 i18 = i7 + 336 | 0;
 __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_(i11, i4, i8, i9, i10);
 HEAP32[i12 >> 2] = 0;
 HEAP32[i12 + 4 >> 2] = 0;
 HEAP32[i12 + 8 >> 2] = 0;
 i4 = 0;
 while (1) {
  if ((i4 | 0) == 3) break;
  HEAP32[i12 + (i4 << 2) >> 2] = 0;
  i4 = i4 + 1 | 0;
 }
 i4 = i12 + 11 | 0;
 i19 = i12 + 8 | 0;
 if ((HEAP8[i4 >> 0] | 0) < 0) i20 = (HEAP32[i19 >> 2] & 2147483647) + -1 | 0; else i20 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i12, i20, 0);
 i20 = (HEAP8[i4 >> 0] | 0) < 0 ? HEAP32[i12 >> 2] | 0 : i12;
 HEAP32[i13 >> 2] = i20;
 HEAP32[i15 >> 2] = i14;
 HEAP32[i16 >> 2] = 0;
 HEAP8[i17 >> 0] = 1;
 HEAP8[i18 >> 0] = 69;
 i21 = i12 + 4 | 0;
 i22 = HEAP32[i2 >> 2] | 0;
 i23 = i20;
 i20 = i22;
 i24 = i22;
 L8 : while (1) {
  if (!i20) {
   i25 = 0;
   i26 = 0;
   i27 = 1;
  } else {
   i22 = HEAP32[i20 + 12 >> 2] | 0;
   if ((i22 | 0) == (HEAP32[i20 + 16 >> 2] | 0)) i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i20 >> 2] | 0) + 36 >> 2] & 127](i20) | 0; else i28 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i22 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i28, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i2 >> 2] = 0;
    i25 = 0;
    i26 = 0;
    i27 = 1;
   } else {
    i25 = i20;
    i26 = i24;
    i27 = 0;
   }
  }
  i22 = HEAP32[i3 >> 2] | 0;
  do if (!i22) i1 = 19; else {
   i29 = HEAP32[i22 + 12 >> 2] | 0;
   if ((i29 | 0) == (HEAP32[i22 + 16 >> 2] | 0)) i30 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i22 >> 2] | 0) + 36 >> 2] & 127](i22) | 0; else i30 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i29 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i30, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i3 >> 2] = 0;
    i1 = 19;
    break;
   } else if (i27) {
    i31 = i22;
    break;
   } else {
    i32 = i23;
    i33 = i22;
    break L8;
   }
  } while (0);
  if ((i1 | 0) == 19) {
   i1 = 0;
   if (i27) {
    i32 = i23;
    i33 = 0;
    break;
   } else i31 = 0;
  }
  i22 = HEAP8[i4 >> 0] | 0;
  i29 = i22 << 24 >> 24 < 0 ? HEAP32[i21 >> 2] | 0 : i22 & 255;
  if ((HEAP32[i13 >> 2] | 0) == (i23 + i29 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i12, i29 << 1, 0);
   if ((HEAP8[i4 >> 0] | 0) < 0) i34 = (HEAP32[i19 >> 2] & 2147483647) + -1 | 0; else i34 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i12, i34, 0);
   i22 = (HEAP8[i4 >> 0] | 0) < 0 ? HEAP32[i12 >> 2] | 0 : i12;
   HEAP32[i13 >> 2] = i22 + i29;
   i35 = i22;
  } else i35 = i23;
  i22 = i25 + 12 | 0;
  i29 = HEAP32[i22 >> 2] | 0;
  i36 = i25 + 16 | 0;
  if ((i29 | 0) == (HEAP32[i36 >> 2] | 0)) i37 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i25 >> 2] | 0) + 36 >> 2] & 127](i25) | 0; else i37 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i29 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw(i37, i17, i18, i35, i13, HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0, i11, i14, i15, i16, i8) | 0) {
   i32 = i35;
   i33 = i31;
   break;
  }
  i29 = HEAP32[i22 >> 2] | 0;
  if ((i29 | 0) == (HEAP32[i36 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i25 >> 2] | 0) + 40 >> 2] & 127](i25) | 0;
   i23 = i35;
   i20 = i25;
   i24 = i26;
   continue;
  } else {
   HEAP32[i22 >> 2] = i29 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i29 >> 2] | 0) | 0;
   i23 = i35;
   i20 = i25;
   i24 = i26;
   continue;
  }
 }
 i24 = HEAP8[i11 + 11 >> 0] | 0;
 if (!((HEAP8[i17 >> 0] | 0) == 0 ? 1 : ((i24 << 24 >> 24 < 0 ? HEAP32[i11 + 4 >> 2] | 0 : i24 & 255) | 0) == 0)) {
  i24 = HEAP32[i15 >> 2] | 0;
  if ((i24 - i14 | 0) < 160) {
   i17 = HEAP32[i16 >> 2] | 0;
   HEAP32[i15 >> 2] = i24 + 4;
   HEAP32[i24 >> 2] = i17;
  }
 }
 d38 = +__ZNSt3__215__num_get_floatIeEET_PKcS3_Rj(i32, HEAP32[i13 >> 2] | 0, i5);
 HEAPF64[i6 >> 3] = d38;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i11, i14, HEAP32[i15 >> 2] | 0, i5);
 if (!i25) i39 = 1; else {
  i15 = HEAP32[i25 + 12 >> 2] | 0;
  if ((i15 | 0) == (HEAP32[i25 + 16 >> 2] | 0)) i40 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i26 >> 2] | 0) + 36 >> 2] & 127](i25) | 0; else i40 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i15 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i40, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i2 >> 2] = 0;
   i39 = 1;
  } else i39 = 0;
 }
 do if (!i33) i1 = 47; else {
  i40 = HEAP32[i33 + 12 >> 2] | 0;
  if ((i40 | 0) == (HEAP32[i33 + 16 >> 2] | 0)) i41 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i33 >> 2] | 0) + 36 >> 2] & 127](i33) | 0; else i41 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i40 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i41, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i3 >> 2] = 0;
   i1 = 47;
   break;
  } else if (i39) break; else {
   i1 = 49;
   break;
  }
 } while (0);
 if ((i1 | 0) == 47) if (i39) i1 = 49;
 if ((i1 | 0) == 49) HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 2;
 i5 = HEAP32[i2 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i12);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i11);
 STACKTOP = i7;
 return i5 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, d38 = 0.0, i39 = 0, i40 = 0, i41 = 0;
 i1 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(352);
 i8 = i7 + 208 | 0;
 i9 = i7 + 200 | 0;
 i10 = i7 + 196 | 0;
 i11 = i7 + 184 | 0;
 i12 = i7 + 172 | 0;
 i13 = i7 + 168 | 0;
 i14 = i7 + 8 | 0;
 i15 = i7 + 4 | 0;
 i16 = i7;
 i17 = i7 + 337 | 0;
 i18 = i7 + 336 | 0;
 __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_(i11, i4, i8, i9, i10);
 HEAP32[i12 >> 2] = 0;
 HEAP32[i12 + 4 >> 2] = 0;
 HEAP32[i12 + 8 >> 2] = 0;
 i4 = 0;
 while (1) {
  if ((i4 | 0) == 3) break;
  HEAP32[i12 + (i4 << 2) >> 2] = 0;
  i4 = i4 + 1 | 0;
 }
 i4 = i12 + 11 | 0;
 i19 = i12 + 8 | 0;
 if ((HEAP8[i4 >> 0] | 0) < 0) i20 = (HEAP32[i19 >> 2] & 2147483647) + -1 | 0; else i20 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i12, i20, 0);
 i20 = (HEAP8[i4 >> 0] | 0) < 0 ? HEAP32[i12 >> 2] | 0 : i12;
 HEAP32[i13 >> 2] = i20;
 HEAP32[i15 >> 2] = i14;
 HEAP32[i16 >> 2] = 0;
 HEAP8[i17 >> 0] = 1;
 HEAP8[i18 >> 0] = 69;
 i21 = i12 + 4 | 0;
 i22 = HEAP32[i2 >> 2] | 0;
 i23 = i20;
 i20 = i22;
 i24 = i22;
 L8 : while (1) {
  if (!i20) {
   i25 = 0;
   i26 = 0;
   i27 = 1;
  } else {
   i22 = HEAP32[i20 + 12 >> 2] | 0;
   if ((i22 | 0) == (HEAP32[i20 + 16 >> 2] | 0)) i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i20 >> 2] | 0) + 36 >> 2] & 127](i20) | 0; else i28 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i22 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i28, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i2 >> 2] = 0;
    i25 = 0;
    i26 = 0;
    i27 = 1;
   } else {
    i25 = i20;
    i26 = i24;
    i27 = 0;
   }
  }
  i22 = HEAP32[i3 >> 2] | 0;
  do if (!i22) i1 = 19; else {
   i29 = HEAP32[i22 + 12 >> 2] | 0;
   if ((i29 | 0) == (HEAP32[i22 + 16 >> 2] | 0)) i30 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i22 >> 2] | 0) + 36 >> 2] & 127](i22) | 0; else i30 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i29 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i30, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i3 >> 2] = 0;
    i1 = 19;
    break;
   } else if (i27) {
    i31 = i22;
    break;
   } else {
    i32 = i23;
    i33 = i22;
    break L8;
   }
  } while (0);
  if ((i1 | 0) == 19) {
   i1 = 0;
   if (i27) {
    i32 = i23;
    i33 = 0;
    break;
   } else i31 = 0;
  }
  i22 = HEAP8[i4 >> 0] | 0;
  i29 = i22 << 24 >> 24 < 0 ? HEAP32[i21 >> 2] | 0 : i22 & 255;
  if ((HEAP32[i13 >> 2] | 0) == (i23 + i29 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i12, i29 << 1, 0);
   if ((HEAP8[i4 >> 0] | 0) < 0) i34 = (HEAP32[i19 >> 2] & 2147483647) + -1 | 0; else i34 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i12, i34, 0);
   i22 = (HEAP8[i4 >> 0] | 0) < 0 ? HEAP32[i12 >> 2] | 0 : i12;
   HEAP32[i13 >> 2] = i22 + i29;
   i35 = i22;
  } else i35 = i23;
  i22 = i25 + 12 | 0;
  i29 = HEAP32[i22 >> 2] | 0;
  i36 = i25 + 16 | 0;
  if ((i29 | 0) == (HEAP32[i36 >> 2] | 0)) i37 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i25 >> 2] | 0) + 36 >> 2] & 127](i25) | 0; else i37 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i29 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw(i37, i17, i18, i35, i13, HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0, i11, i14, i15, i16, i8) | 0) {
   i32 = i35;
   i33 = i31;
   break;
  }
  i29 = HEAP32[i22 >> 2] | 0;
  if ((i29 | 0) == (HEAP32[i36 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i25 >> 2] | 0) + 40 >> 2] & 127](i25) | 0;
   i23 = i35;
   i20 = i25;
   i24 = i26;
   continue;
  } else {
   HEAP32[i22 >> 2] = i29 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i29 >> 2] | 0) | 0;
   i23 = i35;
   i20 = i25;
   i24 = i26;
   continue;
  }
 }
 i24 = HEAP8[i11 + 11 >> 0] | 0;
 if (!((HEAP8[i17 >> 0] | 0) == 0 ? 1 : ((i24 << 24 >> 24 < 0 ? HEAP32[i11 + 4 >> 2] | 0 : i24 & 255) | 0) == 0)) {
  i24 = HEAP32[i15 >> 2] | 0;
  if ((i24 - i14 | 0) < 160) {
   i17 = HEAP32[i16 >> 2] | 0;
   HEAP32[i15 >> 2] = i24 + 4;
   HEAP32[i24 >> 2] = i17;
  }
 }
 d38 = +__ZNSt3__215__num_get_floatIdEET_PKcS3_Rj(i32, HEAP32[i13 >> 2] | 0, i5);
 HEAPF64[i6 >> 3] = d38;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i11, i14, HEAP32[i15 >> 2] | 0, i5);
 if (!i25) i39 = 1; else {
  i15 = HEAP32[i25 + 12 >> 2] | 0;
  if ((i15 | 0) == (HEAP32[i25 + 16 >> 2] | 0)) i40 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i26 >> 2] | 0) + 36 >> 2] & 127](i25) | 0; else i40 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i15 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i40, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i2 >> 2] = 0;
   i39 = 1;
  } else i39 = 0;
 }
 do if (!i33) i1 = 47; else {
  i40 = HEAP32[i33 + 12 >> 2] | 0;
  if ((i40 | 0) == (HEAP32[i33 + 16 >> 2] | 0)) i41 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i33 >> 2] | 0) + 36 >> 2] & 127](i33) | 0; else i41 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i40 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i41, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i3 >> 2] = 0;
   i1 = 47;
   break;
  } else if (i39) break; else {
   i1 = 49;
   break;
  }
 } while (0);
 if ((i1 | 0) == 47) if (i39) i1 = 49;
 if ((i1 | 0) == 49) HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 2;
 i5 = HEAP32[i2 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i12);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i11);
 STACKTOP = i7;
 return i5 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, d38 = 0.0, i39 = 0, i40 = 0, i41 = 0;
 i1 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 i8 = i7 + 200 | 0;
 i9 = i7 + 199 | 0;
 i10 = i7 + 198 | 0;
 i11 = i7 + 184 | 0;
 i12 = i7 + 172 | 0;
 i13 = i7 + 168 | 0;
 i14 = i7 + 8 | 0;
 i15 = i7 + 4 | 0;
 i16 = i7;
 i17 = i7 + 197 | 0;
 i18 = i7 + 196 | 0;
 __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_(i11, i4, i8, i9, i10);
 HEAP32[i12 >> 2] = 0;
 HEAP32[i12 + 4 >> 2] = 0;
 HEAP32[i12 + 8 >> 2] = 0;
 i4 = 0;
 while (1) {
  if ((i4 | 0) == 3) break;
  HEAP32[i12 + (i4 << 2) >> 2] = 0;
  i4 = i4 + 1 | 0;
 }
 i4 = i12 + 11 | 0;
 i19 = i12 + 8 | 0;
 if ((HEAP8[i4 >> 0] | 0) < 0) i20 = (HEAP32[i19 >> 2] & 2147483647) + -1 | 0; else i20 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i12, i20, 0);
 i20 = (HEAP8[i4 >> 0] | 0) < 0 ? HEAP32[i12 >> 2] | 0 : i12;
 HEAP32[i13 >> 2] = i20;
 HEAP32[i15 >> 2] = i14;
 HEAP32[i16 >> 2] = 0;
 HEAP8[i17 >> 0] = 1;
 HEAP8[i18 >> 0] = 69;
 i21 = i12 + 4 | 0;
 i22 = HEAP32[i2 >> 2] | 0;
 i23 = i20;
 i20 = i22;
 i24 = i22;
 L8 : while (1) {
  if (!i20) {
   i25 = 0;
   i26 = 0;
   i27 = 1;
  } else {
   i22 = HEAP32[i20 + 12 >> 2] | 0;
   if ((i22 | 0) == (HEAP32[i20 + 16 >> 2] | 0)) i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i20 >> 2] | 0) + 36 >> 2] & 127](i20) | 0; else i28 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i22 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i28, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i2 >> 2] = 0;
    i25 = 0;
    i26 = 0;
    i27 = 1;
   } else {
    i25 = i20;
    i26 = i24;
    i27 = 0;
   }
  }
  i22 = HEAP32[i3 >> 2] | 0;
  do if (!i22) i1 = 19; else {
   i29 = HEAP32[i22 + 12 >> 2] | 0;
   if ((i29 | 0) == (HEAP32[i22 + 16 >> 2] | 0)) i30 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i22 >> 2] | 0) + 36 >> 2] & 127](i22) | 0; else i30 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i29 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i30, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i3 >> 2] = 0;
    i1 = 19;
    break;
   } else if (i27) {
    i31 = i22;
    break;
   } else {
    i32 = i23;
    i33 = i22;
    break L8;
   }
  } while (0);
  if ((i1 | 0) == 19) {
   i1 = 0;
   if (i27) {
    i32 = i23;
    i33 = 0;
    break;
   } else i31 = 0;
  }
  i22 = HEAP8[i4 >> 0] | 0;
  i29 = i22 << 24 >> 24 < 0 ? HEAP32[i21 >> 2] | 0 : i22 & 255;
  if ((HEAP32[i13 >> 2] | 0) == (i23 + i29 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i12, i29 << 1, 0);
   if ((HEAP8[i4 >> 0] | 0) < 0) i34 = (HEAP32[i19 >> 2] & 2147483647) + -1 | 0; else i34 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i12, i34, 0);
   i22 = (HEAP8[i4 >> 0] | 0) < 0 ? HEAP32[i12 >> 2] | 0 : i12;
   HEAP32[i13 >> 2] = i22 + i29;
   i35 = i22;
  } else i35 = i23;
  i22 = i25 + 12 | 0;
  i29 = HEAP32[i22 >> 2] | 0;
  i36 = i25 + 16 | 0;
  if ((i29 | 0) == (HEAP32[i36 >> 2] | 0)) i37 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i25 >> 2] | 0) + 36 >> 2] & 127](i25) | 0; else i37 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i29 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_(i37 & 255, i17, i18, i35, i13, HEAP8[i9 >> 0] | 0, HEAP8[i10 >> 0] | 0, i11, i14, i15, i16, i8) | 0) {
   i32 = i35;
   i33 = i31;
   break;
  }
  i29 = HEAP32[i22 >> 2] | 0;
  if ((i29 | 0) == (HEAP32[i36 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i25 >> 2] | 0) + 40 >> 2] & 127](i25) | 0;
   i23 = i35;
   i20 = i25;
   i24 = i26;
   continue;
  } else {
   HEAP32[i22 >> 2] = i29 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i29 >> 0] | 0) | 0;
   i23 = i35;
   i20 = i25;
   i24 = i26;
   continue;
  }
 }
 i24 = HEAP8[i11 + 11 >> 0] | 0;
 if (!((HEAP8[i17 >> 0] | 0) == 0 ? 1 : ((i24 << 24 >> 24 < 0 ? HEAP32[i11 + 4 >> 2] | 0 : i24 & 255) | 0) == 0)) {
  i24 = HEAP32[i15 >> 2] | 0;
  if ((i24 - i14 | 0) < 160) {
   i17 = HEAP32[i16 >> 2] | 0;
   HEAP32[i15 >> 2] = i24 + 4;
   HEAP32[i24 >> 2] = i17;
  }
 }
 d38 = +__ZNSt3__215__num_get_floatIeEET_PKcS3_Rj(i32, HEAP32[i13 >> 2] | 0, i5);
 HEAPF64[i6 >> 3] = d38;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i11, i14, HEAP32[i15 >> 2] | 0, i5);
 if (!i25) i39 = 1; else {
  i15 = HEAP32[i25 + 12 >> 2] | 0;
  if ((i15 | 0) == (HEAP32[i25 + 16 >> 2] | 0)) i40 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i26 >> 2] | 0) + 36 >> 2] & 127](i25) | 0; else i40 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i15 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i40, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i2 >> 2] = 0;
   i39 = 1;
  } else i39 = 0;
 }
 do if (!i33) i1 = 47; else {
  i40 = HEAP32[i33 + 12 >> 2] | 0;
  if ((i40 | 0) == (HEAP32[i33 + 16 >> 2] | 0)) i41 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i33 >> 2] | 0) + 36 >> 2] & 127](i33) | 0; else i41 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i40 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i41, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i3 >> 2] = 0;
   i1 = 47;
   break;
  } else if (i39) break; else {
   i1 = 49;
   break;
  }
 } while (0);
 if ((i1 | 0) == 47) if (i39) i1 = 49;
 if ((i1 | 0) == 49) HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 2;
 i5 = HEAP32[i2 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i12);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i11);
 STACKTOP = i7;
 return i5 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, d38 = 0.0, i39 = 0, i40 = 0, i41 = 0;
 i1 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 i8 = i7 + 200 | 0;
 i9 = i7 + 199 | 0;
 i10 = i7 + 198 | 0;
 i11 = i7 + 184 | 0;
 i12 = i7 + 172 | 0;
 i13 = i7 + 168 | 0;
 i14 = i7 + 8 | 0;
 i15 = i7 + 4 | 0;
 i16 = i7;
 i17 = i7 + 197 | 0;
 i18 = i7 + 196 | 0;
 __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_(i11, i4, i8, i9, i10);
 HEAP32[i12 >> 2] = 0;
 HEAP32[i12 + 4 >> 2] = 0;
 HEAP32[i12 + 8 >> 2] = 0;
 i4 = 0;
 while (1) {
  if ((i4 | 0) == 3) break;
  HEAP32[i12 + (i4 << 2) >> 2] = 0;
  i4 = i4 + 1 | 0;
 }
 i4 = i12 + 11 | 0;
 i19 = i12 + 8 | 0;
 if ((HEAP8[i4 >> 0] | 0) < 0) i20 = (HEAP32[i19 >> 2] & 2147483647) + -1 | 0; else i20 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i12, i20, 0);
 i20 = (HEAP8[i4 >> 0] | 0) < 0 ? HEAP32[i12 >> 2] | 0 : i12;
 HEAP32[i13 >> 2] = i20;
 HEAP32[i15 >> 2] = i14;
 HEAP32[i16 >> 2] = 0;
 HEAP8[i17 >> 0] = 1;
 HEAP8[i18 >> 0] = 69;
 i21 = i12 + 4 | 0;
 i22 = HEAP32[i2 >> 2] | 0;
 i23 = i20;
 i20 = i22;
 i24 = i22;
 L8 : while (1) {
  if (!i20) {
   i25 = 0;
   i26 = 0;
   i27 = 1;
  } else {
   i22 = HEAP32[i20 + 12 >> 2] | 0;
   if ((i22 | 0) == (HEAP32[i20 + 16 >> 2] | 0)) i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i20 >> 2] | 0) + 36 >> 2] & 127](i20) | 0; else i28 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i22 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i28, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i2 >> 2] = 0;
    i25 = 0;
    i26 = 0;
    i27 = 1;
   } else {
    i25 = i20;
    i26 = i24;
    i27 = 0;
   }
  }
  i22 = HEAP32[i3 >> 2] | 0;
  do if (!i22) i1 = 19; else {
   i29 = HEAP32[i22 + 12 >> 2] | 0;
   if ((i29 | 0) == (HEAP32[i22 + 16 >> 2] | 0)) i30 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i22 >> 2] | 0) + 36 >> 2] & 127](i22) | 0; else i30 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i29 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i30, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i3 >> 2] = 0;
    i1 = 19;
    break;
   } else if (i27) {
    i31 = i22;
    break;
   } else {
    i32 = i23;
    i33 = i22;
    break L8;
   }
  } while (0);
  if ((i1 | 0) == 19) {
   i1 = 0;
   if (i27) {
    i32 = i23;
    i33 = 0;
    break;
   } else i31 = 0;
  }
  i22 = HEAP8[i4 >> 0] | 0;
  i29 = i22 << 24 >> 24 < 0 ? HEAP32[i21 >> 2] | 0 : i22 & 255;
  if ((HEAP32[i13 >> 2] | 0) == (i23 + i29 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i12, i29 << 1, 0);
   if ((HEAP8[i4 >> 0] | 0) < 0) i34 = (HEAP32[i19 >> 2] & 2147483647) + -1 | 0; else i34 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i12, i34, 0);
   i22 = (HEAP8[i4 >> 0] | 0) < 0 ? HEAP32[i12 >> 2] | 0 : i12;
   HEAP32[i13 >> 2] = i22 + i29;
   i35 = i22;
  } else i35 = i23;
  i22 = i25 + 12 | 0;
  i29 = HEAP32[i22 >> 2] | 0;
  i36 = i25 + 16 | 0;
  if ((i29 | 0) == (HEAP32[i36 >> 2] | 0)) i37 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i25 >> 2] | 0) + 36 >> 2] & 127](i25) | 0; else i37 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i29 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_(i37 & 255, i17, i18, i35, i13, HEAP8[i9 >> 0] | 0, HEAP8[i10 >> 0] | 0, i11, i14, i15, i16, i8) | 0) {
   i32 = i35;
   i33 = i31;
   break;
  }
  i29 = HEAP32[i22 >> 2] | 0;
  if ((i29 | 0) == (HEAP32[i36 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i25 >> 2] | 0) + 40 >> 2] & 127](i25) | 0;
   i23 = i35;
   i20 = i25;
   i24 = i26;
   continue;
  } else {
   HEAP32[i22 >> 2] = i29 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i29 >> 0] | 0) | 0;
   i23 = i35;
   i20 = i25;
   i24 = i26;
   continue;
  }
 }
 i24 = HEAP8[i11 + 11 >> 0] | 0;
 if (!((HEAP8[i17 >> 0] | 0) == 0 ? 1 : ((i24 << 24 >> 24 < 0 ? HEAP32[i11 + 4 >> 2] | 0 : i24 & 255) | 0) == 0)) {
  i24 = HEAP32[i15 >> 2] | 0;
  if ((i24 - i14 | 0) < 160) {
   i17 = HEAP32[i16 >> 2] | 0;
   HEAP32[i15 >> 2] = i24 + 4;
   HEAP32[i24 >> 2] = i17;
  }
 }
 d38 = +__ZNSt3__215__num_get_floatIdEET_PKcS3_Rj(i32, HEAP32[i13 >> 2] | 0, i5);
 HEAPF64[i6 >> 3] = d38;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i11, i14, HEAP32[i15 >> 2] | 0, i5);
 if (!i25) i39 = 1; else {
  i15 = HEAP32[i25 + 12 >> 2] | 0;
  if ((i15 | 0) == (HEAP32[i25 + 16 >> 2] | 0)) i40 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i26 >> 2] | 0) + 36 >> 2] & 127](i25) | 0; else i40 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i15 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i40, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i2 >> 2] = 0;
   i39 = 1;
  } else i39 = 0;
 }
 do if (!i33) i1 = 47; else {
  i40 = HEAP32[i33 + 12 >> 2] | 0;
  if ((i40 | 0) == (HEAP32[i33 + 16 >> 2] | 0)) i41 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i33 >> 2] | 0) + 36 >> 2] & 127](i33) | 0; else i41 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i40 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i41, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i3 >> 2] = 0;
   i1 = 47;
   break;
  } else if (i39) break; else {
   i1 = 49;
   break;
  }
 } while (0);
 if ((i1 | 0) == 47) if (i39) i1 = 49;
 if ((i1 | 0) == 49) HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 2;
 i5 = HEAP32[i2 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i12);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i11);
 STACKTOP = i7;
 return i5 | 0;
}

function __ZN9MenuBuild10drawHeaderEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, f21 = f0, i22 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 i3 = i2 + 48 | 0;
 i4 = i2 + 40 | 0;
 i5 = i2 + 8 | 0;
 i6 = i2 + 224 | 0;
 i7 = i2 + 212 | 0;
 i8 = i2 + 64 | 0;
 i9 = i2 + 208 | 0;
 i10 = i2 + 52 | 0;
 i11 = i2;
 i12 = HEAP32[1460597] | 0;
 if (!(HEAP8[73440] | 0)) if (___cxa_guard_acquire(73440) | 0) {
  __ZNSt3__26localeC2Ev(i6);
  i13 = __Znwj(24) | 0;
  HEAP32[i13 >> 2] = 0;
  HEAP32[i13 + 4 >> 2] = 0;
  HEAP32[i13 + 8 >> 2] = 0;
  HEAP32[i13 + 12 >> 2] = 0;
  HEAP32[i13 + 16 >> 2] = 0;
  HEAP32[i13 + 20 >> 2] = 0;
  __ZNSt3__28numpunctIcEC2Ej(i13, 0);
  HEAP32[i13 >> 2] = 3392;
  __ZNSt3__26locale14__install_ctorERKS0_PNS0_5facetEl(5842176, i6, i13, __ZNSt3__26locale2id5__getEv(5845204) | 0);
  __ZNSt3__26localeD2Ev(i6);
 }
 i13 = i8 + 64 | 0;
 i14 = i8 + 8 | 0;
 HEAP32[i14 >> 2] = 3456;
 i15 = i8 + 12 | 0;
 HEAP32[i8 >> 2] = 1084;
 HEAP32[i13 >> 2] = 1104;
 HEAP32[i8 + 4 >> 2] = 0;
 __ZNSt3__28ios_base4initEPv(i8 + 64 | 0, i15);
 HEAP32[i8 + 136 >> 2] = 0;
 HEAP32[i8 + 140 >> 2] = -1;
 HEAP32[i8 >> 2] = 3436;
 HEAP32[i13 >> 2] = 3476;
 HEAP32[i14 >> 2] = 3456;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev(i15);
 HEAP32[i15 >> 2] = 3492;
 i14 = i8 + 44 | 0;
 HEAP32[i14 >> 2] = 0;
 HEAP32[i14 + 4 >> 2] = 0;
 HEAP32[i14 + 8 >> 2] = 0;
 HEAP32[i14 + 12 >> 2] = 0;
 HEAP32[i8 + 60 >> 2] = 24;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i6 + 4 >> 2] = 0;
 HEAP32[i6 + 8 >> 2] = 0;
 __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE(i15, i6);
 if ((HEAP8[i6 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[i6 >> 2] | 0);
 i16 = i8 + (HEAP32[(HEAP32[i8 >> 2] | 0) + -12 >> 2] | 0) | 0;
 __ZNKSt3__28ios_base6getlocEv(i9, i16);
 __ZNSt3__28ios_base5imbueERKNS_6localeE(i6, i16, 5842176);
 __ZNSt3__26localeD2Ev(i6);
 i17 = HEAP32[i16 + 24 >> 2] | 0;
 if (i17 | 0) {
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i17 >> 2] | 0) + 8 >> 2] & 63](i17, 5842176);
  i16 = i17 + 4 | 0;
  __ZNSt3__26localeC2ERKS0_(i7, i16);
  __ZNSt3__26localeaSERKS0_(i16, 5842176) | 0;
  __ZNSt3__26localeD2Ev(i7);
 }
 __ZNSt3__26localeD2Ev(i9);
 i9 = i8 + 8 | 0;
 i16 = i9 + (HEAP32[(HEAP32[i9 >> 2] | 0) + -12 >> 2] | 0) + 4 | 0;
 HEAP32[i16 >> 2] = HEAP32[i16 >> 2] & -261 | 4;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEi(i9, HEAP32[i1 + 8 >> 2] | 0) | 0;
 HEAP32[i7 >> 2] = 0;
 HEAP32[i7 + 4 >> 2] = 0;
 HEAP32[i7 + 8 >> 2] = 0;
 i16 = i7 + 11 | 0;
 HEAP8[i16 >> 0] = 5;
 HEAP8[i7 >> 0] = HEAP8[27623] | 0;
 HEAP8[i7 + 1 >> 0] = HEAP8[27624] | 0;
 HEAP8[i7 + 2 >> 0] = HEAP8[27625] | 0;
 HEAP8[i7 + 3 >> 0] = HEAP8[27626] | 0;
 HEAP8[i7 + 4 >> 0] = HEAP8[27627] | 0;
 HEAP8[i7 + 5 >> 0] = 0;
 __ZNKSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv(i10, i15);
 i17 = i10 + 11 | 0;
 i18 = HEAP8[i17 >> 0] | 0;
 i19 = i18 << 24 >> 24 < 0;
 i20 = __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj(i7, i19 ? HEAP32[i10 >> 2] | 0 : i10, i19 ? HEAP32[i10 + 4 >> 2] | 0 : i18 & 255) | 0;
 HEAP32[i6 >> 2] = HEAP32[i20 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i20 + 4 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i20 + 8 >> 2];
 HEAP32[i20 >> 2] = 0;
 HEAP32[i20 + 4 >> 2] = 0;
 HEAP32[i20 + 8 >> 2] = 0;
 if ((HEAP8[i17 >> 0] | 0) < 0) __ZdlPv(HEAP32[i10 >> 2] | 0);
 if ((HEAP8[i16 >> 0] | 0) < 0) __ZdlPv(HEAP32[i7 >> 2] | 0);
 if (__ZN5ImGui16BeginMainMenuBarEv() | 0) {
  if (__ZN5ImGui9BeginMenuEPKcb(27629, 1) | 0) {
   if (__ZN5ImGui8MenuItemEPKcS1_bb(27634, 0, 0, 1) | 0) HEAP8[i1 + 16 >> 0] = 1;
   if (__ZN5ImGui8MenuItemEPKcS1_bb(26519, 0, 0, 1) | 0) HEAP8[i1 + 17 >> 0] = 1;
   __ZN5ImGui7EndMenuEv();
  }
  f21 = Math_fround(HEAP32[i12 + 4 >> 2] | 0);
  i12 = ~~Math_fround(f21 + Math_fround(-180.0));
  __ZN5ImGui8SameLineEff(Math_fround(0.0), Math_fround(Math_fround(f21 * Math_fround(.5)) + Math_fround(-75.0)));
  i7 = i6 + 11 | 0;
  i16 = (HEAP8[i7 >> 0] | 0) < 0 ? HEAP32[i6 >> 2] | 0 : i6;
  HEAP32[i11 >> 2] = 1125515264;
  HEAP32[i11 + 4 >> 2] = 1106247680;
  HEAP8[i5 >> 0] = HEAP8[i11 >> 0] | 0;
  HEAP8[i5 + 1 >> 0] = HEAP8[i11 + 1 >> 0] | 0;
  HEAP8[i5 + 2 >> 0] = HEAP8[i11 + 2 >> 0] | 0;
  HEAP8[i5 + 3 >> 0] = HEAP8[i11 + 3 >> 0] | 0;
  HEAP8[i5 + 4 >> 0] = HEAP8[i11 + 4 >> 0] | 0;
  HEAP8[i5 + 5 >> 0] = HEAP8[i11 + 5 >> 0] | 0;
  HEAP8[i5 + 6 >> 0] = HEAP8[i11 + 6 >> 0] | 0;
  HEAP8[i5 + 7 >> 0] = HEAP8[i11 + 7 >> 0] | 0;
  __ZN5ImGui4TextEPKcz(i16, i5);
  __ZN5ImGui8SameLineEff(Math_fround(i12 | 0), Math_fround(-1.0));
  i12 = i1 + 12 | 0;
  i16 = i4 + 4 | 0;
  i11 = i1 + 48 | 0;
  i1 = 0;
  while (1) {
   HEAP32[i4 >> 2] = HEAP8[27639 + i1 >> 0];
   _sprintf(i5, 27645, i4) | 0;
   i10 = (HEAP32[i12 >> 2] | 0) == (i1 | 0);
   HEAPF32[i4 >> 2] = Math_fround(25.0);
   HEAPF32[i16 >> 2] = Math_fround(24.0);
   if (__ZN5ImGui10SelectableEPKcbiRK6ImVec2(i5, i10, 0, i4) | 0) {
    HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) == (i1 | 0) ? -1 : i1;
    HEAP32[i11 >> 2] = 0;
   }
   if (__ZN5ImGui13IsItemHoveredEi(0) | 0) __ZN5ImGui10SetTooltipEPKcz(HEAP32[3588 + (i1 << 2) >> 2] | 0, i3);
   __ZN5ImGui8SameLineEff(Math_fround(0.0), Math_fround(-1.0));
   if ((i1 | 0) < 4) i1 = i1 + 1 | 0; else break;
  }
  __ZN5ImGui14EndMainMenuBarEv();
  i22 = i7;
 } else i22 = i6 + 11 | 0;
 if ((HEAP8[i22 >> 0] | 0) < 0) __ZdlPv(HEAP32[i6 >> 2] | 0);
 HEAP32[i8 >> 2] = 3436;
 HEAP32[i13 >> 2] = 3476;
 HEAP32[i9 >> 2] = 3456;
 HEAP32[i15 >> 2] = 3492;
 if ((HEAP8[i14 + 11 >> 0] | 0) >= 0) {
  __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev(i15);
  __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev(i8, 3552);
  __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev(i13);
  STACKTOP = i2;
  return;
 }
 __ZdlPv(HEAP32[i14 >> 2] | 0);
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev(i15);
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev(i8, 3552);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev(i13);
 STACKTOP = i2;
 return;
}

function _twoway_strstr(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 1056 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1056);
 i5 = i4 + 1024 | 0;
 i6 = i4;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 + 8 >> 2] = 0;
 HEAP32[i5 + 12 >> 2] = 0;
 HEAP32[i5 + 16 >> 2] = 0;
 HEAP32[i5 + 20 >> 2] = 0;
 HEAP32[i5 + 24 >> 2] = 0;
 HEAP32[i5 + 28 >> 2] = 0;
 i7 = HEAP8[i2 >> 0] | 0;
 L1 : do if (!(i7 << 24 >> 24)) {
  i8 = 1;
  i9 = -1;
  i10 = 0;
  i11 = 1;
  i12 = -1;
  i3 = 26;
 } else {
  i13 = 0;
  i14 = i7;
  do {
   if (!(HEAP8[i1 + i13 >> 0] | 0)) {
    i15 = 0;
    break L1;
   }
   i16 = i5 + (((i14 & 255) >>> 5 & 255) << 2) | 0;
   HEAP32[i16 >> 2] = HEAP32[i16 >> 2] | 1 << (i14 & 31);
   i13 = i13 + 1 | 0;
   HEAP32[i6 + ((i14 & 255) << 2) >> 2] = i13;
   i14 = HEAP8[i2 + i13 >> 0] | 0;
  } while (i14 << 24 >> 24 != 0);
  i14 = i13 >>> 0 > 1;
  if (i14) {
   i16 = 0;
   i17 = -1;
   i18 = 1;
   L6 : while (1) {
    i19 = 1;
    i20 = i16;
    i21 = i18;
    while (1) {
     i22 = i20;
     i23 = i21;
     L10 : while (1) {
      i24 = 1;
      i25 = i23;
      while (1) {
       i26 = HEAP8[i2 + (i24 + i17) >> 0] | 0;
       i27 = HEAP8[i2 + i25 >> 0] | 0;
       if (i26 << 24 >> 24 != i27 << 24 >> 24) break L10;
       if ((i24 | 0) == (i19 | 0)) break;
       i24 = i24 + 1 | 0;
       i28 = i24 + i22 | 0;
       if (i28 >>> 0 >= i13 >>> 0) {
        i29 = i19;
        i30 = i17;
        break L6;
       } else i25 = i28;
      }
      i24 = i19 + i22 | 0;
      i23 = i24 + 1 | 0;
      if (i23 >>> 0 >= i13 >>> 0) {
       i29 = i19;
       i30 = i17;
       break L6;
      } else i22 = i24;
     }
     i23 = i25 - i17 | 0;
     if ((i26 & 255) <= (i27 & 255)) break;
     i21 = i25 + 1 | 0;
     if (i21 >>> 0 >= i13 >>> 0) {
      i29 = i23;
      i30 = i17;
      break L6;
     } else {
      i19 = i23;
      i20 = i25;
     }
    }
    i18 = i22 + 2 | 0;
    if (i18 >>> 0 >= i13 >>> 0) {
     i29 = 1;
     i30 = i22;
     break;
    } else {
     i16 = i22 + 1 | 0;
     i17 = i22;
    }
   }
   if (i14) {
    i17 = 0;
    i16 = -1;
    i18 = 1;
    while (1) {
     i20 = 1;
     i19 = i17;
     i21 = i18;
     while (1) {
      i31 = i19;
      i23 = i21;
      L25 : while (1) {
       i24 = 1;
       i32 = i23;
       while (1) {
        i33 = HEAP8[i2 + (i24 + i16) >> 0] | 0;
        i34 = HEAP8[i2 + i32 >> 0] | 0;
        if (i33 << 24 >> 24 != i34 << 24 >> 24) break L25;
        if ((i24 | 0) == (i20 | 0)) break;
        i24 = i24 + 1 | 0;
        i28 = i24 + i31 | 0;
        if (i28 >>> 0 >= i13 >>> 0) {
         i8 = i29;
         i9 = i30;
         i10 = i13;
         i11 = i20;
         i12 = i16;
         i3 = 26;
         break L1;
        } else i32 = i28;
       }
       i24 = i20 + i31 | 0;
       i23 = i24 + 1 | 0;
       if (i23 >>> 0 >= i13 >>> 0) {
        i8 = i29;
        i9 = i30;
        i10 = i13;
        i11 = i20;
        i12 = i16;
        i3 = 26;
        break L1;
       } else i31 = i24;
      }
      i23 = i32 - i16 | 0;
      if ((i33 & 255) >= (i34 & 255)) break;
      i21 = i32 + 1 | 0;
      if (i21 >>> 0 >= i13 >>> 0) {
       i8 = i29;
       i9 = i30;
       i10 = i13;
       i11 = i23;
       i12 = i16;
       i3 = 26;
       break L1;
      } else {
       i20 = i23;
       i19 = i32;
      }
     }
     i18 = i31 + 2 | 0;
     if (i18 >>> 0 >= i13 >>> 0) {
      i8 = i29;
      i9 = i30;
      i10 = i13;
      i11 = 1;
      i12 = i31;
      i3 = 26;
      break;
     } else {
      i17 = i31 + 1 | 0;
      i16 = i31;
     }
    }
   } else {
    i8 = i29;
    i9 = i30;
    i10 = i13;
    i11 = 1;
    i12 = -1;
    i3 = 26;
   }
  } else {
   i8 = 1;
   i9 = -1;
   i10 = i13;
   i11 = 1;
   i12 = -1;
   i3 = 26;
  }
 } while (0);
 L35 : do if ((i3 | 0) == 26) {
  i30 = (i12 + 1 | 0) >>> 0 > (i9 + 1 | 0) >>> 0;
  i29 = i30 ? i11 : i8;
  i31 = i30 ? i12 : i9;
  i30 = i31 + 1 | 0;
  if (!(_memcmp(i2, i2 + i29 | 0, i30) | 0)) {
   i35 = i10 - i29 | 0;
   i36 = i29;
  } else {
   i29 = i10 - i31 + -1 | 0;
   i35 = 0;
   i36 = (i31 >>> 0 > i29 >>> 0 ? i31 : i29) + 1 | 0;
  }
  i29 = i10 | 63;
  i32 = i10 + -1 | 0;
  i34 = (i35 | 0) != 0;
  i33 = i10 - i36 | 0;
  i22 = i1;
  i25 = 0;
  i27 = i1;
  while (1) {
   i26 = i22;
   do if ((i27 - i26 | 0) >>> 0 < i10 >>> 0) {
    i7 = _memchr(i27, 0, i29) | 0;
    if (!i7) {
     i37 = i27 + i29 | 0;
     break;
    } else if ((i7 - i26 | 0) >>> 0 < i10 >>> 0) {
     i15 = 0;
     break L35;
    } else {
     i37 = i7;
     break;
    }
   } else i37 = i27; while (0);
   i26 = HEAP8[i22 + i32 >> 0] | 0;
   L49 : do if (!(1 << (i26 & 31) & HEAP32[i5 + (((i26 & 255) >>> 5 & 255) << 2) >> 2])) {
    i38 = 0;
    i39 = i10;
   } else {
    i7 = i10 - (HEAP32[i6 + ((i26 & 255) << 2) >> 2] | 0) | 0;
    if (i7 | 0) {
     i38 = 0;
     i39 = i34 & (i25 | 0) != 0 & i7 >>> 0 < i36 >>> 0 ? i33 : i7;
     break;
    }
    i7 = i30 >>> 0 > i25 >>> 0 ? i30 : i25;
    i16 = HEAP8[i2 + i7 >> 0] | 0;
    L54 : do if (!(i16 << 24 >> 24)) i40 = i30; else {
     i17 = i7;
     i18 = i16;
     while (1) {
      if (i18 << 24 >> 24 != (HEAP8[i22 + i17 >> 0] | 0)) break;
      i14 = i17 + 1 | 0;
      i18 = HEAP8[i2 + i14 >> 0] | 0;
      if (!(i18 << 24 >> 24)) {
       i40 = i30;
       break L54;
      } else i17 = i14;
     }
     i38 = 0;
     i39 = i17 - i31 | 0;
     break L49;
    } while (0);
    while (1) {
     if (i40 >>> 0 <= i25 >>> 0) {
      i15 = i22;
      break L35;
     }
     i40 = i40 + -1 | 0;
     if ((HEAP8[i2 + i40 >> 0] | 0) != (HEAP8[i22 + i40 >> 0] | 0)) {
      i38 = i35;
      i39 = i36;
      break;
     }
    }
   } while (0);
   i22 = i22 + i39 | 0;
   i25 = i38;
   i27 = i37;
  }
 } while (0);
 STACKTOP = i4;
 return i15 | 0;
}

function __ZNSt3__26locale5__impC2Ej(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i3;
 HEAP32[i1 + 4 >> 2] = i2 + -1;
 HEAP32[i1 >> 2] = 20628;
 i2 = i1 + 8 | 0;
 __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej(i2, 28);
 i5 = i1 + 144 | 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 + 8 >> 2] = 0;
 i6 = __ZNSt3__211char_traitsIcE6lengthEPKc(70499) | 0;
 if (i6 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i5);
 if (i6 >>> 0 < 11) {
  HEAP8[i5 + 11 >> 0] = i6;
  i7 = i5;
 } else {
  i8 = i6 + 16 & -16;
  i9 = __Znwj(i8) | 0;
  HEAP32[i5 >> 2] = i9;
  HEAP32[i1 + 152 >> 2] = i8 | -2147483648;
  HEAP32[i1 + 148 >> 2] = i6;
  i7 = i9;
 }
 __ZNSt3__211char_traitsIcE4copyEPcPKcj(i7, 70499, i6) | 0;
 HEAP8[i4 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc(i7 + i6 | 0, i4);
 i4 = HEAP32[i2 >> 2] | 0;
 i2 = i1 + 12 | 0;
 i6 = HEAP32[i2 >> 2] | 0;
 while (1) {
  if ((i6 | 0) == (i4 | 0)) break;
  i7 = i6 + -4 | 0;
  HEAP32[i2 >> 2] = i7;
  i6 = i7;
 }
 __ZNSt3__212_GLOBAL__N_14makeINS_7collateIcEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7collateIcEEEEvPT_(i1, 73760);
 __ZNSt3__212_GLOBAL__N_14makeINS_7collateIwEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7collateIwEEEEvPT_(i1, 73768);
 __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIcEEDnbjEERT_T0_T1_T2_();
 __ZNSt3__26locale5__imp7installINS_5ctypeIcEEEEvPT_(i1, 73776);
 __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIwEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_5ctypeIwEEEEvPT_(i1, 73792);
 __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIcc11__mbstate_tEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_(i1, 73800);
 __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIwc11__mbstate_tEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_(i1, 73808);
 __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDsc11__mbstate_tEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_(i1, 73824);
 __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDic11__mbstate_tEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_(i1, 73832);
 __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIcEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8numpunctIcEEEEvPT_(i1, 73840);
 __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIwEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8numpunctIwEEEEvPT_(i1, 73864);
 __ZNSt3__212_GLOBAL__N_14makeINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i1, 73896);
 __ZNSt3__212_GLOBAL__N_14makeINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i1, 73904);
 __ZNSt3__212_GLOBAL__N_14makeINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i1, 73912);
 __ZNSt3__212_GLOBAL__N_14makeINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i1, 73920);
 __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb0EEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_(i1, 73928);
 __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb1EEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_(i1, 73936);
 __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb0EEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_(i1, 73944);
 __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb1EEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_(i1, 73952);
 __ZNSt3__212_GLOBAL__N_14makeINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i1, 73960);
 __ZNSt3__212_GLOBAL__N_14makeINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i1, 73968);
 __ZNSt3__212_GLOBAL__N_14makeINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i1, 73976);
 __ZNSt3__212_GLOBAL__N_14makeINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i1, 73984);
 __ZNSt3__212_GLOBAL__N_14makeINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i1, 73992);
 __ZNSt3__212_GLOBAL__N_14makeINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i1, 74008);
 __ZNSt3__212_GLOBAL__N_14makeINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i1, 74024);
 __ZNSt3__212_GLOBAL__N_14makeINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i1, 74040);
 __ZNSt3__212_GLOBAL__N_14makeINS_8messagesIcEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8messagesIcEEEEvPT_(i1, 74056);
 __ZNSt3__212_GLOBAL__N_14makeINS_8messagesIwEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8messagesIwEEEEvPT_(i1, 74064);
 STACKTOP = i3;
 return;
}

function __ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i(i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i12 = i12 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 i15 = i15 | 0;
 var i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0;
 HEAP32[i3 >> 2] = i1;
 i16 = i14 + 8 + 3 | 0;
 i17 = i14 + 4 | 0;
 i18 = i13 + 8 + 3 | 0;
 i19 = i13 + 4 | 0;
 i20 = (i4 & 512 | 0) == 0;
 i21 = (i15 | 0) > 0;
 i22 = i12 + 11 | 0;
 i23 = i12 + 4 | 0;
 i24 = 0;
 i25 = i5;
 while (1) {
  if ((i24 | 0) == 4) break;
  L4 : do switch (HEAP8[i9 + i24 >> 0] | 0) {
  case 0:
   {
    HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
    i26 = i25;
    break;
   }
  case 1:
   {
    HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
    i5 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i7 >> 2] | 0) + 44 >> 2] & 31](i7, 32) | 0;
    i27 = HEAP32[i3 >> 2] | 0;
    HEAP32[i3 >> 2] = i27 + 4;
    HEAP32[i27 >> 2] = i5;
    i26 = i25;
    break;
   }
  case 3:
   {
    i5 = HEAP8[i16 >> 0] | 0;
    i27 = i5 << 24 >> 24 < 0;
    if (!((i27 ? HEAP32[i17 >> 2] | 0 : i5 & 255) | 0)) i26 = i25; else {
     i5 = HEAP32[(i27 ? HEAP32[i14 >> 2] | 0 : i14) >> 2] | 0;
     i27 = HEAP32[i3 >> 2] | 0;
     HEAP32[i3 >> 2] = i27 + 4;
     HEAP32[i27 >> 2] = i5;
     i26 = i25;
    }
    break;
   }
  case 2:
   {
    i5 = HEAP8[i18 >> 0] | 0;
    i27 = i5 << 24 >> 24 < 0;
    i28 = i27 ? HEAP32[i19 >> 2] | 0 : i5 & 255;
    if (i20 | (i28 | 0) == 0) i26 = i25; else {
     i5 = i27 ? HEAP32[i13 >> 2] | 0 : i13;
     i27 = i5 + (i28 << 2) | 0;
     i29 = HEAP32[i3 >> 2] | 0;
     i30 = i29;
     i31 = i5;
     while (1) {
      if ((i31 | 0) == (i27 | 0)) break;
      HEAP32[i30 >> 2] = HEAP32[i31 >> 2];
      i30 = i30 + 4 | 0;
      i31 = i31 + 4 | 0;
     }
     HEAP32[i3 >> 2] = i29 + (i28 << 2);
     i26 = i25;
    }
    break;
   }
  case 4:
   {
    i31 = HEAP32[i3 >> 2] | 0;
    i30 = i8 ? i25 + 4 | 0 : i25;
    i27 = i30;
    while (1) {
     if (i27 >>> 0 >= i6 >>> 0) break;
     if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i7 >> 2] | 0) + 12 >> 2] & 31](i7, 2048, HEAP32[i27 >> 2] | 0) | 0)) break;
     i27 = i27 + 4 | 0;
    }
    if (i21) {
     i28 = i15;
     i29 = i27;
     while (1) {
      i32 = (i28 | 0) > 0;
      if (!(i29 >>> 0 > i30 >>> 0 & i32)) break;
      i5 = i29 + -4 | 0;
      i33 = HEAP32[i5 >> 2] | 0;
      i34 = HEAP32[i3 >> 2] | 0;
      HEAP32[i3 >> 2] = i34 + 4;
      HEAP32[i34 >> 2] = i33;
      i28 = i28 + -1 | 0;
      i29 = i5;
     }
     if (i32) i35 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i7 >> 2] | 0) + 44 >> 2] & 31](i7, 48) | 0; else i35 = 0;
     i5 = i28;
     i33 = HEAP32[i3 >> 2] | 0;
     while (1) {
      i36 = i33 + 4 | 0;
      if ((i5 | 0) <= 0) break;
      HEAP32[i33 >> 2] = i35;
      i5 = i5 + -1 | 0;
      i33 = i36;
     }
     HEAP32[i3 >> 2] = i36;
     HEAP32[i33 >> 2] = i10;
     i37 = i29;
    } else i37 = i27;
    if ((i37 | 0) == (i30 | 0)) {
     i5 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i7 >> 2] | 0) + 44 >> 2] & 31](i7, 48) | 0;
     i28 = HEAP32[i3 >> 2] | 0;
     i34 = i28 + 4 | 0;
     HEAP32[i3 >> 2] = i34;
     HEAP32[i28 >> 2] = i5;
     i38 = i34;
    } else {
     i34 = HEAP8[i22 >> 0] | 0;
     i5 = i34 << 24 >> 24 < 0;
     if (!((i5 ? HEAP32[i23 >> 2] | 0 : i34 & 255) | 0)) {
      i39 = -1;
      i40 = 0;
      i41 = 0;
      i42 = i37;
     } else {
      i39 = HEAP8[(i5 ? HEAP32[i12 >> 2] | 0 : i12) >> 0] | 0;
      i40 = 0;
      i41 = 0;
      i42 = i37;
     }
     while (1) {
      if ((i42 | 0) == (i30 | 0)) break;
      i5 = HEAP32[i3 >> 2] | 0;
      if ((i41 | 0) == (i39 | 0)) {
       i34 = i5 + 4 | 0;
       HEAP32[i3 >> 2] = i34;
       HEAP32[i5 >> 2] = i11;
       i28 = i40 + 1 | 0;
       i43 = HEAP8[i22 >> 0] | 0;
       i44 = i43 << 24 >> 24 < 0;
       if (i28 >>> 0 < (i44 ? HEAP32[i23 >> 2] | 0 : i43 & 255) >>> 0) {
        i43 = HEAP8[(i44 ? HEAP32[i12 >> 2] | 0 : i12) + i28 >> 0] | 0;
        i44 = i43 << 24 >> 24 | 0;
        i45 = (i44 | 0) == 127 ? -1 : i44 | 0;
        i46 = i28;
        i47 = 0;
        i48 = i34;
       } else {
        i45 = i41;
        i46 = i28;
        i47 = 0;
        i48 = i34;
       }
      } else {
       i45 = i39;
       i46 = i40;
       i47 = i41;
       i48 = i5;
      }
      i5 = i42 + -4 | 0;
      i34 = HEAP32[i5 >> 2] | 0;
      HEAP32[i3 >> 2] = i48 + 4;
      HEAP32[i48 >> 2] = i34;
      i39 = i45;
      i40 = i46;
      i41 = i47 + 1 | 0;
      i42 = i5;
     }
     i38 = HEAP32[i3 >> 2] | 0;
    }
    if ((i31 | 0) == (i38 | 0)) i26 = i30; else {
     i27 = i38;
     i29 = i31;
     while (1) {
      i33 = i27 + -4 | 0;
      if (i29 >>> 0 >= i33 >>> 0) {
       i26 = i30;
       break L4;
      }
      i5 = HEAP32[i29 >> 2] | 0;
      HEAP32[i29 >> 2] = HEAP32[i33 >> 2];
      HEAP32[i33 >> 2] = i5;
      i27 = i33;
      i29 = i29 + 4 | 0;
     }
    }
    break;
   }
  default:
   i26 = i25;
  } while (0);
  i24 = i24 + 1 | 0;
  i25 = i26;
 }
 i26 = HEAP8[i16 >> 0] | 0;
 i16 = i26 << 24 >> 24 < 0;
 i25 = i16 ? HEAP32[i17 >> 2] | 0 : i26 & 255;
 if (i25 >>> 0 > 1) {
  i26 = HEAP32[i14 >> 2] | 0;
  i24 = i16 ? i26 + 4 | 0 : i17;
  i17 = (i16 ? i26 : i14) + (i25 << 2) | 0;
  i25 = HEAP32[i3 >> 2] | 0;
  i14 = i17 - i24 | 0;
  i26 = i25;
  i16 = i24;
  while (1) {
   if ((i16 | 0) == (i17 | 0)) break;
   HEAP32[i26 >> 2] = HEAP32[i16 >> 2];
   i26 = i26 + 4 | 0;
   i16 = i16 + 4 | 0;
  }
  HEAP32[i3 >> 2] = i25 + (i14 >>> 2 << 2);
 }
 switch ((i4 & 176) << 24 >> 24) {
 case 32:
  {
   HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
   break;
  }
 case 16:
  break;
 default:
  HEAP32[i2 >> 2] = i1;
 }
 return;
}

function __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0;
 i6 = 0;
 i7 = HEAP32[i1 >> 2] | 0;
 do if (!i7) i8 = 1; else {
  i9 = HEAP32[i7 + 12 >> 2] | 0;
  if ((i9 | 0) == (HEAP32[i7 + 16 >> 2] | 0)) i10 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i7 >> 2] | 0) + 36 >> 2] & 127](i7) | 0; else i10 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i9 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i10, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i1 >> 2] = 0;
   i8 = 1;
   break;
  } else {
   i8 = (HEAP32[i1 >> 2] | 0) == 0;
   break;
  }
 } while (0);
 i10 = HEAP32[i2 >> 2] | 0;
 do if (!i10) i6 = 14; else {
  i7 = HEAP32[i10 + 12 >> 2] | 0;
  if ((i7 | 0) == (HEAP32[i10 + 16 >> 2] | 0)) i11 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 36 >> 2] & 127](i10) | 0; else i11 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i7 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i11, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i2 >> 2] = 0;
   i6 = 14;
   break;
  } else if (i8) {
   i12 = i10;
   i6 = 17;
   break;
  } else {
   i6 = 16;
   break;
  }
 } while (0);
 if ((i6 | 0) == 14) if (i8) i6 = 16; else {
  i12 = 0;
  i6 = 17;
 }
 L22 : do if ((i6 | 0) == 16) {
  HEAP32[i3 >> 2] = HEAP32[i3 >> 2] | 6;
  i13 = 0;
 } else if ((i6 | 0) == 17) {
  i8 = HEAP32[i1 >> 2] | 0;
  i10 = HEAP32[i8 + 12 >> 2] | 0;
  if ((i10 | 0) == (HEAP32[i8 + 16 >> 2] | 0)) i14 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 36 >> 2] & 127](i8) | 0; else i14 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i10 >> 2] | 0) | 0;
  if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] & 31](i4, 2048, i14) | 0)) {
   HEAP32[i3 >> 2] = HEAP32[i3 >> 2] | 4;
   i13 = 0;
   break;
  }
  i10 = (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 52 >> 2] & 31](i4, i14, 0) | 0) << 24 >> 24;
  i8 = HEAP32[i1 >> 2] | 0;
  i11 = i8 + 12 | 0;
  i7 = HEAP32[i11 >> 2] | 0;
  if ((i7 | 0) == (HEAP32[i8 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 40 >> 2] & 127](i8) | 0;
   i15 = i10;
   i16 = i5;
   i17 = i12;
   i18 = i12;
  } else {
   HEAP32[i11 >> 2] = i7 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i7 >> 2] | 0) | 0;
   i15 = i10;
   i16 = i5;
   i17 = i12;
   i18 = i12;
  }
  while (1) {
   i19 = i15 + -48 | 0;
   i10 = i16 + -1 | 0;
   i7 = HEAP32[i1 >> 2] | 0;
   do if (!i7) i20 = 1; else {
    i11 = HEAP32[i7 + 12 >> 2] | 0;
    if ((i11 | 0) == (HEAP32[i7 + 16 >> 2] | 0)) i21 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i7 >> 2] | 0) + 36 >> 2] & 127](i7) | 0; else i21 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i11 >> 2] | 0) | 0;
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i21, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[i1 >> 2] = 0;
     i20 = 1;
     break;
    } else {
     i20 = (HEAP32[i1 >> 2] | 0) == 0;
     break;
    }
   } while (0);
   do if (!i18) {
    i22 = i17;
    i23 = 1;
    i24 = 0;
   } else {
    i7 = HEAP32[i18 + 12 >> 2] | 0;
    if ((i7 | 0) == (HEAP32[i18 + 16 >> 2] | 0)) i25 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i18 >> 2] | 0) + 36 >> 2] & 127](i18) | 0; else i25 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i7 >> 2] | 0) | 0;
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i25, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[i2 >> 2] = 0;
     i22 = 0;
     i23 = 1;
     i24 = 0;
     break;
    } else {
     i22 = i17;
     i23 = (i17 | 0) == 0;
     i24 = i17;
     break;
    }
   } while (0);
   i26 = HEAP32[i1 >> 2] | 0;
   if (!((i16 | 0) > 1 & (i20 ^ i23))) break;
   i7 = HEAP32[i26 + 12 >> 2] | 0;
   if ((i7 | 0) == (HEAP32[i26 + 16 >> 2] | 0)) i27 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i26 >> 2] | 0) + 36 >> 2] & 127](i26) | 0; else i27 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i7 >> 2] | 0) | 0;
   if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] & 31](i4, 2048, i27) | 0)) {
    i13 = i19;
    break L22;
   }
   i7 = (i19 * 10 | 0) + ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 52 >> 2] & 31](i4, i27, 0) | 0) << 24 >> 24) | 0;
   i11 = HEAP32[i1 >> 2] | 0;
   i8 = i11 + 12 | 0;
   i9 = HEAP32[i8 >> 2] | 0;
   if ((i9 | 0) == (HEAP32[i11 + 16 >> 2] | 0)) {
    FUNCTION_TABLE_ii[HEAP32[(HEAP32[i11 >> 2] | 0) + 40 >> 2] & 127](i11) | 0;
    i15 = i7;
    i16 = i10;
    i17 = i22;
    i18 = i24;
    continue;
   } else {
    HEAP32[i8 >> 2] = i9 + 4;
    __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i9 >> 2] | 0) | 0;
    i15 = i7;
    i16 = i10;
    i17 = i22;
    i18 = i24;
    continue;
   }
  }
  do if (!i26) i28 = 1; else {
   i7 = HEAP32[i26 + 12 >> 2] | 0;
   if ((i7 | 0) == (HEAP32[i26 + 16 >> 2] | 0)) i29 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i26 >> 2] | 0) + 36 >> 2] & 127](i26) | 0; else i29 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i7 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i29, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i1 >> 2] = 0;
    i28 = 1;
    break;
   } else {
    i28 = (HEAP32[i1 >> 2] | 0) == 0;
    break;
   }
  } while (0);
  do if (!i22) i6 = 60; else {
   i7 = HEAP32[i22 + 12 >> 2] | 0;
   if ((i7 | 0) == (HEAP32[i22 + 16 >> 2] | 0)) i30 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i22 >> 2] | 0) + 36 >> 2] & 127](i22) | 0; else i30 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i7 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i30, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i2 >> 2] = 0;
    i6 = 60;
    break;
   } else if (i28) {
    i13 = i19;
    break L22;
   } else break;
  } while (0);
  if ((i6 | 0) == 60) if (!i28) {
   i13 = i19;
   break;
  }
  HEAP32[i3 >> 2] = HEAP32[i3 >> 2] | 2;
  i13 = i19;
 } while (0);
 return i13 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0;
 i1 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(304);
 i8 = i7 + 200 | 0;
 i9 = i7 + 196 | 0;
 i10 = i7 + 184 | 0;
 i11 = i7 + 172 | 0;
 i12 = i7 + 168 | 0;
 i13 = i7 + 8 | 0;
 i14 = i7 + 4 | 0;
 i15 = i7;
 i16 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE(i4) | 0;
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw(i10, i4, i8, i9);
 HEAP32[i11 >> 2] = 0;
 HEAP32[i11 + 4 >> 2] = 0;
 HEAP32[i11 + 8 >> 2] = 0;
 i4 = 0;
 while (1) {
  if ((i4 | 0) == 3) break;
  HEAP32[i11 + (i4 << 2) >> 2] = 0;
  i4 = i4 + 1 | 0;
 }
 i4 = i11 + 11 | 0;
 i17 = i11 + 8 | 0;
 if ((HEAP8[i4 >> 0] | 0) < 0) i18 = (HEAP32[i17 >> 2] & 2147483647) + -1 | 0; else i18 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i18, 0);
 i18 = (HEAP8[i4 >> 0] | 0) < 0 ? HEAP32[i11 >> 2] | 0 : i11;
 HEAP32[i12 >> 2] = i18;
 HEAP32[i14 >> 2] = i13;
 HEAP32[i15 >> 2] = 0;
 i19 = i11 + 4 | 0;
 i20 = HEAP32[i2 >> 2] | 0;
 i21 = i18;
 i18 = i20;
 i22 = i20;
 L8 : while (1) {
  if (!i18) {
   i23 = 0;
   i24 = 0;
   i25 = 1;
  } else {
   i20 = HEAP32[i18 + 12 >> 2] | 0;
   if ((i20 | 0) == (HEAP32[i18 + 16 >> 2] | 0)) i26 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i18 >> 2] | 0) + 36 >> 2] & 127](i18) | 0; else i26 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i20 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i26, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i2 >> 2] = 0;
    i23 = 0;
    i24 = 0;
    i25 = 1;
   } else {
    i23 = i18;
    i24 = i22;
    i25 = 0;
   }
  }
  i20 = HEAP32[i3 >> 2] | 0;
  do if (!i20) i1 = 19; else {
   i27 = HEAP32[i20 + 12 >> 2] | 0;
   if ((i27 | 0) == (HEAP32[i20 + 16 >> 2] | 0)) i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i20 >> 2] | 0) + 36 >> 2] & 127](i20) | 0; else i28 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i27 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i28, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i3 >> 2] = 0;
    i1 = 19;
    break;
   } else if (i25) {
    i29 = i20;
    break;
   } else {
    i30 = i21;
    i31 = i20;
    break L8;
   }
  } while (0);
  if ((i1 | 0) == 19) {
   i1 = 0;
   if (i25) {
    i30 = i21;
    i31 = 0;
    break;
   } else i29 = 0;
  }
  i20 = HEAP8[i4 >> 0] | 0;
  i27 = i20 << 24 >> 24 < 0 ? HEAP32[i19 >> 2] | 0 : i20 & 255;
  if ((HEAP32[i12 >> 2] | 0) == (i21 + i27 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i27 << 1, 0);
   if ((HEAP8[i4 >> 0] | 0) < 0) i32 = (HEAP32[i17 >> 2] & 2147483647) + -1 | 0; else i32 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i32, 0);
   i20 = (HEAP8[i4 >> 0] | 0) < 0 ? HEAP32[i11 >> 2] | 0 : i11;
   HEAP32[i12 >> 2] = i20 + i27;
   i33 = i20;
  } else i33 = i21;
  i20 = i23 + 12 | 0;
  i27 = HEAP32[i20 >> 2] | 0;
  i34 = i23 + 16 | 0;
  if ((i27 | 0) == (HEAP32[i34 >> 2] | 0)) i35 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 36 >> 2] & 127](i23) | 0; else i35 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i27 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw(i35, i16, i33, i12, i15, HEAP32[i9 >> 2] | 0, i10, i13, i14, i8) | 0) {
   i30 = i33;
   i31 = i29;
   break;
  }
  i27 = HEAP32[i20 >> 2] | 0;
  if ((i27 | 0) == (HEAP32[i34 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 40 >> 2] & 127](i23) | 0;
   i21 = i33;
   i18 = i23;
   i22 = i24;
   continue;
  } else {
   HEAP32[i20 >> 2] = i27 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i27 >> 2] | 0) | 0;
   i21 = i33;
   i18 = i23;
   i22 = i24;
   continue;
  }
 }
 i22 = HEAP8[i10 + 11 >> 0] | 0;
 if ((i22 << 24 >> 24 < 0 ? HEAP32[i10 + 4 >> 2] | 0 : i22 & 255) | 0) {
  i22 = HEAP32[i14 >> 2] | 0;
  if ((i22 - i13 | 0) < 160) {
   i18 = HEAP32[i15 >> 2] | 0;
   HEAP32[i14 >> 2] = i22 + 4;
   HEAP32[i22 >> 2] = i18;
  }
 }
 i18 = __ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji(i30, HEAP32[i12 >> 2] | 0, i5, i16) | 0;
 i16 = i6;
 HEAP32[i16 >> 2] = i18;
 HEAP32[i16 + 4 >> 2] = tempRet0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i10, i13, HEAP32[i14 >> 2] | 0, i5);
 if (!i23) i36 = 1; else {
  i14 = HEAP32[i23 + 12 >> 2] | 0;
  if ((i14 | 0) == (HEAP32[i23 + 16 >> 2] | 0)) i37 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i24 >> 2] | 0) + 36 >> 2] & 127](i23) | 0; else i37 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i14 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i37, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i2 >> 2] = 0;
   i36 = 1;
  } else i36 = 0;
 }
 do if (!i31) i1 = 47; else {
  i37 = HEAP32[i31 + 12 >> 2] | 0;
  if ((i37 | 0) == (HEAP32[i31 + 16 >> 2] | 0)) i38 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i31 >> 2] | 0) + 36 >> 2] & 127](i31) | 0; else i38 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i37 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i38, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i3 >> 2] = 0;
   i1 = 47;
   break;
  } else if (i36) break; else {
   i1 = 49;
   break;
  }
 } while (0);
 if ((i1 | 0) == 47) if (i36) i1 = 49;
 if ((i1 | 0) == 49) HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 2;
 i5 = HEAP32[i2 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i11);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i10);
 STACKTOP = i7;
 return i5 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0;
 i1 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 i8 = i7;
 i9 = i7 + 204 | 0;
 i10 = i7 + 192 | 0;
 i11 = i7 + 180 | 0;
 i12 = i7 + 176 | 0;
 i13 = i7 + 16 | 0;
 i14 = i7 + 8 | 0;
 i15 = i7 + 4 | 0;
 HEAP32[i10 >> 2] = 0;
 HEAP32[i10 + 4 >> 2] = 0;
 HEAP32[i10 + 8 >> 2] = 0;
 i16 = 0;
 while (1) {
  if ((i16 | 0) == 3) break;
  HEAP32[i10 + (i16 << 2) >> 2] = 0;
  i16 = i16 + 1 | 0;
 }
 __ZNKSt3__28ios_base6getlocEv(i11, i4);
 i4 = __ZNKSt3__26locale9use_facetERNS0_2idE(i11, 5845188) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 32 >> 2] & 7](i4, 70463, 70489, i9) | 0;
 __ZNSt3__26localeD2Ev(i11);
 HEAP32[i11 >> 2] = 0;
 HEAP32[i11 + 4 >> 2] = 0;
 HEAP32[i11 + 8 >> 2] = 0;
 i4 = 0;
 while (1) {
  if ((i4 | 0) == 3) break;
  HEAP32[i11 + (i4 << 2) >> 2] = 0;
  i4 = i4 + 1 | 0;
 }
 i4 = i11 + 11 | 0;
 i16 = i11 + 8 | 0;
 if ((HEAP8[i4 >> 0] | 0) < 0) i17 = (HEAP32[i16 >> 2] & 2147483647) + -1 | 0; else i17 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i17, 0);
 i17 = (HEAP8[i4 >> 0] | 0) < 0 ? HEAP32[i11 >> 2] | 0 : i11;
 HEAP32[i12 >> 2] = i17;
 HEAP32[i14 >> 2] = i13;
 HEAP32[i15 >> 2] = 0;
 i18 = i11 + 4 | 0;
 i19 = HEAP32[i2 >> 2] | 0;
 i20 = i17;
 i17 = i19;
 i21 = i19;
 L12 : while (1) {
  if (!i17) {
   i22 = 0;
   i23 = 0;
   i24 = 1;
  } else {
   i19 = HEAP32[i17 + 12 >> 2] | 0;
   if ((i19 | 0) == (HEAP32[i17 + 16 >> 2] | 0)) i25 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i17 >> 2] | 0) + 36 >> 2] & 127](i17) | 0; else i25 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i19 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i25, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i2 >> 2] = 0;
    i22 = 0;
    i23 = 0;
    i24 = 1;
   } else {
    i22 = i17;
    i23 = i21;
    i24 = 0;
   }
  }
  i19 = HEAP32[i3 >> 2] | 0;
  do if (!i19) i1 = 22; else {
   i26 = HEAP32[i19 + 12 >> 2] | 0;
   if ((i26 | 0) == (HEAP32[i19 + 16 >> 2] | 0)) i27 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i19 >> 2] | 0) + 36 >> 2] & 127](i19) | 0; else i27 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i26 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i27, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i3 >> 2] = 0;
    i1 = 22;
    break;
   } else if (i24) {
    i28 = i19;
    break;
   } else {
    i29 = i20;
    i30 = i19;
    break L12;
   }
  } while (0);
  if ((i1 | 0) == 22) {
   i1 = 0;
   if (i24) {
    i29 = i20;
    i30 = 0;
    break;
   } else i28 = 0;
  }
  i19 = HEAP8[i4 >> 0] | 0;
  i26 = i19 << 24 >> 24 < 0 ? HEAP32[i18 >> 2] | 0 : i19 & 255;
  if ((HEAP32[i12 >> 2] | 0) == (i20 + i26 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i26 << 1, 0);
   if ((HEAP8[i4 >> 0] | 0) < 0) i31 = (HEAP32[i16 >> 2] & 2147483647) + -1 | 0; else i31 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i31, 0);
   i19 = (HEAP8[i4 >> 0] | 0) < 0 ? HEAP32[i11 >> 2] | 0 : i11;
   HEAP32[i12 >> 2] = i19 + i26;
   i32 = i19;
  } else i32 = i20;
  i19 = i22 + 12 | 0;
  i26 = HEAP32[i19 >> 2] | 0;
  i33 = i22 + 16 | 0;
  if ((i26 | 0) == (HEAP32[i33 >> 2] | 0)) i34 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i22 >> 2] | 0) + 36 >> 2] & 127](i22) | 0; else i34 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i26 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_(i34 & 255, 16, i32, i12, i15, 0, i10, i13, i14, i9) | 0) {
   i29 = i32;
   i30 = i28;
   break;
  }
  i26 = HEAP32[i19 >> 2] | 0;
  if ((i26 | 0) == (HEAP32[i33 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i22 >> 2] | 0) + 40 >> 2] & 127](i22) | 0;
   i20 = i32;
   i17 = i22;
   i21 = i23;
   continue;
  } else {
   HEAP32[i19 >> 2] = i26 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i26 >> 0] | 0) | 0;
   i20 = i32;
   i17 = i22;
   i21 = i23;
   continue;
  }
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, (HEAP32[i12 >> 2] | 0) - i29 | 0, 0);
 i29 = (HEAP8[i4 >> 0] | 0) < 0 ? HEAP32[i11 >> 2] | 0 : i11;
 i4 = __ZNSt3__26__clocEv() | 0;
 HEAP32[i8 >> 2] = i6;
 if ((__ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z(i29, i4, 70496, i8) | 0) != 1) HEAP32[i5 >> 2] = 4;
 if (!i22) i35 = 1; else {
  i8 = HEAP32[i22 + 12 >> 2] | 0;
  if ((i8 | 0) == (HEAP32[i22 + 16 >> 2] | 0)) i36 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 36 >> 2] & 127](i22) | 0; else i36 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i8 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i36, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i2 >> 2] = 0;
   i35 = 1;
  } else i35 = 0;
 }
 do if (!i30) i1 = 49; else {
  i36 = HEAP32[i30 + 12 >> 2] | 0;
  if ((i36 | 0) == (HEAP32[i30 + 16 >> 2] | 0)) i37 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i30 >> 2] | 0) + 36 >> 2] & 127](i30) | 0; else i37 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i36 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i37, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i3 >> 2] = 0;
   i1 = 49;
   break;
  } else if (i35) break; else {
   i1 = 51;
   break;
  }
 } while (0);
 if ((i1 | 0) == 49) if (i35) i1 = 51;
 if ((i1 | 0) == 51) HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 2;
 i5 = HEAP32[i2 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i11);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i10);
 STACKTOP = i7;
 return i5 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0;
 i1 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224);
 i8 = i7 + 198 | 0;
 i9 = i7 + 196 | 0;
 i10 = i7 + 184 | 0;
 i11 = i7 + 172 | 0;
 i12 = i7 + 168 | 0;
 i13 = i7 + 8 | 0;
 i14 = i7 + 4 | 0;
 i15 = i7;
 i16 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE(i4) | 0;
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc(i10, i4, i8, i9);
 HEAP32[i11 >> 2] = 0;
 HEAP32[i11 + 4 >> 2] = 0;
 HEAP32[i11 + 8 >> 2] = 0;
 i4 = 0;
 while (1) {
  if ((i4 | 0) == 3) break;
  HEAP32[i11 + (i4 << 2) >> 2] = 0;
  i4 = i4 + 1 | 0;
 }
 i4 = i11 + 11 | 0;
 i17 = i11 + 8 | 0;
 if ((HEAP8[i4 >> 0] | 0) < 0) i18 = (HEAP32[i17 >> 2] & 2147483647) + -1 | 0; else i18 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i18, 0);
 i18 = (HEAP8[i4 >> 0] | 0) < 0 ? HEAP32[i11 >> 2] | 0 : i11;
 HEAP32[i12 >> 2] = i18;
 HEAP32[i14 >> 2] = i13;
 HEAP32[i15 >> 2] = 0;
 i19 = i11 + 4 | 0;
 i20 = HEAP32[i2 >> 2] | 0;
 i21 = i18;
 i18 = i20;
 i22 = i20;
 L8 : while (1) {
  if (!i18) {
   i23 = 0;
   i24 = 0;
   i25 = 1;
  } else {
   i20 = HEAP32[i18 + 12 >> 2] | 0;
   if ((i20 | 0) == (HEAP32[i18 + 16 >> 2] | 0)) i26 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i18 >> 2] | 0) + 36 >> 2] & 127](i18) | 0; else i26 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i20 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i26, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i2 >> 2] = 0;
    i23 = 0;
    i24 = 0;
    i25 = 1;
   } else {
    i23 = i18;
    i24 = i22;
    i25 = 0;
   }
  }
  i20 = HEAP32[i3 >> 2] | 0;
  do if (!i20) i1 = 19; else {
   i27 = HEAP32[i20 + 12 >> 2] | 0;
   if ((i27 | 0) == (HEAP32[i20 + 16 >> 2] | 0)) i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i20 >> 2] | 0) + 36 >> 2] & 127](i20) | 0; else i28 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i27 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i28, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i3 >> 2] = 0;
    i1 = 19;
    break;
   } else if (i25) {
    i29 = i20;
    break;
   } else {
    i30 = i21;
    i31 = i20;
    break L8;
   }
  } while (0);
  if ((i1 | 0) == 19) {
   i1 = 0;
   if (i25) {
    i30 = i21;
    i31 = 0;
    break;
   } else i29 = 0;
  }
  i20 = HEAP8[i4 >> 0] | 0;
  i27 = i20 << 24 >> 24 < 0 ? HEAP32[i19 >> 2] | 0 : i20 & 255;
  if ((HEAP32[i12 >> 2] | 0) == (i21 + i27 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i27 << 1, 0);
   if ((HEAP8[i4 >> 0] | 0) < 0) i32 = (HEAP32[i17 >> 2] & 2147483647) + -1 | 0; else i32 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i32, 0);
   i20 = (HEAP8[i4 >> 0] | 0) < 0 ? HEAP32[i11 >> 2] | 0 : i11;
   HEAP32[i12 >> 2] = i20 + i27;
   i33 = i20;
  } else i33 = i21;
  i20 = i23 + 12 | 0;
  i27 = HEAP32[i20 >> 2] | 0;
  i34 = i23 + 16 | 0;
  if ((i27 | 0) == (HEAP32[i34 >> 2] | 0)) i35 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 36 >> 2] & 127](i23) | 0; else i35 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i27 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_(i35 & 255, i16, i33, i12, i15, HEAP8[i9 >> 0] | 0, i10, i13, i14, i8) | 0) {
   i30 = i33;
   i31 = i29;
   break;
  }
  i27 = HEAP32[i20 >> 2] | 0;
  if ((i27 | 0) == (HEAP32[i34 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 40 >> 2] & 127](i23) | 0;
   i21 = i33;
   i18 = i23;
   i22 = i24;
   continue;
  } else {
   HEAP32[i20 >> 2] = i27 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i27 >> 0] | 0) | 0;
   i21 = i33;
   i18 = i23;
   i22 = i24;
   continue;
  }
 }
 i22 = HEAP8[i10 + 11 >> 0] | 0;
 if ((i22 << 24 >> 24 < 0 ? HEAP32[i10 + 4 >> 2] | 0 : i22 & 255) | 0) {
  i22 = HEAP32[i14 >> 2] | 0;
  if ((i22 - i13 | 0) < 160) {
   i18 = HEAP32[i15 >> 2] | 0;
   HEAP32[i14 >> 2] = i22 + 4;
   HEAP32[i22 >> 2] = i18;
  }
 }
 i18 = __ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji(i30, HEAP32[i12 >> 2] | 0, i5, i16) | 0;
 i16 = i6;
 HEAP32[i16 >> 2] = i18;
 HEAP32[i16 + 4 >> 2] = tempRet0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i10, i13, HEAP32[i14 >> 2] | 0, i5);
 if (!i23) i36 = 1; else {
  i14 = HEAP32[i23 + 12 >> 2] | 0;
  if ((i14 | 0) == (HEAP32[i23 + 16 >> 2] | 0)) i37 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i24 >> 2] | 0) + 36 >> 2] & 127](i23) | 0; else i37 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i14 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i37, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i2 >> 2] = 0;
   i36 = 1;
  } else i36 = 0;
 }
 do if (!i31) i1 = 47; else {
  i37 = HEAP32[i31 + 12 >> 2] | 0;
  if ((i37 | 0) == (HEAP32[i31 + 16 >> 2] | 0)) i38 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i31 >> 2] | 0) + 36 >> 2] & 127](i31) | 0; else i38 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i37 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i38, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i3 >> 2] = 0;
   i1 = 47;
   break;
  } else if (i36) break; else {
   i1 = 49;
   break;
  }
 } while (0);
 if ((i1 | 0) == 47) if (i36) i1 = 49;
 if ((i1 | 0) == 49) HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 2;
 i5 = HEAP32[i2 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i11);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i10);
 STACKTOP = i7;
 return i5 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0;
 i1 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(320);
 i8 = i7;
 i9 = i7 + 208 | 0;
 i10 = i7 + 192 | 0;
 i11 = i7 + 180 | 0;
 i12 = i7 + 176 | 0;
 i13 = i7 + 16 | 0;
 i14 = i7 + 8 | 0;
 i15 = i7 + 4 | 0;
 HEAP32[i10 >> 2] = 0;
 HEAP32[i10 + 4 >> 2] = 0;
 HEAP32[i10 + 8 >> 2] = 0;
 i16 = 0;
 while (1) {
  if ((i16 | 0) == 3) break;
  HEAP32[i10 + (i16 << 2) >> 2] = 0;
  i16 = i16 + 1 | 0;
 }
 __ZNKSt3__28ios_base6getlocEv(i11, i4);
 i4 = __ZNKSt3__26locale9use_facetERNS0_2idE(i11, 5845220) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 48 >> 2] & 7](i4, 70463, 70489, i9) | 0;
 __ZNSt3__26localeD2Ev(i11);
 HEAP32[i11 >> 2] = 0;
 HEAP32[i11 + 4 >> 2] = 0;
 HEAP32[i11 + 8 >> 2] = 0;
 i4 = 0;
 while (1) {
  if ((i4 | 0) == 3) break;
  HEAP32[i11 + (i4 << 2) >> 2] = 0;
  i4 = i4 + 1 | 0;
 }
 i4 = i11 + 11 | 0;
 i16 = i11 + 8 | 0;
 if ((HEAP8[i4 >> 0] | 0) < 0) i17 = (HEAP32[i16 >> 2] & 2147483647) + -1 | 0; else i17 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i17, 0);
 i17 = (HEAP8[i4 >> 0] | 0) < 0 ? HEAP32[i11 >> 2] | 0 : i11;
 HEAP32[i12 >> 2] = i17;
 HEAP32[i14 >> 2] = i13;
 HEAP32[i15 >> 2] = 0;
 i18 = i11 + 4 | 0;
 i19 = HEAP32[i2 >> 2] | 0;
 i20 = i17;
 i17 = i19;
 i21 = i19;
 L12 : while (1) {
  if (!i17) {
   i22 = 0;
   i23 = 0;
   i24 = 1;
  } else {
   i19 = HEAP32[i17 + 12 >> 2] | 0;
   if ((i19 | 0) == (HEAP32[i17 + 16 >> 2] | 0)) i25 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i17 >> 2] | 0) + 36 >> 2] & 127](i17) | 0; else i25 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i19 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i25, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i2 >> 2] = 0;
    i22 = 0;
    i23 = 0;
    i24 = 1;
   } else {
    i22 = i17;
    i23 = i21;
    i24 = 0;
   }
  }
  i19 = HEAP32[i3 >> 2] | 0;
  do if (!i19) i1 = 22; else {
   i26 = HEAP32[i19 + 12 >> 2] | 0;
   if ((i26 | 0) == (HEAP32[i19 + 16 >> 2] | 0)) i27 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i19 >> 2] | 0) + 36 >> 2] & 127](i19) | 0; else i27 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i26 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i27, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i3 >> 2] = 0;
    i1 = 22;
    break;
   } else if (i24) {
    i28 = i19;
    break;
   } else {
    i29 = i20;
    i30 = i19;
    break L12;
   }
  } while (0);
  if ((i1 | 0) == 22) {
   i1 = 0;
   if (i24) {
    i29 = i20;
    i30 = 0;
    break;
   } else i28 = 0;
  }
  i19 = HEAP8[i4 >> 0] | 0;
  i26 = i19 << 24 >> 24 < 0 ? HEAP32[i18 >> 2] | 0 : i19 & 255;
  if ((HEAP32[i12 >> 2] | 0) == (i20 + i26 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i26 << 1, 0);
   if ((HEAP8[i4 >> 0] | 0) < 0) i31 = (HEAP32[i16 >> 2] & 2147483647) + -1 | 0; else i31 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i31, 0);
   i19 = (HEAP8[i4 >> 0] | 0) < 0 ? HEAP32[i11 >> 2] | 0 : i11;
   HEAP32[i12 >> 2] = i19 + i26;
   i32 = i19;
  } else i32 = i20;
  i19 = i22 + 12 | 0;
  i26 = HEAP32[i19 >> 2] | 0;
  i33 = i22 + 16 | 0;
  if ((i26 | 0) == (HEAP32[i33 >> 2] | 0)) i34 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i22 >> 2] | 0) + 36 >> 2] & 127](i22) | 0; else i34 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i26 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw(i34, 16, i32, i12, i15, 0, i10, i13, i14, i9) | 0) {
   i29 = i32;
   i30 = i28;
   break;
  }
  i26 = HEAP32[i19 >> 2] | 0;
  if ((i26 | 0) == (HEAP32[i33 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i22 >> 2] | 0) + 40 >> 2] & 127](i22) | 0;
   i20 = i32;
   i17 = i22;
   i21 = i23;
   continue;
  } else {
   HEAP32[i19 >> 2] = i26 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i26 >> 2] | 0) | 0;
   i20 = i32;
   i17 = i22;
   i21 = i23;
   continue;
  }
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, (HEAP32[i12 >> 2] | 0) - i29 | 0, 0);
 i29 = (HEAP8[i4 >> 0] | 0) < 0 ? HEAP32[i11 >> 2] | 0 : i11;
 i4 = __ZNSt3__26__clocEv() | 0;
 HEAP32[i8 >> 2] = i6;
 if ((__ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z(i29, i4, 70496, i8) | 0) != 1) HEAP32[i5 >> 2] = 4;
 if (!i22) i35 = 1; else {
  i8 = HEAP32[i22 + 12 >> 2] | 0;
  if ((i8 | 0) == (HEAP32[i22 + 16 >> 2] | 0)) i36 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 36 >> 2] & 127](i22) | 0; else i36 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i8 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i36, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i2 >> 2] = 0;
   i35 = 1;
  } else i35 = 0;
 }
 do if (!i30) i1 = 49; else {
  i36 = HEAP32[i30 + 12 >> 2] | 0;
  if ((i36 | 0) == (HEAP32[i30 + 16 >> 2] | 0)) i37 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i30 >> 2] | 0) + 36 >> 2] & 127](i30) | 0; else i37 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i36 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i37, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i3 >> 2] = 0;
   i1 = 49;
   break;
  } else if (i35) break; else {
   i1 = 51;
   break;
  }
 } while (0);
 if ((i1 | 0) == 49) if (i35) i1 = 51;
 if ((i1 | 0) == 51) HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 2;
 i5 = HEAP32[i2 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i11);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i10);
 STACKTOP = i7;
 return i5 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0;
 i1 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(304);
 i8 = i7 + 200 | 0;
 i9 = i7 + 196 | 0;
 i10 = i7 + 184 | 0;
 i11 = i7 + 172 | 0;
 i12 = i7 + 168 | 0;
 i13 = i7 + 8 | 0;
 i14 = i7 + 4 | 0;
 i15 = i7;
 i16 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE(i4) | 0;
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw(i10, i4, i8, i9);
 HEAP32[i11 >> 2] = 0;
 HEAP32[i11 + 4 >> 2] = 0;
 HEAP32[i11 + 8 >> 2] = 0;
 i4 = 0;
 while (1) {
  if ((i4 | 0) == 3) break;
  HEAP32[i11 + (i4 << 2) >> 2] = 0;
  i4 = i4 + 1 | 0;
 }
 i4 = i11 + 11 | 0;
 i17 = i11 + 8 | 0;
 if ((HEAP8[i4 >> 0] | 0) < 0) i18 = (HEAP32[i17 >> 2] & 2147483647) + -1 | 0; else i18 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i18, 0);
 i18 = (HEAP8[i4 >> 0] | 0) < 0 ? HEAP32[i11 >> 2] | 0 : i11;
 HEAP32[i12 >> 2] = i18;
 HEAP32[i14 >> 2] = i13;
 HEAP32[i15 >> 2] = 0;
 i19 = i11 + 4 | 0;
 i20 = HEAP32[i2 >> 2] | 0;
 i21 = i18;
 i18 = i20;
 i22 = i20;
 L8 : while (1) {
  if (!i18) {
   i23 = 0;
   i24 = 0;
   i25 = 1;
  } else {
   i20 = HEAP32[i18 + 12 >> 2] | 0;
   if ((i20 | 0) == (HEAP32[i18 + 16 >> 2] | 0)) i26 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i18 >> 2] | 0) + 36 >> 2] & 127](i18) | 0; else i26 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i20 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i26, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i2 >> 2] = 0;
    i23 = 0;
    i24 = 0;
    i25 = 1;
   } else {
    i23 = i18;
    i24 = i22;
    i25 = 0;
   }
  }
  i20 = HEAP32[i3 >> 2] | 0;
  do if (!i20) i1 = 19; else {
   i27 = HEAP32[i20 + 12 >> 2] | 0;
   if ((i27 | 0) == (HEAP32[i20 + 16 >> 2] | 0)) i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i20 >> 2] | 0) + 36 >> 2] & 127](i20) | 0; else i28 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i27 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i28, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i3 >> 2] = 0;
    i1 = 19;
    break;
   } else if (i25) {
    i29 = i20;
    break;
   } else {
    i30 = i21;
    i31 = i20;
    break L8;
   }
  } while (0);
  if ((i1 | 0) == 19) {
   i1 = 0;
   if (i25) {
    i30 = i21;
    i31 = 0;
    break;
   } else i29 = 0;
  }
  i20 = HEAP8[i4 >> 0] | 0;
  i27 = i20 << 24 >> 24 < 0 ? HEAP32[i19 >> 2] | 0 : i20 & 255;
  if ((HEAP32[i12 >> 2] | 0) == (i21 + i27 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i27 << 1, 0);
   if ((HEAP8[i4 >> 0] | 0) < 0) i32 = (HEAP32[i17 >> 2] & 2147483647) + -1 | 0; else i32 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i32, 0);
   i20 = (HEAP8[i4 >> 0] | 0) < 0 ? HEAP32[i11 >> 2] | 0 : i11;
   HEAP32[i12 >> 2] = i20 + i27;
   i33 = i20;
  } else i33 = i21;
  i20 = i23 + 12 | 0;
  i27 = HEAP32[i20 >> 2] | 0;
  i34 = i23 + 16 | 0;
  if ((i27 | 0) == (HEAP32[i34 >> 2] | 0)) i35 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 36 >> 2] & 127](i23) | 0; else i35 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i27 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw(i35, i16, i33, i12, i15, HEAP32[i9 >> 2] | 0, i10, i13, i14, i8) | 0) {
   i30 = i33;
   i31 = i29;
   break;
  }
  i27 = HEAP32[i20 >> 2] | 0;
  if ((i27 | 0) == (HEAP32[i34 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 40 >> 2] & 127](i23) | 0;
   i21 = i33;
   i18 = i23;
   i22 = i24;
   continue;
  } else {
   HEAP32[i20 >> 2] = i27 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i27 >> 2] | 0) | 0;
   i21 = i33;
   i18 = i23;
   i22 = i24;
   continue;
  }
 }
 i22 = HEAP8[i10 + 11 >> 0] | 0;
 if ((i22 << 24 >> 24 < 0 ? HEAP32[i10 + 4 >> 2] | 0 : i22 & 255) | 0) {
  i22 = HEAP32[i14 >> 2] | 0;
  if ((i22 - i13 | 0) < 160) {
   i18 = HEAP32[i15 >> 2] | 0;
   HEAP32[i14 >> 2] = i22 + 4;
   HEAP32[i22 >> 2] = i18;
  }
 }
 i18 = __ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji(i30, HEAP32[i12 >> 2] | 0, i5, i16) | 0;
 i16 = i6;
 HEAP32[i16 >> 2] = i18;
 HEAP32[i16 + 4 >> 2] = tempRet0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i10, i13, HEAP32[i14 >> 2] | 0, i5);
 if (!i23) i36 = 1; else {
  i14 = HEAP32[i23 + 12 >> 2] | 0;
  if ((i14 | 0) == (HEAP32[i23 + 16 >> 2] | 0)) i37 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i24 >> 2] | 0) + 36 >> 2] & 127](i23) | 0; else i37 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i14 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i37, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i2 >> 2] = 0;
   i36 = 1;
  } else i36 = 0;
 }
 do if (!i31) i1 = 47; else {
  i37 = HEAP32[i31 + 12 >> 2] | 0;
  if ((i37 | 0) == (HEAP32[i31 + 16 >> 2] | 0)) i38 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i31 >> 2] | 0) + 36 >> 2] & 127](i31) | 0; else i38 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i37 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i38, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i3 >> 2] = 0;
   i1 = 47;
   break;
  } else if (i36) break; else {
   i1 = 49;
   break;
  }
 } while (0);
 if ((i1 | 0) == 47) if (i36) i1 = 49;
 if ((i1 | 0) == 49) HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 2;
 i5 = HEAP32[i2 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i11);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i10);
 STACKTOP = i7;
 return i5 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0;
 i1 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224);
 i8 = i7 + 198 | 0;
 i9 = i7 + 196 | 0;
 i10 = i7 + 184 | 0;
 i11 = i7 + 172 | 0;
 i12 = i7 + 168 | 0;
 i13 = i7 + 8 | 0;
 i14 = i7 + 4 | 0;
 i15 = i7;
 i16 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE(i4) | 0;
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc(i10, i4, i8, i9);
 HEAP32[i11 >> 2] = 0;
 HEAP32[i11 + 4 >> 2] = 0;
 HEAP32[i11 + 8 >> 2] = 0;
 i4 = 0;
 while (1) {
  if ((i4 | 0) == 3) break;
  HEAP32[i11 + (i4 << 2) >> 2] = 0;
  i4 = i4 + 1 | 0;
 }
 i4 = i11 + 11 | 0;
 i17 = i11 + 8 | 0;
 if ((HEAP8[i4 >> 0] | 0) < 0) i18 = (HEAP32[i17 >> 2] & 2147483647) + -1 | 0; else i18 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i18, 0);
 i18 = (HEAP8[i4 >> 0] | 0) < 0 ? HEAP32[i11 >> 2] | 0 : i11;
 HEAP32[i12 >> 2] = i18;
 HEAP32[i14 >> 2] = i13;
 HEAP32[i15 >> 2] = 0;
 i19 = i11 + 4 | 0;
 i20 = HEAP32[i2 >> 2] | 0;
 i21 = i18;
 i18 = i20;
 i22 = i20;
 L8 : while (1) {
  if (!i18) {
   i23 = 0;
   i24 = 0;
   i25 = 1;
  } else {
   i20 = HEAP32[i18 + 12 >> 2] | 0;
   if ((i20 | 0) == (HEAP32[i18 + 16 >> 2] | 0)) i26 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i18 >> 2] | 0) + 36 >> 2] & 127](i18) | 0; else i26 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i20 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i26, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i2 >> 2] = 0;
    i23 = 0;
    i24 = 0;
    i25 = 1;
   } else {
    i23 = i18;
    i24 = i22;
    i25 = 0;
   }
  }
  i20 = HEAP32[i3 >> 2] | 0;
  do if (!i20) i1 = 19; else {
   i27 = HEAP32[i20 + 12 >> 2] | 0;
   if ((i27 | 0) == (HEAP32[i20 + 16 >> 2] | 0)) i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i20 >> 2] | 0) + 36 >> 2] & 127](i20) | 0; else i28 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i27 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i28, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i3 >> 2] = 0;
    i1 = 19;
    break;
   } else if (i25) {
    i29 = i20;
    break;
   } else {
    i30 = i21;
    i31 = i20;
    break L8;
   }
  } while (0);
  if ((i1 | 0) == 19) {
   i1 = 0;
   if (i25) {
    i30 = i21;
    i31 = 0;
    break;
   } else i29 = 0;
  }
  i20 = HEAP8[i4 >> 0] | 0;
  i27 = i20 << 24 >> 24 < 0 ? HEAP32[i19 >> 2] | 0 : i20 & 255;
  if ((HEAP32[i12 >> 2] | 0) == (i21 + i27 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i27 << 1, 0);
   if ((HEAP8[i4 >> 0] | 0) < 0) i32 = (HEAP32[i17 >> 2] & 2147483647) + -1 | 0; else i32 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i32, 0);
   i20 = (HEAP8[i4 >> 0] | 0) < 0 ? HEAP32[i11 >> 2] | 0 : i11;
   HEAP32[i12 >> 2] = i20 + i27;
   i33 = i20;
  } else i33 = i21;
  i20 = i23 + 12 | 0;
  i27 = HEAP32[i20 >> 2] | 0;
  i34 = i23 + 16 | 0;
  if ((i27 | 0) == (HEAP32[i34 >> 2] | 0)) i35 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 36 >> 2] & 127](i23) | 0; else i35 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i27 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_(i35 & 255, i16, i33, i12, i15, HEAP8[i9 >> 0] | 0, i10, i13, i14, i8) | 0) {
   i30 = i33;
   i31 = i29;
   break;
  }
  i27 = HEAP32[i20 >> 2] | 0;
  if ((i27 | 0) == (HEAP32[i34 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 40 >> 2] & 127](i23) | 0;
   i21 = i33;
   i18 = i23;
   i22 = i24;
   continue;
  } else {
   HEAP32[i20 >> 2] = i27 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i27 >> 0] | 0) | 0;
   i21 = i33;
   i18 = i23;
   i22 = i24;
   continue;
  }
 }
 i22 = HEAP8[i10 + 11 >> 0] | 0;
 if ((i22 << 24 >> 24 < 0 ? HEAP32[i10 + 4 >> 2] | 0 : i22 & 255) | 0) {
  i22 = HEAP32[i14 >> 2] | 0;
  if ((i22 - i13 | 0) < 160) {
   i18 = HEAP32[i15 >> 2] | 0;
   HEAP32[i14 >> 2] = i22 + 4;
   HEAP32[i22 >> 2] = i18;
  }
 }
 i18 = __ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji(i30, HEAP32[i12 >> 2] | 0, i5, i16) | 0;
 i16 = i6;
 HEAP32[i16 >> 2] = i18;
 HEAP32[i16 + 4 >> 2] = tempRet0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i10, i13, HEAP32[i14 >> 2] | 0, i5);
 if (!i23) i36 = 1; else {
  i14 = HEAP32[i23 + 12 >> 2] | 0;
  if ((i14 | 0) == (HEAP32[i23 + 16 >> 2] | 0)) i37 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i24 >> 2] | 0) + 36 >> 2] & 127](i23) | 0; else i37 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i14 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i37, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i2 >> 2] = 0;
   i36 = 1;
  } else i36 = 0;
 }
 do if (!i31) i1 = 47; else {
  i37 = HEAP32[i31 + 12 >> 2] | 0;
  if ((i37 | 0) == (HEAP32[i31 + 16 >> 2] | 0)) i38 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i31 >> 2] | 0) + 36 >> 2] & 127](i31) | 0; else i38 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i37 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i38, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i3 >> 2] = 0;
   i1 = 47;
   break;
  } else if (i36) break; else {
   i1 = 49;
   break;
  }
 } while (0);
 if ((i1 | 0) == 47) if (i36) i1 = 49;
 if ((i1 | 0) == 49) HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 2;
 i5 = HEAP32[i2 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i11);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i10);
 STACKTOP = i7;
 return i5 | 0;
}

function __ZN8ImGuiStbL25stb_textedit_find_charposEPNS_12StbFindStateEP18ImGuiTextEditStateii(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, f16 = f0, f17 = f0, f18 = f0, f19 = f0, i20 = 0, f21 = f0, f22 = f0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, f27 = f0, i28 = 0, f29 = f0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, f35 = f0, i36 = 0;
 i5 = 0;
 i6 = HEAP32[i2 + 44 >> 2] | 0;
 if ((i6 | 0) == (i3 | 0)) {
  if (!i4) {
   HEAPF32[i1 + 4 >> 2] = Math_fround(0.0);
   HEAPF32[i1 >> 2] = Math_fround(0.0);
   HEAPF32[i1 + 8 >> 2] = Math_fround(1.0);
   if ((i3 | 0) > 0) {
    i4 = HEAP32[i2 + 12 >> 2] | 0;
    i7 = i4 + (i3 << 1) | 0;
    i8 = 0;
    while (1) {
     i9 = i4 + (i8 << 1) | 0;
     i10 = i9;
     L9 : while (1) {
      i11 = i10;
      while (1) {
       if (i11 >>> 0 >= i7 >>> 0) {
        i12 = i11;
        break L9;
       }
       i13 = i11 + 2 | 0;
       switch (HEAP16[i11 >> 1] | 0) {
       case 10:
        {
         i12 = i13;
         break L9;
         break;
        }
       case 13:
        {
         i11 = i13;
         break;
        }
       default:
        {
         i10 = i13;
         continue L9;
        }
       }
      }
     }
     i10 = (i12 - i9 >> 1) + i8 | 0;
     if ((i10 | 0) < (i3 | 0)) i8 = i10; else {
      i14 = i8;
      i15 = i10;
      break;
     }
    }
   } else {
    i14 = 0;
    i15 = 0;
   }
   HEAP32[i1 + 12 >> 2] = i15;
   HEAP32[i1 + 16 >> 2] = 0;
   HEAP32[i1 + 20 >> 2] = i14;
   return;
  }
  i14 = HEAP32[i2 + 12 >> 2] | 0;
  i15 = i14 + (i3 << 1) | 0;
  i8 = HEAP32[1460598] | 0;
  i12 = HEAP32[i8 + 6180 >> 2] | 0;
  f16 = Math_fround(HEAPF32[i8 + 6184 >> 2]);
  f17 = Math_fround(f16 / Math_fround(HEAPF32[i12 >> 2]));
  i8 = i12 + 28 | 0;
  i7 = i12 + 36 | 0;
  i4 = i12 + 56 | 0;
  f18 = Math_fround(0.0);
  i12 = i14;
  L18 : while (1) {
   i14 = i12;
   L20 : while (1) {
    if (i14 >>> 0 >= i15 >>> 0) {
     f19 = f18;
     i20 = 0;
     f21 = Math_fround(0.0);
     f22 = Math_fround(0.0);
     break L18;
    }
    i23 = i14 + 2 | 0;
    i24 = HEAP16[i14 >> 1] | 0;
    switch (i24 << 16 >> 16) {
    case 10:
     {
      i5 = 10;
      break L18;
      break;
     }
    case 13:
     {
      i14 = i23;
      break;
     }
    default:
     break L20;
    }
   }
   i14 = i24 & 65535;
   if ((HEAP32[i8 >> 2] | 0) > (i14 | 0)) i25 = (HEAP32[i7 >> 2] | 0) + (i14 << 2) | 0; else i25 = i4;
   f18 = Math_fround(f18 + Math_fround(f17 * Math_fround(HEAPF32[i25 >> 2])));
   i12 = i23;
  }
  if ((i5 | 0) == 10) {
   i23 = f18 <= Math_fround(0.0);
   f17 = i23 ? Math_fround(0.0) : f18;
   f19 = Math_fround(0.0);
   i20 = (HEAPF32[tempDoublePtr >> 2] = f17, HEAP32[tempDoublePtr >> 2] | 0);
   f21 = f17;
   f22 = Math_fround(f16 + Math_fround(0.0));
  }
  i23 = f21 < f19 ? (HEAPF32[tempDoublePtr >> 2] = f19, HEAP32[tempDoublePtr >> 2] | 0) : i20;
  i20 = f22 == Math_fround(0.0) | f19 > Math_fround(0.0);
  f19 = Math_fround(f16 + f22);
  HEAPF32[i1 + 4 >> 2] = Math_fround(0.0);
  HEAP32[i1 + 12 >> 2] = 0;
  HEAP32[i1 + 16 >> 2] = i3;
  HEAPF32[i1 + 8 >> 2] = i20 ? f19 : f22;
  HEAP32[i1 >> 2] = i23;
  return;
 }
 i23 = i1 + 4 | 0;
 i20 = i2 + 12 | 0;
 i12 = HEAP32[i20 >> 2] | 0;
 i25 = i12 + (i6 << 1) | 0;
 i6 = HEAP32[1460598] | 0;
 i4 = HEAP32[i6 + 6180 >> 2] | 0;
 i7 = i4 + 28 | 0;
 i8 = i4 + 36 | 0;
 i24 = i4 + 56 | 0;
 f22 = Math_fround(HEAPF32[i6 + 6184 >> 2]);
 f19 = Math_fround(f22 / Math_fround(HEAPF32[i4 >> 2]));
 f16 = Math_fround(f22 + Math_fround(0.0));
 i4 = (HEAPF32[tempDoublePtr >> 2] = f16, HEAP32[tempDoublePtr >> 2] | 0);
 i6 = 0;
 i15 = 0;
 f21 = Math_fround(0.0);
 while (1) {
  HEAPF32[i23 >> 2] = f21;
  i14 = i12 + (i15 << 1) | 0;
  f17 = Math_fround(0.0);
  i9 = i14;
  L34 : while (1) {
   i10 = i9;
   L36 : while (1) {
    if (i10 >>> 0 >= i25 >>> 0) {
     i26 = i10;
     f27 = f17;
     i28 = 0;
     f29 = Math_fround(0.0);
     break L34;
    }
    i30 = i10 + 2 | 0;
    i31 = HEAP16[i10 >> 1] | 0;
    switch (i31 << 16 >> 16) {
    case 10:
     {
      i26 = i30;
      f27 = Math_fround(0.0);
      i28 = i4;
      f29 = f16;
      break L34;
      break;
     }
    case 13:
     {
      i10 = i30;
      break;
     }
    default:
     break L36;
    }
   }
   i10 = i31 & 65535;
   if ((HEAP32[i7 >> 2] | 0) > (i10 | 0)) i32 = (HEAP32[i8 >> 2] | 0) + (i10 << 2) | 0; else i32 = i24;
   f17 = Math_fround(f17 + Math_fround(f19 * Math_fround(HEAPF32[i32 >> 2])));
   i9 = i30;
  }
  i9 = f29 == Math_fround(0.0) | f27 > Math_fround(0.0);
  f17 = Math_fround(f22 + f29);
  i33 = i9 ? (HEAPF32[tempDoublePtr >> 2] = f17, HEAP32[tempDoublePtr >> 2] | 0) : i28;
  i34 = i26 - i14 >> 1;
  i9 = i34 + i15 | 0;
  if ((i9 | 0) > (i3 | 0)) break;
  i10 = i15;
  i15 = i9;
  f21 = Math_fround(f21 + (HEAP32[tempDoublePtr >> 2] = i33, Math_fround(HEAPF32[tempDoublePtr >> 2])));
  i6 = i10;
 }
 HEAP32[i1 + 12 >> 2] = i15;
 HEAP32[i1 + 16 >> 2] = i34;
 HEAP32[i1 + 8 >> 2] = i33;
 HEAP32[i1 + 20 >> 2] = i6;
 HEAP32[i1 >> 2] = 0;
 if ((i15 | 0) >= (i3 | 0)) return;
 i6 = HEAP32[i2 + 4 >> 2] | 0;
 i2 = HEAP32[1460598] | 0;
 i33 = i2 + 6180 | 0;
 i34 = i2 + 6184 | 0;
 i2 = 0;
 i26 = i15;
 f21 = Math_fround(0.0);
 while (1) {
  if ((i6 | 0) <= (i26 | 0)) {
   i5 = 33;
   break;
  }
  i28 = HEAP16[(HEAP32[i20 >> 2] | 0) + (i26 << 1) >> 1] | 0;
  if (i28 << 16 >> 16 == 10) f35 = Math_fround(-1.0); else {
   i30 = HEAP32[i33 >> 2] | 0;
   i32 = i28 & 65535;
   if ((HEAP32[i30 + 28 >> 2] | 0) > (i32 | 0)) i36 = (HEAP32[i30 + 36 >> 2] | 0) + (i32 << 2) | 0; else i36 = i30 + 56 | 0;
   f29 = Math_fround(HEAPF32[i36 >> 2]);
   f22 = Math_fround(HEAPF32[i34 >> 2]);
   f35 = Math_fround(f29 * Math_fround(f22 / Math_fround(HEAPF32[i30 >> 2])));
  }
  f21 = Math_fround(f35 + f21);
  HEAPF32[i1 >> 2] = f21;
  i2 = i2 + 1 | 0;
  i26 = i2 + i15 | 0;
  if ((i26 | 0) >= (i3 | 0)) {
   i5 = 40;
   break;
  }
 }
 if ((i5 | 0) == 33) ___assert_fail(56841, 56850, 1235, 56909); else if ((i5 | 0) == 40) return;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0;
 i1 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(304);
 i8 = i7 + 200 | 0;
 i9 = i7 + 196 | 0;
 i10 = i7 + 184 | 0;
 i11 = i7 + 172 | 0;
 i12 = i7 + 168 | 0;
 i13 = i7 + 8 | 0;
 i14 = i7 + 4 | 0;
 i15 = i7;
 i16 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE(i4) | 0;
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw(i10, i4, i8, i9);
 HEAP32[i11 >> 2] = 0;
 HEAP32[i11 + 4 >> 2] = 0;
 HEAP32[i11 + 8 >> 2] = 0;
 i4 = 0;
 while (1) {
  if ((i4 | 0) == 3) break;
  HEAP32[i11 + (i4 << 2) >> 2] = 0;
  i4 = i4 + 1 | 0;
 }
 i4 = i11 + 11 | 0;
 i17 = i11 + 8 | 0;
 if ((HEAP8[i4 >> 0] | 0) < 0) i18 = (HEAP32[i17 >> 2] & 2147483647) + -1 | 0; else i18 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i18, 0);
 i18 = (HEAP8[i4 >> 0] | 0) < 0 ? HEAP32[i11 >> 2] | 0 : i11;
 HEAP32[i12 >> 2] = i18;
 HEAP32[i14 >> 2] = i13;
 HEAP32[i15 >> 2] = 0;
 i19 = i11 + 4 | 0;
 i20 = HEAP32[i2 >> 2] | 0;
 i21 = i18;
 i18 = i20;
 i22 = i20;
 L8 : while (1) {
  if (!i18) {
   i23 = 0;
   i24 = 0;
   i25 = 1;
  } else {
   i20 = HEAP32[i18 + 12 >> 2] | 0;
   if ((i20 | 0) == (HEAP32[i18 + 16 >> 2] | 0)) i26 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i18 >> 2] | 0) + 36 >> 2] & 127](i18) | 0; else i26 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i20 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i26, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i2 >> 2] = 0;
    i23 = 0;
    i24 = 0;
    i25 = 1;
   } else {
    i23 = i18;
    i24 = i22;
    i25 = 0;
   }
  }
  i20 = HEAP32[i3 >> 2] | 0;
  do if (!i20) i1 = 19; else {
   i27 = HEAP32[i20 + 12 >> 2] | 0;
   if ((i27 | 0) == (HEAP32[i20 + 16 >> 2] | 0)) i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i20 >> 2] | 0) + 36 >> 2] & 127](i20) | 0; else i28 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i27 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i28, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i3 >> 2] = 0;
    i1 = 19;
    break;
   } else if (i25) {
    i29 = i20;
    break;
   } else {
    i30 = i21;
    i31 = i20;
    break L8;
   }
  } while (0);
  if ((i1 | 0) == 19) {
   i1 = 0;
   if (i25) {
    i30 = i21;
    i31 = 0;
    break;
   } else i29 = 0;
  }
  i20 = HEAP8[i4 >> 0] | 0;
  i27 = i20 << 24 >> 24 < 0 ? HEAP32[i19 >> 2] | 0 : i20 & 255;
  if ((HEAP32[i12 >> 2] | 0) == (i21 + i27 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i27 << 1, 0);
   if ((HEAP8[i4 >> 0] | 0) < 0) i32 = (HEAP32[i17 >> 2] & 2147483647) + -1 | 0; else i32 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i32, 0);
   i20 = (HEAP8[i4 >> 0] | 0) < 0 ? HEAP32[i11 >> 2] | 0 : i11;
   HEAP32[i12 >> 2] = i20 + i27;
   i33 = i20;
  } else i33 = i21;
  i20 = i23 + 12 | 0;
  i27 = HEAP32[i20 >> 2] | 0;
  i34 = i23 + 16 | 0;
  if ((i27 | 0) == (HEAP32[i34 >> 2] | 0)) i35 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 36 >> 2] & 127](i23) | 0; else i35 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i27 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw(i35, i16, i33, i12, i15, HEAP32[i9 >> 2] | 0, i10, i13, i14, i8) | 0) {
   i30 = i33;
   i31 = i29;
   break;
  }
  i27 = HEAP32[i20 >> 2] | 0;
  if ((i27 | 0) == (HEAP32[i34 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 40 >> 2] & 127](i23) | 0;
   i21 = i33;
   i18 = i23;
   i22 = i24;
   continue;
  } else {
   HEAP32[i20 >> 2] = i27 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i27 >> 2] | 0) | 0;
   i21 = i33;
   i18 = i23;
   i22 = i24;
   continue;
  }
 }
 i22 = HEAP8[i10 + 11 >> 0] | 0;
 if ((i22 << 24 >> 24 < 0 ? HEAP32[i10 + 4 >> 2] | 0 : i22 & 255) | 0) {
  i22 = HEAP32[i14 >> 2] | 0;
  if ((i22 - i13 | 0) < 160) {
   i18 = HEAP32[i15 >> 2] | 0;
   HEAP32[i14 >> 2] = i22 + 4;
   HEAP32[i22 >> 2] = i18;
  }
 }
 i18 = __ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji(i30, HEAP32[i12 >> 2] | 0, i5, i16) | 0;
 HEAP16[i6 >> 1] = i18;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i10, i13, HEAP32[i14 >> 2] | 0, i5);
 if (!i23) i36 = 1; else {
  i14 = HEAP32[i23 + 12 >> 2] | 0;
  if ((i14 | 0) == (HEAP32[i23 + 16 >> 2] | 0)) i37 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i24 >> 2] | 0) + 36 >> 2] & 127](i23) | 0; else i37 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i14 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i37, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i2 >> 2] = 0;
   i36 = 1;
  } else i36 = 0;
 }
 do if (!i31) i1 = 47; else {
  i37 = HEAP32[i31 + 12 >> 2] | 0;
  if ((i37 | 0) == (HEAP32[i31 + 16 >> 2] | 0)) i38 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i31 >> 2] | 0) + 36 >> 2] & 127](i31) | 0; else i38 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i37 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i38, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i3 >> 2] = 0;
   i1 = 47;
   break;
  } else if (i36) break; else {
   i1 = 49;
   break;
  }
 } while (0);
 if ((i1 | 0) == 47) if (i36) i1 = 49;
 if ((i1 | 0) == 49) HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 2;
 i5 = HEAP32[i2 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i11);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i10);
 STACKTOP = i7;
 return i5 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0;
 i1 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(304);
 i8 = i7 + 200 | 0;
 i9 = i7 + 196 | 0;
 i10 = i7 + 184 | 0;
 i11 = i7 + 172 | 0;
 i12 = i7 + 168 | 0;
 i13 = i7 + 8 | 0;
 i14 = i7 + 4 | 0;
 i15 = i7;
 i16 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE(i4) | 0;
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw(i10, i4, i8, i9);
 HEAP32[i11 >> 2] = 0;
 HEAP32[i11 + 4 >> 2] = 0;
 HEAP32[i11 + 8 >> 2] = 0;
 i4 = 0;
 while (1) {
  if ((i4 | 0) == 3) break;
  HEAP32[i11 + (i4 << 2) >> 2] = 0;
  i4 = i4 + 1 | 0;
 }
 i4 = i11 + 11 | 0;
 i17 = i11 + 8 | 0;
 if ((HEAP8[i4 >> 0] | 0) < 0) i18 = (HEAP32[i17 >> 2] & 2147483647) + -1 | 0; else i18 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i18, 0);
 i18 = (HEAP8[i4 >> 0] | 0) < 0 ? HEAP32[i11 >> 2] | 0 : i11;
 HEAP32[i12 >> 2] = i18;
 HEAP32[i14 >> 2] = i13;
 HEAP32[i15 >> 2] = 0;
 i19 = i11 + 4 | 0;
 i20 = HEAP32[i2 >> 2] | 0;
 i21 = i18;
 i18 = i20;
 i22 = i20;
 L8 : while (1) {
  if (!i18) {
   i23 = 0;
   i24 = 0;
   i25 = 1;
  } else {
   i20 = HEAP32[i18 + 12 >> 2] | 0;
   if ((i20 | 0) == (HEAP32[i18 + 16 >> 2] | 0)) i26 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i18 >> 2] | 0) + 36 >> 2] & 127](i18) | 0; else i26 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i20 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i26, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i2 >> 2] = 0;
    i23 = 0;
    i24 = 0;
    i25 = 1;
   } else {
    i23 = i18;
    i24 = i22;
    i25 = 0;
   }
  }
  i20 = HEAP32[i3 >> 2] | 0;
  do if (!i20) i1 = 19; else {
   i27 = HEAP32[i20 + 12 >> 2] | 0;
   if ((i27 | 0) == (HEAP32[i20 + 16 >> 2] | 0)) i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i20 >> 2] | 0) + 36 >> 2] & 127](i20) | 0; else i28 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i27 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i28, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i3 >> 2] = 0;
    i1 = 19;
    break;
   } else if (i25) {
    i29 = i20;
    break;
   } else {
    i30 = i21;
    i31 = i20;
    break L8;
   }
  } while (0);
  if ((i1 | 0) == 19) {
   i1 = 0;
   if (i25) {
    i30 = i21;
    i31 = 0;
    break;
   } else i29 = 0;
  }
  i20 = HEAP8[i4 >> 0] | 0;
  i27 = i20 << 24 >> 24 < 0 ? HEAP32[i19 >> 2] | 0 : i20 & 255;
  if ((HEAP32[i12 >> 2] | 0) == (i21 + i27 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i27 << 1, 0);
   if ((HEAP8[i4 >> 0] | 0) < 0) i32 = (HEAP32[i17 >> 2] & 2147483647) + -1 | 0; else i32 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i32, 0);
   i20 = (HEAP8[i4 >> 0] | 0) < 0 ? HEAP32[i11 >> 2] | 0 : i11;
   HEAP32[i12 >> 2] = i20 + i27;
   i33 = i20;
  } else i33 = i21;
  i20 = i23 + 12 | 0;
  i27 = HEAP32[i20 >> 2] | 0;
  i34 = i23 + 16 | 0;
  if ((i27 | 0) == (HEAP32[i34 >> 2] | 0)) i35 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 36 >> 2] & 127](i23) | 0; else i35 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i27 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw(i35, i16, i33, i12, i15, HEAP32[i9 >> 2] | 0, i10, i13, i14, i8) | 0) {
   i30 = i33;
   i31 = i29;
   break;
  }
  i27 = HEAP32[i20 >> 2] | 0;
  if ((i27 | 0) == (HEAP32[i34 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 40 >> 2] & 127](i23) | 0;
   i21 = i33;
   i18 = i23;
   i22 = i24;
   continue;
  } else {
   HEAP32[i20 >> 2] = i27 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i27 >> 2] | 0) | 0;
   i21 = i33;
   i18 = i23;
   i22 = i24;
   continue;
  }
 }
 i22 = HEAP8[i10 + 11 >> 0] | 0;
 if ((i22 << 24 >> 24 < 0 ? HEAP32[i10 + 4 >> 2] | 0 : i22 & 255) | 0) {
  i22 = HEAP32[i14 >> 2] | 0;
  if ((i22 - i13 | 0) < 160) {
   i18 = HEAP32[i15 >> 2] | 0;
   HEAP32[i14 >> 2] = i22 + 4;
   HEAP32[i22 >> 2] = i18;
  }
 }
 i18 = __ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji(i30, HEAP32[i12 >> 2] | 0, i5, i16) | 0;
 HEAP32[i6 >> 2] = i18;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i10, i13, HEAP32[i14 >> 2] | 0, i5);
 if (!i23) i36 = 1; else {
  i14 = HEAP32[i23 + 12 >> 2] | 0;
  if ((i14 | 0) == (HEAP32[i23 + 16 >> 2] | 0)) i37 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i24 >> 2] | 0) + 36 >> 2] & 127](i23) | 0; else i37 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i14 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i37, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i2 >> 2] = 0;
   i36 = 1;
  } else i36 = 0;
 }
 do if (!i31) i1 = 47; else {
  i37 = HEAP32[i31 + 12 >> 2] | 0;
  if ((i37 | 0) == (HEAP32[i31 + 16 >> 2] | 0)) i38 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i31 >> 2] | 0) + 36 >> 2] & 127](i31) | 0; else i38 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i37 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i38, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i3 >> 2] = 0;
   i1 = 47;
   break;
  } else if (i36) break; else {
   i1 = 49;
   break;
  }
 } while (0);
 if ((i1 | 0) == 47) if (i36) i1 = 49;
 if ((i1 | 0) == 49) HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 2;
 i5 = HEAP32[i2 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i11);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i10);
 STACKTOP = i7;
 return i5 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0;
 i1 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(304);
 i8 = i7 + 200 | 0;
 i9 = i7 + 196 | 0;
 i10 = i7 + 184 | 0;
 i11 = i7 + 172 | 0;
 i12 = i7 + 168 | 0;
 i13 = i7 + 8 | 0;
 i14 = i7 + 4 | 0;
 i15 = i7;
 i16 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE(i4) | 0;
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw(i10, i4, i8, i9);
 HEAP32[i11 >> 2] = 0;
 HEAP32[i11 + 4 >> 2] = 0;
 HEAP32[i11 + 8 >> 2] = 0;
 i4 = 0;
 while (1) {
  if ((i4 | 0) == 3) break;
  HEAP32[i11 + (i4 << 2) >> 2] = 0;
  i4 = i4 + 1 | 0;
 }
 i4 = i11 + 11 | 0;
 i17 = i11 + 8 | 0;
 if ((HEAP8[i4 >> 0] | 0) < 0) i18 = (HEAP32[i17 >> 2] & 2147483647) + -1 | 0; else i18 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i18, 0);
 i18 = (HEAP8[i4 >> 0] | 0) < 0 ? HEAP32[i11 >> 2] | 0 : i11;
 HEAP32[i12 >> 2] = i18;
 HEAP32[i14 >> 2] = i13;
 HEAP32[i15 >> 2] = 0;
 i19 = i11 + 4 | 0;
 i20 = HEAP32[i2 >> 2] | 0;
 i21 = i18;
 i18 = i20;
 i22 = i20;
 L8 : while (1) {
  if (!i18) {
   i23 = 0;
   i24 = 0;
   i25 = 1;
  } else {
   i20 = HEAP32[i18 + 12 >> 2] | 0;
   if ((i20 | 0) == (HEAP32[i18 + 16 >> 2] | 0)) i26 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i18 >> 2] | 0) + 36 >> 2] & 127](i18) | 0; else i26 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i20 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i26, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i2 >> 2] = 0;
    i23 = 0;
    i24 = 0;
    i25 = 1;
   } else {
    i23 = i18;
    i24 = i22;
    i25 = 0;
   }
  }
  i20 = HEAP32[i3 >> 2] | 0;
  do if (!i20) i1 = 19; else {
   i27 = HEAP32[i20 + 12 >> 2] | 0;
   if ((i27 | 0) == (HEAP32[i20 + 16 >> 2] | 0)) i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i20 >> 2] | 0) + 36 >> 2] & 127](i20) | 0; else i28 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i27 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i28, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i3 >> 2] = 0;
    i1 = 19;
    break;
   } else if (i25) {
    i29 = i20;
    break;
   } else {
    i30 = i21;
    i31 = i20;
    break L8;
   }
  } while (0);
  if ((i1 | 0) == 19) {
   i1 = 0;
   if (i25) {
    i30 = i21;
    i31 = 0;
    break;
   } else i29 = 0;
  }
  i20 = HEAP8[i4 >> 0] | 0;
  i27 = i20 << 24 >> 24 < 0 ? HEAP32[i19 >> 2] | 0 : i20 & 255;
  if ((HEAP32[i12 >> 2] | 0) == (i21 + i27 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i27 << 1, 0);
   if ((HEAP8[i4 >> 0] | 0) < 0) i32 = (HEAP32[i17 >> 2] & 2147483647) + -1 | 0; else i32 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i32, 0);
   i20 = (HEAP8[i4 >> 0] | 0) < 0 ? HEAP32[i11 >> 2] | 0 : i11;
   HEAP32[i12 >> 2] = i20 + i27;
   i33 = i20;
  } else i33 = i21;
  i20 = i23 + 12 | 0;
  i27 = HEAP32[i20 >> 2] | 0;
  i34 = i23 + 16 | 0;
  if ((i27 | 0) == (HEAP32[i34 >> 2] | 0)) i35 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 36 >> 2] & 127](i23) | 0; else i35 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i27 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw(i35, i16, i33, i12, i15, HEAP32[i9 >> 2] | 0, i10, i13, i14, i8) | 0) {
   i30 = i33;
   i31 = i29;
   break;
  }
  i27 = HEAP32[i20 >> 2] | 0;
  if ((i27 | 0) == (HEAP32[i34 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 40 >> 2] & 127](i23) | 0;
   i21 = i33;
   i18 = i23;
   i22 = i24;
   continue;
  } else {
   HEAP32[i20 >> 2] = i27 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i27 >> 2] | 0) | 0;
   i21 = i33;
   i18 = i23;
   i22 = i24;
   continue;
  }
 }
 i22 = HEAP8[i10 + 11 >> 0] | 0;
 if ((i22 << 24 >> 24 < 0 ? HEAP32[i10 + 4 >> 2] | 0 : i22 & 255) | 0) {
  i22 = HEAP32[i14 >> 2] | 0;
  if ((i22 - i13 | 0) < 160) {
   i18 = HEAP32[i15 >> 2] | 0;
   HEAP32[i14 >> 2] = i22 + 4;
   HEAP32[i22 >> 2] = i18;
  }
 }
 i18 = __ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji(i30, HEAP32[i12 >> 2] | 0, i5, i16) | 0;
 HEAP32[i6 >> 2] = i18;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i10, i13, HEAP32[i14 >> 2] | 0, i5);
 if (!i23) i36 = 1; else {
  i14 = HEAP32[i23 + 12 >> 2] | 0;
  if ((i14 | 0) == (HEAP32[i23 + 16 >> 2] | 0)) i37 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i24 >> 2] | 0) + 36 >> 2] & 127](i23) | 0; else i37 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i14 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i37, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i2 >> 2] = 0;
   i36 = 1;
  } else i36 = 0;
 }
 do if (!i31) i1 = 47; else {
  i37 = HEAP32[i31 + 12 >> 2] | 0;
  if ((i37 | 0) == (HEAP32[i31 + 16 >> 2] | 0)) i38 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i31 >> 2] | 0) + 36 >> 2] & 127](i31) | 0; else i38 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i37 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i38, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i3 >> 2] = 0;
   i1 = 47;
   break;
  } else if (i36) break; else {
   i1 = 49;
   break;
  }
 } while (0);
 if ((i1 | 0) == 47) if (i36) i1 = 49;
 if ((i1 | 0) == 49) HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 2;
 i5 = HEAP32[i2 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i11);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i10);
 STACKTOP = i7;
 return i5 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0;
 i1 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224);
 i8 = i7 + 198 | 0;
 i9 = i7 + 196 | 0;
 i10 = i7 + 184 | 0;
 i11 = i7 + 172 | 0;
 i12 = i7 + 168 | 0;
 i13 = i7 + 8 | 0;
 i14 = i7 + 4 | 0;
 i15 = i7;
 i16 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE(i4) | 0;
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc(i10, i4, i8, i9);
 HEAP32[i11 >> 2] = 0;
 HEAP32[i11 + 4 >> 2] = 0;
 HEAP32[i11 + 8 >> 2] = 0;
 i4 = 0;
 while (1) {
  if ((i4 | 0) == 3) break;
  HEAP32[i11 + (i4 << 2) >> 2] = 0;
  i4 = i4 + 1 | 0;
 }
 i4 = i11 + 11 | 0;
 i17 = i11 + 8 | 0;
 if ((HEAP8[i4 >> 0] | 0) < 0) i18 = (HEAP32[i17 >> 2] & 2147483647) + -1 | 0; else i18 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i18, 0);
 i18 = (HEAP8[i4 >> 0] | 0) < 0 ? HEAP32[i11 >> 2] | 0 : i11;
 HEAP32[i12 >> 2] = i18;
 HEAP32[i14 >> 2] = i13;
 HEAP32[i15 >> 2] = 0;
 i19 = i11 + 4 | 0;
 i20 = HEAP32[i2 >> 2] | 0;
 i21 = i18;
 i18 = i20;
 i22 = i20;
 L8 : while (1) {
  if (!i18) {
   i23 = 0;
   i24 = 0;
   i25 = 1;
  } else {
   i20 = HEAP32[i18 + 12 >> 2] | 0;
   if ((i20 | 0) == (HEAP32[i18 + 16 >> 2] | 0)) i26 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i18 >> 2] | 0) + 36 >> 2] & 127](i18) | 0; else i26 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i20 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i26, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i2 >> 2] = 0;
    i23 = 0;
    i24 = 0;
    i25 = 1;
   } else {
    i23 = i18;
    i24 = i22;
    i25 = 0;
   }
  }
  i20 = HEAP32[i3 >> 2] | 0;
  do if (!i20) i1 = 19; else {
   i27 = HEAP32[i20 + 12 >> 2] | 0;
   if ((i27 | 0) == (HEAP32[i20 + 16 >> 2] | 0)) i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i20 >> 2] | 0) + 36 >> 2] & 127](i20) | 0; else i28 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i27 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i28, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i3 >> 2] = 0;
    i1 = 19;
    break;
   } else if (i25) {
    i29 = i20;
    break;
   } else {
    i30 = i21;
    i31 = i20;
    break L8;
   }
  } while (0);
  if ((i1 | 0) == 19) {
   i1 = 0;
   if (i25) {
    i30 = i21;
    i31 = 0;
    break;
   } else i29 = 0;
  }
  i20 = HEAP8[i4 >> 0] | 0;
  i27 = i20 << 24 >> 24 < 0 ? HEAP32[i19 >> 2] | 0 : i20 & 255;
  if ((HEAP32[i12 >> 2] | 0) == (i21 + i27 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i27 << 1, 0);
   if ((HEAP8[i4 >> 0] | 0) < 0) i32 = (HEAP32[i17 >> 2] & 2147483647) + -1 | 0; else i32 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i32, 0);
   i20 = (HEAP8[i4 >> 0] | 0) < 0 ? HEAP32[i11 >> 2] | 0 : i11;
   HEAP32[i12 >> 2] = i20 + i27;
   i33 = i20;
  } else i33 = i21;
  i20 = i23 + 12 | 0;
  i27 = HEAP32[i20 >> 2] | 0;
  i34 = i23 + 16 | 0;
  if ((i27 | 0) == (HEAP32[i34 >> 2] | 0)) i35 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 36 >> 2] & 127](i23) | 0; else i35 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i27 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_(i35 & 255, i16, i33, i12, i15, HEAP8[i9 >> 0] | 0, i10, i13, i14, i8) | 0) {
   i30 = i33;
   i31 = i29;
   break;
  }
  i27 = HEAP32[i20 >> 2] | 0;
  if ((i27 | 0) == (HEAP32[i34 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 40 >> 2] & 127](i23) | 0;
   i21 = i33;
   i18 = i23;
   i22 = i24;
   continue;
  } else {
   HEAP32[i20 >> 2] = i27 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i27 >> 0] | 0) | 0;
   i21 = i33;
   i18 = i23;
   i22 = i24;
   continue;
  }
 }
 i22 = HEAP8[i10 + 11 >> 0] | 0;
 if ((i22 << 24 >> 24 < 0 ? HEAP32[i10 + 4 >> 2] | 0 : i22 & 255) | 0) {
  i22 = HEAP32[i14 >> 2] | 0;
  if ((i22 - i13 | 0) < 160) {
   i18 = HEAP32[i15 >> 2] | 0;
   HEAP32[i14 >> 2] = i22 + 4;
   HEAP32[i22 >> 2] = i18;
  }
 }
 i18 = __ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji(i30, HEAP32[i12 >> 2] | 0, i5, i16) | 0;
 HEAP16[i6 >> 1] = i18;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i10, i13, HEAP32[i14 >> 2] | 0, i5);
 if (!i23) i36 = 1; else {
  i14 = HEAP32[i23 + 12 >> 2] | 0;
  if ((i14 | 0) == (HEAP32[i23 + 16 >> 2] | 0)) i37 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i24 >> 2] | 0) + 36 >> 2] & 127](i23) | 0; else i37 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i14 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i37, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i2 >> 2] = 0;
   i36 = 1;
  } else i36 = 0;
 }
 do if (!i31) i1 = 47; else {
  i37 = HEAP32[i31 + 12 >> 2] | 0;
  if ((i37 | 0) == (HEAP32[i31 + 16 >> 2] | 0)) i38 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i31 >> 2] | 0) + 36 >> 2] & 127](i31) | 0; else i38 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i37 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i38, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i3 >> 2] = 0;
   i1 = 47;
   break;
  } else if (i36) break; else {
   i1 = 49;
   break;
  }
 } while (0);
 if ((i1 | 0) == 47) if (i36) i1 = 49;
 if ((i1 | 0) == 49) HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 2;
 i5 = HEAP32[i2 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i11);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i10);
 STACKTOP = i7;
 return i5 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0;
 i1 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224);
 i8 = i7 + 198 | 0;
 i9 = i7 + 196 | 0;
 i10 = i7 + 184 | 0;
 i11 = i7 + 172 | 0;
 i12 = i7 + 168 | 0;
 i13 = i7 + 8 | 0;
 i14 = i7 + 4 | 0;
 i15 = i7;
 i16 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE(i4) | 0;
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc(i10, i4, i8, i9);
 HEAP32[i11 >> 2] = 0;
 HEAP32[i11 + 4 >> 2] = 0;
 HEAP32[i11 + 8 >> 2] = 0;
 i4 = 0;
 while (1) {
  if ((i4 | 0) == 3) break;
  HEAP32[i11 + (i4 << 2) >> 2] = 0;
  i4 = i4 + 1 | 0;
 }
 i4 = i11 + 11 | 0;
 i17 = i11 + 8 | 0;
 if ((HEAP8[i4 >> 0] | 0) < 0) i18 = (HEAP32[i17 >> 2] & 2147483647) + -1 | 0; else i18 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i18, 0);
 i18 = (HEAP8[i4 >> 0] | 0) < 0 ? HEAP32[i11 >> 2] | 0 : i11;
 HEAP32[i12 >> 2] = i18;
 HEAP32[i14 >> 2] = i13;
 HEAP32[i15 >> 2] = 0;
 i19 = i11 + 4 | 0;
 i20 = HEAP32[i2 >> 2] | 0;
 i21 = i18;
 i18 = i20;
 i22 = i20;
 L8 : while (1) {
  if (!i18) {
   i23 = 0;
   i24 = 0;
   i25 = 1;
  } else {
   i20 = HEAP32[i18 + 12 >> 2] | 0;
   if ((i20 | 0) == (HEAP32[i18 + 16 >> 2] | 0)) i26 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i18 >> 2] | 0) + 36 >> 2] & 127](i18) | 0; else i26 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i20 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i26, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i2 >> 2] = 0;
    i23 = 0;
    i24 = 0;
    i25 = 1;
   } else {
    i23 = i18;
    i24 = i22;
    i25 = 0;
   }
  }
  i20 = HEAP32[i3 >> 2] | 0;
  do if (!i20) i1 = 19; else {
   i27 = HEAP32[i20 + 12 >> 2] | 0;
   if ((i27 | 0) == (HEAP32[i20 + 16 >> 2] | 0)) i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i20 >> 2] | 0) + 36 >> 2] & 127](i20) | 0; else i28 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i27 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i28, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i3 >> 2] = 0;
    i1 = 19;
    break;
   } else if (i25) {
    i29 = i20;
    break;
   } else {
    i30 = i21;
    i31 = i20;
    break L8;
   }
  } while (0);
  if ((i1 | 0) == 19) {
   i1 = 0;
   if (i25) {
    i30 = i21;
    i31 = 0;
    break;
   } else i29 = 0;
  }
  i20 = HEAP8[i4 >> 0] | 0;
  i27 = i20 << 24 >> 24 < 0 ? HEAP32[i19 >> 2] | 0 : i20 & 255;
  if ((HEAP32[i12 >> 2] | 0) == (i21 + i27 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i27 << 1, 0);
   if ((HEAP8[i4 >> 0] | 0) < 0) i32 = (HEAP32[i17 >> 2] & 2147483647) + -1 | 0; else i32 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i32, 0);
   i20 = (HEAP8[i4 >> 0] | 0) < 0 ? HEAP32[i11 >> 2] | 0 : i11;
   HEAP32[i12 >> 2] = i20 + i27;
   i33 = i20;
  } else i33 = i21;
  i20 = i23 + 12 | 0;
  i27 = HEAP32[i20 >> 2] | 0;
  i34 = i23 + 16 | 0;
  if ((i27 | 0) == (HEAP32[i34 >> 2] | 0)) i35 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 36 >> 2] & 127](i23) | 0; else i35 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i27 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_(i35 & 255, i16, i33, i12, i15, HEAP8[i9 >> 0] | 0, i10, i13, i14, i8) | 0) {
   i30 = i33;
   i31 = i29;
   break;
  }
  i27 = HEAP32[i20 >> 2] | 0;
  if ((i27 | 0) == (HEAP32[i34 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 40 >> 2] & 127](i23) | 0;
   i21 = i33;
   i18 = i23;
   i22 = i24;
   continue;
  } else {
   HEAP32[i20 >> 2] = i27 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i27 >> 0] | 0) | 0;
   i21 = i33;
   i18 = i23;
   i22 = i24;
   continue;
  }
 }
 i22 = HEAP8[i10 + 11 >> 0] | 0;
 if ((i22 << 24 >> 24 < 0 ? HEAP32[i10 + 4 >> 2] | 0 : i22 & 255) | 0) {
  i22 = HEAP32[i14 >> 2] | 0;
  if ((i22 - i13 | 0) < 160) {
   i18 = HEAP32[i15 >> 2] | 0;
   HEAP32[i14 >> 2] = i22 + 4;
   HEAP32[i22 >> 2] = i18;
  }
 }
 i18 = __ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji(i30, HEAP32[i12 >> 2] | 0, i5, i16) | 0;
 HEAP32[i6 >> 2] = i18;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i10, i13, HEAP32[i14 >> 2] | 0, i5);
 if (!i23) i36 = 1; else {
  i14 = HEAP32[i23 + 12 >> 2] | 0;
  if ((i14 | 0) == (HEAP32[i23 + 16 >> 2] | 0)) i37 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i24 >> 2] | 0) + 36 >> 2] & 127](i23) | 0; else i37 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i14 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i37, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i2 >> 2] = 0;
   i36 = 1;
  } else i36 = 0;
 }
 do if (!i31) i1 = 47; else {
  i37 = HEAP32[i31 + 12 >> 2] | 0;
  if ((i37 | 0) == (HEAP32[i31 + 16 >> 2] | 0)) i38 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i31 >> 2] | 0) + 36 >> 2] & 127](i31) | 0; else i38 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i37 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i38, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i3 >> 2] = 0;
   i1 = 47;
   break;
  } else if (i36) break; else {
   i1 = 49;
   break;
  }
 } while (0);
 if ((i1 | 0) == 47) if (i36) i1 = 49;
 if ((i1 | 0) == 49) HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 2;
 i5 = HEAP32[i2 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i11);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i10);
 STACKTOP = i7;
 return i5 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0;
 i1 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224);
 i8 = i7 + 198 | 0;
 i9 = i7 + 196 | 0;
 i10 = i7 + 184 | 0;
 i11 = i7 + 172 | 0;
 i12 = i7 + 168 | 0;
 i13 = i7 + 8 | 0;
 i14 = i7 + 4 | 0;
 i15 = i7;
 i16 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE(i4) | 0;
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc(i10, i4, i8, i9);
 HEAP32[i11 >> 2] = 0;
 HEAP32[i11 + 4 >> 2] = 0;
 HEAP32[i11 + 8 >> 2] = 0;
 i4 = 0;
 while (1) {
  if ((i4 | 0) == 3) break;
  HEAP32[i11 + (i4 << 2) >> 2] = 0;
  i4 = i4 + 1 | 0;
 }
 i4 = i11 + 11 | 0;
 i17 = i11 + 8 | 0;
 if ((HEAP8[i4 >> 0] | 0) < 0) i18 = (HEAP32[i17 >> 2] & 2147483647) + -1 | 0; else i18 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i18, 0);
 i18 = (HEAP8[i4 >> 0] | 0) < 0 ? HEAP32[i11 >> 2] | 0 : i11;
 HEAP32[i12 >> 2] = i18;
 HEAP32[i14 >> 2] = i13;
 HEAP32[i15 >> 2] = 0;
 i19 = i11 + 4 | 0;
 i20 = HEAP32[i2 >> 2] | 0;
 i21 = i18;
 i18 = i20;
 i22 = i20;
 L8 : while (1) {
  if (!i18) {
   i23 = 0;
   i24 = 0;
   i25 = 1;
  } else {
   i20 = HEAP32[i18 + 12 >> 2] | 0;
   if ((i20 | 0) == (HEAP32[i18 + 16 >> 2] | 0)) i26 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i18 >> 2] | 0) + 36 >> 2] & 127](i18) | 0; else i26 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i20 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i26, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i2 >> 2] = 0;
    i23 = 0;
    i24 = 0;
    i25 = 1;
   } else {
    i23 = i18;
    i24 = i22;
    i25 = 0;
   }
  }
  i20 = HEAP32[i3 >> 2] | 0;
  do if (!i20) i1 = 19; else {
   i27 = HEAP32[i20 + 12 >> 2] | 0;
   if ((i27 | 0) == (HEAP32[i20 + 16 >> 2] | 0)) i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i20 >> 2] | 0) + 36 >> 2] & 127](i20) | 0; else i28 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i27 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i28, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i3 >> 2] = 0;
    i1 = 19;
    break;
   } else if (i25) {
    i29 = i20;
    break;
   } else {
    i30 = i21;
    i31 = i20;
    break L8;
   }
  } while (0);
  if ((i1 | 0) == 19) {
   i1 = 0;
   if (i25) {
    i30 = i21;
    i31 = 0;
    break;
   } else i29 = 0;
  }
  i20 = HEAP8[i4 >> 0] | 0;
  i27 = i20 << 24 >> 24 < 0 ? HEAP32[i19 >> 2] | 0 : i20 & 255;
  if ((HEAP32[i12 >> 2] | 0) == (i21 + i27 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i27 << 1, 0);
   if ((HEAP8[i4 >> 0] | 0) < 0) i32 = (HEAP32[i17 >> 2] & 2147483647) + -1 | 0; else i32 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i32, 0);
   i20 = (HEAP8[i4 >> 0] | 0) < 0 ? HEAP32[i11 >> 2] | 0 : i11;
   HEAP32[i12 >> 2] = i20 + i27;
   i33 = i20;
  } else i33 = i21;
  i20 = i23 + 12 | 0;
  i27 = HEAP32[i20 >> 2] | 0;
  i34 = i23 + 16 | 0;
  if ((i27 | 0) == (HEAP32[i34 >> 2] | 0)) i35 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 36 >> 2] & 127](i23) | 0; else i35 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i27 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_(i35 & 255, i16, i33, i12, i15, HEAP8[i9 >> 0] | 0, i10, i13, i14, i8) | 0) {
   i30 = i33;
   i31 = i29;
   break;
  }
  i27 = HEAP32[i20 >> 2] | 0;
  if ((i27 | 0) == (HEAP32[i34 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 40 >> 2] & 127](i23) | 0;
   i21 = i33;
   i18 = i23;
   i22 = i24;
   continue;
  } else {
   HEAP32[i20 >> 2] = i27 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i27 >> 0] | 0) | 0;
   i21 = i33;
   i18 = i23;
   i22 = i24;
   continue;
  }
 }
 i22 = HEAP8[i10 + 11 >> 0] | 0;
 if ((i22 << 24 >> 24 < 0 ? HEAP32[i10 + 4 >> 2] | 0 : i22 & 255) | 0) {
  i22 = HEAP32[i14 >> 2] | 0;
  if ((i22 - i13 | 0) < 160) {
   i18 = HEAP32[i15 >> 2] | 0;
   HEAP32[i14 >> 2] = i22 + 4;
   HEAP32[i22 >> 2] = i18;
  }
 }
 i18 = __ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji(i30, HEAP32[i12 >> 2] | 0, i5, i16) | 0;
 HEAP32[i6 >> 2] = i18;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i10, i13, HEAP32[i14 >> 2] | 0, i5);
 if (!i23) i36 = 1; else {
  i14 = HEAP32[i23 + 12 >> 2] | 0;
  if ((i14 | 0) == (HEAP32[i23 + 16 >> 2] | 0)) i37 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i24 >> 2] | 0) + 36 >> 2] & 127](i23) | 0; else i37 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i14 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i37, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i2 >> 2] = 0;
   i36 = 1;
  } else i36 = 0;
 }
 do if (!i31) i1 = 47; else {
  i37 = HEAP32[i31 + 12 >> 2] | 0;
  if ((i37 | 0) == (HEAP32[i31 + 16 >> 2] | 0)) i38 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i31 >> 2] | 0) + 36 >> 2] & 127](i31) | 0; else i38 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i37 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i38, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i3 >> 2] = 0;
   i1 = 47;
   break;
  } else if (i36) break; else {
   i1 = 49;
   break;
  }
 } while (0);
 if ((i1 | 0) == 47) if (i36) i1 = 49;
 if ((i1 | 0) == 49) HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 2;
 i5 = HEAP32[i2 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i11);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i10);
 STACKTOP = i7;
 return i5 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0;
 i1 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(304);
 i8 = i7 + 200 | 0;
 i9 = i7 + 196 | 0;
 i10 = i7 + 184 | 0;
 i11 = i7 + 172 | 0;
 i12 = i7 + 168 | 0;
 i13 = i7 + 8 | 0;
 i14 = i7 + 4 | 0;
 i15 = i7;
 i16 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE(i4) | 0;
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw(i10, i4, i8, i9);
 HEAP32[i11 >> 2] = 0;
 HEAP32[i11 + 4 >> 2] = 0;
 HEAP32[i11 + 8 >> 2] = 0;
 i4 = 0;
 while (1) {
  if ((i4 | 0) == 3) break;
  HEAP32[i11 + (i4 << 2) >> 2] = 0;
  i4 = i4 + 1 | 0;
 }
 i4 = i11 + 11 | 0;
 i17 = i11 + 8 | 0;
 if ((HEAP8[i4 >> 0] | 0) < 0) i18 = (HEAP32[i17 >> 2] & 2147483647) + -1 | 0; else i18 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i18, 0);
 i18 = (HEAP8[i4 >> 0] | 0) < 0 ? HEAP32[i11 >> 2] | 0 : i11;
 HEAP32[i12 >> 2] = i18;
 HEAP32[i14 >> 2] = i13;
 HEAP32[i15 >> 2] = 0;
 i19 = i11 + 4 | 0;
 i20 = HEAP32[i2 >> 2] | 0;
 i21 = i18;
 i18 = i20;
 i22 = i20;
 L8 : while (1) {
  if (!i18) {
   i23 = 0;
   i24 = 0;
   i25 = 1;
  } else {
   i20 = HEAP32[i18 + 12 >> 2] | 0;
   if ((i20 | 0) == (HEAP32[i18 + 16 >> 2] | 0)) i26 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i18 >> 2] | 0) + 36 >> 2] & 127](i18) | 0; else i26 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i20 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i26, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i2 >> 2] = 0;
    i23 = 0;
    i24 = 0;
    i25 = 1;
   } else {
    i23 = i18;
    i24 = i22;
    i25 = 0;
   }
  }
  i20 = HEAP32[i3 >> 2] | 0;
  do if (!i20) i1 = 19; else {
   i27 = HEAP32[i20 + 12 >> 2] | 0;
   if ((i27 | 0) == (HEAP32[i20 + 16 >> 2] | 0)) i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i20 >> 2] | 0) + 36 >> 2] & 127](i20) | 0; else i28 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i27 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i28, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i3 >> 2] = 0;
    i1 = 19;
    break;
   } else if (i25) {
    i29 = i20;
    break;
   } else {
    i30 = i21;
    i31 = i20;
    break L8;
   }
  } while (0);
  if ((i1 | 0) == 19) {
   i1 = 0;
   if (i25) {
    i30 = i21;
    i31 = 0;
    break;
   } else i29 = 0;
  }
  i20 = HEAP8[i4 >> 0] | 0;
  i27 = i20 << 24 >> 24 < 0 ? HEAP32[i19 >> 2] | 0 : i20 & 255;
  if ((HEAP32[i12 >> 2] | 0) == (i21 + i27 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i27 << 1, 0);
   if ((HEAP8[i4 >> 0] | 0) < 0) i32 = (HEAP32[i17 >> 2] & 2147483647) + -1 | 0; else i32 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i32, 0);
   i20 = (HEAP8[i4 >> 0] | 0) < 0 ? HEAP32[i11 >> 2] | 0 : i11;
   HEAP32[i12 >> 2] = i20 + i27;
   i33 = i20;
  } else i33 = i21;
  i20 = i23 + 12 | 0;
  i27 = HEAP32[i20 >> 2] | 0;
  i34 = i23 + 16 | 0;
  if ((i27 | 0) == (HEAP32[i34 >> 2] | 0)) i35 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 36 >> 2] & 127](i23) | 0; else i35 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i27 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw(i35, i16, i33, i12, i15, HEAP32[i9 >> 2] | 0, i10, i13, i14, i8) | 0) {
   i30 = i33;
   i31 = i29;
   break;
  }
  i27 = HEAP32[i20 >> 2] | 0;
  if ((i27 | 0) == (HEAP32[i34 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 40 >> 2] & 127](i23) | 0;
   i21 = i33;
   i18 = i23;
   i22 = i24;
   continue;
  } else {
   HEAP32[i20 >> 2] = i27 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i27 >> 2] | 0) | 0;
   i21 = i33;
   i18 = i23;
   i22 = i24;
   continue;
  }
 }
 i22 = HEAP8[i10 + 11 >> 0] | 0;
 if ((i22 << 24 >> 24 < 0 ? HEAP32[i10 + 4 >> 2] | 0 : i22 & 255) | 0) {
  i22 = HEAP32[i14 >> 2] | 0;
  if ((i22 - i13 | 0) < 160) {
   i18 = HEAP32[i15 >> 2] | 0;
   HEAP32[i14 >> 2] = i22 + 4;
   HEAP32[i22 >> 2] = i18;
  }
 }
 i18 = __ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji(i30, HEAP32[i12 >> 2] | 0, i5, i16) | 0;
 HEAP32[i6 >> 2] = i18;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i10, i13, HEAP32[i14 >> 2] | 0, i5);
 if (!i23) i36 = 1; else {
  i14 = HEAP32[i23 + 12 >> 2] | 0;
  if ((i14 | 0) == (HEAP32[i23 + 16 >> 2] | 0)) i37 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i24 >> 2] | 0) + 36 >> 2] & 127](i23) | 0; else i37 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i14 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i37, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i2 >> 2] = 0;
   i36 = 1;
  } else i36 = 0;
 }
 do if (!i31) i1 = 47; else {
  i37 = HEAP32[i31 + 12 >> 2] | 0;
  if ((i37 | 0) == (HEAP32[i31 + 16 >> 2] | 0)) i38 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i31 >> 2] | 0) + 36 >> 2] & 127](i31) | 0; else i38 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i37 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i38, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i3 >> 2] = 0;
   i1 = 47;
   break;
  } else if (i36) break; else {
   i1 = 49;
   break;
  }
 } while (0);
 if ((i1 | 0) == 47) if (i36) i1 = 49;
 if ((i1 | 0) == 49) HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 2;
 i5 = HEAP32[i2 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i11);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i10);
 STACKTOP = i7;
 return i5 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0;
 i1 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224);
 i8 = i7 + 198 | 0;
 i9 = i7 + 196 | 0;
 i10 = i7 + 184 | 0;
 i11 = i7 + 172 | 0;
 i12 = i7 + 168 | 0;
 i13 = i7 + 8 | 0;
 i14 = i7 + 4 | 0;
 i15 = i7;
 i16 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE(i4) | 0;
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc(i10, i4, i8, i9);
 HEAP32[i11 >> 2] = 0;
 HEAP32[i11 + 4 >> 2] = 0;
 HEAP32[i11 + 8 >> 2] = 0;
 i4 = 0;
 while (1) {
  if ((i4 | 0) == 3) break;
  HEAP32[i11 + (i4 << 2) >> 2] = 0;
  i4 = i4 + 1 | 0;
 }
 i4 = i11 + 11 | 0;
 i17 = i11 + 8 | 0;
 if ((HEAP8[i4 >> 0] | 0) < 0) i18 = (HEAP32[i17 >> 2] & 2147483647) + -1 | 0; else i18 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i18, 0);
 i18 = (HEAP8[i4 >> 0] | 0) < 0 ? HEAP32[i11 >> 2] | 0 : i11;
 HEAP32[i12 >> 2] = i18;
 HEAP32[i14 >> 2] = i13;
 HEAP32[i15 >> 2] = 0;
 i19 = i11 + 4 | 0;
 i20 = HEAP32[i2 >> 2] | 0;
 i21 = i18;
 i18 = i20;
 i22 = i20;
 L8 : while (1) {
  if (!i18) {
   i23 = 0;
   i24 = 0;
   i25 = 1;
  } else {
   i20 = HEAP32[i18 + 12 >> 2] | 0;
   if ((i20 | 0) == (HEAP32[i18 + 16 >> 2] | 0)) i26 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i18 >> 2] | 0) + 36 >> 2] & 127](i18) | 0; else i26 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i20 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i26, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i2 >> 2] = 0;
    i23 = 0;
    i24 = 0;
    i25 = 1;
   } else {
    i23 = i18;
    i24 = i22;
    i25 = 0;
   }
  }
  i20 = HEAP32[i3 >> 2] | 0;
  do if (!i20) i1 = 19; else {
   i27 = HEAP32[i20 + 12 >> 2] | 0;
   if ((i27 | 0) == (HEAP32[i20 + 16 >> 2] | 0)) i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i20 >> 2] | 0) + 36 >> 2] & 127](i20) | 0; else i28 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i27 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i28, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i3 >> 2] = 0;
    i1 = 19;
    break;
   } else if (i25) {
    i29 = i20;
    break;
   } else {
    i30 = i21;
    i31 = i20;
    break L8;
   }
  } while (0);
  if ((i1 | 0) == 19) {
   i1 = 0;
   if (i25) {
    i30 = i21;
    i31 = 0;
    break;
   } else i29 = 0;
  }
  i20 = HEAP8[i4 >> 0] | 0;
  i27 = i20 << 24 >> 24 < 0 ? HEAP32[i19 >> 2] | 0 : i20 & 255;
  if ((HEAP32[i12 >> 2] | 0) == (i21 + i27 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i27 << 1, 0);
   if ((HEAP8[i4 >> 0] | 0) < 0) i32 = (HEAP32[i17 >> 2] & 2147483647) + -1 | 0; else i32 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i11, i32, 0);
   i20 = (HEAP8[i4 >> 0] | 0) < 0 ? HEAP32[i11 >> 2] | 0 : i11;
   HEAP32[i12 >> 2] = i20 + i27;
   i33 = i20;
  } else i33 = i21;
  i20 = i23 + 12 | 0;
  i27 = HEAP32[i20 >> 2] | 0;
  i34 = i23 + 16 | 0;
  if ((i27 | 0) == (HEAP32[i34 >> 2] | 0)) i35 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 36 >> 2] & 127](i23) | 0; else i35 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i27 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_(i35 & 255, i16, i33, i12, i15, HEAP8[i9 >> 0] | 0, i10, i13, i14, i8) | 0) {
   i30 = i33;
   i31 = i29;
   break;
  }
  i27 = HEAP32[i20 >> 2] | 0;
  if ((i27 | 0) == (HEAP32[i34 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i23 >> 2] | 0) + 40 >> 2] & 127](i23) | 0;
   i21 = i33;
   i18 = i23;
   i22 = i24;
   continue;
  } else {
   HEAP32[i20 >> 2] = i27 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i27 >> 0] | 0) | 0;
   i21 = i33;
   i18 = i23;
   i22 = i24;
   continue;
  }
 }
 i22 = HEAP8[i10 + 11 >> 0] | 0;
 if ((i22 << 24 >> 24 < 0 ? HEAP32[i10 + 4 >> 2] | 0 : i22 & 255) | 0) {
  i22 = HEAP32[i14 >> 2] | 0;
  if ((i22 - i13 | 0) < 160) {
   i18 = HEAP32[i15 >> 2] | 0;
   HEAP32[i14 >> 2] = i22 + 4;
   HEAP32[i22 >> 2] = i18;
  }
 }
 i18 = __ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji(i30, HEAP32[i12 >> 2] | 0, i5, i16) | 0;
 HEAP32[i6 >> 2] = i18;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i10, i13, HEAP32[i14 >> 2] | 0, i5);
 if (!i23) i36 = 1; else {
  i14 = HEAP32[i23 + 12 >> 2] | 0;
  if ((i14 | 0) == (HEAP32[i23 + 16 >> 2] | 0)) i37 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i24 >> 2] | 0) + 36 >> 2] & 127](i23) | 0; else i37 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i14 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i37, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i2 >> 2] = 0;
   i36 = 1;
  } else i36 = 0;
 }
 do if (!i31) i1 = 47; else {
  i37 = HEAP32[i31 + 12 >> 2] | 0;
  if ((i37 | 0) == (HEAP32[i31 + 16 >> 2] | 0)) i38 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i31 >> 2] | 0) + 36 >> 2] & 127](i31) | 0; else i38 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i37 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i38, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i3 >> 2] = 0;
   i1 = 47;
   break;
  } else if (i36) break; else {
   i1 = 49;
   break;
  }
 } while (0);
 if ((i1 | 0) == 47) if (i36) i1 = 49;
 if ((i1 | 0) == 49) HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 2;
 i5 = HEAP32[i2 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i11);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i10);
 STACKTOP = i7;
 return i5 | 0;
}

function __ZN10ImDrawList19AddConvexPolyFilledEPK6ImVec2ij(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, f25 = f0, f26 = f0, f27 = f0, f28 = f0, f29 = f0, f30 = f0, f31 = f0, f32 = f0, i33 = 0;
 i5 = 0;
 i6 = STACKTOP;
 i7 = HEAP32[i1 + 40 >> 2] | 0;
 i8 = HEAP32[i7 >> 2] | 0;
 i9 = HEAP32[i7 + 4 >> 2] | 0;
 if (!(HEAP32[i1 + 36 >> 2] & 2)) {
  i7 = (i3 * 3 | 0) + -6 | 0;
  __ZN10ImDrawList11PrimReserveEii(i1, i7, i3);
  if ((i3 | 0) > 0) {
   i10 = i1 + 52 | 0;
   i11 = 0;
   i12 = HEAP32[i10 >> 2] | 0;
   do {
    i13 = i2 + (i11 << 3) | 0;
    i14 = HEAP32[i13 + 4 >> 2] | 0;
    i15 = i12;
    HEAP32[i15 >> 2] = HEAP32[i13 >> 2];
    HEAP32[i15 + 4 >> 2] = i14;
    i14 = (HEAP32[i10 >> 2] | 0) + 8 | 0;
    HEAP32[i14 >> 2] = i8;
    HEAP32[i14 + 4 >> 2] = i9;
    i14 = HEAP32[i10 >> 2] | 0;
    HEAP32[i14 + 16 >> 2] = i4;
    i12 = i14 + 20 | 0;
    HEAP32[i10 >> 2] = i12;
    i11 = i11 + 1 | 0;
   } while ((i11 | 0) != (i3 | 0));
   if ((i3 | 0) > 2) {
    i11 = i1 + 48 | 0;
    i12 = HEAP32[i11 >> 2] | 0;
    i10 = i12 & 65535;
    i14 = i1 + 56 | 0;
    i15 = HEAP32[i14 >> 2] | 0;
    i13 = 2;
    i16 = i15;
    while (1) {
     HEAP16[i16 >> 1] = i10;
     HEAP16[i16 + 2 >> 1] = i13 + 65535 + i12;
     HEAP16[i16 + 4 >> 1] = i12 + i13;
     i13 = i13 + 1 | 0;
     if ((i13 | 0) == (i3 | 0)) break; else i16 = i16 + 6 | 0;
    }
    HEAP32[i14 >> 2] = i15 + (i7 << 1);
    i17 = i11;
   } else i5 = 20;
  } else i5 = 20;
  if ((i5 | 0) == 20) i17 = i1 + 48 | 0;
  i18 = i17;
  i19 = i3 & 65535;
  i20 = HEAP32[i18 >> 2] | 0;
  i21 = i20 + i19 | 0;
  HEAP32[i18 >> 2] = i21;
  STACKTOP = i6;
  return;
 }
 i17 = i4 & 16777215;
 i5 = i3 << 1;
 __ZN10ImDrawList11PrimReserveEii(i1, (i3 * 9 | 0) + -6 | 0, i5);
 i11 = i1 + 48 | 0;
 i7 = HEAP32[i11 >> 2] | 0;
 i15 = i7 + 1 | 0;
 if ((i3 | 0) > 2) {
  i14 = i7 & 65535;
  i16 = i1 + 56 | 0;
  i13 = i7 + 65534 | 0;
  i12 = HEAP32[i16 >> 2] | 0;
  i10 = (i3 * 3 | 0) + -6 | 0;
  i22 = 2;
  i23 = i12;
  while (1) {
   HEAP16[i23 >> 1] = i14;
   i24 = i22 << 1;
   HEAP16[i23 + 2 >> 1] = i13 + i24;
   HEAP16[i23 + 4 >> 1] = i24 + i7;
   i22 = i22 + 1 | 0;
   if ((i22 | 0) == (i3 | 0)) break; else i23 = i23 + 6 | 0;
  }
  HEAP32[i16 >> 2] = i12 + (i10 << 1);
 }
 i10 = i3 << 3;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * i10 | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * i10 | 0) + 15 & -16 | 0);
 i10 = i3 + -1 | 0;
 i16 = (i3 | 0) > 0;
 if (i16) {
  i23 = i2 + (i10 << 3) | 0;
  f25 = Math_fround(HEAPF32[i23 >> 2]);
  i22 = i10;
  i13 = 0;
  f26 = f25;
  f25 = Math_fround(HEAPF32[i23 + 4 >> 2]);
  while (1) {
   f27 = f26;
   i23 = i2 + (i13 << 3) | 0;
   f26 = Math_fround(HEAPF32[i23 >> 2]);
   f28 = Math_fround(f26 - f27);
   f27 = f25;
   f25 = Math_fround(HEAPF32[i23 + 4 >> 2]);
   f29 = Math_fround(f25 - f27);
   f27 = Math_fround(Math_fround(f28 * f28) + Math_fround(f29 * f29));
   if (f27 > Math_fround(0.0)) f30 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(f27)))); else f30 = Math_fround(1.0);
   f27 = Math_fround(f28 * f30);
   f28 = Math_fround(f29 * f30);
   i23 = i12 + (i22 << 3) | 0;
   HEAPF32[i23 >> 2] = f28;
   f28 = Math_fround(-f27);
   HEAPF32[i23 + 4 >> 2] = f28;
   i23 = i13 + 1 | 0;
   if ((i23 | 0) == (i3 | 0)) break; else {
    i14 = i13;
    i13 = i23;
    i22 = i14;
   }
  }
  if (i16) {
   i16 = i1 + 52 | 0;
   i22 = i1 + 56 | 0;
   i1 = i12 + (i10 << 3) | 0;
   f30 = Math_fround(HEAPF32[i1 >> 2]);
   i13 = i10;
   i10 = 0;
   f25 = f30;
   f30 = Math_fround(HEAPF32[i1 + 4 >> 2]);
   while (1) {
    f26 = f25;
    i1 = i12 + (i10 << 3) | 0;
    f25 = Math_fround(HEAPF32[i1 >> 2]);
    f28 = Math_fround(f26 + f25);
    f26 = f30;
    f30 = Math_fround(HEAPF32[i1 + 4 >> 2]);
    f27 = Math_fround(f28 * Math_fround(.5));
    f28 = Math_fround(Math_fround(f26 + f30) * Math_fround(.5));
    f26 = Math_fround(Math_fround(f27 * f27) + Math_fround(f28 * f28));
    if (f26 > Math_fround(9.99999997e-07)) {
     f29 = Math_fround(Math_fround(1.0) / f26);
     i1 = f29 > Math_fround(100.0);
     f26 = i1 ? Math_fround(100.0) : f29;
     f31 = Math_fround(f27 * f26);
     f32 = Math_fround(f28 * f26);
    } else {
     f31 = f27;
     f32 = f28;
    }
    f28 = Math_fround(f31 * Math_fround(.5));
    f27 = Math_fround(f32 * Math_fround(.5));
    i1 = i2 + (i10 << 3) | 0;
    i14 = i1 | 0;
    f26 = Math_fround(Math_fround(HEAPF32[i14 >> 2]) - f28);
    i23 = i1 + 4 | 0;
    f29 = Math_fround(Math_fround(HEAPF32[i23 >> 2]) - f27);
    i1 = HEAP32[i16 >> 2] | 0;
    HEAPF32[i1 >> 2] = f26;
    HEAPF32[i1 + 4 >> 2] = f29;
    i1 = (HEAP32[i16 >> 2] | 0) + 8 | 0;
    HEAP32[i1 >> 2] = i8;
    HEAP32[i1 + 4 >> 2] = i9;
    i1 = HEAP32[i16 >> 2] | 0;
    HEAP32[i1 + 16 >> 2] = i4;
    f29 = Math_fround(f28 + Math_fround(HEAPF32[i14 >> 2]));
    f28 = Math_fround(f27 + Math_fround(HEAPF32[i23 >> 2]));
    HEAPF32[i1 + 20 >> 2] = f29;
    HEAPF32[i1 + 24 >> 2] = f28;
    i1 = (HEAP32[i16 >> 2] | 0) + 28 | 0;
    HEAP32[i1 >> 2] = i8;
    HEAP32[i1 + 4 >> 2] = i9;
    i1 = HEAP32[i16 >> 2] | 0;
    HEAP32[i1 + 36 >> 2] = i17;
    HEAP32[i16 >> 2] = i1 + 40;
    i1 = i10 << 1;
    i23 = i1 + i7 & 65535;
    i14 = HEAP32[i22 >> 2] | 0;
    HEAP16[i14 >> 1] = i23;
    i24 = i13 << 1;
    HEAP16[i14 + 2 >> 1] = i24 + i7;
    i33 = i24 + i15 & 65535;
    HEAP16[i14 + 4 >> 1] = i33;
    HEAP16[i14 + 6 >> 1] = i33;
    HEAP16[i14 + 8 >> 1] = i1 + i15;
    HEAP16[i14 + 10 >> 1] = i23;
    HEAP32[i22 >> 2] = i14 + 12;
    i14 = i10 + 1 | 0;
    if ((i14 | 0) == (i3 | 0)) break; else {
     i23 = i10;
     i10 = i14;
     i13 = i23;
    }
   }
  }
 }
 i18 = i11;
 i19 = i5 & 65534;
 i20 = HEAP32[i18 >> 2] | 0;
 i21 = i20 + i19 | 0;
 HEAP32[i18 >> 2] = i21;
 STACKTOP = i6;
 return;
}

function __ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i(i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i12 = i12 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 i15 = i15 | 0;
 var i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0;
 HEAP32[i3 >> 2] = i1;
 i16 = i14 + 11 | 0;
 i17 = i14 + 4 | 0;
 i18 = i13 + 11 | 0;
 i19 = i13 + 4 | 0;
 i20 = (i4 & 512 | 0) == 0;
 i21 = i7 + 8 | 0;
 i22 = (i15 | 0) > 0;
 i23 = i12 + 11 | 0;
 i24 = i12 + 4 | 0;
 i25 = 0;
 i26 = i5;
 while (1) {
  if ((i25 | 0) == 4) break;
  L4 : do switch (HEAP8[i9 + i25 >> 0] | 0) {
  case 0:
   {
    HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
    i27 = i26;
    break;
   }
  case 1:
   {
    HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
    i5 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i7 >> 2] | 0) + 28 >> 2] & 31](i7, 32) | 0;
    i28 = HEAP32[i3 >> 2] | 0;
    HEAP32[i3 >> 2] = i28 + 1;
    HEAP8[i28 >> 0] = i5;
    i27 = i26;
    break;
   }
  case 3:
   {
    i5 = HEAP8[i16 >> 0] | 0;
    i28 = i5 << 24 >> 24 < 0;
    if (!((i28 ? HEAP32[i17 >> 2] | 0 : i5 & 255) | 0)) i27 = i26; else {
     i5 = HEAP8[(i28 ? HEAP32[i14 >> 2] | 0 : i14) >> 0] | 0;
     i28 = HEAP32[i3 >> 2] | 0;
     HEAP32[i3 >> 2] = i28 + 1;
     HEAP8[i28 >> 0] = i5;
     i27 = i26;
    }
    break;
   }
  case 2:
   {
    i5 = HEAP8[i18 >> 0] | 0;
    i28 = i5 << 24 >> 24 < 0;
    i29 = i28 ? HEAP32[i19 >> 2] | 0 : i5 & 255;
    if (i20 | (i29 | 0) == 0) i27 = i26; else {
     i5 = i28 ? HEAP32[i13 >> 2] | 0 : i13;
     i28 = i5 + i29 | 0;
     i29 = HEAP32[i3 >> 2] | 0;
     i30 = i5;
     while (1) {
      if ((i30 | 0) == (i28 | 0)) break;
      HEAP8[i29 >> 0] = HEAP8[i30 >> 0] | 0;
      i29 = i29 + 1 | 0;
      i30 = i30 + 1 | 0;
     }
     HEAP32[i3 >> 2] = i29;
     i27 = i26;
    }
    break;
   }
  case 4:
   {
    i30 = HEAP32[i3 >> 2] | 0;
    i28 = i8 ? i26 + 1 | 0 : i26;
    i5 = i28;
    while (1) {
     if (i5 >>> 0 >= i6 >>> 0) break;
     i31 = HEAP8[i5 >> 0] | 0;
     if (i31 << 24 >> 24 <= -1) break;
     if (!(HEAP16[(HEAP32[i21 >> 2] | 0) + (i31 << 24 >> 24 << 1) >> 1] & 2048)) break;
     i5 = i5 + 1 | 0;
    }
    if (i22) {
     i29 = i15;
     i31 = i5;
     while (1) {
      i32 = (i29 | 0) > 0;
      if (!(i31 >>> 0 > i28 >>> 0 & i32)) break;
      i33 = i31 + -1 | 0;
      i34 = HEAP8[i33 >> 0] | 0;
      i35 = HEAP32[i3 >> 2] | 0;
      HEAP32[i3 >> 2] = i35 + 1;
      HEAP8[i35 >> 0] = i34;
      i29 = i29 + -1 | 0;
      i31 = i33;
     }
     if (i32) i36 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i7 >> 2] | 0) + 28 >> 2] & 31](i7, 48) | 0; else i36 = 0;
     i33 = i29;
     while (1) {
      i37 = HEAP32[i3 >> 2] | 0;
      HEAP32[i3 >> 2] = i37 + 1;
      if ((i33 | 0) <= 0) break;
      HEAP8[i37 >> 0] = i36;
      i33 = i33 + -1 | 0;
     }
     HEAP8[i37 >> 0] = i10;
     i38 = i31;
    } else i38 = i5;
    L35 : do if ((i38 | 0) == (i28 | 0)) {
     i33 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i7 >> 2] | 0) + 28 >> 2] & 31](i7, 48) | 0;
     i29 = HEAP32[i3 >> 2] | 0;
     HEAP32[i3 >> 2] = i29 + 1;
     HEAP8[i29 >> 0] = i33;
    } else {
     i33 = HEAP8[i23 >> 0] | 0;
     i29 = i33 << 24 >> 24 < 0;
     if (!((i29 ? HEAP32[i24 >> 2] | 0 : i33 & 255) | 0)) {
      i39 = -1;
      i40 = 0;
      i41 = 0;
      i42 = i38;
     } else {
      i39 = HEAP8[(i29 ? HEAP32[i12 >> 2] | 0 : i12) >> 0] | 0;
      i40 = 0;
      i41 = 0;
      i42 = i38;
     }
     while (1) {
      if ((i42 | 0) == (i28 | 0)) break L35;
      if ((i41 | 0) == (i39 | 0)) {
       i29 = HEAP32[i3 >> 2] | 0;
       HEAP32[i3 >> 2] = i29 + 1;
       HEAP8[i29 >> 0] = i11;
       i29 = i40 + 1 | 0;
       i33 = HEAP8[i23 >> 0] | 0;
       i34 = i33 << 24 >> 24 < 0;
       if (i29 >>> 0 < (i34 ? HEAP32[i24 >> 2] | 0 : i33 & 255) >>> 0) {
        i33 = HEAP8[(i34 ? HEAP32[i12 >> 2] | 0 : i12) + i29 >> 0] | 0;
        i34 = i33 << 24 >> 24 | 0;
        i43 = (i34 | 0) == 127 ? -1 : i34 | 0;
        i44 = i29;
        i45 = 0;
       } else {
        i43 = i41;
        i44 = i29;
        i45 = 0;
       }
      } else {
       i43 = i39;
       i44 = i40;
       i45 = i41;
      }
      i29 = i42 + -1 | 0;
      i34 = HEAP8[i29 >> 0] | 0;
      i33 = HEAP32[i3 >> 2] | 0;
      HEAP32[i3 >> 2] = i33 + 1;
      HEAP8[i33 >> 0] = i34;
      i39 = i43;
      i40 = i44;
      i41 = i45 + 1 | 0;
      i42 = i29;
     }
    } while (0);
    i5 = HEAP32[i3 >> 2] | 0;
    if ((i30 | 0) == (i5 | 0)) i27 = i28; else {
     i31 = i5;
     i5 = i30;
     while (1) {
      i29 = i31 + -1 | 0;
      if (i5 >>> 0 >= i29 >>> 0) {
       i27 = i28;
       break L4;
      }
      i34 = HEAP8[i5 >> 0] | 0;
      HEAP8[i5 >> 0] = HEAP8[i29 >> 0] | 0;
      HEAP8[i29 >> 0] = i34;
      i31 = i29;
      i5 = i5 + 1 | 0;
     }
    }
    break;
   }
  default:
   i27 = i26;
  } while (0);
  i25 = i25 + 1 | 0;
  i26 = i27;
 }
 i27 = HEAP8[i16 >> 0] | 0;
 i16 = i27 << 24 >> 24 < 0;
 i26 = i16 ? HEAP32[i17 >> 2] | 0 : i27 & 255;
 if (i26 >>> 0 > 1) {
  i27 = i16 ? HEAP32[i14 >> 2] | 0 : i14;
  i14 = i27 + i26 | 0;
  i26 = HEAP32[i3 >> 2] | 0;
  i16 = i27;
  while (1) {
   i27 = i16 + 1 | 0;
   if ((i27 | 0) == (i14 | 0)) break;
   HEAP8[i26 >> 0] = HEAP8[i27 >> 0] | 0;
   i26 = i26 + 1 | 0;
   i16 = i27;
  }
  HEAP32[i3 >> 2] = i26;
 }
 switch ((i4 & 176) << 24 >> 24) {
 case 32:
  {
   HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
   break;
  }
 case 16:
  break;
 default:
  HEAP32[i2 >> 2] = i1;
 }
 return;
}

function __ZN5ImGui7ItemAddERK6ImRectjPS1_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, f17 = f0, f18 = f0, f19 = f0, i20 = 0, f21 = f0, f22 = f0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, f27 = f0, f28 = f0, f29 = f0, f30 = f0, i31 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i5;
 i7 = HEAP32[1460598] | 0;
 i8 = HEAP32[i7 + 6392 >> 2] | 0;
 i9 = (i2 | 0) == 0;
 do if (!i9) {
  i10 = i8 + 312 | 0;
  HEAP32[i10 >> 2] = HEAP32[i10 >> 2] | HEAP32[i8 + 304 >> 2];
  i10 = i7 + 6648 | 0;
  i11 = (HEAP32[i10 >> 2] | 0) == (i2 | 0);
  if (!i11) if (!(HEAP8[i7 + 6732 >> 0] | 0)) break;
  i12 = i7 + 6644 | 0;
  i13 = HEAP32[i12 >> 2] | 0;
  if ((HEAP32[i13 + 768 >> 2] | 0) == (HEAP32[i8 + 768 >> 2] | 0)) {
   i14 = (i8 | 0) == (i13 | 0);
   if (!i14) if (!((HEAP32[i13 + 8 >> 2] | HEAP32[i8 + 8 >> 2]) & 8388608)) break;
   i15 = i3 | 0 ? i3 : i1;
   i16 = HEAP32[i8 + 352 >> 2] | 0;
   f17 = Math_fround(HEAPF32[i15 >> 2]);
   f18 = Math_fround(HEAPF32[i8 + 12 >> 2]);
   f19 = Math_fround(f17 - f18);
   i20 = i15 + 4 | 0;
   f17 = Math_fround(HEAPF32[i20 >> 2]);
   f21 = Math_fround(HEAPF32[i8 + 16 >> 2]);
   f22 = Math_fround(f17 - f21);
   i23 = i15 + 8 | 0;
   f17 = Math_fround(Math_fround(HEAPF32[i23 >> 2]) - f18);
   i24 = i15 + 12 | 0;
   f18 = Math_fround(Math_fround(HEAPF32[i24 >> 2]) - f21);
   i25 = i7 + 6733 | 0;
   do if (HEAP8[i25 >> 0] | 0) if ((HEAP32[i7 + 6720 >> 2] | 0) == (HEAP32[i8 + 300 >> 2] | 0)) {
    i26 = i7 + 6736 | 0;
    if (i16 & 16 | 0) {
     if (HEAP32[i26 >> 2] | 0) break;
     HEAP32[i26 >> 2] = i2;
     HEAPF32[i7 + 6740 >> 2] = f19;
     HEAPF32[i7 + 6744 >> 2] = f22;
     HEAPF32[i7 + 6748 >> 2] = f17;
     HEAPF32[i7 + 6752 >> 2] = f18;
     break;
    }
    HEAP32[i26 >> 2] = i2;
    HEAPF32[i7 + 6740 >> 2] = f19;
    HEAPF32[i7 + 6744 >> 2] = f22;
    HEAPF32[i7 + 6748 >> 2] = f17;
    HEAPF32[i7 + 6752 >> 2] = f18;
    HEAP8[i25 >> 0] = 0;
    i26 = i7 + 6732 | 0;
    if (!(HEAP8[i7 + 6757 >> 0] | 0)) {
     HEAP8[i26 >> 0] = 0;
     break;
    }
    HEAP8[i26 >> 0] = 1;
    if (!i13) ___assert_fail(34237, 31803, 2509, 34255);
   } while (0);
   if (i11) {
    if ((i16 & 8 | 0) == 0 ? (HEAP32[i7 + 6760 >> 2] & 16 | 0) != 0 : 0) i4 = 19;
   } else if (!(i16 & 8)) i4 = 19;
   if ((i4 | 0) == 19) {
    i13 = i14 ? i7 + 6780 | 0 : i7 + 6852 | 0;
    if (HEAP8[i7 + 6757 >> 0] | 0) {
     HEAP32[i6 >> 2] = HEAP32[i15 >> 2];
     HEAP32[i6 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
     HEAP32[i6 + 8 >> 2] = HEAP32[i15 + 8 >> 2];
     HEAP32[i6 + 12 >> 2] = HEAP32[i15 + 12 >> 2];
     if (__ZL12NavScoreItemP18ImGuiNavMoveResult6ImRect(i13, i6) | 0) {
      HEAP32[i13 >> 2] = i2;
      HEAP32[i13 + 4 >> 2] = i8;
      HEAPF32[i13 + 20 >> 2] = f19;
      HEAPF32[i13 + 24 >> 2] = f22;
      HEAPF32[i13 + 28 >> 2] = f17;
      HEAPF32[i13 + 32 >> 2] = f18;
     }
    }
    if (HEAP32[i7 + 6760 >> 2] & 32 | 0) {
     f21 = Math_fround(HEAPF32[i20 >> 2]);
     f27 = Math_fround(HEAPF32[i8 + 476 >> 2]);
     if (f21 < f27) {
      f28 = Math_fround(HEAPF32[i24 >> 2]);
      f29 = Math_fround(HEAPF32[i8 + 468 >> 2]);
      if (f28 > f29) {
       f30 = Math_fround(HEAPF32[i15 >> 2]);
       if (f30 < Math_fround(HEAPF32[i8 + 472 >> 2])) {
        f30 = Math_fround(HEAPF32[i23 >> 2]);
        if (f30 > Math_fround(HEAPF32[i8 + 464 >> 2])) if (Math_fround((f28 < f29 ? f29 : f28 > f27 ? f27 : f28) - (f21 < f29 ? f29 : f21 > f27 ? f27 : f21)) >= Math_fround(Math_fround(f28 - f21) * Math_fround(.699999988))) {
         i13 = i7 + 6816 | 0;
         HEAP32[i6 >> 2] = HEAP32[i15 >> 2];
         HEAP32[i6 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
         HEAP32[i6 + 8 >> 2] = HEAP32[i15 + 8 >> 2];
         HEAP32[i6 + 12 >> 2] = HEAP32[i15 + 12 >> 2];
         if (__ZL12NavScoreItemP18ImGuiNavMoveResult6ImRect(i13, i6) | 0) {
          HEAP32[i13 >> 2] = i2;
          HEAP32[i7 + 6820 >> 2] = i8;
          HEAPF32[i7 + 6836 >> 2] = f19;
          HEAPF32[i7 + 6840 >> 2] = f22;
          HEAPF32[i7 + 6844 >> 2] = f17;
          HEAPF32[i7 + 6848 >> 2] = f18;
         }
        }
       }
      }
     }
    }
   }
   if ((HEAP32[i10 >> 2] | 0) == (i2 | 0)) {
    HEAP32[i12 >> 2] = i8;
    i13 = HEAP32[i8 + 300 >> 2] | 0;
    HEAP32[i7 + 6720 >> 2] = i13;
    HEAP8[i7 + 6728 >> 0] = 1;
    HEAP32[i7 + 6724 >> 2] = HEAP32[i8 + 820 >> 2];
    i25 = i8 + 784 + (i13 << 4) | 0;
    HEAPF32[i25 >> 2] = f19;
    HEAPF32[i25 + 4 >> 2] = f22;
    HEAPF32[i25 + 8 >> 2] = f17;
    HEAPF32[i25 + 12 >> 2] = f18;
   }
  }
 } while (0);
 HEAP32[i8 + 256 >> 2] = i2;
 i7 = i8 + 264 | 0;
 HEAP32[i7 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAP32[i7 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
 i7 = i8 + 260 | 0;
 HEAP32[i7 >> 2] = 0;
 i8 = HEAP32[1460598] | 0;
 i6 = HEAP32[i8 + 6392 >> 2] | 0;
 f21 = Math_fround(HEAPF32[i6 + 468 >> 2]);
 if (f21 < Math_fround(HEAPF32[i1 + 12 >> 2])) {
  f21 = Math_fround(HEAPF32[i6 + 476 >> 2]);
  if (f21 > Math_fround(HEAPF32[i1 + 4 >> 2])) {
   f21 = Math_fround(HEAPF32[i6 + 464 >> 2]);
   if (f21 < Math_fround(HEAPF32[i1 + 8 >> 2])) {
    f21 = Math_fround(HEAPF32[i6 + 472 >> 2]);
    if (!(f21 > Math_fround(HEAPF32[i1 >> 2]))) i4 = 36;
   } else i4 = 36;
  } else i4 = 36;
 } else i4 = 36;
 do if ((i4 | 0) == 36) {
  if (!i9) if ((HEAP32[i8 + 6420 >> 2] | 0) == (i2 | 0)) break;
  if (!(HEAP8[i8 + 11092 >> 0] | 0)) {
   i31 = 0;
   STACKTOP = i5;
   return i31 | 0;
  }
 } while (0);
 if (!(__ZN5ImGui19IsMouseHoveringRectERK6ImVec2S2_b(i1, i1 + 8 | 0, 1) | 0)) {
  i31 = 1;
  STACKTOP = i5;
  return i31 | 0;
 }
 HEAP32[i7 >> 2] = 1;
 i31 = 1;
 STACKTOP = i5;
 return i31 | 0;
}

function _png_handle_iCCP(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 1248 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1248);
 i6 = i5 + 4 | 0;
 i7 = i5 + 1164 | 0;
 i8 = i5 + 1032 | 0;
 i9 = i5 + 8 | 0;
 i10 = i5;
 HEAP32[i6 >> 2] = i3;
 i11 = HEAP32[i1 + 208 >> 2] | 0;
 if (!(i11 & 1)) _png_chunk_error(i1, 60665);
 if (i11 & 6 | 0) {
  _png_crc_finish(i1, i3) | 0;
  _png_chunk_benign_error(i1, 61181);
  STACKTOP = i5;
  return;
 }
 if (i3 >>> 0 < 9) {
  _png_crc_finish(i1, i3) | 0;
  _png_chunk_benign_error(i1, 62495);
  STACKTOP = i5;
  return;
 }
 i11 = i1 + 824 | 0;
 i12 = i1 + 898 | 0;
 i13 = HEAPU16[i12 >> 1] | 0;
 if (i13 & 32768 | 0) {
  _png_crc_finish(i1, i3) | 0;
  STACKTOP = i5;
  return;
 }
 L16 : do if (!(i13 & 4)) {
  i14 = i3 >>> 0 < 81 ? i3 : 81;
  _png_read_data(i1, i7, i14);
  _png_calculate_crc(i1, i7, i14);
  i15 = i3 - i14 | 0;
  HEAP32[i6 >> 2] = i15;
  do if (!i14) i16 = 60747; else {
   i17 = 0;
   while (1) {
    if (!(HEAP8[i7 + i17 >> 0] | 0)) {
     i18 = i17;
     break;
    }
    i19 = i17 + 1 | 0;
    if (i19 >>> 0 < 80 & i19 >>> 0 < i14 >>> 0) i17 = i19; else {
     i18 = i19;
     break;
    }
   }
   if ((i18 + -1 | 0) >>> 0 < 79) {
    i17 = i18 + 1 | 0;
    if (i17 >>> 0 < i14 >>> 0) if (!(HEAP8[i7 + i17 >> 0] | 0)) {
     i19 = i18 + 2 | 0;
     if (_png_inflate_claim(i1, 1766015824) | 0) {
      i16 = HEAP32[i1 + 248 >> 2] | 0;
      break;
     }
     HEAP32[i10 >> 2] = 132;
     HEAP32[i1 + 224 >> 2] = i7 + i19;
     HEAP32[i1 + 228 >> 2] = i14 - i19;
     _png_inflate_read(i1, i9, i6, i8, i10, 0);
     do if (!(HEAP32[i10 >> 2] | 0)) {
      i19 = HEAPU8[i8 + 1 >> 0] << 16 | HEAPU8[i8 >> 0] << 24 | HEAPU8[i8 + 2 >> 0] << 8 | HEAPU8[i8 + 3 >> 0];
      if (!(_png_icc_check_length(i1, i11, i7, i19) | 0)) {
       i20 = 1;
       i21 = 0;
       i22 = 0;
      } else if (!(_png_icc_check_header(i1, i11, i7, i19, i8, HEAPU8[i1 + 435 >> 0] | 0) | 0)) {
       i20 = 1;
       i21 = 0;
       i22 = 0;
      } else {
       i23 = HEAP8[i8 + 128 >> 0] | 0;
       i24 = HEAP8[i8 + 129 >> 0] | 0;
       i25 = HEAP8[i8 + 130 >> 0] | 0;
       i26 = HEAP8[i8 + 131 >> 0] | 0;
       i27 = i1 + 788 | 0;
       i28 = HEAP32[i27 >> 2] | 0;
       if (!i28) i4 = 23; else {
        i29 = i1 + 792 | 0;
        if ((HEAP32[i29 >> 2] | 0) >>> 0 < i19 >>> 0) {
         HEAP32[i27 >> 2] = 0;
         HEAP32[i29 >> 2] = 0;
         _png_free(i1, i28);
         i4 = 23;
        } else i30 = i28;
       }
       if ((i4 | 0) == 23) {
        i28 = _png_malloc_base(i1, i19) | 0;
        if (!i28) {
         i20 = 1;
         i21 = 0;
         i22 = 60712;
         break;
        }
        HEAP32[i27 >> 2] = i28;
        HEAP32[i1 + 792 >> 2] = i19;
        i30 = i28;
       }
       _memcpy(i30 | 0, i8 | 0, 132) | 0;
       i28 = ((i24 & 255) << 16 | (i23 & 255) << 24 | (i25 & 255) << 8 | i26 & 255) * 12 | 0;
       HEAP32[i10 >> 2] = i28;
       i26 = i30 + 132 | 0;
       _png_inflate_read(i1, i9, i6, i26, i10, 0);
       if (HEAP32[i10 >> 2] | 0) {
        i20 = 1;
        i21 = 0;
        i22 = HEAP32[i1 + 248 >> 2] | 0;
        break;
       }
       if (!(_png_icc_check_tag_table(i1, i11, i7, i19, i30) | 0)) {
        i20 = 1;
        i21 = 0;
        i22 = 0;
       } else {
        HEAP32[i10 >> 2] = i19 + -132 - i28;
        _png_inflate_read(i1, i9, i6, i26 + i28 | 0, i10, 1);
        i28 = HEAP32[i6 >> 2] | 0;
        i26 = (i28 | 0) == 0;
        if (!i26) if (!(HEAP32[i1 + 212 >> 2] & 1048576)) {
         i20 = 1;
         i21 = 0;
         i22 = 60874;
         break;
        }
        if (HEAP32[i10 >> 2] | 0) {
         i20 = 1;
         i21 = 0;
         i22 = 60944;
         break;
        }
        if (!i26) _png_chunk_warning(i1, 60874);
        _png_crc_finish(i1, i28) | 0;
        _png_icc_set_sRGB(i1, i11, i30, HEAP32[i1 + 272 >> 2] | 0);
        if (!i2) {
         i20 = 0;
         i21 = 1;
         i22 = 0;
         break;
        }
        _png_free_data(i1, i2, 16, 0);
        i28 = _png_malloc_base(i1, i17) | 0;
        HEAP32[i2 + 116 >> 2] = i28;
        if (!i28) {
         HEAP16[i12 >> 1] = HEAP16[i12 >> 1] | -32768;
         _png_colorspace_sync(i1, i2);
         i20 = 1;
         i21 = 1;
         i22 = 60712;
         break;
        } else {
         _memcpy(i28 | 0, i7 | 0, i17 | 0) | 0;
         HEAP32[i2 + 124 >> 2] = i19;
         HEAP32[i2 + 120 >> 2] = i30;
         HEAP32[i27 >> 2] = 0;
         i27 = i2 + 232 | 0;
         HEAP32[i27 >> 2] = HEAP32[i27 >> 2] | 16;
         i27 = i2 + 8 | 0;
         HEAP32[i27 >> 2] = HEAP32[i27 >> 2] | 4096;
         _png_colorspace_sync(i1, i2);
         i20 = 0;
         i21 = 1;
         i22 = 0;
         break;
        }
       }
      }
     } else {
      i20 = 1;
      i21 = 0;
      i22 = HEAP32[i1 + 248 >> 2] | 0;
     } while (0);
     HEAP32[i1 + 220 >> 2] = 0;
     if (!i20) {
      STACKTOP = i5;
      return;
     }
     if (i21 | 0) {
      i31 = i22;
      break L16;
     }
     i32 = i22;
     i33 = HEAP32[i6 >> 2] | 0;
     i4 = 43;
     break L16;
    } else i16 = 61580; else i16 = 61580;
   } else i16 = 60747;
  } while (0);
  i32 = i16;
  i33 = i15;
  i4 = 43;
 } else {
  i32 = 61603;
  i33 = i3;
  i4 = 43;
 } while (0);
 if ((i4 | 0) == 43) {
  _png_crc_finish(i1, i33) | 0;
  i31 = i32;
 }
 HEAP16[i12 >> 1] = HEAP16[i12 >> 1] | -32768;
 _png_colorspace_sync(i1, i2);
 if (!i31) {
  STACKTOP = i5;
  return;
 }
 _png_chunk_benign_error(i1, i31);
 STACKTOP = i5;
 return;
}

function _png_read_row(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i5;
 if (!i1) {
  STACKTOP = i5;
  return;
 }
 if (!(HEAP32[i1 + 212 >> 2] & 64)) _png_read_start_row(i1);
 i7 = HEAP32[i1 + 368 >> 2] | 0;
 HEAP32[i6 >> 2] = i7;
 i8 = i6 + 8 | 0;
 HEAP8[i8 >> 0] = HEAP8[i1 + 435 >> 0] | 0;
 i9 = i6 + 9 | 0;
 HEAP8[i9 >> 0] = HEAP8[i1 + 436 >> 0] | 0;
 HEAP8[i6 + 10 >> 0] = HEAP8[i1 + 439 >> 0] | 0;
 i10 = HEAP8[i1 + 438 >> 0] | 0;
 i11 = i6 + 11 | 0;
 HEAP8[i11 >> 0] = i10;
 i12 = i10 & 255;
 if ((i10 & 255) > 7) i13 = Math_imul(i7, i12 >>> 3) | 0; else i13 = ((Math_imul(i7, i12) | 0) + 7 | 0) >>> 3;
 i12 = i6 + 4 | 0;
 HEAP32[i12 >> 2] = i13;
 i7 = i1 + 372 | 0;
 i10 = HEAP32[i7 >> 2] | 0;
 i14 = i1 + 432 | 0;
 L11 : do if (HEAP8[i14 >> 0] | 0) if (HEAP32[i1 + 216 >> 2] & 2 | 0) switch (HEAP8[i1 + 433 >> 0] | 0) {
 case 0:
  {
   if (!(i10 & 7)) break L11;
   if (i3 | 0) _png_combine_row(i1, i3, 1);
   _png_read_finish_row(i1);
   STACKTOP = i5;
   return;
  }
 case 1:
  {
   if (!(i10 & 7)) if ((HEAP32[i1 + 348 >> 2] | 0) >>> 0 >= 5) break L11;
   if (i3 | 0) _png_combine_row(i1, i3, 1);
   _png_read_finish_row(i1);
   STACKTOP = i5;
   return;
  }
 case 2:
  {
   if ((i10 & 7 | 0) == 4) break L11;
   if (!((i3 | 0) == 0 | (i10 & 4 | 0) == 0)) _png_combine_row(i1, i3, 1);
   _png_read_finish_row(i1);
   STACKTOP = i5;
   return;
  }
 case 3:
  {
   if (!(i10 & 3)) if ((HEAP32[i1 + 348 >> 2] | 0) >>> 0 >= 3) break L11;
   if (i3 | 0) _png_combine_row(i1, i3, 1);
   _png_read_finish_row(i1);
   STACKTOP = i5;
   return;
  }
 case 4:
  {
   if ((i10 & 3 | 0) == 2) break L11;
   if (!((i3 | 0) == 0 | (i10 & 2 | 0) == 0)) _png_combine_row(i1, i3, 1);
   _png_read_finish_row(i1);
   STACKTOP = i5;
   return;
  }
 case 5:
  {
   if (!(i10 & 1)) if ((HEAP32[i1 + 348 >> 2] | 0) >>> 0 >= 2) break L11;
   if (i3 | 0) _png_combine_row(i1, i3, 1);
   _png_read_finish_row(i1);
   STACKTOP = i5;
   return;
  }
 default:
  {
   if (i10 & 1 | 0) break L11;
   _png_read_finish_row(i1);
   STACKTOP = i5;
   return;
  }
 } while (0);
 if (!(HEAP32[i1 + 208 >> 2] & 4)) _png_error(i1, 64497);
 i10 = i1 + 384 | 0;
 _png_read_IDAT_data(i1, HEAP32[i10 >> 2] | 0, i13 + 1 | 0);
 i15 = HEAP32[i10 >> 2] | 0;
 i16 = HEAP8[i15 >> 0] | 0;
 i17 = i16 & 255;
 do if (!(i16 << 24 >> 24)) {
  i18 = i1 + 380 | 0;
  i19 = i13;
  i20 = i15;
 } else if ((i16 & 255) < 5) {
  i21 = i1 + 380 | 0;
  _png_read_filter_row(i1, i6, i15 + 1 | 0, (HEAP32[i21 >> 2] | 0) + 1 | 0, i17);
  i18 = i21;
  i19 = HEAP32[i12 >> 2] | 0;
  i20 = HEAP32[i10 >> 2] | 0;
  break;
 } else _png_error(i1, 64530); while (0);
 _memcpy(HEAP32[i18 >> 2] | 0, i20 | 0, i19 + 1 | 0) | 0;
 L71 : do if (HEAP32[i1 + 708 >> 2] & 4 | 0) if ((HEAP8[i1 + 712 >> 0] | 0) == 64) {
  i19 = (HEAP32[i10 >> 2] | 0) + 1 | 0;
  i20 = HEAP32[i6 >> 2] | 0;
  i18 = HEAP8[i8 >> 0] | 0;
  if (i18 & 2) switch (HEAP8[i9 >> 0] | 0) {
  case 8:
   {
    switch (i18 << 24 >> 24) {
    case 2:
     {
      i22 = 3;
      break;
     }
    case 6:
     {
      i22 = 4;
      break;
     }
    default:
     break L71;
    }
    if (!i20) break L71; else {
     i23 = i19;
     i24 = 0;
    }
    while (1) {
     i12 = HEAPU8[i23 + 1 >> 0] | 0;
     HEAP8[i23 >> 0] = i12 + (HEAPU8[i23 >> 0] | 0);
     i17 = i23 + 2 | 0;
     HEAP8[i17 >> 0] = (HEAPU8[i17 >> 0] | 0) + i12;
     i24 = i24 + 1 | 0;
     if ((i24 | 0) == (i20 | 0)) break; else i23 = i23 + i22 | 0;
    }
    break;
   }
  case 16:
   {
    switch (i18 << 24 >> 24) {
    case 2:
     {
      i25 = 6;
      break;
     }
    case 6:
     {
      i25 = 8;
      break;
     }
    default:
     break L71;
    }
    if (!i20) break L71; else {
     i26 = i19;
     i27 = 0;
    }
    while (1) {
     i12 = i26 + 1 | 0;
     i17 = HEAPU8[i26 + 2 >> 0] << 8 | HEAPU8[i26 + 3 >> 0];
     i15 = i26 + 4 | 0;
     i16 = i26 + 5 | 0;
     i13 = i17 + (HEAPU8[i26 >> 0] << 8 | HEAPU8[i12 >> 0]) | 0;
     i21 = (HEAPU8[i15 >> 0] << 8 | HEAPU8[i16 >> 0]) + i17 | 0;
     HEAP8[i26 >> 0] = i13 >>> 8;
     HEAP8[i12 >> 0] = i13;
     HEAP8[i15 >> 0] = i21 >>> 8;
     HEAP8[i16 >> 0] = i21;
     i27 = i27 + 1 | 0;
     if ((i27 | 0) == (i20 | 0)) break; else i26 = i26 + i25 | 0;
    }
    break;
   }
  default:
   break L71;
  }
 } while (0);
 i25 = i1 + 216 | 0;
 if (HEAP32[i25 >> 2] | 0) _png_do_read_transformations(i1, i6);
 i26 = i1 + 443 | 0;
 i27 = HEAP8[i26 >> 0] | 0;
 i22 = HEAP8[i11 >> 0] | 0;
 if (!(i27 << 24 >> 24)) {
  HEAP8[i26 >> 0] = i22;
  if ((i22 & 255) > (HEAPU8[i1 + 442 >> 0] | 0)) _png_error(i1, 64556);
 } else if (i27 << 24 >> 24 != i22 << 24 >> 24) _png_error(i1, 64580);
 if (!(HEAP8[i14 >> 0] | 0)) i4 = 73; else {
  i14 = HEAP32[i25 >> 2] | 0;
  if (!(i14 & 2)) i4 = 73; else {
   i25 = HEAP8[i1 + 433 >> 0] | 0;
   if ((i25 & 255) < 6) _png_do_read_interlace(i6, (HEAP32[i10 >> 2] | 0) + 1 | 0, i25 & 255, i14);
   if (i3 | 0) _png_combine_row(i1, i3, 1);
   if (i2 | 0) _png_combine_row(i1, i2, 0);
  }
 }
 if ((i4 | 0) == 73) {
  if (i2 | 0) _png_combine_row(i1, i2, -1);
  if (i3 | 0) _png_combine_row(i1, i3, -1);
 }
 _png_read_finish_row(i1);
 i3 = HEAP32[i1 + 544 >> 2] | 0;
 if (!i3) {
  STACKTOP = i5;
  return;
 }
 FUNCTION_TABLE_viii[i3 & 15](i1, HEAP32[i7 >> 2] | 0, HEAPU8[i1 + 433 >> 0] | 0);
 STACKTOP = i5;
 return;
}

function __ZN5ImGui8EndChildEv() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, f13 = f0, f14 = f0, f15 = f0, f16 = f0, f17 = f0, f18 = f0, f19 = f0, f20 = f0, i21 = 0, f22 = f0, f23 = f0, f24 = f0, i25 = 0, i26 = 0, i27 = 0, f28 = f0, f29 = f0, f30 = f0;
 i1 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i3 = i2 + 24 | 0;
 i4 = i2 + 16 | 0;
 i5 = i2;
 i6 = HEAP32[1460598] | 0;
 i7 = i6 + 6392 | 0;
 i8 = HEAP32[i7 >> 2] | 0;
 i9 = i8 + 8 | 0;
 if (!(HEAP32[i9 >> 2] & 16777216)) ___assert_fail(32875, 31803, 5490, 32920);
 if ((HEAP32[i8 + 136 >> 2] | 0) > 1) {
  __ZN5ImGui3EndEv();
  STACKTOP = i2;
  return;
 }
 i10 = i8 + 20 | 0;
 i11 = HEAP32[i10 >> 2] | 0;
 i12 = HEAP32[i10 + 4 >> 2] | 0;
 i10 = i4;
 HEAP32[i10 >> 2] = i11;
 HEAP32[i10 + 4 >> 2] = i12;
 i10 = HEAP32[i8 + 156 >> 2] | 0;
 f13 = (HEAP32[tempDoublePtr >> 2] = i11, Math_fround(HEAPF32[tempDoublePtr >> 2]));
 f14 = (HEAP32[tempDoublePtr >> 2] = i12, Math_fround(HEAPF32[tempDoublePtr >> 2]));
 if (!(i10 & 1)) f15 = f13; else {
  i12 = f13 <= Math_fround(4.0);
  f16 = i12 ? Math_fround(4.0) : f13;
  HEAPF32[i4 >> 2] = f16;
  f15 = f16;
 }
 if (!(i10 & 2)) f17 = f14; else {
  i10 = f14 <= Math_fround(4.0);
  f16 = i10 ? Math_fround(4.0) : f14;
  HEAPF32[i4 + 4 >> 2] = f16;
  f17 = f16;
 }
 __ZN5ImGui3EndEv();
 i10 = HEAP32[i7 >> 2] | 0;
 i7 = i10 + 196 | 0;
 f16 = Math_fround(Math_fround(HEAPF32[i7 >> 2]) + f15);
 f15 = Math_fround(Math_fround(HEAPF32[i10 + 200 >> 2]) + f17);
 i10 = i7;
 i7 = HEAP32[i10 >> 2] | 0;
 i12 = HEAP32[i10 + 4 >> 2] | 0;
 i10 = i5;
 HEAP32[i10 >> 2] = i7;
 HEAP32[i10 + 4 >> 2] = i12;
 i10 = i5 + 8 | 0;
 HEAPF32[i10 >> 2] = f16;
 i11 = i5 + 12 | 0;
 HEAPF32[i11 >> 2] = f15;
 __ZN5ImGui8ItemSizeERK6ImVec2f(i4, Math_fround(0.0));
 i4 = i8 + 308 | 0;
 f17 = (HEAP32[tempDoublePtr >> 2] = i12, Math_fround(HEAPF32[tempDoublePtr >> 2]));
 f14 = (HEAP32[tempDoublePtr >> 2] = i7, Math_fround(HEAPF32[tempDoublePtr >> 2]));
 if (!(HEAP32[i4 >> 2] | 0)) if (!(HEAP8[i8 + 297 >> 0] | 0)) i1 = 15; else i1 = 11; else i1 = 11;
 if ((i1 | 0) == 11) if (!(HEAP32[i9 >> 2] & 8388608)) {
  i9 = i8 + 80 | 0;
  __ZN5ImGui7ItemAddERK6ImRectjPS1_(i5, HEAP32[i9 >> 2] | 0, 0) | 0;
  __ZN5ImGui18RenderNavHighlightERK6ImRectji(i5, HEAP32[i9 >> 2] | 0, 1);
  if (!(HEAP32[i4 >> 2] | 0)) if ((i8 | 0) == (HEAP32[i6 + 6644 >> 2] | 0)) {
   f13 = Math_fround(Math_fround(HEAPF32[i5 >> 2]) + Math_fround(-2.0));
   f18 = Math_fround(Math_fround(HEAPF32[i5 + 4 >> 2]) + Math_fround(-2.0));
   f19 = Math_fround(Math_fround(HEAPF32[i10 >> 2]) + Math_fround(2.0));
   f20 = Math_fround(Math_fround(HEAPF32[i11 >> 2]) + Math_fround(2.0));
   HEAPF32[i3 >> 2] = f13;
   HEAPF32[i3 + 4 >> 2] = f18;
   HEAPF32[i3 + 8 >> 2] = f19;
   HEAPF32[i3 + 12 >> 2] = f20;
   __ZN5ImGui18RenderNavHighlightERK6ImRectji(i3, HEAP32[i6 + 6648 >> 2] | 0, 2);
  }
 } else i1 = 15;
 do if ((i1 | 0) == 15) {
  i6 = HEAP32[1460598] | 0;
  i11 = i6 + 6392 | 0;
  i8 = HEAP32[i11 >> 2] | 0;
  HEAP32[i8 + 256 >> 2] = 0;
  i4 = i8 + 264 | 0;
  HEAP32[i4 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i4 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i4 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  HEAP32[i4 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
  i4 = i8 + 260 | 0;
  HEAP32[i4 >> 2] = 0;
  i8 = HEAP32[i11 >> 2] | 0;
  f20 = Math_fround(HEAPF32[i8 + 468 >> 2]);
  if (f20 < f15) {
   f19 = Math_fround(HEAPF32[i8 + 476 >> 2]);
   if (f19 > f17) {
    f18 = Math_fround(HEAPF32[i8 + 464 >> 2]);
    if (f18 < f16) {
     f13 = Math_fround(HEAPF32[i8 + 472 >> 2]);
     if (f13 > f14) {
      i21 = i8 + 472 | 0;
      f22 = f18;
      f23 = f13;
      f24 = f19;
     } else i1 = 20;
    } else i1 = 20;
   } else i1 = 20;
  } else i1 = 20;
  if ((i1 | 0) == 20) {
   if (!(HEAP8[i6 + 11092 >> 0] | 0)) break;
   f19 = Math_fround(HEAPF32[i8 + 464 >> 2]);
   i11 = i8 + 472 | 0;
   f13 = Math_fround(HEAPF32[i11 >> 2]);
   i21 = i11;
   f22 = f19;
   f23 = f13;
   f24 = Math_fround(HEAPF32[i8 + 476 >> 2]);
  }
  i11 = i3;
  HEAP32[i11 >> 2] = i7;
  HEAP32[i11 + 4 >> 2] = i12;
  i11 = i3 + 8 | 0;
  i9 = i10;
  i25 = HEAP32[i9 >> 2] | 0;
  i26 = HEAP32[i9 + 4 >> 2] | 0;
  i9 = i11;
  HEAP32[i9 >> 2] = i25;
  HEAP32[i9 + 4 >> 2] = i26;
  f13 = (HEAP32[tempDoublePtr >> 2] = i25, Math_fround(HEAPF32[tempDoublePtr >> 2]));
  f19 = (HEAP32[tempDoublePtr >> 2] = i26, Math_fround(HEAPF32[tempDoublePtr >> 2]));
  i26 = i8 + 464 | 0;
  i8 = HEAP32[(f22 <= f14 ? i3 : i26) >> 2] | 0;
  i25 = HEAP32[(f20 <= f17 ? i3 : i26) + 4 >> 2] | 0;
  i26 = i3;
  HEAP32[i26 >> 2] = i8;
  HEAP32[i26 + 4 >> 2] = i25;
  i26 = HEAP32[(f23 > f13 ? i11 : i21) >> 2] | 0;
  i9 = HEAP32[(f24 > f19 ? i11 : i21) + 4 >> 2] | 0;
  i27 = i11;
  HEAP32[i27 >> 2] = i26;
  HEAP32[i27 + 4 >> 2] = i9;
  f19 = (HEAP32[tempDoublePtr >> 2] = i8, Math_fround(HEAPF32[tempDoublePtr >> 2]));
  f13 = Math_fround(HEAPF32[i6 + 5440 >> 2]);
  f20 = Math_fround(f19 - f13);
  f19 = Math_fround(HEAPF32[i6 + 5444 >> 2]);
  f18 = Math_fround(HEAPF32[i6 + 212 >> 2]);
  if (!(f18 >= f20)) break;
  f20 = (HEAP32[tempDoublePtr >> 2] = i25, Math_fround(HEAPF32[tempDoublePtr >> 2]));
  f28 = (HEAP32[tempDoublePtr >> 2] = i26, Math_fround(HEAPF32[tempDoublePtr >> 2]));
  f29 = Math_fround(f19 + (HEAP32[tempDoublePtr >> 2] = i9, Math_fround(HEAPF32[tempDoublePtr >> 2])));
  f30 = Math_fround(f13 + f28);
  f28 = Math_fround(f20 - f19);
  f19 = Math_fround(HEAPF32[i6 + 216 >> 2]);
  if (f19 < f29 & (f18 < f30 & f19 >= f28)) HEAP32[i4 >> 2] = 1;
 } while (0);
 STACKTOP = i2;
 return;
}

function _png_image_read_direct(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i3;
 i5 = HEAP32[i1 >> 2] | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 i7 = HEAP32[i6 >> 2] | 0;
 i8 = HEAP32[i6 + 4 >> 2] | 0;
 i6 = HEAP32[i5 + 16 >> 2] | 0;
 i9 = i6 & 4;
 i10 = (i9 | 0) != 0;
 _png_set_expand(i7);
 i11 = HEAP8[i7 + 435 >> 0] | 0;
 i12 = i11 & 2;
 if (!(i11 & 4)) i13 = (HEAP16[i7 + 428 >> 1] | 0) != 0 | i12; else i13 = i12 | 1;
 i12 = (HEAP8[i7 + 436 >> 0] | 0) == 16 ? i13 | 4 : i13;
 i13 = i12 & -9 ^ i6;
 if (!(i13 & 2)) {
  i14 = i13;
  i15 = 0;
 } else {
  if (!(i6 & 2)) {
   _png_set_rgb_to_gray_fixed(i7, 1, -1, -1);
   i16 = i12 & 1;
  } else {
   _png_set_gray_to_rgb(i7);
   i16 = 0;
  }
  i14 = i13 & -3;
  i15 = i16;
 }
 if (!(i12 & 4)) i2 = 11; else if (!(HEAP32[i5 + 20 >> 2] & 4)) i17 = 1e5; else i2 = 11;
 if ((i2 | 0) == 11) i17 = -1;
 _png_set_alpha_mode_fixed(i7, 0, i17);
 i17 = i12 & 1;
 i12 = i10 ? i17 : 0;
 i16 = i10 ? 1e5 : -1;
 if (!i15) {
  i18 = i12;
  i19 = 0;
 } else {
  if (!(_png_muldiv(i4, i16, HEAP32[i7 + 824 >> 2] | 0, 1e5) | 0)) i2 = 15; else if (!(_png_gamma_significant(HEAP32[i4 >> 2] | 0) | 0)) {
   i20 = i12;
   i21 = 0;
  } else i2 = 15;
  if ((i2 | 0) == 15) {
   i20 = 0;
   i21 = (i12 | 0) == 1 ? 2 : i15;
  }
  i18 = i20;
  i19 = i21;
 }
 if (!(i14 & 4)) i22 = i14; else {
  if (i10) _png_set_expand_16(i7); else _png_set_scale_16(i7);
  i22 = i14 & -5;
 }
 if (!(i22 & 1)) {
  i23 = 0;
  i24 = i22;
  i25 = i18;
  i26 = i19;
 } else {
  do if (!i17) {
   i14 = i6 & 32;
   _png_set_add_alpha(i7, i10 ? 65535 : 255, i14 >>> 5 ^ 1);
   i27 = 0;
   i28 = (i14 | 0) == 0 ? i22 : i22 & -33;
   i29 = i18;
   i30 = i19;
  } else if (!i19) {
   if (i10) {
    _png_set_strip_alpha(i7);
    i27 = 0;
    i28 = i22;
    i29 = i18;
    i30 = 0;
    break;
   }
   i14 = HEAP32[i1 + 16 >> 2] | 0;
   if (!i14) {
    i27 = 1;
    i28 = i22;
    i29 = 2;
    i30 = 0;
   } else {
    HEAP8[i4 >> 0] = 0;
    HEAP16[i4 + 2 >> 1] = HEAPU8[i14 >> 0] | 0;
    i21 = HEAPU8[i14 + 1 >> 0] | 0;
    HEAP16[i4 + 4 >> 1] = i21;
    HEAP16[i4 + 6 >> 1] = HEAPU8[i14 + 2 >> 0] | 0;
    HEAP16[i4 + 8 >> 1] = i21;
    _png_set_background_fixed(i7, i4, 1, 0, 0);
    i27 = 0;
    i28 = i22;
    i29 = i18;
    i30 = 0;
   }
  } else {
   i27 = 0;
   i28 = i22;
   i29 = i18;
   i30 = 2;
  } while (0);
  i23 = i27;
  i24 = i28 & -2;
  i25 = i29;
  i26 = i30;
 }
 _png_set_alpha_mode_fixed(i7, i25, i16);
 if (!(i24 & 16)) {
  i31 = i6;
  i32 = i24;
 } else {
  if (!(i6 & 2)) i33 = i6 & -17; else {
   _png_set_bgr(i7);
   i33 = i6;
  }
  i31 = i33;
  i32 = i24 & -17;
 }
 if (!(i32 & 32)) {
  i34 = i31;
  i35 = i32;
 } else {
  if (!(i31 & 1)) i36 = i31 & -33; else if ((i26 | 0) == 2) i36 = i31; else {
   _png_set_swap_alpha(i7);
   i36 = i31;
  }
  i34 = i36;
  i35 = i32 & -33;
 }
 if (i10) _png_set_swap(i7);
 if (i35 | 0) _png_error(i7, 65151);
 _png_set_keep_unknown_chunks(i7, 1, 0, -1);
 _png_set_keep_unknown_chunks(i7, 0, 65194, 6);
 i35 = (i23 | 0) == 0;
 i23 = (i26 | 0) != 2;
 if (i23 & i35) i37 = _png_set_interlace_handling(i7) | 0; else i37 = 0;
 i10 = i7 + 212 | 0;
 if (!(HEAP32[i10 >> 2] & 64)) {
  _png_read_start_row(i7);
  _png_read_transform_info(i7, i8);
 } else _png_app_error(i7, 64380);
 i32 = HEAP8[i8 + 25 >> 0] | 0;
 i36 = i32 & 2;
 if (!(i32 & 4)) if (i35) i38 = i36; else _png_error(i7, 65224); else i38 = i36 | i35 & (i23 | (i34 & 1 | 0) != 0) & 1;
 i23 = HEAP32[i7 + 216 >> 2] | 0;
 i36 = i23 << 4 & 16 | ((HEAP8[i8 + 24 >> 0] | 0) == 16 ? i38 | 4 : i38);
 i38 = (i26 | 0) == 2;
 i26 = i38 ^ 1;
 i32 = i36 | 32;
 i31 = (i34 & 32 | 0) == 0 | i26 ? i36 : i32;
 if (!(i23 & 131072)) if (!(i23 & 16777216)) i39 = i31; else {
  i23 = (HEAP32[i10 >> 2] & 128 | 0) != 0;
  if (i23 | i26) i39 = i23 ? i31 : i32; else _png_error(i7, 65259);
 } else if (i38) _png_error(i7, 65259); else i39 = i32;
 if ((i39 | 0) != (i34 | 0)) _png_error(i7, 65296);
 i34 = HEAP32[i1 + 4 >> 2] | 0;
 i39 = HEAP32[i1 + 8 >> 2] << (i9 >>> 2);
 if ((i39 | 0) < 0) i40 = i34 + (Math_imul((HEAP32[i5 + 12 >> 2] | 0) + -1 | 0, 0 - i39 | 0) | 0) | 0; else i40 = i34;
 i34 = i1 + 24 | 0;
 HEAP32[i34 >> 2] = i40;
 HEAP32[i1 + 28 >> 2] = i39;
 if (!i35) {
  i35 = _png_malloc(i7, _png_get_rowbytes(i7, i8) | 0) | 0;
  i9 = i1 + 20 | 0;
  HEAP32[i9 >> 2] = i35;
  i32 = _png_safe_execute(i5, 74, i1) | 0;
  HEAP32[i9 >> 2] = 0;
  _png_free(i7, i35);
  i41 = i32;
  STACKTOP = i3;
  return i41 | 0;
 }
 if (i38) {
  i38 = _png_malloc(i7, _png_get_rowbytes(i7, i8) | 0) | 0;
  i8 = i1 + 20 | 0;
  HEAP32[i8 >> 2] = i38;
  i32 = _png_safe_execute(i5, 75, i1) | 0;
  HEAP32[i8 >> 2] = 0;
  _png_free(i7, i38);
  i41 = i32;
  STACKTOP = i3;
  return i41 | 0;
 }
 if ((i37 | 0) <= 0) {
  i41 = 1;
  STACKTOP = i3;
  return i41 | 0;
 }
 i32 = i5 + 12 | 0;
 i5 = i37;
 i37 = i40;
 while (1) {
  i40 = i5 + -1 | 0;
  i38 = HEAP32[i32 >> 2] | 0;
  if (i38 | 0) {
   i8 = i38;
   i38 = i37;
   while (1) {
    i8 = i8 + -1 | 0;
    _png_read_row(i7, i38, 0);
    if (!i8) break; else i38 = i38 + i39 | 0;
   }
  }
  if ((i5 | 0) <= 1) {
   i41 = 1;
   break;
  }
  i5 = i40;
  i37 = HEAP32[i34 >> 2] | 0;
 }
 STACKTOP = i3;
 return i41 | 0;
}

function __ZN10ImDrawList8PathRectERK6ImVec2S2_fi(i1, i2, i3, f4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 f4 = Math_fround(f4);
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, f8 = f0, f9 = f0, f10 = f0, i11 = 0, i12 = 0, f13 = f0, f14 = f0, f15 = f0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i6;
 f8 = Math_fround(HEAPF32[i3 >> 2]);
 f9 = Math_fround(HEAPF32[i2 >> 2]);
 f10 = Math_fround(Math_abs(Math_fround(f8 - f9)));
 f8 = Math_fround(Math_fround(((i5 & 3 | 0) == 3 | (i5 & 12 | 0) == 12 ? Math_fround(.5) : Math_fround(1.0)) * f10) + Math_fround(-1.0));
 f10 = f8 > f4 ? f4 : f8;
 i11 = i3 + 4 | 0;
 f8 = Math_fround(HEAPF32[i11 >> 2]);
 i12 = i2 + 4 | 0;
 f4 = Math_fround(HEAPF32[i12 >> 2]);
 f13 = Math_fround(Math_abs(Math_fround(f8 - f4)));
 f8 = Math_fround(Math_fround(((i5 & 5 | 0) == 5 | (i5 & 10 | 0) == 10 ? Math_fround(.5) : Math_fround(1.0)) * f13) + Math_fround(-1.0));
 f13 = f10 < f8 ? f10 : f8;
 if (!((i5 | 0) == 0 | f13 <= Math_fround(0.0))) {
  f8 = i5 & 1 | 0 ? f13 : Math_fround(0.0);
  f10 = i5 & 2 | 0 ? f13 : Math_fround(0.0);
  f14 = i5 & 8 | 0 ? f13 : Math_fround(0.0);
  f15 = i5 & 4 | 0 ? f13 : Math_fround(0.0);
  f13 = Math_fround(f8 + f9);
  f9 = Math_fround(f8 + f4);
  HEAPF32[i7 >> 2] = f13;
  HEAPF32[i7 + 4 >> 2] = f9;
  __ZN10ImDrawList13PathArcToFastERK6ImVec2fii(i1, i7, f8, 6, 9);
  f8 = Math_fround(Math_fround(HEAPF32[i3 >> 2]) - f10);
  f9 = Math_fround(f10 + Math_fround(HEAPF32[i12 >> 2]));
  HEAPF32[i7 >> 2] = f8;
  HEAPF32[i7 + 4 >> 2] = f9;
  __ZN10ImDrawList13PathArcToFastERK6ImVec2fii(i1, i7, f10, 9, 12);
  f10 = Math_fround(Math_fround(HEAPF32[i3 >> 2]) - f14);
  f9 = Math_fround(Math_fround(HEAPF32[i11 >> 2]) - f14);
  HEAPF32[i7 >> 2] = f10;
  HEAPF32[i7 + 4 >> 2] = f9;
  __ZN10ImDrawList13PathArcToFastERK6ImVec2fii(i1, i7, f14, 0, 3);
  f14 = Math_fround(f15 + Math_fround(HEAPF32[i2 >> 2]));
  f9 = Math_fround(Math_fround(HEAPF32[i11 >> 2]) - f15);
  HEAPF32[i7 >> 2] = f14;
  HEAPF32[i7 + 4 >> 2] = f9;
  __ZN10ImDrawList13PathArcToFastERK6ImVec2fii(i1, i7, f15, 3, 6);
  STACKTOP = i6;
  return;
 }
 i7 = i1 + 84 | 0;
 i5 = HEAP32[i7 >> 2] | 0;
 i16 = i1 + 88 | 0;
 if ((i5 | 0) == (HEAP32[i16 >> 2] | 0)) {
  i17 = i5 + 1 | 0;
  if (!i5) i18 = 8; else i18 = ((i5 | 0) / 2 | 0) + i5 | 0;
  i19 = (i18 | 0) > (i17 | 0) ? i18 : i17;
  if ((i5 | 0) < (i19 | 0)) {
   i17 = __ZN5ImGui8MemAllocEj(i19 << 3) | 0;
   i18 = i1 + 92 | 0;
   i20 = HEAP32[i18 >> 2] | 0;
   if (!i20) i21 = i18; else {
    _memcpy(i17 | 0, i20 | 0, HEAP32[i7 >> 2] << 3 | 0) | 0;
    __ZN5ImGui7MemFreeEPv(HEAP32[i18 >> 2] | 0);
    i21 = i18;
   }
   HEAP32[i21 >> 2] = i17;
   HEAP32[i16 >> 2] = i19;
   i22 = HEAP32[i7 >> 2] | 0;
  } else i22 = i5;
 } else i22 = i5;
 i5 = i1 + 92 | 0;
 i1 = i2;
 i19 = HEAP32[i1 + 4 >> 2] | 0;
 i17 = (HEAP32[i5 >> 2] | 0) + (i22 << 3) | 0;
 HEAP32[i17 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i17 + 4 >> 2] = i19;
 i19 = HEAP32[i7 >> 2] | 0;
 i17 = i19 + 1 | 0;
 HEAP32[i7 >> 2] = i17;
 i1 = HEAP32[i3 >> 2] | 0;
 i22 = HEAP32[i12 >> 2] | 0;
 if ((i17 | 0) == (HEAP32[i16 >> 2] | 0)) {
  i12 = i19 + 2 | 0;
  if (!i17) i23 = 8; else i23 = ((i17 | 0) / 2 | 0) + i17 | 0;
  i19 = (i23 | 0) > (i12 | 0) ? i23 : i12;
  if ((i17 | 0) < (i19 | 0)) {
   i12 = __ZN5ImGui8MemAllocEj(i19 << 3) | 0;
   i23 = HEAP32[i5 >> 2] | 0;
   if (!i23) i24 = i5; else {
    _memcpy(i12 | 0, i23 | 0, HEAP32[i7 >> 2] << 3 | 0) | 0;
    __ZN5ImGui7MemFreeEPv(HEAP32[i5 >> 2] | 0);
    i24 = i5;
   }
   HEAP32[i24 >> 2] = i12;
   HEAP32[i16 >> 2] = i19;
   i25 = HEAP32[i7 >> 2] | 0;
  } else i25 = i17;
 } else i25 = i17;
 i17 = HEAP32[i5 >> 2] | 0;
 i19 = i17 + (i25 << 3) | 0;
 HEAP32[i19 >> 2] = i1;
 HEAP32[i19 + 4 >> 2] = i22;
 i22 = HEAP32[i7 >> 2] | 0;
 i19 = i22 + 1 | 0;
 HEAP32[i7 >> 2] = i19;
 if ((i19 | 0) == (HEAP32[i16 >> 2] | 0)) {
  i1 = i22 + 2 | 0;
  if (!i19) i26 = 8; else i26 = ((i19 | 0) / 2 | 0) + i19 | 0;
  i22 = (i26 | 0) > (i1 | 0) ? i26 : i1;
  if ((i19 | 0) < (i22 | 0)) {
   i1 = __ZN5ImGui8MemAllocEj(i22 << 3) | 0;
   i26 = HEAP32[i5 >> 2] | 0;
   if (!i26) i27 = i5; else {
    _memcpy(i1 | 0, i26 | 0, HEAP32[i7 >> 2] << 3 | 0) | 0;
    __ZN5ImGui7MemFreeEPv(HEAP32[i5 >> 2] | 0);
    i27 = i5;
   }
   HEAP32[i27 >> 2] = i1;
   HEAP32[i16 >> 2] = i22;
   i28 = HEAP32[i7 >> 2] | 0;
  } else i28 = i19;
 } else i28 = i19;
 i19 = i3;
 i3 = HEAP32[i19 + 4 >> 2] | 0;
 i22 = (HEAP32[i5 >> 2] | 0) + (i28 << 3) | 0;
 HEAP32[i22 >> 2] = HEAP32[i19 >> 2];
 HEAP32[i22 + 4 >> 2] = i3;
 i3 = HEAP32[i7 >> 2] | 0;
 i22 = i3 + 1 | 0;
 HEAP32[i7 >> 2] = i22;
 i19 = HEAP32[i2 >> 2] | 0;
 i2 = HEAP32[i11 >> 2] | 0;
 if ((i22 | 0) == (HEAP32[i16 >> 2] | 0)) {
  i11 = i3 + 2 | 0;
  if (!i22) i29 = 8; else i29 = ((i22 | 0) / 2 | 0) + i22 | 0;
  i3 = (i29 | 0) > (i11 | 0) ? i29 : i11;
  if ((i22 | 0) < (i3 | 0)) {
   i11 = __ZN5ImGui8MemAllocEj(i3 << 3) | 0;
   i29 = HEAP32[i5 >> 2] | 0;
   if (!i29) i30 = i5; else {
    _memcpy(i11 | 0, i29 | 0, HEAP32[i7 >> 2] << 3 | 0) | 0;
    __ZN5ImGui7MemFreeEPv(HEAP32[i5 >> 2] | 0);
    i30 = i5;
   }
   HEAP32[i30 >> 2] = i11;
   HEAP32[i16 >> 2] = i3;
   i31 = HEAP32[i7 >> 2] | 0;
  } else i31 = i22;
 } else i31 = i22;
 i22 = HEAP32[i5 >> 2] | 0;
 i5 = i22 + (i31 << 3) | 0;
 HEAP32[i5 >> 2] = i19;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
 STACKTOP = i6;
 return;
}

function _png_free_data(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 if ((i1 | 0) == 0 | (i2 | 0) == 0) return;
 i5 = i2 + 136 | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 do if (!i6) i7 = i2 + 232 | 0; else {
  i8 = i2 + 232 | 0;
  if (!(i3 & 16384 & HEAP32[i8 >> 2])) i7 = i8; else {
   if ((i4 | 0) != -1) {
    _png_free(i1, HEAP32[i6 + (i4 * 28 | 0) + 4 >> 2] | 0);
    HEAP32[(HEAP32[i5 >> 2] | 0) + (i4 * 28 | 0) + 4 >> 2] = 0;
    i7 = i8;
    break;
   }
   i9 = i2 + 128 | 0;
   if ((HEAP32[i9 >> 2] | 0) > 0) {
    i10 = 0;
    i11 = i6;
    while (1) {
     _png_free(i1, HEAP32[i11 + (i10 * 28 | 0) + 4 >> 2] | 0);
     i10 = i10 + 1 | 0;
     i12 = HEAP32[i5 >> 2] | 0;
     if ((i10 | 0) >= (HEAP32[i9 >> 2] | 0)) {
      i13 = i12;
      break;
     } else i11 = i12;
    }
   } else i13 = i6;
   _png_free(i1, i13);
   HEAP32[i5 >> 2] = 0;
   HEAP32[i9 >> 2] = 0;
   i7 = i8;
  }
 } while (0);
 i5 = HEAP32[i7 >> 2] | 0;
 if (!(i3 & 8192 & i5)) i14 = i5; else {
  i5 = i2 + 8 | 0;
  HEAP32[i5 >> 2] = HEAP32[i5 >> 2] & -17;
  i5 = i2 + 156 | 0;
  _png_free(i1, HEAP32[i5 >> 2] | 0);
  HEAP32[i5 >> 2] = 0;
  HEAP16[i2 + 22 >> 1] = 0;
  i14 = HEAP32[i7 >> 2] | 0;
 }
 if (!(i3 & 256 & i14)) i15 = i14; else {
  i14 = i2 + 256 | 0;
  _png_free(i1, HEAP32[i14 >> 2] | 0);
  i5 = i2 + 260 | 0;
  _png_free(i1, HEAP32[i5 >> 2] | 0);
  HEAP32[i14 >> 2] = 0;
  HEAP32[i5 >> 2] = 0;
  i5 = i2 + 8 | 0;
  HEAP32[i5 >> 2] = HEAP32[i5 >> 2] & -16385;
  i15 = HEAP32[i7 >> 2] | 0;
 }
 if (!(i3 & 128 & i15)) i16 = i15; else {
  i15 = i2 + 208 | 0;
  _png_free(i1, HEAP32[i15 >> 2] | 0);
  i5 = i2 + 220 | 0;
  _png_free(i1, HEAP32[i5 >> 2] | 0);
  HEAP32[i15 >> 2] = 0;
  HEAP32[i5 >> 2] = 0;
  i5 = i2 + 224 | 0;
  i15 = HEAP32[i5 >> 2] | 0;
  if (i15 | 0) {
   i14 = i2 + 229 | 0;
   if (!(HEAP8[i14 >> 0] | 0)) i17 = i15; else {
    i13 = 0;
    i6 = i15;
    while (1) {
     _png_free(i1, HEAP32[i6 + (i13 << 2) >> 2] | 0);
     i13 = i13 + 1 | 0;
     i15 = HEAP32[i5 >> 2] | 0;
     if ((i13 | 0) >= (HEAPU8[i14 >> 0] | 0)) {
      i17 = i15;
      break;
     } else i6 = i15;
    }
   }
   _png_free(i1, i17);
   HEAP32[i5 >> 2] = 0;
  }
  i5 = i2 + 8 | 0;
  HEAP32[i5 >> 2] = HEAP32[i5 >> 2] & -1025;
  i16 = HEAP32[i7 >> 2] | 0;
 }
 if (i3 & 16 & i16 | 0) {
  i16 = i2 + 116 | 0;
  _png_free(i1, HEAP32[i16 >> 2] | 0);
  i5 = i2 + 120 | 0;
  _png_free(i1, HEAP32[i5 >> 2] | 0);
  HEAP32[i16 >> 2] = 0;
  HEAP32[i5 >> 2] = 0;
  i5 = i2 + 8 | 0;
  HEAP32[i5 >> 2] = HEAP32[i5 >> 2] & -4097;
 }
 i5 = i2 + 244 | 0;
 i16 = HEAP32[i5 >> 2] | 0;
 do if (i16 | 0) if (i3 & 32 & HEAP32[i7 >> 2] | 0) {
  if ((i4 | 0) != -1) {
   _png_free(i1, HEAP32[i16 + (i4 << 4) >> 2] | 0);
   _png_free(i1, HEAP32[(HEAP32[i5 >> 2] | 0) + (i4 << 4) + 8 >> 2] | 0);
   i17 = HEAP32[i5 >> 2] | 0;
   i6 = i17 + (i4 << 4) | 0;
   HEAP32[i6 >> 2] = 0;
   HEAP32[i6 + 8 >> 2] = 0;
   break;
  }
  i6 = i2 + 248 | 0;
  if ((HEAP32[i6 >> 2] | 0) > 0) {
   i17 = 0;
   i14 = i16;
   while (1) {
    _png_free(i1, HEAP32[i14 + (i17 << 4) >> 2] | 0);
    _png_free(i1, HEAP32[(HEAP32[i5 >> 2] | 0) + (i17 << 4) + 8 >> 2] | 0);
    i17 = i17 + 1 | 0;
    i13 = HEAP32[i5 >> 2] | 0;
    if ((i17 | 0) >= (HEAP32[i6 >> 2] | 0)) {
     i18 = i13;
     break;
    } else i14 = i13;
   }
  } else i18 = i16;
  _png_free(i1, i18);
  HEAP32[i5 >> 2] = 0;
  HEAP32[i6 >> 2] = 0;
  i14 = i2 + 8 | 0;
  HEAP32[i14 >> 2] = HEAP32[i14 >> 2] & -8193;
 } while (0);
 i5 = i2 + 236 | 0;
 i18 = HEAP32[i5 >> 2] | 0;
 do if (i18 | 0) if (i3 & 512 & HEAP32[i7 >> 2] | 0) {
  if ((i4 | 0) != -1) {
   _png_free(i1, HEAP32[i18 + (i4 * 20 | 0) + 8 >> 2] | 0);
   HEAP32[(HEAP32[i5 >> 2] | 0) + (i4 * 20 | 0) + 8 >> 2] = 0;
   break;
  }
  i16 = i2 + 240 | 0;
  if ((HEAP32[i16 >> 2] | 0) > 0) {
   i14 = 0;
   i17 = i18;
   while (1) {
    _png_free(i1, HEAP32[i17 + (i14 * 20 | 0) + 8 >> 2] | 0);
    i14 = i14 + 1 | 0;
    i8 = HEAP32[i5 >> 2] | 0;
    if ((i14 | 0) >= (HEAP32[i16 >> 2] | 0)) {
     i19 = i8;
     break;
    } else i17 = i8;
   }
  } else i19 = i18;
  _png_free(i1, i19);
  HEAP32[i5 >> 2] = 0;
  HEAP32[i16 >> 2] = 0;
 } while (0);
 i5 = HEAP32[i7 >> 2] | 0;
 if (!(i3 & 8 & i5)) i20 = i5; else {
  i5 = i2 + 204 | 0;
  _png_free(i1, HEAP32[i5 >> 2] | 0);
  HEAP32[i5 >> 2] = 0;
  i5 = i2 + 8 | 0;
  HEAP32[i5 >> 2] = HEAP32[i5 >> 2] & -65;
  i20 = HEAP32[i7 >> 2] | 0;
 }
 if (!(i3 & 4096 & i20)) i21 = i20; else {
  i20 = i2 + 16 | 0;
  _png_free(i1, HEAP32[i20 >> 2] | 0);
  HEAP32[i20 >> 2] = 0;
  i20 = i2 + 8 | 0;
  HEAP32[i20 >> 2] = HEAP32[i20 >> 2] & -9;
  HEAP16[i2 + 20 >> 1] = 0;
  i21 = HEAP32[i7 >> 2] | 0;
 }
 if (!(i3 & 64 & i21)) i22 = i21; else {
  i20 = i2 + 264 | 0;
  i5 = HEAP32[i20 >> 2] | 0;
  if (!i5) i23 = i21; else {
   i21 = i2 + 4 | 0;
   if (!(HEAP32[i21 >> 2] | 0)) i24 = i5; else {
    i19 = 0;
    i18 = i5;
    while (1) {
     _png_free(i1, HEAP32[i18 + (i19 << 2) >> 2] | 0);
     i19 = i19 + 1 | 0;
     i5 = HEAP32[i20 >> 2] | 0;
     if (i19 >>> 0 >= (HEAP32[i21 >> 2] | 0) >>> 0) {
      i24 = i5;
      break;
     } else i18 = i5;
    }
   }
   _png_free(i1, i24);
   HEAP32[i20 >> 2] = 0;
   i23 = HEAP32[i7 >> 2] | 0;
  }
  i20 = i2 + 8 | 0;
  HEAP32[i20 >> 2] = HEAP32[i20 >> 2] & -32769;
  i22 = i23;
 }
 HEAP32[i7 >> 2] = i22 & ~((i4 | 0) == -1 ? i3 : i3 & -16929);
 return;
}

function ___floatscan(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, d7 = 0.0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0;
 i4 = 0;
 switch (i2 | 0) {
 case 0:
  {
   i5 = -149;
   i6 = 24;
   i4 = 4;
   break;
  }
 case 1:
  {
   i5 = -1074;
   i6 = 53;
   i4 = 4;
   break;
  }
 case 2:
  {
   i5 = -1074;
   i6 = 53;
   i4 = 4;
   break;
  }
 default:
  d7 = 0.0;
 }
 L4 : do if ((i4 | 0) == 4) {
  i2 = i1 + 4 | 0;
  i8 = i1 + 100 | 0;
  do {
   i9 = HEAP32[i2 >> 2] | 0;
   if (i9 >>> 0 < (HEAP32[i8 >> 2] | 0) >>> 0) {
    HEAP32[i2 >> 2] = i9 + 1;
    i10 = HEAPU8[i9 >> 0] | 0;
   } else i10 = ___shgetc(i1) | 0;
  } while ((_isspace(i10) | 0) != 0);
  L13 : do switch (i10 | 0) {
  case 43:
  case 45:
   {
    i9 = 1 - (((i10 | 0) == 45 & 1) << 1) | 0;
    i11 = HEAP32[i2 >> 2] | 0;
    if (i11 >>> 0 < (HEAP32[i8 >> 2] | 0) >>> 0) {
     HEAP32[i2 >> 2] = i11 + 1;
     i12 = HEAPU8[i11 >> 0] | 0;
     i13 = i9;
     break L13;
    } else {
     i12 = ___shgetc(i1) | 0;
     i13 = i9;
     break L13;
    }
    break;
   }
  default:
   {
    i12 = i10;
    i13 = 1;
   }
  } while (0);
  i9 = 0;
  i11 = i12;
  while (1) {
   if ((i11 | 32 | 0) != (HEAP8[69701 + i9 >> 0] | 0)) {
    i14 = i9;
    i15 = i11;
    break;
   }
   do if (i9 >>> 0 < 7) {
    i16 = HEAP32[i2 >> 2] | 0;
    if (i16 >>> 0 < (HEAP32[i8 >> 2] | 0) >>> 0) {
     HEAP32[i2 >> 2] = i16 + 1;
     i17 = HEAPU8[i16 >> 0] | 0;
     break;
    } else {
     i17 = ___shgetc(i1) | 0;
     break;
    }
   } else i17 = i11; while (0);
   i16 = i9 + 1 | 0;
   if (i16 >>> 0 < 8) {
    i9 = i16;
    i11 = i17;
   } else {
    i14 = i16;
    i15 = i17;
    break;
   }
  }
  L29 : do switch (i14 | 0) {
  case 8:
   break;
  case 3:
   {
    i4 = 23;
    break;
   }
  default:
   {
    i11 = (i3 | 0) != 0;
    if (i11 & i14 >>> 0 > 3) if ((i14 | 0) == 8) break L29; else {
     i4 = 23;
     break L29;
    }
    L34 : do if (!i14) {
     i9 = 0;
     i16 = i15;
     while (1) {
      if ((i16 | 32 | 0) != (HEAP8[69710 + i9 >> 0] | 0)) {
       i18 = i9;
       i19 = i16;
       break L34;
      }
      do if (i9 >>> 0 < 2) {
       i20 = HEAP32[i2 >> 2] | 0;
       if (i20 >>> 0 < (HEAP32[i8 >> 2] | 0) >>> 0) {
        HEAP32[i2 >> 2] = i20 + 1;
        i21 = HEAPU8[i20 >> 0] | 0;
        break;
       } else {
        i21 = ___shgetc(i1) | 0;
        break;
       }
      } else i21 = i16; while (0);
      i20 = i9 + 1 | 0;
      if (i20 >>> 0 < 3) {
       i9 = i20;
       i16 = i21;
      } else {
       i18 = i20;
       i19 = i21;
       break;
      }
     }
    } else {
     i18 = i14;
     i19 = i15;
    } while (0);
    switch (i18 | 0) {
    case 3:
     {
      i16 = HEAP32[i2 >> 2] | 0;
      if (i16 >>> 0 < (HEAP32[i8 >> 2] | 0) >>> 0) {
       HEAP32[i2 >> 2] = i16 + 1;
       i22 = HEAPU8[i16 >> 0] | 0;
      } else i22 = ___shgetc(i1) | 0;
      if ((i22 | 0) == 40) i23 = 1; else {
       if (!(HEAP32[i8 >> 2] | 0)) {
        d7 = nan;
        break L4;
       }
       HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
       d7 = nan;
       break L4;
      }
      while (1) {
       i16 = HEAP32[i2 >> 2] | 0;
       if (i16 >>> 0 < (HEAP32[i8 >> 2] | 0) >>> 0) {
        HEAP32[i2 >> 2] = i16 + 1;
        i24 = HEAPU8[i16 >> 0] | 0;
       } else i24 = ___shgetc(i1) | 0;
       if (!((i24 + -48 | 0) >>> 0 < 10 | (i24 + -65 | 0) >>> 0 < 26)) if (!((i24 | 0) == 95 | (i24 + -97 | 0) >>> 0 < 26)) break;
       i23 = i23 + 1 | 0;
      }
      if ((i24 | 0) == 41) {
       d7 = nan;
       break L4;
      }
      i16 = (HEAP32[i8 >> 2] | 0) == 0;
      if (!i16) HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
      if (!i11) {
       i9 = ___errno_location() | 0;
       HEAP32[i9 >> 2] = 22;
       ___shlim(i1, 0);
       d7 = 0.0;
       break L4;
      }
      if (!i23) {
       d7 = nan;
       break L4;
      } else i25 = i23;
      while (1) {
       i25 = i25 + -1 | 0;
       if (!i16) HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
       if (!i25) {
        d7 = nan;
        break L4;
       }
      }
      break;
     }
    case 0:
     {
      if ((i19 | 0) == 48) {
       i16 = HEAP32[i2 >> 2] | 0;
       if (i16 >>> 0 < (HEAP32[i8 >> 2] | 0) >>> 0) {
        HEAP32[i2 >> 2] = i16 + 1;
        i26 = HEAPU8[i16 >> 0] | 0;
       } else i26 = ___shgetc(i1) | 0;
       if ((i26 | 32 | 0) == 120) {
        d7 = +_hexfloat(i1, i6, i5, i13, i3);
        break L4;
       }
       if (!(HEAP32[i8 >> 2] | 0)) i27 = 48; else {
        HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
        i27 = 48;
       }
      } else i27 = i19;
      d7 = +_decfloat(i1, i27, i6, i5, i13, i3);
      break L4;
      break;
     }
    default:
     {
      if (HEAP32[i8 >> 2] | 0) HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
      i16 = ___errno_location() | 0;
      HEAP32[i16 >> 2] = 22;
      ___shlim(i1, 0);
      d7 = 0.0;
      break L4;
     }
    }
   }
  } while (0);
  if ((i4 | 0) == 23) {
   i16 = (HEAP32[i8 >> 2] | 0) == 0;
   if (!i16) HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
   if ((i3 | 0) != 0 & i14 >>> 0 > 3) {
    i11 = i14;
    do {
     if (!i16) HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
     i11 = i11 + -1 | 0;
    } while (i11 >>> 0 > 3);
   }
  }
  d7 = +Math_fround(Math_fround(i13 | 0) * Math_fround(inf));
 } while (0);
 return +d7;
}

function __ZN6ImFont16BuildLookupTableEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, f27 = f0, f28 = f0;
 i2 = 0;
 i3 = i1 + 16 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 if (!i4) i5 = 0; else {
  i6 = i1 + 24 | 0;
  i7 = 0;
  i8 = 0;
  do {
   if ((i4 | 0) <= (i8 | 0)) {
    i2 = 5;
    break;
   }
   i9 = HEAPU16[(HEAP32[i6 >> 2] | 0) + (i8 * 40 | 0) >> 1] | 0;
   i7 = (i7 | 0) >= (i9 | 0) ? i7 : i9;
   i8 = i8 + 1 | 0;
  } while ((i8 | 0) != (i4 | 0));
  if ((i2 | 0) == 5) ___assert_fail(56841, 56850, 1235, 56909);
  if ((i4 | 0) < 65535) i5 = i7; else ___assert_fail(51358, 38201, 2299, 51379);
 }
 i7 = i1 + 28 | 0;
 i4 = i1 + 36 | 0;
 i8 = HEAP32[i4 >> 2] | 0;
 if (i8 | 0) {
  HEAP32[i1 + 32 >> 2] = 0;
  HEAP32[i7 >> 2] = 0;
  __ZN5ImGui7MemFreeEPv(i8);
  HEAP32[i4 >> 2] = 0;
 }
 i8 = i1 + 40 | 0;
 i6 = i1 + 48 | 0;
 i9 = HEAP32[i6 >> 2] | 0;
 if (i9 | 0) {
  HEAP32[i1 + 44 >> 2] = 0;
  HEAP32[i8 >> 2] = 0;
  __ZN5ImGui7MemFreeEPv(i9);
  HEAP32[i6 >> 2] = 0;
 }
 HEAP8[i1 + 80 >> 0] = 0;
 __ZN6ImFont9GrowIndexEi(i1, i5 + 1 | 0);
 i9 = HEAP32[i3 >> 2] | 0;
 do if ((i9 | 0) > 0) {
  i10 = HEAP32[i1 + 24 >> 2] | 0;
  i11 = HEAP32[i7 >> 2] | 0;
  i12 = 0;
  while (1) {
   i13 = HEAPU16[i10 + (i12 * 40 | 0) >> 1] | 0;
   if ((i11 | 0) <= (i13 | 0)) {
    i2 = 23;
    break;
   }
   HEAP32[(HEAP32[i4 >> 2] | 0) + (i13 << 2) >> 2] = HEAP32[i10 + (i12 * 40 | 0) + 4 >> 2];
   i14 = HEAP32[i8 >> 2] | 0;
   if ((i14 | 0) <= (i13 | 0)) {
    i2 = 25;
    break;
   }
   HEAP16[(HEAP32[i6 >> 2] | 0) + (i13 << 1) >> 1] = i12;
   i12 = i12 + 1 | 0;
   if ((i12 | 0) >= (i9 | 0)) {
    i2 = 15;
    break;
   }
  }
  if ((i2 | 0) == 15) {
   i15 = i1 + 40 | 0;
   i16 = i14;
   break;
  } else if ((i2 | 0) == 23) ___assert_fail(56841, 56850, 1235, 56909); else if ((i2 | 0) == 25) ___assert_fail(56841, 56850, 1235, 56909);
 } else {
  i12 = i1 + 40 | 0;
  i15 = i12;
  i16 = HEAP32[i12 >> 2] | 0;
 } while (0);
 do if ((i16 | 0) > 32) {
  i14 = HEAP16[(HEAP32[i6 >> 2] | 0) + 64 >> 1] | 0;
  if (i14 << 16 >> 16 == -1) {
   i17 = HEAP32[i1 + 52 >> 2] | 0;
   break;
  } else {
   i17 = (HEAP32[i1 + 24 >> 2] | 0) + ((i14 & 65535) * 40 | 0) | 0;
   break;
  }
 } else i17 = HEAP32[i1 + 52 >> 2] | 0; while (0);
 do if (!i17) i18 = i16; else {
  i14 = HEAP32[i3 >> 2] | 0;
  if ((i14 | 0) <= 0) ___assert_fail(38278, 56850, 1245, 38287);
  i9 = i1 + 24 | 0;
  i12 = HEAP32[i9 >> 2] | 0;
  if ((HEAP16[i12 + ((i14 + -1 | 0) * 40 | 0) >> 1] | 0) == 9) {
   i19 = i14;
   i20 = i12;
  } else {
   i10 = i14 + 1 | 0;
   i11 = i1 + 20 | 0;
   i13 = HEAP32[i11 >> 2] | 0;
   if ((i13 | 0) > (i14 | 0)) i21 = i12; else {
    if (!i13) i22 = 8; else i22 = ((i13 | 0) / 2 | 0) + i13 | 0;
    i23 = (i22 | 0) > (i10 | 0) ? i22 : i10;
    if ((i13 | 0) < (i23 | 0)) {
     i13 = __ZN5ImGui8MemAllocEj(i23 * 40 | 0) | 0;
     i24 = HEAP32[i9 >> 2] | 0;
     if (!i24) i25 = i9; else {
      _memcpy(i13 | 0, i24 | 0, (HEAP32[i3 >> 2] | 0) * 40 | 0) | 0;
      __ZN5ImGui7MemFreeEPv(HEAP32[i9 >> 2] | 0);
      i25 = i9;
     }
     HEAP32[i25 >> 2] = i13;
     HEAP32[i11 >> 2] = i23;
     i21 = i13;
    } else i21 = i12;
   }
   HEAP32[i3 >> 2] = i10;
   if ((i14 | 0) > -1) {
    i19 = i10;
    i20 = i21;
   } else ___assert_fail(38278, 56850, 1245, 38287);
  }
  i10 = i19 + -1 | 0;
  i14 = i20 + (i10 * 40 | 0) | 0;
  do if ((HEAP32[i15 >> 2] | 0) > 32) {
   i12 = HEAP16[(HEAP32[i6 >> 2] | 0) + 64 >> 1] | 0;
   if (i12 << 16 >> 16 == -1) {
    i26 = HEAP32[i1 + 52 >> 2] | 0;
    break;
   } else {
    i26 = i20 + ((i12 & 65535) * 40 | 0) | 0;
    break;
   }
  } else i26 = HEAP32[i1 + 52 >> 2] | 0; while (0);
  i12 = i14;
  i13 = i26;
  i23 = i12 + 40 | 0;
  do {
   HEAP32[i12 >> 2] = HEAP32[i13 >> 2];
   i12 = i12 + 4 | 0;
   i13 = i13 + 4 | 0;
  } while ((i12 | 0) < (i23 | 0));
  HEAP16[i14 >> 1] = 9;
  i13 = i20 + (i10 * 40 | 0) + 4 | 0;
  f27 = Math_fround(Math_fround(HEAPF32[i13 >> 2]) * Math_fround(4.0));
  HEAPF32[i13 >> 2] = f27;
  if ((HEAP32[i7 >> 2] | 0) <= 9) ___assert_fail(56841, 56850, 1235, 56909);
  HEAPF32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] = f27;
  i13 = HEAP32[i8 >> 2] | 0;
  if ((i13 | 0) > 9) {
   HEAP16[(HEAP32[i6 >> 2] | 0) + 18 >> 1] = (HEAP32[i3 >> 2] | 0) + 65535;
   i18 = i13;
   break;
  } else ___assert_fail(56841, 56850, 1235, 56909);
 } while (0);
 i3 = HEAPU16[i1 + 60 >> 1] | 0;
 if ((i18 | 0) > (i3 | 0)) {
  i18 = HEAP16[(HEAP32[i6 >> 2] | 0) + (i3 << 1) >> 1] | 0;
  if (i18 << 16 >> 16 == -1) i2 = 52; else {
   i3 = i18 & 65535;
   i18 = HEAP32[i1 + 24 >> 2] | 0;
   i6 = i18 + (i3 * 40 | 0) | 0;
   HEAP32[i1 + 52 >> 2] = i6;
   if (!i6) f28 = Math_fround(0.0); else f28 = Math_fround(HEAPF32[i18 + (i3 * 40 | 0) + 4 >> 2]);
  }
 } else i2 = 52;
 if ((i2 | 0) == 52) {
  HEAP32[i1 + 52 >> 2] = 0;
  f28 = Math_fround(0.0);
 }
 i3 = i1 + 56 | 0;
 HEAPF32[i3 >> 2] = f28;
 i1 = HEAP32[i7 >> 2] | 0;
 i7 = 0;
 while (1) {
  if ((i1 | 0) <= (i7 | 0)) {
   i2 = 58;
   break;
  }
  i18 = (HEAP32[i4 >> 2] | 0) + (i7 << 2) | 0;
  if (Math_fround(HEAPF32[i18 >> 2]) < Math_fround(0.0)) HEAP32[i18 >> 2] = HEAP32[i3 >> 2];
  if ((i7 | 0) < (i5 | 0)) i7 = i7 + 1 | 0; else {
   i2 = 56;
   break;
  }
 }
 if ((i2 | 0) == 56) return; else if ((i2 | 0) == 58) ___assert_fail(56841, 56850, 1235, 56909);
}

function _png_build_gamma_table(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, d10 = 0.0, i11 = 0, d12 = 0.0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 i3 = 0;
 i4 = i1 + 492 | 0;
 if (!(HEAP32[i4 >> 2] | 0)) {
  if (HEAP32[i1 + 496 >> 2] | 0) i3 = 3;
 } else i3 = 3;
 if ((i3 | 0) == 3) {
  _png_warning(i1, 59330);
  _png_destroy_gamma_table(i1);
 }
 if ((i2 | 0) >= 9) {
  if (!(HEAP8[i1 + 435 >> 0] & 2)) i5 = HEAP8[i1 + 519 >> 0] | 0; else {
   i2 = HEAP8[i1 + 516 >> 0] | 0;
   i3 = HEAP8[i1 + 517 >> 0] | 0;
   i6 = (i3 & 255) > (i2 & 255) ? i3 : i2;
   i2 = HEAP8[i1 + 518 >> 0] | 0;
   i5 = (i2 & 255) > (i6 & 255) ? i2 : i6;
  }
  i6 = (i5 + -1 & 255) < 15 ? 16 - i5 << 24 >> 24 : 0;
  i5 = i1 + 216 | 0;
  i2 = HEAP32[i5 >> 2] & 67109888;
  i3 = (i2 | 0) != 0 & (i6 & 255) < 5 ? 5 : i6;
  i6 = ((i3 & 255) < 8 ? i3 : 8) & 255;
  HEAP32[i1 + 484 >> 2] = i6;
  i3 = i1 + 496 | 0;
  i7 = i1 + 488 | 0;
  i8 = HEAP32[i7 >> 2] | 0;
  i9 = (i8 | 0) > 0;
  if (!i2) {
   do if (i9) {
    i2 = HEAP32[i1 + 824 >> 2] | 0;
    if (i2 | 0) {
     d10 = +Math_floor(+(1.0e15 / +(i2 | 0) / +(i8 | 0) + .5));
     if (!(!(d10 >= -2147483648.0) | !(d10 <= 2147483647.0))) {
      i11 = ~~d10;
      break;
     }
    }
    i11 = 0;
   } else i11 = 1e5; while (0);
   _png_build_16bit_table(i1, i3, i6, i11);
  } else {
   if (i9) {
    d10 = +Math_floor(+(+(HEAP32[i1 + 824 >> 2] | 0) * 1.0e-05 * +(i8 | 0) + .5));
    d12 = d10 <= 2147483647.0 & d10 >= -2147483648.0 ? +(~~d10 | 0) * 1.0e-05 : 0.0;
   } else d12 = 1.0;
   i8 = 8 - i6 | 0;
   i9 = 1 << i8;
   i11 = 16 - i6 | 0;
   i2 = _png_calloc(i1, i9 << 2) | 0;
   HEAP32[i3 >> 2] = i2;
   i3 = 0;
   do {
    i13 = _png_malloc(i1, 512) | 0;
    HEAP32[i2 + (i3 << 2) >> 2] = i13;
    i3 = i3 + 1 | 0;
   } while (i3 >>> 0 < i9 >>> 0);
   i3 = (1 << i11) + -1 | 0;
   i11 = 255 >>> i6;
   i13 = 0;
   i14 = 0;
   while (1) {
    i15 = i14 * 257 | 0;
    i16 = i15 & 65535;
    i17 = (((Math_imul(i3, ~~+Math_floor(+(+Math_pow(+(+(i15 + 128 | 0) / 65535.0), +d12) * 65535.0 + .5)) & 65535) | 0) + 32768 | 0) >>> 0) / 65535 | 0;
    if (i13 >>> 0 > i17 >>> 0) i18 = i13; else {
     i15 = i17 + 1 | 0;
     i17 = i13;
     do {
      HEAP16[(HEAP32[i2 + ((i17 & i11) << 2) >> 2] | 0) + (i17 >>> i8 << 1) >> 1] = i16;
      i17 = i17 + 1 | 0;
     } while ((i17 | 0) != (i15 | 0));
     i18 = i15;
    }
    i14 = i14 + 1 | 0;
    if ((i14 | 0) == 255) break; else i13 = i18;
   }
   i13 = i9 << 8;
   if (i18 >>> 0 < i13 >>> 0) {
    i9 = i18;
    do {
     HEAP16[(HEAP32[i2 + ((i9 & i11) << 2) >> 2] | 0) + (i9 >>> i8 << 1) >> 1] = -1;
     i9 = i9 + 1 | 0;
    } while ((i9 | 0) != (i13 | 0));
   }
  }
  if (!(HEAP32[i5 >> 2] & 6291584)) return;
  i5 = i1 + 824 | 0;
  d12 = +Math_floor(+(1.0e10 / +(HEAP32[i5 >> 2] | 0) + .5));
  _png_build_16bit_table(i1, i1 + 512 | 0, i6, d12 <= 2147483647.0 & d12 >= -2147483648.0 ? ~~d12 : 0);
  i13 = HEAP32[i7 >> 2] | 0;
  if ((i13 | 0) > 0) {
   d12 = +Math_floor(+(1.0e10 / +(i13 | 0) + .5));
   i19 = d12 <= 2147483647.0 & d12 >= -2147483648.0 ? ~~d12 : 0;
  } else i19 = HEAP32[i5 >> 2] | 0;
  _png_build_16bit_table(i1, i1 + 508 | 0, i6, i19);
  return;
 }
 i19 = i1 + 488 | 0;
 i6 = HEAP32[i19 >> 2] | 0;
 do if ((i6 | 0) > 0) {
  i5 = HEAP32[i1 + 824 >> 2] | 0;
  if (i5 | 0) {
   d12 = +Math_floor(+(1.0e15 / +(i5 | 0) / +(i6 | 0) + .5));
   if (!(!(d12 >= -2147483648.0) | !(d12 <= 2147483647.0))) {
    i20 = ~~d12;
    break;
   }
  }
  i20 = 0;
 } else i20 = 1e5; while (0);
 i6 = _png_malloc(i1, 256) | 0;
 HEAP32[i4 >> 2] = i6;
 if ((i20 + -95e3 | 0) >>> 0 < 10001) {
  i4 = 0;
  do {
   HEAP8[i6 + i4 >> 0] = i4;
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) != 256);
 } else {
  d12 = +(i20 | 0) * 1.0e-05;
  i20 = 0;
  do {
   if ((i20 + -1 | 0) >>> 0 < 254) i21 = ~~+Math_floor(+(+Math_pow(+(+(i20 | 0) / 255.0), +d12) * 255.0 + .5)) & 255; else i21 = i20 & 255;
   HEAP8[i6 + i20 >> 0] = i21;
   i20 = i20 + 1 | 0;
  } while ((i20 | 0) != 256);
 }
 if (!(HEAP32[i1 + 216 >> 2] & 6291584)) return;
 i20 = i1 + 824 | 0;
 d12 = +Math_floor(+(1.0e10 / +(HEAP32[i20 >> 2] | 0) + .5));
 i21 = d12 <= 2147483647.0 & d12 >= -2147483648.0 ? ~~d12 : 0;
 i6 = _png_malloc(i1, 256) | 0;
 HEAP32[i1 + 504 >> 2] = i6;
 if ((i21 + -95e3 | 0) >>> 0 < 10001) {
  i4 = 0;
  do {
   HEAP8[i6 + i4 >> 0] = i4;
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) != 256);
 } else {
  d12 = +(i21 | 0) * 1.0e-05;
  i21 = 0;
  do {
   if ((i21 + -1 | 0) >>> 0 < 254) i22 = ~~+Math_floor(+(+Math_pow(+(+(i21 | 0) / 255.0), +d12) * 255.0 + .5)) & 255; else i22 = i21 & 255;
   HEAP8[i6 + i21 >> 0] = i22;
   i21 = i21 + 1 | 0;
  } while ((i21 | 0) != 256);
 }
 i21 = HEAP32[i19 >> 2] | 0;
 if ((i21 | 0) > 0) {
  d12 = +Math_floor(+(1.0e10 / +(i21 | 0) + .5));
  i23 = d12 <= 2147483647.0 & d12 >= -2147483648.0 ? ~~d12 : 0;
 } else i23 = HEAP32[i20 >> 2] | 0;
 i20 = _png_malloc(i1, 256) | 0;
 HEAP32[i1 + 500 >> 2] = i20;
 if ((i23 + -95e3 | 0) >>> 0 < 10001) {
  i1 = 0;
  do {
   HEAP8[i20 + i1 >> 0] = i1;
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) != 256);
  return;
 }
 d12 = +(i23 | 0) * 1.0e-05;
 i23 = 0;
 do {
  if ((i23 + -1 | 0) >>> 0 < 254) i24 = ~~+Math_floor(+(+Math_pow(+(+(i23 | 0) / 255.0), +d12) * 255.0 + .5)) & 255; else i24 = i23 & 255;
  HEAP8[i20 + i23 >> 0] = i24;
  i23 = i23 + 1 | 0;
 } while ((i23 | 0) != 256);
 return;
}

function __ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0;
 i8 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i10 = i9;
 i11 = __ZNKSt3__26locale9use_facetERNS0_2idE(i7, 5845220) | 0;
 i12 = __ZNKSt3__26locale9use_facetERNS0_2idE(i7, 5845228) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i12 >> 2] | 0) + 20 >> 2] & 63](i10, i12);
 HEAP32[i6 >> 2] = i4;
 i7 = HEAP8[i1 >> 0] | 0;
 switch (i7 << 24 >> 24) {
 case 43:
 case 45:
  {
   i13 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i11 >> 2] | 0) + 44 >> 2] & 31](i11, i7) | 0;
   i7 = HEAP32[i6 >> 2] | 0;
   HEAP32[i6 >> 2] = i7 + 4;
   HEAP32[i7 >> 2] = i13;
   i14 = i1 + 1 | 0;
   break;
  }
 default:
  i14 = i1;
 }
 i13 = i3;
 L4 : do if ((i13 - i14 | 0) > 1) if ((HEAP8[i14 >> 0] | 0) == 48) {
  i7 = i14 + 1 | 0;
  switch (HEAP8[i7 >> 0] | 0) {
  case 88:
  case 120:
   break;
  default:
   {
    i15 = i14;
    i8 = 10;
    break L4;
   }
  }
  i16 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i11 >> 2] | 0) + 44 >> 2] & 31](i11, 48) | 0;
  i17 = HEAP32[i6 >> 2] | 0;
  HEAP32[i6 >> 2] = i17 + 4;
  HEAP32[i17 >> 2] = i16;
  i16 = i14 + 2 | 0;
  i17 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i11 >> 2] | 0) + 44 >> 2] & 31](i11, HEAP8[i7 >> 0] | 0) | 0;
  i7 = HEAP32[i6 >> 2] | 0;
  HEAP32[i6 >> 2] = i7 + 4;
  HEAP32[i7 >> 2] = i17;
  i17 = i16;
  while (1) {
   if (i17 >>> 0 >= i3 >>> 0) {
    i18 = i16;
    i19 = i17;
    break L4;
   }
   i7 = HEAP8[i17 >> 0] | 0;
   if (!(_isxdigit_l(i7, __ZNSt3__26__clocEv() | 0) | 0)) {
    i18 = i16;
    i19 = i17;
    break L4;
   }
   i17 = i17 + 1 | 0;
  }
 } else {
  i15 = i14;
  i8 = 10;
 } else {
  i15 = i14;
  i8 = 10;
 } while (0);
 L12 : do if ((i8 | 0) == 10) while (1) {
  i8 = 0;
  if (i15 >>> 0 >= i3 >>> 0) {
   i18 = i14;
   i19 = i15;
   break L12;
  }
  i17 = HEAP8[i15 >> 0] | 0;
  if (!(_isdigit_l(i17, __ZNSt3__26__clocEv() | 0) | 0)) {
   i18 = i14;
   i19 = i15;
   break L12;
  }
  i15 = i15 + 1 | 0;
  i8 = 10;
 } while (0);
 i15 = i10 + 11 | 0;
 i14 = HEAP8[i15 >> 0] | 0;
 i17 = i10 + 4 | 0;
 L18 : do if (!((i14 << 24 >> 24 < 0 ? HEAP32[i17 >> 2] | 0 : i14 & 255) | 0)) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i11 >> 2] | 0) + 48 >> 2] & 7](i11, i18, i19, HEAP32[i6 >> 2] | 0) | 0;
  i16 = (HEAP32[i6 >> 2] | 0) + (i19 - i18 << 2) | 0;
  HEAP32[i6 >> 2] = i16;
  i20 = i11;
  i21 = i16;
 } else {
  L21 : do if ((i18 | 0) != (i19 | 0)) {
   i16 = i19;
   i7 = i18;
   while (1) {
    i22 = i16 + -1 | 0;
    if (i7 >>> 0 >= i22 >>> 0) break L21;
    i23 = HEAP8[i7 >> 0] | 0;
    HEAP8[i7 >> 0] = HEAP8[i22 >> 0] | 0;
    HEAP8[i22 >> 0] = i23;
    i16 = i22;
    i7 = i7 + 1 | 0;
   }
  } while (0);
  i7 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i12 >> 2] | 0) + 16 >> 2] & 127](i12) | 0;
  i16 = i18;
  i22 = 0;
  i23 = 0;
  while (1) {
   if (i16 >>> 0 >= i19 >>> 0) break;
   i24 = HEAP8[((HEAP8[i15 >> 0] | 0) < 0 ? HEAP32[i10 >> 2] | 0 : i10) + i22 >> 0] | 0;
   if (i24 << 24 >> 24 > 0 & (i23 | 0) == (i24 << 24 >> 24 | 0)) {
    i24 = HEAP32[i6 >> 2] | 0;
    HEAP32[i6 >> 2] = i24 + 4;
    HEAP32[i24 >> 2] = i7;
    i24 = HEAP8[i15 >> 0] | 0;
    i25 = i22 + (i22 >>> 0 < ((i24 << 24 >> 24 < 0 ? HEAP32[i17 >> 2] | 0 : i24 & 255) + -1 | 0) >>> 0 & 1) | 0;
    i26 = 0;
   } else {
    i25 = i22;
    i26 = i23;
   }
   i24 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i11 >> 2] | 0) + 44 >> 2] & 31](i11, HEAP8[i16 >> 0] | 0) | 0;
   i27 = HEAP32[i6 >> 2] | 0;
   HEAP32[i6 >> 2] = i27 + 4;
   HEAP32[i27 >> 2] = i24;
   i16 = i16 + 1 | 0;
   i22 = i25;
   i23 = i26 + 1 | 0;
  }
  i23 = i4 + (i18 - i1 << 2) | 0;
  i22 = HEAP32[i6 >> 2] | 0;
  if ((i23 | 0) == (i22 | 0)) {
   i20 = i11;
   i21 = i23;
  } else {
   i16 = i22;
   i7 = i23;
   while (1) {
    i23 = i16 + -4 | 0;
    if (i7 >>> 0 >= i23 >>> 0) {
     i20 = i11;
     i21 = i22;
     break L18;
    }
    i24 = HEAP32[i7 >> 2] | 0;
    HEAP32[i7 >> 2] = HEAP32[i23 >> 2];
    HEAP32[i23 >> 2] = i24;
    i16 = i23;
    i7 = i7 + 4 | 0;
   }
  }
 } while (0);
 i18 = i19;
 i19 = i21;
 while (1) {
  if (i18 >>> 0 >= i3 >>> 0) {
   i28 = i18;
   i29 = i19;
   break;
  }
  i21 = HEAP8[i18 >> 0] | 0;
  if (i21 << 24 >> 24 == 46) {
   i8 = 29;
   break;
  }
  i26 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i20 >> 2] | 0) + 44 >> 2] & 31](i11, i21) | 0;
  i21 = HEAP32[i6 >> 2] | 0;
  i25 = i21 + 4 | 0;
  HEAP32[i6 >> 2] = i25;
  HEAP32[i21 >> 2] = i26;
  i18 = i18 + 1 | 0;
  i19 = i25;
 }
 if ((i8 | 0) == 29) {
  i8 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i12 >> 2] | 0) + 12 >> 2] & 127](i12) | 0;
  i12 = HEAP32[i6 >> 2] | 0;
  i19 = i12 + 4 | 0;
  HEAP32[i6 >> 2] = i19;
  HEAP32[i12 >> 2] = i8;
  i28 = i18 + 1 | 0;
  i29 = i19;
 }
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i11 >> 2] | 0) + 48 >> 2] & 7](i11, i28, i3, i29) | 0;
 i29 = (HEAP32[i6 >> 2] | 0) + (i13 - i28 << 2) | 0;
 HEAP32[i6 >> 2] = i29;
 HEAP32[i5 >> 2] = (i2 | 0) == (i3 | 0) ? i29 : i4 + (i2 - i1 << 2) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i10);
 STACKTOP = i9;
 return;
}

function __ZN10ImDrawList8AddImageEPvRK6ImVec2S3_S3_S3_j(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0;
 if (i7 >>> 0 < 16777216) return;
 i8 = i1 + 72 | 0;
 i9 = HEAP32[i8 >> 2] | 0;
 i10 = (i9 | 0) == 0;
 if (!i10) {
  if ((i9 | 0) <= 0) ___assert_fail(38278, 56850, 1245, 38287);
  if ((HEAP32[(HEAP32[i1 + 80 >> 2] | 0) + (i9 + -1 << 2) >> 2] | 0) == (i2 | 0)) {
   __ZN10ImDrawList11PrimReserveEii(i1, 6, 4);
   i11 = HEAP32[i4 >> 2] | 0;
   i12 = HEAP32[i3 + 4 >> 2] | 0;
   i13 = HEAP32[i3 >> 2] | 0;
   i14 = HEAP32[i4 + 4 >> 2] | 0;
   i15 = HEAP32[i6 >> 2] | 0;
   i16 = HEAP32[i5 + 4 >> 2] | 0;
   i17 = HEAP32[i5 >> 2] | 0;
   i18 = HEAP32[i6 + 4 >> 2] | 0;
   i19 = i1 + 48 | 0;
   i20 = HEAP32[i19 >> 2] | 0;
   i21 = i20 & 65535;
   i22 = i1 + 56 | 0;
   i23 = HEAP32[i22 >> 2] | 0;
   HEAP16[i23 >> 1] = i21;
   HEAP16[i23 + 2 >> 1] = i20 + 1;
   i24 = i20 + 2 & 65535;
   HEAP16[i23 + 4 >> 1] = i24;
   HEAP16[i23 + 6 >> 1] = i21;
   HEAP16[i23 + 8 >> 1] = i24;
   HEAP16[i23 + 10 >> 1] = i20 + 3;
   i20 = i1 + 52 | 0;
   i23 = i3;
   i24 = HEAP32[i23 + 4 >> 2] | 0;
   i21 = HEAP32[i20 >> 2] | 0;
   HEAP32[i21 >> 2] = HEAP32[i23 >> 2];
   HEAP32[i21 + 4 >> 2] = i24;
   i24 = i5;
   i21 = HEAP32[i24 + 4 >> 2] | 0;
   i23 = (HEAP32[i20 >> 2] | 0) + 8 | 0;
   HEAP32[i23 >> 2] = HEAP32[i24 >> 2];
   HEAP32[i23 + 4 >> 2] = i21;
   i21 = HEAP32[i20 >> 2] | 0;
   HEAP32[i21 + 16 >> 2] = i7;
   HEAP32[i21 + 20 >> 2] = i11;
   HEAP32[i21 + 24 >> 2] = i12;
   i12 = HEAP32[i20 >> 2] | 0;
   HEAP32[i12 + 28 >> 2] = i15;
   HEAP32[i12 + 32 >> 2] = i16;
   i16 = HEAP32[i20 >> 2] | 0;
   HEAP32[i16 + 36 >> 2] = i7;
   i12 = i4;
   i15 = HEAP32[i12 + 4 >> 2] | 0;
   i21 = i16 + 40 | 0;
   HEAP32[i21 >> 2] = HEAP32[i12 >> 2];
   HEAP32[i21 + 4 >> 2] = i15;
   i15 = i6;
   i21 = HEAP32[i15 + 4 >> 2] | 0;
   i12 = (HEAP32[i20 >> 2] | 0) + 48 | 0;
   HEAP32[i12 >> 2] = HEAP32[i15 >> 2];
   HEAP32[i12 + 4 >> 2] = i21;
   i21 = HEAP32[i20 >> 2] | 0;
   HEAP32[i21 + 56 >> 2] = i7;
   HEAP32[i21 + 60 >> 2] = i13;
   HEAP32[i21 + 64 >> 2] = i14;
   i14 = HEAP32[i20 >> 2] | 0;
   HEAP32[i14 + 68 >> 2] = i17;
   HEAP32[i14 + 72 >> 2] = i18;
   i18 = HEAP32[i20 >> 2] | 0;
   HEAP32[i18 + 76 >> 2] = i7;
   HEAP32[i20 >> 2] = i18 + 80;
   HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 4;
   HEAP32[i22 >> 2] = (HEAP32[i22 >> 2] | 0) + 12;
   return;
  }
 }
 i22 = i2;
 i2 = i1 + 76 | 0;
 if ((i9 | 0) == (HEAP32[i2 >> 2] | 0)) {
  i19 = i9 + 1 | 0;
  i18 = i10 ? 8 : (i9 >>> 1) + i9 | 0;
  i10 = (i18 | 0) > (i19 | 0) ? i18 : i19;
  if ((i9 | 0) < (i10 | 0)) {
   i19 = __ZN5ImGui8MemAllocEj(i10 << 2) | 0;
   i18 = i1 + 80 | 0;
   i20 = HEAP32[i18 >> 2] | 0;
   if (!i20) i25 = i18; else {
    _memcpy(i19 | 0, i20 | 0, HEAP32[i8 >> 2] << 2 | 0) | 0;
    __ZN5ImGui7MemFreeEPv(HEAP32[i18 >> 2] | 0);
    i25 = i18;
   }
   HEAP32[i25 >> 2] = i19;
   HEAP32[i2 >> 2] = i10;
   i26 = HEAP32[i8 >> 2] | 0;
  } else i26 = i9;
 } else i26 = i9;
 HEAP32[(HEAP32[i1 + 80 >> 2] | 0) + (i26 << 2) >> 2] = i22;
 HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
 __ZN10ImDrawList15UpdateTextureIDEv(i1);
 __ZN10ImDrawList11PrimReserveEii(i1, 6, 4);
 i22 = HEAP32[i4 >> 2] | 0;
 i26 = HEAP32[i3 + 4 >> 2] | 0;
 i9 = HEAP32[i3 >> 2] | 0;
 i10 = HEAP32[i4 + 4 >> 2] | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 i19 = HEAP32[i5 + 4 >> 2] | 0;
 i25 = HEAP32[i5 >> 2] | 0;
 i18 = HEAP32[i6 + 4 >> 2] | 0;
 i20 = i1 + 48 | 0;
 i14 = HEAP32[i20 >> 2] | 0;
 i17 = i14 & 65535;
 i21 = i1 + 56 | 0;
 i13 = HEAP32[i21 >> 2] | 0;
 HEAP16[i13 >> 1] = i17;
 HEAP16[i13 + 2 >> 1] = i14 + 1;
 i12 = i14 + 2 & 65535;
 HEAP16[i13 + 4 >> 1] = i12;
 HEAP16[i13 + 6 >> 1] = i17;
 HEAP16[i13 + 8 >> 1] = i12;
 HEAP16[i13 + 10 >> 1] = i14 + 3;
 i14 = i1 + 52 | 0;
 i13 = i3;
 i3 = HEAP32[i13 + 4 >> 2] | 0;
 i12 = HEAP32[i14 >> 2] | 0;
 HEAP32[i12 >> 2] = HEAP32[i13 >> 2];
 HEAP32[i12 + 4 >> 2] = i3;
 i3 = i5;
 i5 = HEAP32[i3 + 4 >> 2] | 0;
 i12 = (HEAP32[i14 >> 2] | 0) + 8 | 0;
 HEAP32[i12 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i12 + 4 >> 2] = i5;
 i5 = HEAP32[i14 >> 2] | 0;
 HEAP32[i5 + 16 >> 2] = i7;
 HEAP32[i5 + 20 >> 2] = i22;
 HEAP32[i5 + 24 >> 2] = i26;
 i26 = HEAP32[i14 >> 2] | 0;
 HEAP32[i26 + 28 >> 2] = i2;
 HEAP32[i26 + 32 >> 2] = i19;
 i19 = HEAP32[i14 >> 2] | 0;
 HEAP32[i19 + 36 >> 2] = i7;
 i26 = i4;
 i4 = HEAP32[i26 + 4 >> 2] | 0;
 i2 = i19 + 40 | 0;
 HEAP32[i2 >> 2] = HEAP32[i26 >> 2];
 HEAP32[i2 + 4 >> 2] = i4;
 i4 = i6;
 i6 = HEAP32[i4 + 4 >> 2] | 0;
 i2 = (HEAP32[i14 >> 2] | 0) + 48 | 0;
 HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i2 + 4 >> 2] = i6;
 i6 = HEAP32[i14 >> 2] | 0;
 HEAP32[i6 + 56 >> 2] = i7;
 HEAP32[i6 + 60 >> 2] = i9;
 HEAP32[i6 + 64 >> 2] = i10;
 i10 = HEAP32[i14 >> 2] | 0;
 HEAP32[i10 + 68 >> 2] = i25;
 HEAP32[i10 + 72 >> 2] = i18;
 i18 = HEAP32[i14 >> 2] | 0;
 HEAP32[i18 + 76 >> 2] = i7;
 HEAP32[i14 >> 2] = i18 + 80;
 HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + 4;
 HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + 12;
 i21 = HEAP32[i8 >> 2] | 0;
 if ((i21 | 0) <= 0) ___assert_fail(38328, 38201, 484, 38353);
 HEAP32[i8 >> 2] = i21 + -1;
 __ZN10ImDrawList15UpdateTextureIDEv(i1);
 return;
}

function __ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0;
 i8 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i10 = i9;
 i11 = __ZNKSt3__26locale9use_facetERNS0_2idE(i7, 5845188) | 0;
 i12 = __ZNKSt3__26locale9use_facetERNS0_2idE(i7, 5845204) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i12 >> 2] | 0) + 20 >> 2] & 63](i10, i12);
 HEAP32[i6 >> 2] = i4;
 i7 = HEAP8[i1 >> 0] | 0;
 switch (i7 << 24 >> 24) {
 case 43:
 case 45:
  {
   i13 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i11 >> 2] | 0) + 28 >> 2] & 31](i11, i7) | 0;
   i7 = HEAP32[i6 >> 2] | 0;
   HEAP32[i6 >> 2] = i7 + 1;
   HEAP8[i7 >> 0] = i13;
   i14 = i1 + 1 | 0;
   break;
  }
 default:
  i14 = i1;
 }
 i13 = i3;
 L4 : do if ((i13 - i14 | 0) > 1) if ((HEAP8[i14 >> 0] | 0) == 48) {
  i7 = i14 + 1 | 0;
  switch (HEAP8[i7 >> 0] | 0) {
  case 88:
  case 120:
   break;
  default:
   {
    i15 = i14;
    i8 = 10;
    break L4;
   }
  }
  i16 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i11 >> 2] | 0) + 28 >> 2] & 31](i11, 48) | 0;
  i17 = HEAP32[i6 >> 2] | 0;
  HEAP32[i6 >> 2] = i17 + 1;
  HEAP8[i17 >> 0] = i16;
  i16 = i14 + 2 | 0;
  i17 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i11 >> 2] | 0) + 28 >> 2] & 31](i11, HEAP8[i7 >> 0] | 0) | 0;
  i7 = HEAP32[i6 >> 2] | 0;
  HEAP32[i6 >> 2] = i7 + 1;
  HEAP8[i7 >> 0] = i17;
  i17 = i16;
  while (1) {
   if (i17 >>> 0 >= i3 >>> 0) {
    i18 = i16;
    i19 = i17;
    break L4;
   }
   i7 = HEAP8[i17 >> 0] | 0;
   if (!(_isxdigit_l(i7, __ZNSt3__26__clocEv() | 0) | 0)) {
    i18 = i16;
    i19 = i17;
    break L4;
   }
   i17 = i17 + 1 | 0;
  }
 } else {
  i15 = i14;
  i8 = 10;
 } else {
  i15 = i14;
  i8 = 10;
 } while (0);
 L12 : do if ((i8 | 0) == 10) while (1) {
  i8 = 0;
  if (i15 >>> 0 >= i3 >>> 0) {
   i18 = i14;
   i19 = i15;
   break L12;
  }
  i17 = HEAP8[i15 >> 0] | 0;
  if (!(_isdigit_l(i17, __ZNSt3__26__clocEv() | 0) | 0)) {
   i18 = i14;
   i19 = i15;
   break L12;
  }
  i15 = i15 + 1 | 0;
  i8 = 10;
 } while (0);
 i15 = i10 + 11 | 0;
 i14 = HEAP8[i15 >> 0] | 0;
 i17 = i10 + 4 | 0;
 L18 : do if (!((i14 << 24 >> 24 < 0 ? HEAP32[i17 >> 2] | 0 : i14 & 255) | 0)) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i11 >> 2] | 0) + 32 >> 2] & 7](i11, i18, i19, HEAP32[i6 >> 2] | 0) | 0;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + (i19 - i18);
  i20 = i11;
 } else {
  L21 : do if ((i18 | 0) != (i19 | 0)) {
   i16 = i19;
   i7 = i18;
   while (1) {
    i21 = i16 + -1 | 0;
    if (i7 >>> 0 >= i21 >>> 0) break L21;
    i22 = HEAP8[i7 >> 0] | 0;
    HEAP8[i7 >> 0] = HEAP8[i21 >> 0] | 0;
    HEAP8[i21 >> 0] = i22;
    i16 = i21;
    i7 = i7 + 1 | 0;
   }
  } while (0);
  i7 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i12 >> 2] | 0) + 16 >> 2] & 127](i12) | 0;
  i16 = i18;
  i21 = 0;
  i22 = 0;
  while (1) {
   if (i16 >>> 0 >= i19 >>> 0) break;
   i23 = HEAP8[((HEAP8[i15 >> 0] | 0) < 0 ? HEAP32[i10 >> 2] | 0 : i10) + i22 >> 0] | 0;
   if (i23 << 24 >> 24 > 0 & (i21 | 0) == (i23 << 24 >> 24 | 0)) {
    i23 = HEAP32[i6 >> 2] | 0;
    HEAP32[i6 >> 2] = i23 + 1;
    HEAP8[i23 >> 0] = i7;
    i23 = HEAP8[i15 >> 0] | 0;
    i24 = i22 + (i22 >>> 0 < ((i23 << 24 >> 24 < 0 ? HEAP32[i17 >> 2] | 0 : i23 & 255) + -1 | 0) >>> 0 & 1) | 0;
    i25 = 0;
   } else {
    i24 = i22;
    i25 = i21;
   }
   i23 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i11 >> 2] | 0) + 28 >> 2] & 31](i11, HEAP8[i16 >> 0] | 0) | 0;
   i26 = HEAP32[i6 >> 2] | 0;
   HEAP32[i6 >> 2] = i26 + 1;
   HEAP8[i26 >> 0] = i23;
   i16 = i16 + 1 | 0;
   i21 = i25 + 1 | 0;
   i22 = i24;
  }
  i22 = i4 + (i18 - i1) | 0;
  i21 = HEAP32[i6 >> 2] | 0;
  if ((i22 | 0) == (i21 | 0)) i20 = i11; else {
   i16 = i21;
   i21 = i22;
   while (1) {
    i22 = i16 + -1 | 0;
    if (i21 >>> 0 >= i22 >>> 0) {
     i20 = i11;
     break L18;
    }
    i7 = HEAP8[i21 >> 0] | 0;
    HEAP8[i21 >> 0] = HEAP8[i22 >> 0] | 0;
    HEAP8[i22 >> 0] = i7;
    i16 = i22;
    i21 = i21 + 1 | 0;
   }
  }
 } while (0);
 i18 = i19;
 while (1) {
  if (i18 >>> 0 >= i3 >>> 0) {
   i27 = i18;
   break;
  }
  i19 = HEAP8[i18 >> 0] | 0;
  if (i19 << 24 >> 24 == 46) {
   i8 = 29;
   break;
  }
  i24 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i20 >> 2] | 0) + 28 >> 2] & 31](i11, i19) | 0;
  i19 = HEAP32[i6 >> 2] | 0;
  HEAP32[i6 >> 2] = i19 + 1;
  HEAP8[i19 >> 0] = i24;
  i18 = i18 + 1 | 0;
 }
 if ((i8 | 0) == 29) {
  i8 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i12 >> 2] | 0) + 12 >> 2] & 127](i12) | 0;
  i12 = HEAP32[i6 >> 2] | 0;
  HEAP32[i6 >> 2] = i12 + 1;
  HEAP8[i12 >> 0] = i8;
  i27 = i18 + 1 | 0;
 }
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i11 >> 2] | 0) + 32 >> 2] & 7](i11, i27, i3, HEAP32[i6 >> 2] | 0) | 0;
 i11 = (HEAP32[i6 >> 2] | 0) + (i13 - i27) | 0;
 HEAP32[i6 >> 2] = i11;
 HEAP32[i5 >> 2] = (i2 | 0) == (i3 | 0) ? i11 : i4 + (i2 - i1) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i10);
 STACKTOP = i9;
 return;
}

function _png_icc_check_header(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i7 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224);
 i9 = i8 + 24 | 0;
 i10 = i8;
 i11 = (HEAPU8[i5 + 1 >> 0] | 0) << 16 | (HEAPU8[i5 >> 0] | 0) << 24 | (HEAPU8[i5 + 2 >> 0] | 0) << 8 | (HEAPU8[i5 + 3 >> 0] | 0);
 if ((i11 | 0) != (i4 | 0)) {
  _png_icc_profile_error(i1, i2, i3, i11, 62022);
  i12 = 0;
  STACKTOP = i8;
  return i12 | 0;
 }
 if (!((i4 & 3 | 0) == 0 | (HEAPU8[i5 + 8 >> 0] | 0) < 4)) {
  _png_icc_profile_error(i1, i2, i3, i4, 62052);
  i12 = 0;
  STACKTOP = i8;
  return i12 | 0;
 }
 i11 = (HEAPU8[i5 + 129 >> 0] | 0) << 16 | (HEAPU8[i5 + 128 >> 0] | 0) << 24 | (HEAPU8[i5 + 130 >> 0] | 0) << 8 | (HEAPU8[i5 + 131 >> 0] | 0);
 if (i11 >>> 0 <= 357913930) if (((i11 * 12 | 0) + 132 | 0) >>> 0 <= i4 >>> 0) {
  i4 = (HEAPU8[i5 + 65 >> 0] | 0) << 16 | (HEAPU8[i5 + 64 >> 0] | 0) << 24 | (HEAPU8[i5 + 66 >> 0] | 0) << 8 | (HEAPU8[i5 + 67 >> 0] | 0);
  if (i4 >>> 0 > 65534) {
   _png_icc_profile_error(i1, i2, i3, i4, 62087);
   i12 = 0;
   STACKTOP = i8;
   return i12 | 0;
  }
  if (i4 >>> 0 > 3) _png_icc_profile_error(i1, 0, i3, i4, 62112);
  i4 = (HEAPU8[i5 + 37 >> 0] | 0) << 16 | (HEAPU8[i5 + 36 >> 0] | 0) << 24 | (HEAPU8[i5 + 38 >> 0] | 0) << 8 | (HEAPU8[i5 + 39 >> 0] | 0);
  if ((i4 | 0) != 1633907568) {
   _png_icc_profile_error(i1, i2, i3, i4, 62141);
   i12 = 0;
   STACKTOP = i8;
   return i12 | 0;
  }
  if (_memcmp(i5 + 68 | 0, 62159, 12) | 0) {
   i4 = _png_safecat(i9, 196, 0, 61913) | 0;
   i13 = _png_safecat(i9, 196, _png_safecat(i9, i4 + 79 | 0, i4, i3) | 0, 61923) | 0;
   _png_safecat(i9, 196, _png_safecat(i9, 196, _png_safecat(i9, 196, i13, _png_format_number(i10, i10 + 24 | 0, 3, 0) | 0) | 0, 61927) | 0, 62171) | 0;
   _png_chunk_report(i1, i9, 1);
  }
  i9 = (HEAPU8[i5 + 17 >> 0] | 0) << 16 | (HEAPU8[i5 + 16 >> 0] | 0) << 24 | (HEAPU8[i5 + 18 >> 0] | 0) << 8 | (HEAPU8[i5 + 19 >> 0] | 0);
  L26 : do if ((i9 | 0) < 1380401696) {
   switch (i9 | 0) {
   case 1196573017:
    break;
   default:
    {
     i7 = 21;
     break L26;
    }
   }
   if (i6 & 2 | 0) {
    _png_icc_profile_error(i1, i2, i3, 1196573017, 62244);
    i12 = 0;
    STACKTOP = i8;
    return i12 | 0;
   }
  } else {
   switch (i9 | 0) {
   case 1380401696:
    break;
   default:
    {
     i7 = 21;
     break L26;
    }
   }
   if (!(i6 & 2)) {
    _png_icc_profile_error(i1, i2, i3, 1380401696, 62197);
    i12 = 0;
    STACKTOP = i8;
    return i12 | 0;
   }
  } while (0);
  if ((i7 | 0) == 21) {
   _png_icc_profile_error(i1, i2, i3, i9, 62286);
   i12 = 0;
   STACKTOP = i8;
   return i12 | 0;
  }
  i9 = (HEAPU8[i5 + 13 >> 0] | 0) << 16 | (HEAPU8[i5 + 12 >> 0] | 0) << 24 | (HEAPU8[i5 + 14 >> 0] | 0) << 8 | (HEAPU8[i5 + 15 >> 0] | 0);
  L39 : do if ((i9 | 0) < 1852662636) {
   if ((i9 | 0) < 1818848875) {
    switch (i9 | 0) {
    case 1633842036:
     break;
    default:
     {
      i7 = 26;
      break L39;
     }
    }
    _png_icc_profile_error(i1, i2, i3, 1633842036, 62318);
    i12 = 0;
    STACKTOP = i8;
    return i12 | 0;
   }
   if ((i9 | 0) >= 1835955314) switch (i9 | 0) {
   case 1835955314:
    {
     break L39;
     break;
    }
   default:
    {
     i7 = 26;
     break L39;
    }
   }
   switch (i9 | 0) {
   case 1818848875:
    break;
   default:
    {
     i7 = 26;
     break L39;
    }
   }
   _png_icc_profile_error(i1, i2, i3, 1818848875, 62356);
   i12 = 0;
   STACKTOP = i8;
   return i12 | 0;
  } else {
   if ((i9 | 0) >= 1935896178) if ((i9 | 0) < 1936744803) switch (i9 | 0) {
   case 1935896178:
    {
     break L39;
     break;
    }
   default:
    {
     i7 = 26;
     break L39;
    }
   } else switch (i9 | 0) {
   case 1936744803:
    {
     break L39;
     break;
    }
   default:
    {
     i7 = 26;
     break L39;
    }
   }
   if ((i9 | 0) >= 1886549106) switch (i9 | 0) {
   case 1886549106:
    {
     break L39;
     break;
    }
   default:
    {
     i7 = 26;
     break L39;
    }
   }
   switch (i9 | 0) {
   case 1852662636:
    break;
   default:
    {
     i7 = 26;
     break L39;
    }
   }
   _png_icc_profile_error(i1, 0, i3, 1852662636, 62396);
  } while (0);
  if ((i7 | 0) == 26) _png_icc_profile_error(i1, 0, i3, i9, 62436);
  i9 = (HEAPU8[i5 + 21 >> 0] | 0) << 16 | (HEAPU8[i5 + 20 >> 0] | 0) << 24 | (HEAPU8[i5 + 22 >> 0] | 0) << 8 | (HEAPU8[i5 + 23 >> 0] | 0);
  L65 : do if ((i9 | 0) < 1482250784) {
   switch (i9 | 0) {
   case 1281450528:
    {
     i12 = 1;
     break;
    }
   default:
    break L65;
   }
   STACKTOP = i8;
   return i12 | 0;
  } else {
   switch (i9 | 0) {
   case 1482250784:
    {
     i12 = 1;
     break;
    }
   default:
    break L65;
   }
   STACKTOP = i8;
   return i12 | 0;
  } while (0);
  _png_icc_profile_error(i1, i2, i3, i9, 62467);
  i12 = 0;
  STACKTOP = i8;
  return i12 | 0;
 }
 _png_icc_profile_error(i1, i2, i3, i11, 62067);
 i12 = 0;
 STACKTOP = i8;
 return i12 | 0;
}

function __Z22ImFontAtlasBuildFinishP11ImFontAtlas(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, f23 = f0, f24 = f0, f25 = f0, i26 = 0, f27 = f0, f28 = f0, f29 = f0, f30 = f0, f31 = f0, i32 = 0;
 i2 = 0;
 i3 = HEAP32[i1 + 84 >> 2] | 0;
 if ((i3 | 0) <= -1) ___assert_fail(51445, 38201, 1965, 51474);
 i4 = i1 + 16 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 if (!i5) ___assert_fail(51511, 38201, 1966, 51474);
 i6 = i1 + 60 | 0;
 if ((HEAP32[i6 >> 2] | 0) <= (i3 | 0)) ___assert_fail(56841, 56850, 1235, 56909);
 i7 = i1 + 68 | 0;
 i8 = HEAP32[i7 >> 2] | 0;
 if ((HEAP32[i8 + (i3 * 28 | 0) >> 2] | 0) != -2147483648) ___assert_fail(51540, 38201, 1968, 51474);
 i9 = i8 + (i3 * 28 | 0) + 8 | 0;
 i10 = HEAP16[i9 >> 1] | 0;
 if (i10 << 16 >> 16 == -1) ___assert_fail(51579, 38201, 1969, 51474);
 i11 = i1 + 24 | 0;
 i12 = HEAP32[i11 >> 2] | 0;
 i13 = HEAP16[i8 + (i3 * 28 | 0) + 4 >> 1] | 0;
 do if (!(HEAP32[i1 >> 2] & 2)) {
  if (i13 << 16 >> 16 != 217) ___assert_fail(51592, 38201, 1975, 51474);
  if ((HEAP16[i8 + (i3 * 28 | 0) + 6 >> 1] | 0) != 27) ___assert_fail(51592, 38201, 1975, 51474);
  i14 = i8 + (i3 * 28 | 0) + 10 | 0;
  i15 = 0;
  i16 = 0;
  while (1) {
   i17 = 0;
   i18 = i15;
   while (1) {
    i19 = i17 + (HEAPU16[i9 >> 1] | 0) + (Math_imul(i16 + (HEAPU16[i14 >> 1] | 0) | 0, i12) | 0) | 0;
    i20 = HEAP8[51691 + i18 >> 0] | 0;
    i21 = i20 << 24 >> 24 | 0;
    HEAP8[(HEAP32[i4 >> 2] | 0) + i19 >> 0] = ((i21 | 0) == 46) << 31 >> 31;
    HEAP8[(HEAP32[i4 >> 2] | 0) + (i19 + 109) >> 0] = ((i21 | 0) == 88) << 31 >> 31;
    i17 = i17 + 1 | 0;
    if ((i17 | 0) == 108) break; else i18 = i18 + 1 | 0;
   }
   i16 = i16 + 1 | 0;
   if ((i16 | 0) == 27) {
    i22 = i14;
    break;
   } else i15 = i15 + 108 | 0;
  }
 } else {
  if (i13 << 16 >> 16 != 2) ___assert_fail(54608, 38201, 1987, 51474);
  if ((HEAP16[i8 + (i3 * 28 | 0) + 6 >> 1] | 0) == 2) {
   i15 = i8 + (i3 * 28 | 0) + 10 | 0;
   i14 = (Math_imul(i12, HEAPU16[i15 >> 1] | 0) | 0) + (i10 & 65535) | 0;
   i16 = i14 + i12 | 0;
   HEAP8[i5 + (i16 + 1) >> 0] = -1;
   HEAP8[(HEAP32[i4 >> 2] | 0) + i16 >> 0] = -1;
   HEAP8[(HEAP32[i4 >> 2] | 0) + (i14 + 1) >> 0] = -1;
   HEAP8[(HEAP32[i4 >> 2] | 0) + i14 >> 0] = -1;
   i22 = i15;
   break;
  } else ___assert_fail(54608, 38201, 1987, 51474);
 } while (0);
 f23 = Math_fround(Math_fround(HEAPU16[i9 >> 1] | 0) + Math_fround(.5));
 i9 = i1 + 32 | 0;
 f24 = Math_fround(Math_fround(HEAPF32[i9 >> 2]) * f23);
 f23 = Math_fround(Math_fround(HEAPU16[i22 >> 1] | 0) + Math_fround(.5));
 i22 = i1 + 36 | 0;
 f25 = Math_fround(Math_fround(HEAPF32[i22 >> 2]) * f23);
 HEAPF32[i1 + 40 >> 2] = f24;
 HEAPF32[i1 + 44 >> 2] = f25;
 i4 = HEAP32[i6 >> 2] | 0;
 L37 : do if ((i4 | 0) > 0) {
  i5 = i1 + 28 | 0;
  i12 = 0;
  i10 = i4;
  while (1) {
   i3 = HEAP32[i7 >> 2] | 0;
   i8 = HEAP32[i3 + (i12 * 28 | 0) + 24 >> 2] | 0;
   if (!i8) i26 = i10; else {
    i13 = HEAP32[i3 + (i12 * 28 | 0) >> 2] | 0;
    if (i13 >>> 0 > 65536) i26 = i10; else {
     if ((HEAP32[i8 + 68 >> 2] | 0) != (i1 | 0)) {
      i2 = 30;
      break;
     }
     if ((HEAP32[i11 >> 2] | 0) <= 0) {
      i2 = 33;
      break;
     }
     if ((HEAP32[i5 >> 2] | 0) <= 0) {
      i2 = 33;
      break;
     }
     i15 = HEAP16[i3 + (i12 * 28 | 0) + 8 >> 1] | 0;
     if (i15 << 16 >> 16 == -1) {
      i2 = 35;
      break;
     }
     f25 = Math_fround(i15 & 65535);
     f24 = Math_fround(HEAPF32[i9 >> 2]);
     f23 = Math_fround(f24 * f25);
     i14 = i3 + (i12 * 28 | 0) | 0;
     i3 = HEAP16[i14 + 10 >> 1] | 0;
     f25 = Math_fround(i3 & 65535);
     f27 = Math_fround(HEAPF32[i22 >> 2]);
     f28 = Math_fround(f27 * f25);
     i16 = HEAP16[i14 + 4 >> 1] | 0;
     f25 = Math_fround(f24 * Math_fround((i16 & 65535) + (i15 & 65535) | 0));
     i15 = HEAP16[i14 + 6 >> 1] | 0;
     f24 = Math_fround(f27 * Math_fround((i15 & 65535) + (i3 & 65535) | 0));
     f27 = Math_fround(HEAPF32[i14 + 16 >> 2]);
     f29 = Math_fround(HEAPF32[i14 + 20 >> 2]);
     f30 = Math_fround(f27 + Math_fround(i16 & 65535));
     f31 = Math_fround(f29 + Math_fround(i15 & 65535));
     __ZN6ImFont8AddGlyphEtfffffffff(i8, i13 & 65535, f27, f29, f30, f31, f23, f28, f25, f24, Math_fround(HEAPF32[i14 + 12 >> 2]));
     i26 = HEAP32[i6 >> 2] | 0;
    }
   }
   i12 = i12 + 1 | 0;
   if ((i12 | 0) >= (i26 | 0)) break L37; else i10 = i26;
  }
  if ((i2 | 0) == 30) ___assert_fail(54638, 38201, 2006, 54670); else if ((i2 | 0) == 33) ___assert_fail(54693, 38201, 1644, 54723); else if ((i2 | 0) == 35) ___assert_fail(54740, 38201, 1645, 54723);
 } while (0);
 i2 = i1 + 48 | 0;
 i26 = HEAP32[i2 >> 2] | 0;
 if ((i26 | 0) <= 0) return;
 i6 = i1 + 56 | 0;
 i1 = 0;
 i22 = i26;
 while (1) {
  i26 = HEAP32[(HEAP32[i6 >> 2] | 0) + (i1 << 2) >> 2] | 0;
  if (!(HEAP8[i26 + 80 >> 0] | 0)) i32 = i22; else {
   __ZN6ImFont16BuildLookupTableEv(i26);
   i32 = HEAP32[i2 >> 2] | 0;
  }
  i1 = i1 + 1 | 0;
  if ((i1 | 0) >= (i32 | 0)) break; else i22 = i32;
 }
 return;
}

function _fmod(d1, d2) {
 d1 = +d1;
 d2 = +d2;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, d44 = 0.0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, d52 = 0.0;
 i3 = 0;
 HEAPF64[tempDoublePtr >> 3] = d1;
 i4 = HEAP32[tempDoublePtr >> 2] | 0;
 i5 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAPF64[tempDoublePtr >> 3] = d2;
 i6 = HEAP32[tempDoublePtr >> 2] | 0;
 i7 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 i8 = _bitshift64Lshr(i4 | 0, i5 | 0, 52) | 0;
 i9 = i8 & 2047;
 i8 = _bitshift64Lshr(i6 | 0, i7 | 0, 52) | 0;
 i10 = i8 & 2047;
 i8 = i5 & -2147483648;
 i11 = _bitshift64Shl(i6 | 0, i7 | 0, 1) | 0;
 i12 = tempRet0;
 L1 : do if ((i11 | 0) == 0 & (i12 | 0) == 0) i3 = 3; else {
  i13 = ___DOUBLE_BITS_406(d2) | 0;
  i14 = tempRet0 & 2147483647;
  if ((i9 | 0) == 2047 | (i14 >>> 0 > 2146435072 | (i14 | 0) == 2146435072 & i13 >>> 0 > 0)) i3 = 3; else {
   i13 = _bitshift64Shl(i4 | 0, i5 | 0, 1) | 0;
   i14 = tempRet0;
   if (!(i14 >>> 0 > i12 >>> 0 | (i14 | 0) == (i12 | 0) & i13 >>> 0 > i11 >>> 0)) return +((i13 | 0) == (i11 | 0) & (i14 | 0) == (i12 | 0) ? d1 * 0.0 : d1);
   if (!i9) {
    i14 = _bitshift64Shl(i4 | 0, i5 | 0, 12) | 0;
    i13 = tempRet0;
    if ((i13 | 0) > -1 | (i13 | 0) == -1 & i14 >>> 0 > 4294967295) {
     i15 = 0;
     i16 = i14;
     i14 = i13;
     while (1) {
      i13 = i15 + -1 | 0;
      i16 = _bitshift64Shl(i16 | 0, i14 | 0, 1) | 0;
      i14 = tempRet0;
      if (!((i14 | 0) > -1 | (i14 | 0) == -1 & i16 >>> 0 > 4294967295)) {
       i17 = i13;
       break;
      } else i15 = i13;
     }
    } else i17 = 0;
    i15 = _bitshift64Shl(i4 | 0, i5 | 0, 1 - i17 | 0) | 0;
    i18 = i17;
    i19 = i15;
    i20 = tempRet0;
   } else {
    i18 = i9;
    i19 = i4;
    i20 = i5 & 1048575 | 1048576;
   }
   if (!i10) {
    i15 = _bitshift64Shl(i6 | 0, i7 | 0, 12) | 0;
    i16 = tempRet0;
    if ((i16 | 0) > -1 | (i16 | 0) == -1 & i15 >>> 0 > 4294967295) {
     i14 = 0;
     i13 = i15;
     i15 = i16;
     while (1) {
      i16 = i14 + -1 | 0;
      i13 = _bitshift64Shl(i13 | 0, i15 | 0, 1) | 0;
      i15 = tempRet0;
      if (!((i15 | 0) > -1 | (i15 | 0) == -1 & i13 >>> 0 > 4294967295)) {
       i21 = i16;
       break;
      } else i14 = i16;
     }
    } else i21 = 0;
    i14 = _bitshift64Shl(i6 | 0, i7 | 0, 1 - i21 | 0) | 0;
    i22 = i21;
    i23 = i14;
    i24 = tempRet0;
   } else {
    i22 = i10;
    i23 = i6;
    i24 = i7 & 1048575 | 1048576;
   }
   i14 = _i64Subtract(i19 | 0, i20 | 0, i23 | 0, i24 | 0) | 0;
   i13 = tempRet0;
   i15 = (i13 | 0) > -1 | (i13 | 0) == -1 & i14 >>> 0 > 4294967295;
   L23 : do if ((i18 | 0) > (i22 | 0)) {
    i16 = i18;
    i25 = i13;
    i26 = i15;
    i27 = i19;
    i28 = i20;
    i29 = i14;
    while (1) {
     if (i26) if ((i29 | 0) == 0 & (i25 | 0) == 0) break; else {
      i30 = i29;
      i31 = i25;
     } else {
      i30 = i27;
      i31 = i28;
     }
     i32 = _bitshift64Shl(i30 | 0, i31 | 0, 1) | 0;
     i33 = tempRet0;
     i34 = i16 + -1 | 0;
     i35 = _i64Subtract(i32 | 0, i33 | 0, i23 | 0, i24 | 0) | 0;
     i36 = tempRet0;
     i37 = (i36 | 0) > -1 | (i36 | 0) == -1 & i35 >>> 0 > 4294967295;
     if ((i34 | 0) > (i22 | 0)) {
      i16 = i34;
      i25 = i36;
      i26 = i37;
      i27 = i32;
      i28 = i33;
      i29 = i35;
     } else {
      i38 = i34;
      i39 = i37;
      i40 = i35;
      i41 = i36;
      i42 = i32;
      i43 = i33;
      break L23;
     }
    }
    d44 = d1 * 0.0;
    break L1;
   } else {
    i38 = i18;
    i39 = i15;
    i40 = i14;
    i41 = i13;
    i42 = i19;
    i43 = i20;
   } while (0);
   if (i39) if ((i40 | 0) == 0 & (i41 | 0) == 0) {
    d44 = d1 * 0.0;
    break;
   } else {
    i45 = i41;
    i46 = i40;
   } else {
    i45 = i43;
    i46 = i42;
   }
   if (i45 >>> 0 < 1048576 | (i45 | 0) == 1048576 & i46 >>> 0 < 0) {
    i13 = i38;
    i14 = i46;
    i15 = i45;
    while (1) {
     i29 = _bitshift64Shl(i14 | 0, i15 | 0, 1) | 0;
     i28 = tempRet0;
     i27 = i13 + -1 | 0;
     if (i28 >>> 0 < 1048576 | (i28 | 0) == 1048576 & i29 >>> 0 < 0) {
      i13 = i27;
      i14 = i29;
      i15 = i28;
     } else {
      i47 = i27;
      i48 = i29;
      i49 = i28;
      break;
     }
    }
   } else {
    i47 = i38;
    i48 = i46;
    i49 = i45;
   }
   if ((i47 | 0) > 0) {
    i15 = _i64Add(i48 | 0, i49 | 0, 0, -1048576) | 0;
    i14 = tempRet0;
    i13 = _bitshift64Shl(i47 | 0, 0, 52) | 0;
    i50 = i14 | tempRet0;
    i51 = i15 | i13;
   } else {
    i13 = _bitshift64Lshr(i48 | 0, i49 | 0, 1 - i47 | 0) | 0;
    i50 = tempRet0;
    i51 = i13;
   }
   HEAP32[tempDoublePtr >> 2] = i51;
   HEAP32[tempDoublePtr + 4 >> 2] = i50 | i8;
   d44 = +HEAPF64[tempDoublePtr >> 3];
  }
 } while (0);
 if ((i3 | 0) == 3) {
  d52 = d1 * d2;
  d44 = d52 / d52;
 }
 return +d44;
}

function __ZN5ImGui25NavMoveRequestTryWrappingEP11ImGuiWindowi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, f9 = f0, i10 = 0, f11 = f0, i12 = 0, f13 = f0, i14 = 0, f15 = f0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, f20 = f0, f21 = f0, f22 = f0, f23 = f0, i24 = 0, f25 = f0, i26 = 0, f27 = f0, i28 = 0, f29 = f0, f30 = f0, i31 = 0, i32 = 0, f33 = f0, f34 = f0, i35 = 0;
 i3 = HEAP32[1460598] | 0;
 i4 = i3 + 6644 | 0;
 if ((HEAP32[i4 >> 2] | 0) != (i1 | 0)) return;
 i5 = i3 + 6757 | 0;
 if (!(HEAP8[i5 >> 0] | 0)) return;
 if (HEAP32[i3 + 6780 >> 2] | 0) return;
 if (HEAP32[i3 + 6852 >> 2] | 0) return;
 i6 = i3 + 6764 | 0;
 if (HEAP32[i6 >> 2] | 0) return;
 i7 = i3 + 6720 | 0;
 if (HEAP32[i7 >> 2] | 0) return;
 if (!i2) ___assert_fail(37780, 31803, 5339, 37796);
 i8 = i1 + 784 | 0;
 f9 = Math_fround(HEAPF32[i8 >> 2]);
 i10 = i1 + 788 | 0;
 f11 = Math_fround(HEAPF32[i10 >> 2]);
 i12 = i1 + 792 | 0;
 f13 = Math_fround(HEAPF32[i12 >> 2]);
 i14 = i1 + 796 | 0;
 f15 = Math_fround(HEAPF32[i14 >> 2]);
 i16 = i3 + 6768 | 0;
 i17 = HEAP32[i16 >> 2] | 0;
 i18 = (i2 & 5 | 0) == 0;
 if (i18 | (i17 | 0) != 0) {
  i19 = i17;
  f20 = f9;
  f21 = f11;
  f22 = f13;
  f23 = f15;
  i24 = i17;
 } else {
  f13 = Math_fround(HEAPF32[i1 + 28 >> 2]);
  f9 = Math_fround(HEAPF32[i1 + 44 >> 2]);
  f25 = Math_fround((f13 >= f9 ? f13 : f9) - Math_fround(HEAPF32[i1 + 84 >> 2]));
  i17 = i2 & 4;
  i26 = (i17 | 0) == 0;
  f9 = Math_fround(f15 - f11);
  f13 = Math_fround(f11 - f9);
  f27 = Math_fround(f15 - f9);
  f9 = i26 ? f15 : f27;
  f27 = i26 ? f11 : f13;
  i26 = i17 >>> 1;
  HEAP8[i5 >> 0] = 0;
  HEAP8[i3 + 6732 >> 0] = HEAP8[i3 + 6733 >> 0] | 0;
  HEAP32[i16 >> 2] = 0;
  HEAP32[i3 + 6776 >> 2] = i26;
  HEAP32[i6 >> 2] = 1;
  HEAP32[i3 + 6760 >> 2] = i2;
  HEAPF32[i8 >> 2] = f25;
  HEAPF32[i10 >> 2] = f27;
  HEAPF32[i12 >> 2] = f25;
  HEAPF32[i14 >> 2] = f9;
  i19 = i26;
  f20 = f25;
  f21 = f27;
  f22 = f25;
  f23 = f9;
  i24 = HEAP32[i16 >> 2] | 0;
 }
 do if (i18 | (i24 | 0) != 1) {
  i28 = i19;
  f29 = f20;
  f30 = f22;
  i31 = i24;
 } else {
  f9 = Math_fround(-Math_fround(HEAPF32[i1 + 84 >> 2]));
  i26 = (i2 & 4 | 0) == 0;
  f25 = Math_fround(f23 - f21);
  f27 = Math_fround(f21 + f25);
  f13 = Math_fround(f23 + f25);
  i14 = i26 ? i19 : 3;
  if (HEAP32[i6 >> 2] | 0) ___assert_fail(37822, 31803, 5325, 37870);
  HEAP8[i5 >> 0] = 0;
  i12 = HEAP8[i3 + 6733 >> 0] | 0;
  HEAP8[i3 + 6732 >> 0] = i12;
  i10 = HEAP32[i4 >> 2] | 0;
  if (i12 << 24 >> 24 != 0 & (i10 | 0) == 0) ___assert_fail(34237, 31803, 2509, 34255); else {
   HEAP32[i16 >> 2] = 1;
   HEAP32[i3 + 6776 >> 2] = i14;
   HEAP32[i6 >> 2] = 1;
   HEAP32[i3 + 6760 >> 2] = i2;
   i12 = HEAP32[i7 >> 2] | 0;
   i8 = i10 + 784 + (i12 << 4) | 0;
   HEAPF32[i8 >> 2] = f9;
   HEAPF32[i8 + 4 >> 2] = i26 ? f21 : f27;
   HEAPF32[i8 + 8 >> 2] = f9;
   HEAPF32[i8 + 12 >> 2] = i26 ? f23 : f13;
   i28 = i14;
   f29 = f9;
   f30 = f9;
   i31 = HEAP32[i16 >> 2] | 0;
   break;
  }
 } while (0);
 i19 = (i2 & 10 | 0) == 0;
 do if (i19 | (i31 | 0) != 2) {
  i32 = i28;
  f33 = f29;
  f34 = f30;
  i35 = i31;
 } else {
  f23 = Math_fround(HEAPF32[i1 + 32 >> 2]);
  f21 = Math_fround(HEAPF32[i1 + 48 >> 2]);
  f22 = Math_fround((f23 >= f21 ? f23 : f21) - Math_fround(HEAPF32[i1 + 88 >> 2]));
  i24 = (i2 & 8 | 0) == 0;
  f21 = Math_fround(f30 - f29);
  f23 = Math_fround(f29 - f21);
  f20 = Math_fround(f30 - f21);
  f21 = i24 ? f30 : f20;
  f20 = i24 ? f29 : f23;
  i18 = i24 ? i28 : 0;
  if (HEAP32[i6 >> 2] | 0) ___assert_fail(37822, 31803, 5325, 37870);
  HEAP8[i5 >> 0] = 0;
  i24 = HEAP8[i3 + 6733 >> 0] | 0;
  HEAP8[i3 + 6732 >> 0] = i24;
  i14 = HEAP32[i4 >> 2] | 0;
  if (i24 << 24 >> 24 != 0 & (i14 | 0) == 0) ___assert_fail(34237, 31803, 2509, 34255); else {
   HEAP32[i16 >> 2] = 2;
   HEAP32[i3 + 6776 >> 2] = i18;
   HEAP32[i6 >> 2] = 1;
   HEAP32[i3 + 6760 >> 2] = i2;
   i24 = HEAP32[i7 >> 2] | 0;
   i26 = i14 + 784 + (i24 << 4) | 0;
   HEAPF32[i26 >> 2] = f20;
   HEAPF32[i26 + 4 >> 2] = f22;
   HEAPF32[i26 + 8 >> 2] = f21;
   HEAPF32[i26 + 12 >> 2] = f22;
   i32 = i18;
   f33 = f20;
   f34 = f21;
   i35 = HEAP32[i16 >> 2] | 0;
   break;
  }
 } while (0);
 if (i19 | (i35 | 0) != 3) return;
 f29 = Math_fround(-Math_fround(HEAPF32[i1 + 88 >> 2]));
 i1 = (i2 & 8 | 0) == 0;
 f30 = Math_fround(f34 - f33);
 f21 = Math_fround(f33 + f30);
 f20 = Math_fround(f34 + f30);
 if (HEAP32[i6 >> 2] | 0) ___assert_fail(37822, 31803, 5325, 37870);
 HEAP8[i5 >> 0] = 0;
 i5 = HEAP8[i3 + 6733 >> 0] | 0;
 HEAP8[i3 + 6732 >> 0] = i5;
 i35 = HEAP32[i4 >> 2] | 0;
 if (i5 << 24 >> 24 != 0 & (i35 | 0) == 0) ___assert_fail(34237, 31803, 2509, 34255);
 HEAP32[i16 >> 2] = 3;
 HEAP32[i3 + 6776 >> 2] = i1 ? i32 : 1;
 HEAP32[i6 >> 2] = 1;
 HEAP32[i3 + 6760 >> 2] = i2;
 i2 = HEAP32[i7 >> 2] | 0;
 i7 = i35 + 784 + (i2 << 4) | 0;
 HEAPF32[i7 >> 2] = i1 ? f33 : f21;
 HEAPF32[i7 + 4 >> 2] = f29;
 HEAPF32[i7 + 8 >> 2] = i1 ? f34 : f20;
 HEAPF32[i7 + 12 >> 2] = f29;
 return;
}

function __ZN5ImGui11CloseButtonEjRK6ImVec2f(i1, i2, f3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 f3 = Math_fround(f3);
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, f12 = f0, f13 = f0, f14 = f0, f15 = f0, f16 = f0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, f21 = f0, f22 = f0, f23 = f0, i24 = 0, i25 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i5 = i4 + 24 | 0;
 i6 = i4 + 41 | 0;
 i7 = i4 + 40 | 0;
 i8 = i4 + 16 | 0;
 i9 = i4 + 8 | 0;
 i10 = i4;
 i11 = HEAP32[(HEAP32[1460598] | 0) + 6392 >> 2] | 0;
 f12 = Math_fround(HEAPF32[i2 >> 2]);
 f13 = Math_fround(f12 - f3);
 f14 = Math_fround(HEAPF32[i2 + 4 >> 2]);
 f15 = Math_fround(f14 - f3);
 f16 = Math_fround(f12 + f3);
 f12 = Math_fround(f14 + f3);
 HEAPF32[i5 >> 2] = f13;
 i2 = i5 + 4 | 0;
 HEAPF32[i2 >> 2] = f15;
 i17 = i5 + 8 | 0;
 HEAPF32[i17 >> 2] = f16;
 i18 = i5 + 12 | 0;
 HEAPF32[i18 >> 2] = f12;
 i19 = __ZN5ImGui7ItemAddERK6ImRectjPS1_(i5, i1, 0) | 0;
 i20 = __ZN5ImGui14ButtonBehaviorERK6ImRectjPbS3_i(i5, i1, i6, i7, 0) | 0;
 if (!i19) {
  STACKTOP = i4;
  return i20 | 0;
 }
 f12 = Math_fround(HEAPF32[i5 >> 2]);
 f16 = Math_fround(Math_fround(f12 + Math_fround(HEAPF32[i17 >> 2])) * Math_fround(.5));
 f12 = Math_fround(HEAPF32[i2 >> 2]);
 f15 = Math_fround(Math_fround(f12 + Math_fround(HEAPF32[i18 >> 2])) * Math_fround(.5));
 HEAPF32[i8 >> 2] = f16;
 i18 = i8 + 4 | 0;
 HEAPF32[i18 >> 2] = f15;
 i2 = i11 + 632 | 0;
 if (!(HEAP8[i6 >> 0] | 0)) {
  f21 = f16;
  f22 = f15;
 } else {
  i6 = f3 <= Math_fround(2.0);
  f15 = i6 ? Math_fround(2.0) : f3;
  i6 = HEAP8[i7 >> 0] | 0 ? 23 : 22;
  i7 = HEAP32[1460598] | 0;
  i11 = i7 + 5508 + (i6 << 4) | 0;
  f16 = Math_fround(HEAPF32[i11 >> 2]);
  f12 = Math_fround(HEAPF32[i11 + 4 >> 2]);
  f13 = Math_fround(HEAPF32[i11 + 8 >> 2]);
  f14 = Math_fround(HEAPF32[i11 + 12 >> 2]);
  f23 = Math_fround(f14 * Math_fround(HEAPF32[i7 + 5356 >> 2]));
  i7 = f16 < Math_fround(0.0);
  i11 = f16 > Math_fround(1.0);
  i6 = ~~Math_fround(Math_fround((i11 ? Math_fround(1.0) : f16) * Math_fround(255.0)) + Math_fround(.5));
  i11 = f12 < Math_fround(0.0);
  i17 = f12 > Math_fround(1.0);
  i5 = ~~Math_fround(Math_fround((i17 ? Math_fround(1.0) : f12) * Math_fround(255.0)) + Math_fround(.5)) << 8;
  i17 = f13 < Math_fround(0.0);
  i19 = f13 > Math_fround(1.0);
  i1 = ~~Math_fround(Math_fround((i19 ? Math_fround(1.0) : f13) * Math_fround(255.0)) + Math_fround(.5)) << 16;
  i19 = f23 < Math_fround(0.0);
  i24 = f23 > Math_fround(1.0);
  i25 = ~~Math_fround(Math_fround((i24 ? Math_fround(1.0) : f23) * Math_fround(255.0)) + Math_fround(.5)) << 24;
  __ZN10ImDrawList15AddCircleFilledERK6ImVec2fji(HEAP32[i2 >> 2] | 0, i8, f15, (i11 ? 0 : i5) | (i7 ? 0 : i6) | (i17 ? 0 : i1) | (i19 ? 0 : i25), 9);
  f15 = Math_fround(HEAPF32[i8 >> 2]);
  f21 = f15;
  f22 = Math_fround(HEAPF32[i18 >> 2]);
 }
 f15 = Math_fround(Math_fround(f3 * Math_fround(.707099974)) + Math_fround(-1.0));
 i25 = HEAP32[1460598] | 0;
 f3 = Math_fround(HEAPF32[i25 + 5508 >> 2]);
 f23 = Math_fround(HEAPF32[i25 + 5512 >> 2]);
 f13 = Math_fround(HEAPF32[i25 + 5516 >> 2]);
 f12 = Math_fround(HEAPF32[i25 + 5520 >> 2]);
 f16 = Math_fround(f12 * Math_fround(HEAPF32[i25 + 5356 >> 2]));
 i25 = f3 < Math_fround(0.0);
 i19 = f3 > Math_fround(1.0);
 i1 = ~~Math_fround(Math_fround((i19 ? Math_fround(1.0) : f3) * Math_fround(255.0)) + Math_fround(.5));
 i19 = f23 < Math_fround(0.0);
 i17 = f23 > Math_fround(1.0);
 i6 = ~~Math_fround(Math_fround((i17 ? Math_fround(1.0) : f23) * Math_fround(255.0)) + Math_fround(.5)) << 8;
 i17 = f13 < Math_fround(0.0);
 i7 = f13 > Math_fround(1.0);
 i5 = ~~Math_fround(Math_fround((i7 ? Math_fround(1.0) : f13) * Math_fround(255.0)) + Math_fround(.5)) << 16;
 i7 = f16 < Math_fround(0.0);
 i11 = f16 > Math_fround(1.0);
 i24 = ~~Math_fround(Math_fround((i11 ? Math_fround(1.0) : f16) * Math_fround(255.0)) + Math_fround(.5)) << 24;
 i11 = (i19 ? 0 : i6) | (i25 ? 0 : i1) | (i17 ? 0 : i5) | (i7 ? 0 : i24);
 f16 = Math_fround(f21 + Math_fround(-.5));
 HEAPF32[i8 >> 2] = f16;
 f21 = Math_fround(f22 + Math_fround(-.5));
 HEAPF32[i18 >> 2] = f21;
 i24 = HEAP32[i2 >> 2] | 0;
 f22 = Math_fround(f15 + f16);
 f13 = Math_fround(f15 + f21);
 HEAPF32[i9 >> 2] = f22;
 HEAPF32[i9 + 4 >> 2] = f13;
 f13 = Math_fround(f16 - f15);
 f16 = Math_fround(f21 - f15);
 HEAPF32[i10 >> 2] = f13;
 HEAPF32[i10 + 4 >> 2] = f16;
 __ZN10ImDrawList7AddLineERK6ImVec2S2_jf(i24, i9, i10, i11, Math_fround(1.0));
 i24 = HEAP32[i2 >> 2] | 0;
 f16 = Math_fround(HEAPF32[i8 >> 2]);
 f13 = Math_fround(f15 + f16);
 f21 = Math_fround(HEAPF32[i18 >> 2]);
 f22 = Math_fround(f21 - f15);
 HEAPF32[i9 >> 2] = f13;
 HEAPF32[i9 + 4 >> 2] = f22;
 f22 = Math_fround(f16 - f15);
 f16 = Math_fround(f15 + f21);
 HEAPF32[i10 >> 2] = f22;
 HEAPF32[i10 + 4 >> 2] = f16;
 __ZN10ImDrawList7AddLineERK6ImVec2S2_jf(i24, i9, i10, i11, Math_fround(1.0));
 STACKTOP = i4;
 return i20 | 0;
}

function __ZL12BeginChildExPKcjRK6ImVec2bi(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, f14 = f0, f15 = f0, f16 = f0, f17 = f0, f18 = f0, i19 = 0, f20 = f0, i21 = 0, i22 = 0, f23 = f0, f24 = f0, i25 = 0, i26 = 0;
 i6 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(272);
 i8 = i7 + 8 | 0;
 i9 = i7;
 i10 = i7 + 16 | 0;
 i11 = HEAP32[1460598] | 0;
 i12 = HEAP32[i11 + 6392 >> 2] | 0;
 HEAP8[i12 + 120 >> 0] = 1;
 i13 = HEAP32[i12 + 8 >> 2] & 4;
 f14 = Math_fround(HEAPF32[i12 + 536 >> 2]);
 f15 = Math_fround(HEAPF32[i12 + 12 >> 2]);
 f16 = Math_fround(f14 - f15);
 f14 = Math_fround(HEAPF32[i12 + 540 >> 2]);
 f17 = Math_fround(HEAPF32[i12 + 16 >> 2]);
 f18 = Math_fround(f14 - f17);
 i19 = HEAP32[i12 + 448 >> 2] | 0;
 do if (!i19) f20 = f16; else {
  i21 = HEAP32[i19 + 12 >> 2] | 0;
  i22 = i21 + ((i21 | 0) > -2 & 1) | 0;
  if ((i22 | 0) < (HEAP32[i19 + 44 >> 2] | 0)) {
   f14 = Math_fround(HEAPF32[(HEAP32[i19 + 52 >> 2] | 0) + (i22 * 28 | 0) >> 2]);
   f23 = Math_fround(HEAPF32[i19 + 20 >> 2]);
   f24 = Math_fround(f23 + Math_fround(f14 * Math_fround(Math_fround(HEAPF32[i19 + 24 >> 2]) - f23)));
   f20 = Math_fround(f24 - Math_fround(HEAPF32[i12 + 60 >> 2]));
   break;
  } else ___assert_fail(32132, 31803, 13059, 32169);
 } while (0);
 f16 = Math_fround(Math_fround(HEAPF32[i12 + 196 >> 2]) - f15);
 f15 = Math_fround(f20 - f16);
 f16 = Math_fround(f18 - Math_fround(Math_fround(HEAPF32[i12 + 200 >> 2]) - f17));
 i19 = ~~Math_fround(HEAPF32[i3 >> 2]);
 f17 = Math_fround(i19 | 0);
 i22 = ~~Math_fround(HEAPF32[i3 + 4 >> 2]);
 f18 = Math_fround(i22 | 0);
 f20 = Math_fround(f15 + f17);
 i3 = f20 >= Math_fround(4.0);
 f15 = i3 ? f20 : Math_fround(4.0);
 f20 = Math_fround(f16 + f18);
 i3 = f20 >= Math_fround(4.0);
 f16 = i3 ? f20 : Math_fround(4.0);
 i3 = i11 + 5396 | 0;
 i21 = HEAP32[i3 >> 2] | 0;
 if (!i4) HEAPF32[i3 >> 2] = Math_fround(0.0);
 i4 = HEAP32[i12 >> 2] | 0;
 if (!i1) {
  HEAP32[i8 >> 2] = i4;
  HEAP32[i8 + 4 >> 2] = i2;
  __Z14ImFormatStringPcjPKcz(i10, 256, 33620, i8) | 0;
 } else {
  HEAP32[i9 >> 2] = i4;
  HEAP32[i9 + 4 >> 2] = i1;
  __Z14ImFormatStringPcjPKcz(i10, 256, 33614, i9) | 0;
 }
 i9 = HEAP32[1460598] | 0;
 HEAPF32[i9 + 6580 >> 2] = (i19 | 0) > 0 ? f17 : f15;
 HEAPF32[i9 + 6584 >> 2] = (i22 | 0) > 0 ? f18 : f16;
 HEAP32[i9 + 6540 >> 2] = 1;
 i9 = __ZN5ImGui5BeginEPKcPbi(i10, 0, i13 | i5 | 16777475) | 0;
 i13 = HEAP32[(HEAP32[1460598] | 0) + 6392 >> 2] | 0;
 HEAP8[i13 + 120 >> 0] = 1;
 HEAP32[i13 + 80 >> 2] = i2;
 HEAP32[i13 + 156 >> 2] = ((i22 | 0) == 0 ? 2 : 0) | (i19 | 0) == 0;
 HEAP32[i3 >> 2] = i21;
 if (i5 & 8388608 | 0) {
  STACKTOP = i7;
  return i9 | 0;
 }
 if (!(HEAP32[i13 + 308 >> 2] | 0)) if (!(HEAP8[i13 + 297 >> 0] | 0)) {
  STACKTOP = i7;
  return i9 | 0;
 }
 if ((HEAP32[i11 + 6652 >> 2] | 0) != (i2 | 0)) {
  STACKTOP = i7;
  return i9 | 0;
 }
 __ZN5ImGui11FocusWindowEP11ImGuiWindow(i13);
 i5 = HEAP32[1460598] | 0;
 if ((HEAP32[i5 + 6644 >> 2] | 0) != (i13 | 0)) ___assert_fail(33628, 31803, 2895, 33650);
 i21 = HEAP32[i13 + 8 >> 2] | 0;
 do if (!(i21 & 262144)) {
  if ((i21 & 83886080 | 0) == 16777216) {
   i3 = HEAP32[i13 + 776 >> 2] | 0;
   if (i3 | 0) {
    i25 = i3;
    i6 = 23;
    break;
   }
  }
  i3 = HEAP32[i5 + 6720 >> 2] | 0;
  if (i3 >>> 0 < 2) {
   HEAP32[i5 + 6648 >> 2] = 0;
   HEAP32[i13 + 776 + (i3 << 2) >> 2] = 0;
   HEAP8[i5 + 6733 >> 0] = 1;
   HEAP8[i5 + 6734 >> 0] = 0;
   HEAP32[i5 + 6736 >> 2] = 0;
   HEAPF32[i5 + 6740 >> 2] = Math_fround(3402823469999999843913219.0e14);
   HEAPF32[i5 + 6744 >> 2] = Math_fround(3402823469999999843913219.0e14);
   HEAPF32[i5 + 6748 >> 2] = Math_fround(-3402823469999999843913219.0e14);
   HEAPF32[i5 + 6752 >> 2] = Math_fround(-3402823469999999843913219.0e14);
   HEAP8[i5 + 6732 >> 0] = 1;
   break;
  } else ___assert_fail(33664, 31803, 2163, 33697);
 } else {
  i25 = HEAP32[i13 + 776 >> 2] | 0;
  i6 = 23;
 } while (0);
 if ((i6 | 0) == 23) HEAP32[i5 + 6648 >> 2] = i25;
 i25 = i2 + 1 | 0;
 i2 = i5 + 6420 | 0;
 i6 = (HEAP32[i2 >> 2] | 0) != (i25 | 0);
 HEAP8[i5 + 6433 >> 0] = i6 & 1;
 if (i6) {
  HEAPF32[i5 + 6428 >> 2] = Math_fround(0.0);
  HEAP8[i5 + 6435 >> 0] = 0;
  if (i25 | 0) {
   HEAP32[i5 + 6464 >> 2] = i25;
   HEAPF32[i5 + 6468 >> 2] = Math_fround(0.0);
  }
 }
 HEAP32[i2 >> 2] = i25;
 HEAP32[i5 + 6440 >> 2] = 0;
 HEAP8[i5 + 6434 >> 0] = 0;
 HEAP32[i5 + 6452 >> 2] = i13;
 if (i25 | 0) {
  HEAP8[i5 + 6432 >> 0] = 1;
  if ((HEAP32[i5 + 6652 >> 2] | 0) == (i25 | 0)) i26 = 2; else if ((HEAP32[i5 + 6664 >> 2] | 0) == (i25 | 0)) i26 = 2; else if ((HEAP32[i5 + 6668 >> 2] | 0) == (i25 | 0)) i26 = 2; else i26 = (HEAP32[i5 + 6672 >> 2] | 0) == (i25 | 0) ? 2 : 1;
  HEAP32[i5 + 6460 >> 2] = i26;
 }
 HEAP32[i11 + 6460 >> 2] = 2;
 STACKTOP = i7;
 return i9 | 0;
}

function _png_do_read_interlace(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0;
 i5 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i6;
 if (!((i1 | 0) != 0 & (i2 | 0) != 0)) {
  STACKTOP = i6;
  return;
 }
 i8 = HEAP32[i1 >> 2] | 0;
 i9 = HEAP32[4772 + (i3 << 2) >> 2] | 0;
 i3 = Math_imul(i9, i8) | 0;
 i10 = i1 + 11 | 0;
 i11 = HEAP8[i10 >> 0] | 0;
 switch (i11 << 24 >> 24) {
 case 1:
  {
   i12 = i8 + 7 & 7;
   if (!(i4 & 65536)) {
    i13 = i12 ^ 7;
    i14 = i3 + 7 & 7 ^ 7;
    i15 = 0;
    i16 = 7;
    i17 = 1;
   } else {
    i13 = i12;
    i14 = i3 + 7 & 7;
    i15 = 7;
    i16 = 0;
    i17 = -1;
   }
   if (!i8) i5 = 30; else {
    i12 = i2 + ((i8 + -1 | 0) >>> 3) | 0;
    i18 = i2 + ((i3 + -1 | 0) >>> 3) | 0;
    i19 = 0;
    i20 = i13;
    i13 = i14;
    while (1) {
     i14 = (HEAPU8[i12 >> 0] | 0) >>> i20 & 1;
     i21 = 0;
     i22 = i18;
     i23 = i13;
     do {
      HEAP8[i22 >> 0] = 32639 >>> (7 - i23 | 0) & (HEAPU8[i22 >> 0] | 0) | i14 << i23;
      i24 = (i23 | 0) == (i16 | 0);
      i23 = i24 ? i15 : i23 + i17 | 0;
      i22 = i24 ? i22 + -1 | 0 : i22;
      i21 = i21 + 1 | 0;
     } while ((i21 | 0) < (i9 | 0));
     i21 = (i20 | 0) == (i16 | 0);
     i19 = i19 + 1 | 0;
     if (i19 >>> 0 >= (HEAP32[i1 >> 2] | 0) >>> 0) {
      i5 = 30;
      break;
     } else {
      i12 = i21 ? i12 + -1 | 0 : i12;
      i18 = i22;
      i20 = i21 ? i15 : i20 + i17 | 0;
      i13 = i23;
     }
    }
   }
   break;
  }
 case 2:
  {
   i13 = (i8 << 1) + 6 & 6;
   if (!(i4 & 65536)) {
    i25 = 2;
    i26 = 6;
    i27 = 0;
    i28 = (i3 << 1) + 6 & 6 ^ 6;
    i29 = i13 ^ 6;
   } else {
    i25 = -2;
    i26 = 0;
    i27 = 6;
    i28 = (i3 << 1) + 6 & 6;
    i29 = i13;
   }
   if (!i8) i5 = 30; else {
    i13 = 0;
    i17 = i2 + ((i3 + -1 | 0) >>> 2) | 0;
    i20 = i2 + ((i8 + -1 | 0) >>> 2) | 0;
    i15 = i28;
    i28 = i29;
    while (1) {
     i29 = (HEAPU8[i20 >> 0] | 0) >>> i28 & 3;
     i18 = 0;
     i12 = i17;
     i19 = i15;
     do {
      HEAP8[i12 >> 0] = 16191 >>> (6 - i19 | 0) & (HEAPU8[i12 >> 0] | 0) | i29 << i19;
      i16 = (i19 | 0) == (i26 | 0);
      i12 = i16 ? i12 + -1 | 0 : i12;
      i19 = i16 ? i27 : i19 + i25 | 0;
      i18 = i18 + 1 | 0;
     } while ((i18 | 0) < (i9 | 0));
     i18 = (i28 | 0) == (i26 | 0);
     i13 = i13 + 1 | 0;
     if (i13 >>> 0 >= (HEAP32[i1 >> 2] | 0) >>> 0) {
      i5 = 30;
      break;
     } else {
      i17 = i12;
      i20 = i18 ? i20 + -1 | 0 : i20;
      i15 = i19;
      i28 = i18 ? i27 : i28 + i25 | 0;
     }
    }
   }
   break;
  }
 case 4:
  {
   i25 = i8 & 1;
   if (!(i4 & 65536)) {
    i30 = 4;
    i31 = 4;
    i32 = 0;
    i33 = i3 & 1;
    i34 = i25;
   } else {
    i30 = -4;
    i31 = 0;
    i32 = 4;
    i33 = i3 & 1 ^ 1;
    i34 = i25 ^ 1;
   }
   if (!i8) i5 = 30; else {
    i25 = 0;
    i4 = i2 + ((i3 + -1 | 0) >>> 1) | 0;
    i28 = i2 + ((i8 + -1 | 0) >>> 1) | 0;
    i27 = i33 << 2;
    i33 = i34 << 2;
    while (1) {
     i34 = (HEAPU8[i28 >> 0] | 0) >>> i33 & 15;
     i15 = 0;
     i20 = i4;
     i17 = i27;
     do {
      HEAP8[i20 >> 0] = 3855 >>> (4 - i17 | 0) & (HEAPU8[i20 >> 0] | 0) | i34 << i17;
      i13 = (i17 | 0) == (i31 | 0);
      i20 = i13 ? i20 + -1 | 0 : i20;
      i17 = i13 ? i32 : i17 + i30 | 0;
      i15 = i15 + 1 | 0;
     } while ((i15 | 0) < (i9 | 0));
     i15 = (i33 | 0) == (i31 | 0);
     i25 = i25 + 1 | 0;
     if (i25 >>> 0 >= (HEAP32[i1 >> 2] | 0) >>> 0) {
      i5 = 30;
      break;
     } else {
      i4 = i20;
      i28 = i15 ? i28 + -1 | 0 : i28;
      i27 = i17;
      i33 = i15 ? i32 : i33 + i30 | 0;
     }
    }
   }
   break;
  }
 default:
  {
   i30 = (i11 & 255) >>> 3;
   if (!i8) i35 = i11; else {
    i11 = 0 - i30 | 0;
    i33 = 0;
    i32 = i2 + (Math_imul(i30, i3 + -1 | 0) | 0) | 0;
    i27 = i2 + (Math_imul(i30, i8 + -1 | 0) | 0) | 0;
    while (1) {
     _memcpy(i7 | 0, i27 | 0, i30 | 0) | 0;
     i8 = 0;
     i2 = i32;
     do {
      _memcpy(i2 | 0, i7 | 0, i30 | 0) | 0;
      i2 = i2 + i11 | 0;
      i8 = i8 + 1 | 0;
     } while ((i8 | 0) < (i9 | 0));
     i33 = i33 + 1 | 0;
     if (i33 >>> 0 >= (HEAP32[i1 >> 2] | 0) >>> 0) {
      i5 = 30;
      break;
     } else {
      i32 = i2;
      i27 = i27 + i11 | 0;
     }
    }
   }
  }
 }
 if ((i5 | 0) == 30) i35 = HEAP8[i10 >> 0] | 0;
 HEAP32[i1 >> 2] = i3;
 i10 = i35 & 255;
 if ((i35 & 255) > 7) i36 = Math_imul(i10 >>> 3, i3) | 0; else i36 = ((Math_imul(i3, i10) | 0) + 7 | 0) >>> 3;
 HEAP32[i1 + 4 >> 2] = i36;
 STACKTOP = i6;
 return;
}

function __ZN15CityMapRenderer14generateQueue0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, d21 = 0.0, f22 = f0, f23 = f0, i24 = 0, i25 = 0, f26 = f0, f27 = f0, f28 = f0, f29 = f0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 i4 = i3 + 64 | 0;
 i5 = i3;
 __ZN11RenderQueue5clearEv(i1);
 i6 = i1 + 248 | 0;
 i7 = HEAP32[i6 >> 2] | 0;
 if (!(HEAP32[i7 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 i8 = i1 + 252 | 0;
 i9 = i5 + 4 | 0;
 i10 = i5 + 20 | 0;
 i11 = i5 + 24 | 0;
 i12 = i5 + 40 | 0;
 i13 = i5 + 44 | 0;
 i14 = i5 + 48 | 0;
 i15 = i5 + 52 | 0;
 i16 = i5 + 56 | 0;
 i17 = i5 + 60 | 0;
 i18 = 0;
 i19 = i7;
 while (1) {
  if (!(HEAP32[i19 + 4 >> 2] | 0)) i20 = i19; else {
   d21 = +(i18 | 0) * .5;
   f22 = Math_fround(i18 | 0);
   f23 = Math_fround(f22 * Math_fround(0.0));
   i7 = 0;
   i24 = i19;
   while (1) {
    i25 = HEAP32[i8 >> 2] | 0;
    f26 = Math_fround(d21 - +HEAPF64[i25 + 48 >> 3]);
    f27 = Math_fround(+(i7 | 0) * .5 - +HEAPF64[i25 + 56 >> 3]);
    f28 = Math_fround(f26 + f27);
    if (Math_fround(Math_fround(f28 + Math_fround(1.0)) * Math_fround(.125)) > Math_fround(-1.0)) if (Math_fround(Math_fround(f28 + Math_fround(-1.0)) * Math_fround(.125)) < Math_fround(1.0)) {
     f28 = Math_fround(f26 - f27);
     if (Math_fround(Math_fround(f28 + Math_fround(1.0)) * Math_fround(.125)) > Math_fround(-1.0)) if (Math_fround(Math_fround(f28 + Math_fround(-1.0)) * Math_fround(.125)) < Math_fround(1.0)) {
      f28 = Math_fround(i7 | 0);
      HEAP32[i5 >> 2] = 1065353216;
      HEAP32[i9 >> 2] = 0;
      HEAP32[i9 + 4 >> 2] = 0;
      HEAP32[i9 + 8 >> 2] = 0;
      HEAP32[i9 + 12 >> 2] = 0;
      HEAP32[i10 >> 2] = 1065353216;
      HEAP32[i11 >> 2] = 0;
      HEAP32[i11 + 4 >> 2] = 0;
      HEAP32[i11 + 8 >> 2] = 0;
      HEAP32[i11 + 12 >> 2] = 0;
      HEAP32[i12 >> 2] = 1065353216;
      HEAPF32[i13 >> 2] = Math_fround(0.0);
      f27 = Math_fround(f28 * Math_fround(0.0));
      f26 = Math_fround(Math_fround(f27 + f22) + Math_fround(0.0));
      f29 = Math_fround(Math_fround(f23 + f28) + Math_fround(0.0));
      f28 = Math_fround(Math_fround(f23 + f27) + Math_fround(0.0));
      f27 = Math_fround(f28 + Math_fround(1.0));
      HEAPF32[i14 >> 2] = f26;
      HEAPF32[i15 >> 2] = f29;
      HEAPF32[i16 >> 2] = f28;
      HEAPF32[i17 >> 2] = f27;
      i25 = (__ZN7CityMap7getTileEjj(i24, i18, i7) | 0) + 8 | 0;
      do if (!(HEAP32[i25 >> 2] | 0)) i2 = 16; else {
       i30 = (__ZN7CityMap7getTileEjj(HEAP32[i6 >> 2] | 0, i18, i7) | 0) + 12 | 0;
       if (!(HEAP32[i30 >> 2] | 0)) {
        i30 = (__ZN7CityMap7getTileEjj(HEAP32[i6 >> 2] | 0, i18, i7) | 0) + 8 | 0;
        i31 = (HEAP32[i30 >> 2] | 0) == 1;
        __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i8 >> 2] | 0) + 44 >> 2] | 0);
        if (i31) {
         __ZN11RenderQueue7setMeshEi(i1, 7);
         i32 = i4;
         i33 = i5;
         i34 = i32 + 64 | 0;
         do {
          HEAP32[i32 >> 2] = HEAP32[i33 >> 2];
          i32 = i32 + 4 | 0;
          i33 = i33 + 4 | 0;
         } while ((i32 | 0) < (i34 | 0));
         __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i4);
         break;
        } else {
         __ZN11RenderQueue7setMeshEi(i1, 8);
         i32 = i4;
         i33 = i5;
         i34 = i32 + 64 | 0;
         do {
          HEAP32[i32 >> 2] = HEAP32[i33 >> 2];
          i32 = i32 + 4 | 0;
          i33 = i33 + 4 | 0;
         } while ((i32 | 0) < (i34 | 0));
         __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i4);
         break;
        }
       } else i2 = 16;
      } while (0);
      if ((i2 | 0) == 16) {
       i2 = 0;
       __ZN11RenderQueue10setProgramEi(i1, HEAP32[(HEAP32[i8 >> 2] | 0) + 40 >> 2] | 0);
       __ZN11RenderQueue7setMeshEi(i1, 0);
       i32 = i4;
       i33 = i5;
       i34 = i32 + 64 | 0;
       do {
        HEAP32[i32 >> 2] = HEAP32[i33 >> 2];
        i32 = i32 + 4 | 0;
        i33 = i33 + 4 | 0;
       } while ((i32 | 0) < (i34 | 0));
       __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i4);
      }
      __ZN15CityMapRenderer8drawTileER8CityTileRN3glm3matILi4ELi4EfLNS2_9qualifierE0EEE(i1, __ZN7CityMap7getTileEjj(HEAP32[i6 >> 2] | 0, i18, i7) | 0, i5);
      i35 = HEAP32[i6 >> 2] | 0;
     } else i35 = i24; else i35 = i24;
    } else i35 = i24; else i35 = i24;
    i7 = i7 + 1 | 0;
    if (i7 >>> 0 >= (HEAP32[i35 + 4 >> 2] | 0) >>> 0) {
     i20 = i35;
     break;
    } else i24 = i35;
   }
  }
  i18 = i18 + 1 | 0;
  if (i18 >>> 0 >= (HEAP32[i20 >> 2] | 0) >>> 0) break; else i19 = i20;
 }
 STACKTOP = i3;
 return;
}

function _png_read_info(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i3 = 0;
 if ((i1 | 0) == 0 | (i2 | 0) == 0) return;
 _png_read_sig(i1, i2);
 i4 = i1 + 376 | 0;
 i5 = i1 + 208 | 0;
 i6 = i1 + 435 | 0;
 L4 : while (1) {
  i7 = _png_read_chunk_header(i1) | 0;
  i8 = HEAP32[i4 >> 2] | 0;
  i9 = (i8 | 0) == 1229209940;
  i10 = HEAP32[i5 >> 2] | 0;
  if (i9) {
   if (!(i10 & 1)) {
    i3 = 5;
    break;
   }
   if ((i10 & 2 | 0) == 0 & (HEAP8[i6 >> 0] | 0) == 3) {
    i3 = 7;
    break;
   }
   if (!(i10 & 8)) {
    i11 = 4;
    i12 = i10;
    i3 = 11;
   } else {
    _png_chunk_benign_error(i1, 60620);
    i11 = 4;
    i12 = HEAP32[i5 >> 2] | 0;
    i3 = 11;
   }
  } else if (i10 & 4 | 0) {
   i11 = 8;
   i12 = i10;
   i3 = 11;
  }
  if ((i3 | 0) == 11) {
   i3 = 0;
   HEAP32[i5 >> 2] = i12 | i11;
  }
  L15 : do if ((i8 | 0) < 1229472850) {
   switch (i8 | 0) {
   case 1229278788:
    break;
   default:
    break L15;
   }
   _png_handle_IEND(i1, i2, i7);
   continue L4;
  } else {
   switch (i8 | 0) {
   case 1229472850:
    break;
   default:
    break L15;
   }
   _png_handle_IHDR(i1, i2, i7);
   continue L4;
  } while (0);
  i10 = _png_chunk_unknown_handling(i1, i8) | 0;
  if (i10 | 0) {
   _png_handle_unknown(i1, i2, i7, i10);
   if ((i8 | 0) == 1347179589) {
    HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 2;
    continue;
   } else if (i9) {
    i13 = 0;
    i3 = 41;
    break;
   } else continue;
  }
  if ((i8 | 0) == 1347179589) {
   _png_handle_PLTE(i1, i2, i7);
   continue;
  }
  if (i9) {
   i13 = i7;
   i3 = 41;
   break;
  }
  L31 : do if ((i8 | 0) < 1883789683) if ((i8 | 0) < 1766015824) if ((i8 | 0) < 1732332865) if ((i8 | 0) < 1665684045) {
   switch (i8 | 0) {
   case 1649100612:
    break;
   default:
    break L31;
   }
   _png_handle_bKGD(i1, i2, i7);
   continue L4;
  } else {
   switch (i8 | 0) {
   case 1665684045:
    break;
   default:
    break L31;
   }
   _png_handle_cHRM(i1, i2, i7);
   continue L4;
  } else if ((i8 | 0) < 1749635924) {
   switch (i8 | 0) {
   case 1732332865:
    break;
   default:
    break L31;
   }
   _png_handle_gAMA(i1, i2, i7);
   continue L4;
  } else {
   switch (i8 | 0) {
   case 1749635924:
    break;
   default:
    break L31;
   }
   _png_handle_hIST(i1, i2, i7);
   continue L4;
  } else if ((i8 | 0) < 1866876531) if ((i8 | 0) < 1767135348) {
   switch (i8 | 0) {
   case 1766015824:
    break;
   default:
    break L31;
   }
   _png_handle_iCCP(i1, i2, i7);
   continue L4;
  } else {
   switch (i8 | 0) {
   case 1767135348:
    break;
   default:
    break L31;
   }
   _png_handle_iTXt(i1, i2, i7);
   continue L4;
  } else if ((i8 | 0) < 1883455820) {
   switch (i8 | 0) {
   case 1866876531:
    break;
   default:
    break L31;
   }
   _png_handle_oFFs(i1, i2, i7);
   continue L4;
  } else {
   switch (i8 | 0) {
   case 1883455820:
    break;
   default:
    break L31;
   }
   _png_handle_pCAL(i1, i2, i7);
   continue L4;
  } else {
   if ((i8 | 0) < 1934772034) if ((i8 | 0) < 1933787468) if ((i8 | 0) < 1933723988) {
    switch (i8 | 0) {
    case 1883789683:
     break;
    default:
     break L31;
    }
    _png_handle_pHYs(i1, i2, i7);
    continue L4;
   } else {
    switch (i8 | 0) {
    case 1933723988:
     break;
    default:
     break L31;
    }
    _png_handle_sBIT(i1, i2, i7);
    continue L4;
   } else if ((i8 | 0) < 1934642260) {
    switch (i8 | 0) {
    case 1933787468:
     break;
    default:
     break L31;
    }
    _png_handle_sCAL(i1, i2, i7);
    continue L4;
   } else {
    switch (i8 | 0) {
    case 1934642260:
     break;
    default:
     break L31;
    }
    _png_handle_sPLT(i1, i2, i7);
    continue L4;
   }
   if ((i8 | 0) < 1950960965) if ((i8 | 0) < 1950701684) {
    switch (i8 | 0) {
    case 1934772034:
     break;
    default:
     break L31;
    }
    _png_handle_sRGB(i1, i2, i7);
    continue L4;
   } else {
    switch (i8 | 0) {
    case 1950701684:
     break;
    default:
     break L31;
    }
    _png_handle_tEXt(i1, i2, i7);
    continue L4;
   }
   if ((i8 | 0) < 1951551059) {
    switch (i8 | 0) {
    case 1950960965:
     break;
    default:
     break L31;
    }
    _png_handle_tIME(i1, i2, i7);
    continue L4;
   }
   if ((i8 | 0) < 2052348020) {
    switch (i8 | 0) {
    case 1951551059:
     break;
    default:
     break L31;
    }
    _png_handle_tRNS(i1, i2, i7);
    continue L4;
   } else {
    switch (i8 | 0) {
    case 2052348020:
     break;
    default:
     break L31;
    }
    _png_handle_zTXt(i1, i2, i7);
    continue L4;
   }
  } while (0);
  _png_handle_unknown(i1, i2, i7, 0);
 }
 if ((i3 | 0) == 5) _png_chunk_error(i1, 60570); else if ((i3 | 0) == 7) _png_chunk_error(i1, 60595); else if ((i3 | 0) == 41) {
  HEAP32[i1 + 408 >> 2] = i13;
  return;
 }
}

function __ZN5ImGui15RenderCheckMarkE6ImVec2jf(i1, i2, f3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 f3 = Math_fround(f3);
 var i4 = 0, f5 = f0, i6 = 0, f7 = f0, f8 = f0, f9 = f0, f10 = f0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i4 = HEAP32[(HEAP32[1460598] | 0) + 6392 >> 2] | 0;
 f5 = Math_fround(f3 / Math_fround(5.0));
 i6 = f5 >= Math_fround(1.0);
 f7 = i6 ? f5 : Math_fround(1.0);
 f5 = Math_fround(f3 - Math_fround(f7 * Math_fround(.5)));
 f3 = Math_fround(f7 * Math_fround(.25));
 f8 = Math_fround(f3 + Math_fround(HEAPF32[i1 >> 2]));
 HEAPF32[i1 >> 2] = f8;
 i6 = i1 + 4 | 0;
 f9 = Math_fround(f3 + Math_fround(HEAPF32[i6 >> 2]));
 HEAPF32[i6 >> 2] = f9;
 f3 = Math_fround(f5 / Math_fround(3.0));
 f10 = Math_fround(f3 + f8);
 f8 = Math_fround(Math_fround(f5 + f9) - Math_fround(f3 * Math_fround(.5)));
 i6 = i4 + 632 | 0;
 i4 = HEAP32[i6 >> 2] | 0;
 f9 = Math_fround(f10 - f3);
 f5 = Math_fround(f8 - f3);
 i1 = i4 + 84 | 0;
 i11 = HEAP32[i1 >> 2] | 0;
 i12 = i4 + 88 | 0;
 if ((i11 | 0) == (HEAP32[i12 >> 2] | 0)) {
  i13 = i11 + 1 | 0;
  if (!i11) i14 = 8; else i14 = ((i11 | 0) / 2 | 0) + i11 | 0;
  i15 = (i14 | 0) > (i13 | 0) ? i14 : i13;
  if ((i11 | 0) < (i15 | 0)) {
   HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
   i13 = __ZL13MallocWrapperjPv(i15 << 3, 0) | 0;
   i14 = i4 + 92 | 0;
   i16 = HEAP32[i14 >> 2] | 0;
   if (!i16) i17 = i14; else {
    _memcpy(i13 | 0, i16 | 0, HEAP32[i1 >> 2] << 3 | 0) | 0;
    i16 = HEAP32[i14 >> 2] | 0;
    if (i16 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
    __ZL11FreeWrapperPvS_(i16, 0);
    i17 = i14;
   }
   HEAP32[i17 >> 2] = i13;
   HEAP32[i12 >> 2] = i15;
   i18 = HEAP32[i1 >> 2] | 0;
  } else i18 = i11;
 } else i18 = i11;
 i11 = HEAP32[i4 + 92 >> 2] | 0;
 i4 = i11 + (i18 << 3) | 0;
 HEAPF32[i4 >> 2] = f9;
 HEAPF32[i4 + 4 >> 2] = f5;
 HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 i1 = HEAP32[i6 >> 2] | 0;
 i4 = i1 + 84 | 0;
 i18 = HEAP32[i4 >> 2] | 0;
 i11 = i1 + 88 | 0;
 if ((i18 | 0) == (HEAP32[i11 >> 2] | 0)) {
  i15 = i18 + 1 | 0;
  if (!i18) i19 = 8; else i19 = ((i18 | 0) / 2 | 0) + i18 | 0;
  i12 = (i19 | 0) > (i15 | 0) ? i19 : i15;
  if ((i18 | 0) < (i12 | 0)) {
   HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
   i15 = __ZL13MallocWrapperjPv(i12 << 3, 0) | 0;
   i19 = i1 + 92 | 0;
   i13 = HEAP32[i19 >> 2] | 0;
   if (!i13) i20 = i19; else {
    _memcpy(i15 | 0, i13 | 0, HEAP32[i4 >> 2] << 3 | 0) | 0;
    i13 = HEAP32[i19 >> 2] | 0;
    if (i13 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
    __ZL11FreeWrapperPvS_(i13, 0);
    i20 = i19;
   }
   HEAP32[i20 >> 2] = i15;
   HEAP32[i11 >> 2] = i12;
   i21 = HEAP32[i4 >> 2] | 0;
  } else i21 = i18;
 } else i21 = i18;
 i18 = HEAP32[i1 + 92 >> 2] | 0;
 i1 = i18 + (i21 << 3) | 0;
 HEAPF32[i1 >> 2] = f10;
 HEAPF32[i1 + 4 >> 2] = f8;
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
 i4 = HEAP32[i6 >> 2] | 0;
 f5 = Math_fround(f3 * Math_fround(2.0));
 f3 = Math_fround(f5 + f10);
 f10 = Math_fround(f8 - f5);
 i1 = i4 + 84 | 0;
 i21 = HEAP32[i1 >> 2] | 0;
 i18 = i4 + 88 | 0;
 if ((i21 | 0) == (HEAP32[i18 >> 2] | 0)) {
  i12 = i21 + 1 | 0;
  if (!i21) i22 = 8; else i22 = ((i21 | 0) / 2 | 0) + i21 | 0;
  i11 = (i22 | 0) > (i12 | 0) ? i22 : i12;
  if ((i21 | 0) < (i11 | 0)) {
   HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
   i12 = __ZL13MallocWrapperjPv(i11 << 3, 0) | 0;
   i22 = i4 + 92 | 0;
   i15 = HEAP32[i22 >> 2] | 0;
   if (!i15) i23 = i22; else {
    _memcpy(i12 | 0, i15 | 0, HEAP32[i1 >> 2] << 3 | 0) | 0;
    i15 = HEAP32[i22 >> 2] | 0;
    if (i15 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
    __ZL11FreeWrapperPvS_(i15, 0);
    i23 = i22;
   }
   HEAP32[i23 >> 2] = i12;
   HEAP32[i18 >> 2] = i11;
   i24 = HEAP32[i1 >> 2] | 0;
  } else i24 = i21;
 } else i24 = i21;
 i21 = HEAP32[i4 + 92 >> 2] | 0;
 i4 = i21 + (i24 << 3) | 0;
 HEAPF32[i4 >> 2] = f3;
 HEAPF32[i4 + 4 >> 2] = f10;
 HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 i1 = HEAP32[i6 >> 2] | 0;
 i6 = i1 + 92 | 0;
 __ZN10ImDrawList11AddPolylineEPK6ImVec2ijbf(i1, HEAP32[i6 >> 2] | 0, HEAP32[i1 + 84 >> 2] | 0, i2, 0, f7);
 i2 = i1 + 84 | 0;
 i4 = i1 + 88 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 if ((i1 | 0) >= 0) {
  HEAP32[i2 >> 2] = 0;
  return;
 }
 i24 = ((i1 | 0) / 2 | 0) + i1 | 0;
 i21 = (i24 | 0) > 0 ? i24 : 0;
 if ((i1 | 0) >= (i21 | 0)) {
  HEAP32[i2 >> 2] = 0;
  return;
 }
 HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
 i1 = __ZL13MallocWrapperjPv(i21 << 3, 0) | 0;
 i24 = HEAP32[i6 >> 2] | 0;
 if (!i24) i25 = i6; else {
  _memcpy(i1 | 0, i24 | 0, HEAP32[i2 >> 2] << 3 | 0) | 0;
  i24 = HEAP32[i6 >> 2] | 0;
  if (i24 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
  __ZL11FreeWrapperPvS_(i24, 0);
  i25 = i6;
 }
 HEAP32[i25 >> 2] = i1;
 HEAP32[i4 >> 2] = i21;
 HEAP32[i2 >> 2] = 0;
 return;
}

function __ZN10ImDrawList13ChannelsMergeEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 i2 = 0;
 i3 = i1 + 100 | 0;
 if ((HEAP32[i3 >> 2] | 0) < 2) return;
 i4 = i1 + 96 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 if (i5 | 0) {
  i6 = i1 + 112 | 0;
  i7 = (HEAP32[i6 >> 2] | 0) + (i5 * 24 | 0) | 0;
  HEAP32[i7 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i7 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
  HEAP32[i7 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
  i7 = (HEAP32[i6 >> 2] | 0) + ((HEAP32[i4 >> 2] | 0) * 24 | 0) + 12 | 0;
  i5 = i1 + 12 | 0;
  HEAP32[i7 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i7 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i7 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  HEAP32[i4 >> 2] = 0;
  i4 = HEAP32[i6 >> 2] | 0;
  HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
  i6 = i4 + 12 | 0;
  HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i5 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
  HEAP32[i5 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
  HEAP32[i1 + 56 >> 2] = (HEAP32[i1 + 20 >> 2] | 0) + (HEAP32[i5 >> 2] << 1);
 }
 i5 = HEAP32[i1 >> 2] | 0;
 if (!i5) i8 = 0; else {
  if ((i5 | 0) <= 0) ___assert_fail(38278, 56850, 1245, 38287);
  i6 = i5 + -1 | 0;
  if (!(HEAP32[(HEAP32[i1 + 8 >> 2] | 0) + (i6 << 5) >> 2] | 0)) {
   HEAP32[i1 >> 2] = i6;
   i8 = i6;
  } else i8 = i5;
 }
 i5 = HEAP32[i3 >> 2] | 0;
 do if ((i5 | 0) > 1) {
  i6 = HEAP32[i1 + 104 >> 2] | 0;
  i4 = i1 + 112 | 0;
  i7 = 0;
  i9 = 1;
  i10 = 0;
  while (1) {
   if ((i6 | 0) <= (i9 | 0)) {
    i2 = 31;
    break;
   }
   i11 = HEAP32[i4 >> 2] | 0;
   i12 = i11 + (i9 * 24 | 0) | 0;
   i13 = HEAP32[i12 >> 2] | 0;
   if (!i13) i14 = 0; else {
    if ((i13 | 0) <= 0) {
     i2 = 34;
     break;
    }
    i15 = i13 + -1 | 0;
    if (!(HEAP32[(HEAP32[i11 + (i9 * 24 | 0) + 8 >> 2] | 0) + (i15 << 5) >> 2] | 0)) {
     HEAP32[i12 >> 2] = i15;
     i14 = i15;
    } else i14 = i13;
   }
   i10 = i14 + i10 | 0;
   i7 = (HEAP32[i11 + (i9 * 24 | 0) + 12 >> 2] | 0) + i7 | 0;
   i9 = i9 + 1 | 0;
   if ((i9 | 0) >= (i5 | 0)) {
    i2 = 11;
    break;
   }
  }
  if ((i2 | 0) == 11) {
   i16 = i10;
   i17 = i7;
   i18 = HEAP32[i1 >> 2] | 0;
   break;
  } else if ((i2 | 0) == 31) ___assert_fail(56841, 56850, 1235, 56909); else if ((i2 | 0) == 34) ___assert_fail(38278, 56850, 1245, 38287);
 } else {
  i16 = 0;
  i17 = 0;
  i18 = i8;
 } while (0);
 i8 = i18 + i16 | 0;
 i18 = i1 + 4 | 0;
 i2 = HEAP32[i18 >> 2] | 0;
 if ((i2 | 0) < (i8 | 0)) {
  if (!i2) i19 = 8; else i19 = ((i2 | 0) / 2 | 0) + i2 | 0;
  i5 = (i19 | 0) > (i8 | 0) ? i19 : i8;
  if ((i2 | 0) < (i5 | 0)) {
   i2 = __ZN5ImGui8MemAllocEj(i5 << 5) | 0;
   i19 = i1 + 8 | 0;
   i14 = HEAP32[i19 >> 2] | 0;
   if (!i14) i20 = i19; else {
    _memcpy(i2 | 0, i14 | 0, HEAP32[i1 >> 2] << 5 | 0) | 0;
    __ZN5ImGui7MemFreeEPv(HEAP32[i19 >> 2] | 0);
    i20 = i19;
   }
   HEAP32[i20 >> 2] = i2;
   HEAP32[i18 >> 2] = i5;
  }
 }
 HEAP32[i1 >> 2] = i8;
 i5 = i1 + 12 | 0;
 i18 = HEAP32[i5 >> 2] | 0;
 i2 = i18 + i17 | 0;
 i17 = i1 + 16 | 0;
 i20 = HEAP32[i17 >> 2] | 0;
 if ((i20 | 0) < (i2 | 0)) {
  if (!i20) i21 = 8; else i21 = ((i20 | 0) / 2 | 0) + i20 | 0;
  i19 = (i21 | 0) > (i2 | 0) ? i21 : i2;
  if ((i20 | 0) < (i19 | 0)) {
   i20 = __ZN5ImGui8MemAllocEj(i19 << 1) | 0;
   i21 = i1 + 20 | 0;
   i14 = HEAP32[i21 >> 2] | 0;
   if (!i14) i22 = i21; else {
    _memcpy(i20 | 0, i14 | 0, HEAP32[i5 >> 2] << 1 | 0) | 0;
    __ZN5ImGui7MemFreeEPv(HEAP32[i21 >> 2] | 0);
    i22 = i21;
   }
   HEAP32[i22 >> 2] = i20;
   HEAP32[i17 >> 2] = i19;
   i23 = HEAP32[i1 >> 2] | 0;
  } else i23 = i8;
 } else i23 = i8;
 HEAP32[i5 >> 2] = i2;
 i2 = HEAP32[i1 + 8 >> 2] | 0;
 i5 = i1 + 56 | 0;
 HEAP32[i5 >> 2] = (HEAP32[i1 + 20 >> 2] | 0) + (i18 << 1);
 L51 : do if ((HEAP32[i3 >> 2] | 0) > 1) {
  i18 = i1 + 104 | 0;
  i8 = i1 + 112 | 0;
  i19 = 1;
  i17 = i2 + (i23 << 5) + (0 - i16 << 5) | 0;
  while (1) {
   if ((HEAP32[i18 >> 2] | 0) <= (i19 | 0)) break;
   i20 = HEAP32[i8 >> 2] | 0;
   i22 = HEAP32[i20 + (i19 * 24 | 0) >> 2] | 0;
   if (!i22) i24 = i17; else {
    _memcpy(i17 | 0, HEAP32[i20 + (i19 * 24 | 0) + 8 >> 2] | 0, i22 << 5 | 0) | 0;
    i24 = i17 + (i22 << 5) | 0;
   }
   i22 = HEAP32[i20 + (i19 * 24 | 0) + 12 >> 2] | 0;
   if (i22 | 0) {
    _memcpy(HEAP32[i5 >> 2] | 0, HEAP32[i20 + (i19 * 24 | 0) + 20 >> 2] | 0, i22 << 1 | 0) | 0;
    HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + (i22 << 1);
   }
   i19 = i19 + 1 | 0;
   if ((i19 | 0) >= (HEAP32[i3 >> 2] | 0)) break L51; else i17 = i24;
  }
  ___assert_fail(56841, 56850, 1235, 56909);
 } while (0);
 __ZN10ImDrawList14UpdateClipRectEv(i1);
 HEAP32[i3 >> 2] = 1;
 return;
}

function __ZN5ImGui12BeginMenuBarEv() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, f11 = f0, i12 = 0, f13 = f0, f14 = f0, f15 = f0, i16 = 0, f17 = f0, f18 = f0, f19 = f0, i20 = 0, i21 = 0, i22 = 0, i23 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i2 = i1 + 40 | 0;
 i3 = i1 + 32 | 0;
 i4 = i1 + 24 | 0;
 i5 = i1 + 16 | 0;
 i6 = i1;
 i7 = HEAP32[(HEAP32[1460598] | 0) + 6392 >> 2] | 0;
 HEAP8[i7 + 120 >> 0] = 1;
 if (HEAP8[i7 + 123 >> 0] | 0) {
  i8 = 0;
  STACKTOP = i1;
  return i8 | 0;
 }
 i9 = i7 + 8 | 0;
 if (!(HEAP32[i9 >> 2] & 1024)) {
  i8 = 0;
  STACKTOP = i1;
  return i8 | 0;
 }
 i10 = i7 + 316 | 0;
 if (HEAP8[i10 >> 0] | 0) ___assert_fail(37939, 31803, 11721, 37968);
 __ZN5ImGui10BeginGroupEv();
 __ZN5ImGui6PushIDEPKc(37981);
 f11 = Math_fround(HEAPF32[i7 + 16 >> 2]);
 i12 = HEAP32[i9 >> 2] | 0;
 if (!(i12 & 1)) {
  i9 = HEAP32[1460598] | 0;
  f13 = Math_fround(HEAPF32[i9 + 6188 >> 2]);
  f14 = Math_fround(f13 * Math_fround(HEAPF32[i7 + 624 >> 2]));
  f15 = Math_fround(f14 + Math_fround(Math_fround(HEAPF32[i9 + 5412 >> 2]) * Math_fround(2.0)));
 } else f15 = Math_fround(0.0);
 f14 = Math_fround(f11 + f15);
 f15 = Math_fround(HEAPF32[i7 + 12 >> 2]);
 f11 = Math_fround(f15 + Math_fround(HEAPF32[i7 + 28 >> 2]));
 if (!(i12 & 1024)) {
  i16 = HEAP32[1460598] | 0;
  f17 = Math_fround(0.0);
 } else {
  f13 = Math_fround(HEAPF32[i7 + 324 >> 2]);
  i12 = HEAP32[1460598] | 0;
  f18 = Math_fround(HEAPF32[i12 + 6188 >> 2]);
  f19 = Math_fround(f13 + Math_fround(f18 * Math_fround(HEAPF32[i7 + 624 >> 2])));
  i16 = i12;
  f17 = Math_fround(f19 + Math_fround(Math_fround(HEAPF32[i12 + 5412 >> 2]) * Math_fround(2.0)));
 }
 f19 = Math_fround(f14 + f17);
 f17 = Math_fround(~~Math_fround(f15 + Math_fround(.5)) | 0);
 f18 = Math_fround(~~Math_fround(Math_fround(f14 + Math_fround(HEAPF32[i7 + 72 >> 2])) + Math_fround(.5)) | 0);
 f13 = Math_fround(f11 - Math_fround(HEAPF32[i7 + 68 >> 2]));
 f11 = Math_fround(~~Math_fround((f15 >= f13 ? f15 : f13) + Math_fround(.5)) | 0);
 f13 = Math_fround(~~Math_fround(f19 + Math_fround(.5)) | 0);
 HEAPF32[i6 >> 2] = f17;
 HEAPF32[i6 + 4 >> 2] = f18;
 HEAPF32[i6 + 8 >> 2] = f11;
 HEAPF32[i6 + 12 >> 2] = f13;
 i12 = i7 + 480 | 0;
 i9 = Math_fround(HEAPF32[i12 >> 2]) <= f17;
 i20 = HEAP32[(i9 ? i6 : i12) >> 2] | 0;
 i9 = Math_fround(HEAPF32[i7 + 484 >> 2]) <= f18;
 i21 = HEAP32[(i9 ? i6 : i12) + 4 >> 2] | 0;
 i12 = i6;
 HEAP32[i12 >> 2] = i20;
 HEAP32[i12 + 4 >> 2] = i21;
 i12 = i6 + 8 | 0;
 i6 = i7 + 488 | 0;
 i9 = Math_fround(HEAPF32[i6 >> 2]) > f11;
 i22 = HEAP32[(i9 ? i12 : i6) >> 2] | 0;
 i9 = Math_fround(HEAPF32[i7 + 492 >> 2]) > f13;
 i23 = HEAP32[(i9 ? i12 : i6) + 4 >> 2] | 0;
 i6 = i12;
 HEAP32[i6 >> 2] = i22;
 HEAP32[i6 + 4 >> 2] = i23;
 i6 = HEAP32[i16 + 6392 >> 2] | 0;
 HEAP8[i6 + 120 >> 0] = 1;
 i16 = i6 + 632 | 0;
 i12 = HEAP32[i16 >> 2] | 0;
 i9 = i4;
 HEAP32[i9 >> 2] = i20;
 HEAP32[i9 + 4 >> 2] = i21;
 i21 = i5;
 HEAP32[i21 >> 2] = i22;
 HEAP32[i21 + 4 >> 2] = i23;
 HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i2 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 __ZN10ImDrawList12PushClipRectE6ImVec2S0_b(i12, i3, i2, 0);
 i2 = HEAP32[i16 >> 2] | 0;
 i16 = HEAP32[i2 + 60 >> 2] | 0;
 if ((i16 | 0) <= 0) ___assert_fail(38278, 56850, 1245, 38287);
 i3 = HEAP32[i2 + 68 >> 2] | 0;
 i2 = i16 + -1 | 0;
 i16 = i3 + (i2 << 4) | 0;
 i2 = HEAP32[i16 + 4 >> 2] | 0;
 i3 = HEAP32[i16 + 8 >> 2] | 0;
 i12 = HEAP32[i16 + 12 >> 2] | 0;
 HEAP32[i6 + 464 >> 2] = HEAP32[i16 >> 2];
 HEAP32[i6 + 468 >> 2] = i2;
 HEAP32[i6 + 472 >> 2] = i3;
 HEAP32[i6 + 476 >> 2] = i12;
 f13 = Math_fround(f15 + Math_fround(HEAPF32[i7 + 320 >> 2]));
 f15 = Math_fround(f14 + Math_fround(HEAPF32[i7 + 324 >> 2]));
 HEAPF32[i7 + 196 >> 2] = f13;
 HEAPF32[i7 + 200 >> 2] = f15;
 HEAP32[i7 + 344 >> 2] = 1;
 i12 = i7 + 300 | 0;
 HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
 i12 = i7 + 304 | 0;
 HEAP32[i12 >> 2] = HEAP32[i12 >> 2] << 1;
 HEAP8[i10 >> 0] = 1;
 i10 = HEAP32[1460598] | 0;
 i12 = HEAP32[i10 + 6392 >> 2] | 0;
 HEAP8[i12 + 120 >> 0] = 1;
 if (!(HEAP8[i12 + 123 >> 0] | 0)) {
  i7 = i12 + 228 | 0;
  f15 = Math_fround(HEAPF32[i7 >> 2]);
  f13 = Math_fround(HEAPF32[i10 + 6184 >> 2]);
  f14 = Math_fround(HEAPF32[i10 + 5412 >> 2]);
  f11 = Math_fround(f13 + Math_fround(f14 * Math_fround(2.0)));
  HEAPF32[i7 >> 2] = f15 >= f11 ? f15 : f11;
  i7 = i12 + 232 | 0;
  f11 = Math_fround(HEAPF32[i7 >> 2]);
  HEAPF32[i7 >> 2] = f11 >= f14 ? f11 : f14;
 }
 i8 = 1;
 STACKTOP = i1;
 return i8 | 0;
}

function __ZN3glmmlIfLNS_9qualifierE0EEENS_3matILi4ELi4ET_XT0_EEERKS4_S6_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var f4 = f0, f5 = f0, f6 = f0, f7 = f0, f8 = f0, f9 = f0, f10 = f0, f11 = f0, f12 = f0, f13 = f0, f14 = f0, f15 = f0, f16 = f0, f17 = f0, f18 = f0, f19 = f0, f20 = f0, f21 = f0, f22 = f0, f23 = f0, f24 = f0, f25 = f0, f26 = f0, f27 = f0, f28 = f0, f29 = f0, f30 = f0, f31 = f0, f32 = f0, f33 = f0, f34 = f0, f35 = f0, f36 = f0, f37 = f0, f38 = f0, f39 = f0;
 f4 = Math_fround(HEAPF32[i2 >> 2]);
 f5 = Math_fround(HEAPF32[i2 + 4 >> 2]);
 f6 = Math_fround(HEAPF32[i2 + 8 >> 2]);
 f7 = Math_fround(HEAPF32[i2 + 12 >> 2]);
 f8 = Math_fround(HEAPF32[i2 + 16 >> 2]);
 f9 = Math_fround(HEAPF32[i2 + 20 >> 2]);
 f10 = Math_fround(HEAPF32[i2 + 24 >> 2]);
 f11 = Math_fround(HEAPF32[i2 + 28 >> 2]);
 f12 = Math_fround(HEAPF32[i2 + 32 >> 2]);
 f13 = Math_fround(HEAPF32[i2 + 36 >> 2]);
 f14 = Math_fround(HEAPF32[i2 + 40 >> 2]);
 f15 = Math_fround(HEAPF32[i2 + 44 >> 2]);
 f16 = Math_fround(HEAPF32[i2 + 48 >> 2]);
 f17 = Math_fround(HEAPF32[i2 + 52 >> 2]);
 f18 = Math_fround(HEAPF32[i2 + 56 >> 2]);
 f19 = Math_fround(HEAPF32[i2 + 60 >> 2]);
 f20 = Math_fround(HEAPF32[i3 >> 2]);
 f21 = Math_fround(HEAPF32[i3 + 4 >> 2]);
 f22 = Math_fround(HEAPF32[i3 + 8 >> 2]);
 f23 = Math_fround(HEAPF32[i3 + 12 >> 2]);
 f24 = Math_fround(HEAPF32[i3 + 16 >> 2]);
 f25 = Math_fround(HEAPF32[i3 + 20 >> 2]);
 f26 = Math_fround(HEAPF32[i3 + 24 >> 2]);
 f27 = Math_fround(HEAPF32[i3 + 28 >> 2]);
 f28 = Math_fround(HEAPF32[i3 + 32 >> 2]);
 f29 = Math_fround(HEAPF32[i3 + 36 >> 2]);
 f30 = Math_fround(HEAPF32[i3 + 40 >> 2]);
 f31 = Math_fround(HEAPF32[i3 + 44 >> 2]);
 f32 = Math_fround(HEAPF32[i3 + 48 >> 2]);
 f33 = Math_fround(HEAPF32[i3 + 52 >> 2]);
 f34 = Math_fround(HEAPF32[i3 + 56 >> 2]);
 f35 = Math_fround(HEAPF32[i3 + 60 >> 2]);
 f36 = Math_fround(Math_fround(Math_fround(Math_fround(f4 * f20) + Math_fround(f8 * f21)) + Math_fround(f12 * f22)) + Math_fround(f16 * f23));
 f37 = Math_fround(Math_fround(Math_fround(Math_fround(f5 * f20) + Math_fround(f9 * f21)) + Math_fround(f13 * f22)) + Math_fround(f17 * f23));
 f38 = Math_fround(Math_fround(Math_fround(Math_fround(f6 * f20) + Math_fround(f10 * f21)) + Math_fround(f14 * f22)) + Math_fround(f18 * f23));
 f39 = Math_fround(Math_fround(Math_fround(Math_fround(f7 * f20) + Math_fround(f11 * f21)) + Math_fround(f15 * f22)) + Math_fround(f19 * f23));
 HEAPF32[i1 >> 2] = f36;
 HEAPF32[i1 + 4 >> 2] = f37;
 HEAPF32[i1 + 8 >> 2] = f38;
 HEAPF32[i1 + 12 >> 2] = f39;
 f39 = Math_fround(Math_fround(Math_fround(Math_fround(f4 * f24) + Math_fround(f8 * f25)) + Math_fround(f12 * f26)) + Math_fround(f16 * f27));
 f38 = Math_fround(Math_fround(Math_fround(Math_fround(f5 * f24) + Math_fround(f9 * f25)) + Math_fround(f13 * f26)) + Math_fround(f17 * f27));
 f37 = Math_fround(Math_fround(Math_fround(Math_fround(f6 * f24) + Math_fround(f10 * f25)) + Math_fround(f14 * f26)) + Math_fround(f18 * f27));
 f36 = Math_fround(Math_fround(Math_fround(Math_fround(f7 * f24) + Math_fround(f11 * f25)) + Math_fround(f15 * f26)) + Math_fround(f19 * f27));
 HEAPF32[i1 + 16 >> 2] = f39;
 HEAPF32[i1 + 20 >> 2] = f38;
 HEAPF32[i1 + 24 >> 2] = f37;
 HEAPF32[i1 + 28 >> 2] = f36;
 f36 = Math_fround(Math_fround(Math_fround(Math_fround(f4 * f28) + Math_fround(f8 * f29)) + Math_fround(f12 * f30)) + Math_fround(f16 * f31));
 f37 = Math_fround(Math_fround(Math_fround(Math_fround(f5 * f28) + Math_fround(f9 * f29)) + Math_fround(f13 * f30)) + Math_fround(f17 * f31));
 f38 = Math_fround(Math_fround(Math_fround(Math_fround(f6 * f28) + Math_fround(f10 * f29)) + Math_fround(f14 * f30)) + Math_fround(f18 * f31));
 f39 = Math_fround(Math_fround(Math_fround(Math_fround(f7 * f28) + Math_fround(f11 * f29)) + Math_fround(f15 * f30)) + Math_fround(f19 * f31));
 HEAPF32[i1 + 32 >> 2] = f36;
 HEAPF32[i1 + 36 >> 2] = f37;
 HEAPF32[i1 + 40 >> 2] = f38;
 HEAPF32[i1 + 44 >> 2] = f39;
 f39 = Math_fround(Math_fround(Math_fround(Math_fround(f4 * f32) + Math_fround(f8 * f33)) + Math_fround(f12 * f34)) + Math_fround(f16 * f35));
 f16 = Math_fround(Math_fround(Math_fround(Math_fround(f5 * f32) + Math_fround(f9 * f33)) + Math_fround(f13 * f34)) + Math_fround(f17 * f35));
 f17 = Math_fround(Math_fround(Math_fround(Math_fround(f6 * f32) + Math_fround(f10 * f33)) + Math_fround(f14 * f34)) + Math_fround(f18 * f35));
 f18 = Math_fround(Math_fround(Math_fround(Math_fround(f7 * f32) + Math_fround(f11 * f33)) + Math_fround(f15 * f34)) + Math_fround(f19 * f35));
 HEAPF32[i1 + 48 >> 2] = f39;
 HEAPF32[i1 + 52 >> 2] = f16;
 HEAPF32[i1 + 56 >> 2] = f17;
 HEAPF32[i1 + 60 >> 2] = f18;
 return;
}

function __ZN8ImGuiStbL29stb_textedit_delete_selectionEP18ImGuiTextEditStatePNS_17STB_TexteditStateE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0;
 i3 = i1 + 44 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 i5 = i2 + 4 | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 i7 = i2 + 8 | 0;
 i8 = HEAP32[i7 >> 2] | 0;
 if ((i6 | 0) == (i8 | 0)) {
  i9 = i6;
  i10 = i6;
 } else {
  if ((i6 | 0) > (i4 | 0)) {
   HEAP32[i5 >> 2] = i4;
   i11 = i4;
  } else i11 = i6;
  if ((i8 | 0) > (i4 | 0)) {
   HEAP32[i7 >> 2] = i4;
   i12 = i4;
  } else i12 = i8;
  if ((i11 | 0) == (i12 | 0)) {
   HEAP32[i2 >> 2] = i11;
   i9 = i11;
   i10 = i11;
  } else {
   i9 = i11;
   i10 = i12;
  }
 }
 if ((HEAP32[i2 >> 2] | 0) > (i4 | 0)) HEAP32[i2 >> 2] = i4;
 if ((i9 | 0) == (i10 | 0)) return;
 if ((i9 | 0) < (i10 | 0)) {
  i4 = i10 - i9 | 0;
  i12 = __ZN8ImGuiStbL19stb_text_createundoEPNS_12StbUndoStateEiii(i2 + 24 | 0, i9, i4, 0) | 0;
  i11 = (i4 | 0) > 0;
  L19 : do if (i11 & (i12 | 0) != 0) {
   i8 = HEAP32[i1 + 4 >> 2] | 0;
   i6 = i1 + 12 | 0;
   i13 = 0;
   while (1) {
    i14 = i13 + i9 | 0;
    if ((i8 | 0) <= (i14 | 0)) break;
    i15 = HEAP32[i6 >> 2] | 0;
    HEAP16[i12 + (i13 << 1) >> 1] = HEAP16[i15 + (i14 << 1) >> 1] | 0;
    i13 = i13 + 1 | 0;
    if ((i13 | 0) >= (i4 | 0)) {
     i16 = i15;
     break L19;
    }
   }
   ___assert_fail(56841, 56850, 1236, 56909);
  } else i16 = HEAP32[i1 + 12 >> 2] | 0; while (0);
  i12 = i16 + (i9 << 1) | 0;
  i13 = i16 + (i10 << 1) | 0;
  i16 = (i13 | 0) == 0;
  L27 : do if (i11 | i16) {
   i6 = 0;
   i8 = i12;
   while (1) {
    i15 = HEAP16[i8 >> 1] | 0;
    if (!(i15 << 16 >> 16)) {
     i17 = i6;
     break L27;
    }
    i8 = i8 + 2 | 0;
    i14 = i15 & -1024;
    i18 = i14 << 16 >> 16 | 0;
    i14 = ((i15 & 65535) < 128 ? 1 : (i15 & 65535) < 2048 ? 2 : (i18 | 0) == -9216 ? 0 : (i18 | 0) == -10240 ? 4 : 3) + i6 | 0;
    if (!(i16 | i8 >>> 0 < i13 >>> 0)) {
     i17 = i14;
     break;
    } else i6 = i14;
   }
  } else i17 = 0; while (0);
  i16 = i1 + 40 | 0;
  HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) - i17;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) - i4;
  i4 = HEAP16[i13 >> 1] | 0;
  if (!(i4 << 16 >> 16)) i19 = i12; else {
   i17 = i12;
   i12 = i13;
   i13 = i4;
   while (1) {
    i12 = i12 + 2 | 0;
    i4 = i17 + 2 | 0;
    HEAP16[i17 >> 1] = i13;
    i13 = HEAP16[i12 >> 1] | 0;
    if (!(i13 << 16 >> 16)) {
     i19 = i4;
     break;
    } else i17 = i4;
   }
  }
  HEAP16[i19 >> 1] = 0;
  i19 = i2 + 15 | 0;
  HEAP8[i19 >> 0] = 0;
  i17 = HEAP32[i5 >> 2] | 0;
  HEAP32[i2 >> 2] = i17;
  HEAP32[i7 >> 2] = i17;
  i20 = i19;
 } else {
  i19 = i9 - i10 | 0;
  i17 = __ZN8ImGuiStbL19stb_text_createundoEPNS_12StbUndoStateEiii(i2 + 24 | 0, i10, i19, 0) | 0;
  i13 = (i19 | 0) > 0;
  L37 : do if (i13 & (i17 | 0) != 0) {
   i12 = HEAP32[i1 + 4 >> 2] | 0;
   i4 = i1 + 12 | 0;
   i16 = 0;
   while (1) {
    i11 = i16 + i10 | 0;
    if ((i12 | 0) <= (i11 | 0)) break;
    i6 = HEAP32[i4 >> 2] | 0;
    HEAP16[i17 + (i16 << 1) >> 1] = HEAP16[i6 + (i11 << 1) >> 1] | 0;
    i16 = i16 + 1 | 0;
    if ((i16 | 0) >= (i19 | 0)) {
     i21 = i6;
     break L37;
    }
   }
   ___assert_fail(56841, 56850, 1236, 56909);
  } else i21 = HEAP32[i1 + 12 >> 2] | 0; while (0);
  i17 = i21 + (i10 << 1) | 0;
  i10 = i21 + (i9 << 1) | 0;
  i9 = (i10 | 0) == 0;
  L45 : do if (i13 | i9) {
   i21 = 0;
   i16 = i17;
   while (1) {
    i4 = HEAP16[i16 >> 1] | 0;
    if (!(i4 << 16 >> 16)) {
     i22 = i21;
     break L45;
    }
    i16 = i16 + 2 | 0;
    i12 = i4 & -1024;
    i6 = i12 << 16 >> 16 | 0;
    i12 = ((i4 & 65535) < 128 ? 1 : (i4 & 65535) < 2048 ? 2 : (i6 | 0) == -9216 ? 0 : (i6 | 0) == -10240 ? 4 : 3) + i21 | 0;
    if (!(i9 | i16 >>> 0 < i10 >>> 0)) {
     i22 = i12;
     break;
    } else i21 = i12;
   }
  } else i22 = 0; while (0);
  i9 = i1 + 40 | 0;
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) - i22;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) - i19;
  i19 = HEAP16[i10 >> 1] | 0;
  if (!(i19 << 16 >> 16)) i23 = i17; else {
   i3 = i17;
   i17 = i10;
   i10 = i19;
   while (1) {
    i17 = i17 + 2 | 0;
    i19 = i3 + 2 | 0;
    HEAP16[i3 >> 1] = i10;
    i10 = HEAP16[i17 >> 1] | 0;
    if (!(i10 << 16 >> 16)) {
     i23 = i19;
     break;
    } else i3 = i19;
   }
  }
  HEAP16[i23 >> 1] = 0;
  i23 = i2 + 15 | 0;
  HEAP8[i23 >> 0] = 0;
  i3 = HEAP32[i7 >> 2] | 0;
  HEAP32[i2 >> 2] = i3;
  HEAP32[i5 >> 2] = i3;
  i20 = i23;
 }
 HEAP8[i20 >> 0] = 0;
 return;
}

function __ZN10Simulation10doTreeStepEP7CityMap(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, f27 = f0, f28 = f0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0;
 i2 = 0;
 i3 = HEAP32[i1 >> 2] | 0;
 i4 = i1 + 4 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 i6 = Math_imul(i5, i3) | 0;
 i7 = __Znaj(i6 >>> 0 > 1073741823 ? -1 : i6 << 2) | 0;
 if (!i3) {
  __ZdaPv(i7);
  return;
 } else {
  i8 = 0;
  i9 = i5;
  i10 = i3;
  i11 = i5;
 }
 while (1) {
  i5 = i8;
  i8 = i8 + 1 | 0;
  if (!i11) {
   i12 = i10;
   i13 = i9;
   i14 = 0;
  } else {
   i3 = i5 + -1 | 0;
   i6 = 0;
   do {
    i15 = __ZN7CityMap7getTileEjj(i1, i5, i6) | 0;
    i16 = __ZN7CityMap7getTileEjj(i1, i5, i6 + -1 | 0) | 0;
    i17 = i6;
    i6 = i6 + 1 | 0;
    i18 = __ZN7CityMap7getTileEjj(i1, i5, i6) | 0;
    i19 = __ZN7CityMap7getTileEjj(i1, i8, i17) | 0;
    i20 = __ZN7CityMap7getTileEjj(i1, i3, i17) | 0;
    i21 = (Math_imul(HEAP32[i4 >> 2] | 0, i5) | 0) + i17 | 0;
    if ((HEAP32[i15 + 12 >> 2] | 0) == 1) i22 = ((HEAP32[i15 + 32 >> 2] | 0) > 0 & 1) + ((HEAP32[i15 + 28 >> 2] | 0) > 0 & 1) + ((HEAP32[i15 + 36 >> 2] | 0) > 0 & 1) + ((HEAP32[i15 + 40 >> 2] | 0) > 0 & 1) | 0; else i22 = 0;
    if ((HEAP32[i19 + 12 >> 2] | 0) == 1) i23 = ((HEAP32[i19 + 32 >> 2] | 0) > 0 & 1) + ((HEAP32[i19 + 28 >> 2] | 0) > 0 & 1) + ((HEAP32[i19 + 36 >> 2] | 0) > 0 & 1) + ((HEAP32[i19 + 40 >> 2] | 0) > 0 & 1) | 0; else i23 = 0;
    if ((HEAP32[i20 + 12 >> 2] | 0) == 1) i24 = ((HEAP32[i20 + 32 >> 2] | 0) > 0 & 1) + ((HEAP32[i20 + 28 >> 2] | 0) > 0 & 1) + ((HEAP32[i20 + 36 >> 2] | 0) > 0 & 1) + ((HEAP32[i20 + 40 >> 2] | 0) > 0 & 1) | 0; else i24 = 0;
    if ((HEAP32[i18 + 12 >> 2] | 0) == 1) i25 = ((HEAP32[i18 + 32 >> 2] | 0) > 0 & 1) + ((HEAP32[i18 + 28 >> 2] | 0) > 0 & 1) + ((HEAP32[i18 + 36 >> 2] | 0) > 0 & 1) + ((HEAP32[i18 + 40 >> 2] | 0) > 0 & 1) | 0; else i25 = 0;
    if ((HEAP32[i16 + 12 >> 2] | 0) == 1) i26 = ((HEAP32[i16 + 32 >> 2] | 0) > 0 & 1) + ((HEAP32[i16 + 28 >> 2] | 0) > 0 & 1) + ((HEAP32[i16 + 36 >> 2] | 0) > 0 & 1) + ((HEAP32[i16 + 40 >> 2] | 0) > 0 & 1) | 0; else i26 = 0;
    f27 = Math_fround(Math_fround(i24 + i23 + i25 + i26 | 0) * Math_fround(.25));
    f28 = Math_fround(f27 + Math_fround(Math_fround(__ZN7CityMap4diceEv(i1) | 0) * Math_fround(.00100000005)));
    i16 = f28 > Math_fround(2.45000005);
    i18 = (f28 < Math_fround(2.11999989)) << 31 >> 31;
    HEAP32[i7 + (i21 << 2) >> 2] = (i16 ? 1 : i18) + i22;
    i29 = HEAP32[i4 >> 2] | 0;
   } while (i6 >>> 0 < i29 >>> 0);
   i12 = HEAP32[i1 >> 2] | 0;
   i13 = i29;
   i14 = i29;
  }
  if (i8 >>> 0 >= i12 >>> 0) break; else {
   i9 = i13;
   i10 = i12;
   i11 = i14;
  }
 }
 if (!i12) {
  __ZdaPv(i7);
  return;
 } else {
  i30 = 0;
  i31 = i13;
  i32 = i12;
 }
 while (1) {
  if (!i31) {
   i33 = i32;
   i34 = 0;
  } else {
   i12 = 0;
   i13 = i31;
   do {
    i14 = i7 + ((Math_imul(i13, i30) | 0) + i12 << 2) | 0;
    i11 = HEAP32[i14 >> 2] | 0;
    i14 = __ZN7CityMap7getTileEjj(i1, i30, i12) | 0;
    i10 = i14 + 12 | 0;
    HEAP32[i10 >> 2] = 0;
    i9 = i14 + 28 | 0;
    i8 = i14 + 32 | 0;
    i29 = i14 + 36 | 0;
    i22 = i14 + 40 | 0;
    i14 = (i11 | 0) > 0 ? i11 : 0;
    i11 = (i14 | 0) < 4 ? i14 : 4;
    HEAP32[i9 >> 2] = 0;
    HEAP32[i9 + 4 >> 2] = 0;
    HEAP32[i9 + 8 >> 2] = 0;
    HEAP32[i9 + 12 >> 2] = 0;
    if (i11 | 0) {
     i14 = i11;
     do {
      while (1) {
       HEAP32[i10 >> 2] = 1;
       i11 = __ZN7CityMap4diceEv(i1) | 0;
       if ((i11 | 0) < 250) if (!(HEAP32[i9 >> 2] | 0)) {
        i35 = i9;
        break;
       } else i2 = 26; else if ((i11 | 0) < 500) i2 = 26; else if ((i11 | 0) < 750) i2 = 28;
       if ((i2 | 0) == 26) {
        i2 = 0;
        if (!(HEAP32[i8 >> 2] | 0)) {
         i35 = i8;
         break;
        } else i2 = 28;
       }
       if ((i2 | 0) == 28) {
        i2 = 0;
        if (!(HEAP32[i29 >> 2] | 0)) {
         i35 = i29;
         break;
        }
       }
       if (!(HEAP32[i22 >> 2] | 0)) {
        i35 = i22;
        break;
       }
      }
      i11 = __ZN7CityMap4diceEv(i1) | 0;
      HEAP32[i35 >> 2] = i11;
      i14 = i14 + -1 | 0;
     } while ((i14 | 0) != 0);
    }
    i12 = i12 + 1 | 0;
    i13 = HEAP32[i4 >> 2] | 0;
   } while (i12 >>> 0 < i13 >>> 0);
   i33 = HEAP32[i1 >> 2] | 0;
   i34 = i13;
  }
  i30 = i30 + 1 | 0;
  if (i30 >>> 0 >= i33 >>> 0) break; else {
   i31 = i34;
   i32 = i33;
  }
 }
 __ZdaPv(i7);
 return;
}

function __ZNK6ImFont13CalcTextSizeAEfffPKcS1_PS1_(i1, i2, f3, f4, f5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 f3 = Math_fround(f3);
 f4 = Math_fround(f4);
 f5 = Math_fround(f5);
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0, i10 = 0, i11 = 0, i12 = 0, f13 = f0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, f18 = f0, i19 = 0, i20 = 0, f21 = f0, f22 = f0, i23 = 0, i24 = 0, i25 = 0, f26 = f0, f27 = f0, i28 = 0, i29 = 0, f30 = f0, i31 = 0, i32 = 0, f33 = f0, f34 = f0, i35 = 0, i36 = 0, i37 = 0, f38 = f0, f39 = f0, f40 = f0, f41 = f0, f42 = f0, i43 = 0, f44 = f0, i45 = 0, f46 = f0, f47 = f0, i48 = 0, f49 = f0, i50 = 0;
 i9 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i11 = i10;
 if (!i7) i12 = i6 + (_strlen(i6) | 0) | 0; else i12 = i7;
 f13 = Math_fround(f3 / Math_fround(HEAPF32[i2 >> 2]));
 HEAPF32[i1 >> 2] = Math_fround(0.0);
 i7 = i1 + 4 | 0;
 HEAPF32[i7 >> 2] = Math_fround(0.0);
 i14 = f5 > Math_fround(0.0);
 if (i12 >>> 0 > i6 >>> 0) {
  i15 = i2 + 28 | 0;
  i16 = i2 + 36 | 0;
  i17 = i2 + 56 | 0;
  f18 = Math_fround(0.0);
  i19 = 0;
  i20 = i6;
  f21 = Math_fround(0.0);
  f22 = Math_fround(0.0);
  while (1) {
   L8 : do if (i14) {
    if (!i19) {
     i23 = __ZNK6ImFont21CalcWordWrapPositionAEfPKcS1_f(i2, f13, i20, i12, Math_fround(f5 - f18)) | 0;
     i24 = (i23 | 0) == (i20 | 0) ? i23 + 1 | 0 : i23;
    } else i24 = i19;
    if (i20 >>> 0 < i24 >>> 0) {
     i25 = i24;
     i9 = 14;
    } else {
     if (f21 < f18) {
      HEAPF32[i1 >> 2] = f18;
      f26 = f18;
     } else f26 = f21;
     f27 = Math_fround(f22 + f3);
     HEAPF32[i7 >> 2] = f27;
     if (i20 >>> 0 < i12 >>> 0) {
      i23 = i20;
      while (1) {
       i28 = HEAP8[i23 >> 0] | 0;
       i29 = i28 << 24 >> 24 == 32 | (i28 + -9 & 255) < 2 ? i23 + 1 | 0 : i23;
       switch (i28 << 24 >> 24) {
       case 9:
       case 32:
        break;
       default:
        {
         f30 = Math_fround(0.0);
         i31 = 0;
         i32 = i29;
         f33 = f27;
         f34 = f26;
         break L8;
        }
       }
       if (i29 >>> 0 < i12 >>> 0) i23 = i29; else {
        f30 = Math_fround(0.0);
        i31 = 0;
        i32 = i29;
        f33 = f27;
        f34 = f26;
        break L8;
       }
      }
     } else {
      f30 = Math_fround(0.0);
      i31 = 0;
      i32 = i20;
      f33 = f27;
      f34 = f26;
     }
    }
   } else {
    i25 = i19;
    i9 = 14;
   } while (0);
   if ((i9 | 0) == 14) {
    i9 = 0;
    i23 = HEAP8[i20 >> 0] | 0;
    i29 = i23 << 24 >> 24;
    HEAP32[i11 >> 2] = i29;
    if (i23 << 24 >> 24 > -1) {
     i35 = i20 + 1 | 0;
     i36 = i29;
    } else {
     i29 = i20 + (__Z18ImTextCharFromUtf8PjPKcS1_(i11, i20, i12) | 0) | 0;
     i23 = HEAP32[i11 >> 2] | 0;
     if (!i23) {
      i37 = i29;
      i9 = 25;
      break;
     } else {
      i35 = i29;
      i36 = i23;
     }
    }
    L26 : do if (i36 >>> 0 < 32) {
     switch (i36 | 0) {
     case 13:
      {
       f38 = f18;
       f39 = f22;
       f40 = f21;
       break L26;
       break;
      }
     case 10:
      break;
     default:
      {
       i9 = 20;
       break L26;
      }
     }
     f41 = f21 >= f18 ? f21 : f18;
     HEAPF32[i1 >> 2] = f41;
     f42 = Math_fround(f22 + f3);
     HEAPF32[i7 >> 2] = f42;
     f38 = Math_fround(0.0);
     f39 = f42;
     f40 = f41;
    } else i9 = 20; while (0);
    if ((i9 | 0) == 20) {
     i9 = 0;
     if ((i36 | 0) < (HEAP32[i15 >> 2] | 0)) i43 = (HEAP32[i16 >> 2] | 0) + (i36 << 2) | 0; else i43 = i17;
     f41 = Math_fround(f18 + Math_fround(f13 * Math_fround(HEAPF32[i43 >> 2])));
     if (!(f41 >= f4)) {
      f38 = f41;
      f39 = f22;
      f40 = f21;
     } else {
      i37 = i20;
      i9 = 25;
      break;
     }
    }
    f30 = f38;
    i31 = i25;
    i32 = i35;
    f33 = f39;
    f34 = f40;
   }
   if (i32 >>> 0 < i12 >>> 0) {
    f18 = f30;
    i19 = i31;
    i20 = i32;
    f21 = f34;
    f22 = f33;
   } else {
    f44 = f30;
    i45 = i32;
    f46 = f34;
    f47 = f33;
    break;
   }
  }
  if ((i9 | 0) == 25) {
   f44 = f18;
   i45 = i37;
   f46 = f21;
   f47 = f22;
  }
  if (f46 < f44) HEAPF32[i1 >> 2] = f44;
  if (f44 > Math_fround(0.0) | f47 == Math_fround(0.0)) {
   i48 = i45;
   f49 = f47;
   i9 = 29;
  } else i50 = i45;
 } else {
  i48 = i6;
  f49 = Math_fround(0.0);
  i9 = 29;
 }
 if ((i9 | 0) == 29) {
  f47 = Math_fround(f49 + f3);
  HEAPF32[i7 >> 2] = f47;
  i50 = i48;
 }
 if (!i8) {
  STACKTOP = i10;
  return;
 }
 HEAP32[i8 >> 2] = i50;
 STACKTOP = i10;
 return;
}

function ___udivmoddi4(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0;
 i6 = i1;
 i7 = i2;
 i8 = i7;
 i9 = i3;
 i10 = i4;
 i11 = i10;
 if (!i8) {
  i12 = (i5 | 0) != 0;
  if (!i11) {
   if (i12) {
    HEAP32[i5 >> 2] = (i6 >>> 0) % (i9 >>> 0);
    HEAP32[i5 + 4 >> 2] = 0;
   }
   i13 = 0;
   i14 = (i6 >>> 0) / (i9 >>> 0) >>> 0;
   return (tempRet0 = i13, i14) | 0;
  } else {
   if (!i12) {
    i13 = 0;
    i14 = 0;
    return (tempRet0 = i13, i14) | 0;
   }
   HEAP32[i5 >> 2] = i1 | 0;
   HEAP32[i5 + 4 >> 2] = i2 & 0;
   i13 = 0;
   i14 = 0;
   return (tempRet0 = i13, i14) | 0;
  }
 }
 i12 = (i11 | 0) == 0;
 do if (!i9) {
  if (i12) {
   if (i5 | 0) {
    HEAP32[i5 >> 2] = (i8 >>> 0) % (i9 >>> 0);
    HEAP32[i5 + 4 >> 2] = 0;
   }
   i13 = 0;
   i14 = (i8 >>> 0) / (i9 >>> 0) >>> 0;
   return (tempRet0 = i13, i14) | 0;
  }
  if (!i6) {
   if (i5 | 0) {
    HEAP32[i5 >> 2] = 0;
    HEAP32[i5 + 4 >> 2] = (i8 >>> 0) % (i11 >>> 0);
   }
   i13 = 0;
   i14 = (i8 >>> 0) / (i11 >>> 0) >>> 0;
   return (tempRet0 = i13, i14) | 0;
  }
  i15 = i11 - 1 | 0;
  if (!(i15 & i11)) {
   if (i5 | 0) {
    HEAP32[i5 >> 2] = i1 | 0;
    HEAP32[i5 + 4 >> 2] = i15 & i8 | i2 & 0;
   }
   i13 = 0;
   i14 = i8 >>> ((_llvm_cttz_i32(i11 | 0) | 0) >>> 0);
   return (tempRet0 = i13, i14) | 0;
  }
  i15 = (Math_clz32(i11 | 0) | 0) - (Math_clz32(i8 | 0) | 0) | 0;
  if (i15 >>> 0 <= 30) {
   i16 = i15 + 1 | 0;
   i17 = 31 - i15 | 0;
   i18 = i16;
   i19 = i8 << i17 | i6 >>> (i16 >>> 0);
   i20 = i8 >>> (i16 >>> 0);
   i21 = 0;
   i22 = i6 << i17;
   break;
  }
  if (!i5) {
   i13 = 0;
   i14 = 0;
   return (tempRet0 = i13, i14) | 0;
  }
  HEAP32[i5 >> 2] = i1 | 0;
  HEAP32[i5 + 4 >> 2] = i7 | i2 & 0;
  i13 = 0;
  i14 = 0;
  return (tempRet0 = i13, i14) | 0;
 } else {
  if (!i12) {
   i17 = (Math_clz32(i11 | 0) | 0) - (Math_clz32(i8 | 0) | 0) | 0;
   if (i17 >>> 0 <= 31) {
    i16 = i17 + 1 | 0;
    i15 = 31 - i17 | 0;
    i23 = i17 - 31 >> 31;
    i18 = i16;
    i19 = i6 >>> (i16 >>> 0) & i23 | i8 << i15;
    i20 = i8 >>> (i16 >>> 0) & i23;
    i21 = 0;
    i22 = i6 << i15;
    break;
   }
   if (!i5) {
    i13 = 0;
    i14 = 0;
    return (tempRet0 = i13, i14) | 0;
   }
   HEAP32[i5 >> 2] = i1 | 0;
   HEAP32[i5 + 4 >> 2] = i7 | i2 & 0;
   i13 = 0;
   i14 = 0;
   return (tempRet0 = i13, i14) | 0;
  }
  i15 = i9 - 1 | 0;
  if (i15 & i9 | 0) {
   i23 = (Math_clz32(i9 | 0) | 0) + 33 - (Math_clz32(i8 | 0) | 0) | 0;
   i16 = 64 - i23 | 0;
   i17 = 32 - i23 | 0;
   i24 = i17 >> 31;
   i25 = i23 - 32 | 0;
   i26 = i25 >> 31;
   i18 = i23;
   i19 = i17 - 1 >> 31 & i8 >>> (i25 >>> 0) | (i8 << i17 | i6 >>> (i23 >>> 0)) & i26;
   i20 = i26 & i8 >>> (i23 >>> 0);
   i21 = i6 << i16 & i24;
   i22 = (i8 << i16 | i6 >>> (i25 >>> 0)) & i24 | i6 << i17 & i23 - 33 >> 31;
   break;
  }
  if (i5 | 0) {
   HEAP32[i5 >> 2] = i15 & i6;
   HEAP32[i5 + 4 >> 2] = 0;
  }
  if ((i9 | 0) == 1) {
   i13 = i7 | i2 & 0;
   i14 = i1 | 0 | 0;
   return (tempRet0 = i13, i14) | 0;
  } else {
   i15 = _llvm_cttz_i32(i9 | 0) | 0;
   i13 = i8 >>> (i15 >>> 0) | 0;
   i14 = i8 << 32 - i15 | i6 >>> (i15 >>> 0) | 0;
   return (tempRet0 = i13, i14) | 0;
  }
 } while (0);
 if (!i18) {
  i27 = i22;
  i28 = i21;
  i29 = i20;
  i30 = i19;
  i31 = 0;
  i32 = 0;
 } else {
  i6 = i3 | 0 | 0;
  i3 = i10 | i4 & 0;
  i4 = _i64Add(i6 | 0, i3 | 0, -1, -1) | 0;
  i10 = tempRet0;
  i8 = i22;
  i22 = i21;
  i21 = i20;
  i20 = i19;
  i19 = i18;
  i18 = 0;
  do {
   i9 = i8;
   i8 = i22 >>> 31 | i8 << 1;
   i22 = i18 | i22 << 1;
   i1 = i20 << 1 | i9 >>> 31 | 0;
   i9 = i20 >>> 31 | i21 << 1 | 0;
   _i64Subtract(i4 | 0, i10 | 0, i1 | 0, i9 | 0) | 0;
   i2 = tempRet0;
   i7 = ((i2 | 0) < 0 ? -1 : 0) << 1 | 0;
   i11 = i2 >> 31 | i7;
   i18 = i11 & 1;
   i20 = _i64Subtract(i1 | 0, i9 | 0, i11 & i6 | 0, (((i2 | 0) < 0 ? -1 : 0) >> 31 | i7) & i3 | 0) | 0;
   i21 = tempRet0;
   i19 = i19 - 1 | 0;
  } while ((i19 | 0) != 0);
  i27 = i8;
  i28 = i22;
  i29 = i21;
  i30 = i20;
  i31 = 0;
  i32 = i18;
 }
 i18 = i28;
 i28 = 0;
 if (i5 | 0) {
  HEAP32[i5 >> 2] = i30;
  HEAP32[i5 + 4 >> 2] = i29;
 }
 i13 = (i18 | 0) >>> 31 | (i27 | i28) << 1 | (i28 << 1 | i18 >>> 31) & 0 | i31;
 i14 = (i18 << 1 | 0 >>> 31) & -2 | i32;
 return (tempRet0 = i13, i14) | 0;
}

function _png_read_IDAT_data(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 1024 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1024);
 i6 = i5;
 i7 = i1 + 224 | 0;
 i8 = i1 + 236 | 0;
 HEAP32[i8 >> 2] = i2;
 i9 = i1 + 240 | 0;
 HEAP32[i9 >> 2] = 0;
 i10 = (i2 | 0) == 0 ? 0 : i3;
 i3 = i1 + 228 | 0;
 i11 = (i2 | 0) != 0;
 i2 = i1 + 408 | 0;
 i12 = i1 + 376 | 0;
 i13 = i1 + 796 | 0;
 i14 = i1 + 788 | 0;
 i15 = i1 + 792 | 0;
 L1 : do if (i11) {
  i16 = i10;
  L2 : while (1) {
   if (!(HEAP32[i3 >> 2] | 0)) {
    i17 = HEAP32[i2 >> 2] | 0;
    while (1) {
     if (i17 | 0) break;
     _png_crc_finish(i1, 0) | 0;
     i18 = _png_read_chunk_header(i1) | 0;
     HEAP32[i2 >> 2] = i18;
     if ((HEAP32[i12 >> 2] | 0) == 1229209940) i17 = i18; else {
      i4 = 18;
      break L2;
     }
    }
    i18 = HEAP32[i13 >> 2] | 0;
    i19 = i18 >>> 0 > i17 >>> 0 ? i17 : i18;
    i18 = HEAP32[i14 >> 2] | 0;
    if (!i18) i4 = 8; else if ((HEAP32[i15 >> 2] | 0) >>> 0 < i19 >>> 0) {
     HEAP32[i14 >> 2] = 0;
     HEAP32[i15 >> 2] = 0;
     _png_free(i1, i18);
     i4 = 8;
    } else i20 = i18;
    if ((i4 | 0) == 8) {
     i4 = 0;
     i18 = _png_malloc_base(i1, i19) | 0;
     if (!i18) {
      i4 = 24;
      break;
     }
     HEAP32[i14 >> 2] = i18;
     HEAP32[i15 >> 2] = i19;
     i20 = i18;
    }
    _png_read_data(i1, i20, i19);
    _png_calculate_crc(i1, i20, i19);
    HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) - i19;
    HEAP32[i7 >> 2] = i20;
    HEAP32[i3 >> 2] = i19;
   }
   HEAP32[i9 >> 2] = i16;
   i19 = _inflate(i7, 0) | 0;
   i16 = HEAP32[i9 >> 2] | 0;
   HEAP32[i9 >> 2] = 0;
   switch (i19 | 0) {
   case 1:
    {
     i21 = i16;
     break L1;
     break;
    }
   case 0:
    break;
   default:
    {
     i22 = i19;
     i4 = 30;
     break L1;
    }
   }
   if (!i16) {
    i4 = 38;
    break;
   }
  }
  if ((i4 | 0) == 18) _png_error(i1, 64627); else if ((i4 | 0) == 24) _png_chunk_error(i1, 60678); else if ((i4 | 0) == 38) {
   STACKTOP = i5;
   return;
  }
 } else {
  i16 = i10;
  L23 : while (1) {
   if (!(HEAP32[i3 >> 2] | 0)) {
    i19 = HEAP32[i2 >> 2] | 0;
    while (1) {
     if (i19 | 0) break;
     _png_crc_finish(i1, 0) | 0;
     i18 = _png_read_chunk_header(i1) | 0;
     HEAP32[i2 >> 2] = i18;
     if ((HEAP32[i12 >> 2] | 0) == 1229209940) i19 = i18; else {
      i4 = 18;
      break L23;
     }
    }
    i17 = HEAP32[i13 >> 2] | 0;
    i18 = i17 >>> 0 > i19 >>> 0 ? i19 : i17;
    i17 = HEAP32[i14 >> 2] | 0;
    if (!i17) i4 = 22; else if ((HEAP32[i15 >> 2] | 0) >>> 0 < i18 >>> 0) {
     HEAP32[i14 >> 2] = 0;
     HEAP32[i15 >> 2] = 0;
     _png_free(i1, i17);
     i4 = 22;
    } else i23 = i17;
    if ((i4 | 0) == 22) {
     i4 = 0;
     i17 = _png_malloc_base(i1, i18) | 0;
     if (!i17) {
      i4 = 24;
      break;
     }
     HEAP32[i14 >> 2] = i17;
     HEAP32[i15 >> 2] = i18;
     i23 = i17;
    }
    _png_read_data(i1, i23, i18);
    _png_calculate_crc(i1, i23, i18);
    HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) - i18;
    HEAP32[i7 >> 2] = i23;
    HEAP32[i3 >> 2] = i18;
   }
   HEAP32[i8 >> 2] = i6;
   HEAP32[i9 >> 2] = 1024;
   i18 = _inflate(i7, 0) | 0;
   i16 = 1024 - (HEAP32[i9 >> 2] | 0) + i16 | 0;
   HEAP32[i9 >> 2] = 0;
   switch (i18 | 0) {
   case 1:
    {
     i21 = i16;
     break L1;
     break;
    }
   case 0:
    break;
   default:
    {
     i22 = i18;
     i4 = 30;
     break L1;
    }
   }
   if (!i16) {
    i4 = 38;
    break;
   }
  }
  if ((i4 | 0) == 18) _png_error(i1, 64627); else if ((i4 | 0) == 24) _png_chunk_error(i1, 60678); else if ((i4 | 0) == 38) {
   STACKTOP = i5;
   return;
  }
 } while (0);
 if ((i4 | 0) == 30) {
  _png_zstream_error(i1, i22);
  i22 = HEAP32[i1 + 248 >> 2] | 0;
  if (i11) _png_chunk_error(i1, i22);
  _png_chunk_benign_error(i1, i22);
  STACKTOP = i5;
  return;
 }
 HEAP32[i8 >> 2] = 0;
 i8 = i1 + 208 | 0;
 HEAP32[i8 >> 2] = HEAP32[i8 >> 2] | 8;
 i8 = i1 + 212 | 0;
 HEAP32[i8 >> 2] = HEAP32[i8 >> 2] | 8;
 if (!(HEAP32[i3 >> 2] | 0)) {
  if (HEAP32[i2 >> 2] | 0) i4 = 29;
 } else i4 = 29;
 if ((i4 | 0) == 29) _png_chunk_benign_error(i1, 64649);
 if (!i21) {
  STACKTOP = i5;
  return;
 }
 if (i11) _png_error(i1, 64627);
 _png_chunk_benign_error(i1, 64671);
 STACKTOP = i5;
 return;
}

function __ZN12RenderSystem5startERKN3glm3vecILi3EfLNS0_9qualifierE0EEES5_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, f8 = f0, f9 = f0, f10 = f0, f11 = f0, f12 = f0, f13 = f0, f14 = f0, f15 = f0, f16 = f0, f17 = f0, f18 = f0, f19 = f0, f20 = f0, f21 = f0, f22 = f0, f23 = f0, f24 = f0, f25 = f0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i5 = i4;
 i6 = i1 + 72 | 0;
 i7 = HEAP32[i6 >> 2] | 0;
 _glViewport(0, 0, HEAP32[i7 + 4 >> 2] | 0, HEAP32[i7 + 8 >> 2] | 0);
 _glDepthFunc(513);
 if (!(HEAP8[5847249] | 0)) {
  HEAP8[5847249] = 1;
  i7 = HEAP32[i6 >> 2] | 0;
  f8 = Math_fround(HEAP32[i7 + 4 >> 2] | 0);
  f9 = Math_fround(HEAP32[i7 + 8 >> 2] | 0);
  f10 = Math_fround(f8 + f8);
  f11 = Math_fround(Math_fround(2.0) / f10);
  f12 = Math_fround(f9 + f9);
  f13 = Math_fround(Math_fround(2.0) / f12);
  f14 = Math_fround(Math_fround(-Math_fround(f8 - f8)) / f10);
  f10 = Math_fround(Math_fround(-Math_fround(f9 - f9)) / f12);
  HEAPF32[i1 + 108 >> 2] = f11;
  i7 = i1 + 112 | 0;
  HEAP32[i7 >> 2] = 0;
  HEAP32[i7 + 4 >> 2] = 0;
  HEAP32[i7 + 8 >> 2] = 0;
  HEAP32[i7 + 12 >> 2] = 0;
  HEAPF32[i1 + 128 >> 2] = f13;
  i7 = i1 + 132 | 0;
  HEAP32[i7 >> 2] = 0;
  HEAP32[i7 + 4 >> 2] = 0;
  HEAP32[i7 + 8 >> 2] = 0;
  HEAP32[i7 + 12 >> 2] = 0;
  HEAPF32[i1 + 148 >> 2] = Math_fround(-2.00000204e-06);
  HEAPF32[i1 + 152 >> 2] = Math_fround(0.0);
  HEAPF32[i1 + 156 >> 2] = f14;
  HEAPF32[i1 + 160 >> 2] = f10;
  HEAPF32[i1 + 164 >> 2] = Math_fround(-1.00000203);
  HEAPF32[i1 + 168 >> 2] = Math_fround(1.0);
 }
 f10 = Math_fround(+HEAPF64[i1 + 48 >> 3]);
 f14 = Math_fround(+HEAPF64[i1 + 56 >> 3]);
 f13 = Math_fround(Math_fround(HEAPF32[i2 >> 2]) + f10);
 f11 = Math_fround(Math_fround(HEAPF32[i2 + 4 >> 2]) + f14);
 f12 = Math_fround(Math_fround(HEAPF32[i2 + 8 >> 2]) + Math_fround(0.0));
 f9 = Math_fround(Math_fround(HEAPF32[i3 >> 2]) + f10);
 f10 = Math_fround(Math_fround(HEAPF32[i3 + 4 >> 2]) + f14);
 f14 = Math_fround(f9 - f13);
 f9 = Math_fround(f10 - f11);
 f10 = Math_fround(Math_fround(Math_fround(HEAPF32[i3 + 8 >> 2]) + Math_fround(0.0)) - f12);
 f8 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround(f14 * f14) + Math_fround(f9 * f9)) + Math_fround(f10 * f10)))));
 f15 = Math_fround(f14 * f8);
 f14 = Math_fround(f9 * f8);
 f9 = Math_fround(f10 * f8);
 f8 = Math_fround(f9 * Math_fround(0.0));
 f10 = Math_fround(f14 - f8);
 f16 = Math_fround(f8 - f15);
 f8 = Math_fround(Math_fround(f15 * Math_fround(0.0)) - Math_fround(f14 * Math_fround(0.0)));
 f17 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(f8 * f8) + Math_fround(Math_fround(f10 * f10) + Math_fround(f16 * f16))))));
 f18 = Math_fround(f17 * f10);
 f10 = Math_fround(f17 * f16);
 f16 = Math_fround(f17 * f8);
 f8 = Math_fround(Math_fround(f9 * f10) - Math_fround(f14 * f16));
 f17 = Math_fround(Math_fround(f15 * f16) - Math_fround(f9 * f18));
 f19 = Math_fround(Math_fround(f14 * f18) - Math_fround(f15 * f10));
 f20 = Math_fround(-f15);
 f21 = Math_fround(-f14);
 f22 = Math_fround(-f9);
 f23 = Math_fround(-Math_fround(Math_fround(f12 * f16) + Math_fround(Math_fround(f13 * f18) + Math_fround(f11 * f10))));
 f24 = Math_fround(-Math_fround(Math_fround(f12 * f19) + Math_fround(Math_fround(f13 * f8) + Math_fround(f11 * f17))));
 f25 = Math_fround(Math_fround(f12 * f9) + Math_fround(Math_fround(f11 * f14) + Math_fround(f13 * f15)));
 HEAPF32[i1 + 172 >> 2] = f18;
 HEAPF32[i1 + 176 >> 2] = f8;
 HEAPF32[i1 + 180 >> 2] = f20;
 HEAPF32[i1 + 184 >> 2] = Math_fround(0.0);
 HEAPF32[i1 + 188 >> 2] = f10;
 HEAPF32[i1 + 192 >> 2] = f17;
 HEAPF32[i1 + 196 >> 2] = f21;
 HEAPF32[i1 + 200 >> 2] = Math_fround(0.0);
 HEAPF32[i1 + 204 >> 2] = f16;
 HEAPF32[i1 + 208 >> 2] = f19;
 HEAPF32[i1 + 212 >> 2] = f22;
 HEAPF32[i1 + 216 >> 2] = Math_fround(0.0);
 HEAPF32[i1 + 220 >> 2] = f23;
 HEAPF32[i1 + 224 >> 2] = f24;
 HEAPF32[i1 + 228 >> 2] = f25;
 HEAPF32[i1 + 232 >> 2] = Math_fround(1.0);
 __ZN3glmmlIfLNS_9qualifierE0EEENS_3matILi4ELi4ET_XT0_EEERKS4_S6_(i5, i1 + 108 | 0, i1 + 172 | 0);
 _glUseProgram(HEAP32[i1 + 40 >> 2] | 0);
 _glUniformMatrix4fv(HEAP32[i1 + 12 >> 2] | 0, 1, 0, i5 | 0);
 _glUseProgram(HEAP32[i1 + 44 >> 2] | 0);
 _glUniformMatrix4fv(HEAP32[i1 + 24 >> 2] | 0, 1, 0, i5 | 0);
 STACKTOP = i4;
 return;
}

function _adler32(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0;
 i4 = 0;
 i5 = i1 >>> 16;
 i6 = i1 & 65535;
 if ((i3 | 0) == 1) {
  i1 = i6 + (HEAPU8[i2 >> 0] | 0) | 0;
  i7 = i1 >>> 0 > 65520 ? i1 + -65521 | 0 : i1;
  i1 = i7 + i5 | 0;
  i8 = (i1 >>> 0 > 65520 ? i1 + 15 | 0 : i1) << 16 | i7;
  return i8 | 0;
 }
 if (!i2) {
  i8 = 1;
  return i8 | 0;
 }
 if (i3 >>> 0 < 16) {
  if (!i3) {
   i9 = i5;
   i10 = i6;
  } else {
   i7 = i3;
   i1 = i2;
   i11 = i6;
   i12 = i5;
   while (1) {
    i7 = i7 + -1 | 0;
    i13 = i11 + (HEAPU8[i1 >> 0] | 0) | 0;
    i14 = i13 + i12 | 0;
    if (!i7) {
     i9 = i14;
     i10 = i13;
     break;
    } else {
     i1 = i1 + 1 | 0;
     i11 = i13;
     i12 = i14;
    }
   }
  }
  i8 = ((i9 >>> 0) % 65521 | 0) << 16 | (i10 >>> 0 > 65520 ? i10 + -65521 | 0 : i10);
  return i8 | 0;
 }
 if (i3 >>> 0 > 5551) {
  i10 = i3;
  i9 = i2;
  i12 = i5;
  i11 = i6;
  do {
   i10 = i10 + -5552 | 0;
   i1 = 347;
   i7 = i9;
   i14 = i12;
   i13 = i11;
   while (1) {
    i15 = i13 + (HEAPU8[i7 >> 0] | 0) | 0;
    i16 = i15 + (HEAPU8[i7 + 1 >> 0] | 0) | 0;
    i17 = i16 + (HEAPU8[i7 + 2 >> 0] | 0) | 0;
    i18 = i17 + (HEAPU8[i7 + 3 >> 0] | 0) | 0;
    i19 = i18 + (HEAPU8[i7 + 4 >> 0] | 0) | 0;
    i20 = i19 + (HEAPU8[i7 + 5 >> 0] | 0) | 0;
    i21 = i20 + (HEAPU8[i7 + 6 >> 0] | 0) | 0;
    i22 = i21 + (HEAPU8[i7 + 7 >> 0] | 0) | 0;
    i23 = i22 + (HEAPU8[i7 + 8 >> 0] | 0) | 0;
    i24 = i23 + (HEAPU8[i7 + 9 >> 0] | 0) | 0;
    i25 = i24 + (HEAPU8[i7 + 10 >> 0] | 0) | 0;
    i26 = i25 + (HEAPU8[i7 + 11 >> 0] | 0) | 0;
    i27 = i26 + (HEAPU8[i7 + 12 >> 0] | 0) | 0;
    i28 = i27 + (HEAPU8[i7 + 13 >> 0] | 0) | 0;
    i29 = i28 + (HEAPU8[i7 + 14 >> 0] | 0) | 0;
    i13 = i29 + (HEAPU8[i7 + 15 >> 0] | 0) | 0;
    i14 = i15 + i14 + i16 + i17 + i18 + i19 + i20 + i21 + i22 + i23 + i24 + i25 + i26 + i27 + i28 + i29 + i13 | 0;
    i1 = i1 + -1 | 0;
    if (!i1) break; else i7 = i7 + 16 | 0;
   }
   i9 = i9 + 5552 | 0;
   i11 = (i13 >>> 0) % 65521 | 0;
   i12 = (i14 >>> 0) % 65521 | 0;
  } while (i10 >>> 0 > 5551);
  if (!i10) {
   i30 = i12;
   i31 = i11;
  } else if (i10 >>> 0 > 15) {
   i32 = i10;
   i33 = i9;
   i34 = i12;
   i35 = i11;
   i4 = 14;
  } else {
   i36 = i10;
   i37 = i9;
   i38 = i12;
   i39 = i11;
   i4 = 17;
  }
 } else {
  i32 = i3;
  i33 = i2;
  i34 = i5;
  i35 = i6;
  i4 = 14;
 }
 if ((i4 | 0) == 14) {
  i6 = i32 + -16 | 0;
  i5 = i6 & -16;
  i2 = i5 + 16 | 0;
  i3 = i32;
  i32 = i33;
  i11 = i34;
  i34 = i35;
  while (1) {
   i3 = i3 + -16 | 0;
   i35 = i34 + (HEAPU8[i32 >> 0] | 0) | 0;
   i12 = i35 + (HEAPU8[i32 + 1 >> 0] | 0) | 0;
   i9 = i12 + (HEAPU8[i32 + 2 >> 0] | 0) | 0;
   i10 = i9 + (HEAPU8[i32 + 3 >> 0] | 0) | 0;
   i7 = i10 + (HEAPU8[i32 + 4 >> 0] | 0) | 0;
   i1 = i7 + (HEAPU8[i32 + 5 >> 0] | 0) | 0;
   i29 = i1 + (HEAPU8[i32 + 6 >> 0] | 0) | 0;
   i28 = i29 + (HEAPU8[i32 + 7 >> 0] | 0) | 0;
   i27 = i28 + (HEAPU8[i32 + 8 >> 0] | 0) | 0;
   i26 = i27 + (HEAPU8[i32 + 9 >> 0] | 0) | 0;
   i25 = i26 + (HEAPU8[i32 + 10 >> 0] | 0) | 0;
   i24 = i25 + (HEAPU8[i32 + 11 >> 0] | 0) | 0;
   i23 = i24 + (HEAPU8[i32 + 12 >> 0] | 0) | 0;
   i22 = i23 + (HEAPU8[i32 + 13 >> 0] | 0) | 0;
   i21 = i22 + (HEAPU8[i32 + 14 >> 0] | 0) | 0;
   i34 = i21 + (HEAPU8[i32 + 15 >> 0] | 0) | 0;
   i11 = i35 + i11 + i12 + i9 + i10 + i7 + i1 + i29 + i28 + i27 + i26 + i25 + i24 + i23 + i22 + i21 + i34 | 0;
   if (i3 >>> 0 <= 15) break; else i32 = i32 + 16 | 0;
  }
  i32 = i6 - i5 | 0;
  if (!i32) {
   i40 = i11;
   i41 = i34;
   i4 = 18;
  } else {
   i36 = i32;
   i37 = i33 + i2 | 0;
   i38 = i11;
   i39 = i34;
   i4 = 17;
  }
 }
 if ((i4 | 0) == 17) while (1) {
  i4 = 0;
  i36 = i36 + -1 | 0;
  i34 = i39 + (HEAPU8[i37 >> 0] | 0) | 0;
  i11 = i34 + i38 | 0;
  if (!i36) {
   i40 = i11;
   i41 = i34;
   i4 = 18;
   break;
  } else {
   i37 = i37 + 1 | 0;
   i38 = i11;
   i39 = i34;
   i4 = 17;
  }
 }
 if ((i4 | 0) == 18) {
  i30 = (i40 >>> 0) % 65521 | 0;
  i31 = (i41 >>> 0) % 65521 | 0;
 }
 i8 = i30 << 16 | i31;
 return i8 | 0;
}

function __ZL20stbtt_FindGlyphIndexPK14stbtt_fontinfoi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i3 = 0;
 i4 = HEAP32[i1 + 4 >> 2] | 0;
 i5 = HEAP32[i1 + 44 >> 2] | 0;
 i1 = i4 + i5 | 0;
 i6 = ((HEAPU8[i1 >> 0] | 0) << 8 | (HEAPU8[i1 + 1 >> 0] | 0)) & 65535;
 switch (i6 << 16 >> 16) {
 case 0:
  {
   i7 = i1 + 2 | 0;
   if ((((HEAPU8[i7 >> 0] | 0) << 8 | (HEAPU8[i7 + 1 >> 0] | 0)) + -6 | 0) <= (i2 | 0)) {
    i8 = 0;
    return i8 | 0;
   }
   i8 = HEAPU8[i1 + 6 + i2 >> 0] | 0;
   return i8 | 0;
  }
 case 6:
  {
   i7 = i1 + 6 | 0;
   i9 = (HEAPU8[i7 >> 0] | 0) << 8 | (HEAPU8[i7 + 1 >> 0] | 0);
   i7 = i1 + 8 | 0;
   if (i9 >>> 0 > i2 >>> 0) {
    i8 = 0;
    return i8 | 0;
   }
   if ((((HEAPU8[i7 >> 0] | 0) << 8 | (HEAPU8[i7 + 1 >> 0] | 0)) + i9 | 0) >>> 0 <= i2 >>> 0) {
    i8 = 0;
    return i8 | 0;
   }
   i7 = i1 + 10 + (i2 - i9 << 1) | 0;
   i8 = (HEAPU8[i7 >> 0] | 0) << 8 | (HEAPU8[i7 + 1 >> 0] | 0);
   return i8 | 0;
  }
 case 2:
  {
   ___assert_fail(54909, 50789, 1463, 55220);
   break;
  }
 case 4:
  {
   i7 = i1 + 6 | 0;
   i9 = (HEAPU8[i7 >> 0] | 0) << 8 | (HEAPU8[i7 + 1 >> 0] | 0);
   i7 = i9 >>> 1;
   i10 = i1 + 8 | 0;
   i11 = i1 + 10 | 0;
   i12 = i1 + 12 | 0;
   if ((i2 | 0) > 65535) {
    i8 = 0;
    return i8 | 0;
   }
   i13 = ((HEAPU8[i11 >> 0] | 0) << 8 | (HEAPU8[i11 + 1 >> 0] | 0)) & 65535;
   i11 = (HEAPU8[i12 >> 0] | 0) << 8 | HEAP8[i12 + 1 >> 0] & -2 & 255;
   i12 = i4 + (i5 + 14) | 0;
   i14 = i12 + i11 | 0;
   i15 = i5 + 12 + (((HEAPU8[i14 >> 0] | 0) << 8 | (HEAPU8[i14 + 1 >> 0] | 0) | 0) > (i2 | 0) ? 0 : i11) | 0;
   if (!(i13 << 16 >> 16)) i16 = i15; else {
    i11 = ((HEAPU8[i10 >> 0] | 0) << 8 | (HEAPU8[i10 + 1 >> 0] | 0)) & 65535;
    i10 = i13;
    i13 = i15;
    while (1) {
     i11 = (i11 & 65535) >>> 1;
     i15 = i11 & 32766;
     i14 = i4 + i13 + i15 | 0;
     i17 = (((HEAPU8[i14 >> 0] | 0) << 8 | (HEAPU8[i14 + 1 >> 0] | 0) | 0) < (i2 | 0) ? i15 : 0) + i13 | 0;
     i10 = i10 + -1 << 16 >> 16;
     if (!(i10 << 16 >> 16)) {
      i16 = i17;
      break;
     } else i13 = i17;
    }
   }
   i13 = 131058 - i5 + 2 + i16 & 131070;
   i16 = i12 + i13 | 0;
   if (((HEAPU8[i16 >> 0] | 0) << 8 | (HEAPU8[i16 + 1 >> 0] | 0) | 0) < (i2 | 0)) ___assert_fail(55241, 50789, 1499, 55220);
   i16 = i1 + 14 | 0;
   i12 = i16 + (i9 & 65534) + 2 + i13 | 0;
   i9 = (HEAPU8[i12 >> 0] | 0) << 8 | (HEAPU8[i12 + 1 >> 0] | 0);
   do if ((i9 | 0) > (i2 | 0)) i18 = 0; else {
    i12 = i7 * 6 | 0;
    i10 = i16 + i12 + 2 + i13 | 0;
    i11 = (HEAPU8[i10 >> 0] | 0) << 8 | (HEAPU8[i10 + 1 >> 0] | 0);
    if (!i11) {
     i10 = i16 + (i7 << 2) + 2 + i13 | 0;
     i18 = ((HEAPU8[i10 >> 0] | 0) << 8 | (HEAPU8[i10 + 1 >> 0] | 0)) + i2 | 0;
     break;
    } else {
     i10 = i4 + i11 + (i2 - i9 << 1) + i5 + 14 + i12 + 2 + i13 | 0;
     i18 = (HEAPU8[i10 >> 0] | 0) << 8 | (HEAPU8[i10 + 1 >> 0] | 0);
     break;
    }
   } while (0);
   i8 = i18 & 65535;
   return i8 | 0;
  }
 default:
  {
   i18 = i6 << 16 >> 16 == 12;
   if ((i6 & -2) << 16 >> 16 != 12) ___assert_fail(54909, 50789, 1534, 55220);
   i6 = i1 + 12 | 0;
   i13 = i1 + 16 | 0;
   i1 = (HEAPU8[i6 + 1 >> 0] | 0) << 16 | (HEAPU8[i6 >> 0] | 0) << 24 | (HEAPU8[i6 + 2 >> 0] | 0) << 8 | (HEAPU8[i6 + 3 >> 0] | 0);
   i6 = 0;
   L6 : while (1) {
    i5 = i1;
    while (1) {
     if ((i5 | 0) <= (i6 | 0)) {
      i8 = 0;
      i3 = 27;
      break L6;
     }
     i19 = (i5 - i6 >> 1) + i6 | 0;
     i20 = i13 + (i19 * 12 | 0) | 0;
     i21 = (HEAPU8[i20 + 1 >> 0] | 0) << 16 | (HEAPU8[i20 >> 0] | 0) << 24 | (HEAPU8[i20 + 2 >> 0] | 0) << 8 | (HEAPU8[i20 + 3 >> 0] | 0);
     if (i21 >>> 0 > i2 >>> 0) i5 = i19; else break;
    }
    i9 = i20 + 4 | 0;
    if (((HEAPU8[i9 >> 0] | 0) << 24 | (HEAPU8[i9 + 1 >> 0] | 0) << 16 | (HEAPU8[i9 + 2 >> 0] | 0) << 8 | (HEAPU8[i9 + 3 >> 0] | 0)) >>> 0 < i2 >>> 0) {
     i1 = i5;
     i6 = i19 + 1 | 0;
    } else break;
   }
   if ((i3 | 0) == 27) return i8 | 0;
   i3 = i20 + 8 | 0;
   i8 = ((HEAPU8[i3 + 1 >> 0] | 0) << 16 | (HEAPU8[i3 >> 0] | 0) << 24 | (HEAPU8[i3 + 2 >> 0] | 0) << 8 | (HEAPU8[i3 + 3 >> 0] | 0)) + (i18 ? i2 - i21 | 0 : 0) | 0;
   return i8 | 0;
  }
 }
 return 0;
}

function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE8overflowEi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4 + 8 | 0;
 i6 = i4 + 4 | 0;
 i7 = i4;
 i8 = i1 + 64 | 0;
 if (!(HEAP32[i8 >> 2] | 0)) {
  i9 = -1;
  STACKTOP = i4;
  return i9 | 0;
 }
 i10 = i1 + 92 | 0;
 if (!(HEAP32[i10 >> 2] & 16)) {
  HEAP32[i1 + 8 >> 2] = 0;
  HEAP32[i1 + 12 >> 2] = 0;
  HEAP32[i1 + 16 >> 2] = 0;
  i11 = HEAP32[i1 + 52 >> 2] | 0;
  do if (i11 >>> 0 > 8) if (!(HEAP8[i1 + 98 >> 0] | 0)) {
   i12 = HEAP32[i1 + 56 >> 2] | 0;
   i13 = i12 + ((HEAP32[i1 + 60 >> 2] | 0) + -1) | 0;
   i14 = i12;
   break;
  } else {
   i12 = HEAP32[i1 + 32 >> 2] | 0;
   i13 = i12 + (i11 + -1) | 0;
   i14 = i12;
   break;
  } else {
   i13 = 0;
   i14 = 0;
  } while (0);
  HEAP32[i1 + 24 >> 2] = i14;
  i11 = i1 + 20 | 0;
  HEAP32[i11 >> 2] = i14;
  i12 = i1 + 28 | 0;
  HEAP32[i12 >> 2] = i13;
  HEAP32[i10 >> 2] = 16;
  i15 = i11;
  i16 = i12;
  i17 = i12;
  i18 = i11;
  i19 = i14;
  i20 = i13;
  i21 = i14;
 } else {
  i14 = i1 + 20 | 0;
  i13 = HEAP32[i14 >> 2] | 0;
  i11 = i1 + 28 | 0;
  i15 = i14;
  i16 = i11;
  i17 = i11;
  i18 = i14;
  i19 = i13;
  i20 = HEAP32[i11 >> 2] | 0;
  i21 = i13;
 }
 i13 = (i2 | 0) == -1;
 i11 = i1 + 24 | 0;
 i14 = HEAP32[i11 >> 2] | 0;
 if (i13) {
  i22 = i14;
  i23 = i21;
 } else {
  if (!i14) {
   HEAP32[i11 >> 2] = i5;
   HEAP32[i18 >> 2] = i5;
   HEAP32[i16 >> 2] = i5 + 1;
   i24 = i5;
  } else i24 = i14;
  HEAP8[i24 >> 0] = i2;
  i24 = (HEAP32[i11 >> 2] | 0) + 1 | 0;
  HEAP32[i11 >> 2] = i24;
  i22 = i24;
  i23 = HEAP32[i18 >> 2] | 0;
 }
 L20 : do if ((i22 | 0) == (i23 | 0)) i3 = 32; else {
  L22 : do if (!(HEAP8[i1 + 98 >> 0] | 0)) {
   i24 = i1 + 32 | 0;
   i14 = HEAP32[i24 >> 2] | 0;
   HEAP32[i6 >> 2] = i14;
   i5 = i1 + 68 | 0;
   i21 = HEAP32[i5 >> 2] | 0;
   if (!i21) {
    i25 = ___cxa_allocate_exception(4) | 0;
    __ZNSt8bad_castC2Ev(i25);
    ___cxa_throw(i25 | 0, 3152, 123);
   }
   i12 = i14;
   i14 = i1 + 72 | 0;
   i10 = i1 + 52 | 0;
   i26 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i21 >> 2] | 0) + 12 >> 2] & 15](i21, i14, i23, i22, i7, i12, i12 + (HEAP32[i10 >> 2] | 0) | 0, i6) | 0;
   i12 = HEAP32[i18 >> 2] | 0;
   L27 : do if ((HEAP32[i7 >> 2] | 0) != (i12 | 0)) {
    i21 = i26;
    i27 = i12;
    while (1) {
     if ((i21 | 0) == 3) {
      i3 = 21;
      break;
     }
     if (i21 >>> 0 >= 2) break L27;
     i28 = HEAP32[i24 >> 2] | 0;
     i29 = (HEAP32[i6 >> 2] | 0) - i28 | 0;
     if ((_fwrite(i28, 1, i29, HEAP32[i8 >> 2] | 0) | 0) != (i29 | 0)) break L27;
     if ((i21 | 0) != 1) {
      i3 = 28;
      break;
     }
     i29 = HEAP32[i7 >> 2] | 0;
     i28 = HEAP32[i11 >> 2] | 0;
     HEAP32[i15 >> 2] = i29;
     HEAP32[i16 >> 2] = i28;
     i30 = i29;
     i31 = i30 + (i28 - i29) | 0;
     HEAP32[i11 >> 2] = i31;
     i29 = HEAP32[i5 >> 2] | 0;
     if (!i29) {
      i3 = 19;
      break;
     }
     i28 = HEAP32[i24 >> 2] | 0;
     i21 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i29 >> 2] | 0) + 12 >> 2] & 15](i29, i14, i30, i31, i7, i28, i28 + (HEAP32[i10 >> 2] | 0) | 0, i6) | 0;
     i28 = HEAP32[i18 >> 2] | 0;
     if ((HEAP32[i7 >> 2] | 0) == (i28 | 0)) break L27; else i27 = i28;
    }
    if ((i3 | 0) == 19) {
     i25 = ___cxa_allocate_exception(4) | 0;
     __ZNSt8bad_castC2Ev(i25);
     ___cxa_throw(i25 | 0, 3152, 123);
    } else if ((i3 | 0) == 21) {
     i21 = (HEAP32[i11 >> 2] | 0) - i27 | 0;
     if ((_fwrite(i27, 1, i21, HEAP32[i8 >> 2] | 0) | 0) != (i21 | 0)) break;
    }
    i32 = i11;
    break L22;
   } while (0);
   i33 = -1;
   break L20;
  } else {
   i10 = i22 - i23 | 0;
   if ((_fwrite(i23, 1, i10, HEAP32[i8 >> 2] | 0) | 0) != (i10 | 0)) {
    i33 = -1;
    break L20;
   }
   i32 = i11;
  } while (0);
  HEAP32[i32 >> 2] = i19;
  HEAP32[i15 >> 2] = i19;
  HEAP32[i17 >> 2] = i20;
  i3 = 32;
 } while (0);
 if ((i3 | 0) == 32) i33 = i13 ? 0 : i2;
 i9 = i33;
 STACKTOP = i4;
 return i9 | 0;
}

function __ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe(i1, i2, i3, i4, i5, d6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 d6 = +d6;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 1008 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1008);
 i7 = i1 + 8 | 0;
 i8 = i1;
 i9 = i1 + 896 | 0;
 i10 = i1 + 888 | 0;
 i11 = i1 + 488 | 0;
 i12 = i1 + 480 | 0;
 i13 = i1 + 892 | 0;
 i14 = i1 + 476 | 0;
 i15 = i1 + 472 | 0;
 i16 = i1 + 460 | 0;
 i17 = i1 + 448 | 0;
 i18 = i1 + 436 | 0;
 i19 = i1 + 432 | 0;
 i20 = i1 + 32 | 0;
 i21 = i1 + 24 | 0;
 i22 = i1 + 16 | 0;
 i23 = i1 + 20 | 0;
 HEAP32[i10 >> 2] = i9;
 HEAPF64[i7 >> 3] = d6;
 i24 = _snprintf(i9, 100, 71983, i7) | 0;
 if (i24 >>> 0 > 99) {
  i9 = __ZNSt3__26__clocEv() | 0;
  HEAPF64[i8 >> 3] = d6;
  i25 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz(i10, i9, 71983, i8) | 0;
  i8 = HEAP32[i10 >> 2] | 0;
  if (!i8) __ZSt17__throw_bad_allocv();
  i9 = _malloc(i25 << 2) | 0;
  if (!i9) __ZSt17__throw_bad_allocv(); else {
   i26 = i9;
   i27 = i25;
   i28 = i9;
   i29 = i8;
  }
 } else {
  i26 = i11;
  i27 = i24;
  i28 = 0;
  i29 = 0;
 }
 __ZNKSt3__28ios_base6getlocEv(i12, i4);
 i24 = __ZNKSt3__26locale9use_facetERNS0_2idE(i12, 5845220) | 0;
 i11 = HEAP32[i10 >> 2] | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i24 >> 2] | 0) + 48 >> 2] & 7](i24, i11, i11 + i27 | 0, i26) | 0;
 if (!i27) i30 = 0; else i30 = (HEAP8[HEAP32[i10 >> 2] >> 0] | 0) == 45;
 HEAP32[i16 >> 2] = 0;
 HEAP32[i16 + 4 >> 2] = 0;
 HEAP32[i16 + 8 >> 2] = 0;
 i10 = 0;
 while (1) {
  if ((i10 | 0) == 3) break;
  HEAP32[i16 + (i10 << 2) >> 2] = 0;
  i10 = i10 + 1 | 0;
 }
 HEAP32[i17 >> 2] = 0;
 HEAP32[i17 + 4 >> 2] = 0;
 HEAP32[i17 + 8 >> 2] = 0;
 i10 = 0;
 while (1) {
  if ((i10 | 0) == 3) break;
  HEAP32[i17 + (i10 << 2) >> 2] = 0;
  i10 = i10 + 1 | 0;
 }
 HEAP32[i18 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 i10 = 0;
 while (1) {
  if ((i10 | 0) == 3) break;
  HEAP32[i18 + (i10 << 2) >> 2] = 0;
  i10 = i10 + 1 | 0;
 }
 __ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri(i3, i30, i12, i13, i14, i15, i16, i17, i18, i19);
 i3 = HEAP32[i19 >> 2] | 0;
 if ((i27 | 0) > (i3 | 0)) {
  i19 = HEAP8[i18 + 8 + 3 >> 0] | 0;
  i10 = HEAP8[i17 + 8 + 3 >> 0] | 0;
  i31 = 1;
  i32 = (i19 << 24 >> 24 < 0 ? HEAP32[i18 + 4 >> 2] | 0 : i19 & 255) + (i27 - i3 << 1) | 0;
  i33 = i10 << 24 >> 24 < 0 ? HEAP32[i17 + 4 >> 2] | 0 : i10 & 255;
 } else {
  i10 = HEAP8[i18 + 8 + 3 >> 0] | 0;
  i19 = HEAP8[i17 + 8 + 3 >> 0] | 0;
  i31 = 2;
  i32 = i19 << 24 >> 24 < 0 ? HEAP32[i17 + 4 >> 2] | 0 : i19 & 255;
  i33 = i10 << 24 >> 24 < 0 ? HEAP32[i18 + 4 >> 2] | 0 : i10 & 255;
 }
 i10 = i33 + i3 + i32 + i31 | 0;
 if (i10 >>> 0 > 100) {
  i31 = _malloc(i10 << 2) | 0;
  if (!i31) __ZSt17__throw_bad_allocv(); else {
   i34 = i31;
   i35 = i31;
  }
 } else {
  i34 = i20;
  i35 = 0;
 }
 __ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i(i34, i21, i22, HEAP32[i4 + 4 >> 2] | 0, i26, i26 + (i27 << 2) | 0, i24, i30, i13, HEAP32[i14 >> 2] | 0, HEAP32[i15 >> 2] | 0, i16, i17, i18, i3);
 HEAP32[i23 >> 2] = HEAP32[i2 >> 2];
 i2 = HEAP32[i21 >> 2] | 0;
 i21 = HEAP32[i22 >> 2] | 0;
 HEAP32[i7 >> 2] = HEAP32[i23 >> 2];
 i23 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i7, i34, i2, i21, i4, i5) | 0;
 if (i35 | 0) _free(i35);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i18);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i17);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i16);
 __ZNSt3__26localeD2Ev(i12);
 if (i28 | 0) _free(i28);
 if (i29 | 0) _free(i29);
 STACKTOP = i1;
 return i23 | 0;
}

function __ZN9MenuBuild12drawMenuLoadERNSt3__26vectorINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS5_IS7_EEEE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, f11 = f0, f12 = f0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 i4 = i3 + 48 | 0;
 i5 = i3 + 32 | 0;
 i6 = i3 + 16 | 0;
 i7 = i3 + 8 | 0;
 i8 = i3 + 64 | 0;
 i9 = i3 + 56 | 0;
 i10 = __ZN5ImGui5GetIOEv() | 0;
 f11 = Math_fround(Math_fround(HEAPF32[i10 + 8 >> 2]) * Math_fround(.5));
 f12 = Math_fround(Math_fround(HEAPF32[i10 + 12 >> 2]) * Math_fround(.5));
 HEAPF32[i8 >> 2] = f11;
 HEAPF32[i8 + 4 >> 2] = f12;
 HEAPF32[i9 >> 2] = Math_fround(.5);
 HEAPF32[i9 + 4 >> 2] = Math_fround(.5);
 __ZN5ImGui16SetNextWindowPosERK6ImVec2iS2_(i8, 2, i9);
 __ZN5ImGui5BeginEPKcPbi(26519, 0, 71) | 0;
 __ZN5ImGui13PushItemWidthEf(Math_fround(__ZN5ImGui26GetContentRegionAvailWidthEv()));
 i9 = (__ZN5ImGui5GetIOEv() | 0) + 140 | 0;
 i8 = HEAP32[i9 >> 2] | 0;
 if ((HEAP32[i8 + 48 >> 2] | 0) <= 1) ___assert_fail(56841, 26279, 1235, 56909);
 __ZN5ImGui8PushFontEP6ImFont(HEAP32[(HEAP32[i8 + 56 >> 2] | 0) + 4 >> 2] | 0);
 __ZN5ImGui4TextEPKcz(26509, i3);
 __ZN5ImGui7PopFontEv();
 __ZN5ImGui4TextEPKcz(5849359, i7);
 __ZN5ImGui4TextEPKcz(26445, i6);
 __ZN5ImGui4TextEPKcz(5849359, i5);
 i8 = HEAP32[i2 >> 2] | 0;
 i9 = HEAP32[i2 + 4 >> 2] | 0;
 if ((i8 | 0) != (i9 | 0)) {
  i2 = i5 + 11 | 0;
  i10 = i5 + 4 | 0;
  i13 = i6 + 11 | 0;
  i14 = i6 + 4 | 0;
  i15 = i6 + 11 | 0;
  i16 = i7 + 4 | 0;
  i17 = i1 + 20 | 0;
  i18 = i17 + 11 | 0;
  i19 = i1 + 24 | 0;
  i20 = i1 + 17 | 0;
  i21 = i1 + 36 | 0;
  i22 = i1 + 40 | 0;
  i23 = i8;
  do {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_(i5, i23);
   i8 = HEAP8[i2 >> 0] | 0;
   i24 = i8 << 24 >> 24 < 0 ? HEAP32[i10 >> 2] | 0 : i8 & 255;
   if (i24 >>> 0 > 5) {
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_(i6, i5, i24 + -5 | 0, i24, i5);
    i24 = HEAP8[i13 >> 0] | 0;
    if (((i24 << 24 >> 24 < 0 ? HEAP32[i14 >> 2] | 0 : i24 & 255) | 0) == 5) {
     i8 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKcj(i6, 0, -1, 26455, 5) | 0) == 0;
     i25 = i8;
     i26 = HEAP8[i13 >> 0] | 0;
    } else {
     i25 = 0;
     i26 = i24;
    }
    if (i26 << 24 >> 24 < 0) __ZdlPv(HEAP32[i6 >> 2] | 0);
    if (i25) {
     i24 = HEAP8[i2 >> 0] | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_(i6, i5, 0, (i24 << 24 >> 24 < 0 ? HEAP32[i10 >> 2] | 0 : i24 & 255) + -5 | 0, i5);
     i24 = (HEAP8[i15 >> 0] | 0) < 0 ? HEAP32[i6 >> 2] | 0 : i6;
     HEAPF32[i7 >> 2] = Math_fround(0.0);
     HEAPF32[i16 >> 2] = Math_fround(0.0);
     i8 = __ZN5ImGui6ButtonEPKcRK6ImVec2(i24, i7) | 0;
     if ((HEAP8[i15 >> 0] | 0) < 0) __ZdlPv(HEAP32[i6 >> 2] | 0);
     if (i8) {
      i8 = HEAP8[i2 >> 0] | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_(i6, i5, 0, (i8 << 24 >> 24 < 0 ? HEAP32[i10 >> 2] | 0 : i8 & 255) + -5 | 0, i5);
      if ((HEAP8[i18 >> 0] | 0) < 0) {
       HEAP8[HEAP32[i17 >> 2] >> 0] = 0;
       HEAP32[i19 >> 2] = 0;
      } else {
       HEAP8[i17 >> 0] = 0;
       HEAP8[i18 >> 0] = 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i17, 0);
      HEAP32[i17 >> 2] = HEAP32[i6 >> 2];
      HEAP32[i17 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
      HEAP32[i17 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
      HEAP8[i20 >> 0] = 0;
      HEAP32[i21 >> 2] = 1;
      HEAP32[i22 >> 2] = 1;
     }
    }
   }
   if ((HEAP8[i2 >> 0] | 0) < 0) __ZdlPv(HEAP32[i5 >> 2] | 0);
   i23 = i23 + 12 | 0;
  } while ((i23 | 0) != (i9 | 0));
 }
 __ZN5ImGui4TextEPKcz(5849359, i4);
 HEAPF32[i4 >> 2] = Math_fround(0.0);
 HEAPF32[i4 + 4 >> 2] = Math_fround(0.0);
 if (!(__ZN5ImGui6ButtonEPKcRK6ImVec2(26438, i4) | 0)) {
  __ZN5ImGui12PopItemWidthEv();
  __ZN5ImGui3EndEv();
  STACKTOP = i3;
  return;
 }
 HEAP8[i1 + 17 >> 0] = 0;
 __ZN5ImGui12PopItemWidthEv();
 __ZN5ImGui3EndEv();
 STACKTOP = i3;
 return;
}

function __ZL27FindBestWindowPosForPopupExRK6ImVec2S1_PiRK6ImRectS5_24ImGuiPopupPositionPolicy(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, f13 = f0, f14 = f0, f15 = f0, f16 = f0, f17 = f0, f18 = f0, f19 = f0, f20 = f0, f21 = f0, f22 = f0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, f27 = f0, f28 = f0, f29 = f0, f30 = f0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, f36 = f0, f37 = f0;
 i8 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i10 = i9;
 i11 = i9 + 8 | 0;
 i12 = i5 + 8 | 0;
 f13 = Math_fround(HEAPF32[i12 >> 2]);
 f14 = Math_fround(HEAPF32[i3 >> 2]);
 f15 = Math_fround(f13 - f14);
 f16 = Math_fround(HEAPF32[i5 + 12 >> 2]);
 f17 = Math_fround(HEAPF32[i3 + 4 >> 2]);
 f18 = Math_fround(f16 - f17);
 HEAPF32[i10 >> 2] = f15;
 HEAPF32[i10 + 4 >> 2] = f18;
 f19 = Math_fround(HEAPF32[i2 >> 2]);
 f20 = Math_fround(HEAPF32[i5 >> 2]);
 i3 = i2 + 4 | 0;
 f21 = Math_fround(HEAPF32[i3 >> 2]);
 f22 = Math_fround(HEAPF32[i5 + 4 >> 2]);
 i23 = HEAP32[(f21 < f22 ? i5 : f21 > f18 ? i10 : i2) + 4 >> 2] | 0;
 HEAP32[i11 >> 2] = HEAP32[(f19 < f20 ? i5 : f19 > f15 ? i10 : i2) >> 2];
 HEAP32[i11 + 4 >> 2] = i23;
 i23 = HEAP32[i4 >> 2] | 0;
 L1 : do if ((i7 | 0) == 1) {
  i10 = i1 + 4 | 0;
  f15 = Math_fround(HEAPF32[i6 >> 2]);
  f19 = Math_fround(HEAPF32[i6 + 12 >> 2]);
  f18 = Math_fround(Math_fround(HEAPF32[i6 + 4 >> 2]) - f17);
  f21 = Math_fround(Math_fround(HEAPF32[i6 + 8 >> 2]) - f14);
  i24 = ((i23 | 0) != -1) << 31 >> 31;
  while (1) {
   i25 = (i24 | 0) == -1;
   i26 = HEAP32[(i25 ? i4 : 4256 + (i24 << 2) | 0) >> 2] | 0;
   if (!((i26 | 0) == (i23 | 0) & (i25 ^ 1))) {
    HEAPF32[i10 >> 2] = Math_fround(0.0);
    HEAPF32[i1 >> 2] = Math_fround(0.0);
    switch (i26 | 0) {
    case 3:
     {
      f27 = f19;
      f28 = f15;
      i8 = 8;
      break;
     }
    case 1:
     {
      f27 = f18;
      f28 = f15;
      i8 = 8;
      break;
     }
    case 0:
     {
      f27 = f19;
      f28 = f21;
      i8 = 8;
      break;
     }
    case 2:
     {
      f27 = f18;
      f28 = f21;
      i8 = 8;
      break;
     }
    default:
     {
      f29 = Math_fround(0.0);
      f30 = Math_fround(0.0);
     }
    }
    if ((i8 | 0) == 8) {
     i8 = 0;
     HEAPF32[i1 >> 2] = f28;
     HEAPF32[i10 >> 2] = f27;
     f29 = f28;
     f30 = f27;
    }
    if (f29 >= f20) if (!(!(f30 >= f22) | !(Math_fround(f29 + f14) <= f13) | !(Math_fround(f30 + f17) <= f16))) break;
   }
   if ((i24 | 0) < 3) i24 = i24 + 1 | 0; else break L1;
  }
  HEAP32[i4 >> 2] = i26;
  STACKTOP = i9;
  return;
 } while (0);
 i26 = i6 + 8 | 0;
 i7 = ((i23 | 0) != -1) << 31 >> 31;
 while (1) {
  i24 = (i7 | 0) == -1;
  i31 = HEAP32[(i24 ? i4 : 4272 + (i7 << 2) | 0) >> 2] | 0;
  if (!((i31 | 0) == (i23 | 0) & (i24 ^ 1))) {
   i32 = (i31 | 0) == 0;
   f30 = Math_fround(HEAPF32[(i32 ? i6 : i12) >> 2]);
   i33 = (i31 | 0) == 1;
   i34 = (i31 | 0) == 2;
   i35 = (i31 | 0) == 3;
   if (!(Math_fround(f30 - Math_fround(HEAPF32[(i33 ? i26 : i5) >> 2])) < f14)) {
    f30 = Math_fround(HEAPF32[(i34 ? i6 : i12) + 4 >> 2]);
    if (!(Math_fround(f30 - Math_fround(HEAPF32[(i35 ? i26 : i5) + 4 >> 2])) < f17)) break;
   }
  }
  if ((i7 | 0) < 3) i7 = i7 + 1 | 0; else {
   i8 = 25;
   break;
  }
 }
 if ((i8 | 0) == 25) {
  HEAP32[i4 >> 2] = -1;
  f30 = Math_fround(HEAPF32[i2 >> 2]);
  f29 = Math_fround(HEAPF32[i3 >> 2]);
  f27 = Math_fround(f30 + f14);
  f30 = Math_fround((f27 < f13 ? f27 : f13) - f14);
  f13 = Math_fround(f29 + f17);
  f29 = Math_fround((f13 < f16 ? f13 : f16) - f17);
  HEAPF32[i1 >> 2] = f30 >= f20 ? f30 : f20;
  HEAPF32[i1 + 4 >> 2] = f29 >= f22 ? f29 : f22;
  STACKTOP = i9;
  return;
 }
 i3 = i1 + 4 | 0;
 HEAPF32[i3 >> 2] = Math_fround(0.0);
 HEAPF32[i1 >> 2] = Math_fround(0.0);
 if (i32) f36 = Math_fround(Math_fround(HEAPF32[i6 >> 2]) - f14); else f36 = Math_fround(HEAPF32[(i33 ? i26 : i11) >> 2]);
 HEAPF32[i1 >> 2] = f36;
 if (i34) f37 = Math_fround(Math_fround(HEAPF32[i6 + 4 >> 2]) - f17); else f37 = Math_fround(HEAPF32[(i35 ? i26 : i11) + 4 >> 2]);
 HEAPF32[i3 >> 2] = f37;
 HEAP32[i4 >> 2] = i31;
 STACKTOP = i9;
 return;
}

function __ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce(i1, i2, i3, i4, i5, d6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 d6 = +d6;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 384 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(384);
 i7 = i1 + 8 | 0;
 i8 = i1;
 i9 = i1 + 284 | 0;
 i10 = i1 + 72 | 0;
 i11 = i1 + 184 | 0;
 i12 = i1 + 68 | 0;
 i13 = i1 + 180 | 0;
 i14 = i1 + 177 | 0;
 i15 = i1 + 176 | 0;
 i16 = i1 + 56 | 0;
 i17 = i1 + 44 | 0;
 i18 = i1 + 32 | 0;
 i19 = i1 + 28 | 0;
 i20 = i1 + 76 | 0;
 i21 = i1 + 24 | 0;
 i22 = i1 + 16 | 0;
 i23 = i1 + 20 | 0;
 HEAP32[i10 >> 2] = i9;
 HEAPF64[i7 >> 3] = d6;
 i24 = _snprintf(i9, 100, 71983, i7) | 0;
 if (i24 >>> 0 > 99) {
  i9 = __ZNSt3__26__clocEv() | 0;
  HEAPF64[i8 >> 3] = d6;
  i25 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz(i10, i9, 71983, i8) | 0;
  i8 = HEAP32[i10 >> 2] | 0;
  if (!i8) __ZSt17__throw_bad_allocv();
  i9 = _malloc(i25) | 0;
  if (!i9) __ZSt17__throw_bad_allocv(); else {
   i26 = i9;
   i27 = i25;
   i28 = i9;
   i29 = i8;
  }
 } else {
  i26 = i11;
  i27 = i24;
  i28 = 0;
  i29 = 0;
 }
 __ZNKSt3__28ios_base6getlocEv(i12, i4);
 i24 = __ZNKSt3__26locale9use_facetERNS0_2idE(i12, 5845188) | 0;
 i11 = HEAP32[i10 >> 2] | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i24 >> 2] | 0) + 32 >> 2] & 7](i24, i11, i11 + i27 | 0, i26) | 0;
 if (!i27) i30 = 0; else i30 = (HEAP8[HEAP32[i10 >> 2] >> 0] | 0) == 45;
 HEAP32[i16 >> 2] = 0;
 HEAP32[i16 + 4 >> 2] = 0;
 HEAP32[i16 + 8 >> 2] = 0;
 i10 = 0;
 while (1) {
  if ((i10 | 0) == 3) break;
  HEAP32[i16 + (i10 << 2) >> 2] = 0;
  i10 = i10 + 1 | 0;
 }
 HEAP32[i17 >> 2] = 0;
 HEAP32[i17 + 4 >> 2] = 0;
 HEAP32[i17 + 8 >> 2] = 0;
 i10 = 0;
 while (1) {
  if ((i10 | 0) == 3) break;
  HEAP32[i17 + (i10 << 2) >> 2] = 0;
  i10 = i10 + 1 | 0;
 }
 HEAP32[i18 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 i10 = 0;
 while (1) {
  if ((i10 | 0) == 3) break;
  HEAP32[i18 + (i10 << 2) >> 2] = 0;
  i10 = i10 + 1 | 0;
 }
 __ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri(i3, i30, i12, i13, i14, i15, i16, i17, i18, i19);
 i3 = HEAP32[i19 >> 2] | 0;
 if ((i27 | 0) > (i3 | 0)) {
  i19 = HEAP8[i18 + 11 >> 0] | 0;
  i10 = HEAP8[i17 + 11 >> 0] | 0;
  i31 = 1;
  i32 = (i19 << 24 >> 24 < 0 ? HEAP32[i18 + 4 >> 2] | 0 : i19 & 255) + (i27 - i3 << 1) | 0;
  i33 = i10 << 24 >> 24 < 0 ? HEAP32[i17 + 4 >> 2] | 0 : i10 & 255;
 } else {
  i10 = HEAP8[i18 + 11 >> 0] | 0;
  i19 = HEAP8[i17 + 11 >> 0] | 0;
  i31 = 2;
  i32 = i19 << 24 >> 24 < 0 ? HEAP32[i17 + 4 >> 2] | 0 : i19 & 255;
  i33 = i10 << 24 >> 24 < 0 ? HEAP32[i18 + 4 >> 2] | 0 : i10 & 255;
 }
 i10 = i33 + i3 + i32 + i31 | 0;
 if (i10 >>> 0 > 100) {
  i31 = _malloc(i10) | 0;
  if (!i31) __ZSt17__throw_bad_allocv(); else {
   i34 = i31;
   i35 = i31;
  }
 } else {
  i34 = i20;
  i35 = 0;
 }
 __ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i(i34, i21, i22, HEAP32[i4 + 4 >> 2] | 0, i26, i26 + i27 | 0, i24, i30, i13, HEAP8[i14 >> 0] | 0, HEAP8[i15 >> 0] | 0, i16, i17, i18, i3);
 HEAP32[i23 >> 2] = HEAP32[i2 >> 2];
 i2 = HEAP32[i21 >> 2] | 0;
 i21 = HEAP32[i22 >> 2] | 0;
 HEAP32[i7 >> 2] = HEAP32[i23 >> 2];
 i23 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i7, i34, i2, i21, i4, i5) | 0;
 if (i35 | 0) _free(i35);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i18);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i17);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i16);
 __ZNSt3__26localeD2Ev(i12);
 if (i28 | 0) _free(i28);
 if (i29 | 0) _free(i29);
 STACKTOP = i1;
 return i23 | 0;
}
function _png_image_read_and_map(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0;
 i2 = 0;
 i3 = HEAP32[i1 >> 2] | 0;
 i4 = HEAP32[HEAP32[i3 >> 2] >> 2] | 0;
 i5 = i4 + 432 | 0;
 i6 = HEAP8[i5 >> 0] | 0;
 switch (i6 << 24 >> 24) {
 case 0:
  {
   i7 = 1;
   break;
  }
 case 1:
  {
   i7 = 7;
   break;
  }
 default:
  _png_error(i4, 65425);
 }
 i8 = HEAP32[i3 + 12 >> 2] | 0;
 i9 = HEAP32[i3 + 8 >> 2] | 0;
 i3 = HEAP32[i1 + 40 >> 2] | 0;
 i10 = HEAP32[i1 + 24 >> 2] | 0;
 i11 = HEAP32[i1 + 28 >> 2] | 0;
 i12 = i9 + -1 | 0;
 i13 = i1 + 20 | 0;
 i1 = 0;
 i14 = i6;
 while (1) {
  if (i14 << 24 >> 24 == 1) {
   i6 = 7 - i1 >> 1;
   i15 = (i1 | 0) > 1 ? i6 : 3;
   i16 = i1 & 1;
   i17 = i16 << 3 - (i1 + 1 >> 1) & 7;
   if ((i12 + (1 << i15) - i17 | 0) >>> i15 | 0) {
    i18 = i17;
    i19 = 1 << i6;
    i20 = (i1 | 0) > 2 ? 8 >>> (i1 + -1 >> 1) : 8;
    i21 = (i16 ^ 1) << 3 - (i1 >> 1) & 7;
    i2 = 8;
   }
  } else {
   i18 = 0;
   i19 = 1;
   i20 = 1;
   i21 = 0;
   i2 = 8;
  }
  L10 : do if ((i2 | 0) == 8) {
   i2 = 0;
   if (i21 >>> 0 < i8 >>> 0) {
    i16 = (i18 | 0) < (i9 | 0) | 0;
    i6 = i16 | 0;
    i17 = i16 | 0;
    i15 = i16 | 0;
    i22 = i16 | 0;
    i16 = i21;
    while (1) {
     i23 = HEAP32[i13 >> 2] | 0;
     i24 = i10 + (Math_imul(i16, i11) | 0) | 0;
     i25 = i24 + i9 | 0;
     _png_read_row(i4, i23, 0);
     i26 = i24 + i18 | 0;
     switch (i3 | 0) {
     case 1:
      {
       if (i6) {
        i24 = i26;
        i27 = i23;
        do {
         i28 = HEAPU8[i27 >> 0] | 0;
         i29 = HEAP8[i27 + 1 >> 0] | 0;
         i27 = i27 + 2 | 0;
         i30 = i29 & 255;
         if ((i29 & 255) > 229) i31 = ((i28 * 231 | 0) + 128 | 0) >>> 8; else if ((i29 & 255) < 26) i31 = 231; else i31 = (((i28 * 5 | 0) + 130 | 0) >>> 8) + 226 + ((((i30 * 5 | 0) + 130 | 0) >>> 8) * 6 | 0) | 0;
         HEAP8[i24 >> 0] = i31;
         i24 = i24 + i19 | 0;
        } while (i24 >>> 0 < i25 >>> 0);
       }
       break;
      }
     case 2:
      {
       if (i17) {
        i24 = i26;
        i27 = i23;
        while (1) {
         i30 = HEAP8[i27 >> 0] | 0;
         HEAP8[i24 >> 0] = (HEAP8[i27 + 1 >> 0] | 0) == 0 ? -2 : i30 << 24 >> 24 == -2 ? -1 : i30;
         i24 = i24 + i19 | 0;
         if (i24 >>> 0 >= i25 >>> 0) break; else i27 = i27 + 2 | 0;
        }
       }
       break;
      }
     case 3:
      {
       if (i15) {
        i27 = i26;
        i24 = i23;
        while (1) {
         HEAP8[i27 >> 0] = (((((((HEAPU8[i24 >> 0] | 0) * 5 | 0) + 130 | 0) >>> 8) * 6 | 0) + ((((HEAPU8[i24 + 1 >> 0] | 0) * 5 | 0) + 130 | 0) >>> 8) | 0) * 6 | 0) + ((((HEAPU8[i24 + 2 >> 0] | 0) * 5 | 0) + 130 | 0) >>> 8);
         i27 = i27 + i19 | 0;
         if (i27 >>> 0 >= i25 >>> 0) break; else i24 = i24 + 3 | 0;
        }
       }
       break;
      }
     case 4:
      {
       if (i22) {
        i24 = i26;
        i27 = i23;
        while (1) {
         i30 = HEAP8[i27 + 3 >> 0] | 0;
         if ((i30 & 255) > 195) i32 = (((((((HEAPU8[i27 >> 0] | 0) * 5 | 0) + 130 | 0) >>> 8) * 6 | 0) + ((((HEAPU8[i27 + 1 >> 0] | 0) * 5 | 0) + 130 | 0) >>> 8) | 0) * 6 | 0) + ((((HEAPU8[i27 + 2 >> 0] | 0) * 5 | 0) + 130 | 0) >>> 8) & 255; else if ((i30 & 255) < 64) i32 = -40; else {
          i30 = HEAP8[i27 >> 0] | 0;
          i28 = i30 << 24 >> 24 < 0;
          i29 = i28 ? 226 : 217;
          i33 = (i30 & 64) == 0;
          i34 = i33 ? i29 : i29 + 9 | 0;
          i29 = i28 ? i34 + 3 | 0 : i34;
          i32 = ((i33 ^ 1) & 1) + ((i30 & 255) >>> 7 & 255) + (i33 ? i29 : i29 + 3 | 0) & 255;
         }
         HEAP8[i24 >> 0] = i32;
         i24 = i24 + i19 | 0;
         if (i24 >>> 0 >= i25 >>> 0) break; else i27 = i27 + 4 | 0;
        }
       }
       break;
      }
     default:
      {}
     }
     i16 = i20 + i16 | 0;
     if (i16 >>> 0 >= i8 >>> 0) break L10;
    }
   }
  } while (0);
  i16 = i1 + 1 | 0;
  if ((i16 | 0) >= (i7 | 0)) break;
  i1 = i16;
  i14 = HEAP8[i5 >> 0] | 0;
 }
 return 1;
}

function __ZNSt3__26__treeINS_12__value_typeIP4MeshNS_4listIN11RenderQueue9TransformENS_9allocatorIS6_EEEEEENS_19__map_value_compareIS3_SA_NS_4lessIS3_EELb1EEENS7_ISA_EEE12__find_equalIS3_EERPNS_16__tree_node_baseIPvEENS_21__tree_const_iteratorISA_PNS_11__tree_nodeISA_SJ_EEiEERPNS_15__tree_end_nodeISL_EESM_RKT_(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0;
 i6 = 0;
 i7 = i1 + 4 | 0;
 i8 = HEAP32[i2 >> 2] | 0;
 i2 = i8;
 if ((i8 | 0) != (i7 | 0)) {
  i9 = HEAP32[i5 >> 2] | 0;
  i10 = HEAP32[i8 + 16 >> 2] | 0;
  if (i9 >>> 0 >= i10 >>> 0) {
   if (i10 >>> 0 >= i9 >>> 0) {
    HEAP32[i3 >> 2] = i2;
    HEAP32[i4 >> 2] = i2;
    i11 = i4;
    return i11 | 0;
   }
   i4 = i8 + 4 | 0;
   i10 = HEAP32[i4 >> 2] | 0;
   if (!i10) {
    i12 = i8 + 8 | 0;
    i13 = HEAP32[i12 >> 2] | 0;
    if ((HEAP32[i13 >> 2] | 0) == (i8 | 0)) i14 = i13; else {
     i13 = i12;
     do {
      i12 = HEAP32[i13 >> 2] | 0;
      i13 = i12 + 8 | 0;
      i15 = HEAP32[i13 >> 2] | 0;
     } while ((HEAP32[i15 >> 2] | 0) != (i12 | 0));
     i14 = i15;
    }
   } else {
    i13 = i10;
    while (1) {
     i10 = HEAP32[i13 >> 2] | 0;
     if (!i10) break; else i13 = i10;
    }
    i14 = i13;
   }
   if ((i14 | 0) != (i7 | 0)) if (i9 >>> 0 >= (HEAP32[i14 + 16 >> 2] | 0) >>> 0) {
    i13 = HEAP32[i7 >> 2] | 0;
    if (!i13) {
     HEAP32[i3 >> 2] = i7;
     i11 = i7;
     return i11 | 0;
    }
    i10 = i1 + 4 | 0;
    i15 = i13;
    while (1) {
     i13 = HEAP32[i15 + 16 >> 2] | 0;
     if (i9 >>> 0 < i13 >>> 0) {
      i12 = HEAP32[i15 >> 2] | 0;
      if (!i12) {
       i6 = 39;
       break;
      } else {
       i16 = i15;
       i17 = i12;
      }
     } else {
      if (i13 >>> 0 >= i9 >>> 0) {
       i6 = 43;
       break;
      }
      i18 = i15 + 4 | 0;
      i13 = HEAP32[i18 >> 2] | 0;
      if (!i13) {
       i6 = 42;
       break;
      } else {
       i16 = i18;
       i17 = i13;
      }
     }
     i10 = i16;
     i15 = i17;
    }
    if ((i6 | 0) == 39) {
     HEAP32[i3 >> 2] = i15;
     i11 = i15;
     return i11 | 0;
    } else if ((i6 | 0) == 42) {
     HEAP32[i3 >> 2] = i15;
     i11 = i18;
     return i11 | 0;
    } else if ((i6 | 0) == 43) {
     HEAP32[i3 >> 2] = i15;
     i11 = i10;
     return i11 | 0;
    }
   }
   if (!(HEAP32[i8 + 4 >> 2] | 0)) {
    HEAP32[i3 >> 2] = i2;
    i11 = i4;
    return i11 | 0;
   } else {
    HEAP32[i3 >> 2] = i14;
    i11 = i14;
    return i11 | 0;
   }
  }
 }
 i14 = HEAP32[i8 >> 2] | 0;
 if ((HEAP32[i1 >> 2] | 0) == (i8 | 0)) i19 = i2; else {
  if (!i14) {
   i2 = i8;
   while (1) {
    i4 = HEAP32[i2 + 8 >> 2] | 0;
    if ((HEAP32[i4 >> 2] | 0) == (i2 | 0)) i2 = i4; else {
     i20 = i4;
     break;
    }
   }
  } else {
   i2 = i14;
   while (1) {
    i4 = HEAP32[i2 + 4 >> 2] | 0;
    if (!i4) {
     i20 = i2;
     break;
    } else i2 = i4;
   }
  }
  i2 = HEAP32[i5 >> 2] | 0;
  if ((HEAP32[i20 + 16 >> 2] | 0) >>> 0 < i2 >>> 0) i19 = i20; else {
   i20 = HEAP32[i7 >> 2] | 0;
   if (!i20) {
    HEAP32[i3 >> 2] = i7;
    i11 = i7;
    return i11 | 0;
   }
   i7 = i1 + 4 | 0;
   i1 = i20;
   while (1) {
    i20 = HEAP32[i1 + 16 >> 2] | 0;
    if (i2 >>> 0 < i20 >>> 0) {
     i5 = HEAP32[i1 >> 2] | 0;
     if (!i5) {
      i6 = 17;
      break;
     } else {
      i21 = i1;
      i22 = i5;
     }
    } else {
     if (i20 >>> 0 >= i2 >>> 0) {
      i6 = 21;
      break;
     }
     i23 = i1 + 4 | 0;
     i20 = HEAP32[i23 >> 2] | 0;
     if (!i20) {
      i6 = 20;
      break;
     } else {
      i21 = i23;
      i22 = i20;
     }
    }
    i7 = i21;
    i1 = i22;
   }
   if ((i6 | 0) == 17) {
    HEAP32[i3 >> 2] = i1;
    i11 = i1;
    return i11 | 0;
   } else if ((i6 | 0) == 20) {
    HEAP32[i3 >> 2] = i1;
    i11 = i23;
    return i11 | 0;
   } else if ((i6 | 0) == 21) {
    HEAP32[i3 >> 2] = i1;
    i11 = i7;
    return i11 | 0;
   }
  }
 }
 if (!i14) {
  HEAP32[i3 >> 2] = i8;
  i11 = i8;
  return i11 | 0;
 } else {
  HEAP32[i3 >> 2] = i19;
  i11 = i19 + 4 | 0;
  return i11 | 0;
 }
 return 0;
}

function _try_realloc_chunk(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i3 = i1 + 4 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 i5 = i4 & -8;
 i6 = i1 + i5 | 0;
 if (!(i4 & 3)) {
  if (i2 >>> 0 < 256) {
   i7 = 0;
   return i7 | 0;
  }
  if (i5 >>> 0 >= (i2 + 4 | 0) >>> 0) if ((i5 - i2 | 0) >>> 0 <= HEAP32[1461e3] << 1 >>> 0) {
   i7 = i1;
   return i7 | 0;
  }
  i7 = 0;
  return i7 | 0;
 }
 if (i5 >>> 0 >= i2 >>> 0) {
  i8 = i5 - i2 | 0;
  if (i8 >>> 0 <= 15) {
   i7 = i1;
   return i7 | 0;
  }
  i9 = i1 + i2 | 0;
  HEAP32[i3 >> 2] = i4 & 1 | i2 | 2;
  HEAP32[i9 + 4 >> 2] = i8 | 3;
  i10 = i6 + 4 | 0;
  HEAP32[i10 >> 2] = HEAP32[i10 >> 2] | 1;
  _dispose_chunk(i9, i8);
  i7 = i1;
  return i7 | 0;
 }
 if ((HEAP32[1460886] | 0) == (i6 | 0)) {
  i8 = (HEAP32[1460883] | 0) + i5 | 0;
  i9 = i8 - i2 | 0;
  i10 = i1 + i2 | 0;
  if (i8 >>> 0 <= i2 >>> 0) {
   i7 = 0;
   return i7 | 0;
  }
  HEAP32[i3 >> 2] = i4 & 1 | i2 | 2;
  HEAP32[i10 + 4 >> 2] = i9 | 1;
  HEAP32[1460886] = i10;
  HEAP32[1460883] = i9;
  i7 = i1;
  return i7 | 0;
 }
 if ((HEAP32[1460885] | 0) == (i6 | 0)) {
  i9 = (HEAP32[1460882] | 0) + i5 | 0;
  if (i9 >>> 0 < i2 >>> 0) {
   i7 = 0;
   return i7 | 0;
  }
  i10 = i9 - i2 | 0;
  if (i10 >>> 0 > 15) {
   i8 = i1 + i2 | 0;
   i11 = i1 + i9 | 0;
   HEAP32[i3 >> 2] = i4 & 1 | i2 | 2;
   HEAP32[i8 + 4 >> 2] = i10 | 1;
   HEAP32[i11 >> 2] = i10;
   i12 = i11 + 4 | 0;
   HEAP32[i12 >> 2] = HEAP32[i12 >> 2] & -2;
   i13 = i8;
   i14 = i10;
  } else {
   HEAP32[i3 >> 2] = i4 & 1 | i9 | 2;
   i10 = i1 + i9 + 4 | 0;
   HEAP32[i10 >> 2] = HEAP32[i10 >> 2] | 1;
   i13 = 0;
   i14 = 0;
  }
  HEAP32[1460882] = i14;
  HEAP32[1460885] = i13;
  i7 = i1;
  return i7 | 0;
 }
 i13 = HEAP32[i6 + 4 >> 2] | 0;
 if (i13 & 2 | 0) {
  i7 = 0;
  return i7 | 0;
 }
 i14 = (i13 & -8) + i5 | 0;
 if (i14 >>> 0 < i2 >>> 0) {
  i7 = 0;
  return i7 | 0;
 }
 i5 = i14 - i2 | 0;
 i10 = i13 >>> 3;
 do if (i13 >>> 0 < 256) {
  i9 = HEAP32[i6 + 8 >> 2] | 0;
  i8 = HEAP32[i6 + 12 >> 2] | 0;
  if ((i8 | 0) == (i9 | 0)) {
   HEAP32[1460880] = HEAP32[1460880] & ~(1 << i10);
   break;
  } else {
   HEAP32[i9 + 12 >> 2] = i8;
   HEAP32[i8 + 8 >> 2] = i9;
   break;
  }
 } else {
  i9 = HEAP32[i6 + 24 >> 2] | 0;
  i8 = HEAP32[i6 + 12 >> 2] | 0;
  do if ((i8 | 0) == (i6 | 0)) {
   i12 = i6 + 16 | 0;
   i11 = i12 + 4 | 0;
   i15 = HEAP32[i11 >> 2] | 0;
   if (!i15) {
    i16 = HEAP32[i12 >> 2] | 0;
    if (!i16) {
     i17 = 0;
     break;
    } else {
     i18 = i16;
     i19 = i12;
    }
   } else {
    i18 = i15;
    i19 = i11;
   }
   while (1) {
    i11 = i18 + 20 | 0;
    i15 = HEAP32[i11 >> 2] | 0;
    if (i15 | 0) {
     i18 = i15;
     i19 = i11;
     continue;
    }
    i11 = i18 + 16 | 0;
    i15 = HEAP32[i11 >> 2] | 0;
    if (!i15) break; else {
     i18 = i15;
     i19 = i11;
    }
   }
   HEAP32[i19 >> 2] = 0;
   i17 = i18;
  } else {
   i11 = HEAP32[i6 + 8 >> 2] | 0;
   HEAP32[i11 + 12 >> 2] = i8;
   HEAP32[i8 + 8 >> 2] = i11;
   i17 = i8;
  } while (0);
  if (i9 | 0) {
   i8 = HEAP32[i6 + 28 >> 2] | 0;
   i11 = 5843824 + (i8 << 2) | 0;
   if ((HEAP32[i11 >> 2] | 0) == (i6 | 0)) {
    HEAP32[i11 >> 2] = i17;
    if (!i17) {
     HEAP32[1460881] = HEAP32[1460881] & ~(1 << i8);
     break;
    }
   } else {
    HEAP32[i9 + 16 + (((HEAP32[i9 + 16 >> 2] | 0) != (i6 | 0) & 1) << 2) >> 2] = i17;
    if (!i17) break;
   }
   HEAP32[i17 + 24 >> 2] = i9;
   i8 = i6 + 16 | 0;
   i11 = HEAP32[i8 >> 2] | 0;
   if (i11 | 0) {
    HEAP32[i17 + 16 >> 2] = i11;
    HEAP32[i11 + 24 >> 2] = i17;
   }
   i11 = HEAP32[i8 + 4 >> 2] | 0;
   if (i11 | 0) {
    HEAP32[i17 + 20 >> 2] = i11;
    HEAP32[i11 + 24 >> 2] = i17;
   }
  }
 } while (0);
 if (i5 >>> 0 < 16) {
  HEAP32[i3 >> 2] = i14 | i4 & 1 | 2;
  i17 = i1 + i14 + 4 | 0;
  HEAP32[i17 >> 2] = HEAP32[i17 >> 2] | 1;
  i7 = i1;
  return i7 | 0;
 } else {
  i17 = i1 + i2 | 0;
  HEAP32[i3 >> 2] = i4 & 1 | i2 | 2;
  HEAP32[i17 + 4 >> 2] = i5 | 3;
  i2 = i1 + i14 + 4 | 0;
  HEAP32[i2 >> 2] = HEAP32[i2 >> 2] | 1;
  _dispose_chunk(i17, i5);
  i7 = i1;
  return i7 | 0;
 }
 return 0;
}

function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE9underflowEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i3 + 4 | 0;
 i5 = i3;
 i6 = i1 + 64 | 0;
 if (!(HEAP32[i6 >> 2] | 0)) {
  i7 = -1;
  STACKTOP = i3;
  return i7 | 0;
 }
 i8 = i1 + 92 | 0;
 if (!(HEAP32[i8 >> 2] & 8)) {
  HEAP32[i1 + 24 >> 2] = 0;
  HEAP32[i1 + 20 >> 2] = 0;
  HEAP32[i1 + 28 >> 2] = 0;
  i9 = (HEAP8[i1 + 98 >> 0] | 0) == 0;
  i10 = HEAP32[(i9 ? i1 + 56 | 0 : i1 + 32 | 0) >> 2] | 0;
  i11 = i10 + (HEAP32[(i9 ? i1 + 60 | 0 : i1 + 52 | 0) >> 2] | 0) | 0;
  HEAP32[i1 + 8 >> 2] = i10;
  i10 = i1 + 12 | 0;
  HEAP32[i10 >> 2] = i11;
  HEAP32[i1 + 16 >> 2] = i11;
  HEAP32[i8 >> 2] = 8;
  i12 = 1;
  i13 = i10;
  i14 = i11;
 } else {
  i11 = i1 + 12 | 0;
  i12 = 0;
  i13 = i11;
  i14 = HEAP32[i11 >> 2] | 0;
 }
 if (!i14) {
  i11 = i4 + 1 | 0;
  HEAP32[i1 + 8 >> 2] = i4;
  HEAP32[i13 >> 2] = i11;
  HEAP32[i1 + 16 >> 2] = i11;
  i15 = i11;
 } else i15 = i14;
 i14 = i1 + 16 | 0;
 if (i12) {
  i16 = HEAP32[i14 >> 2] | 0;
  i17 = 0;
 } else {
  i12 = HEAP32[i14 >> 2] | 0;
  i11 = (i12 - (HEAP32[i1 + 8 >> 2] | 0) | 0) / 2 | 0;
  i16 = i12;
  i17 = i11 >>> 0 < 4 ? i11 : 4;
 }
 do if ((i15 | 0) == (i16 | 0)) {
  i11 = i1 + 8 | 0;
  _memmove(HEAP32[i11 >> 2] | 0, i15 + (0 - i17) | 0, i17 | 0) | 0;
  if (HEAP8[i1 + 98 >> 0] | 0) {
   i12 = HEAP32[i11 >> 2] | 0;
   i10 = _fread(i12 + i17 | 0, 1, (HEAP32[i14 >> 2] | 0) - i17 - i12 | 0, HEAP32[i6 >> 2] | 0) | 0;
   if (!i10) {
    i18 = -1;
    i19 = i11;
    break;
   }
   i12 = (HEAP32[i11 >> 2] | 0) + i17 | 0;
   HEAP32[i13 >> 2] = i12;
   HEAP32[i14 >> 2] = i12 + i10;
   i18 = HEAPU8[i12 >> 0] | 0;
   i19 = i11;
   break;
  }
  i12 = i1 + 40 | 0;
  i10 = HEAP32[i12 >> 2] | 0;
  i8 = i1 + 36 | 0;
  i9 = HEAP32[i8 >> 2] | 0;
  i20 = i10;
  i21 = i9;
  if ((i10 | 0) == (i9 | 0)) {
   i22 = i1 + 32 | 0;
   i23 = i21;
   i24 = i20;
  } else {
   i10 = i1 + 32 | 0;
   _memmove(HEAP32[i10 >> 2] | 0, i9 | 0, i20 - i21 | 0) | 0;
   i22 = i10;
   i23 = HEAP32[i8 >> 2] | 0;
   i24 = HEAP32[i12 >> 2] | 0;
  }
  i10 = HEAP32[i22 >> 2] | 0;
  i21 = i10 + (i24 - i23) | 0;
  HEAP32[i8 >> 2] = i21;
  if ((i10 | 0) == (i1 + 44 | 0)) i25 = 8; else i25 = HEAP32[i1 + 52 >> 2] | 0;
  i20 = i10 + i25 | 0;
  HEAP32[i12 >> 2] = i20;
  i10 = i1 + 60 | 0;
  i9 = (HEAP32[i10 >> 2] | 0) - i17 | 0;
  i26 = i20 - i21 | 0;
  i20 = i1 + 72 | 0;
  i27 = i20;
  i28 = HEAP32[i27 + 4 >> 2] | 0;
  i29 = i1 + 80 | 0;
  HEAP32[i29 >> 2] = HEAP32[i27 >> 2];
  HEAP32[i29 + 4 >> 2] = i28;
  i28 = _fread(i21, 1, i26 >>> 0 < i9 >>> 0 ? i26 : i9, HEAP32[i6 >> 2] | 0) | 0;
  if (!i28) {
   i18 = -1;
   i19 = i11;
  } else {
   i9 = HEAP32[i1 + 68 >> 2] | 0;
   if (!i9) {
    i26 = ___cxa_allocate_exception(4) | 0;
    __ZNSt8bad_castC2Ev(i26);
    ___cxa_throw(i26 | 0, 3152, 123);
   }
   i26 = (HEAP32[i8 >> 2] | 0) + i28 | 0;
   HEAP32[i12 >> 2] = i26;
   i28 = HEAP32[i11 >> 2] | 0;
   if ((FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i9 >> 2] | 0) + 16 >> 2] & 15](i9, i20, HEAP32[i22 >> 2] | 0, i26, i8, i28 + i17 | 0, i28 + (HEAP32[i10 >> 2] | 0) | 0, i5) | 0) == 3) {
    i10 = HEAP32[i22 >> 2] | 0;
    i28 = HEAP32[i12 >> 2] | 0;
    HEAP32[i11 >> 2] = i10;
    i30 = i28;
    i31 = i10;
    i2 = 25;
   } else {
    i10 = HEAP32[i5 >> 2] | 0;
    i28 = (HEAP32[i11 >> 2] | 0) + i17 | 0;
    if ((i10 | 0) == (i28 | 0)) i32 = -1; else {
     i30 = i10;
     i31 = i28;
     i2 = 25;
    }
   }
   if ((i2 | 0) == 25) {
    HEAP32[i13 >> 2] = i31;
    HEAP32[i14 >> 2] = i30;
    i32 = HEAPU8[i31 >> 0] | 0;
   }
   i18 = i32;
   i19 = i11;
  }
 } else {
  i18 = HEAPU8[i15 >> 0] | 0;
  i19 = i1 + 8 | 0;
 } while (0);
 if ((HEAP32[i19 >> 2] | 0) == (i4 | 0)) {
  HEAP32[i19 >> 2] = 0;
  HEAP32[i13 >> 2] = 0;
  HEAP32[i14 >> 2] = 0;
 }
 i7 = i18;
 STACKTOP = i3;
 return i7 | 0;
}

function __ZN5ImGui25LoadIniSettingsFromMemoryEPKcj(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0;
 i3 = 0;
 i4 = HEAP32[1460598] | 0;
 if (!(HEAP8[i4 >> 0] | 0)) ___assert_fail(33723, 31803, 4029, 36968);
 i5 = i4 + 11048 | 0;
 if (HEAP8[i5 >> 0] | 0) ___assert_fail(36994, 31803, 4030, 36968);
 if (HEAP32[i4 + 6328 >> 2] | 0) ___assert_fail(36994, 31803, 4030, 36968);
 if (!i2) i6 = _strlen(i1) | 0; else i6 = i2;
 HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
 i2 = __ZL13MallocWrapperjPv(i6 + 1 | 0, 0) | 0;
 i7 = i2 + i6 | 0;
 _memcpy(i2 | 0, i1 | 0, i6 | 0) | 0;
 HEAP8[i7 >> 0] = 0;
 if ((i6 | 0) > 0) {
  i6 = 0;
  i1 = i2;
  i8 = 0;
  while (1) {
   i9 = i1;
   L16 : while (1) {
    i10 = HEAP8[i9 >> 0] | 0;
    switch (i10 << 24 >> 24) {
    case 10:
    case 13:
     break;
    default:
     break L16;
    }
    i9 = i9 + 1 | 0;
   }
   L20 : do if (i9 >>> 0 < i7 >>> 0) {
    i11 = 0;
    i12 = i9;
    i13 = i10;
    L21 : while (1) {
     switch (i13 << 24 >> 24) {
     case 10:
     case 13:
      {
       i14 = i11;
       i15 = i12;
       break L21;
       break;
      }
     default:
      {}
     }
     i16 = i11 + 1 | 0;
     i17 = i9 + i16 | 0;
     if (i17 >>> 0 >= i7 >>> 0) {
      i14 = i16;
      i15 = i17;
      break;
     }
     i11 = i16;
     i12 = i17;
     i13 = HEAP8[i17 >> 0] | 0;
    }
    HEAP8[i15 >> 0] = 0;
    if ((i14 | 0) > 0 & (HEAP8[i9 >> 0] | 0) == 91) {
     i13 = i9 + (i14 + -1) | 0;
     if ((HEAP8[i13 >> 0] | 0) == 93) {
      HEAP8[i13 >> 0] = 0;
      i12 = i9 + 1 | 0;
      L28 : do if ((i14 | 0) > 2) {
       i11 = i12;
       while (1) {
        i18 = i11 + 1 | 0;
        i19 = i18 >>> 0 < i13 >>> 0;
        if ((HEAP8[i11 >> 0] | 0) == 93) break;
        if (i19) i11 = i18; else {
         i20 = i12;
         i21 = 34852;
         break L28;
        }
       }
       if (i19) {
        i17 = i18;
        while (1) {
         if ((HEAP8[i17 >> 0] | 0) == 91) break;
         i16 = i17 + 1 | 0;
         if (i16 >>> 0 < i13 >>> 0) i17 = i16; else {
          i20 = i12;
          i21 = 34852;
          break L28;
         }
        }
        HEAP8[i11 >> 0] = 0;
        i20 = i17 + 1 | 0;
        i21 = i12;
       } else {
        i20 = i12;
        i21 = 34852;
       }
      } else {
       i20 = i12;
       i21 = 34852;
      } while (0);
      i12 = HEAP32[1460598] | 0;
      i13 = __Z6ImHashPKvij(i21, 0, 0) | 0;
      i16 = HEAP32[i12 + 11068 >> 2] | 0;
      if ((i16 | 0) > 0) {
       i22 = HEAP32[i12 + 11076 >> 2] | 0;
       i12 = 0;
       while (1) {
        i23 = i12 + 1 | 0;
        if ((HEAP32[i22 + (i12 * 24 | 0) + 4 >> 2] | 0) == (i13 | 0)) break;
        if ((i23 | 0) < (i16 | 0)) i12 = i23; else {
         i24 = i15;
         i25 = 0;
         i26 = 0;
         break L20;
        }
       }
       i16 = i22 + (i12 * 24 | 0) | 0;
       if (!i16) {
        i24 = i15;
        i25 = 0;
        i26 = 0;
       } else {
        i24 = i15;
        i25 = FUNCTION_TABLE_iiii[HEAP32[i22 + (i12 * 24 | 0) + 8 >> 2] & 31](i4, i16, i20) | 0;
        i26 = i16;
       }
      } else {
       i24 = i15;
       i25 = 0;
       i26 = 0;
      }
     } else {
      i27 = i15;
      i3 = 35;
     }
    } else {
     i27 = i15;
     i3 = 35;
    }
   } else {
    HEAP8[i9 >> 0] = 0;
    i27 = i9;
    i3 = 35;
   } while (0);
   if ((i3 | 0) == 35) {
    i3 = 0;
    if ((i8 | 0) != 0 & (i6 | 0) != 0) {
     FUNCTION_TABLE_viiii[HEAP32[i8 + 12 >> 2] & 15](i4, i8, i6, i9);
     i24 = i27;
     i25 = i6;
     i26 = i8;
    } else {
     i24 = i27;
     i25 = i6;
     i26 = i8;
    }
   }
   i1 = i24 + 1 | 0;
   if (i1 >>> 0 >= i7 >>> 0) break; else {
    i6 = i25;
    i8 = i26;
   }
  }
 }
 if (!i2) {
  __ZL11FreeWrapperPvS_(i2, 0);
  HEAP8[i5 >> 0] = 1;
  return;
 }
 HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
 __ZL11FreeWrapperPvS_(i2, 0);
 HEAP8[i5 >> 0] = 1;
 return;
}

function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i6 = 0;
 L1 : do if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b(i1, HEAP32[i2 + 8 >> 2] | 0, i5) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, i2, i3, i4); else {
  if (!(__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b(i1, HEAP32[i2 >> 2] | 0, i5) | 0)) {
   i7 = HEAP32[i1 + 12 >> 2] | 0;
   i8 = i1 + 16 + (i7 << 3) | 0;
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i1 + 16 | 0, i2, i3, i4, i5);
   i9 = i1 + 24 | 0;
   if ((i7 | 0) <= 1) break;
   i7 = HEAP32[i1 + 8 >> 2] | 0;
   if (!(i7 & 2)) {
    i10 = i2 + 36 | 0;
    if ((HEAP32[i10 >> 2] | 0) != 1) {
     if (!(i7 & 1)) {
      i7 = i2 + 54 | 0;
      i11 = i9;
      while (1) {
       if (HEAP8[i7 >> 0] | 0) break L1;
       if ((HEAP32[i10 >> 2] | 0) == 1) break L1;
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i11, i2, i3, i4, i5);
       i11 = i11 + 8 | 0;
       if (i11 >>> 0 >= i8 >>> 0) break L1;
      }
     }
     i11 = i2 + 24 | 0;
     i7 = i2 + 54 | 0;
     i12 = i9;
     while (1) {
      if (HEAP8[i7 >> 0] | 0) break L1;
      if ((HEAP32[i10 >> 2] | 0) == 1) if ((HEAP32[i11 >> 2] | 0) == 1) break L1;
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i12, i2, i3, i4, i5);
      i12 = i12 + 8 | 0;
      if (i12 >>> 0 >= i8 >>> 0) break L1;
     }
    }
   }
   i12 = i2 + 54 | 0;
   i11 = i9;
   while (1) {
    if (HEAP8[i12 >> 0] | 0) break L1;
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i11, i2, i3, i4, i5);
    i11 = i11 + 8 | 0;
    if (i11 >>> 0 >= i8 >>> 0) break L1;
   }
  }
  if ((HEAP32[i2 + 16 >> 2] | 0) != (i3 | 0)) {
   i8 = i2 + 20 | 0;
   if ((HEAP32[i8 >> 2] | 0) != (i3 | 0)) {
    HEAP32[i2 + 32 >> 2] = i4;
    i11 = i2 + 44 | 0;
    if ((HEAP32[i11 >> 2] | 0) == 4) break;
    i12 = i1 + 16 + (HEAP32[i1 + 12 >> 2] << 3) | 0;
    i9 = i2 + 52 | 0;
    i10 = i2 + 53 | 0;
    i7 = i2 + 54 | 0;
    i13 = i1 + 8 | 0;
    i14 = i2 + 24 | 0;
    i15 = 0;
    i16 = i1 + 16 | 0;
    i17 = 0;
    L32 : while (1) {
     if (i16 >>> 0 >= i12 >>> 0) {
      i18 = i15;
      i6 = 18;
      break;
     }
     HEAP8[i9 >> 0] = 0;
     HEAP8[i10 >> 0] = 0;
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i16, i2, i3, i3, 1, i5);
     if (HEAP8[i7 >> 0] | 0) {
      i18 = i15;
      i6 = 18;
      break;
     }
     do if (!(HEAP8[i10 >> 0] | 0)) {
      i19 = i15;
      i20 = i17;
     } else {
      if (!(HEAP8[i9 >> 0] | 0)) if (!(HEAP32[i13 >> 2] & 1)) {
       i18 = 1;
       i6 = 18;
       break L32;
      } else {
       i19 = 1;
       i20 = i17;
       break;
      }
      if ((HEAP32[i14 >> 2] | 0) == 1) {
       i6 = 23;
       break L32;
      }
      if (!(HEAP32[i13 >> 2] & 2)) {
       i6 = 23;
       break L32;
      } else {
       i19 = 1;
       i20 = 1;
      }
     } while (0);
     i15 = i19;
     i16 = i16 + 8 | 0;
     i17 = i20;
    }
    do if ((i6 | 0) == 18) {
     if (!i17) {
      HEAP32[i8 >> 2] = i3;
      i16 = i2 + 40 | 0;
      HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
      if ((HEAP32[i2 + 36 >> 2] | 0) == 1) if ((HEAP32[i14 >> 2] | 0) == 2) {
       HEAP8[i7 >> 0] = 1;
       if (i18) {
        i6 = 23;
        break;
       } else {
        i21 = 4;
        break;
       }
      }
     }
     if (i18) i6 = 23; else i21 = 4;
    } while (0);
    if ((i6 | 0) == 23) i21 = 3;
    HEAP32[i11 >> 2] = i21;
    break;
   }
  }
  if ((i4 | 0) == 1) HEAP32[i2 + 32 >> 2] = 1;
 } while (0);
 return;
}

function __ZN11ImFontAtlas7AddFontEPK12ImFontConfig(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 if (!(HEAP32[i2 >> 2] | 0)) ___assert_fail(55868, 38201, 1499, 55923);
 if ((HEAP32[i2 + 4 >> 2] | 0) <= 0) ___assert_fail(55868, 38201, 1499, 55923);
 if (!(Math_fround(HEAPF32[i2 + 16 >> 2]) > Math_fround(0.0))) ___assert_fail(55931, 38201, 1500, 55923);
 i3 = i1 + 48 | 0;
 if (!(HEAP8[i2 + 60 >> 0] | 0)) {
  i4 = __ZN5ImGui8MemAllocEj(88) | 0;
  i5 = i4 + 8 | 0;
  i6 = i4 + 12 | 0;
  i7 = i4 + 4 | 0;
  i8 = i4 + 16 | 0;
  i9 = i8 + 36 | 0;
  do {
   HEAP32[i8 >> 2] = 0;
   i8 = i8 + 4 | 0;
  } while ((i8 | 0) < (i9 | 0));
  HEAPF32[i7 >> 2] = Math_fround(1.0);
  HEAP16[i4 + 60 >> 1] = 63;
  HEAP32[i5 >> 2] = 0;
  HEAP32[i6 >> 2] = 0;
  HEAPF32[i4 >> 2] = Math_fround(0.0);
  HEAP32[i4 + 52 >> 2] = 0;
  HEAPF32[i4 + 56 >> 2] = Math_fround(0.0);
  i6 = i4 + 80 | 0;
  i8 = i4 + 62 | 0;
  i9 = i8 + 18 | 0;
  do {
   HEAP16[i8 >> 1] = 0;
   i8 = i8 + 2 | 0;
  } while ((i8 | 0) < (i9 | 0));
  HEAP8[i6 >> 0] = 1;
  HEAP32[i4 + 84 >> 2] = 0;
  i6 = i4;
  i4 = HEAP32[i3 >> 2] | 0;
  i5 = i1 + 52 | 0;
  if ((i4 | 0) == (HEAP32[i5 >> 2] | 0)) {
   i7 = i4 + 1 | 0;
   if (!i4) i10 = 8; else i10 = ((i4 | 0) / 2 | 0) + i4 | 0;
   i11 = (i10 | 0) > (i7 | 0) ? i10 : i7;
   if ((i4 | 0) < (i11 | 0)) {
    i7 = __ZN5ImGui8MemAllocEj(i11 << 2) | 0;
    i10 = i1 + 56 | 0;
    i12 = HEAP32[i10 >> 2] | 0;
    if (!i12) i13 = i10; else {
     _memcpy(i7 | 0, i12 | 0, HEAP32[i3 >> 2] << 2 | 0) | 0;
     __ZN5ImGui7MemFreeEPv(HEAP32[i10 >> 2] | 0);
     i13 = i10;
    }
    HEAP32[i13 >> 2] = i7;
    HEAP32[i5 >> 2] = i11;
    i14 = HEAP32[i3 >> 2] | 0;
   } else i14 = i4;
  } else i14 = i4;
  HEAP32[(HEAP32[i1 + 56 >> 2] | 0) + (i14 << 2) >> 2] = i6;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
 } else if (!(HEAP32[i3 >> 2] | 0)) ___assert_fail(55959, 38201, 1506, 55923);
 i6 = i1 + 72 | 0;
 i14 = HEAP32[i6 >> 2] | 0;
 i4 = i1 + 76 | 0;
 if ((i14 | 0) == (HEAP32[i4 >> 2] | 0)) {
  i11 = i14 + 1 | 0;
  if (!i14) i15 = 8; else i15 = ((i14 | 0) / 2 | 0) + i14 | 0;
  i5 = (i15 | 0) > (i11 | 0) ? i15 : i11;
  if ((i14 | 0) < (i5 | 0)) {
   i11 = __ZN5ImGui8MemAllocEj(i5 * 116 | 0) | 0;
   i15 = i1 + 80 | 0;
   i7 = HEAP32[i15 >> 2] | 0;
   if (!i7) i16 = i15; else {
    _memcpy(i11 | 0, i7 | 0, (HEAP32[i6 >> 2] | 0) * 116 | 0) | 0;
    __ZN5ImGui7MemFreeEPv(HEAP32[i15 >> 2] | 0);
    i16 = i15;
   }
   HEAP32[i16 >> 2] = i11;
   HEAP32[i4 >> 2] = i5;
   i17 = HEAP32[i6 >> 2] | 0;
  } else i17 = i14;
 } else i17 = i14;
 i14 = i1 + 80 | 0;
 i8 = (HEAP32[i14 >> 2] | 0) + (i17 * 116 | 0) | 0;
 i17 = i2;
 i9 = i8 + 116 | 0;
 do {
  HEAP32[i8 >> 2] = HEAP32[i17 >> 2];
  i8 = i8 + 4 | 0;
  i17 = i17 + 4 | 0;
 } while ((i8 | 0) < (i9 | 0));
 i17 = HEAP32[i6 >> 2] | 0;
 HEAP32[i6 >> 2] = i17 + 1;
 if ((i17 | 0) <= -1) ___assert_fail(38278, 56850, 1245, 38287);
 i6 = HEAP32[i14 >> 2] | 0;
 i14 = i6 + (i17 * 116 | 0) + 112 | 0;
 do if (!(HEAP32[i14 >> 2] | 0)) {
  i8 = HEAP32[i3 >> 2] | 0;
  if ((i8 | 0) > 0) {
   HEAP32[i14 >> 2] = HEAP32[(HEAP32[i1 + 56 >> 2] | 0) + (i8 + -1 << 2) >> 2];
   break;
  } else ___assert_fail(38278, 56850, 1245, 38287);
 } while (0);
 i3 = i6 + (i17 * 116 | 0) + 8 | 0;
 if (!(HEAP8[i3 >> 0] | 0)) {
  i8 = i6 + (i17 * 116 | 0) | 0;
  i17 = i8 + 4 | 0;
  i6 = __ZN5ImGui8MemAllocEj(HEAP32[i17 >> 2] | 0) | 0;
  HEAP32[i8 >> 2] = i6;
  HEAP8[i3 >> 0] = 1;
  _memcpy(i6 | 0, HEAP32[i2 >> 2] | 0, HEAP32[i17 >> 2] | 0) | 0;
 }
 i17 = i1 + 16 | 0;
 i2 = HEAP32[i17 >> 2] | 0;
 if (i2 | 0) __ZN5ImGui7MemFreeEPv(i2);
 i2 = i1 + 20 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if (!i1) {
  HEAP32[i17 >> 2] = 0;
  HEAP32[i2 >> 2] = 0;
  i18 = HEAP32[i14 >> 2] | 0;
  return i18 | 0;
 }
 __ZN5ImGui7MemFreeEPv(i1);
 HEAP32[i17 >> 2] = 0;
 HEAP32[i2 >> 2] = 0;
 i18 = HEAP32[i14 >> 2] | 0;
 return i18 | 0;
}

function _png_handle_iTXt(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i6 = i5 + 28 | 0;
 i7 = i5;
 i8 = i1 + 756 | 0;
 i9 = HEAP32[i8 >> 2] | 0;
 switch (i9 | 0) {
 case 0:
  break;
 case 1:
  {
   _png_crc_finish(i1, i3) | 0;
   STACKTOP = i5;
   return;
  }
 default:
  i4 = 3;
 }
 if ((i4 | 0) == 3) {
  i10 = i9 + -1 | 0;
  HEAP32[i8 >> 2] = i10;
  if ((i10 | 0) == 1) {
   _png_crc_finish(i1, i3) | 0;
   _png_chunk_benign_error(i1, 60641);
   STACKTOP = i5;
   return;
  }
 }
 i10 = i1 + 208 | 0;
 i8 = HEAP32[i10 >> 2] | 0;
 if (!(i8 & 1)) _png_chunk_error(i1, 60665);
 if (i8 & 4 | 0) HEAP32[i10 >> 2] = i8 | 8;
 i8 = i3 + 1 | 0;
 i10 = i1 + 788 | 0;
 i9 = HEAP32[i10 >> 2] | 0;
 if (!i9) i4 = 12; else {
  i11 = i1 + 792 | 0;
  if ((HEAP32[i11 >> 2] | 0) >>> 0 < i8 >>> 0) {
   HEAP32[i10 >> 2] = 0;
   HEAP32[i11 >> 2] = 0;
   _png_free(i1, i9);
   i4 = 12;
  } else i12 = i9;
 }
 do if ((i4 | 0) == 12) {
  i9 = _png_malloc_base(i1, i8) | 0;
  if (i9 | 0) {
   HEAP32[i10 >> 2] = i9;
   HEAP32[i1 + 792 >> 2] = i8;
   i12 = i9;
   break;
  }
  _png_chunk_warning(i1, 60678);
  _png_crc_finish(i1, i3) | 0;
  _png_chunk_benign_error(i1, 60712);
  STACKTOP = i5;
  return;
 } while (0);
 _png_read_data(i1, i12, i3);
 _png_calculate_crc(i1, i12, i3);
 if (_png_crc_finish(i1, 0) | 0) {
  STACKTOP = i5;
  return;
 }
 L28 : do if (!i3) i13 = 60747; else {
  i8 = 0;
  while (1) {
   if (!(HEAP8[i12 + i8 >> 0] | 0)) {
    i14 = i8;
    break;
   }
   i9 = i8 + 1 | 0;
   if (i9 >>> 0 < i3 >>> 0) i8 = i9; else {
    i14 = i9;
    break;
   }
  }
  if ((i14 + -1 | 0) >>> 0 > 78) i13 = 60747; else if ((i14 + 5 | 0) >>> 0 > i3 >>> 0) i13 = 60944; else {
   i8 = HEAP8[i12 + (i14 + 1) >> 0] | 0;
   switch (i8 << 24 >> 24) {
   case 0:
    break;
   case 1:
    {
     if (HEAP8[i12 + (i14 + 2) >> 0] | 0) {
      i13 = 60726;
      break L28;
     }
     break;
    }
   default:
    {
     i13 = 60726;
     break L28;
    }
   }
   i9 = i8 << 24 >> 24 != 0;
   HEAP32[i6 >> 2] = 0;
   i8 = i14 + 3 | 0;
   L38 : do if (i8 >>> 0 < i3 >>> 0) {
    i11 = i8;
    while (1) {
     if (!(HEAP8[i12 + i11 >> 0] | 0)) {
      i15 = i11;
      break L38;
     }
     i16 = i11 + 1 | 0;
     if (i16 >>> 0 < i3 >>> 0) i11 = i16; else {
      i15 = i16;
      break;
     }
    }
   } else i15 = i8; while (0);
   i11 = i15 + 1 | 0;
   L43 : do if (i11 >>> 0 < i3 >>> 0) {
    i16 = i11;
    while (1) {
     if (!(HEAP8[i12 + i16 >> 0] | 0)) {
      i17 = i16;
      break L43;
     }
     i18 = i16 + 1 | 0;
     if (i18 >>> 0 < i3 >>> 0) i16 = i18; else {
      i17 = i18;
      break;
     }
    }
   } else i17 = i11; while (0);
   i16 = i17 + 1 | 0;
   do if (i9 | i16 >>> 0 > i3 >>> 0) if (i9 & i16 >>> 0 < i3 >>> 0) {
    HEAP32[i6 >> 2] = -1;
    if ((_png_decompress_chunk(i1, i3, i16, i6) | 0) == 1) {
     i19 = HEAP32[i10 >> 2] | 0;
     i4 = 35;
     break;
    } else {
     i18 = HEAP32[i1 + 248 >> 2] | 0;
     if (!i18) {
      i19 = i12;
      i4 = 35;
      break;
     } else {
      i20 = i18;
      break;
     }
    }
   } else i20 = 60944; else {
    HEAP32[i6 >> 2] = i3 - i16;
    i19 = i12;
    i4 = 35;
   } while (0);
   if ((i4 | 0) == 35) {
    HEAP8[i19 + ((HEAP32[i6 >> 2] | 0) + i16) >> 0] = 0;
    HEAP32[i7 >> 2] = i9 ? 2 : 1;
    HEAP32[i7 + 4 >> 2] = i19;
    HEAP32[i7 + 20 >> 2] = i19 + i8;
    HEAP32[i7 + 24 >> 2] = i19 + i11;
    HEAP32[i7 + 8 >> 2] = i19 + i16;
    HEAP32[i7 + 12 >> 2] = 0;
    HEAP32[i7 + 16 >> 2] = HEAP32[i6 >> 2];
    if (!(_png_set_text_2(i1, i2, i7, 1) | 0)) {
     STACKTOP = i5;
     return;
    } else i20 = 60954;
   }
   i13 = i20;
  }
 } while (0);
 _png_chunk_benign_error(i1, i13);
 STACKTOP = i5;
 return;
}

function __ZN3glm6rotateIfLNS_9qualifierE0EEENS_3matILi4ELi4ET_XT0_EEERKS4_S3_RKNS_3vecILi3ES3_XT0_EEE(i1, i2, f3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 f3 = Math_fround(f3);
 i4 = i4 | 0;
 var f5 = f0, f6 = f0, f7 = f0, f8 = f0, f9 = f0, f10 = f0, f11 = f0, f12 = f0, f13 = f0, f14 = f0, f15 = f0, f16 = f0, f17 = f0, f18 = f0, f19 = f0, f20 = f0, f21 = f0, f22 = f0, f23 = f0, f24 = f0, f25 = f0, f26 = f0, f27 = f0;
 f5 = Math_fround(_cosf(f3));
 f6 = Math_fround(_sinf(f3));
 f3 = Math_fround(HEAPF32[i4 >> 2]);
 f7 = Math_fround(f3 * f3);
 f8 = Math_fround(HEAPF32[i4 + 4 >> 2]);
 f9 = Math_fround(f8 * f8);
 f10 = Math_fround(HEAPF32[i4 + 8 >> 2]);
 f11 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(f7 + f9) + Math_fround(f10 * f10)))));
 f9 = Math_fround(f3 * f11);
 f3 = Math_fround(f8 * f11);
 f8 = Math_fround(f10 * f11);
 f11 = Math_fround(Math_fround(1.0) - f5);
 f10 = Math_fround(f11 * f9);
 f7 = Math_fround(f11 * f3);
 f12 = Math_fround(f11 * f8);
 f11 = Math_fround(f5 + Math_fround(f9 * f10));
 f13 = Math_fround(f6 * f8);
 f14 = Math_fround(f13 + Math_fround(f3 * f10));
 f15 = Math_fround(f6 * f3);
 f16 = Math_fround(Math_fround(f8 * f10) - f15);
 f10 = Math_fround(Math_fround(f9 * f7) - f13);
 f13 = Math_fround(f5 + Math_fround(f3 * f7));
 f17 = Math_fround(f6 * f9);
 f6 = Math_fround(f17 + Math_fround(f8 * f7));
 f7 = Math_fround(f15 + Math_fround(f9 * f12));
 f9 = Math_fround(Math_fround(f3 * f12) - f17);
 f17 = Math_fround(f5 + Math_fround(f8 * f12));
 f12 = Math_fround(HEAPF32[i2 >> 2]);
 f8 = Math_fround(HEAPF32[i2 + 4 >> 2]);
 f5 = Math_fround(HEAPF32[i2 + 8 >> 2]);
 f3 = Math_fround(HEAPF32[i2 + 12 >> 2]);
 f15 = Math_fround(f12 * f11);
 f18 = Math_fround(f8 * f11);
 f19 = Math_fround(f5 * f11);
 f20 = Math_fround(f3 * f11);
 f11 = Math_fround(HEAPF32[i2 + 16 >> 2]);
 f21 = Math_fround(HEAPF32[i2 + 20 >> 2]);
 f22 = Math_fround(HEAPF32[i2 + 24 >> 2]);
 f23 = Math_fround(HEAPF32[i2 + 28 >> 2]);
 f24 = Math_fround(f15 + Math_fround(f14 * f11));
 f15 = Math_fround(f18 + Math_fround(f14 * f21));
 f18 = Math_fround(f19 + Math_fround(f14 * f22));
 f19 = Math_fround(f20 + Math_fround(f14 * f23));
 f14 = Math_fround(HEAPF32[i2 + 32 >> 2]);
 f20 = Math_fround(HEAPF32[i2 + 36 >> 2]);
 f25 = Math_fround(HEAPF32[i2 + 40 >> 2]);
 f26 = Math_fround(HEAPF32[i2 + 44 >> 2]);
 f27 = Math_fround(f24 + Math_fround(f16 * f14));
 f24 = Math_fround(f15 + Math_fround(f16 * f20));
 f15 = Math_fround(f18 + Math_fround(f16 * f25));
 f18 = Math_fround(f19 + Math_fround(f16 * f26));
 HEAPF32[i1 >> 2] = f27;
 HEAPF32[i1 + 4 >> 2] = f24;
 HEAPF32[i1 + 8 >> 2] = f15;
 HEAPF32[i1 + 12 >> 2] = f18;
 f18 = Math_fround(Math_fround(Math_fround(f10 * f12) + Math_fround(f13 * f11)) + Math_fround(f6 * f14));
 f15 = Math_fround(Math_fround(Math_fround(f10 * f8) + Math_fround(f13 * f21)) + Math_fround(f6 * f20));
 f24 = Math_fround(Math_fround(Math_fround(f10 * f5) + Math_fround(f13 * f22)) + Math_fround(f6 * f25));
 f27 = Math_fround(Math_fround(Math_fround(f10 * f3) + Math_fround(f13 * f23)) + Math_fround(f6 * f26));
 HEAPF32[i1 + 16 >> 2] = f18;
 HEAPF32[i1 + 20 >> 2] = f15;
 HEAPF32[i1 + 24 >> 2] = f24;
 HEAPF32[i1 + 28 >> 2] = f27;
 f27 = Math_fround(Math_fround(Math_fround(f7 * f12) + Math_fround(f9 * f11)) + Math_fround(f17 * f14));
 f14 = Math_fround(Math_fround(Math_fround(f7 * f8) + Math_fround(f9 * f21)) + Math_fround(f17 * f20));
 f20 = Math_fround(Math_fround(Math_fround(f7 * f5) + Math_fround(f9 * f22)) + Math_fround(f17 * f25));
 f25 = Math_fround(Math_fround(Math_fround(f7 * f3) + Math_fround(f9 * f23)) + Math_fround(f17 * f26));
 HEAPF32[i1 + 32 >> 2] = f27;
 HEAPF32[i1 + 36 >> 2] = f14;
 HEAPF32[i1 + 40 >> 2] = f20;
 HEAPF32[i1 + 44 >> 2] = f25;
 i4 = i2 + 48 | 0;
 i2 = i1 + 48 | 0;
 HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i2 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
 return;
}

function __ZL23CalcSizeAfterConstraintP11ImGuiWindow6ImVec2(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, f7 = f0, f8 = f0, f9 = f0, f10 = f0, i11 = 0, f12 = f0, f13 = f0, i14 = 0, f15 = f0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, f30 = f0, f31 = f0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i5 = i4;
 i6 = HEAP32[1460598] | 0;
 if (HEAP32[i6 + 6552 >> 2] | 0) {
  f7 = Math_fround(HEAPF32[i6 + 6600 >> 2]);
  f8 = Math_fround(HEAPF32[i6 + 6604 >> 2]);
  f9 = Math_fround(HEAPF32[i6 + 6608 >> 2]);
  f10 = Math_fround(HEAPF32[i6 + 6612 >> 2]);
  if (!(f7 >= Math_fround(0.0)) | !(f9 >= Math_fround(0.0))) {
   i11 = i3;
   f12 = Math_fround(HEAPF32[i2 + 28 >> 2]);
  } else {
   f13 = Math_fround(HEAPF32[i3 >> 2]);
   i11 = i3;
   f12 = f13 < f7 ? f7 : f13 > f9 ? f9 : f13;
  }
  HEAPF32[i11 >> 2] = f12;
  if (!(f8 >= Math_fround(0.0)) | !(f10 >= Math_fround(0.0))) {
   i14 = i3 + 4 | 0;
   f15 = Math_fround(HEAPF32[i2 + 32 >> 2]);
  } else {
   i11 = i3 + 4 | 0;
   f12 = Math_fround(HEAPF32[i11 >> 2]);
   i14 = i11;
   f15 = f12 < f8 ? f8 : f12 > f10 ? f10 : f12;
  }
  HEAPF32[i14 >> 2] = f15;
  i14 = HEAP32[i6 + 6616 >> 2] | 0;
  if (i14 | 0) {
   HEAP32[i5 >> 2] = HEAP32[i6 + 6620 >> 2];
   i11 = i2 + 12 | 0;
   i16 = HEAP32[i11 + 4 >> 2] | 0;
   i17 = i5 + 4 | 0;
   HEAP32[i17 >> 2] = HEAP32[i11 >> 2];
   HEAP32[i17 + 4 >> 2] = i16;
   i16 = i2 + 28 | 0;
   i17 = HEAP32[i16 + 4 >> 2] | 0;
   i11 = i5 + 12 | 0;
   HEAP32[i11 >> 2] = HEAP32[i16 >> 2];
   HEAP32[i11 + 4 >> 2] = i17;
   i17 = i5 + 20 | 0;
   i11 = i3;
   i16 = HEAP32[i11 + 4 >> 2] | 0;
   i18 = i17;
   HEAP32[i18 >> 2] = HEAP32[i11 >> 2];
   HEAP32[i18 + 4 >> 2] = i16;
   FUNCTION_TABLE_vi[i14 & 255](i5);
   i5 = i17;
   i17 = HEAP32[i5 + 4 >> 2] | 0;
   i14 = i3;
   HEAP32[i14 >> 2] = HEAP32[i5 >> 2];
   HEAP32[i14 + 4 >> 2] = i17;
  }
 }
 i17 = HEAP32[i2 + 8 >> 2] | 0;
 if (i17 & 16777280 | 0) {
  i19 = i3;
  i20 = i19;
  i21 = i20;
  i22 = HEAP32[i21 >> 2] | 0;
  i23 = i20 + 4 | 0;
  i24 = i23;
  i25 = HEAP32[i24 >> 2] | 0;
  i26 = i1;
  i27 = i26;
  HEAP32[i27 >> 2] = i22;
  i28 = i26 + 4 | 0;
  i29 = i28;
  HEAP32[i29 >> 2] = i25;
  STACKTOP = i4;
  return;
 }
 i14 = i6 + 5376 | 0;
 f15 = Math_fround(HEAPF32[i3 >> 2]);
 i5 = f15 >= Math_fround(HEAPF32[i14 >> 2]);
 i16 = i3 + 4 | 0;
 f15 = Math_fround(HEAPF32[i16 >> 2]);
 i18 = f15 >= Math_fround(HEAPF32[i6 + 5380 >> 2]);
 i11 = HEAP32[(i18 ? i3 : i14) + 4 >> 2] | 0;
 i18 = i3;
 HEAP32[i18 >> 2] = HEAP32[(i5 ? i3 : i14) >> 2];
 HEAP32[i18 + 4 >> 2] = i11;
 f15 = (HEAP32[tempDoublePtr >> 2] = i11, Math_fround(HEAPF32[tempDoublePtr >> 2]));
 if (!(i17 & 1)) {
  i11 = HEAP32[1460598] | 0;
  f12 = Math_fround(HEAPF32[i11 + 6188 >> 2]);
  f10 = Math_fround(f12 * Math_fround(HEAPF32[i2 + 624 >> 2]));
  f30 = Math_fround(f10 + Math_fround(Math_fround(HEAPF32[i11 + 5412 >> 2]) * Math_fround(2.0)));
 } else f30 = Math_fround(0.0);
 if (!(i17 & 1024)) f31 = Math_fround(0.0); else {
  f10 = Math_fround(HEAPF32[i2 + 324 >> 2]);
  i17 = HEAP32[1460598] | 0;
  f12 = Math_fround(HEAPF32[i17 + 6188 >> 2]);
  f8 = Math_fround(f10 + Math_fround(f12 * Math_fround(HEAPF32[i2 + 624 >> 2])));
  f31 = Math_fround(f8 + Math_fround(Math_fround(HEAPF32[i17 + 5412 >> 2]) * Math_fround(2.0)));
 }
 f8 = Math_fround(f30 + f31);
 f31 = Math_fround(Math_fround(HEAPF32[i6 + 5368 >> 2]) + Math_fround(-1.0));
 i6 = f31 <= Math_fround(0.0);
 f30 = Math_fround(f8 + (i6 ? Math_fround(0.0) : f31));
 HEAPF32[i16 >> 2] = f30 <= f15 ? f15 : f30;
 i19 = i3;
 i20 = i19;
 i21 = i20;
 i22 = HEAP32[i21 >> 2] | 0;
 i23 = i20 + 4 | 0;
 i24 = i23;
 i25 = HEAP32[i24 >> 2] | 0;
 i26 = i1;
 i27 = i26;
 HEAP32[i27 >> 2] = i22;
 i28 = i26 + 4 | 0;
 i29 = i28;
 HEAP32[i29 >> 2] = i25;
 STACKTOP = i4;
 return;
}

function _png_read_start_row(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 _png_init_read_transformations(i1);
 i2 = i1 + 432 | 0;
 if (!(HEAP8[i2 >> 0] | 0)) {
  i3 = HEAP32[i1 + 348 >> 2] | 0;
  i4 = i1 + 216 | 0;
  i5 = i4;
  i6 = HEAP32[i1 + 352 >> 2] | 0;
  i7 = i3;
  i8 = i3;
  i9 = HEAP32[i4 >> 2] | 0;
 } else {
  i4 = i1 + 216 | 0;
  i3 = HEAP32[i4 >> 2] | 0;
  i10 = HEAP32[i1 + 352 >> 2] | 0;
  i11 = HEAP32[i1 + 348 >> 2] | 0;
  i12 = HEAPU8[i1 + 433 >> 0] | 0;
  i13 = HEAPU8[64438 + i12 >> 0] | 0;
  i5 = i4;
  i6 = (i3 & 2 | 0) == 0 ? (i10 + 7 | 0) >>> 3 : i10;
  i7 = ((i11 + -1 + i13 - (HEAPU8[64445 + i12 >> 0] | 0) | 0) >>> 0) / (i13 >>> 0) | 0;
  i8 = i11;
  i9 = i3;
 }
 HEAP32[i1 + 356 >> 2] = i6;
 HEAP32[i1 + 368 >> 2] = i7;
 i7 = HEAPU8[i1 + 438 >> 0] | 0;
 if (!(i9 & 4)) i14 = i7; else i14 = (HEAPU8[i1 + 436 >> 0] | 0) < 8 ? 8 : i7;
 i7 = HEAP32[i5 >> 2] | 0;
 i9 = (i7 & 4096 | 0) == 0;
 L8 : do if (i9) i15 = i14; else switch (HEAP8[i1 + 435 >> 0] | 0) {
 case 3:
  {
   i15 = (HEAP16[i1 + 428 >> 1] | 0) == 0 ? 24 : 32;
   break L8;
   break;
  }
 case 0:
  {
   i15 = (i14 >>> 0 > 8 ? i14 : 8) << ((HEAP16[i1 + 428 >> 1] | 0) != 0 & 1);
   break L8;
   break;
  }
 case 2:
  {
   if (!(HEAP16[i1 + 428 >> 1] | 0)) {
    i15 = i14;
    break L8;
   }
   i15 = (i14 << 2 >>> 0) / 3 | 0;
   break L8;
   break;
  }
 default:
  {
   i15 = i14;
   break L8;
  }
 } while (0);
 do if (!(i7 & 512)) {
  i16 = i15;
  i17 = i7;
 } else if (i9) {
  i14 = i7 & -513;
  HEAP32[i5 >> 2] = i14;
  i16 = i15;
  i17 = i14;
  break;
 } else {
  i16 = i15 << ((HEAPU8[i1 + 436 >> 0] | 0) < 16 & 1);
  i17 = i7;
  break;
 } while (0);
 i7 = (i17 & 32768 | 0) == 0;
 L22 : do if (i7) i18 = i16; else switch (HEAP8[i1 + 435 >> 0] | 0) {
 case 0:
  {
   i18 = (i16 | 0) < 9 ? 16 : 32;
   break L22;
   break;
  }
 case 3:
 case 2:
  {
   i18 = (i16 | 0) < 33 ? 32 : 64;
   break L22;
   break;
  }
 default:
  {
   i18 = i16;
   break L22;
  }
 } while (0);
 do if (!(i17 & 16384)) i19 = i18; else {
  if (i7 & ((i17 & 4096 | 0) == 0 | (HEAP16[i1 + 428 >> 1] | 0) == 0)) {
   i16 = HEAP8[i1 + 435 >> 0] | 0;
   if (i16 << 24 >> 24 != 4) {
    i15 = i16 << 24 >> 24 == 6;
    if ((i18 | 0) < 9) {
     i19 = i15 ? 32 : 24;
     break;
    } else {
     i19 = i15 ? 64 : 48;
     break;
    }
   }
  }
  i19 = (i18 | 0) < 17 ? 32 : 64;
 } while (0);
 if (!(i17 & 1048576)) i20 = i19; else {
  i17 = Math_imul(HEAPU8[i1 + 205 >> 0] | 0, HEAPU8[i1 + 204 >> 0] | 0) | 0;
  i20 = (i17 | 0) > (i19 | 0) ? i17 : i19;
 }
 HEAP8[i1 + 442 >> 0] = i20;
 HEAP8[i1 + 443 >> 0] = 0;
 i19 = i8 + 7 & -8;
 i8 = Math_imul(i19, i20 >>> 3) | 0;
 i17 = (Math_imul(i19, i20) | 0) >>> 3;
 i19 = (i20 + 7 >> 3) + 49 + ((i20 | 0) > 7 ? i8 : i17) | 0;
 i17 = i1 + 784 | 0;
 if (i19 >>> 0 > (HEAP32[i17 >> 2] | 0) >>> 0) {
  i8 = i1 + 728 | 0;
  _png_free(i1, HEAP32[i8 >> 2] | 0);
  i20 = i1 + 804 | 0;
  _png_free(i1, HEAP32[i20 >> 2] | 0);
  if (!(HEAP8[i2 >> 0] | 0)) i21 = _png_malloc(i1, i19) | 0; else i21 = _png_calloc(i1, i19) | 0;
  HEAP32[i8 >> 2] = i21;
  i21 = _png_malloc(i1, i19) | 0;
  HEAP32[i20 >> 2] = i21;
  i20 = (HEAP32[i8 >> 2] | 0) + 32 | 0;
  HEAP32[i1 + 384 >> 2] = i20 + (0 - (i20 & 15)) + -1;
  i20 = i21 + 32 | 0;
  HEAP32[i1 + 380 >> 2] = i20 + (0 - (i20 & 15)) + -1;
  HEAP32[i17 >> 2] = i19;
 }
 i19 = HEAP32[i1 + 364 >> 2] | 0;
 if ((i19 | 0) == -1) _png_error(i1, 64452);
 _memset(HEAP32[i1 + 380 >> 2] | 0, 0, i19 + 1 | 0) | 0;
 i19 = i1 + 788 | 0;
 i17 = HEAP32[i19 >> 2] | 0;
 if (i17 | 0) {
  HEAP32[i1 + 792 >> 2] = 0;
  HEAP32[i19 >> 2] = 0;
  _png_free(i1, i17);
 }
 if (!(_png_inflate_claim(i1, 1229209940) | 0)) {
  i17 = i1 + 212 | 0;
  HEAP32[i17 >> 2] = HEAP32[i17 >> 2] | 64;
  return;
 } else _png_error(i1, HEAP32[i1 + 248 >> 2] | 0);
}

function __ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 480 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(480);
 i7 = i1 + 468 | 0;
 i8 = i1 + 464 | 0;
 i9 = i1 + 472 | 0;
 i10 = i1 + 460 | 0;
 i11 = i1 + 456 | 0;
 i12 = i1 + 444 | 0;
 i13 = i1 + 432 | 0;
 i14 = i1 + 420 | 0;
 i15 = i1 + 416 | 0;
 i16 = i1 + 16 | 0;
 i17 = i1 + 8 | 0;
 i18 = i1 + 4 | 0;
 i19 = i1;
 __ZNKSt3__28ios_base6getlocEv(i8, i4);
 i20 = __ZNKSt3__26locale9use_facetERNS0_2idE(i8, 5845220) | 0;
 i21 = i6 + 8 + 3 | 0;
 i22 = HEAP8[i21 >> 0] | 0;
 i23 = i22 << 24 >> 24 < 0;
 i24 = i6 + 4 | 0;
 if (!((i23 ? HEAP32[i24 >> 2] | 0 : i22 & 255) | 0)) i25 = 0; else {
  i22 = HEAP32[(i23 ? HEAP32[i6 >> 2] | 0 : i6) >> 2] | 0;
  i25 = (i22 | 0) == (FUNCTION_TABLE_iii[HEAP32[(HEAP32[i20 >> 2] | 0) + 44 >> 2] & 31](i20, 45) | 0);
 };
 HEAP32[i12 >> 2] = 0;
 HEAP32[i12 + 4 >> 2] = 0;
 HEAP32[i12 + 8 >> 2] = 0;
 i22 = 0;
 while (1) {
  if ((i22 | 0) == 3) break;
  HEAP32[i12 + (i22 << 2) >> 2] = 0;
  i22 = i22 + 1 | 0;
 }
 HEAP32[i13 >> 2] = 0;
 HEAP32[i13 + 4 >> 2] = 0;
 HEAP32[i13 + 8 >> 2] = 0;
 i22 = 0;
 while (1) {
  if ((i22 | 0) == 3) break;
  HEAP32[i13 + (i22 << 2) >> 2] = 0;
  i22 = i22 + 1 | 0;
 }
 HEAP32[i14 >> 2] = 0;
 HEAP32[i14 + 4 >> 2] = 0;
 HEAP32[i14 + 8 >> 2] = 0;
 i22 = 0;
 while (1) {
  if ((i22 | 0) == 3) break;
  HEAP32[i14 + (i22 << 2) >> 2] = 0;
  i22 = i22 + 1 | 0;
 }
 __ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri(i3, i25, i8, i9, i10, i11, i12, i13, i14, i15);
 i3 = HEAP8[i21 >> 0] | 0;
 i21 = i3 << 24 >> 24 < 0;
 i22 = i21 ? HEAP32[i24 >> 2] | 0 : i3 & 255;
 i3 = HEAP32[i15 >> 2] | 0;
 if ((i22 | 0) > (i3 | 0)) {
  i15 = HEAP8[i14 + 8 + 3 >> 0] | 0;
  i24 = HEAP8[i13 + 8 + 3 >> 0] | 0;
  i26 = 1;
  i27 = (i15 << 24 >> 24 < 0 ? HEAP32[i14 + 4 >> 2] | 0 : i15 & 255) + (i22 - i3 << 1) | 0;
  i28 = i24 << 24 >> 24 < 0 ? HEAP32[i13 + 4 >> 2] | 0 : i24 & 255;
 } else {
  i24 = HEAP8[i14 + 8 + 3 >> 0] | 0;
  i15 = HEAP8[i13 + 8 + 3 >> 0] | 0;
  i26 = 2;
  i27 = i15 << 24 >> 24 < 0 ? HEAP32[i13 + 4 >> 2] | 0 : i15 & 255;
  i28 = i24 << 24 >> 24 < 0 ? HEAP32[i14 + 4 >> 2] | 0 : i24 & 255;
 }
 i24 = i28 + i3 + i27 + i26 | 0;
 if (i24 >>> 0 > 100) {
  i26 = _malloc(i24 << 2) | 0;
  if (!i26) __ZSt17__throw_bad_allocv(); else {
   i29 = i26;
   i30 = i26;
  }
 } else {
  i29 = i16;
  i30 = 0;
 }
 i16 = i21 ? HEAP32[i6 >> 2] | 0 : i6;
 __ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i(i29, i17, i18, HEAP32[i4 + 4 >> 2] | 0, i16, i16 + (i22 << 2) | 0, i20, i25, i9, HEAP32[i10 >> 2] | 0, HEAP32[i11 >> 2] | 0, i12, i13, i14, i3);
 HEAP32[i19 >> 2] = HEAP32[i2 >> 2];
 i2 = HEAP32[i17 >> 2] | 0;
 i17 = HEAP32[i18 >> 2] | 0;
 HEAP32[i7 >> 2] = HEAP32[i19 >> 2];
 i19 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i7, i29, i2, i17, i4, i5) | 0;
 if (i30 | 0) _free(i30);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i14);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i13);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i12);
 __ZNSt3__26localeD2Ev(i8);
 STACKTOP = i1;
 return i19 | 0;
}

function ___get_locale(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(272);
 i5 = i4 + 8 | 0;
 i6 = i4;
 do if (!(HEAP8[i2 >> 0] | 0)) {
  i7 = _getenv(69718) | 0;
  if (i7 | 0) if (HEAP8[i7 >> 0] | 0) {
   i8 = i7;
   break;
  }
  i7 = _getenv(69725 + (i1 * 12 | 0) | 0) | 0;
  if (i7 | 0) if (HEAP8[i7 >> 0] | 0) {
   i8 = i7;
   break;
  }
  i7 = _getenv(69797) | 0;
  if (i7 | 0) if (HEAP8[i7 >> 0] | 0) {
   i8 = i7;
   break;
  }
  i8 = 69802;
 } else i8 = i2; while (0);
 i2 = 0;
 L13 : while (1) {
  switch (HEAP8[i8 + i2 >> 0] | 0) {
  case 47:
  case 0:
   {
    i9 = i2;
    break L13;
    break;
   }
  default:
   {}
  }
  i7 = i2 + 1 | 0;
  if (i7 >>> 0 < 15) i2 = i7; else {
   i9 = i7;
   break;
  }
 }
 i2 = HEAP8[i8 >> 0] | 0;
 if (i2 << 24 >> 24 == 46) {
  i10 = 69802;
  i3 = 15;
 } else if (!(HEAP8[i8 + i9 >> 0] | 0)) if (i2 << 24 >> 24 == 67) {
  i10 = i8;
  i3 = 15;
 } else {
  i11 = i8;
  i3 = 16;
 } else {
  i10 = 69802;
  i3 = 15;
 }
 if ((i3 | 0) == 15) if (!(HEAP8[i10 + 1 >> 0] | 0)) {
  i12 = i10;
  i3 = 18;
 } else {
  i11 = i10;
  i3 = 16;
 }
 L22 : do if ((i3 | 0) == 16) if (!(_strcmp(i11, 69802) | 0)) {
  i12 = i11;
  i3 = 18;
 } else if (!(_strcmp(i11, 69810) | 0)) {
  i12 = i11;
  i3 = 18;
 } else {
  i10 = HEAP32[1461032] | 0;
  if (i10 | 0) {
   i8 = i10;
   do {
    if (!(_strcmp(i11, i8 + 8 | 0) | 0)) {
     i13 = i8;
     break L22;
    }
    i8 = HEAP32[i8 + 24 >> 2] | 0;
   } while ((i8 | 0) != 0);
  }
  ___lock(5844132);
  i8 = HEAP32[1461032] | 0;
  L32 : do if (i8 | 0) {
   i10 = i8;
   while (1) {
    if (!(_strcmp(i11, i10 + 8 | 0) | 0)) break;
    i2 = HEAP32[i10 + 24 >> 2] | 0;
    if (!i2) break L32; else i10 = i2;
   }
   ___unlock(5844132);
   i13 = i10;
   break L22;
  } while (0);
  L39 : do if (!(HEAP32[1461006] | 0)) {
   i8 = _getenv(69816) | 0;
   if (!i8) i3 = 41; else if (!(HEAP8[i8 >> 0] | 0)) i3 = 41; else {
    i2 = 254 - i9 | 0;
    i7 = i9 + 1 | 0;
    i14 = i8;
    while (1) {
     i8 = ___strchrnul(i14, 58) | 0;
     i15 = HEAP8[i8 >> 0] | 0;
     i16 = i8 - i14 + ((i15 << 24 >> 24 != 0) << 31 >> 31) | 0;
     if (i16 >>> 0 < i2 >>> 0) {
      _memcpy(i5 | 0, i14 | 0, i16 | 0) | 0;
      i17 = i5 + i16 | 0;
      HEAP8[i17 >> 0] = 47;
      _memcpy(i17 + 1 | 0, i11 | 0, i9 | 0) | 0;
      HEAP8[i5 + (i7 + i16) >> 0] = 0;
      i18 = ___map_file(i5 | 0, i6 | 0) | 0;
      if (i18 | 0) break;
      i19 = HEAP8[i8 >> 0] | 0;
     } else i19 = i15;
     i14 = i8 + (i19 << 24 >> 24 != 0 & 1) | 0;
     if (!(HEAP8[i14 >> 0] | 0)) {
      i3 = 41;
      break L39;
     }
    }
    i14 = _malloc(28) | 0;
    if (!i14) {
     ___munmap(i18, HEAP32[i6 >> 2] | 0) | 0;
     i3 = 41;
     break;
    } else {
     HEAP32[i14 >> 2] = i18;
     HEAP32[i14 + 4 >> 2] = HEAP32[i6 >> 2];
     i7 = i14 + 8 | 0;
     _memcpy(i7 | 0, i11 | 0, i9 | 0) | 0;
     HEAP8[i7 + i9 >> 0] = 0;
     HEAP32[i14 + 24 >> 2] = HEAP32[1461032];
     HEAP32[1461032] = i14;
     i20 = i14;
     break;
    }
   }
  } else i3 = 41; while (0);
  if ((i3 | 0) == 41) {
   i14 = _malloc(28) | 0;
   if (!i14) i20 = i14; else {
    HEAP32[i14 >> 2] = HEAP32[3450];
    HEAP32[i14 + 4 >> 2] = HEAP32[3451];
    i7 = i14 + 8 | 0;
    _memcpy(i7 | 0, i11 | 0, i9 | 0) | 0;
    HEAP8[i7 + i9 >> 0] = 0;
    HEAP32[i14 + 24 >> 2] = HEAP32[1461032];
    HEAP32[1461032] = i14;
    i20 = i14;
   }
  }
  ___unlock(5844132);
  i13 = (i1 | 0) == 0 & (i20 | 0) == 0 ? 13800 : i20;
 } while (0);
 do if ((i3 | 0) == 18) {
  if (!i1) if ((HEAP8[i12 + 1 >> 0] | 0) == 46) {
   i13 = 13800;
   break;
  }
  i13 = 0;
 } while (0);
 STACKTOP = i4;
 return i13 | 0;
}

function __ZL38CalcNextScrollFromScrollTargetAndClampP11ImGuiWindowb(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, f10 = f0, f11 = f0, f12 = f0, f13 = f0, f14 = f0, f15 = f0, f16 = f0, f17 = f0, f18 = f0, f19 = f0, f20 = f0, i21 = 0, f22 = f0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4;
 i6 = HEAP32[1460598] | 0;
 i7 = i2 + 84 | 0;
 i8 = HEAP32[i7 >> 2] | 0;
 i9 = HEAP32[i7 + 4 >> 2] | 0;
 i7 = i1;
 HEAP32[i7 >> 2] = i8;
 HEAP32[i7 + 4 >> 2] = i9;
 f10 = Math_fround(HEAPF32[i2 + 92 >> 2]);
 i7 = f10 < Math_fround(3402823469999999843913219.0e14);
 f11 = (HEAP32[tempDoublePtr >> 2] = i8, Math_fround(HEAPF32[tempDoublePtr >> 2]));
 f12 = (HEAP32[tempDoublePtr >> 2] = i9, Math_fround(HEAPF32[tempDoublePtr >> 2]));
 if (i7) {
  f13 = Math_fround(HEAPF32[i2 + 100 >> 2]);
  f14 = Math_fround(HEAPF32[i2 + 28 >> 2]);
  f15 = Math_fround(f10 - Math_fround(f13 * Math_fround(f14 - Math_fround(HEAPF32[i2 + 108 >> 2]))));
  HEAPF32[i1 >> 2] = f15;
  f16 = f15;
 } else f16 = f11;
 f11 = Math_fround(HEAPF32[i2 + 96 >> 2]);
 if (f11 < Math_fround(3402823469999999843913219.0e14)) {
  f15 = Math_fround(HEAPF32[i2 + 104 >> 2]);
  if (f15 <= Math_fround(0.0) & i3) if (!(f11 <= Math_fround(HEAPF32[i2 + 64 >> 2]))) f17 = f11; else f17 = Math_fround(0.0); else f17 = f11;
  if (f15 >= Math_fround(1.0) & i3) {
   f11 = Math_fround(HEAPF32[i2 + 48 >> 2]);
   f14 = Math_fround(f11 - Math_fround(HEAPF32[i2 + 64 >> 2]));
   if (!(f17 >= Math_fround(f14 + Math_fround(HEAPF32[i6 + 5428 >> 2])))) f18 = f17; else f18 = f11;
  } else f18 = f17;
  f17 = Math_fround(Math_fround(1.0) - f15);
  i3 = HEAP32[i2 + 8 >> 2] | 0;
  if (!(i3 & 1)) {
   f11 = Math_fround(HEAPF32[i6 + 6188 >> 2]);
   f14 = Math_fround(f11 * Math_fround(HEAPF32[i2 + 624 >> 2]));
   f19 = Math_fround(f14 + Math_fround(Math_fround(HEAPF32[i6 + 5412 >> 2]) * Math_fround(2.0)));
  } else f19 = Math_fround(0.0);
  if (!(i3 & 1024)) f20 = Math_fround(0.0); else {
   f14 = Math_fround(HEAPF32[i2 + 324 >> 2]);
   f11 = Math_fround(HEAPF32[i6 + 6188 >> 2]);
   f13 = Math_fround(f14 + Math_fround(f11 * Math_fround(HEAPF32[i2 + 624 >> 2])));
   f20 = Math_fround(f13 + Math_fround(Math_fround(HEAPF32[i6 + 5412 >> 2]) * Math_fround(2.0)));
  }
  f13 = Math_fround(f18 - Math_fround(f17 * Math_fround(f19 + f20)));
  f20 = Math_fround(HEAPF32[i2 + 32 >> 2]);
  f19 = Math_fround(f13 - Math_fround(f15 * Math_fround(f20 - Math_fround(HEAPF32[i2 + 112 >> 2]))));
  i6 = i1 + 4 | 0;
  HEAPF32[i6 >> 2] = f19;
  i21 = i6;
  f22 = f19;
 } else {
  i21 = i1 + 4 | 0;
  f22 = f12;
 }
 HEAPF32[i5 >> 2] = Math_fround(0.0);
 HEAPF32[i5 + 4 >> 2] = Math_fround(0.0);
 i6 = f16 >= Math_fround(0.0);
 i3 = HEAP32[(i6 ? i1 : i5) >> 2] | 0;
 i6 = f22 >= Math_fround(0.0);
 i7 = HEAP32[(i6 ? i1 : i5) + 4 >> 2] | 0;
 i5 = i1;
 HEAP32[i5 >> 2] = i3;
 HEAP32[i5 + 4 >> 2] = i7;
 f22 = (HEAP32[tempDoublePtr >> 2] = i3, Math_fround(HEAPF32[tempDoublePtr >> 2]));
 f16 = (HEAP32[tempDoublePtr >> 2] = i7, Math_fround(HEAPF32[tempDoublePtr >> 2]));
 if (HEAP8[i2 + 121 >> 0] | 0) {
  STACKTOP = i4;
  return;
 }
 if (HEAP8[i2 + 123 >> 0] | 0) {
  STACKTOP = i4;
  return;
 }
 f12 = Math_fround(HEAPF32[i2 + 44 >> 2]);
 f19 = Math_fround(HEAPF32[i2 + 28 >> 2]);
 f20 = Math_fround(f12 - Math_fround(f19 - Math_fround(HEAPF32[i2 + 108 >> 2])));
 i7 = f20 <= Math_fround(0.0);
 f19 = i7 ? Math_fround(0.0) : f20;
 HEAPF32[i1 >> 2] = f19 > f22 ? f22 : f19;
 f19 = Math_fround(HEAPF32[i2 + 48 >> 2]);
 f22 = Math_fround(HEAPF32[i2 + 32 >> 2]);
 f20 = Math_fround(f19 - Math_fround(f22 - Math_fround(HEAPF32[i2 + 112 >> 2])));
 i2 = f20 <= Math_fround(0.0);
 f22 = i2 ? Math_fround(0.0) : f20;
 HEAPF32[i21 >> 2] = f22 > f16 ? f16 : f22;
 STACKTOP = i4;
 return;
}

function __ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176);
 i7 = i1 + 56 | 0;
 i8 = i1 + 52 | 0;
 i9 = i1 + 164 | 0;
 i10 = i1 + 161 | 0;
 i11 = i1 + 160 | 0;
 i12 = i1 + 40 | 0;
 i13 = i1 + 28 | 0;
 i14 = i1 + 16 | 0;
 i15 = i1 + 12 | 0;
 i16 = i1 + 60 | 0;
 i17 = i1 + 8 | 0;
 i18 = i1 + 4 | 0;
 i19 = i1;
 __ZNKSt3__28ios_base6getlocEv(i8, i4);
 i20 = __ZNKSt3__26locale9use_facetERNS0_2idE(i8, 5845188) | 0;
 i21 = i6 + 11 | 0;
 i22 = HEAP8[i21 >> 0] | 0;
 i23 = i22 << 24 >> 24 < 0;
 i24 = i6 + 4 | 0;
 if (!((i23 ? HEAP32[i24 >> 2] | 0 : i22 & 255) | 0)) i25 = 0; else {
  i22 = HEAP8[(i23 ? HEAP32[i6 >> 2] | 0 : i6) >> 0] | 0;
  i25 = i22 << 24 >> 24 == (FUNCTION_TABLE_iii[HEAP32[(HEAP32[i20 >> 2] | 0) + 28 >> 2] & 31](i20, 45) | 0) << 24 >> 24;
 };
 HEAP32[i12 >> 2] = 0;
 HEAP32[i12 + 4 >> 2] = 0;
 HEAP32[i12 + 8 >> 2] = 0;
 i22 = 0;
 while (1) {
  if ((i22 | 0) == 3) break;
  HEAP32[i12 + (i22 << 2) >> 2] = 0;
  i22 = i22 + 1 | 0;
 }
 HEAP32[i13 >> 2] = 0;
 HEAP32[i13 + 4 >> 2] = 0;
 HEAP32[i13 + 8 >> 2] = 0;
 i22 = 0;
 while (1) {
  if ((i22 | 0) == 3) break;
  HEAP32[i13 + (i22 << 2) >> 2] = 0;
  i22 = i22 + 1 | 0;
 }
 HEAP32[i14 >> 2] = 0;
 HEAP32[i14 + 4 >> 2] = 0;
 HEAP32[i14 + 8 >> 2] = 0;
 i22 = 0;
 while (1) {
  if ((i22 | 0) == 3) break;
  HEAP32[i14 + (i22 << 2) >> 2] = 0;
  i22 = i22 + 1 | 0;
 }
 __ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri(i3, i25, i8, i9, i10, i11, i12, i13, i14, i15);
 i3 = HEAP8[i21 >> 0] | 0;
 i21 = i3 << 24 >> 24 < 0;
 i22 = i21 ? HEAP32[i24 >> 2] | 0 : i3 & 255;
 i3 = HEAP32[i15 >> 2] | 0;
 if ((i22 | 0) > (i3 | 0)) {
  i15 = HEAP8[i14 + 11 >> 0] | 0;
  i24 = HEAP8[i13 + 11 >> 0] | 0;
  i26 = 1;
  i27 = (i15 << 24 >> 24 < 0 ? HEAP32[i14 + 4 >> 2] | 0 : i15 & 255) + (i22 - i3 << 1) | 0;
  i28 = i24 << 24 >> 24 < 0 ? HEAP32[i13 + 4 >> 2] | 0 : i24 & 255;
 } else {
  i24 = HEAP8[i14 + 11 >> 0] | 0;
  i15 = HEAP8[i13 + 11 >> 0] | 0;
  i26 = 2;
  i27 = i15 << 24 >> 24 < 0 ? HEAP32[i13 + 4 >> 2] | 0 : i15 & 255;
  i28 = i24 << 24 >> 24 < 0 ? HEAP32[i14 + 4 >> 2] | 0 : i24 & 255;
 }
 i24 = i28 + i3 + i27 + i26 | 0;
 if (i24 >>> 0 > 100) {
  i26 = _malloc(i24) | 0;
  if (!i26) __ZSt17__throw_bad_allocv(); else {
   i29 = i26;
   i30 = i26;
  }
 } else {
  i29 = i16;
  i30 = 0;
 }
 i16 = i21 ? HEAP32[i6 >> 2] | 0 : i6;
 __ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i(i29, i17, i18, HEAP32[i4 + 4 >> 2] | 0, i16, i16 + i22 | 0, i20, i25, i9, HEAP8[i10 >> 0] | 0, HEAP8[i11 >> 0] | 0, i12, i13, i14, i3);
 HEAP32[i19 >> 2] = HEAP32[i2 >> 2];
 i2 = HEAP32[i17 >> 2] | 0;
 i17 = HEAP32[i18 >> 2] | 0;
 HEAP32[i7 >> 2] = HEAP32[i19 >> 2];
 i19 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i7, i29, i2, i17, i4, i5) | 0;
 if (i30 | 0) _free(i30);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i14);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i13);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i12);
 __ZNSt3__26localeD2Ev(i8);
 STACKTOP = i1;
 return i19 | 0;
}

function __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i9 = i8;
 i10 = __ZNKSt3__26locale9use_facetERNS0_2idE(i7, 5845220) | 0;
 i11 = __ZNKSt3__26locale9use_facetERNS0_2idE(i7, 5845228) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i11 >> 2] | 0) + 20 >> 2] & 63](i9, i11);
 i7 = i9 + 11 | 0;
 i12 = HEAP8[i7 >> 0] | 0;
 i13 = i9 + 4 | 0;
 if (!((i12 << 24 >> 24 < 0 ? HEAP32[i13 >> 2] | 0 : i12 & 255) | 0)) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i10 >> 2] | 0) + 48 >> 2] & 7](i10, i1, i3, i4) | 0;
  i12 = i1;
  i14 = i4 + (i3 - i12 << 2) | 0;
  HEAP32[i6 >> 2] = i14;
  i15 = i12;
  i16 = i14;
 } else {
  HEAP32[i6 >> 2] = i4;
  i14 = HEAP8[i1 >> 0] | 0;
  switch (i14 << 24 >> 24) {
  case 43:
  case 45:
   {
    i12 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i10 >> 2] | 0) + 44 >> 2] & 31](i10, i14) | 0;
    i14 = HEAP32[i6 >> 2] | 0;
    HEAP32[i6 >> 2] = i14 + 4;
    HEAP32[i14 >> 2] = i12;
    i17 = i1 + 1 | 0;
    break;
   }
  default:
   i17 = i1;
  }
  L7 : do if ((i3 - i17 | 0) > 1) if ((HEAP8[i17 >> 0] | 0) == 48) {
   i12 = i17 + 1 | 0;
   switch (HEAP8[i12 >> 0] | 0) {
   case 88:
   case 120:
    break;
   default:
    {
     i18 = i17;
     break L7;
    }
   }
   i14 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i10 >> 2] | 0) + 44 >> 2] & 31](i10, 48) | 0;
   i19 = HEAP32[i6 >> 2] | 0;
   HEAP32[i6 >> 2] = i19 + 4;
   HEAP32[i19 >> 2] = i14;
   i14 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i10 >> 2] | 0) + 44 >> 2] & 31](i10, HEAP8[i12 >> 0] | 0) | 0;
   i12 = HEAP32[i6 >> 2] | 0;
   HEAP32[i6 >> 2] = i12 + 4;
   HEAP32[i12 >> 2] = i14;
   i18 = i17 + 2 | 0;
  } else i18 = i17; else i18 = i17; while (0);
  L12 : do if ((i18 | 0) != (i3 | 0)) {
   i17 = i3;
   i14 = i18;
   while (1) {
    i12 = i17 + -1 | 0;
    if (i14 >>> 0 >= i12 >>> 0) break L12;
    i19 = HEAP8[i14 >> 0] | 0;
    HEAP8[i14 >> 0] = HEAP8[i12 >> 0] | 0;
    HEAP8[i12 >> 0] = i19;
    i17 = i12;
    i14 = i14 + 1 | 0;
   }
  } while (0);
  i14 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i11 >> 2] | 0) + 16 >> 2] & 127](i11) | 0;
  i11 = i18;
  i17 = 0;
  i12 = 0;
  while (1) {
   if (i11 >>> 0 >= i3 >>> 0) break;
   i19 = HEAP8[((HEAP8[i7 >> 0] | 0) < 0 ? HEAP32[i9 >> 2] | 0 : i9) + i17 >> 0] | 0;
   if (i19 << 24 >> 24 != 0 & (i12 | 0) == (i19 << 24 >> 24 | 0)) {
    i19 = HEAP32[i6 >> 2] | 0;
    HEAP32[i6 >> 2] = i19 + 4;
    HEAP32[i19 >> 2] = i14;
    i19 = HEAP8[i7 >> 0] | 0;
    i20 = i17 + (i17 >>> 0 < ((i19 << 24 >> 24 < 0 ? HEAP32[i13 >> 2] | 0 : i19 & 255) + -1 | 0) >>> 0 & 1) | 0;
    i21 = 0;
   } else {
    i20 = i17;
    i21 = i12;
   }
   i19 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i10 >> 2] | 0) + 44 >> 2] & 31](i10, HEAP8[i11 >> 0] | 0) | 0;
   i22 = HEAP32[i6 >> 2] | 0;
   HEAP32[i6 >> 2] = i22 + 4;
   HEAP32[i22 >> 2] = i19;
   i11 = i11 + 1 | 0;
   i17 = i20;
   i12 = i21 + 1 | 0;
  }
  i21 = i1;
  i1 = i4 + (i18 - i21 << 2) | 0;
  i18 = HEAP32[i6 >> 2] | 0;
  if ((i1 | 0) == (i18 | 0)) {
   i15 = i21;
   i16 = i1;
  } else {
   i12 = i18;
   i18 = i1;
   while (1) {
    i1 = i12 + -4 | 0;
    if (i18 >>> 0 >= i1 >>> 0) break;
    i20 = HEAP32[i18 >> 2] | 0;
    HEAP32[i18 >> 2] = HEAP32[i1 >> 2];
    HEAP32[i1 >> 2] = i20;
    i12 = i1;
    i18 = i18 + 4 | 0;
   }
   i15 = i21;
   i16 = HEAP32[i6 >> 2] | 0;
  }
 }
 HEAP32[i5 >> 2] = (i2 | 0) == (i3 | 0) ? i16 : i4 + (i2 - i15 << 2) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i9);
 STACKTOP = i8;
 return;
}

function __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i9 = i8;
 i10 = __ZNKSt3__26locale9use_facetERNS0_2idE(i7, 5845188) | 0;
 i11 = __ZNKSt3__26locale9use_facetERNS0_2idE(i7, 5845204) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i11 >> 2] | 0) + 20 >> 2] & 63](i9, i11);
 i7 = i9 + 11 | 0;
 i12 = HEAP8[i7 >> 0] | 0;
 i13 = i9 + 4 | 0;
 if (!((i12 << 24 >> 24 < 0 ? HEAP32[i13 >> 2] | 0 : i12 & 255) | 0)) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i10 >> 2] | 0) + 32 >> 2] & 7](i10, i1, i3, i4) | 0;
  i12 = i1;
  i14 = i4 + (i3 - i12) | 0;
  HEAP32[i6 >> 2] = i14;
  i15 = i12;
  i16 = i14;
 } else {
  HEAP32[i6 >> 2] = i4;
  i14 = HEAP8[i1 >> 0] | 0;
  switch (i14 << 24 >> 24) {
  case 43:
  case 45:
   {
    i12 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i10 >> 2] | 0) + 28 >> 2] & 31](i10, i14) | 0;
    i14 = HEAP32[i6 >> 2] | 0;
    HEAP32[i6 >> 2] = i14 + 1;
    HEAP8[i14 >> 0] = i12;
    i17 = i1 + 1 | 0;
    break;
   }
  default:
   i17 = i1;
  }
  L7 : do if ((i3 - i17 | 0) > 1) if ((HEAP8[i17 >> 0] | 0) == 48) {
   i12 = i17 + 1 | 0;
   switch (HEAP8[i12 >> 0] | 0) {
   case 88:
   case 120:
    break;
   default:
    {
     i18 = i17;
     break L7;
    }
   }
   i14 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i10 >> 2] | 0) + 28 >> 2] & 31](i10, 48) | 0;
   i19 = HEAP32[i6 >> 2] | 0;
   HEAP32[i6 >> 2] = i19 + 1;
   HEAP8[i19 >> 0] = i14;
   i14 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i10 >> 2] | 0) + 28 >> 2] & 31](i10, HEAP8[i12 >> 0] | 0) | 0;
   i12 = HEAP32[i6 >> 2] | 0;
   HEAP32[i6 >> 2] = i12 + 1;
   HEAP8[i12 >> 0] = i14;
   i18 = i17 + 2 | 0;
  } else i18 = i17; else i18 = i17; while (0);
  L12 : do if ((i18 | 0) != (i3 | 0)) {
   i17 = i3;
   i14 = i18;
   while (1) {
    i12 = i17 + -1 | 0;
    if (i14 >>> 0 >= i12 >>> 0) break L12;
    i19 = HEAP8[i14 >> 0] | 0;
    HEAP8[i14 >> 0] = HEAP8[i12 >> 0] | 0;
    HEAP8[i12 >> 0] = i19;
    i17 = i12;
    i14 = i14 + 1 | 0;
   }
  } while (0);
  i14 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i11 >> 2] | 0) + 16 >> 2] & 127](i11) | 0;
  i11 = i18;
  i17 = 0;
  i12 = 0;
  while (1) {
   if (i11 >>> 0 >= i3 >>> 0) break;
   i19 = HEAP8[((HEAP8[i7 >> 0] | 0) < 0 ? HEAP32[i9 >> 2] | 0 : i9) + i17 >> 0] | 0;
   if (i19 << 24 >> 24 != 0 & (i12 | 0) == (i19 << 24 >> 24 | 0)) {
    i19 = HEAP32[i6 >> 2] | 0;
    HEAP32[i6 >> 2] = i19 + 1;
    HEAP8[i19 >> 0] = i14;
    i19 = HEAP8[i7 >> 0] | 0;
    i20 = i17 + (i17 >>> 0 < ((i19 << 24 >> 24 < 0 ? HEAP32[i13 >> 2] | 0 : i19 & 255) + -1 | 0) >>> 0 & 1) | 0;
    i21 = 0;
   } else {
    i20 = i17;
    i21 = i12;
   }
   i19 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i10 >> 2] | 0) + 28 >> 2] & 31](i10, HEAP8[i11 >> 0] | 0) | 0;
   i22 = HEAP32[i6 >> 2] | 0;
   HEAP32[i6 >> 2] = i22 + 1;
   HEAP8[i22 >> 0] = i19;
   i11 = i11 + 1 | 0;
   i17 = i20;
   i12 = i21 + 1 | 0;
  }
  i21 = i1;
  i1 = i4 + (i18 - i21) | 0;
  i18 = HEAP32[i6 >> 2] | 0;
  if ((i1 | 0) == (i18 | 0)) {
   i15 = i21;
   i16 = i1;
  } else {
   i12 = i18;
   i18 = i1;
   while (1) {
    i1 = i12 + -1 | 0;
    if (i18 >>> 0 >= i1 >>> 0) break;
    i20 = HEAP8[i18 >> 0] | 0;
    HEAP8[i18 >> 0] = HEAP8[i1 >> 0] | 0;
    HEAP8[i1 >> 0] = i20;
    i12 = i1;
    i18 = i18 + 1 | 0;
   }
   i15 = i21;
   i16 = HEAP32[i6 >> 2] | 0;
  }
 }
 HEAP32[i5 >> 2] = (i2 | 0) == (i3 | 0) ? i16 : i4 + (i2 - i15) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i9);
 STACKTOP = i8;
 return;
}

function __ZNK6ImFont21CalcWordWrapPositionAEfPKcS1_f(i1, f2, i3, i4, f5) {
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 i3 = i3 | 0;
 i4 = i4 | 0;
 f5 = Math_fround(f5);
 var i6 = 0, i7 = 0, i8 = 0, f9 = f0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, f17 = f0, i18 = 0, f19 = f0, f20 = f0, f21 = f0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, f28 = f0, f29 = f0, f30 = f0, i31 = 0, f32 = f0, f33 = f0, f34 = f0, i35 = 0, i36 = 0, f37 = f0, i38 = 0, f39 = f0, f40 = f0, f41 = f0;
 i6 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7;
 f9 = Math_fround(f5 / f2);
 if (i3 >>> 0 >= i4 >>> 0) {
  i10 = i3;
  STACKTOP = i7;
  return i10 | 0;
 }
 i11 = i1 + 28 | 0;
 i12 = i1 + 36 | 0;
 i13 = i1 + 56 | 0;
 i1 = i3;
 i14 = 1;
 i15 = 0;
 i16 = i3;
 f2 = Math_fround(0.0);
 f5 = Math_fround(0.0);
 f17 = Math_fround(0.0);
 L4 : while (1) {
  i18 = i1;
  i3 = i14;
  f19 = f2;
  f20 = f5;
  f21 = f17;
  L6 : while (1) {
   i22 = HEAP8[i18 >> 0] | 0;
   i23 = i22 << 24 >> 24;
   HEAP32[i8 >> 2] = i23;
   if (i22 << 24 >> 24 > -1) {
    i24 = i23;
    i25 = 1;
   } else {
    i23 = __Z18ImTextCharFromUtf8PjPKcS1_(i8, i18, i4) | 0;
    i24 = HEAP32[i8 >> 2] | 0;
    i25 = i23;
   }
   i26 = i18 + i25 | 0;
   if (!i24) {
    i6 = 7;
    break L4;
   }
   if (i24 >>> 0 >= 32) break;
   switch (i24 | 0) {
   case 10:
    {
     i27 = 1;
     f28 = Math_fround(0.0);
     f29 = Math_fround(0.0);
     f30 = Math_fround(0.0);
     break;
    }
   case 13:
    {
     i27 = i3;
     f28 = f20;
     f29 = f19;
     f30 = f21;
     break;
    }
   default:
    break L6;
   }
   if (i26 >>> 0 < i4 >>> 0) {
    i18 = i26;
    i3 = i27;
    f19 = f29;
    f20 = f28;
    f21 = f30;
   } else {
    i10 = i26;
    i6 = 21;
    break L4;
   }
  }
  if ((i24 | 0) < (HEAP32[i11 >> 2] | 0)) i31 = (HEAP32[i12 >> 2] | 0) + (i24 << 2) | 0; else i31 = i13;
  f32 = Math_fround(HEAPF32[i31 >> 2]);
  L20 : do if ((i24 | 0) < 32) switch (i24 | 0) {
  case 9:
   {
    i6 = 14;
    break;
   }
  default:
   i6 = 15;
  } else if ((i24 | 0) < 12288) switch (i24 | 0) {
  case 32:
   {
    i6 = 14;
    break L20;
    break;
   }
  default:
   {
    i6 = 15;
    break L20;
   }
  } else switch (i24 | 0) {
  case 12288:
   {
    i6 = 14;
    break L20;
    break;
   }
  default:
   {
    i6 = 15;
    break L20;
   }
  } while (0);
  L26 : do if ((i6 | 0) == 14) {
   i6 = 0;
   f33 = Math_fround(f21 + f19);
   f34 = i3 ? Math_fround(0.0) : f19;
   i35 = 0;
   i36 = i15;
   f37 = f20;
   i38 = i3 ? i18 : i16;
   f39 = Math_fround(f34 + f32);
   f40 = i3 ? f33 : f21;
  } else if ((i6 | 0) == 15) {
   i6 = 0;
   f33 = Math_fround(f20 + f32);
   f34 = Math_fround(f21 + Math_fround(f19 + f33));
   f41 = i3 ? f21 : f34;
   f34 = i3 ? f33 : Math_fround(0.0);
   f33 = i3 ? f19 : Math_fround(0.0);
   i23 = i3 ? i26 : i16;
   i22 = i3 ? i15 : i16;
   switch (i24 | 0) {
   case 34:
   case 33:
   case 44:
   case 46:
   case 59:
   case 63:
    {
     i35 = 0;
     i36 = i22;
     f37 = f34;
     i38 = i23;
     f39 = f33;
     f40 = f41;
     break L26;
     break;
    }
   default:
    {}
   }
   i35 = 1;
   i36 = i22;
   f37 = f34;
   i38 = i23;
   f39 = f33;
   f40 = f41;
  } while (0);
  if (Math_fround(f40 + f37) >= f9) {
   i6 = 18;
   break;
  }
  if (i26 >>> 0 < i4 >>> 0) {
   i1 = i26;
   i14 = i35 << 24 >> 24 != 0;
   i15 = i36;
   i16 = i38;
   f2 = f39;
   f5 = f37;
   f17 = f40;
  } else {
   i10 = i26;
   i6 = 21;
   break;
  }
 }
 if ((i6 | 0) == 7) {
  i10 = i18;
  STACKTOP = i7;
  return i10 | 0;
 } else if ((i6 | 0) == 18) {
  i10 = f37 < f9 ? (i36 | 0 ? i36 : i38) : i18;
  STACKTOP = i7;
  return i10 | 0;
 } else if ((i6 | 0) == 21) {
  STACKTOP = i7;
  return i10 | 0;
 }
 return 0;
}

function _png_set_text_2(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0;
 i5 = 0;
 if ((i3 | 0) == 0 | ((i1 | 0) == 0 | (i2 | 0) == 0 | (i4 | 0) < 1)) {
  i6 = 0;
  return i6 | 0;
 }
 i7 = i2 + 132 | 0;
 i8 = i2 + 128 | 0;
 i9 = HEAP32[i8 >> 2] | 0;
 do if (((HEAP32[i7 >> 2] | 0) - i9 | 0) < (i4 | 0)) {
  i10 = i9 + i4 | 0;
  i11 = (i10 | 0) < 2147483639 ? i10 + 8 & -8 : 2147483647;
  if ((2147483647 - i9 | 0) >= (i4 | 0)) {
   i10 = i2 + 136 | 0;
   i12 = _png_realloc_array(i1, HEAP32[i10 >> 2] | 0, i9, i11 - i9 | 0, 28) | 0;
   if (i12 | 0) {
    _png_free(i1, HEAP32[i10 >> 2] | 0);
    HEAP32[i10 >> 2] = i12;
    i12 = i2 + 232 | 0;
    HEAP32[i12 >> 2] = HEAP32[i12 >> 2] | 16384;
    HEAP32[i7 >> 2] = i11;
    break;
   }
  }
  _png_chunk_report(i1, 60759, 1);
  i6 = 1;
  return i6 | 0;
 } while (0);
 if ((i4 | 0) <= 0) {
  i6 = 0;
  return i6 | 0;
 }
 i7 = i2 + 136 | 0;
 i2 = 0;
 L15 : while (1) {
  i9 = HEAP32[i7 >> 2] | 0;
  i11 = HEAP32[i8 >> 2] | 0;
  i12 = i9 + (i11 * 28 | 0) | 0;
  i10 = i3 + (i2 * 28 | 0) + 4 | 0;
  i13 = HEAP32[i10 >> 2] | 0;
  do if (i13 | 0) {
   i14 = i3 + (i2 * 28 | 0) | 0;
   i15 = HEAP32[i14 >> 2] | 0;
   if ((i15 + 1 | 0) >>> 0 > 3) {
    _png_chunk_report(i1, 60780, 1);
    break;
   }
   i16 = _strlen(i13) | 0;
   if ((i15 | 0) < 1) {
    i17 = 0;
    i18 = 0;
   } else {
    i19 = HEAP32[i3 + (i2 * 28 | 0) + 20 >> 2] | 0;
    if (!i19) i20 = 0; else i20 = _strlen(i19) | 0;
    i19 = HEAP32[i3 + (i2 * 28 | 0) + 24 >> 2] | 0;
    if (!i19) {
     i17 = 0;
     i18 = i20;
    } else {
     i17 = _strlen(i19) | 0;
     i18 = i20;
    }
   }
   i19 = i3 + (i2 * 28 | 0) + 8 | 0;
   i21 = HEAP32[i19 >> 2] | 0;
   if (!i21) i5 = 19; else if (!(HEAP8[i21 >> 0] | 0)) i5 = 19; else {
    i22 = _strlen(i21) | 0;
    HEAP32[i12 >> 2] = i15;
    i23 = i22;
   }
   if ((i5 | 0) == 19) {
    i5 = 0;
    HEAP32[i12 >> 2] = (i15 | 0) > 0 ? 1 : -1;
    i23 = 0;
   }
   i15 = _png_malloc_base(i1, i16 + 4 + i18 + i17 + i23 | 0) | 0;
   i22 = i9 + (i11 * 28 | 0) + 4 | 0;
   HEAP32[i22 >> 2] = i15;
   if (!i15) break L15;
   _memcpy(i15 | 0, HEAP32[i10 >> 2] | 0, i16 | 0) | 0;
   HEAP8[(HEAP32[i22 >> 2] | 0) + i16 >> 0] = 0;
   if ((HEAP32[i14 >> 2] | 0) > 0) {
    i14 = (HEAP32[i22 >> 2] | 0) + i16 + 1 | 0;
    i15 = i9 + (i11 * 28 | 0) | 0;
    i21 = i15 + 20 | 0;
    HEAP32[i21 >> 2] = i14;
    i24 = i3 + (i2 * 28 | 0) | 0;
    _memcpy(i14 | 0, HEAP32[i24 + 20 >> 2] | 0, i18 | 0) | 0;
    HEAP8[(HEAP32[i21 >> 2] | 0) + i18 >> 0] = 0;
    i14 = (HEAP32[i21 >> 2] | 0) + i18 + 1 | 0;
    i21 = i15 + 24 | 0;
    HEAP32[i21 >> 2] = i14;
    _memcpy(i14 | 0, HEAP32[i24 + 24 >> 2] | 0, i17 | 0) | 0;
    HEAP8[(HEAP32[i21 >> 2] | 0) + i17 >> 0] = 0;
    i25 = i17;
    i26 = i21;
   } else {
    i21 = i9 + (i11 * 28 | 0) | 0;
    HEAP32[i21 + 20 >> 2] = 0;
    HEAP32[i21 + 24 >> 2] = 0;
    i25 = i16;
    i26 = i22;
   }
   i22 = (HEAP32[i26 >> 2] | 0) + i25 + 1 | 0;
   i16 = i9 + (i11 * 28 | 0) + 8 | 0;
   HEAP32[i16 >> 2] = i22;
   if (!i23) i27 = i22; else {
    _memcpy(i22 | 0, HEAP32[i19 >> 2] | 0, i23 | 0) | 0;
    i27 = HEAP32[i16 >> 2] | 0;
   }
   HEAP8[i27 + i23 >> 0] = 0;
   i16 = (HEAP32[i12 >> 2] | 0) > 0;
   i19 = i9 + (i11 * 28 | 0) | 0;
   HEAP32[i19 + 12 >> 2] = i16 ? 0 : i23;
   HEAP32[i19 + 16 >> 2] = i16 ? i23 : 0;
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
  } while (0);
  i2 = i2 + 1 | 0;
  if ((i2 | 0) >= (i4 | 0)) {
   i6 = 0;
   i5 = 30;
   break;
  }
 }
 if ((i5 | 0) == 30) return i6 | 0;
 _png_chunk_report(i1, 60818, 1);
 i6 = 1;
 return i6 | 0;
}

function __ZNSt3__2L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i9 = 0;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i6 >> 2] = i4;
 if (!(i8 & 4)) i10 = i2; else {
  i8 = HEAP32[i3 >> 2] | 0;
  i4 = i2;
  if ((i4 - i8 | 0) > 2) if ((HEAP8[i8 >> 0] | 0) == -17) if ((HEAP8[i8 + 1 >> 0] | 0) == -69) if ((HEAP8[i8 + 2 >> 0] | 0) == -65) {
   HEAP32[i3 >> 2] = i8 + 3;
   i10 = i4;
  } else i10 = i4; else i10 = i4; else i10 = i4; else i10 = i4;
 }
 i4 = i5;
 L9 : while (1) {
  i8 = HEAP32[i3 >> 2] | 0;
  i11 = i8 >>> 0 < i2 >>> 0;
  if (!i11) {
   i9 = 41;
   break;
  }
  i1 = HEAP32[i6 >> 2] | 0;
  if (i1 >>> 0 >= i5 >>> 0) {
   i9 = 41;
   break;
  }
  i12 = HEAP8[i8 >> 0] | 0;
  i13 = i12 & 255;
  if (i13 >>> 0 > i7 >>> 0) {
   i14 = 2;
   break;
  }
  do if (i12 << 24 >> 24 > -1) {
   HEAP16[i1 >> 1] = i12 & 255;
   i15 = 1;
   i16 = i8;
  } else {
   if ((i12 & 255) < 194) {
    i14 = 2;
    break L9;
   }
   if ((i12 & 255) < 224) {
    if ((i10 - i8 | 0) < 2) {
     i14 = 1;
     break L9;
    }
    i17 = HEAPU8[i8 + 1 >> 0] | 0;
    if ((i17 & 192 | 0) != 128) {
     i14 = 2;
     break L9;
    }
    i18 = i17 & 63 | i13 << 6 & 1984;
    if (i18 >>> 0 > i7 >>> 0) {
     i14 = 2;
     break L9;
    }
    HEAP16[i1 >> 1] = i18;
    i15 = 2;
    i16 = i8;
    break;
   }
   if ((i12 & 255) < 240) {
    if ((i10 - i8 | 0) < 3) {
     i14 = 1;
     break L9;
    }
    i18 = HEAP8[i8 + 1 >> 0] | 0;
    i17 = HEAP8[i8 + 2 >> 0] | 0;
    switch (i12 << 24 >> 24) {
    case -32:
     {
      if ((i18 & -32) << 24 >> 24 != -96) {
       i14 = 2;
       break L9;
      }
      break;
     }
    case -19:
     {
      if ((i18 & -32) << 24 >> 24 != -128) {
       i14 = 2;
       break L9;
      }
      break;
     }
    default:
     if ((i18 & -64) << 24 >> 24 != -128) {
      i14 = 2;
      break L9;
     }
    }
    i19 = i17 & 255;
    if ((i19 & 192 | 0) != 128) {
     i14 = 2;
     break L9;
    }
    i17 = (i18 & 63) << 6 | i13 << 12 | i19 & 63;
    if ((i17 & 65535) >>> 0 > i7 >>> 0) {
     i14 = 2;
     break L9;
    }
    HEAP16[i1 >> 1] = i17;
    i15 = 3;
    i16 = i8;
    break;
   }
   if ((i12 & 255) >= 245) {
    i14 = 2;
    break L9;
   }
   if ((i10 - i8 | 0) < 4) {
    i14 = 1;
    break L9;
   }
   i17 = HEAP8[i8 + 1 >> 0] | 0;
   i19 = HEAP8[i8 + 2 >> 0] | 0;
   i18 = HEAP8[i8 + 3 >> 0] | 0;
   switch (i12 << 24 >> 24) {
   case -16:
    {
     if ((i17 + 112 & 255) >= 48) {
      i14 = 2;
      break L9;
     }
     break;
    }
   case -12:
    {
     if ((i17 & -16) << 24 >> 24 != -128) {
      i14 = 2;
      break L9;
     }
     break;
    }
   default:
    if ((i17 & -64) << 24 >> 24 != -128) {
     i14 = 2;
     break L9;
    }
   }
   i20 = i19 & 255;
   if ((i20 & 192 | 0) != 128) {
    i14 = 2;
    break L9;
   }
   i19 = i18 & 255;
   if ((i19 & 192 | 0) != 128) {
    i14 = 2;
    break L9;
   }
   if ((i4 - i1 | 0) < 4) {
    i14 = 1;
    break L9;
   }
   i18 = i13 & 7;
   i21 = i17 & 255;
   i17 = i20 << 6;
   i22 = i19 & 63;
   if ((i21 << 12 & 258048 | i18 << 18 | i17 & 4032 | i22) >>> 0 > i7 >>> 0) {
    i14 = 2;
    break L9;
   }
   HEAP16[i1 >> 1] = i21 << 2 & 60 | i20 >>> 4 & 3 | ((i21 >>> 4 & 3 | i18 << 2) << 6) + 16320 | 55296;
   i18 = i1 + 2 | 0;
   HEAP32[i6 >> 2] = i18;
   HEAP16[i18 >> 1] = i22 | i17 & 960 | 56320;
   i15 = 4;
   i16 = HEAP32[i3 >> 2] | 0;
  } while (0);
  HEAP32[i3 >> 2] = i16 + i15;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 2;
 }
 if ((i9 | 0) == 41) i14 = i11 & 1;
 return i14 | 0;
}

function _png_set_keep_unknown_chunks(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0;
 i5 = 0;
 if (!i1) return;
 if (i2 >>> 0 > 3) {
  _png_app_error(i1, 65469);
  return;
 }
 if ((i4 | 0) < 1) {
  HEAP32[i1 + 688 >> 2] = i2;
  if (!i4) return; else {
   i6 = 17;
   i7 = 65554;
  }
 } else if (!i3) {
  _png_app_error(i1, 65511);
  return;
 } else {
  i6 = i4;
  i7 = i3;
 }
 i3 = i1 + 692 | 0;
 i4 = i1 + 696 | 0;
 i8 = HEAP32[i4 >> 2] | 0;
 i9 = (i8 | 0) == 0 ? 0 : HEAP32[i3 >> 2] | 0;
 i10 = i9 + i6 | 0;
 if (i10 >>> 0 > 858993459) {
  _png_app_error(i1, 65639);
  return;
 }
 i11 = (i2 | 0) == 0;
 if (i11) if (!i9) {
  i12 = 0;
  i13 = 0;
  i5 = 36;
 } else {
  i14 = i8;
  i5 = 14;
 } else {
  i8 = _png_malloc(i1, i10 * 5 | 0) | 0;
  if (!i9) {
   i14 = i8;
   i5 = 14;
  } else {
   _memcpy(i8 | 0, HEAP32[i4 >> 2] | 0, i9 * 5 | 0) | 0;
   i14 = i8;
   i5 = 14;
  }
 }
 do if ((i5 | 0) == 14) if (!i14) {
  i12 = 0;
  i13 = 0;
  i5 = 36;
 } else {
  i8 = i2 & 255;
  if (i11) {
   i10 = (i9 | 0) == 0;
   i15 = 0;
   while (1) {
    i16 = i7 + (i15 * 5 | 0) | 0;
    L30 : do if (!i10) {
     i17 = i14;
     i18 = 0;
     while (1) {
      if (!(_memcmp(i17, i16, 4) | 0)) break;
      i18 = i18 + 1 | 0;
      if (i18 >>> 0 >= i9 >>> 0) break L30; else i17 = i17 + 5 | 0;
     }
     HEAP8[i17 + 4 >> 0] = i8;
    } while (0);
    i15 = i15 + 1 | 0;
    if ((i15 | 0) == (i6 | 0)) {
     i19 = i9;
     break;
    }
   }
  } else {
   i15 = i9;
   i10 = 0;
   while (1) {
    i16 = i7 + (i10 * 5 | 0) | 0;
    L38 : do if (!i15) {
     i20 = i14;
     i5 = 26;
    } else {
     i18 = i14;
     i21 = 0;
     while (1) {
      if (!(_memcmp(i18, i16, 4) | 0)) {
       i22 = i15;
       i23 = i18;
       break L38;
      }
      i21 = i21 + 1 | 0;
      i24 = i18 + 5 | 0;
      if (i21 >>> 0 >= i15 >>> 0) {
       i20 = i24;
       i5 = 26;
       break;
      } else i18 = i24;
     }
    } while (0);
    if ((i5 | 0) == 26) {
     i5 = 0;
     i18 = HEAPU8[i16 >> 0] | HEAPU8[i16 + 1 >> 0] << 8 | HEAPU8[i16 + 2 >> 0] << 16 | HEAPU8[i16 + 3 >> 0] << 24;
     HEAP8[i20 >> 0] = i18;
     HEAP8[i20 + 1 >> 0] = i18 >> 8;
     HEAP8[i20 + 2 >> 0] = i18 >> 16;
     HEAP8[i20 + 3 >> 0] = i18 >> 24;
     i22 = i15 + 1 | 0;
     i23 = i20;
    }
    HEAP8[i23 + 4 >> 0] = i8;
    i10 = i10 + 1 | 0;
    if ((i10 | 0) == (i6 | 0)) {
     i19 = i22;
     break;
    } else i15 = i22;
   }
  }
  if (i19 | 0) {
   i15 = i14;
   i10 = i14;
   i8 = 0;
   i18 = 0;
   while (1) {
    if (!(HEAP8[i10 + 4 >> 0] | 0)) {
     i25 = i15;
     i26 = i8;
    } else {
     if ((i15 | 0) != (i10 | 0)) {
      HEAP8[i15 >> 0] = HEAP8[i10 >> 0] | 0;
      HEAP8[i15 + 1 >> 0] = HEAP8[i10 + 1 >> 0] | 0;
      HEAP8[i15 + 2 >> 0] = HEAP8[i10 + 2 >> 0] | 0;
      HEAP8[i15 + 3 >> 0] = HEAP8[i10 + 3 >> 0] | 0;
      HEAP8[i15 + 4 >> 0] = HEAP8[i10 + 4 >> 0] | 0;
     }
     i25 = i15 + 5 | 0;
     i26 = i8 + 1 | 0;
    }
    i18 = i18 + 1 | 0;
    if ((i18 | 0) == (i19 | 0)) break; else {
     i15 = i25;
     i10 = i10 + 5 | 0;
     i8 = i26;
    }
   }
   if (i26 | 0) {
    i12 = i14;
    i13 = i26;
    i5 = 36;
    break;
   }
  }
  if ((HEAP32[i4 >> 2] | 0) == (i14 | 0)) {
   i27 = 0;
   i28 = 0;
   i29 = i14;
  } else {
   _png_free(i1, i14);
   i12 = 0;
   i13 = 0;
   i5 = 36;
  }
 } while (0);
 if ((i5 | 0) == 36) {
  i27 = i12;
  i28 = i13;
  i29 = HEAP32[i4 >> 2] | 0;
 }
 HEAP32[i3 >> 2] = i28;
 if ((i29 | 0) == (i27 | 0)) return;
 if (i29 | 0) _png_free(i1, i29);
 HEAP32[i4 >> 2] = i27;
 return;
}

function __ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0;
 i1 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 576 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(576);
 i9 = i8 + 424 | 0;
 i10 = i8;
 i11 = i8 + 24 | 0;
 i12 = i8 + 16 | 0;
 i13 = i8 + 12 | 0;
 i14 = i8 + 8 | 0;
 i15 = i8 + 564 | 0;
 i16 = i8 + 4 | 0;
 i17 = i8 + 464 | 0;
 HEAP32[i12 >> 2] = i11;
 i18 = i12 + 4 | 0;
 HEAP32[i18 >> 2] = 130;
 __ZNKSt3__28ios_base6getlocEv(i14, i5);
 i19 = __ZNKSt3__26locale9use_facetERNS0_2idE(i14, 5845220) | 0;
 HEAP8[i15 >> 0] = 0;
 HEAP32[i16 >> 2] = HEAP32[i3 >> 2];
 i20 = HEAP32[i5 + 4 >> 2] | 0;
 HEAP32[i9 >> 2] = HEAP32[i16 >> 2];
 if (__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_(i2, i9, i4, i14, i20, i6, i15, i19, i12, i13, i11 + 400 | 0) | 0) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i19 >> 2] | 0) + 48 >> 2] & 7](i19, 71877, 71887, i9) | 0;
  i19 = HEAP32[i13 >> 2] | 0;
  i11 = HEAP32[i12 >> 2] | 0;
  i20 = i19 - i11 | 0;
  i4 = i11;
  i11 = i19;
  if ((i20 | 0) > 392) {
   i19 = _malloc((i20 >>> 2) + 2 | 0) | 0;
   if (!i19) __ZSt17__throw_bad_allocv(); else {
    i21 = i19;
    i22 = i19;
   }
  } else {
   i21 = i17;
   i22 = 0;
  }
  if (!(HEAP8[i15 >> 0] | 0)) i23 = i21; else {
   HEAP8[i21 >> 0] = 45;
   i23 = i21 + 1 | 0;
  }
  i21 = i9 + 40 | 0;
  i15 = i9;
  i19 = i4;
  i4 = i23;
  i23 = i11;
  while (1) {
   if (i19 >>> 0 >= i23 >>> 0) break;
   i11 = HEAP32[i19 >> 2] | 0;
   i20 = i9;
   while (1) {
    if ((i20 | 0) == (i21 | 0)) {
     i24 = i21;
     break;
    }
    if ((HEAP32[i20 >> 2] | 0) == (i11 | 0)) {
     i24 = i20;
     break;
    }
    i20 = i20 + 4 | 0;
   }
   HEAP8[i4 >> 0] = HEAP8[71877 + (i24 - i15 >> 2) >> 0] | 0;
   i19 = i19 + 4 | 0;
   i4 = i4 + 1 | 0;
   i23 = HEAP32[i13 >> 2] | 0;
  }
  HEAP8[i4 >> 0] = 0;
  HEAP32[i10 >> 2] = i7;
  if ((_sscanf(i17, 71778, i10) | 0) != 1) __ZNSt3__221__throw_runtime_errorEPKc(0);
  if (i22 | 0) _free(i22);
 }
 i22 = HEAP32[i2 >> 2] | 0;
 do if (!i22) i25 = 1; else {
  i10 = HEAP32[i22 + 12 >> 2] | 0;
  if ((i10 | 0) == (HEAP32[i22 + 16 >> 2] | 0)) i26 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i22 >> 2] | 0) + 36 >> 2] & 127](i22) | 0; else i26 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i10 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i26, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i2 >> 2] = 0;
   i25 = 1;
   break;
  } else {
   i25 = (HEAP32[i2 >> 2] | 0) == 0;
   break;
  }
 } while (0);
 i26 = HEAP32[i3 >> 2] | 0;
 do if (!i26) i1 = 32; else {
  i22 = HEAP32[i26 + 12 >> 2] | 0;
  if ((i22 | 0) == (HEAP32[i26 + 16 >> 2] | 0)) i27 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i26 >> 2] | 0) + 36 >> 2] & 127](i26) | 0; else i27 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i22 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i27, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i3 >> 2] = 0;
   i1 = 32;
   break;
  } else if (i25) break; else {
   i1 = 34;
   break;
  }
 } while (0);
 if ((i1 | 0) == 32) if (i25) i1 = 34;
 if ((i1 | 0) == 34) HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 2;
 i6 = HEAP32[i2 >> 2] | 0;
 __ZNSt3__26localeD2Ev(i14);
 i14 = HEAP32[i12 >> 2] | 0;
 HEAP32[i12 >> 2] = 0;
 if (i14 | 0) FUNCTION_TABLE_vi[HEAP32[i18 >> 2] & 255](i14);
 STACKTOP = i8;
 return i6 | 0;
}

function __ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0;
 i1 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 i9 = i8 + 24 | 0;
 i10 = i8;
 i11 = i8 + 140 | 0;
 i12 = i8 + 16 | 0;
 i13 = i8 + 12 | 0;
 i14 = i8 + 8 | 0;
 i15 = i8 + 136 | 0;
 i16 = i8 + 4 | 0;
 i17 = i8 + 36 | 0;
 HEAP32[i12 >> 2] = i11;
 i18 = i12 + 4 | 0;
 HEAP32[i18 >> 2] = 130;
 __ZNKSt3__28ios_base6getlocEv(i14, i5);
 i19 = __ZNKSt3__26locale9use_facetERNS0_2idE(i14, 5845188) | 0;
 HEAP8[i15 >> 0] = 0;
 HEAP32[i16 >> 2] = HEAP32[i3 >> 2];
 i20 = HEAP32[i5 + 4 >> 2] | 0;
 HEAP32[i9 >> 2] = HEAP32[i16 >> 2];
 if (__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_(i2, i9, i4, i14, i20, i6, i15, i19, i12, i13, i11 + 100 | 0) | 0) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i19 >> 2] | 0) + 32 >> 2] & 7](i19, 71767, 71777, i9) | 0;
  i19 = HEAP32[i13 >> 2] | 0;
  i11 = HEAP32[i12 >> 2] | 0;
  i20 = i19 - i11 | 0;
  i4 = i11;
  i11 = i19;
  if ((i20 | 0) > 98) {
   i19 = _malloc(i20 + 2 | 0) | 0;
   if (!i19) __ZSt17__throw_bad_allocv(); else {
    i21 = i19;
    i22 = i19;
   }
  } else {
   i21 = i17;
   i22 = 0;
  }
  if (!(HEAP8[i15 >> 0] | 0)) i23 = i21; else {
   HEAP8[i21 >> 0] = 45;
   i23 = i21 + 1 | 0;
  }
  i21 = i9 + 10 | 0;
  i15 = i9;
  i19 = i4;
  i4 = i23;
  i23 = i11;
  while (1) {
   if (i19 >>> 0 >= i23 >>> 0) break;
   i11 = HEAP8[i19 >> 0] | 0;
   i20 = i9;
   while (1) {
    if ((i20 | 0) == (i21 | 0)) {
     i24 = i21;
     break;
    }
    if ((HEAP8[i20 >> 0] | 0) == i11 << 24 >> 24) {
     i24 = i20;
     break;
    }
    i20 = i20 + 1 | 0;
   }
   HEAP8[i4 >> 0] = HEAP8[71767 + (i24 - i15) >> 0] | 0;
   i19 = i19 + 1 | 0;
   i4 = i4 + 1 | 0;
   i23 = HEAP32[i13 >> 2] | 0;
  }
  HEAP8[i4 >> 0] = 0;
  HEAP32[i10 >> 2] = i7;
  if ((_sscanf(i17, 71778, i10) | 0) != 1) __ZNSt3__221__throw_runtime_errorEPKc(0);
  if (i22 | 0) _free(i22);
 }
 i22 = HEAP32[i2 >> 2] | 0;
 do if (!i22) i25 = 1; else {
  i10 = HEAP32[i22 + 12 >> 2] | 0;
  if ((i10 | 0) == (HEAP32[i22 + 16 >> 2] | 0)) i26 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i22 >> 2] | 0) + 36 >> 2] & 127](i22) | 0; else i26 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i10 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i26, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i2 >> 2] = 0;
   i25 = 1;
   break;
  } else {
   i25 = (HEAP32[i2 >> 2] | 0) == 0;
   break;
  }
 } while (0);
 i26 = HEAP32[i3 >> 2] | 0;
 do if (!i26) i1 = 32; else {
  i22 = HEAP32[i26 + 12 >> 2] | 0;
  if ((i22 | 0) == (HEAP32[i26 + 16 >> 2] | 0)) i27 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i26 >> 2] | 0) + 36 >> 2] & 127](i26) | 0; else i27 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i22 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i27, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i3 >> 2] = 0;
   i1 = 32;
   break;
  } else if (i25) break; else {
   i1 = 34;
   break;
  }
 } while (0);
 if ((i1 | 0) == 32) if (i25) i1 = 34;
 if ((i1 | 0) == 34) HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 2;
 i6 = HEAP32[i2 >> 2] | 0;
 __ZNSt3__26localeD2Ev(i14);
 i14 = HEAP32[i12 >> 2] | 0;
 HEAP32[i12 >> 2] = 0;
 if (i14 | 0) FUNCTION_TABLE_vi[HEAP32[i18 >> 2] & 255](i14);
 STACKTOP = i8;
 return i6 | 0;
}

function __ZN11RenderQueue7setMeshEi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0;
 i3 = 0;
 i4 = __ZN11MeshManager7getMeshEi(__ZN11MeshManager3getEv() | 0, i2) | 0;
 i2 = i4;
 i5 = i1 + 116 | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 i7 = i6 + 4 | 0;
 i8 = HEAP32[i7 >> 2] | 0;
 do if (!i8) {
  i9 = i7;
  i10 = i7;
 } else {
  i11 = i6 + 4 | 0;
  i12 = i8;
  while (1) {
   i13 = HEAP32[i12 + 16 >> 2] | 0;
   if (i4 >>> 0 < i13 >>> 0) {
    i14 = HEAP32[i12 >> 2] | 0;
    if (!i14) {
     i3 = 6;
     break;
    } else {
     i15 = i12;
     i16 = i14;
    }
   } else {
    if (i13 >>> 0 >= i4 >>> 0) {
     i3 = 10;
     break;
    }
    i17 = i12 + 4 | 0;
    i13 = HEAP32[i17 >> 2] | 0;
    if (!i13) {
     i3 = 9;
     break;
    } else {
     i15 = i17;
     i16 = i13;
    }
   }
   i11 = i15;
   i12 = i16;
  }
  if ((i3 | 0) == 6) {
   i9 = i12;
   i10 = i12;
   break;
  } else if ((i3 | 0) == 9) {
   i9 = i12;
   i10 = i17;
   break;
  } else if ((i3 | 0) == 10) {
   i9 = i12;
   i10 = i11;
   break;
  }
 } while (0);
 if (!(HEAP32[i10 >> 2] | 0)) {
  i17 = __Znwj(32) | 0;
  HEAP32[i17 + 16 >> 2] = i2;
  i16 = i17 + 20 | 0;
  HEAP32[i16 >> 2] = i16;
  HEAP32[i17 + 24 >> 2] = i16;
  HEAP32[i17 + 28 >> 2] = 0;
  HEAP32[i17 >> 2] = 0;
  HEAP32[i17 + 4 >> 2] = 0;
  HEAP32[i17 + 8 >> 2] = i9;
  HEAP32[i10 >> 2] = i17;
  i9 = HEAP32[HEAP32[i6 >> 2] >> 2] | 0;
  if (!i9) i18 = i17; else {
   HEAP32[i6 >> 2] = i9;
   i18 = HEAP32[i10 >> 2] | 0;
  }
  __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[i6 + 4 >> 2] | 0, i18);
  i18 = i6 + 8 | 0;
  HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + 1;
  i18 = HEAP32[i5 >> 2] | 0;
  i19 = i18;
  i20 = HEAP32[i18 + 4 >> 2] | 0;
 } else {
  i19 = i6;
  i20 = i8;
 }
 i8 = i19 + 4 | 0;
 do if (!i20) {
  i21 = i8;
  i22 = i8;
 } else {
  i6 = i19 + 4 | 0;
  i18 = i20;
  while (1) {
   i5 = HEAP32[i18 + 16 >> 2] | 0;
   if (i4 >>> 0 < i5 >>> 0) {
    i10 = HEAP32[i18 >> 2] | 0;
    if (!i10) {
     i3 = 21;
     break;
    } else {
     i23 = i18;
     i24 = i10;
    }
   } else {
    if (i5 >>> 0 >= i4 >>> 0) {
     i3 = 25;
     break;
    }
    i25 = i18 + 4 | 0;
    i5 = HEAP32[i25 >> 2] | 0;
    if (!i5) {
     i3 = 24;
     break;
    } else {
     i23 = i25;
     i24 = i5;
    }
   }
   i6 = i23;
   i18 = i24;
  }
  if ((i3 | 0) == 21) {
   i21 = i18;
   i22 = i18;
   break;
  } else if ((i3 | 0) == 24) {
   i21 = i18;
   i22 = i25;
   break;
  } else if ((i3 | 0) == 25) {
   i21 = i18;
   i22 = i6;
   break;
  }
 } while (0);
 i3 = HEAP32[i22 >> 2] | 0;
 if (i3 | 0) {
  i26 = i3;
  i27 = i26 + 20 | 0;
  i28 = i1 + 120 | 0;
  HEAP32[i28 >> 2] = i27;
  i29 = i1 + 76 | 0;
  HEAP8[i29 >> 0] = 0;
  i30 = i1 + 92 | 0;
  HEAP8[i30 >> 0] = 0;
  return;
 }
 i3 = __Znwj(32) | 0;
 HEAP32[i3 + 16 >> 2] = i2;
 i2 = i3 + 20 | 0;
 HEAP32[i2 >> 2] = i2;
 HEAP32[i3 + 24 >> 2] = i2;
 HEAP32[i3 + 28 >> 2] = 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = i21;
 HEAP32[i22 >> 2] = i3;
 i21 = HEAP32[HEAP32[i19 >> 2] >> 2] | 0;
 if (!i21) i31 = i3; else {
  HEAP32[i19 >> 2] = i21;
  i31 = HEAP32[i22 >> 2] | 0;
 }
 __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[i19 + 4 >> 2] | 0, i31);
 i31 = i19 + 8 | 0;
 HEAP32[i31 >> 2] = (HEAP32[i31 >> 2] | 0) + 1;
 i26 = i3;
 i27 = i26 + 20 | 0;
 i28 = i1 + 120 | 0;
 HEAP32[i28 >> 2] = i27;
 i29 = i1 + 76 | 0;
 HEAP8[i29 >> 0] = 0;
 i30 = i1 + 92 | 0;
 HEAP8[i30 >> 0] = 0;
 return;
}

function __ZL27stbtt__sort_edges_quicksortP11stbtt__edgei(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, f7 = f0, i8 = 0, f9 = f0, f10 = f0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i4 = i3;
 if ((i2 | 0) <= 12) {
  STACKTOP = i3;
  return;
 }
 i5 = i2;
 i2 = i1;
 while (1) {
  i1 = i5 >>> 1;
  i6 = i2 + 4 | 0;
  f7 = Math_fround(HEAPF32[i6 >> 2]);
  i8 = i2 + (i1 * 20 | 0) | 0;
  i1 = i8 | 0;
  f9 = Math_fround(HEAPF32[i8 + 4 >> 2]);
  i8 = i5 + -1 | 0;
  f10 = Math_fround(HEAPF32[i2 + (i8 * 20 | 0) + 4 >> 2]);
  i11 = f9 < f10;
  i12 = i2 + ((f7 < f10 ^ i11 ? i8 : 0) * 20 | 0) | 0;
  if (f7 < f9 ^ i11) {
   HEAP32[i4 >> 2] = HEAP32[i12 >> 2];
   HEAP32[i4 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
   HEAP32[i4 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
   HEAP32[i4 + 12 >> 2] = HEAP32[i12 + 12 >> 2];
   HEAP32[i4 + 16 >> 2] = HEAP32[i12 + 16 >> 2];
   HEAP32[i12 >> 2] = HEAP32[i1 >> 2];
   HEAP32[i12 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
   HEAP32[i12 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
   HEAP32[i12 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
   HEAP32[i12 + 16 >> 2] = HEAP32[i1 + 16 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
   HEAP32[i1 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
   HEAP32[i1 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
   HEAP32[i1 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
   HEAP32[i1 + 16 >> 2] = HEAP32[i4 + 16 >> 2];
  };
  HEAP32[i4 >> 2] = HEAP32[i2 >> 2];
  HEAP32[i4 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
  HEAP32[i4 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
  HEAP32[i4 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
  HEAP32[i4 + 16 >> 2] = HEAP32[i2 + 16 >> 2];
  HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i2 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
  HEAP32[i2 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
  HEAP32[i2 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
  HEAP32[i2 + 16 >> 2] = HEAP32[i1 + 16 >> 2];
  HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
  HEAP32[i1 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
  HEAP32[i1 + 16 >> 2] = HEAP32[i4 + 16 >> 2];
  i1 = i8;
  i8 = 1;
  while (1) {
   f9 = Math_fround(HEAPF32[i6 >> 2]);
   i13 = i8;
   while (1) {
    i14 = i13 + 1 | 0;
    if (Math_fround(HEAPF32[i2 + (i13 * 20 | 0) + 4 >> 2]) < f9) i13 = i14; else {
     i15 = i1;
     break;
    }
   }
   while (1) {
    i16 = i15 + -1 | 0;
    if (f9 < Math_fround(HEAPF32[i2 + (i15 * 20 | 0) + 4 >> 2])) i15 = i16; else break;
   }
   i17 = i2 + (i13 * 20 | 0) | 0;
   if ((i13 | 0) >= (i15 | 0)) break;
   i12 = i2 + (i15 * 20 | 0) | 0;
   HEAP32[i4 >> 2] = HEAP32[i17 >> 2];
   HEAP32[i4 + 4 >> 2] = HEAP32[i17 + 4 >> 2];
   HEAP32[i4 + 8 >> 2] = HEAP32[i17 + 8 >> 2];
   HEAP32[i4 + 12 >> 2] = HEAP32[i17 + 12 >> 2];
   HEAP32[i4 + 16 >> 2] = HEAP32[i17 + 16 >> 2];
   HEAP32[i17 >> 2] = HEAP32[i12 >> 2];
   HEAP32[i17 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
   HEAP32[i17 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
   HEAP32[i17 + 12 >> 2] = HEAP32[i12 + 12 >> 2];
   HEAP32[i17 + 16 >> 2] = HEAP32[i12 + 16 >> 2];
   HEAP32[i12 >> 2] = HEAP32[i4 >> 2];
   HEAP32[i12 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
   HEAP32[i12 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
   HEAP32[i12 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
   HEAP32[i12 + 16 >> 2] = HEAP32[i4 + 16 >> 2];
   i1 = i16;
   i8 = i14;
  }
  i8 = i5 - i13 | 0;
  if ((i15 | 0) < (i8 | 0)) {
   __ZL27stbtt__sort_edges_quicksortP11stbtt__edgei(i2, i15);
   i18 = i17;
   i19 = i8;
  } else {
   __ZL27stbtt__sort_edges_quicksortP11stbtt__edgei(i17, i8);
   i18 = i2;
   i19 = i15;
  }
  if ((i19 | 0) > 12) {
   i5 = i19;
   i2 = i18;
  } else break;
 }
 STACKTOP = i3;
 return;
}

function __ZL20stbtt__dict_get_intsP10stbtt__bufiiPj(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0;
 i5 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i6;
 i8 = i1 + 8 | 0;
 i9 = HEAP32[i8 >> 2] | 0;
 if ((i9 | 0) < 0) ___assert_fail(50765, 50789, 1116, 50855);
 i10 = i1 + 4 | 0;
 HEAP32[i10 >> 2] = 0;
 i11 = i9;
 i9 = 0;
 L4 : while (1) {
  if ((i9 | 0) < (i11 | 0)) {
   i12 = i9;
   i13 = i11;
  } else {
   i5 = 25;
   break;
  }
  while (1) {
   i14 = HEAP32[i1 >> 2] | 0;
   i15 = HEAP8[i14 + i12 >> 0] | 0;
   if ((i15 & 255) <= 27) {
    i16 = i12;
    i17 = i13;
    break;
   }
   if ((i12 | 0) >= (i13 | 0)) {
    i5 = 7;
    break L4;
   }
   L10 : do if (i15 << 24 >> 24 == 30) {
    if ((i12 | 0) < -1) {
     i5 = 10;
     break L4;
    }
    i18 = i12 + 1 | 0;
    HEAP32[i10 >> 2] = i18;
    i19 = i18;
    while (1) {
     if ((i19 | 0) >= (i13 | 0)) {
      i20 = i19;
      i21 = i13;
      break L10;
     }
     i18 = i19 + 1 | 0;
     HEAP32[i10 >> 2] = i18;
     i22 = HEAPU8[i14 + i19 >> 0] | 0;
     if ((i22 & 15 | 0) == 15 | (i22 & 240 | 0) == 240) {
      i20 = i18;
      i21 = i13;
      break;
     } else i19 = i18;
    }
   } else {
    __ZL14stbtt__cff_intP10stbtt__buf(i1) | 0;
    i20 = HEAP32[i10 >> 2] | 0;
    i21 = HEAP32[i8 >> 2] | 0;
   } while (0);
   if ((i20 | 0) < (i21 | 0)) {
    i12 = i20;
    i13 = i21;
   } else {
    i16 = i20;
    i17 = i21;
    break;
   }
  }
  if ((i16 | 0) < (i17 | 0)) {
   i14 = i16 + 1 | 0;
   i15 = HEAP32[i1 >> 2] | 0;
   HEAP32[i10 >> 2] = i14;
   i19 = HEAP8[i15 + i16 >> 0] | 0;
   i18 = i19 & 255;
   if (i19 << 24 >> 24 == 12) {
    i19 = i16 + 2 | 0;
    if ((i14 | 0) < (i17 | 0)) {
     HEAP32[i10 >> 2] = i19;
     i23 = HEAP8[i15 + i14 >> 0] | 0;
     i24 = i19;
    } else {
     i23 = 0;
     i24 = i14;
    }
    i25 = i23 & 255 | 256;
    i26 = i24;
   } else {
    i25 = i18;
    i26 = i14;
   }
  } else {
   i25 = 0;
   i26 = i16;
  }
  if ((i25 | 0) == (i2 | 0)) {
   i5 = 22;
   break;
  } else {
   i11 = i17;
   i9 = i26;
  }
 }
 if ((i5 | 0) == 7) ___assert_fail(55297, 50789, 1185, 55306); else if ((i5 | 0) == 10) ___assert_fail(50765, 50789, 1116, 50855); else if ((i5 | 0) == 22) {
  i26 = i16 - i9 | 0;
  HEAP32[i7 >> 2] = 0;
  i16 = i7 + 8 | 0;
  HEAP32[i16 >> 2] = 0;
  i2 = i7 + 4 | 0;
  HEAP32[i2 >> 2] = 0;
  if ((i26 | i9 | 0) < 0) {
   i27 = i2;
   i28 = 0;
  } else if ((i17 | 0) < (i9 | 0) | (i17 - i9 | 0) < (i26 | 0)) {
   i27 = i2;
   i28 = 0;
  } else {
   HEAP32[i7 >> 2] = (HEAP32[i1 >> 2] | 0) + i9;
   HEAP32[i16 >> 2] = i26;
   i27 = i2;
   i28 = i26;
  }
 } else if ((i5 | 0) == 25) {
  HEAP32[i7 >> 2] = 0;
  i26 = i7 + 8 | 0;
  HEAP32[i26 >> 2] = 0;
  i2 = i7 + 4 | 0;
  HEAP32[i2 >> 2] = 0;
  if ((i11 | 0) < 0) {
   i27 = i2;
   i28 = 0;
  } else {
   HEAP32[i7 >> 2] = HEAP32[i1 >> 2];
   HEAP32[i26 >> 2] = 0;
   i27 = i2;
   i28 = 0;
  }
 }
 if ((i3 | 0) <= 0) {
  STACKTOP = i6;
  return;
 }
 i2 = i7 + 8 | 0;
 if ((i28 | 0) > 0) i29 = 0; else {
  STACKTOP = i6;
  return;
 }
 while (1) {
  i28 = __ZL14stbtt__cff_intP10stbtt__buf(i7) | 0;
  HEAP32[i4 + (i29 << 2) >> 2] = i28;
  i29 = i29 + 1 | 0;
  if ((i29 | 0) >= (i3 | 0)) {
   i5 = 31;
   break;
  }
  if ((HEAP32[i27 >> 2] | 0) >= (HEAP32[i2 >> 2] | 0)) {
   i5 = 31;
   break;
  }
 }
 if ((i5 | 0) == 31) {
  STACKTOP = i6;
  return;
 }
}

function __ZN10ImDrawList5ClearEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i2 = i1 + 4 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if ((i3 | 0) < 0) {
  i4 = ((i3 | 0) / 2 | 0) + i3 | 0;
  i5 = (i4 | 0) > 0 ? i4 : 0;
  if ((i3 | 0) < (i5 | 0)) {
   i3 = __ZN5ImGui8MemAllocEj(i5 << 5) | 0;
   i4 = i1 + 8 | 0;
   i6 = HEAP32[i4 >> 2] | 0;
   if (!i6) i7 = i4; else {
    _memcpy(i3 | 0, i6 | 0, HEAP32[i1 >> 2] << 5 | 0) | 0;
    __ZN5ImGui7MemFreeEPv(HEAP32[i4 >> 2] | 0);
    i7 = i4;
   }
   HEAP32[i7 >> 2] = i3;
   HEAP32[i2 >> 2] = i5;
  }
 }
 HEAP32[i1 >> 2] = 0;
 i5 = i1 + 12 | 0;
 i2 = i1 + 16 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if ((i3 | 0) < 0) {
  i7 = ((i3 | 0) / 2 | 0) + i3 | 0;
  i4 = (i7 | 0) > 0 ? i7 : 0;
  if ((i3 | 0) < (i4 | 0)) {
   i3 = __ZN5ImGui8MemAllocEj(i4 << 1) | 0;
   i7 = i1 + 20 | 0;
   i6 = HEAP32[i7 >> 2] | 0;
   if (!i6) i8 = i7; else {
    _memcpy(i3 | 0, i6 | 0, HEAP32[i5 >> 2] << 1 | 0) | 0;
    __ZN5ImGui7MemFreeEPv(HEAP32[i7 >> 2] | 0);
    i8 = i7;
   }
   HEAP32[i8 >> 2] = i3;
   HEAP32[i2 >> 2] = i4;
  }
 }
 HEAP32[i5 >> 2] = 0;
 i5 = i1 + 24 | 0;
 i4 = i1 + 28 | 0;
 i2 = HEAP32[i4 >> 2] | 0;
 if ((i2 | 0) < 0) {
  i3 = ((i2 | 0) / 2 | 0) + i2 | 0;
  i8 = (i3 | 0) > 0 ? i3 : 0;
  if ((i2 | 0) < (i8 | 0)) {
   i2 = __ZN5ImGui8MemAllocEj(i8 * 20 | 0) | 0;
   i3 = i1 + 32 | 0;
   i7 = HEAP32[i3 >> 2] | 0;
   if (!i7) i9 = i3; else {
    _memcpy(i2 | 0, i7 | 0, (HEAP32[i5 >> 2] | 0) * 20 | 0) | 0;
    __ZN5ImGui7MemFreeEPv(HEAP32[i3 >> 2] | 0);
    i9 = i3;
   }
   HEAP32[i9 >> 2] = i2;
   HEAP32[i4 >> 2] = i8;
  }
 }
 HEAP32[i5 >> 2] = 0;
 HEAP32[i1 + 36 >> 2] = 3;
 HEAP32[i1 + 48 >> 2] = 0;
 HEAP32[i1 + 52 >> 2] = 0;
 HEAP32[i1 + 56 >> 2] = 0;
 i5 = i1 + 60 | 0;
 i8 = i1 + 64 | 0;
 i4 = HEAP32[i8 >> 2] | 0;
 if ((i4 | 0) < 0) {
  i2 = ((i4 | 0) / 2 | 0) + i4 | 0;
  i9 = (i2 | 0) > 0 ? i2 : 0;
  if ((i4 | 0) < (i9 | 0)) {
   i4 = __ZN5ImGui8MemAllocEj(i9 << 4) | 0;
   i2 = i1 + 68 | 0;
   i3 = HEAP32[i2 >> 2] | 0;
   if (!i3) i10 = i2; else {
    _memcpy(i4 | 0, i3 | 0, HEAP32[i5 >> 2] << 4 | 0) | 0;
    __ZN5ImGui7MemFreeEPv(HEAP32[i2 >> 2] | 0);
    i10 = i2;
   }
   HEAP32[i10 >> 2] = i4;
   HEAP32[i8 >> 2] = i9;
  }
 }
 HEAP32[i5 >> 2] = 0;
 i5 = i1 + 72 | 0;
 i9 = i1 + 76 | 0;
 i8 = HEAP32[i9 >> 2] | 0;
 if ((i8 | 0) < 0) {
  i4 = ((i8 | 0) / 2 | 0) + i8 | 0;
  i10 = (i4 | 0) > 0 ? i4 : 0;
  if ((i8 | 0) < (i10 | 0)) {
   i8 = __ZN5ImGui8MemAllocEj(i10 << 2) | 0;
   i4 = i1 + 80 | 0;
   i2 = HEAP32[i4 >> 2] | 0;
   if (!i2) i11 = i4; else {
    _memcpy(i8 | 0, i2 | 0, HEAP32[i5 >> 2] << 2 | 0) | 0;
    __ZN5ImGui7MemFreeEPv(HEAP32[i4 >> 2] | 0);
    i11 = i4;
   }
   HEAP32[i11 >> 2] = i8;
   HEAP32[i9 >> 2] = i10;
  }
 }
 HEAP32[i5 >> 2] = 0;
 i5 = i1 + 84 | 0;
 i10 = i1 + 88 | 0;
 i9 = HEAP32[i10 >> 2] | 0;
 if ((i9 | 0) >= 0) {
  HEAP32[i5 >> 2] = 0;
  i12 = i1 + 96 | 0;
  HEAP32[i12 >> 2] = 0;
  i13 = i1 + 100 | 0;
  HEAP32[i13 >> 2] = 1;
  return;
 }
 i8 = ((i9 | 0) / 2 | 0) + i9 | 0;
 i11 = (i8 | 0) > 0 ? i8 : 0;
 if ((i9 | 0) >= (i11 | 0)) {
  HEAP32[i5 >> 2] = 0;
  i12 = i1 + 96 | 0;
  HEAP32[i12 >> 2] = 0;
  i13 = i1 + 100 | 0;
  HEAP32[i13 >> 2] = 1;
  return;
 }
 i9 = __ZN5ImGui8MemAllocEj(i11 << 3) | 0;
 i8 = i1 + 92 | 0;
 i4 = HEAP32[i8 >> 2] | 0;
 if (!i4) i14 = i8; else {
  _memcpy(i9 | 0, i4 | 0, HEAP32[i5 >> 2] << 3 | 0) | 0;
  __ZN5ImGui7MemFreeEPv(HEAP32[i8 >> 2] | 0);
  i14 = i8;
 }
 HEAP32[i14 >> 2] = i9;
 HEAP32[i10 >> 2] = i11;
 HEAP32[i5 >> 2] = 0;
 i12 = i1 + 96 | 0;
 HEAP32[i12 >> 2] = 0;
 i13 = i1 + 100 | 0;
 HEAP32[i13 >> 2] = 1;
 return;
}

function __ZL21stbtt__csctx_rmove_toP12stbtt__csctxff(i1, f2, f3) {
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 var i4 = 0, i5 = 0, f6 = f0, i7 = 0, f8 = f0, i9 = 0, f10 = f0, i11 = 0, f12 = f0, i13 = 0, i14 = 0, f15 = f0, f16 = f0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, f22 = f0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0;
 i4 = 0;
 i5 = i1 + 8 | 0;
 f6 = Math_fround(HEAPF32[i5 >> 2]);
 i7 = i1 + 16 | 0;
 f8 = Math_fround(HEAPF32[i7 >> 2]);
 i9 = i1 + 12 | 0;
 f10 = Math_fround(HEAPF32[i9 >> 2]);
 if (f6 != f8) i4 = 4; else {
  i11 = i1 + 20 | 0;
  f12 = Math_fround(HEAPF32[i11 >> 2]);
  if (f10 != f12) i4 = 4; else {
   i13 = i1;
   i14 = i11;
   f15 = f8;
   f16 = f12;
  }
 }
 if ((i4 | 0) == 4) {
  i11 = ~~f6;
  i17 = ~~f10;
  if (!(HEAP32[i1 >> 2] | 0)) {
   i18 = HEAP32[i1 + 40 >> 2] | 0;
   i19 = i1 + 44 | 0;
   i20 = HEAP32[i19 >> 2] | 0;
   i21 = i18 + (i20 * 14 | 0) | 0;
   HEAP8[i21 + 12 >> 0] = 2;
   HEAP16[i21 >> 1] = i11;
   HEAP16[i21 + 2 >> 1] = i17;
   i18 = i21 + 4 | 0;
   i21 = i18;
   HEAP16[i21 >> 1] = 0;
   HEAP16[i21 + 2 >> 1] = 0 >>> 16;
   i21 = i18 + 4 | 0;
   HEAP16[i21 >> 1] = 0;
   HEAP16[i21 + 2 >> 1] = 0 >>> 16;
   f22 = Math_fround(HEAPF32[i7 >> 2]);
   i23 = i19;
   i24 = i20;
  } else {
   i20 = i1 + 28 | 0;
   if ((HEAP32[i20 >> 2] | 0) < (i11 | 0)) i4 = 7; else if (!(HEAP32[i1 + 4 >> 2] | 0)) i4 = 7;
   if ((i4 | 0) == 7) HEAP32[i20 >> 2] = i11;
   i20 = i1 + 36 | 0;
   if ((HEAP32[i20 >> 2] | 0) < (i17 | 0)) i4 = 10; else if (!(HEAP32[i1 + 4 >> 2] | 0)) i4 = 10;
   if ((i4 | 0) == 10) HEAP32[i20 >> 2] = i17;
   i20 = i1 + 24 | 0;
   i19 = i1 + 4 | 0;
   if ((HEAP32[i20 >> 2] | 0) > (i11 | 0)) i4 = 13; else if (!(HEAP32[i19 >> 2] | 0)) i4 = 13;
   if ((i4 | 0) == 13) HEAP32[i20 >> 2] = i11;
   i11 = i1 + 32 | 0;
   if ((HEAP32[i11 >> 2] | 0) > (i17 | 0)) i4 = 16; else if (!(HEAP32[i19 >> 2] | 0)) i4 = 16;
   if ((i4 | 0) == 16) HEAP32[i11 >> 2] = i17;
   HEAP32[i19 >> 2] = 1;
   i19 = i1 + 44 | 0;
   f22 = f8;
   i23 = i19;
   i24 = HEAP32[i19 >> 2] | 0;
  }
  HEAP32[i23 >> 2] = i24 + 1;
  i24 = i1 + 20 | 0;
  i13 = i1;
  i14 = i24;
  f15 = f22;
  f16 = Math_fround(HEAPF32[i24 >> 2]);
 }
 f22 = Math_fround(f15 + f2);
 HEAPF32[i7 >> 2] = f22;
 HEAPF32[i5 >> 2] = f22;
 f2 = Math_fround(f16 + f3);
 HEAPF32[i14 >> 2] = f2;
 HEAPF32[i9 >> 2] = f2;
 i9 = ~~f22;
 i14 = ~~f2;
 if (!(HEAP32[i13 >> 2] | 0)) {
  i13 = HEAP32[i1 + 40 >> 2] | 0;
  i5 = i1 + 44 | 0;
  i7 = HEAP32[i5 >> 2] | 0;
  i24 = i13 + (i7 * 14 | 0) | 0;
  HEAP8[i24 + 12 >> 0] = 1;
  HEAP16[i24 >> 1] = i9;
  HEAP16[i24 + 2 >> 1] = i14;
  i13 = i24 + 4 | 0;
  i24 = i13;
  HEAP16[i24 >> 1] = 0;
  HEAP16[i24 + 2 >> 1] = 0 >>> 16;
  i24 = i13 + 4 | 0;
  HEAP16[i24 >> 1] = 0;
  HEAP16[i24 + 2 >> 1] = 0 >>> 16;
  i25 = i5;
  i26 = i7;
  i27 = i26 + 1 | 0;
  HEAP32[i25 >> 2] = i27;
  return;
 }
 i7 = i1 + 28 | 0;
 if ((HEAP32[i7 >> 2] | 0) < (i9 | 0)) i4 = 23; else if (!(HEAP32[i1 + 4 >> 2] | 0)) i4 = 23;
 if ((i4 | 0) == 23) HEAP32[i7 >> 2] = i9;
 i7 = i1 + 36 | 0;
 if ((HEAP32[i7 >> 2] | 0) < (i14 | 0)) i4 = 26; else if (!(HEAP32[i1 + 4 >> 2] | 0)) i4 = 26;
 if ((i4 | 0) == 26) HEAP32[i7 >> 2] = i14;
 i7 = i1 + 24 | 0;
 i5 = i1 + 4 | 0;
 if ((HEAP32[i7 >> 2] | 0) > (i9 | 0)) i4 = 29; else if (!(HEAP32[i5 >> 2] | 0)) i4 = 29;
 if ((i4 | 0) == 29) HEAP32[i7 >> 2] = i9;
 i9 = i1 + 32 | 0;
 if ((HEAP32[i9 >> 2] | 0) > (i14 | 0)) i4 = 32; else if (!(HEAP32[i5 >> 2] | 0)) i4 = 32;
 if ((i4 | 0) == 32) HEAP32[i9 >> 2] = i14;
 HEAP32[i5 >> 2] = 1;
 i5 = i1 + 44 | 0;
 i25 = i5;
 i26 = HEAP32[i5 >> 2] | 0;
 i27 = i26 + 1 | 0;
 HEAP32[i25 >> 2] = i27;
 return;
}

function _png_do_check_palette_indexes(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0;
 i3 = HEAP16[i1 + 420 >> 1] | 0;
 i4 = HEAP8[i2 + 9 >> 0] | 0;
 if (i3 << 16 >> 16 == 0 | (1 << (i4 & 255) | 0) <= (i3 & 65535 | 0)) return;
 i3 = (Math_imul(HEAP32[i2 >> 2] | 0, 0 - (HEAPU8[i2 + 11 >> 0] | 0) | 0) | 0) & 7;
 i5 = HEAP32[i1 + 384 >> 2] | 0;
 i6 = HEAP32[i2 + 4 >> 2] | 0;
 i2 = i5 + i6 | 0;
 switch (i4 << 24 >> 24) {
 case 1:
  {
   if ((i6 | 0) <= 0) return;
   i4 = i1 + 424 | 0;
   if ((HEAPU8[i2 >> 0] | 0) >>> i3 | 0) HEAP32[i4 >> 2] = 1;
   i7 = i2 + -1 | 0;
   if (i7 >>> 0 > i5 >>> 0) i8 = i7; else return;
   do {
    if (HEAP8[i8 >> 0] | 0) HEAP32[i4 >> 2] = 1;
    i8 = i8 + -1 | 0;
   } while (i8 >>> 0 > i5 >>> 0);
   return;
  }
 case 2:
  {
   if ((i6 | 0) <= 0) return;
   i8 = i1 + 424 | 0;
   i4 = (HEAPU8[i2 >> 0] | 0) >>> i3;
   i7 = i4 & 3;
   i9 = HEAP32[i8 >> 2] | 0;
   i10 = (i7 | 0) > (i9 | 0);
   i11 = i10 ? i7 : i9;
   i9 = i4 >>> 2 & 3;
   i7 = (i9 | 0) > (i11 | 0);
   i12 = i7 ? i9 : i11;
   i11 = i4 >>> 4 & 3;
   i9 = (i11 | 0) > (i12 | 0);
   i13 = i9 ? i11 : i12;
   i12 = i4 >>> 6;
   i4 = (i12 | 0) > (i13 | 0);
   i11 = i4 ? i12 : i13;
   if (i10 | i7 | i9 | i4) HEAP32[i8 >> 2] = i11;
   i4 = i2 + -1 | 0;
   if (i4 >>> 0 > i5 >>> 0) {
    i14 = i4;
    i15 = i11;
   } else return;
   while (1) {
    i11 = HEAP8[i14 >> 0] | 0;
    i4 = i11 & 3;
    if ((i15 | 0) < (i4 | 0)) {
     HEAP32[i8 >> 2] = i4;
     i16 = HEAP8[i14 >> 0] | 0;
     i17 = i4;
    } else {
     i16 = i11;
     i17 = i15;
    }
    i11 = (i16 & 255) >>> 2 & 3;
    if ((i11 | 0) > (i17 | 0)) {
     HEAP32[i8 >> 2] = i11;
     i18 = HEAP8[i14 >> 0] | 0;
     i19 = i11;
    } else {
     i18 = i16;
     i19 = i17;
    }
    i11 = (i18 & 255) >>> 4 & 3;
    if ((i11 | 0) > (i19 | 0)) {
     HEAP32[i8 >> 2] = i11;
     i20 = HEAP8[i14 >> 0] | 0;
     i21 = i11;
    } else {
     i20 = i18;
     i21 = i19;
    }
    i11 = (i20 & 255) >>> 6;
    if ((i11 | 0) > (i21 | 0)) {
     HEAP32[i8 >> 2] = i11;
     i22 = i11;
    } else i22 = i21;
    i14 = i14 + -1 | 0;
    if (i14 >>> 0 <= i5 >>> 0) break; else i15 = i22;
   }
   return;
  }
 case 4:
  {
   if ((i6 | 0) <= 0) return;
   i22 = i1 + 424 | 0;
   i15 = (HEAPU8[i2 >> 0] | 0) >>> i3;
   i3 = i15 & 15;
   i14 = HEAP32[i22 >> 2] | 0;
   i21 = (i3 | 0) > (i14 | 0);
   i8 = i21 ? i3 : i14;
   i14 = i15 >>> 4;
   i15 = (i14 | 0) > (i8 | 0);
   i3 = i15 ? i14 : i8;
   if (i21 | i15) HEAP32[i22 >> 2] = i3;
   i15 = i2 + -1 | 0;
   if (i15 >>> 0 > i5 >>> 0) {
    i23 = i15;
    i24 = i3;
   } else return;
   while (1) {
    i3 = HEAP8[i23 >> 0] | 0;
    i15 = i3 & 15;
    if ((i24 | 0) < (i15 | 0)) {
     HEAP32[i22 >> 2] = i15;
     i25 = HEAP8[i23 >> 0] | 0;
     i26 = i15;
    } else {
     i25 = i3;
     i26 = i24;
    }
    i3 = (i25 & 255) >>> 4;
    if ((i3 | 0) > (i26 | 0)) {
     HEAP32[i22 >> 2] = i3;
     i27 = i3;
    } else i27 = i26;
    i23 = i23 + -1 | 0;
    if (i23 >>> 0 <= i5 >>> 0) break; else i24 = i27;
   }
   return;
  }
 case 8:
  {
   if ((i6 | 0) <= 0) return;
   i6 = i1 + 424 | 0;
   i1 = i2;
   i2 = HEAP32[i6 >> 2] | 0;
   while (1) {
    i27 = HEAPU8[i1 >> 0] | 0;
    if ((i2 | 0) < (i27 | 0)) {
     HEAP32[i6 >> 2] = i27;
     i28 = i27;
    } else i28 = i2;
    i1 = i1 + -1 | 0;
    if (i1 >>> 0 <= i5 >>> 0) break; else i2 = i28;
   }
   return;
  }
 default:
  return;
 }
}

function __ZN7CityMap20checkUndergroundTileEii(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0;
 i4 = 0;
 i5 = HEAP32[i1 >> 2] | 0;
 i6 = i5 >>> 0 > i2 >>> 0;
 if (i6) if ((HEAP32[i1 + 4 >> 2] | 0) >>> 0 > i3 >>> 0) i7 = i1 + 128 + (i2 * 22528 | 0) + (i3 * 88 | 0) | 0; else i4 = 4; else i4 = 4;
 if ((i4 | 0) == 4) i7 = i1 + 40 | 0;
 if (HEAP32[i7 + 44 >> 2] | 0) return;
 i8 = i3 + -1 | 0;
 if (i6) {
  i6 = (HEAP32[i1 + 4 >> 2] | 0) >>> 0 > i8 >>> 0 ? i1 + 128 + (i2 * 22528 | 0) + (i8 * 88 | 0) | 0 : i1 + 40 | 0;
  i9 = i3 + 1 | 0;
  if ((HEAP32[i1 + 4 >> 2] | 0) >>> 0 > i9 >>> 0) {
   i10 = i1 + 128 + (i2 * 22528 | 0) + (i9 * 88 | 0) | 0;
   i11 = i6;
   i12 = i9;
  } else {
   i13 = i6;
   i14 = i9;
   i4 = 10;
  }
 } else {
  i13 = i1 + 40 | 0;
  i14 = i3 + 1 | 0;
  i4 = 10;
 }
 if ((i4 | 0) == 10) {
  i10 = i1 + 40 | 0;
  i11 = i13;
  i12 = i14;
 }
 i14 = i2 + 1 | 0;
 i13 = i5 >>> 0 > i14 >>> 0;
 if (i13) if ((HEAP32[i1 + 4 >> 2] | 0) >>> 0 > i3 >>> 0) i15 = i1 + 128 + (i14 * 22528 | 0) + (i3 * 88 | 0) | 0; else i4 = 14; else i4 = 14;
 if ((i4 | 0) == 14) i15 = i1 + 40 | 0;
 i9 = i2 + -1 | 0;
 i2 = i5 >>> 0 > i9 >>> 0;
 if (i2) if ((HEAP32[i1 + 4 >> 2] | 0) >>> 0 > i3 >>> 0) i16 = i1 + 128 + (i9 * 22528 | 0) + (i3 * 88 | 0) | 0; else i4 = 18; else i4 = 18;
 if ((i4 | 0) == 18) i16 = i1 + 40 | 0;
 if (i13) {
  i13 = HEAP32[i1 + 4 >> 2] | 0;
  i3 = i13 >>> 0 > i8 >>> 0 ? i1 + 128 + (i14 * 22528 | 0) + (i8 * 88 | 0) | 0 : i1 + 40 | 0;
  if (i13 >>> 0 > i12 >>> 0) {
   i17 = i1 + 128 + (i14 * 22528 | 0) + (i12 * 88 | 0) | 0;
   i18 = i3;
  } else {
   i19 = i3;
   i4 = 23;
  }
 } else {
  i19 = i1 + 40 | 0;
  i4 = 23;
 }
 if ((i4 | 0) == 23) {
  i17 = i1 + 40 | 0;
  i18 = i19;
 }
 if (i2) {
  i2 = HEAP32[i1 + 4 >> 2] | 0;
  i19 = i2 >>> 0 > i8 >>> 0 ? i1 + 128 + (i9 * 22528 | 0) + (i8 * 88 | 0) | 0 : i1 + 40 | 0;
  if (i2 >>> 0 > i12 >>> 0) {
   i20 = i1 + 128 + (i9 * 22528 | 0) + (i12 * 88 | 0) | 0;
   i21 = i19;
  } else {
   i22 = i19;
   i4 = 28;
  }
 } else {
  i22 = i1 + 40 | 0;
  i4 = 28;
 }
 if ((i4 | 0) == 28) {
  i20 = i1 + 40 | 0;
  i21 = i22;
 }
 i22 = (HEAP32[i11 + 44 >> 2] | 0) == 0;
 i11 = (HEAP32[i15 + 44 >> 2] | 0) == 0;
 do if (i22) if (i11) {
  i15 = (HEAP32[i18 + 44 >> 2] | 0) == 0 ? 0 : 4;
  i1 = HEAP32[i10 + 44 >> 2] | 0;
  if (!i1) {
   i23 = i15;
   i4 = 36;
   break;
  } else {
   i24 = i1;
   i25 = i15;
   i26 = 3;
   break;
  }
 } else {
  i15 = HEAP32[i10 + 44 >> 2] | 0;
  i27 = i15;
  i28 = 3;
  i29 = (i15 | 0) == 0;
  i4 = 34;
  break;
 } else {
  i15 = HEAP32[i10 + 44 >> 2] | 0;
  i1 = (i15 | 0) == 0;
  if (i11) if (i1) {
   i23 = 2;
   i4 = 36;
  } else {
   i24 = i15;
   i25 = 2;
   i26 = 3;
  } else {
   i27 = i15;
   i28 = 1;
   i29 = i1;
   i4 = 34;
  }
 } while (0);
 if ((i4 | 0) == 34) {
  i24 = i27;
  i25 = i28;
  i26 = i29 ? 2 : 1;
 } else if ((i4 | 0) == 36) {
  i24 = 0;
  i25 = i23;
  i26 = (HEAP32[i17 + 44 >> 2] | 0) == 0 ? 0 : 4;
 }
 if (!(HEAP32[i16 + 44 >> 2] | 0)) if (i22) {
  i30 = 1;
  i31 = (HEAP32[i21 + 44 >> 2] | 0) == 0 ? 0 : 4;
 } else {
  i30 = 1;
  i31 = 3;
 } else {
  i30 = 0;
  i31 = i22 ? 2 : 1;
 }
 if (!i24) if (i30) i32 = (HEAP32[i20 + 44 >> 2] | 0) == 0 ? 0 : 4; else i32 = 3; else i32 = i30 ? 2 : 1;
 HEAP32[i7 + 56 >> 2] = i25;
 HEAP32[i7 + 60 >> 2] = i26;
 HEAP32[i7 + 64 >> 2] = i31;
 HEAP32[i7 + 68 >> 2] = i32;
 return;
}

function __ZN5ImGui11RenderArrowE6ImVec2if(i1, i2, f3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 f3 = Math_fround(f3);
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, f11 = f0, f12 = f0, f13 = f0, f14 = f0, f15 = f0, f16 = f0, f17 = f0, f18 = f0, f19 = f0, f20 = f0, f21 = f0, f22 = f0, f23 = f0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i6 = i5 + 16 | 0;
 i7 = i5 + 8 | 0;
 i8 = i5;
 i9 = HEAP32[1460598] | 0;
 i10 = HEAP32[i9 + 6392 >> 2] | 0;
 f11 = Math_fround(HEAPF32[i9 + 6184 >> 2]);
 f12 = Math_fround(Math_fround(f11 * Math_fround(.400000006)) * f3);
 f13 = Math_fround(f11 * Math_fround(.5));
 f11 = Math_fround(f13 * f3);
 f3 = Math_fround(Math_fround(HEAPF32[i1 >> 2]) + f13);
 f13 = Math_fround(Math_fround(HEAPF32[i1 + 4 >> 2]) + f11);
 switch (i2 | 0) {
 case -1:
 case 4:
  {
   ___assert_fail(54909, 31803, 4630, 34083);
   break;
  }
 case 3:
  {
   f14 = f12;
   i4 = 3;
   break;
  }
 case 2:
  {
   f14 = Math_fround(-f12);
   i4 = 3;
   break;
  }
 case 0:
  {
   f15 = Math_fround(-f12);
   i4 = 5;
   break;
  }
 case 1:
  {
   f15 = f12;
   i4 = 5;
   break;
  }
 default:
  {
   f16 = f3;
   f17 = f13;
   f18 = Math_fround(0.0);
   f19 = Math_fround(0.0);
   f20 = Math_fround(0.0);
   f21 = Math_fround(0.0);
   f22 = Math_fround(0.0);
   f23 = Math_fround(0.0);
  }
 }
 if ((i4 | 0) == 3) {
  f12 = Math_fround(f14 * Math_fround(-.5));
  f16 = f3;
  f17 = Math_fround(f13 - Math_fround(f14 * Math_fround(.25)));
  f18 = Math_fround(f14 * Math_fround(0.0));
  f19 = f14;
  f20 = Math_fround(f14 * Math_fround(-.865999996));
  f21 = f12;
  f22 = Math_fround(f14 * Math_fround(.865999996));
  f23 = f12;
 } else if ((i4 | 0) == 5) {
  f12 = Math_fround(f15 * Math_fround(-.5));
  f16 = Math_fround(f3 - Math_fround(f15 * Math_fround(.25)));
  f17 = f13;
  f18 = f15;
  f19 = Math_fround(f15 * Math_fround(0.0));
  f20 = f12;
  f21 = Math_fround(f15 * Math_fround(.865999996));
  f22 = f12;
  f23 = Math_fround(f15 * Math_fround(-.865999996));
 }
 i4 = HEAP32[i10 + 632 >> 2] | 0;
 f15 = Math_fround(f18 + f16);
 f18 = Math_fround(f19 + f17);
 HEAPF32[i6 >> 2] = f15;
 HEAPF32[i6 + 4 >> 2] = f18;
 f18 = Math_fround(f20 + f16);
 f20 = Math_fround(f21 + f17);
 HEAPF32[i7 >> 2] = f18;
 HEAPF32[i7 + 4 >> 2] = f20;
 f20 = Math_fround(f22 + f16);
 f16 = Math_fround(f23 + f17);
 HEAPF32[i8 >> 2] = f20;
 HEAPF32[i8 + 4 >> 2] = f16;
 f16 = Math_fround(HEAPF32[i9 + 5508 >> 2]);
 f20 = Math_fround(HEAPF32[i9 + 5512 >> 2]);
 f17 = Math_fround(HEAPF32[i9 + 5516 >> 2]);
 f23 = Math_fround(HEAPF32[i9 + 5520 >> 2]);
 f22 = Math_fround(f23 * Math_fround(HEAPF32[i9 + 5356 >> 2]));
 i9 = f16 < Math_fround(0.0);
 i10 = f16 > Math_fround(1.0);
 i2 = ~~Math_fround(Math_fround((i10 ? Math_fround(1.0) : f16) * Math_fround(255.0)) + Math_fround(.5));
 i10 = f20 < Math_fround(0.0);
 i1 = f20 > Math_fround(1.0);
 i24 = ~~Math_fround(Math_fround((i1 ? Math_fround(1.0) : f20) * Math_fround(255.0)) + Math_fround(.5)) << 8;
 i1 = f17 < Math_fround(0.0);
 i25 = f17 > Math_fround(1.0);
 i26 = ~~Math_fround(Math_fround((i25 ? Math_fround(1.0) : f17) * Math_fround(255.0)) + Math_fround(.5)) << 16;
 i25 = f22 < Math_fround(0.0);
 i27 = f22 > Math_fround(1.0);
 i28 = ~~Math_fround(Math_fround((i27 ? Math_fround(1.0) : f22) * Math_fround(255.0)) + Math_fround(.5)) << 24;
 __ZN10ImDrawList17AddTriangleFilledERK6ImVec2S2_S2_j(i4, i6, i7, i8, (i10 ? 0 : i24) | (i9 ? 0 : i2) | (i1 ? 0 : i26) | (i25 ? 0 : i28));
 STACKTOP = i5;
 return;
}

function _png_handle_sPLT(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i5;
 i7 = i1 + 756 | 0;
 i8 = HEAP32[i7 >> 2] | 0;
 switch (i8 | 0) {
 case 0:
  break;
 case 1:
  {
   _png_crc_finish(i1, i3) | 0;
   STACKTOP = i5;
   return;
  }
 default:
  i4 = 3;
 }
 if ((i4 | 0) == 3) {
  i9 = i8 + -1 | 0;
  HEAP32[i7 >> 2] = i9;
  if ((i9 | 0) == 1) {
   _png_warning(i1, 61349);
   _png_crc_finish(i1, i3) | 0;
   STACKTOP = i5;
   return;
  }
 }
 i9 = HEAP32[i1 + 208 >> 2] | 0;
 if (!(i9 & 1)) _png_chunk_error(i1, 60665);
 if (i9 & 4 | 0) {
  _png_crc_finish(i1, i3) | 0;
  _png_chunk_benign_error(i1, 61181);
  STACKTOP = i5;
  return;
 }
 i9 = i3 + 1 | 0;
 i7 = i1 + 788 | 0;
 i8 = HEAP32[i7 >> 2] | 0;
 if (!i8) i4 = 12; else {
  i10 = i1 + 792 | 0;
  if ((HEAP32[i10 >> 2] | 0) >>> 0 < i9 >>> 0) {
   HEAP32[i7 >> 2] = 0;
   HEAP32[i10 >> 2] = 0;
   _png_free(i1, i8);
   i4 = 12;
  } else i11 = i8;
 }
 do if ((i4 | 0) == 12) {
  i8 = _png_malloc_base(i1, i9) | 0;
  if (i8 | 0) {
   HEAP32[i7 >> 2] = i8;
   HEAP32[i1 + 792 >> 2] = i9;
   i11 = i8;
   break;
  }
  _png_crc_finish(i1, i3) | 0;
  _png_chunk_benign_error(i1, 60712);
  STACKTOP = i5;
  return;
 } while (0);
 _png_read_data(i1, i11, i3);
 _png_calculate_crc(i1, i11, i3);
 if (_png_crc_finish(i1, 0) | 0) {
  STACKTOP = i5;
  return;
 }
 i9 = i11 + i3 | 0;
 HEAP8[i9 >> 0] = 0;
 i7 = i11;
 while (1) {
  i12 = i7 + 1 | 0;
  if (!(HEAP8[i7 >> 0] | 0)) break; else i7 = i12;
 }
 if (i12 >>> 0 > (i9 + -2 | 0) >>> 0) {
  _png_warning(i1, 61382);
  STACKTOP = i5;
  return;
 }
 i9 = i7 + 2 | 0;
 i7 = HEAP8[i12 >> 0] | 0;
 HEAP8[i6 + 4 >> 0] = i7;
 i12 = i7 << 24 >> 24 == 8;
 i7 = i12 ? 6 : 10;
 i4 = i11 - i9 + i3 | 0;
 if ((i4 >>> 0) % (i7 >>> 0) | 0 | 0) {
  _png_warning(i1, 61403);
  STACKTOP = i5;
  return;
 }
 i3 = (i4 >>> 0) / (i7 >>> 0) | 0;
 if (i3 >>> 0 > 429496729) {
  _png_warning(i1, 61429);
  STACKTOP = i5;
  return;
 }
 i8 = i6 + 12 | 0;
 HEAP32[i8 >> 2] = i3;
 i10 = _png_malloc_warn(i1, i3 * 10 | 0) | 0;
 i3 = i6 + 8 | 0;
 HEAP32[i3 >> 2] = i10;
 if (!i10) {
  _png_warning(i1, 61449);
  STACKTOP = i5;
  return;
 }
 L48 : do if (i7 >>> 0 <= i4 >>> 0) {
  i13 = 0;
  i14 = i9;
  i15 = i10;
  while (1) {
   i16 = i15 + (i13 * 10 | 0) | 0;
   if (i12) {
    HEAP16[i16 >> 1] = HEAPU8[i14 >> 0] | 0;
    i17 = i15 + (i13 * 10 | 0) | 0;
    HEAP16[i17 + 2 >> 1] = HEAPU8[i14 + 1 >> 0] | 0;
    HEAP16[i17 + 4 >> 1] = HEAPU8[i14 + 2 >> 0] | 0;
    i18 = i14 + 4 | 0;
    i19 = HEAPU8[i14 + 3 >> 0] | 0;
   } else {
    HEAP16[i16 >> 1] = HEAPU8[i14 >> 0] << 8 | HEAPU8[i14 + 1 >> 0];
    i16 = i15 + (i13 * 10 | 0) | 0;
    HEAP16[i16 + 2 >> 1] = HEAPU8[i14 + 2 >> 0] << 8 | HEAPU8[i14 + 3 >> 0];
    HEAP16[i16 + 4 >> 1] = HEAPU8[i14 + 4 >> 0] << 8 | HEAPU8[i14 + 5 >> 0];
    i18 = i14 + 8 | 0;
    i19 = (HEAPU8[i14 + 6 >> 0] << 8 | HEAPU8[i14 + 7 >> 0]) & 65535;
   }
   i16 = i15 + (i13 * 10 | 0) | 0;
   HEAP16[i16 + 6 >> 1] = i19;
   HEAP16[i16 + 8 >> 1] = HEAPU8[i18 >> 0] << 8 | HEAPU8[i18 + 1 >> 0];
   i16 = i13 + 1 | 0;
   if ((i16 | 0) >= (HEAP32[i8 >> 2] | 0)) break L48;
   i13 = i16;
   i14 = i18 + 2 | 0;
   i15 = HEAP32[i3 >> 2] | 0;
  }
 } while (0);
 HEAP32[i6 >> 2] = i11;
 _png_set_sPLT(i1, i2, i6, 1);
 _png_free(i1, HEAP32[i3 >> 2] | 0);
 STACKTOP = i5;
 return;
}

function _crc32(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 if (!i2) {
  i4 = 0;
  return i4 | 0;
 }
 i5 = ~i1;
 L4 : do if (!i3) i6 = i5; else {
  i1 = i5;
  i7 = i3;
  i8 = i2;
  while (1) {
   if (!(i8 & 3)) break;
   i9 = HEAP32[5016 + ((i1 & 255 ^ (HEAPU8[i8 >> 0] | 0)) << 2) >> 2] ^ i1 >>> 8;
   i10 = i7 + -1 | 0;
   if (!i10) {
    i6 = i9;
    break L4;
   } else {
    i1 = i9;
    i7 = i10;
    i8 = i8 + 1 | 0;
   }
  }
  if (i7 >>> 0 > 31) {
   i10 = i7 + -32 | 0;
   i9 = i10 & -32;
   i11 = i8 + (i9 + 32) | 0;
   i12 = i8;
   i13 = i1;
   i14 = i7;
   while (1) {
    i15 = HEAP32[i12 >> 2] ^ i13;
    i16 = HEAP32[7064 + ((i15 >>> 8 & 255) << 2) >> 2] ^ HEAP32[8088 + ((i15 & 255) << 2) >> 2] ^ HEAP32[6040 + ((i15 >>> 16 & 255) << 2) >> 2] ^ HEAP32[5016 + (i15 >>> 24 << 2) >> 2] ^ HEAP32[i12 + 4 >> 2];
    i15 = HEAP32[7064 + ((i16 >>> 8 & 255) << 2) >> 2] ^ HEAP32[8088 + ((i16 & 255) << 2) >> 2] ^ HEAP32[6040 + ((i16 >>> 16 & 255) << 2) >> 2] ^ HEAP32[5016 + (i16 >>> 24 << 2) >> 2] ^ HEAP32[i12 + 8 >> 2];
    i16 = HEAP32[7064 + ((i15 >>> 8 & 255) << 2) >> 2] ^ HEAP32[8088 + ((i15 & 255) << 2) >> 2] ^ HEAP32[6040 + ((i15 >>> 16 & 255) << 2) >> 2] ^ HEAP32[5016 + (i15 >>> 24 << 2) >> 2] ^ HEAP32[i12 + 12 >> 2];
    i15 = HEAP32[7064 + ((i16 >>> 8 & 255) << 2) >> 2] ^ HEAP32[8088 + ((i16 & 255) << 2) >> 2] ^ HEAP32[6040 + ((i16 >>> 16 & 255) << 2) >> 2] ^ HEAP32[5016 + (i16 >>> 24 << 2) >> 2] ^ HEAP32[i12 + 16 >> 2];
    i16 = HEAP32[7064 + ((i15 >>> 8 & 255) << 2) >> 2] ^ HEAP32[8088 + ((i15 & 255) << 2) >> 2] ^ HEAP32[6040 + ((i15 >>> 16 & 255) << 2) >> 2] ^ HEAP32[5016 + (i15 >>> 24 << 2) >> 2] ^ HEAP32[i12 + 20 >> 2];
    i15 = HEAP32[7064 + ((i16 >>> 8 & 255) << 2) >> 2] ^ HEAP32[8088 + ((i16 & 255) << 2) >> 2] ^ HEAP32[6040 + ((i16 >>> 16 & 255) << 2) >> 2] ^ HEAP32[5016 + (i16 >>> 24 << 2) >> 2] ^ HEAP32[i12 + 24 >> 2];
    i16 = HEAP32[7064 + ((i15 >>> 8 & 255) << 2) >> 2] ^ HEAP32[8088 + ((i15 & 255) << 2) >> 2] ^ HEAP32[6040 + ((i15 >>> 16 & 255) << 2) >> 2] ^ HEAP32[5016 + (i15 >>> 24 << 2) >> 2] ^ HEAP32[i12 + 28 >> 2];
    i13 = HEAP32[7064 + ((i16 >>> 8 & 255) << 2) >> 2] ^ HEAP32[8088 + ((i16 & 255) << 2) >> 2] ^ HEAP32[6040 + ((i16 >>> 16 & 255) << 2) >> 2] ^ HEAP32[5016 + (i16 >>> 24 << 2) >> 2];
    i14 = i14 + -32 | 0;
    if (i14 >>> 0 <= 31) break; else i12 = i12 + 32 | 0;
   }
   i17 = i11;
   i18 = i13;
   i19 = i10 - i9 | 0;
  } else {
   i17 = i8;
   i18 = i1;
   i19 = i7;
  }
  if (i19 >>> 0 > 3) {
   i12 = i19 + -4 | 0;
   i14 = i12 >>> 2;
   i16 = i17;
   i15 = i19;
   i20 = i18;
   while (1) {
    i21 = HEAP32[i16 >> 2] ^ i20;
    i20 = HEAP32[7064 + ((i21 >>> 8 & 255) << 2) >> 2] ^ HEAP32[8088 + ((i21 & 255) << 2) >> 2] ^ HEAP32[6040 + ((i21 >>> 16 & 255) << 2) >> 2] ^ HEAP32[5016 + (i21 >>> 24 << 2) >> 2];
    i15 = i15 + -4 | 0;
    if (i15 >>> 0 <= 3) break; else i16 = i16 + 4 | 0;
   }
   i22 = i17 + (i14 + 1 << 2) | 0;
   i23 = i20;
   i24 = i12 & 3;
  } else {
   i22 = i17;
   i23 = i18;
   i24 = i19;
  }
  if (!i24) i6 = i23; else {
   i16 = i22;
   i15 = i23;
   i7 = i24;
   while (1) {
    i1 = HEAP32[5016 + ((i15 & 255 ^ (HEAPU8[i16 >> 0] | 0)) << 2) >> 2] ^ i15 >>> 8;
    i7 = i7 + -1 | 0;
    if (!i7) {
     i6 = i1;
     break;
    } else {
     i16 = i16 + 1 | 0;
     i15 = i1;
    }
   }
  }
 } while (0);
 i4 = ~i6;
 return i4 | 0;
}

function __ZN5ImGui11OpenPopupExEj(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i2;
 i4 = HEAP32[1460598] | 0;
 i5 = HEAP32[i4 + 6392 >> 2] | 0;
 i6 = HEAP32[i4 + 6524 >> 2] | 0;
 i7 = i4 + 6328 | 0;
 i8 = HEAP32[i7 >> 2] | 0;
 i9 = HEAP32[i5 + 452 >> 2] | 0;
 if ((i9 | 0) <= 0) ___assert_fail(38278, 56850, 1245, 38287);
 i10 = HEAP32[(HEAP32[i5 + 460 >> 2] | 0) + (i9 + -1 << 2) >> 2] | 0;
 i9 = i4 + 212 | 0;
 i11 = HEAP32[i9 >> 2] | 0;
 i12 = HEAP32[i9 + 4 >> 2] | 0;
 __ZL22NavCalcPreferredRefPosv(i3);
 i9 = i3;
 i3 = HEAP32[i9 >> 2] | 0;
 i13 = HEAP32[i9 + 4 >> 2] | 0;
 i9 = i4 + 6512 | 0;
 i14 = HEAP32[i9 >> 2] | 0;
 i15 = i6 + 1 | 0;
 if ((i14 | 0) <= (i6 | 0)) {
  i16 = i4 + 6516 | 0;
  if ((i14 | 0) == (HEAP32[i16 >> 2] | 0)) {
   i17 = i14 + 1 | 0;
   if (!i14) i18 = 8; else i18 = ((i14 | 0) / 2 | 0) + i14 | 0;
   i19 = (i18 | 0) > (i17 | 0) ? i18 : i17;
   if ((i14 | 0) < (i19 | 0)) {
    HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
    i17 = __ZL13MallocWrapperjPv(i19 * 36 | 0, 0) | 0;
    i18 = i4 + 6520 | 0;
    i20 = HEAP32[i18 >> 2] | 0;
    if (!i20) i21 = i18; else {
     _memcpy(i17 | 0, i20 | 0, (HEAP32[i9 >> 2] | 0) * 36 | 0) | 0;
     i20 = HEAP32[i18 >> 2] | 0;
     if (i20 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
     __ZL11FreeWrapperPvS_(i20, 0);
     i21 = i18;
    }
    HEAP32[i21 >> 2] = i17;
    HEAP32[i16 >> 2] = i19;
    i22 = HEAP32[i9 >> 2] | 0;
   } else i22 = i14;
  } else i22 = i14;
  i14 = HEAP32[i4 + 6520 >> 2] | 0;
  i19 = i14 + (i22 * 36 | 0) | 0;
  HEAP32[i19 >> 2] = i1;
  HEAP32[i19 + 4 >> 2] = 0;
  HEAP32[i19 + 8 >> 2] = i5;
  HEAP32[i19 + 12 >> 2] = i8;
  HEAP32[i19 + 16 >> 2] = i10;
  i22 = i19 + 20 | 0;
  HEAP32[i22 >> 2] = i3;
  HEAP32[i22 + 4 >> 2] = i13;
  i22 = i19 + 28 | 0;
  HEAP32[i22 >> 2] = i11;
  HEAP32[i22 + 4 >> 2] = i12;
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
  STACKTOP = i2;
  return;
 }
 i22 = i4 + 6520 | 0;
 i19 = HEAP32[i22 >> 2] | 0;
 if ((HEAP32[i19 + (i6 * 36 | 0) >> 2] | 0) == (i1 | 0)) {
  i14 = i19 + (i6 * 36 | 0) + 12 | 0;
  if ((HEAP32[i14 >> 2] | 0) == ((HEAP32[i7 >> 2] | 0) + -1 | 0)) {
   HEAP32[i14 >> 2] = i8;
   STACKTOP = i2;
   return;
  }
 }
 i14 = i4 + 6516 | 0;
 i4 = HEAP32[i14 >> 2] | 0;
 if ((i4 | 0) > (i6 | 0)) i23 = i19; else {
  if (!i4) i24 = 8; else i24 = ((i4 | 0) / 2 | 0) + i4 | 0;
  i7 = (i24 | 0) > (i15 | 0) ? i24 : i15;
  if ((i4 | 0) < (i7 | 0)) {
   HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
   i4 = __ZL13MallocWrapperjPv(i7 * 36 | 0, 0) | 0;
   i24 = HEAP32[i22 >> 2] | 0;
   if (!i24) i25 = i22; else {
    _memcpy(i4 | 0, i24 | 0, (HEAP32[i9 >> 2] | 0) * 36 | 0) | 0;
    i24 = HEAP32[i22 >> 2] | 0;
    if (i24 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
    __ZL11FreeWrapperPvS_(i24, 0);
    i25 = i22;
   }
   HEAP32[i25 >> 2] = i4;
   HEAP32[i14 >> 2] = i7;
   i23 = i4;
  } else i23 = i19;
 }
 HEAP32[i9 >> 2] = i15;
 i15 = i23 + (i6 * 36 | 0) | 0;
 HEAP32[i15 >> 2] = i1;
 HEAP32[i15 + 4 >> 2] = 0;
 HEAP32[i15 + 8 >> 2] = i5;
 HEAP32[i15 + 12 >> 2] = i8;
 HEAP32[i15 + 16 >> 2] = i10;
 i10 = i15 + 20 | 0;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i10 + 4 >> 2] = i13;
 i13 = i15 + 28 | 0;
 HEAP32[i13 >> 2] = i11;
 HEAP32[i13 + 4 >> 2] = i12;
 STACKTOP = i2;
 return;
}

function __ZN8ImGuiStbL21stb_text_locate_coordEP18ImGuiTextEditStateff(i1, f2, f3) {
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, f11 = f0, f12 = f0, i13 = 0, i14 = 0, f15 = f0, f16 = f0, i17 = 0, f18 = f0, i19 = 0, i20 = 0, i21 = 0, f22 = f0, f23 = f0, f24 = f0, i25 = 0, i26 = 0, i27 = 0, f28 = f0, i29 = 0, i30 = 0, f31 = f0, i32 = 0;
 i4 = 0;
 i5 = HEAP32[i1 + 44 >> 2] | 0;
 if ((i5 | 0) <= 0) {
  i6 = i5;
  return i6 | 0;
 }
 i7 = HEAP32[i1 + 12 >> 2] | 0;
 i8 = i7 + (i5 << 1) | 0;
 i9 = HEAP32[1460598] | 0;
 i10 = HEAP32[i9 + 6180 >> 2] | 0;
 f11 = Math_fround(HEAPF32[i9 + 6184 >> 2]);
 f12 = Math_fround(f11 / Math_fround(HEAPF32[i10 >> 2]));
 i9 = i10 + 28 | 0;
 i13 = i10 + 36 | 0;
 i14 = i10 + 56 | 0;
 f15 = Math_fround(f11 + Math_fround(0.0));
 i10 = 0;
 f16 = Math_fround(0.0);
 while (1) {
  i17 = i7 + (i10 << 1) | 0;
  f18 = Math_fround(0.0);
  i19 = i17;
  L6 : while (1) {
   i20 = i19;
   L8 : while (1) {
    if (i20 >>> 0 >= i8 >>> 0) {
     i21 = i20;
     f22 = f18;
     f23 = Math_fround(0.0);
     f24 = Math_fround(0.0);
     break L6;
    }
    i25 = i20 + 2 | 0;
    i26 = HEAP16[i20 >> 1] | 0;
    switch (i26 << 16 >> 16) {
    case 10:
     {
      i4 = 10;
      break L6;
      break;
     }
    case 13:
     {
      i20 = i25;
      break;
     }
    default:
     break L8;
    }
   }
   i20 = i26 & 65535;
   if ((HEAP32[i9 >> 2] | 0) > (i20 | 0)) i27 = (HEAP32[i13 >> 2] | 0) + (i20 << 2) | 0; else i27 = i14;
   f18 = Math_fround(f18 + Math_fround(f12 * Math_fround(HEAPF32[i27 >> 2])));
   i19 = i25;
  }
  if ((i4 | 0) == 10) {
   i4 = 0;
   i19 = f18 <= Math_fround(0.0);
   i21 = i25;
   f22 = Math_fround(0.0);
   f23 = f15;
   f24 = i19 ? Math_fround(0.0) : f18;
  }
  i19 = f23 == Math_fround(0.0) | f22 > Math_fround(0.0);
  f28 = Math_fround(f11 + f23);
  i20 = i21 - i17 | 0;
  i29 = i20 >> 1;
  if ((i20 | 0) < 2) {
   i6 = i5;
   i4 = 30;
   break;
  }
  if ((i10 | 0) == 0 & Math_fround(f16 + Math_fround(0.0)) > f3) {
   i6 = 0;
   i4 = 30;
   break;
  }
  f16 = Math_fround(f16 + (i19 ? f28 : f23));
  if (f16 > f3) {
   i4 = 15;
   break;
  }
  i19 = i29 + i10 | 0;
  if ((i19 | 0) >= (i5 | 0)) {
   i6 = i5;
   i4 = 30;
   break;
  } else i10 = i19;
 }
 if ((i4 | 0) == 15) {
  if (f2 < Math_fround(0.0)) {
   i6 = i10;
   return i6 | 0;
  }
  i5 = HEAP32[i1 + 4 >> 2] | 0;
  L27 : do if ((f24 < f22 ? f22 : f24) > f2) {
   i1 = 0;
   f3 = Math_fround(0.0);
   while (1) {
    i30 = i1 + i10 | 0;
    if ((i5 | 0) <= (i30 | 0)) {
     i4 = 19;
     break;
    }
    i21 = HEAP16[i7 + (i30 << 1) >> 1] | 0;
    if (i21 << 16 >> 16 == 10) f31 = Math_fround(-1.0); else {
     i25 = i21 & 65535;
     if ((HEAP32[i9 >> 2] | 0) > (i25 | 0)) i32 = (HEAP32[i13 >> 2] | 0) + (i25 << 2) | 0; else i32 = i14;
     f31 = Math_fround(Math_fround(HEAPF32[i32 >> 2]) * f12);
    }
    f16 = Math_fround(f3 + f31);
    i1 = i1 + 1 | 0;
    if (f16 > f2) break;
    if ((i1 | 0) >= (i29 | 0)) break L27; else f3 = f16;
   }
   if ((i4 | 0) == 19) ___assert_fail(56841, 56850, 1235, 56909);
   if (Math_fround(f3 + Math_fround(f31 * Math_fround(.5))) > f2) {
    i6 = i30;
    return i6 | 0;
   }
   i6 = i30 + 1 | 0;
   return i6 | 0;
  } while (0);
  i30 = i29 + i10 | 0;
  i10 = i30 + -1 | 0;
  if ((i5 | 0) < (i30 | 0)) ___assert_fail(56841, 56850, 1236, 56909);
  i6 = (HEAP16[i7 + (i10 << 1) >> 1] | 0) == 10 ? i10 : i30;
  return i6 | 0;
 } else if ((i4 | 0) == 30) return i6 | 0;
 return 0;
}

function __ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i1 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 432 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(432);
 i9 = i8 + 424 | 0;
 i10 = i8 + 24 | 0;
 i11 = i8 + 16 | 0;
 i12 = i8 + 8 | 0;
 i13 = i8;
 i14 = i8 + 428 | 0;
 i15 = i8 + 4 | 0;
 HEAP32[i11 >> 2] = i10;
 i16 = i11 + 4 | 0;
 HEAP32[i16 >> 2] = 130;
 __ZNKSt3__28ios_base6getlocEv(i13, i5);
 i17 = __ZNKSt3__26locale9use_facetERNS0_2idE(i13, 5845220) | 0;
 HEAP8[i14 >> 0] = 0;
 i18 = HEAP32[i3 >> 2] | 0;
 HEAP32[i15 >> 2] = i18;
 i19 = HEAP32[i5 + 4 >> 2] | 0;
 HEAP32[i9 >> 2] = HEAP32[i15 >> 2];
 i15 = i18;
 if (__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_(i2, i9, i4, i13, i19, i6, i14, i17, i11, i12, i10 + 400 | 0) | 0) {
  i10 = i7 + 8 + 3 | 0;
  if ((HEAP8[i10 >> 0] | 0) < 0) {
   i19 = HEAP32[i7 >> 2] | 0;
   HEAP32[i9 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i19, i9);
   HEAP32[i7 + 4 >> 2] = 0;
  } else {
   HEAP32[i9 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i7, i9);
   HEAP8[i10 >> 0] = 0;
  }
  if (HEAP8[i14 >> 0] | 0) __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw(i7, FUNCTION_TABLE_iii[HEAP32[(HEAP32[i17 >> 2] | 0) + 44 >> 2] & 31](i17, 45) | 0);
  i14 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i17 >> 2] | 0) + 44 >> 2] & 31](i17, 48) | 0;
  i17 = HEAP32[i12 >> 2] | 0;
  i12 = i17 + -4 | 0;
  i10 = HEAP32[i11 >> 2] | 0;
  while (1) {
   if (i10 >>> 0 >= i12 >>> 0) break;
   if ((HEAP32[i10 >> 2] | 0) != (i14 | 0)) break;
   i10 = i10 + 4 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE23__append_forward_unsafeIPwEERS5_T_S9_(i7, i10, i17) | 0;
 }
 i17 = HEAP32[i2 >> 2] | 0;
 do if (!i17) i20 = 1; else {
  i10 = HEAP32[i17 + 12 >> 2] | 0;
  if ((i10 | 0) == (HEAP32[i17 + 16 >> 2] | 0)) i21 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i17 >> 2] | 0) + 36 >> 2] & 127](i17) | 0; else i21 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i10 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i21, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i2 >> 2] = 0;
   i20 = 1;
   break;
  } else {
   i20 = (HEAP32[i2 >> 2] | 0) == 0;
   break;
  }
 } while (0);
 do if (!i18) i1 = 25; else {
  i21 = HEAP32[i15 + 12 >> 2] | 0;
  if ((i21 | 0) == (HEAP32[i15 + 16 >> 2] | 0)) i22 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i18 >> 2] | 0) + 36 >> 2] & 127](i15) | 0; else i22 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i21 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i22, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i3 >> 2] = 0;
   i1 = 25;
   break;
  } else if (i20) break; else {
   i1 = 27;
   break;
  }
 } while (0);
 if ((i1 | 0) == 25) if (i20) i1 = 27;
 if ((i1 | 0) == 27) HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 2;
 i6 = HEAP32[i2 >> 2] | 0;
 __ZNSt3__26localeD2Ev(i13);
 i13 = HEAP32[i11 >> 2] | 0;
 HEAP32[i11 >> 2] = 0;
 if (i13 | 0) FUNCTION_TABLE_vi[HEAP32[i16 >> 2] & 255](i13);
 STACKTOP = i8;
 return i6 | 0;
}

function __ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i1 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 i9 = i8 + 24 | 0;
 i10 = i8 + 32 | 0;
 i11 = i8 + 16 | 0;
 i12 = i8 + 8 | 0;
 i13 = i8;
 i14 = i8 + 28 | 0;
 i15 = i8 + 4 | 0;
 HEAP32[i11 >> 2] = i10;
 i16 = i11 + 4 | 0;
 HEAP32[i16 >> 2] = 130;
 __ZNKSt3__28ios_base6getlocEv(i13, i5);
 i17 = __ZNKSt3__26locale9use_facetERNS0_2idE(i13, 5845188) | 0;
 HEAP8[i14 >> 0] = 0;
 i18 = HEAP32[i3 >> 2] | 0;
 HEAP32[i15 >> 2] = i18;
 i19 = HEAP32[i5 + 4 >> 2] | 0;
 HEAP32[i9 >> 2] = HEAP32[i15 >> 2];
 i15 = i18;
 if (__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_(i2, i9, i4, i13, i19, i6, i14, i17, i11, i12, i10 + 100 | 0) | 0) {
  i10 = i7 + 11 | 0;
  if ((HEAP8[i10 >> 0] | 0) < 0) {
   i19 = HEAP32[i7 >> 2] | 0;
   HEAP8[i9 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i19, i9);
   HEAP32[i7 + 4 >> 2] = 0;
  } else {
   HEAP8[i9 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i7, i9);
   HEAP8[i10 >> 0] = 0;
  }
  if (HEAP8[i14 >> 0] | 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(i7, FUNCTION_TABLE_iii[HEAP32[(HEAP32[i17 >> 2] | 0) + 28 >> 2] & 31](i17, 45) | 0);
  i14 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i17 >> 2] | 0) + 28 >> 2] & 31](i17, 48) | 0;
  i17 = HEAP32[i12 >> 2] | 0;
  i12 = i17 + -1 | 0;
  i10 = HEAP32[i11 >> 2] | 0;
  while (1) {
   if (i10 >>> 0 >= i12 >>> 0) break;
   if ((HEAP8[i10 >> 0] | 0) != i14 << 24 >> 24) break;
   i10 = i10 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE23__append_forward_unsafeIPcEERS5_T_S9_(i7, i10, i17) | 0;
 }
 i17 = HEAP32[i2 >> 2] | 0;
 do if (!i17) i20 = 1; else {
  i10 = HEAP32[i17 + 12 >> 2] | 0;
  if ((i10 | 0) == (HEAP32[i17 + 16 >> 2] | 0)) i21 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i17 >> 2] | 0) + 36 >> 2] & 127](i17) | 0; else i21 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i10 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i21, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i2 >> 2] = 0;
   i20 = 1;
   break;
  } else {
   i20 = (HEAP32[i2 >> 2] | 0) == 0;
   break;
  }
 } while (0);
 do if (!i18) i1 = 25; else {
  i21 = HEAP32[i15 + 12 >> 2] | 0;
  if ((i21 | 0) == (HEAP32[i15 + 16 >> 2] | 0)) i22 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i18 >> 2] | 0) + 36 >> 2] & 127](i15) | 0; else i22 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i21 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i22, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i3 >> 2] = 0;
   i1 = 25;
   break;
  } else if (i20) break; else {
   i1 = 27;
   break;
  }
 } while (0);
 if ((i1 | 0) == 25) if (i20) i1 = 27;
 if ((i1 | 0) == 27) HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 2;
 i6 = HEAP32[i2 >> 2] | 0;
 __ZNSt3__26localeD2Ev(i13);
 i13 = HEAP32[i11 >> 2] | 0;
 HEAP32[i11 >> 2] = 0;
 if (i13 | 0) FUNCTION_TABLE_vi[HEAP32[i16 >> 2] & 255](i13);
 STACKTOP = i8;
 return i6 | 0;
}

function _png_read_transform_info(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i3 = HEAP32[i1 + 216 >> 2] | 0;
 do if (i3 & 4096 | 0) {
  i4 = i2 + 25 | 0;
  i5 = HEAP8[i4 >> 0] | 0;
  i6 = HEAP16[i1 + 428 >> 1] | 0;
  if (i5 << 24 >> 24 == 3) {
   HEAP8[i4 >> 0] = i6 << 16 >> 16 ? 6 : 2;
   HEAP8[i2 + 24 >> 0] = 8;
   HEAP16[i2 + 22 >> 1] = 0;
   if (HEAP32[i1 + 416 >> 2] | 0) break;
   _png_error(i1, 59432);
  }
  if (!((i3 & 33554432 | 0) == 0 | i6 << 16 >> 16 == 0)) HEAP8[i4 >> 0] = i5 | 4;
  i5 = i2 + 24 | 0;
  if ((HEAPU8[i5 >> 0] | 0) < 8) HEAP8[i5 >> 0] = 8;
  HEAP16[i2 + 22 >> 1] = 0;
 } while (0);
 if (i3 & 128 | 0) {
  i5 = i2 + 170 | 0;
  i4 = i1 + 452 | 0;
  HEAP16[i5 >> 1] = HEAP16[i4 >> 1] | 0;
  HEAP16[i5 + 2 >> 1] = HEAP16[i4 + 2 >> 1] | 0;
  HEAP16[i5 + 4 >> 1] = HEAP16[i4 + 4 >> 1] | 0;
  HEAP16[i5 + 6 >> 1] = HEAP16[i4 + 6 >> 1] | 0;
  HEAP16[i5 + 8 >> 1] = HEAP16[i4 + 8 >> 1] | 0;
 }
 HEAP32[i2 + 40 >> 2] = HEAP32[i1 + 824 >> 2];
 i4 = i2 + 24 | 0;
 i5 = HEAP8[i4 >> 0] | 0;
 if (i5 << 24 >> 24 == 16) {
  if (!(i3 & 67108864)) i7 = 16; else {
   HEAP8[i4 >> 0] = 8;
   i7 = 8;
  }
  if (!(i3 & 1024)) i8 = i7; else {
   HEAP8[i4 >> 0] = 8;
   i8 = 8;
  }
 } else i8 = i5;
 if (i3 & 16384 | 0) {
  i5 = i2 + 25 | 0;
  HEAP8[i5 >> 0] = HEAP8[i5 >> 0] | 2;
 }
 if (i3 & 6291456 | 0) {
  i5 = i2 + 25 | 0;
  HEAP8[i5 >> 0] = HEAP8[i5 >> 0] & -3;
 }
 L30 : do if (i3 & 64 | 0) {
  i5 = i2 + 25 | 0;
  switch (HEAP8[i5 >> 0] | 0) {
  case 6:
  case 2:
   break;
  default:
   break L30;
  }
  if ((HEAP32[i1 + 612 >> 2] | 0) != 0 & i8 << 24 >> 24 == 8) HEAP8[i5 >> 0] = 3;
 } while (0);
 if ((i3 & 512 | 0) != 0 & i8 << 24 >> 24 == 8) if ((HEAP8[i2 + 25 >> 0] | 0) == 3) i9 = 8; else {
  HEAP8[i4 >> 0] = 16;
  i9 = 16;
 } else i9 = i8;
 if ((i3 & 4 | 0) != 0 & (i9 & 255) < 8) {
  HEAP8[i4 >> 0] = 8;
  i10 = 8;
 } else i10 = i9;
 i9 = i2 + 25 | 0;
 i8 = HEAP8[i9 >> 0] | 0;
 i5 = i8 << 24 >> 24 == 3 ? 1 : i8 & 2 | 1;
 i7 = i2 + 29 | 0;
 HEAP8[i7 >> 0] = i5;
 if (!(i3 & 262144)) i11 = i8; else {
  i6 = i8 & -5;
  HEAP8[i9 >> 0] = i6;
  HEAP16[i2 + 22 >> 1] = 0;
  i11 = i6;
 }
 if (!(i11 & 4)) i12 = i5; else {
  i6 = i5 + 1 << 24 >> 24;
  HEAP8[i7 >> 0] = i6;
  i12 = i6;
 }
 L48 : do if (!(i3 & 32768)) i13 = i12; else {
  switch (i11 << 24 >> 24) {
  case 0:
  case 2:
   break;
  default:
   {
    i13 = i12;
    break L48;
   }
  }
  i6 = i12 + 1 << 24 >> 24;
  HEAP8[i7 >> 0] = i6;
  if (!(i3 & 16777216)) i13 = i6; else {
   HEAP8[i9 >> 0] = i11 | 4;
   i13 = i6;
  }
 } while (0);
 if (!(i3 & 1048576)) {
  i14 = i13;
  i15 = i10;
 } else {
  i3 = HEAP8[i1 + 204 >> 0] | 0;
  if ((i10 & 255) < (i3 & 255)) {
   HEAP8[i4 >> 0] = i3;
   i16 = i3;
  } else i16 = i10;
  i10 = HEAP8[i1 + 205 >> 0] | 0;
  if ((i13 & 255) < (i10 & 255)) {
   HEAP8[i7 >> 0] = i10;
   i14 = i10;
   i15 = i16;
  } else {
   i14 = i13;
   i15 = i16;
  }
 }
 i16 = Math_imul(i15 & 255, i14 & 255) | 0;
 HEAP8[i2 + 30 >> 0] = i16;
 i14 = i16 & 255;
 i16 = HEAP32[i2 >> 2] | 0;
 if (i14 >>> 0 > 7) {
  i17 = Math_imul(i14 >>> 3, i16) | 0;
  i18 = i2 + 12 | 0;
  HEAP32[i18 >> 2] = i17;
  i19 = i1 + 404 | 0;
  HEAP32[i19 >> 2] = i17;
  return;
 } else {
  i17 = ((Math_imul(i14, i16) | 0) + 7 | 0) >>> 3;
  i18 = i2 + 12 | 0;
  HEAP32[i18 >> 2] = i17;
  i19 = i1 + 404 | 0;
  HEAP32[i19 >> 2] = i17;
  return;
 }
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i1 = 0;
 i6 = i5 + 8 | 0;
 L1 : while (1) {
  i5 = HEAP32[i2 >> 2] | 0;
  do if (!i5) i7 = 1; else {
   i8 = HEAP32[i5 + 12 >> 2] | 0;
   if ((i8 | 0) == (HEAP32[i5 + 16 >> 2] | 0)) i9 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] & 127](i5) | 0; else i9 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i8 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i9, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i2 >> 2] = 0;
    i7 = 1;
    break;
   } else {
    i7 = (HEAP32[i2 >> 2] | 0) == 0;
    break;
   }
  } while (0);
  i5 = HEAP32[i3 >> 2] | 0;
  do if (!i5) i1 = 15; else {
   i8 = HEAP32[i5 + 12 >> 2] | 0;
   if ((i8 | 0) == (HEAP32[i5 + 16 >> 2] | 0)) i10 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] & 127](i5) | 0; else i10 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i8 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i10, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i3 >> 2] = 0;
    i1 = 15;
    break;
   } else if (i7) {
    i11 = i5;
    break;
   } else {
    i12 = i5;
    break L1;
   }
  } while (0);
  if ((i1 | 0) == 15) {
   i1 = 0;
   if (i7) {
    i12 = 0;
    break;
   } else i11 = 0;
  }
  i5 = HEAP32[i2 >> 2] | 0;
  i8 = HEAP32[i5 + 12 >> 2] | 0;
  if ((i8 | 0) == (HEAP32[i5 + 16 >> 2] | 0)) i13 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] & 127](i5) | 0; else i13 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i8 >> 0] | 0) | 0;
  if ((i13 & 255) << 24 >> 24 <= -1) {
   i12 = i11;
   break;
  }
  if (!(HEAP16[(HEAP32[i6 >> 2] | 0) + (i13 << 24 >> 24 << 1) >> 1] & 8192)) {
   i12 = i11;
   break;
  }
  i8 = HEAP32[i2 >> 2] | 0;
  i5 = i8 + 12 | 0;
  i14 = HEAP32[i5 >> 2] | 0;
  if ((i14 | 0) == (HEAP32[i8 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 40 >> 2] & 127](i8) | 0;
   continue;
  } else {
   HEAP32[i5 >> 2] = i14 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i14 >> 0] | 0) | 0;
   continue;
  }
 }
 i11 = HEAP32[i2 >> 2] | 0;
 do if (!i11) i15 = 1; else {
  i13 = HEAP32[i11 + 12 >> 2] | 0;
  if ((i13 | 0) == (HEAP32[i11 + 16 >> 2] | 0)) i16 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i11 >> 2] | 0) + 36 >> 2] & 127](i11) | 0; else i16 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i13 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i16, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i2 >> 2] = 0;
   i15 = 1;
   break;
  } else {
   i15 = (HEAP32[i2 >> 2] | 0) == 0;
   break;
  }
 } while (0);
 do if (!i12) i1 = 38; else {
  i2 = HEAP32[i12 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i12 + 16 >> 2] | 0)) i17 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i12 >> 2] | 0) + 36 >> 2] & 127](i12) | 0; else i17 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i17, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i3 >> 2] = 0;
   i1 = 38;
   break;
  } else if (i15) break; else {
   i1 = 40;
   break;
  }
 } while (0);
 if ((i1 | 0) == 38) if (i15) i1 = 40;
 if ((i1 | 0) == 40) HEAP32[i4 >> 2] = HEAP32[i4 >> 2] | 2;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i1 = 0;
 i6 = HEAP32[i2 >> 2] | 0;
 do if (!i6) i7 = 1; else {
  i8 = HEAP32[i6 + 12 >> 2] | 0;
  if ((i8 | 0) == (HEAP32[i6 + 16 >> 2] | 0)) i9 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] & 127](i6) | 0; else i9 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i8 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i9, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i2 >> 2] = 0;
   i7 = 1;
   break;
  } else {
   i7 = (HEAP32[i2 >> 2] | 0) == 0;
   break;
  }
 } while (0);
 i9 = HEAP32[i3 >> 2] | 0;
 do if (!i9) i1 = 14; else {
  i6 = HEAP32[i9 + 12 >> 2] | 0;
  if ((i6 | 0) == (HEAP32[i9 + 16 >> 2] | 0)) i10 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i9 >> 2] | 0) + 36 >> 2] & 127](i9) | 0; else i10 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i6 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i10, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i3 >> 2] = 0;
   i1 = 14;
   break;
  } else if (i7) {
   i11 = i9;
   i1 = 16;
   break;
  } else {
   i12 = 6;
   i1 = 38;
   break;
  }
 } while (0);
 if ((i1 | 0) == 14) if (i7) {
  i12 = 6;
  i1 = 38;
 } else {
  i11 = 0;
  i1 = 16;
 }
 L22 : do if ((i1 | 0) == 16) {
  i7 = HEAP32[i2 >> 2] | 0;
  i9 = HEAP32[i7 + 12 >> 2] | 0;
  if ((i9 | 0) == (HEAP32[i7 + 16 >> 2] | 0)) i13 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i7 >> 2] | 0) + 36 >> 2] & 127](i7) | 0; else i13 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i9 >> 2] | 0) | 0;
  if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i5 >> 2] | 0) + 52 >> 2] & 31](i5, i13, 0) | 0) << 24 >> 24 == 37) {
   i9 = HEAP32[i2 >> 2] | 0;
   i7 = i9 + 12 | 0;
   i10 = HEAP32[i7 >> 2] | 0;
   if ((i10 | 0) == (HEAP32[i9 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i9 >> 2] | 0) + 40 >> 2] & 127](i9) | 0; else {
    HEAP32[i7 >> 2] = i10 + 4;
    __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i10 >> 2] | 0) | 0;
   }
   i10 = HEAP32[i2 >> 2] | 0;
   do if (!i10) i14 = 1; else {
    i7 = HEAP32[i10 + 12 >> 2] | 0;
    if ((i7 | 0) == (HEAP32[i10 + 16 >> 2] | 0)) i15 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 36 >> 2] & 127](i10) | 0; else i15 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i7 >> 2] | 0) | 0;
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i15, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[i2 >> 2] = 0;
     i14 = 1;
     break;
    } else {
     i14 = (HEAP32[i2 >> 2] | 0) == 0;
     break;
    }
   } while (0);
   do if (i11 | 0) {
    i10 = HEAP32[i11 + 12 >> 2] | 0;
    if ((i10 | 0) == (HEAP32[i11 + 16 >> 2] | 0)) i16 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i11 >> 2] | 0) + 36 >> 2] & 127](i11) | 0; else i16 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i10 >> 2] | 0) | 0;
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i16, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[i3 >> 2] = 0;
     break;
    } else if (i14) break L22; else {
     i12 = 2;
     i1 = 38;
     break L22;
    }
   } while (0);
   if (i14) {
    i12 = 2;
    i1 = 38;
   }
  } else {
   i12 = 4;
   i1 = 38;
  }
 } while (0);
 if ((i1 | 0) == 38) HEAP32[i4 >> 2] = HEAP32[i4 >> 2] | i12;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i1 = 0;
 i6 = HEAP32[i2 >> 2] | 0;
 do if (!i6) i7 = 1; else {
  i8 = HEAP32[i6 + 12 >> 2] | 0;
  if ((i8 | 0) == (HEAP32[i6 + 16 >> 2] | 0)) i9 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] & 127](i6) | 0; else i9 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i8 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i9, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i2 >> 2] = 0;
   i7 = 1;
   break;
  } else {
   i7 = (HEAP32[i2 >> 2] | 0) == 0;
   break;
  }
 } while (0);
 i9 = HEAP32[i3 >> 2] | 0;
 do if (!i9) i1 = 14; else {
  i6 = HEAP32[i9 + 12 >> 2] | 0;
  if ((i6 | 0) == (HEAP32[i9 + 16 >> 2] | 0)) i10 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i9 >> 2] | 0) + 36 >> 2] & 127](i9) | 0; else i10 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i6 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i10, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i3 >> 2] = 0;
   i1 = 14;
   break;
  } else if (i7) {
   i11 = i9;
   i1 = 16;
   break;
  } else {
   i12 = 6;
   i1 = 38;
   break;
  }
 } while (0);
 if ((i1 | 0) == 14) if (i7) {
  i12 = 6;
  i1 = 38;
 } else {
  i11 = 0;
  i1 = 16;
 }
 L22 : do if ((i1 | 0) == 16) {
  i7 = HEAP32[i2 >> 2] | 0;
  i9 = HEAP32[i7 + 12 >> 2] | 0;
  if ((i9 | 0) == (HEAP32[i7 + 16 >> 2] | 0)) i13 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i7 >> 2] | 0) + 36 >> 2] & 127](i7) | 0; else i13 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i9 >> 0] | 0) | 0;
  if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] & 31](i5, i13 & 255, 0) | 0) << 24 >> 24 == 37) {
   i9 = HEAP32[i2 >> 2] | 0;
   i7 = i9 + 12 | 0;
   i10 = HEAP32[i7 >> 2] | 0;
   if ((i10 | 0) == (HEAP32[i9 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i9 >> 2] | 0) + 40 >> 2] & 127](i9) | 0; else {
    HEAP32[i7 >> 2] = i10 + 1;
    __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i10 >> 0] | 0) | 0;
   }
   i10 = HEAP32[i2 >> 2] | 0;
   do if (!i10) i14 = 1; else {
    i7 = HEAP32[i10 + 12 >> 2] | 0;
    if ((i7 | 0) == (HEAP32[i10 + 16 >> 2] | 0)) i15 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 36 >> 2] & 127](i10) | 0; else i15 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i7 >> 0] | 0) | 0;
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i15, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
     HEAP32[i2 >> 2] = 0;
     i14 = 1;
     break;
    } else {
     i14 = (HEAP32[i2 >> 2] | 0) == 0;
     break;
    }
   } while (0);
   do if (i11 | 0) {
    i10 = HEAP32[i11 + 12 >> 2] | 0;
    if ((i10 | 0) == (HEAP32[i11 + 16 >> 2] | 0)) i16 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i11 >> 2] | 0) + 36 >> 2] & 127](i11) | 0; else i16 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i10 >> 0] | 0) | 0;
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i16, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
     HEAP32[i3 >> 2] = 0;
     break;
    } else if (i14) break L22; else {
     i12 = 2;
     i1 = 38;
     break L22;
    }
   } while (0);
   if (i14) {
    i12 = 2;
    i1 = 38;
   }
  } else {
   i12 = 4;
   i1 = 38;
  }
 } while (0);
 if ((i1 | 0) == 38) HEAP32[i4 >> 2] = HEAP32[i4 >> 2] | i12;
 return;
}

function _png_format_number(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0;
 i5 = 0;
 i6 = i2 + -1 | 0;
 HEAP8[i6 >> 0] = 0;
 if (i6 >>> 0 <= i1 >>> 0) {
  i7 = i6;
  return i7 | 0;
 }
 i2 = (i3 | 0) == 5;
 i8 = 0;
 i9 = 1;
 i10 = 0;
 i11 = i4;
 i12 = i6;
 L4 : while (1) {
  L6 : do switch (i3 | 0) {
  case 2:
   {
    i13 = 1;
    i14 = 0;
    i15 = i4;
    i16 = i6;
    i5 = 5;
    break L4;
    break;
   }
  case 5:
   {
    if (!((i11 | 0) != 0 | (i10 | 0) < (i9 | 0))) {
     i7 = i12;
     i5 = 22;
     break L4;
    }
    i17 = (i11 >>> 0) % 10 | 0;
    i18 = i12 + -1 | 0;
    if (!(i8 | i17)) {
     i19 = 0;
     i20 = i12;
    } else {
     HEAP8[i18 >> 0] = HEAP8[61931 + i17 >> 0] | 0;
     i19 = 1;
     i20 = i18;
    }
    i21 = i10;
    i22 = (i11 >>> 0) / 10 | 0;
    i23 = i19;
    i24 = i20;
    i25 = 5;
    break;
   }
  default:
   {
    i18 = i9;
    i17 = i10;
    i26 = i11;
    i27 = i12;
    while (1) {
     if (!((i26 | 0) != 0 | (i17 | 0) < (i18 | 0))) {
      i7 = i27;
      i5 = 22;
      break L4;
     }
     switch (i3 | 0) {
     case 3:
      {
       i28 = i18;
       i5 = 14;
       break;
      }
     case 4:
      {
       i28 = 2;
       i5 = 14;
       break;
      }
     case 1:
      {
       i29 = i27 + -1 | 0;
       HEAP8[i29 >> 0] = HEAP8[61931 + ((i26 >>> 0) % 10 | 0) >> 0] | 0;
       i30 = (i26 >>> 0) / 10 | 0;
       i31 = i29;
       i32 = i18;
       break;
      }
     default:
      {
       i21 = i17;
       i22 = 0;
       i23 = i8;
       i24 = i27;
       i25 = i18;
       break L6;
      }
     }
     if ((i5 | 0) == 14) {
      i5 = 0;
      i29 = i27 + -1 | 0;
      HEAP8[i29 >> 0] = HEAP8[61931 + (i26 & 15) >> 0] | 0;
      i30 = i26 >>> 4;
      i31 = i29;
      i32 = i28;
     }
     if (i31 >>> 0 > i1 >>> 0) {
      i18 = i32;
      i17 = i17 + 1 | 0;
      i26 = i30;
      i27 = i31;
     } else {
      i7 = i31;
      i5 = 22;
      break L4;
     }
    }
   }
  } while (0);
  i27 = i21 + 1 | 0;
  do if (i2 & (i27 | 0) == 5 & i24 >>> 0 > i1 >>> 0) {
   if (i23 | 0) {
    i26 = i24 + -1 | 0;
    HEAP8[i26 >> 0] = 46;
    i33 = i23;
    i34 = 5;
    i35 = i22;
    i36 = i26;
    break;
   }
   if (!i22) {
    i26 = i24 + -1 | 0;
    HEAP8[i26 >> 0] = 48;
    i33 = 0;
    i34 = 5;
    i35 = 0;
    i36 = i26;
   } else {
    i33 = 0;
    i34 = 5;
    i35 = i22;
    i36 = i24;
   }
  } else {
   i33 = i23;
   i34 = i27;
   i35 = i22;
   i36 = i24;
  } while (0);
  if (i36 >>> 0 > i1 >>> 0) {
   i8 = i33;
   i9 = i25;
   i10 = i34;
   i11 = i35;
   i12 = i36;
  } else {
   i7 = i36;
   i5 = 22;
   break;
  }
 }
 if ((i5 | 0) == 5) {
  while (1) {
   i5 = 0;
   if (!((i15 | 0) != 0 | (i14 | 0) < (i13 | 0))) {
    i7 = i16;
    i5 = 22;
    break;
   }
   i36 = i16 + -1 | 0;
   HEAP8[i36 >> 0] = HEAP8[61931 + ((i15 >>> 0) % 10 | 0) >> 0] | 0;
   if (i36 >>> 0 > i1 >>> 0) {
    i13 = 2;
    i14 = i14 + 1 | 0;
    i15 = (i15 >>> 0) / 10 | 0;
    i16 = i36;
    i5 = 5;
   } else {
    i7 = i36;
    i5 = 22;
    break;
   }
  }
  if ((i5 | 0) == 22) return i7 | 0;
 } else if ((i5 | 0) == 22) return i7 | 0;
 return 0;
}

function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE4syncEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i3;
 i5 = i1 + 64 | 0;
 if (!(HEAP32[i5 >> 2] | 0)) {
  i6 = 0;
  STACKTOP = i3;
  return i6 | 0;
 }
 i7 = i1 + 68 | 0;
 i8 = HEAP32[i7 >> 2] | 0;
 if (!i8) {
  i9 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i9);
  ___cxa_throw(i9 | 0, 3152, 123);
 }
 i9 = i1 + 92 | 0;
 i10 = HEAP32[i9 >> 2] | 0;
 do if (!(i10 & 16)) {
  if (i10 & 8 | 0) {
   i11 = i1 + 80 | 0;
   i12 = HEAP32[i11 + 4 >> 2] | 0;
   i13 = i4;
   HEAP32[i13 >> 2] = HEAP32[i11 >> 2];
   HEAP32[i13 + 4 >> 2] = i12;
   do if (!(HEAP8[i1 + 98 >> 0] | 0)) {
    i12 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2] & 127](i8) | 0;
    i13 = i1 + 36 | 0;
    i11 = HEAP32[i13 >> 2] | 0;
    i14 = (HEAP32[i1 + 40 >> 2] | 0) - i11 | 0;
    if ((i12 | 0) > 0) {
     i15 = 0;
     i16 = (Math_imul((HEAP32[i1 + 16 >> 2] | 0) - (HEAP32[i1 + 12 >> 2] | 0) | 0, i12) | 0) + i14 | 0;
     break;
    }
    i12 = HEAP32[i1 + 12 >> 2] | 0;
    if ((i12 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) {
     i15 = 0;
     i16 = i14;
    } else {
     i17 = HEAP32[i7 >> 2] | 0;
     i18 = i1 + 32 | 0;
     i19 = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[i17 >> 2] | 0) + 32 >> 2] & 31](i17, i4, HEAP32[i18 >> 2] | 0, i11, i12 - (HEAP32[i1 + 8 >> 2] | 0) | 0) | 0;
     i15 = 1;
     i16 = i14 - i19 + (HEAP32[i13 >> 2] | 0) - (HEAP32[i18 >> 2] | 0) | 0;
    }
   } else {
    i15 = 0;
    i16 = (HEAP32[i1 + 16 >> 2] | 0) - (HEAP32[i1 + 12 >> 2] | 0) | 0;
   } while (0);
   if (___fseeko(HEAP32[i5 >> 2] | 0, 0 - i16 | 0, 1) | 0) {
    i6 = -1;
    STACKTOP = i3;
    return i6 | 0;
   }
   if (i15) {
    i18 = i4;
    i13 = HEAP32[i18 + 4 >> 2] | 0;
    i19 = i1 + 72 | 0;
    HEAP32[i19 >> 2] = HEAP32[i18 >> 2];
    HEAP32[i19 + 4 >> 2] = i13;
   }
   i13 = HEAP32[i1 + 32 >> 2] | 0;
   HEAP32[i1 + 40 >> 2] = i13;
   HEAP32[i1 + 36 >> 2] = i13;
   HEAP32[i1 + 8 >> 2] = 0;
   HEAP32[i1 + 12 >> 2] = 0;
   HEAP32[i1 + 16 >> 2] = 0;
   HEAP32[i9 >> 2] = 0;
  }
 } else {
  if ((HEAP32[i1 + 24 >> 2] | 0) != (HEAP32[i1 + 20 >> 2] | 0)) if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 52 >> 2] & 31](i1, -1) | 0) == -1) {
   i6 = -1;
   STACKTOP = i3;
   return i6 | 0;
  }
  i13 = i1 + 72 | 0;
  i19 = i1 + 32 | 0;
  i18 = i1 + 52 | 0;
  L30 : while (1) {
   i14 = HEAP32[i7 >> 2] | 0;
   i12 = HEAP32[i19 >> 2] | 0;
   i11 = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[i14 >> 2] | 0) + 20 >> 2] & 31](i14, i13, i12, i12 + (HEAP32[i18 >> 2] | 0) | 0, i4) | 0;
   i12 = HEAP32[i19 >> 2] | 0;
   i14 = (HEAP32[i4 >> 2] | 0) - i12 | 0;
   if ((_fwrite(i12, 1, i14, HEAP32[i5 >> 2] | 0) | 0) != (i14 | 0)) {
    i6 = -1;
    i2 = 24;
    break;
   }
   switch (i11 | 0) {
   case 1:
    break;
   case 2:
    {
     i6 = -1;
     i2 = 24;
     break L30;
     break;
    }
   default:
    {
     i2 = 10;
     break L30;
    }
   }
  }
  if ((i2 | 0) == 10) {
   if (!(_fflush(HEAP32[i5 >> 2] | 0) | 0)) break; else i6 = -1;
   STACKTOP = i3;
   return i6 | 0;
  } else if ((i2 | 0) == 24) {
   STACKTOP = i3;
   return i6 | 0;
  }
 } while (0);
 i6 = 0;
 STACKTOP = i3;
 return i6 | 0;
}

function _png_do_strip_channel(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i4 = i1 + 4 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 i6 = i2 + i5 | 0;
 i7 = i1 + 10 | 0;
 switch (HEAP8[i7 >> 0] | 0) {
 case 2:
  {
   switch (HEAP8[i1 + 9 >> 0] | 0) {
   case 8:
    {
     i8 = (i3 | 0) == 0;
     i9 = i2 + 1 | 0;
     i10 = i8 ? i9 : i2;
     i11 = i8 ? i2 + 2 | 0 : i9;
     if (i11 >>> 0 < i6 >>> 0) {
      i9 = ((i2 + (i5 + -1 - i11) | 0) >>> 1) + 1 | 0;
      i8 = i10;
      i12 = i11;
      while (1) {
       HEAP8[i8 >> 0] = HEAP8[i12 >> 0] | 0;
       i12 = i12 + 2 | 0;
       if (i12 >>> 0 >= i6 >>> 0) break; else i8 = i8 + 1 | 0;
      }
      i13 = i10 + i9 | 0;
      i14 = 8;
     } else {
      i13 = i10;
      i14 = 8;
     }
     break;
    }
   case 16:
    {
     i10 = (i3 | 0) == 0;
     i9 = i2 + 2 | 0;
     i8 = i10 ? i9 : i2;
     i12 = i10 ? i2 + 4 | 0 : i9;
     if (i12 >>> 0 < i6 >>> 0) {
      i9 = ((i2 + (i5 + -1 - i12) | 0) >>> 2 << 1) + 2 | 0;
      i10 = i8;
      i11 = i12;
      while (1) {
       HEAP8[i10 >> 0] = HEAP8[i11 >> 0] | 0;
       HEAP8[i10 + 1 >> 0] = HEAP8[i11 + 1 >> 0] | 0;
       i11 = i11 + 4 | 0;
       if (i11 >>> 0 >= i6 >>> 0) break; else i10 = i10 + 2 | 0;
      }
      i13 = i8 + i9 | 0;
      i14 = 16;
     } else {
      i13 = i8;
      i14 = 16;
     }
     break;
    }
   default:
    return;
   }
   HEAP8[i1 + 11 >> 0] = i14;
   HEAP8[i7 >> 0] = 1;
   i14 = i1 + 8 | 0;
   if ((HEAP8[i14 >> 0] | 0) == 4) {
    HEAP8[i14 >> 0] = 0;
    i15 = i13;
   } else i15 = i13;
   break;
  }
 case 4:
  {
   switch (HEAP8[i1 + 9 >> 0] | 0) {
   case 8:
    {
     i13 = (i3 | 0) == 0;
     i14 = i13 ? i2 + 3 | 0 : i2;
     i8 = i13 ? i2 + 4 | 0 : i2 + 1 | 0;
     if (i8 >>> 0 < i6 >>> 0) {
      i13 = (((i2 + (i5 + -1 - i8) | 0) >>> 2) * 3 | 0) + 3 | 0;
      i9 = i8;
      i8 = i14;
      while (1) {
       HEAP8[i8 >> 0] = HEAP8[i9 >> 0] | 0;
       HEAP8[i8 + 1 >> 0] = HEAP8[i9 + 1 >> 0] | 0;
       HEAP8[i8 + 2 >> 0] = HEAP8[i9 + 2 >> 0] | 0;
       i9 = i9 + 4 | 0;
       if (i9 >>> 0 >= i6 >>> 0) break; else i8 = i8 + 3 | 0;
      }
      i16 = i14 + i13 | 0;
      i17 = 24;
     } else {
      i16 = i14;
      i17 = 24;
     }
     break;
    }
   case 16:
    {
     i14 = (i3 | 0) == 0;
     i3 = i14 ? i2 + 6 | 0 : i2;
     i13 = i14 ? i2 + 8 | 0 : i2 + 2 | 0;
     if (i13 >>> 0 < i6 >>> 0) {
      i14 = (((i2 + (i5 + -1 - i13) | 0) >>> 3) * 6 | 0) + 6 | 0;
      i5 = i13;
      i13 = i3;
      while (1) {
       HEAP8[i13 >> 0] = HEAP8[i5 >> 0] | 0;
       HEAP8[i13 + 1 >> 0] = HEAP8[i5 + 1 >> 0] | 0;
       HEAP8[i13 + 2 >> 0] = HEAP8[i5 + 2 >> 0] | 0;
       HEAP8[i13 + 3 >> 0] = HEAP8[i5 + 3 >> 0] | 0;
       HEAP8[i13 + 4 >> 0] = HEAP8[i5 + 4 >> 0] | 0;
       HEAP8[i13 + 5 >> 0] = HEAP8[i5 + 5 >> 0] | 0;
       i5 = i5 + 8 | 0;
       if (i5 >>> 0 >= i6 >>> 0) break; else i13 = i13 + 6 | 0;
      }
      i16 = i3 + i14 | 0;
      i17 = 48;
     } else {
      i16 = i3;
      i17 = 48;
     }
     break;
    }
   default:
    return;
   }
   HEAP8[i1 + 11 >> 0] = i17;
   HEAP8[i7 >> 0] = 3;
   i7 = i1 + 8 | 0;
   if ((HEAP8[i7 >> 0] | 0) == 6) {
    HEAP8[i7 >> 0] = 2;
    i15 = i16;
   } else i15 = i16;
   break;
  }
 default:
  return;
 }
 HEAP32[i4 >> 2] = i15 - i2;
 return;
}

function __ZNSt3__2L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i9 = 0;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i6 >> 2] = i4;
 i1 = i5;
 if (!(i8 & 2)) i9 = 4; else if ((i1 - i4 | 0) < 3) i10 = 1; else {
  HEAP32[i6 >> 2] = i4 + 1;
  HEAP8[i4 >> 0] = -17;
  i4 = HEAP32[i6 >> 2] | 0;
  HEAP32[i6 >> 2] = i4 + 1;
  HEAP8[i4 >> 0] = -69;
  i4 = HEAP32[i6 >> 2] | 0;
  HEAP32[i6 >> 2] = i4 + 1;
  HEAP8[i4 >> 0] = -65;
  i9 = 4;
 }
 L4 : do if ((i9 | 0) == 4) {
  i4 = i2;
  i8 = HEAP32[i3 >> 2] | 0;
  while (1) {
   if (i8 >>> 0 >= i2 >>> 0) {
    i10 = 0;
    break L4;
   }
   i5 = HEAP16[i8 >> 1] | 0;
   i11 = i5 & 65535;
   if (i11 >>> 0 > i7 >>> 0) {
    i10 = 2;
    break L4;
   }
   do if ((i5 & 65535) < 128) {
    i12 = HEAP32[i6 >> 2] | 0;
    if ((i1 - i12 | 0) < 1) {
     i10 = 1;
     break L4;
    }
    HEAP32[i6 >> 2] = i12 + 1;
    HEAP8[i12 >> 0] = i5;
   } else {
    if ((i5 & 65535) < 2048) {
     i12 = HEAP32[i6 >> 2] | 0;
     if ((i1 - i12 | 0) < 2) {
      i10 = 1;
      break L4;
     }
     HEAP32[i6 >> 2] = i12 + 1;
     HEAP8[i12 >> 0] = i11 >>> 6 | 192;
     i12 = HEAP32[i6 >> 2] | 0;
     HEAP32[i6 >> 2] = i12 + 1;
     HEAP8[i12 >> 0] = i11 & 63 | 128;
     break;
    }
    if ((i5 & 65535) < 55296) {
     i12 = HEAP32[i6 >> 2] | 0;
     if ((i1 - i12 | 0) < 3) {
      i10 = 1;
      break L4;
     }
     HEAP32[i6 >> 2] = i12 + 1;
     HEAP8[i12 >> 0] = i11 >>> 12 | 224;
     i12 = HEAP32[i6 >> 2] | 0;
     HEAP32[i6 >> 2] = i12 + 1;
     HEAP8[i12 >> 0] = i11 >>> 6 & 63 | 128;
     i12 = HEAP32[i6 >> 2] | 0;
     HEAP32[i6 >> 2] = i12 + 1;
     HEAP8[i12 >> 0] = i11 & 63 | 128;
     break;
    }
    if ((i5 & 65535) >= 56320) {
     if ((i5 & 65535) < 57344) {
      i10 = 2;
      break L4;
     }
     i12 = HEAP32[i6 >> 2] | 0;
     if ((i1 - i12 | 0) < 3) {
      i10 = 1;
      break L4;
     }
     HEAP32[i6 >> 2] = i12 + 1;
     HEAP8[i12 >> 0] = i11 >>> 12 | 224;
     i12 = HEAP32[i6 >> 2] | 0;
     HEAP32[i6 >> 2] = i12 + 1;
     HEAP8[i12 >> 0] = i11 >>> 6 & 63 | 128;
     i12 = HEAP32[i6 >> 2] | 0;
     HEAP32[i6 >> 2] = i12 + 1;
     HEAP8[i12 >> 0] = i11 & 63 | 128;
     break;
    }
    if ((i4 - i8 | 0) < 4) {
     i10 = 1;
     break L4;
    }
    i12 = i8 + 2 | 0;
    i13 = HEAPU16[i12 >> 1] | 0;
    if ((i13 & 64512 | 0) != 56320) {
     i10 = 2;
     break L4;
    }
    if ((i1 - (HEAP32[i6 >> 2] | 0) | 0) < 4) {
     i10 = 1;
     break L4;
    }
    i14 = i11 & 960;
    if (((i14 << 10) + 65536 | i11 << 10 & 64512 | i13 & 1023) >>> 0 > i7 >>> 0) {
     i10 = 2;
     break L4;
    }
    HEAP32[i3 >> 2] = i12;
    i12 = (i14 >>> 6) + 1 | 0;
    i14 = HEAP32[i6 >> 2] | 0;
    HEAP32[i6 >> 2] = i14 + 1;
    HEAP8[i14 >> 0] = i12 >>> 2 | 240;
    i14 = HEAP32[i6 >> 2] | 0;
    HEAP32[i6 >> 2] = i14 + 1;
    HEAP8[i14 >> 0] = i11 >>> 2 & 15 | i12 << 4 & 48 | 128;
    i12 = HEAP32[i6 >> 2] | 0;
    HEAP32[i6 >> 2] = i12 + 1;
    HEAP8[i12 >> 0] = i11 << 4 & 48 | i13 >>> 6 & 15 | 128;
    i12 = HEAP32[i6 >> 2] | 0;
    HEAP32[i6 >> 2] = i12 + 1;
    HEAP8[i12 >> 0] = i13 & 63 | 128;
   } while (0);
   i11 = (HEAP32[i3 >> 2] | 0) + 2 | 0;
   HEAP32[i3 >> 2] = i11;
   i8 = i11;
  }
 } while (0);
 return i10 | 0;
}

function __ZNSt3__2L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i9 = 0;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i6 >> 2] = i4;
 if (!(i8 & 4)) i10 = i2; else {
  i8 = HEAP32[i3 >> 2] | 0;
  i4 = i2;
  if ((i4 - i8 | 0) > 2) if ((HEAP8[i8 >> 0] | 0) == -17) if ((HEAP8[i8 + 1 >> 0] | 0) == -69) if ((HEAP8[i8 + 2 >> 0] | 0) == -65) {
   HEAP32[i3 >> 2] = i8 + 3;
   i10 = i4;
  } else i10 = i4; else i10 = i4; else i10 = i4; else i10 = i4;
 }
 L9 : while (1) {
  i4 = HEAP32[i3 >> 2] | 0;
  i11 = i4 >>> 0 < i2 >>> 0;
  if (!i11) {
   i9 = 36;
   break;
  }
  i8 = HEAP32[i6 >> 2] | 0;
  if (i8 >>> 0 >= i5 >>> 0) {
   i9 = 36;
   break;
  }
  i1 = HEAP8[i4 >> 0] | 0;
  i12 = i1 & 255;
  do if (i1 << 24 >> 24 > -1) if (i12 >>> 0 > i7 >>> 0) {
   i13 = 2;
   break L9;
  } else {
   i14 = i12;
   i15 = 1;
  } else {
   if ((i1 & 255) < 194) {
    i13 = 2;
    break L9;
   }
   if ((i1 & 255) < 224) {
    if ((i10 - i4 | 0) < 2) {
     i13 = 1;
     break L9;
    }
    i16 = HEAPU8[i4 + 1 >> 0] | 0;
    if ((i16 & 192 | 0) != 128) {
     i13 = 2;
     break L9;
    }
    i17 = i16 & 63 | i12 << 6 & 1984;
    if (i17 >>> 0 > i7 >>> 0) {
     i13 = 2;
     break L9;
    } else {
     i14 = i17;
     i15 = 2;
     break;
    }
   }
   if ((i1 & 255) < 240) {
    if ((i10 - i4 | 0) < 3) {
     i13 = 1;
     break L9;
    }
    i17 = HEAP8[i4 + 1 >> 0] | 0;
    i16 = HEAP8[i4 + 2 >> 0] | 0;
    switch (i1 << 24 >> 24) {
    case -32:
     {
      if ((i17 & -32) << 24 >> 24 != -96) {
       i13 = 2;
       break L9;
      }
      break;
     }
    case -19:
     {
      if ((i17 & -32) << 24 >> 24 != -128) {
       i13 = 2;
       break L9;
      }
      break;
     }
    default:
     if ((i17 & -64) << 24 >> 24 != -128) {
      i13 = 2;
      break L9;
     }
    }
    i18 = i16 & 255;
    if ((i18 & 192 | 0) != 128) {
     i13 = 2;
     break L9;
    }
    i16 = (i17 & 63) << 6 | i12 << 12 & 61440 | i18 & 63;
    if (i16 >>> 0 > i7 >>> 0) {
     i13 = 2;
     break L9;
    } else {
     i14 = i16;
     i15 = 3;
     break;
    }
   }
   if ((i1 & 255) >= 245) {
    i13 = 2;
    break L9;
   }
   if ((i10 - i4 | 0) < 4) {
    i13 = 1;
    break L9;
   }
   i16 = HEAP8[i4 + 1 >> 0] | 0;
   i18 = HEAP8[i4 + 2 >> 0] | 0;
   i17 = HEAP8[i4 + 3 >> 0] | 0;
   switch (i1 << 24 >> 24) {
   case -16:
    {
     if ((i16 + 112 & 255) >= 48) {
      i13 = 2;
      break L9;
     }
     break;
    }
   case -12:
    {
     if ((i16 & -16) << 24 >> 24 != -128) {
      i13 = 2;
      break L9;
     }
     break;
    }
   default:
    if ((i16 & -64) << 24 >> 24 != -128) {
     i13 = 2;
     break L9;
    }
   }
   i19 = i18 & 255;
   if ((i19 & 192 | 0) != 128) {
    i13 = 2;
    break L9;
   }
   i18 = i17 & 255;
   if ((i18 & 192 | 0) != 128) {
    i13 = 2;
    break L9;
   }
   i17 = (i16 & 63) << 12 | i12 << 18 & 1835008 | i19 << 6 & 4032 | i18 & 63;
   if (i17 >>> 0 > i7 >>> 0) {
    i13 = 2;
    break L9;
   } else {
    i14 = i17;
    i15 = 4;
   }
  } while (0);
  HEAP32[i8 >> 2] = i14;
  HEAP32[i3 >> 2] = i4 + i15;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 4;
 }
 if ((i9 | 0) == 36) i13 = i11 & 1;
 return i13 | 0;
}

function __ZN5ImGui11RenderFrameE6ImVec2S0_jbf(i1, i2, i3, i4, f5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 f5 = Math_fround(f5);
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, f11 = f0, f12 = f0, f13 = f0, f14 = f0, f15 = f0, f16 = f0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i6 + 8 | 0;
 i8 = i6;
 i9 = HEAP32[1460598] | 0;
 i10 = (HEAP32[i9 + 6392 >> 2] | 0) + 632 | 0;
 __ZN10ImDrawList13AddRectFilledERK6ImVec2S2_jfi(HEAP32[i10 >> 2] | 0, i1, i2, i3, f5, 15);
 f11 = Math_fround(HEAPF32[i9 + 5420 >> 2]);
 if (!(f11 > Math_fround(0.0) & i4)) {
  STACKTOP = i6;
  return;
 }
 i4 = HEAP32[i10 >> 2] | 0;
 f12 = Math_fround(Math_fround(HEAPF32[i1 >> 2]) + Math_fround(1.0));
 f13 = Math_fround(Math_fround(HEAPF32[i1 + 4 >> 2]) + Math_fround(1.0));
 HEAPF32[i7 >> 2] = f12;
 HEAPF32[i7 + 4 >> 2] = f13;
 f13 = Math_fround(Math_fround(HEAPF32[i2 >> 2]) + Math_fround(1.0));
 f12 = Math_fround(Math_fround(HEAPF32[i2 + 4 >> 2]) + Math_fround(1.0));
 HEAPF32[i8 >> 2] = f13;
 HEAPF32[i8 + 4 >> 2] = f12;
 i9 = HEAP32[1460598] | 0;
 f12 = Math_fround(HEAPF32[i9 + 5604 >> 2]);
 f13 = Math_fround(HEAPF32[i9 + 5608 >> 2]);
 f14 = Math_fround(HEAPF32[i9 + 5612 >> 2]);
 f15 = Math_fround(HEAPF32[i9 + 5616 >> 2]);
 f16 = Math_fround(f15 * Math_fround(HEAPF32[i9 + 5356 >> 2]));
 i9 = f12 < Math_fround(0.0);
 i3 = f12 > Math_fround(1.0);
 i17 = ~~Math_fround(Math_fround((i3 ? Math_fround(1.0) : f12) * Math_fround(255.0)) + Math_fround(.5));
 i3 = f13 < Math_fround(0.0);
 i18 = f13 > Math_fround(1.0);
 i19 = ~~Math_fround(Math_fround((i18 ? Math_fround(1.0) : f13) * Math_fround(255.0)) + Math_fround(.5)) << 8;
 i18 = f14 < Math_fround(0.0);
 i20 = f14 > Math_fround(1.0);
 i21 = ~~Math_fround(Math_fround((i20 ? Math_fround(1.0) : f14) * Math_fround(255.0)) + Math_fround(.5)) << 16;
 i20 = f16 < Math_fround(0.0);
 i22 = f16 > Math_fround(1.0);
 i23 = ~~Math_fround(Math_fround((i22 ? Math_fround(1.0) : f16) * Math_fround(255.0)) + Math_fround(.5)) << 24;
 __ZN10ImDrawList7AddRectERK6ImVec2S2_jfif(i4, i7, i8, (i3 ? 0 : i19) | (i9 ? 0 : i17) | (i18 ? 0 : i21) | (i20 ? 0 : i23), f5, 15, f11);
 i23 = HEAP32[1460598] | 0;
 f16 = Math_fround(HEAPF32[i23 + 5588 >> 2]);
 f14 = Math_fround(HEAPF32[i23 + 5592 >> 2]);
 f13 = Math_fround(HEAPF32[i23 + 5596 >> 2]);
 f12 = Math_fround(HEAPF32[i23 + 5600 >> 2]);
 f15 = Math_fround(f12 * Math_fround(HEAPF32[i23 + 5356 >> 2]));
 i23 = f16 < Math_fround(0.0);
 i20 = f16 > Math_fround(1.0);
 i21 = ~~Math_fround(Math_fround((i20 ? Math_fround(1.0) : f16) * Math_fround(255.0)) + Math_fround(.5));
 i20 = f14 < Math_fround(0.0);
 i18 = f14 > Math_fround(1.0);
 i17 = ~~Math_fround(Math_fround((i18 ? Math_fround(1.0) : f14) * Math_fround(255.0)) + Math_fround(.5)) << 8;
 i18 = f13 < Math_fround(0.0);
 i9 = f13 > Math_fround(1.0);
 i19 = ~~Math_fround(Math_fround((i9 ? Math_fround(1.0) : f13) * Math_fround(255.0)) + Math_fround(.5)) << 16;
 i9 = f15 < Math_fround(0.0);
 i3 = f15 > Math_fround(1.0);
 i8 = ~~Math_fround(Math_fround((i3 ? Math_fround(1.0) : f15) * Math_fround(255.0)) + Math_fround(.5)) << 24;
 __ZN10ImDrawList7AddRectERK6ImVec2S2_jfif(HEAP32[i10 >> 2] | 0, i1, i2, (i20 ? 0 : i17) | (i23 ? 0 : i21) | (i18 ? 0 : i19) | (i9 ? 0 : i8), f5, 15, f11);
 STACKTOP = i6;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i1 = 0;
 L1 : while (1) {
  i6 = HEAP32[i2 >> 2] | 0;
  do if (!i6) i7 = 1; else {
   i8 = HEAP32[i6 + 12 >> 2] | 0;
   if ((i8 | 0) == (HEAP32[i6 + 16 >> 2] | 0)) i9 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] & 127](i6) | 0; else i9 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i8 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i9, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i2 >> 2] = 0;
    i7 = 1;
    break;
   } else {
    i7 = (HEAP32[i2 >> 2] | 0) == 0;
    break;
   }
  } while (0);
  i6 = HEAP32[i3 >> 2] | 0;
  do if (!i6) i1 = 15; else {
   i8 = HEAP32[i6 + 12 >> 2] | 0;
   if ((i8 | 0) == (HEAP32[i6 + 16 >> 2] | 0)) i10 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] & 127](i6) | 0; else i10 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i8 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i10, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i3 >> 2] = 0;
    i1 = 15;
    break;
   } else if (i7) {
    i11 = i6;
    break;
   } else {
    i12 = i6;
    break L1;
   }
  } while (0);
  if ((i1 | 0) == 15) {
   i1 = 0;
   if (i7) {
    i12 = 0;
    break;
   } else i11 = 0;
  }
  i6 = HEAP32[i2 >> 2] | 0;
  i8 = HEAP32[i6 + 12 >> 2] | 0;
  if ((i8 | 0) == (HEAP32[i6 + 16 >> 2] | 0)) i13 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] & 127](i6) | 0; else i13 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i8 >> 2] | 0) | 0;
  if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] & 31](i5, 8192, i13) | 0)) {
   i12 = i11;
   break;
  }
  i8 = HEAP32[i2 >> 2] | 0;
  i6 = i8 + 12 | 0;
  i14 = HEAP32[i6 >> 2] | 0;
  if ((i14 | 0) == (HEAP32[i8 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 40 >> 2] & 127](i8) | 0;
   continue;
  } else {
   HEAP32[i6 >> 2] = i14 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i14 >> 2] | 0) | 0;
   continue;
  }
 }
 i11 = HEAP32[i2 >> 2] | 0;
 do if (!i11) i15 = 1; else {
  i13 = HEAP32[i11 + 12 >> 2] | 0;
  if ((i13 | 0) == (HEAP32[i11 + 16 >> 2] | 0)) i16 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i11 >> 2] | 0) + 36 >> 2] & 127](i11) | 0; else i16 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i13 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i16, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i2 >> 2] = 0;
   i15 = 1;
   break;
  } else {
   i15 = (HEAP32[i2 >> 2] | 0) == 0;
   break;
  }
 } while (0);
 do if (!i12) i1 = 37; else {
  i2 = HEAP32[i12 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i12 + 16 >> 2] | 0)) i17 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i12 >> 2] | 0) + 36 >> 2] & 127](i12) | 0; else i17 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i17, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i3 >> 2] = 0;
   i1 = 37;
   break;
  } else if (i15) break; else {
   i1 = 39;
   break;
  }
 } while (0);
 if ((i1 | 0) == 37) if (i15) i1 = 39;
 if ((i1 | 0) == 39) HEAP32[i4 >> 2] = HEAP32[i4 >> 2] | 2;
 return;
}

function __ZN5ImGui10EndMenuBarEv() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, f10 = f0, f11 = f0;
 i1 = HEAP32[1460598] | 0;
 i2 = HEAP32[i1 + 6392 >> 2] | 0;
 HEAP8[i2 + 120 >> 0] = 1;
 if (HEAP8[i2 + 123 >> 0] | 0) return;
 if (!(HEAP8[i1 + 6757 >> 0] | 0)) i3 = i1; else if (!(HEAP32[i1 + 6780 >> 2] | 0)) if (!(HEAP32[i1 + 6852 >> 2] | 0)) if ((HEAP32[i1 + 6768 >> 2] | 0) >>> 0 < 2) {
  i4 = HEAP32[i1 + 6644 >> 2] | 0;
  if (!(HEAP32[i4 + 8 >> 2] & 268435456)) i3 = i1; else {
   i5 = i4;
   while (1) {
    i6 = HEAP32[i5 + 752 >> 2] | 0;
    if (!i6) break;
    if (!(HEAP32[i6 + 8 >> 2] & 268435456)) break; else i5 = i6;
   }
   if ((i6 | 0) == (i2 | 0)) if ((HEAP32[i5 + 348 >> 2] | 0) == 1) {
    i5 = i1 + 6764 | 0;
    if (!(HEAP32[i5 >> 2] | 0)) {
     if (!(HEAP32[i2 + 312 >> 2] & 2)) ___assert_fail(37991, 31803, 11758, 38032);
     __ZN5ImGui11FocusWindowEP11ImGuiWindow(i2);
     i6 = HEAP32[i2 + 780 >> 2] | 0;
     i4 = HEAP32[1460598] | 0;
     i7 = i4 + 6644 | 0;
     i8 = HEAP32[i7 >> 2] | 0;
     if (!i8) ___assert_fail(36460, 31803, 2162, 33697);
     i9 = i2 + 800 | 0;
     HEAP32[i4 + 6648 >> 2] = i6;
     HEAP32[i8 + 780 >> 2] = i6;
     i6 = i8 + 800 | 0;
     HEAP32[i6 >> 2] = HEAP32[i9 >> 2];
     HEAP32[i6 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
     HEAP32[i6 + 8 >> 2] = HEAP32[i9 + 8 >> 2];
     HEAP32[i6 + 12 >> 2] = HEAP32[i9 + 12 >> 2];
     HEAP8[i4 + 6729 >> 0] = 1;
     HEAP8[i4 + 6730 >> 0] = 0;
     HEAP8[i4 + 6731 >> 0] = 1;
     HEAP32[i1 + 6720 >> 2] = 1;
     HEAP8[i1 + 6730 >> 0] = 1;
     HEAP32[i5 >> 2] = 1;
     HEAP8[i4 + 6757 >> 0] = 0;
     i5 = HEAP8[i4 + 6733 >> 0] | 0;
     HEAP8[i4 + 6732 >> 0] = i5;
     if (!(i5 << 24 >> 24)) i3 = i4; else if (!(HEAP32[i7 >> 2] | 0)) ___assert_fail(34237, 31803, 2509, 34255); else i3 = i4;
    } else i3 = i1;
   } else i3 = i1; else i3 = i1;
  }
 } else i3 = i1; else i3 = i1; else i3 = i1;
 if (!(HEAP32[i2 + 8 >> 2] & 1024)) ___assert_fail(38043, 31803, 11768, 38032);
 i1 = i2 + 316 | 0;
 if (!(HEAP8[i1 >> 0] | 0)) ___assert_fail(38084, 31803, 11769, 38032);
 i4 = HEAP32[i3 + 6392 >> 2] | 0;
 HEAP8[i4 + 120 >> 0] = 1;
 i3 = i4 + 632 | 0;
 __ZN10ImDrawList11PopClipRectEv(HEAP32[i3 >> 2] | 0);
 i7 = HEAP32[i3 >> 2] | 0;
 i3 = HEAP32[i7 + 60 >> 2] | 0;
 if ((i3 | 0) <= 0) ___assert_fail(38278, 56850, 1245, 38287);
 i5 = HEAP32[i7 + 68 >> 2] | 0;
 i7 = i3 + -1 | 0;
 i3 = i5 + (i7 << 4) | 0;
 i7 = HEAP32[i3 + 4 >> 2] | 0;
 i5 = HEAP32[i3 + 8 >> 2] | 0;
 i9 = HEAP32[i3 + 12 >> 2] | 0;
 HEAP32[i4 + 464 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i4 + 468 >> 2] = i7;
 HEAP32[i4 + 472 >> 2] = i5;
 HEAP32[i4 + 476 >> 2] = i9;
 i9 = (HEAP32[(HEAP32[1460598] | 0) + 6392 >> 2] | 0) + 452 | 0;
 i4 = HEAP32[i9 >> 2] | 0;
 if ((i4 | 0) <= 0) ___assert_fail(38278, 56850, 1268, 31920);
 HEAP32[i9 >> 2] = i4 + -1;
 f10 = Math_fround(HEAPF32[i2 + 196 >> 2]);
 f11 = Math_fround(f10 - Math_fround(HEAPF32[i2 + 12 >> 2]));
 HEAPF32[i2 + 320 >> 2] = f11;
 i4 = HEAP32[i2 + 400 >> 2] | 0;
 if ((i4 | 0) <= 0) ___assert_fail(38278, 56850, 1245, 38287);
 HEAP8[(HEAP32[i2 + 408 >> 2] | 0) + ((i4 + -1 | 0) * 40 | 0) + 38 >> 0] = 0;
 __ZN5ImGui8EndGroupEv();
 HEAP32[i2 + 344 >> 2] = 0;
 i4 = i2 + 300 | 0;
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + -1;
 i4 = i2 + 304 | 0;
 HEAP32[i4 >> 2] = HEAP32[i4 >> 2] >> 1;
 HEAP8[i1 >> 0] = 0;
 return;
}

function __ZN8ImGuiStbL19stb_text_createundoEPNS_12StbUndoStateEiii(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0;
 HEAP16[i1 + 3584 >> 1] = 99;
 HEAP32[i1 + 3592 >> 2] = 999;
 i5 = i1 + 3582 | 0;
 if ((HEAP16[i5 >> 1] | 0) == 99) {
  i6 = HEAP32[i1 + 12 >> 2] | 0;
  L3 : do if ((i6 | 0) > -1) {
   i7 = HEAP32[i1 + 4 >> 2] | 0;
   i8 = i1 + 3588 | 0;
   i9 = (HEAP32[i8 >> 2] | 0) - i7 | 0;
   HEAP32[i8 >> 2] = i9;
   _memmove(i1 + 1584 | 0, i1 + 1584 + (i7 << 1) | 0, i9 << 1 | 0) | 0;
   i9 = HEAP16[i5 >> 1] | 0;
   if (i9 << 16 >> 16 > 0) {
    i8 = 0;
    i10 = i6;
    i11 = i9;
    while (1) {
     if ((i10 | 0) > -1) {
      HEAP32[i1 + (i8 << 4) + 12 >> 2] = i10 - i7;
      i12 = HEAP16[i5 >> 1] | 0;
     } else i12 = i11;
     i13 = i8 + 1 | 0;
     if ((i13 | 0) >= (i12 << 16 >> 16 | 0)) {
      i14 = i12;
      break L3;
     }
     i8 = i13;
     i10 = HEAP32[i1 + (i13 << 4) + 12 >> 2] | 0;
     i11 = i12;
    }
   } else i14 = i9;
  } else i14 = 99; while (0);
  i12 = i14 + -1 << 16 >> 16;
  HEAP16[i5 >> 1] = i12;
  _memmove(i1 | 0, i1 + 16 | 0, i12 << 16 >> 16 << 4 | 0) | 0;
 }
 if ((i3 | 0) > 999) {
  HEAP16[i5 >> 1] = 0;
  HEAP32[i1 + 3588 >> 2] = 0;
  i15 = 0;
  return i15 | 0;
 }
 i12 = i1 + 3588 | 0;
 i14 = HEAP32[i12 >> 2] | 0;
 i6 = HEAP16[i5 >> 1] | 0;
 if ((i14 + i3 | 0) > 999) {
  i11 = i1 + 12 | 0;
  i10 = i1 + 4 | 0;
  i8 = i1 + 1584 | 0;
  i7 = i1 + 16 | 0;
  i13 = i6;
  i16 = i14;
  while (1) {
   if (i13 << 16 >> 16 > 0) {
    i14 = HEAP32[i11 >> 2] | 0;
    L23 : do if ((i14 | 0) > -1) {
     i17 = HEAP32[i10 >> 2] | 0;
     i18 = i16 - i17 | 0;
     HEAP32[i12 >> 2] = i18;
     _memmove(i8 | 0, i1 + 1584 + (i17 << 1) | 0, i18 << 1 | 0) | 0;
     i18 = HEAP16[i5 >> 1] | 0;
     if (i18 << 16 >> 16 > 0) {
      i19 = 0;
      i20 = i14;
      i21 = i18;
      while (1) {
       if ((i20 | 0) > -1) {
        HEAP32[i1 + (i19 << 4) + 12 >> 2] = i20 - i17;
        i22 = HEAP16[i5 >> 1] | 0;
       } else i22 = i21;
       i23 = i19 + 1 | 0;
       if ((i23 | 0) >= (i22 << 16 >> 16 | 0)) {
        i24 = i22;
        break L23;
       }
       i19 = i23;
       i20 = HEAP32[i1 + (i23 << 4) + 12 >> 2] | 0;
       i21 = i22;
      }
     } else i24 = i18;
    } else i24 = i13; while (0);
    i14 = i24 + -1 << 16 >> 16;
    HEAP16[i5 >> 1] = i14;
    _memmove(i1 | 0, i7 | 0, i14 << 16 >> 16 << 4 | 0) | 0;
    i25 = HEAP32[i12 >> 2] | 0;
    i26 = HEAP16[i5 >> 1] | 0;
   } else {
    i25 = i16;
    i26 = i13;
   }
   if ((i25 + i3 | 0) > 999) {
    i13 = i26;
    i16 = i25;
   } else {
    i27 = i26;
    break;
   }
  }
 } else i27 = i6;
 HEAP16[i5 >> 1] = i27 + 1 << 16 >> 16;
 i5 = i27 << 16 >> 16;
 i27 = i1 + (i5 << 4) | 0;
 if (!i27) {
  i15 = 0;
  return i15 | 0;
 }
 HEAP32[i27 >> 2] = i2;
 i2 = i1 + (i5 << 4) | 0;
 HEAP32[i2 + 4 >> 2] = i3;
 HEAP32[i2 + 8 >> 2] = i4;
 if (!i3) {
  HEAP32[i1 + (i5 << 4) + 12 >> 2] = -1;
  i15 = 0;
  return i15 | 0;
 } else {
  i4 = HEAP32[i12 >> 2] | 0;
  HEAP32[i1 + (i5 << 4) + 12 >> 2] = i4;
  HEAP32[i12 >> 2] = i4 + i3;
  i15 = i1 + 1584 + (i4 << 1) | 0;
  return i15 | 0;
 }
 return 0;
}

function __ZN11RenderQueue10setProgramEi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0;
 i3 = 0;
 i4 = i1 + 96 | 0;
 i5 = i1 + 100 | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 do if (!i6) {
  i7 = i5;
  i8 = i5;
 } else {
  i9 = i1 + 100 | 0;
  i10 = i6;
  while (1) {
   i11 = HEAP32[i10 + 16 >> 2] | 0;
   if ((i11 | 0) > (i2 | 0)) {
    i12 = HEAP32[i10 >> 2] | 0;
    if (!i12) {
     i3 = 6;
     break;
    } else {
     i13 = i10;
     i14 = i12;
    }
   } else {
    if ((i11 | 0) >= (i2 | 0)) {
     i3 = 10;
     break;
    }
    i15 = i10 + 4 | 0;
    i11 = HEAP32[i15 >> 2] | 0;
    if (!i11) {
     i3 = 9;
     break;
    } else {
     i13 = i15;
     i14 = i11;
    }
   }
   i9 = i13;
   i10 = i14;
  }
  if ((i3 | 0) == 6) {
   i7 = i10;
   i8 = i10;
   break;
  } else if ((i3 | 0) == 9) {
   i7 = i10;
   i8 = i15;
   break;
  } else if ((i3 | 0) == 10) {
   i7 = i10;
   i8 = i9;
   break;
  }
 } while (0);
 if (!(HEAP32[i8 >> 2] | 0)) {
  i15 = __Znwj(32) | 0;
  HEAP32[i15 + 16 >> 2] = i2;
  i14 = i15 + 24 | 0;
  HEAP32[i14 >> 2] = 0;
  HEAP32[i15 + 28 >> 2] = 0;
  HEAP32[i15 + 20 >> 2] = i14;
  HEAP32[i15 >> 2] = 0;
  HEAP32[i15 + 4 >> 2] = 0;
  HEAP32[i15 + 8 >> 2] = i7;
  HEAP32[i8 >> 2] = i15;
  i7 = HEAP32[HEAP32[i4 >> 2] >> 2] | 0;
  if (!i7) i16 = i15; else {
   HEAP32[i4 >> 2] = i7;
   i16 = HEAP32[i8 >> 2] | 0;
  }
  __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[i1 + 100 >> 2] | 0, i16);
  i16 = i1 + 104 | 0;
  HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
  i17 = HEAP32[i5 >> 2] | 0;
 } else i17 = i6;
 do if (!i17) {
  i18 = i5;
  i19 = i5;
 } else {
  i6 = i1 + 100 | 0;
  i16 = i17;
  while (1) {
   i8 = HEAP32[i16 + 16 >> 2] | 0;
   if ((i8 | 0) > (i2 | 0)) {
    i7 = HEAP32[i16 >> 2] | 0;
    if (!i7) {
     i3 = 21;
     break;
    } else {
     i20 = i16;
     i21 = i7;
    }
   } else {
    if ((i8 | 0) >= (i2 | 0)) {
     i3 = 25;
     break;
    }
    i22 = i16 + 4 | 0;
    i8 = HEAP32[i22 >> 2] | 0;
    if (!i8) {
     i3 = 24;
     break;
    } else {
     i20 = i22;
     i21 = i8;
    }
   }
   i6 = i20;
   i16 = i21;
  }
  if ((i3 | 0) == 21) {
   i18 = i16;
   i19 = i16;
   break;
  } else if ((i3 | 0) == 24) {
   i18 = i16;
   i19 = i22;
   break;
  } else if ((i3 | 0) == 25) {
   i18 = i16;
   i19 = i6;
   break;
  }
 } while (0);
 i3 = HEAP32[i19 >> 2] | 0;
 if (i3 | 0) {
  i23 = i3;
  i24 = i23 + 20 | 0;
  i25 = i1 + 116 | 0;
  HEAP32[i25 >> 2] = i24;
  return;
 }
 i3 = __Znwj(32) | 0;
 HEAP32[i3 + 16 >> 2] = i2;
 i2 = i3 + 24 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i3 + 28 >> 2] = 0;
 HEAP32[i3 + 20 >> 2] = i2;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = i18;
 HEAP32[i19 >> 2] = i3;
 i18 = HEAP32[HEAP32[i4 >> 2] >> 2] | 0;
 if (!i18) i26 = i3; else {
  HEAP32[i4 >> 2] = i18;
  i26 = HEAP32[i19 >> 2] | 0;
 }
 __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[i1 + 100 >> 2] | 0, i26);
 i26 = i1 + 104 | 0;
 HEAP32[i26 >> 2] = (HEAP32[i26 >> 2] | 0) + 1;
 i23 = i3;
 i24 = i23 + 20 | 0;
 i25 = i1 + 116 | 0;
 HEAP32[i25 >> 2] = i24;
 return;
}

function __ZN5ImGui5DummyERK6ImVec2(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, f6 = f0, f7 = f0, f8 = f0, f9 = f0, f10 = f0, f11 = f0, f12 = f0, f13 = f0, f14 = f0, f15 = f0, i16 = 0, i17 = 0, f18 = f0, f19 = f0, i20 = 0, f21 = f0, f22 = f0, f23 = f0, i24 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i3;
 i5 = HEAP32[(HEAP32[1460598] | 0) + 6392 >> 2] | 0;
 HEAP8[i5 + 120 >> 0] = 1;
 if (HEAP8[i5 + 123 >> 0] | 0) {
  STACKTOP = i3;
  return;
 }
 f6 = Math_fround(HEAPF32[i5 + 196 >> 2]);
 f7 = Math_fround(f6 + Math_fround(HEAPF32[i1 >> 2]));
 f8 = Math_fround(HEAPF32[i5 + 200 >> 2]);
 f9 = Math_fround(f8 + Math_fround(HEAPF32[i1 + 4 >> 2]));
 f10 = Math_fround(f7);
 f11 = Math_fround(f9);
 f12 = Math_fround(f6);
 f13 = Math_fround(f8);
 f14 = Math_fround(f7 - f6);
 f15 = Math_fround(f9 - f8);
 HEAPF32[i4 >> 2] = f14;
 HEAPF32[i4 + 4 >> 2] = f15;
 __ZN5ImGui8ItemSizeERK6ImVec2f(i4, Math_fround(0.0));
 i1 = HEAP32[1460598] | 0;
 i5 = i1 + 6392 | 0;
 i16 = HEAP32[i5 >> 2] | 0;
 HEAP32[i16 + 256 >> 2] = 0;
 HEAPF32[i16 + 264 >> 2] = f6;
 HEAPF32[i16 + 268 >> 2] = f8;
 HEAPF32[i16 + 272 >> 2] = f7;
 HEAPF32[i16 + 276 >> 2] = f9;
 i17 = i16 + 260 | 0;
 HEAP32[i17 >> 2] = 0;
 i16 = HEAP32[i5 >> 2] | 0;
 f15 = Math_fround(HEAPF32[i16 + 468 >> 2]);
 if (f15 < f9) {
  f14 = Math_fround(HEAPF32[i16 + 476 >> 2]);
  if (f14 > f8) {
   f18 = Math_fround(HEAPF32[i16 + 464 >> 2]);
   if (f18 < f7) {
    f19 = Math_fround(HEAPF32[i16 + 472 >> 2]);
    if (f19 > f6) {
     i20 = i16 + 472 | 0;
     f21 = f18;
     f22 = f19;
     f23 = f14;
    } else i2 = 7;
   } else i2 = 7;
  } else i2 = 7;
 } else i2 = 7;
 do if ((i2 | 0) == 7) if (!(HEAP8[i1 + 11092 >> 0] | 0)) {
  STACKTOP = i3;
  return;
 } else {
  f14 = Math_fround(HEAPF32[i16 + 464 >> 2]);
  i5 = i16 + 472 | 0;
  f19 = Math_fround(HEAPF32[i5 >> 2]);
  i20 = i5;
  f21 = f14;
  f22 = f19;
  f23 = Math_fround(HEAPF32[i16 + 476 >> 2]);
  break;
 } while (0);
 i2 = i4;
 HEAPF32[i2 >> 2] = f12;
 HEAPF32[i2 + 4 >> 2] = f13;
 i2 = i4 + 8 | 0;
 i5 = i2;
 HEAPF32[i5 >> 2] = f10;
 HEAPF32[i5 + 4 >> 2] = f11;
 i5 = i16 + 464 | 0;
 i16 = HEAP32[(f21 <= f6 ? i4 : i5) >> 2] | 0;
 i24 = HEAP32[(f15 <= f8 ? i4 : i5) + 4 >> 2] | 0;
 i5 = i4;
 HEAP32[i5 >> 2] = i16;
 HEAP32[i5 + 4 >> 2] = i24;
 i5 = HEAP32[(f22 > f7 ? i2 : i20) >> 2] | 0;
 i4 = HEAP32[(f23 > f9 ? i2 : i20) + 4 >> 2] | 0;
 i20 = i2;
 HEAP32[i20 >> 2] = i5;
 HEAP32[i20 + 4 >> 2] = i4;
 f9 = (HEAP32[tempDoublePtr >> 2] = i16, Math_fround(HEAPF32[tempDoublePtr >> 2]));
 f23 = Math_fround(HEAPF32[i1 + 5440 >> 2]);
 f7 = Math_fround(f9 - f23);
 f9 = Math_fround(HEAPF32[i1 + 5444 >> 2]);
 f22 = Math_fround(HEAPF32[i1 + 212 >> 2]);
 if (!(f22 >= f7)) {
  STACKTOP = i3;
  return;
 }
 f7 = (HEAP32[tempDoublePtr >> 2] = i24, Math_fround(HEAPF32[tempDoublePtr >> 2]));
 f8 = (HEAP32[tempDoublePtr >> 2] = i5, Math_fround(HEAPF32[tempDoublePtr >> 2]));
 f15 = Math_fround(f9 + (HEAP32[tempDoublePtr >> 2] = i4, Math_fround(HEAPF32[tempDoublePtr >> 2])));
 f6 = Math_fround(f23 + f8);
 f8 = Math_fround(f7 - f9);
 f9 = Math_fround(HEAPF32[i1 + 216 >> 2]);
 if (!(f9 < f15 & (f22 < f6 & f9 >= f8))) {
  STACKTOP = i3;
  return;
 }
 HEAP32[i17 >> 2] = 1;
 STACKTOP = i3;
 return;
}

function __ZN10ImDrawList17AddTriangleFilledERK6ImVec2S2_S2_j(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 if (i5 >>> 0 < 16777216) return;
 i6 = i1 + 84 | 0;
 i7 = HEAP32[i6 >> 2] | 0;
 i8 = i1 + 88 | 0;
 if ((i7 | 0) == (HEAP32[i8 >> 2] | 0)) {
  i9 = i7 + 1 | 0;
  if (!i7) i10 = 8; else i10 = ((i7 | 0) / 2 | 0) + i7 | 0;
  i11 = (i10 | 0) > (i9 | 0) ? i10 : i9;
  if ((i7 | 0) < (i11 | 0)) {
   i9 = __ZN5ImGui8MemAllocEj(i11 << 3) | 0;
   i10 = i1 + 92 | 0;
   i12 = HEAP32[i10 >> 2] | 0;
   if (!i12) i13 = i10; else {
    _memcpy(i9 | 0, i12 | 0, HEAP32[i6 >> 2] << 3 | 0) | 0;
    __ZN5ImGui7MemFreeEPv(HEAP32[i10 >> 2] | 0);
    i13 = i10;
   }
   HEAP32[i13 >> 2] = i9;
   HEAP32[i8 >> 2] = i11;
   i14 = HEAP32[i6 >> 2] | 0;
  } else i14 = i7;
 } else i14 = i7;
 i7 = i1 + 92 | 0;
 i11 = i2;
 i2 = HEAP32[i11 + 4 >> 2] | 0;
 i9 = (HEAP32[i7 >> 2] | 0) + (i14 << 3) | 0;
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i9 + 4 >> 2] = i2;
 i2 = HEAP32[i6 >> 2] | 0;
 i9 = i2 + 1 | 0;
 HEAP32[i6 >> 2] = i9;
 if ((i9 | 0) == (HEAP32[i8 >> 2] | 0)) {
  i11 = i2 + 2 | 0;
  if (!i9) i15 = 8; else i15 = ((i9 | 0) / 2 | 0) + i9 | 0;
  i2 = (i15 | 0) > (i11 | 0) ? i15 : i11;
  if ((i9 | 0) < (i2 | 0)) {
   i11 = __ZN5ImGui8MemAllocEj(i2 << 3) | 0;
   i15 = HEAP32[i7 >> 2] | 0;
   if (!i15) i16 = i7; else {
    _memcpy(i11 | 0, i15 | 0, HEAP32[i6 >> 2] << 3 | 0) | 0;
    __ZN5ImGui7MemFreeEPv(HEAP32[i7 >> 2] | 0);
    i16 = i7;
   }
   HEAP32[i16 >> 2] = i11;
   HEAP32[i8 >> 2] = i2;
   i17 = HEAP32[i6 >> 2] | 0;
  } else i17 = i9;
 } else i17 = i9;
 i9 = i3;
 i3 = HEAP32[i9 + 4 >> 2] | 0;
 i2 = (HEAP32[i7 >> 2] | 0) + (i17 << 3) | 0;
 HEAP32[i2 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i2 + 4 >> 2] = i3;
 i3 = HEAP32[i6 >> 2] | 0;
 i2 = i3 + 1 | 0;
 HEAP32[i6 >> 2] = i2;
 if ((i2 | 0) == (HEAP32[i8 >> 2] | 0)) {
  i9 = i3 + 2 | 0;
  if (!i2) i18 = 8; else i18 = ((i2 | 0) / 2 | 0) + i2 | 0;
  i3 = (i18 | 0) > (i9 | 0) ? i18 : i9;
  if ((i2 | 0) < (i3 | 0)) {
   i9 = __ZN5ImGui8MemAllocEj(i3 << 3) | 0;
   i18 = HEAP32[i7 >> 2] | 0;
   if (!i18) i19 = i7; else {
    _memcpy(i9 | 0, i18 | 0, HEAP32[i6 >> 2] << 3 | 0) | 0;
    __ZN5ImGui7MemFreeEPv(HEAP32[i7 >> 2] | 0);
    i19 = i7;
   }
   HEAP32[i19 >> 2] = i9;
   HEAP32[i8 >> 2] = i3;
   i20 = HEAP32[i6 >> 2] | 0;
  } else i20 = i2;
 } else i20 = i2;
 i2 = i4;
 i4 = HEAP32[i2 + 4 >> 2] | 0;
 i3 = (HEAP32[i7 >> 2] | 0) + (i20 << 3) | 0;
 HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i3 + 4 >> 2] = i4;
 i4 = (HEAP32[i6 >> 2] | 0) + 1 | 0;
 HEAP32[i6 >> 2] = i4;
 __ZN10ImDrawList19AddConvexPolyFilledEPK6ImVec2ij(i1, HEAP32[i7 >> 2] | 0, i4, i5);
 i5 = i1 + 84 | 0;
 i1 = HEAP32[i8 >> 2] | 0;
 if ((i1 | 0) < 0) {
  i4 = ((i1 | 0) / 2 | 0) + i1 | 0;
  i6 = (i4 | 0) > 0 ? i4 : 0;
  if ((i1 | 0) < (i6 | 0)) {
   i1 = __ZN5ImGui8MemAllocEj(i6 << 3) | 0;
   i4 = HEAP32[i7 >> 2] | 0;
   if (!i4) i21 = i7; else {
    _memcpy(i1 | 0, i4 | 0, HEAP32[i5 >> 2] << 3 | 0) | 0;
    __ZN5ImGui7MemFreeEPv(HEAP32[i7 >> 2] | 0);
    i21 = i7;
   }
   HEAP32[i21 >> 2] = i1;
   HEAP32[i8 >> 2] = i6;
  }
 }
 HEAP32[i5 >> 2] = 0;
 return;
}

function __ZL22NavCalcPreferredRefPosv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, f11 = f0, f12 = f0, f13 = f0, f14 = f0, f15 = f0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, f20 = f0, f21 = f0, i22 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i4 = i3 + 16 | 0;
 i5 = i3 + 24 | 0;
 i6 = i3;
 i7 = HEAP32[1460598] | 0;
 if (!(HEAP8[i7 + 6730 >> 0] | 0)) if (HEAP8[i7 + 6731 >> 0] | 0) {
  i8 = HEAP32[i7 + 6644 >> 2] | 0;
  if (i8 | 0) {
   i9 = HEAP32[i7 + 6720 >> 2] | 0;
   i10 = i8 + 784 + (i9 << 4) | 0;
   f11 = Math_fround(HEAPF32[i10 >> 2]);
   f12 = Math_fround(Math_fround(HEAPF32[i7 + 5408 >> 2]) * Math_fround(4.0));
   f13 = Math_fround(Math_fround(HEAPF32[i10 + 8 >> 2]) - f11);
   f14 = Math_fround(f11 + (f12 < f13 ? f12 : f13));
   f13 = Math_fround(HEAPF32[i10 + 12 >> 2]);
   f12 = Math_fround(HEAPF32[i7 + 5412 >> 2]);
   f11 = Math_fround(f13 - Math_fround(HEAPF32[i10 + 4 >> 2]));
   f15 = Math_fround(f13 - (f12 < f11 ? f12 : f11));
   f11 = Math_fround(Math_fround(HEAPF32[i8 + 12 >> 2]) + f14);
   f14 = Math_fround(Math_fround(HEAPF32[i8 + 16 >> 2]) + f15);
   HEAPF32[i5 >> 2] = f11;
   HEAPF32[i5 + 4 >> 2] = f14;
   i8 = i7 + 168 | 0;
   f15 = Math_fround(HEAPF32[i8 >> 2]);
   i10 = i7 + 176 | 0;
   if (f15 != Math_fround(HEAPF32[i10 >> 2])) {
    f15 = Math_fround(HEAPF32[i7 + 172 >> 2]);
    if (f15 != Math_fround(HEAPF32[i7 + 180 >> 2])) {
     i9 = i8;
     i8 = HEAP32[i9 >> 2] | 0;
     i16 = HEAP32[i9 + 4 >> 2] | 0;
     i9 = i6;
     HEAP32[i9 >> 2] = i8;
     HEAP32[i9 + 4 >> 2] = i16;
     i9 = i10;
     i10 = HEAP32[i9 >> 2] | 0;
     i17 = HEAP32[i9 + 4 >> 2] | 0;
     i9 = i6 + 8 | 0;
     HEAP32[i9 >> 2] = i10;
     HEAP32[i9 + 4 >> 2] = i17;
     f15 = (HEAP32[tempDoublePtr >> 2] = i8, Math_fround(HEAPF32[tempDoublePtr >> 2]));
     i18 = i10;
     i19 = i17;
     f20 = f15;
     f21 = (HEAP32[tempDoublePtr >> 2] = i16, Math_fround(HEAPF32[tempDoublePtr >> 2]));
    } else i2 = 8;
   } else i2 = 8;
   if ((i2 | 0) == 8) {
    i2 = HEAP32[i7 + 12 >> 2] | 0;
    i16 = HEAP32[i7 + 16 >> 2] | 0;
    HEAPF32[i6 >> 2] = Math_fround(0.0);
    HEAPF32[i6 + 4 >> 2] = Math_fround(0.0);
    HEAP32[i6 + 8 >> 2] = i2;
    HEAP32[i6 + 12 >> 2] = i16;
    i16 = i6 + 8 | 0;
    i18 = HEAP32[i16 >> 2] | 0;
    i19 = HEAP32[i16 + 4 >> 2] | 0;
    f20 = Math_fround(0.0);
    f21 = Math_fround(0.0);
   }
   i16 = i4;
   HEAP32[i16 >> 2] = i18;
   HEAP32[i16 + 4 >> 2] = i19;
   f15 = (HEAP32[tempDoublePtr >> 2] = i19, Math_fround(HEAPF32[tempDoublePtr >> 2]));
   if (f11 < f20) i22 = i6; else {
    i19 = f11 > (HEAP32[tempDoublePtr >> 2] = i18, Math_fround(HEAPF32[tempDoublePtr >> 2]));
    i22 = i19 ? i4 : i5;
   }
   f11 = Math_fround(HEAPF32[i22 >> 2]);
   f20 = Math_fround(~~f11 | 0);
   f11 = Math_fround(~~Math_fround(HEAPF32[(f14 < f21 ? i6 : f14 > f15 ? i4 : i5) + 4 >> 2]) | 0);
   HEAPF32[i1 >> 2] = f20;
   HEAPF32[i1 + 4 >> 2] = f11;
   STACKTOP = i3;
   return;
  }
 }
 f11 = Math_fround(~~Math_fround(HEAPF32[i7 + 212 >> 2]) | 0);
 f20 = Math_fround(~~Math_fround(HEAPF32[i7 + 216 >> 2]) | 0);
 HEAPF32[i1 >> 2] = f11;
 HEAPF32[i1 + 4 >> 2] = f20;
 STACKTOP = i3;
 return;
}

function _png_create_png_struct(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 i8 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 1056 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1056);
 i10 = 4;
 i11 = _malloc(40) | 0;
 HEAP32[i11 >> 2] = 0;
 i12 = i9 + 156 | 0;
 i13 = i9;
 _memset(i12 | 0, 0, 900) | 0;
 HEAP32[i12 + 748 >> 2] = 1e6;
 HEAP32[i12 + 752 >> 2] = 1e6;
 HEAP32[i12 + 756 >> 2] = 1e3;
 HEAP32[i12 + 760 >> 2] = 8e6;
 __THREW__ = 0;
 invoke_viiii(13, i12 | 0, i5 | 0, i6 | 0, i7 | 0);
 i7 = __THREW__;
 __THREW__ = 0;
 if ((i7 | 0) != 0 & (threwValue | 0) != 0) {
  i14 = _testSetjmp(HEAP32[i7 >> 2] | 0, i11 | 0, i10 | 0) | 0;
  if (!i14) _longjmp(i7 | 0, threwValue | 0);
  tempRet0 = threwValue;
 } else i14 = -1;
 if ((i14 | 0) == 1) i15 = tempRet0; else {
  __THREW__ = 0;
  invoke_viiii(14, i12 | 0, i2 | 0, i3 | 0, i4 | 0);
  i4 = __THREW__;
  __THREW__ = 0;
  if ((i4 | 0) != 0 & (threwValue | 0) != 0) {
   i16 = _testSetjmp(HEAP32[i4 >> 2] | 0, i11 | 0, i10 | 0) | 0;
   if (!i16) _longjmp(i4 | 0, threwValue | 0);
   tempRet0 = threwValue;
  } else i16 = -1;
  if ((i16 | 0) == 1) i15 = tempRet0; else {
   i11 = _saveSetjmp(i13, 1, i11 | 0, i10 | 0) | 0;
   i10 = tempRet0;
   __THREW__ = 0;
   i16 = __THREW__;
   __THREW__ = 0;
   if ((i16 | 0) != 0 & (threwValue | 0) != 0) {
    i17 = _testSetjmp(HEAP32[i16 >> 2] | 0, i11 | 0, i10 | 0) | 0;
    if (!i17) _longjmp(i16 | 0, threwValue | 0);
    tempRet0 = threwValue;
   } else i17 = -1;
   if ((i17 | 0) == 1) i15 = tempRet0; else i15 = 0;
  }
 }
 while (1) {
  if (i15 | 0) {
   i18 = 0;
   i8 = 11;
   break;
  }
  i19 = i12 + 160 | 0;
  HEAP32[i19 >> 2] = i13;
  i20 = i12 + 164 | 0;
  HEAP32[i20 >> 2] = 0;
  i21 = i12 + 156 | 0;
  HEAP32[i21 >> 2] = 45;
  __THREW__ = 0;
  i17 = invoke_iii(23, i12 | 0, i1 | 0) | 0;
  i16 = __THREW__;
  __THREW__ = 0;
  if ((i16 | 0) != 0 & (threwValue | 0) != 0) {
   i22 = _testSetjmp(HEAP32[i16 >> 2] | 0, i11 | 0, i10 | 0) | 0;
   if (!i22) _longjmp(i16 | 0, threwValue | 0);
   tempRet0 = threwValue;
  } else i22 = -1;
  if ((i22 | 0) == 1) {
   i15 = tempRet0;
   continue;
  }
  if (!i17) {
   i18 = 0;
   i8 = 11;
   break;
  }
  __THREW__ = 0;
  i23 = invoke_iii(24, i12 | 0, 900) | 0;
  i17 = __THREW__;
  __THREW__ = 0;
  if ((i17 | 0) != 0 & (threwValue | 0) != 0) {
   i24 = _testSetjmp(HEAP32[i17 >> 2] | 0, i11 | 0, i10 | 0) | 0;
   if (!i24) _longjmp(i17 | 0, threwValue | 0);
   tempRet0 = threwValue;
  } else i24 = -1;
  if ((i24 | 0) == 1) i15 = tempRet0; else {
   i8 = 9;
   break;
  }
 }
 if ((i8 | 0) == 9) {
  if (!i23) {
   i18 = 0;
   _free(i11 | 0);
   STACKTOP = i9;
   return i18 | 0;
  }
  HEAP32[i12 + 256 >> 2] = 29;
  HEAP32[i12 + 260 >> 2] = 46;
  HEAP32[i12 + 264 >> 2] = i23;
  HEAP32[i19 >> 2] = 0;
  HEAP32[i20 >> 2] = 0;
  HEAP32[i21 >> 2] = 0;
  _memcpy(i23 | 0, i12 | 0, 900) | 0;
  i18 = i23;
  _free(i11 | 0);
  STACKTOP = i9;
  return i18 | 0;
 } else if ((i8 | 0) == 11) {
  _free(i11 | 0);
  STACKTOP = i9;
  return i18 | 0;
 }
 return 0;
}

function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4;
 HEAP8[i1 >> 0] = 0;
 i6 = i2 + (HEAP32[(HEAP32[i2 >> 2] | 0) + -12 >> 2] | 0) | 0;
 i7 = HEAP32[i6 + 16 >> 2] | 0;
 if (!i7) {
  i8 = HEAP32[i6 + 72 >> 2] | 0;
  if (i8 | 0) __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i8) | 0;
  do if (!i3) {
   i8 = i2 + (HEAP32[(HEAP32[i2 >> 2] | 0) + -12 >> 2] | 0) | 0;
   if (HEAP32[i8 + 4 >> 2] & 4096 | 0) {
    __ZNKSt3__28ios_base6getlocEv(i5, i8);
    i8 = __ZNKSt3__26locale9use_facetERNS0_2idE(i5, 5845188) | 0;
    __ZNSt3__26localeD2Ev(i5);
    i9 = HEAP32[i2 + (HEAP32[(HEAP32[i2 >> 2] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
    i10 = i8 + 8 | 0;
    i8 = i9;
    i11 = (i9 | 0) == 0;
    i12 = i8 + 12 | 0;
    i13 = i8 + 16 | 0;
    i14 = i9;
    while (1) {
     if (i11) {
      i15 = 0;
      i16 = 0;
      break;
     }
     i17 = HEAP32[i12 >> 2] | 0;
     if ((i17 | 0) == (HEAP32[i13 >> 2] | 0)) i18 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i14 >> 2] | 0) + 36 >> 2] & 127](i8) | 0; else i18 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i17 >> 0] | 0) | 0;
     i17 = __ZNSt3__211char_traitsIcE11eq_int_typeEii(i18, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0;
     i19 = i17 ? 0 : i9;
     if (i17) {
      i15 = 0;
      i16 = 0;
      break;
     }
     i17 = i19;
     i20 = i17 + 12 | 0;
     i21 = HEAP32[i20 >> 2] | 0;
     i22 = i17 + 16 | 0;
     if ((i21 | 0) == (HEAP32[i22 >> 2] | 0)) i23 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i19 >> 2] | 0) + 36 >> 2] & 127](i17) | 0; else i23 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i21 >> 0] | 0) | 0;
     if ((i23 & 255) << 24 >> 24 <= -1) {
      i15 = i17;
      i16 = i9;
      break;
     }
     if (!(HEAP16[(HEAP32[i10 >> 2] | 0) + (i23 << 24 >> 24 << 1) >> 1] & 8192)) {
      i15 = i17;
      i16 = i9;
      break;
     }
     i21 = HEAP32[i20 >> 2] | 0;
     if ((i21 | 0) == (HEAP32[i22 >> 2] | 0)) {
      FUNCTION_TABLE_ii[HEAP32[(HEAP32[i19 >> 2] | 0) + 40 >> 2] & 127](i17) | 0;
      continue;
     } else {
      HEAP32[i20 >> 2] = i21 + 1;
      __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i21 >> 0] | 0) | 0;
      continue;
     }
    }
    if (i16 | 0) {
     i9 = HEAP32[i15 + 12 >> 2] | 0;
     if ((i9 | 0) == (HEAP32[i15 + 16 >> 2] | 0)) i24 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i16 >> 2] | 0) + 36 >> 2] & 127](i15) | 0; else i24 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i9 >> 0] | 0) | 0;
     if (!(__ZNSt3__211char_traitsIcE11eq_int_typeEii(i24, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0)) break;
    }
    i9 = i2 + (HEAP32[(HEAP32[i2 >> 2] | 0) + -12 >> 2] | 0) | 0;
    __ZNSt3__28ios_base5clearEj(i9, HEAP32[i9 + 16 >> 2] | 6);
   }
  } while (0);
  HEAP8[i1 >> 0] = (HEAP32[i2 + (HEAP32[(HEAP32[i2 >> 2] | 0) + -12 >> 2] | 0) + 16 >> 2] | 0) == 0 & 1;
 } else __ZNSt3__28ios_base5clearEj(i6, i7 | 4);
 STACKTOP = i4;
 return;
}

function __ZNKSt3__27codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0;
 i9 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i11 = i10;
 i12 = i3;
 while (1) {
  if ((i12 | 0) == (i4 | 0)) {
   i13 = i4;
   break;
  }
  if (!(HEAP8[i12 >> 0] | 0)) {
   i13 = i12;
   break;
  }
  i12 = i12 + 1 | 0;
 }
 HEAP32[i8 >> 2] = i6;
 HEAP32[i5 >> 2] = i3;
 i12 = i7;
 i14 = i1 + 8 | 0;
 i1 = i3;
 i3 = i6;
 i6 = i13;
 while (1) {
  if ((i3 | 0) == (i7 | 0) | (i1 | 0) == (i4 | 0)) {
   i15 = i1;
   i9 = 32;
   break;
  }
  i13 = i2;
  i16 = HEAP32[i13 + 4 >> 2] | 0;
  i17 = i11;
  HEAP32[i17 >> 2] = HEAP32[i13 >> 2];
  HEAP32[i17 + 4 >> 2] = i16;
  i18 = i6;
  i16 = ___uselocale(HEAP32[i14 >> 2] | 0) | 0;
  i17 = _mbsnrtowcs(i3, i5, i18 - i1 | 0, i12 - i3 >> 2, i2) | 0;
  if (i16 | 0) ___uselocale(i16) | 0;
  if ((i17 | 0) == -1) {
   i19 = i1;
   i20 = i3;
   i9 = 10;
   break;
  }
  i16 = (HEAP32[i8 >> 2] | 0) + (i17 << 2) | 0;
  HEAP32[i8 >> 2] = i16;
  if ((i16 | 0) == (i7 | 0)) {
   i9 = 29;
   break;
  }
  i17 = HEAP32[i5 >> 2] | 0;
  if ((i6 | 0) == (i4 | 0)) {
   i21 = i4;
   i22 = i16;
   i23 = i17;
  } else {
   i13 = ___uselocale(HEAP32[i14 >> 2] | 0) | 0;
   i24 = _mbrtowc(i16, i17, 1, i2) | 0;
   if (i13 | 0) ___uselocale(i13) | 0;
   if (i24 | 0) {
    i25 = 2;
    i9 = 28;
    break;
   }
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 4;
   i24 = (HEAP32[i5 >> 2] | 0) + 1 | 0;
   HEAP32[i5 >> 2] = i24;
   i13 = i24;
   while (1) {
    if ((i13 | 0) == (i4 | 0)) {
     i26 = i4;
     break;
    }
    if (!(HEAP8[i13 >> 0] | 0)) {
     i26 = i13;
     break;
    }
    i13 = i13 + 1 | 0;
   }
   i21 = i26;
   i22 = HEAP32[i8 >> 2] | 0;
   i23 = i24;
  }
  i1 = i23;
  i3 = i22;
  i6 = i21;
 }
 do if ((i9 | 0) == 10) {
  L28 : while (1) {
   i9 = 0;
   HEAP32[i8 >> 2] = i20;
   if ((i19 | 0) == (HEAP32[i5 >> 2] | 0)) {
    i9 = 18;
    break;
   }
   i21 = ___uselocale(HEAP32[i14 >> 2] | 0) | 0;
   i6 = _mbrtowc(i20, i19, i18 - i19 | 0, i11) | 0;
   if (i21 | 0) ___uselocale(i21) | 0;
   switch (i6 | 0) {
   case -1:
    {
     i9 = 15;
     break L28;
     break;
    }
   case -2:
    {
     i9 = 16;
     break L28;
     break;
    }
   case 0:
    {
     i27 = 1;
     break;
    }
   default:
    i27 = i6;
   }
   i19 = i19 + i27 | 0;
   i20 = (HEAP32[i8 >> 2] | 0) + 4 | 0;
   i9 = 10;
  }
  if ((i9 | 0) == 15) {
   HEAP32[i5 >> 2] = i19;
   i25 = 2;
   i9 = 28;
   break;
  } else if ((i9 | 0) == 16) {
   HEAP32[i5 >> 2] = i19;
   i25 = 1;
   i9 = 28;
   break;
  } else if ((i9 | 0) == 18) {
   HEAP32[i5 >> 2] = i19;
   i25 = (i19 | 0) != (i4 | 0) & 1;
   i9 = 28;
   break;
  }
 } else if ((i9 | 0) == 29) {
  i15 = HEAP32[i5 >> 2] | 0;
  i9 = 32;
 } while (0);
 if ((i9 | 0) == 28) i28 = i25; else if ((i9 | 0) == 32) i28 = (i15 | 0) != (i4 | 0) & 1;
 STACKTOP = i10;
 return i28 | 0;
}

function __ZNKSt3__27codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0;
 i9 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i11 = i10;
 i12 = i10 + 8 | 0;
 i13 = i3;
 while (1) {
  if ((i13 | 0) == (i4 | 0)) {
   i14 = i4;
   break;
  }
  if (!(HEAP32[i13 >> 2] | 0)) {
   i14 = i13;
   break;
  }
  i13 = i13 + 4 | 0;
 }
 HEAP32[i8 >> 2] = i6;
 HEAP32[i5 >> 2] = i3;
 i13 = i7;
 i15 = i1 + 8 | 0;
 i1 = i3;
 i3 = i6;
 i6 = i14;
 L6 : while (1) {
  if ((i3 | 0) == (i7 | 0) | (i1 | 0) == (i4 | 0)) {
   i16 = i1;
   i9 = 35;
   break;
  }
  i14 = i2;
  i17 = HEAP32[i14 + 4 >> 2] | 0;
  i18 = i11;
  HEAP32[i18 >> 2] = HEAP32[i14 >> 2];
  HEAP32[i18 + 4 >> 2] = i17;
  i17 = ___uselocale(HEAP32[i15 >> 2] | 0) | 0;
  i18 = _wcsnrtombs(i3, i5, i6 - i1 >> 2, i13 - i3 | 0, i2) | 0;
  if (i17 | 0) ___uselocale(i17) | 0;
  switch (i18 | 0) {
  case -1:
   {
    i9 = 10;
    break L6;
    break;
   }
  case 0:
   {
    i19 = 1;
    i9 = 32;
    break L6;
    break;
   }
  default:
   {}
  }
  i17 = (HEAP32[i8 >> 2] | 0) + i18 | 0;
  HEAP32[i8 >> 2] = i17;
  if ((i17 | 0) == (i7 | 0)) {
   i9 = 33;
   break;
  }
  if ((i6 | 0) == (i4 | 0)) {
   i20 = i4;
   i21 = i17;
   i22 = HEAP32[i5 >> 2] | 0;
  } else {
   i17 = ___uselocale(HEAP32[i15 >> 2] | 0) | 0;
   i18 = _wcrtomb(i12, 0, i2) | 0;
   if (i17 | 0) ___uselocale(i17) | 0;
   if ((i18 | 0) == -1) {
    i23 = 2;
    i9 = 31;
    break;
   }
   if (i18 >>> 0 > (i13 - (HEAP32[i8 >> 2] | 0) | 0) >>> 0) {
    i23 = 1;
    i9 = 31;
    break;
   } else {
    i24 = i12;
    i25 = i18;
   }
   while (1) {
    if (!i25) break;
    i18 = HEAP8[i24 >> 0] | 0;
    i17 = HEAP32[i8 >> 2] | 0;
    HEAP32[i8 >> 2] = i17 + 1;
    HEAP8[i17 >> 0] = i18;
    i24 = i24 + 1 | 0;
    i25 = i25 + -1 | 0;
   }
   i18 = (HEAP32[i5 >> 2] | 0) + 4 | 0;
   HEAP32[i5 >> 2] = i18;
   i17 = i18;
   while (1) {
    if ((i17 | 0) == (i4 | 0)) {
     i26 = i4;
     break;
    }
    if (!(HEAP32[i17 >> 2] | 0)) {
     i26 = i17;
     break;
    }
    i17 = i17 + 4 | 0;
   }
   i20 = i26;
   i21 = HEAP32[i8 >> 2] | 0;
   i22 = i18;
  }
  i1 = i22;
  i3 = i21;
  i6 = i20;
 }
 if ((i9 | 0) == 10) {
  HEAP32[i8 >> 2] = i3;
  i20 = i1;
  i1 = i3;
  while (1) {
   if ((i20 | 0) == (HEAP32[i5 >> 2] | 0)) break;
   i3 = HEAP32[i20 >> 2] | 0;
   i6 = ___uselocale(HEAP32[i15 >> 2] | 0) | 0;
   i21 = _wcrtomb(i1, i3, i11) | 0;
   if (i6 | 0) ___uselocale(i6) | 0;
   if ((i21 | 0) == -1) break;
   i6 = (HEAP32[i8 >> 2] | 0) + i21 | 0;
   HEAP32[i8 >> 2] = i6;
   i20 = i20 + 4 | 0;
   i1 = i6;
  }
  HEAP32[i5 >> 2] = i20;
  i19 = 2;
  i9 = 32;
 } else if ((i9 | 0) == 31) {
  i19 = i23;
  i9 = 32;
 } else if ((i9 | 0) == 33) {
  i16 = HEAP32[i5 >> 2] | 0;
  i9 = 35;
 }
 if ((i9 | 0) == 32) i27 = i19; else if ((i9 | 0) == 35) i27 = (i16 | 0) != (i4 | 0) & 1;
 STACKTOP = i10;
 return i27 | 0;
}

function __ZN10Simulation18doSurfaceUtilitiesEP7CityMapi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0;
 i3 = 0;
 i4 = HEAP32[i1 >> 2] | 0;
 if (!i4) return;
 i5 = i1 + 4 | 0;
 i6 = 1 << i2;
 i7 = (i2 | 0) == 3;
 i8 = 0;
 i9 = HEAP32[i5 >> 2] | 0;
 i10 = i4;
 while (1) {
  if (!i9) {
   i11 = i10;
   i12 = 0;
  } else {
   i4 = i8 + 4 | 0;
   i13 = i8 + -4 | 0;
   i14 = i8 + 16 | 0;
   i15 = i8 + -16 | 0;
   i16 = i8 + 10 | 0;
   i17 = i8 + -10 | 0;
   i18 = 0;
   do {
    i19 = __ZN7CityMap7getTileEjj(i1, i8, i18) | 0;
    switch (i2 | 0) {
    case 1:
     {
      if ((HEAP32[i19 + 44 >> 2] | 0) == 1) if (HEAP32[i19 + 76 >> 2] & i6 | 0) {
       i20 = i18 + -4 | 0;
       i21 = i18 + 4 | 0;
       i22 = i13;
       while (1) {
        i23 = i22 - i8 | 0;
        i24 = Math_imul(i23, i23) | 0;
        i23 = i20;
        while (1) {
         i25 = i23 - i18 | 0;
         if (((Math_imul(i25, i25) | 0) + i24 | 0) >>> 0 <= 20) {
          i25 = (__ZN7CityMap7getTileEjj(i1, i22, i23) | 0) + 72 | 0;
          HEAP32[i25 >> 2] = HEAP32[i25 >> 2] | i6;
         }
         if ((i23 | 0) < (i21 | 0)) i23 = i23 + 1 | 0; else break;
        }
        if ((i22 | 0) < (i4 | 0)) i22 = i22 + 1 | 0; else break;
       }
      }
      break;
     }
    case 2:
     {
      if ((HEAP32[i19 + 12 >> 2] | 0) == 4) if (HEAP32[i19 + 76 >> 2] & i6 | 0) {
       i22 = i18 + -16 | 0;
       i21 = i18 + 16 | 0;
       i20 = i15;
       while (1) {
        i23 = i20 - i8 | 0;
        i24 = Math_imul(i23, i23) | 0;
        i23 = i22;
        while (1) {
         i25 = i23 - i18 | 0;
         if (((Math_imul(i25, i25) | 0) + i24 | 0) >>> 0 <= 272) {
          i25 = (__ZN7CityMap7getTileEjj(i1, i20, i23) | 0) + 72 | 0;
          HEAP32[i25 >> 2] = HEAP32[i25 >> 2] | i6;
         }
         if ((i23 | 0) < (i21 | 0)) i23 = i23 + 1 | 0; else break;
        }
        if ((i20 | 0) < (i14 | 0)) i20 = i20 + 1 | 0; else break;
       }
       if (i7) i3 = 26;
      }
      break;
     }
    case 3:
     {
      i3 = 26;
      break;
     }
    default:
     {}
    }
    if ((i3 | 0) == 26) {
     i3 = 0;
     if ((HEAP32[i19 + 12 >> 2] | 0) == 6) if (HEAP32[i19 + 76 >> 2] & i6 | 0) {
      i20 = i18 + -10 | 0;
      i21 = i18 + 10 | 0;
      i22 = i17;
      while (1) {
       i23 = i22 - i8 | 0;
       i24 = Math_imul(i23, i23) | 0;
       i23 = i20;
       while (1) {
        i25 = i23 - i18 | 0;
        if (((Math_imul(i25, i25) | 0) + i24 | 0) >>> 0 <= 110) {
         i25 = (__ZN7CityMap7getTileEjj(i1, i22, i23) | 0) + 72 | 0;
         HEAP32[i25 >> 2] = HEAP32[i25 >> 2] | i6;
        }
        if ((i23 | 0) < (i21 | 0)) i23 = i23 + 1 | 0; else break;
       }
       if ((i22 | 0) < (i16 | 0)) i22 = i22 + 1 | 0; else break;
      }
     }
    }
    i18 = i18 + 1 | 0;
    i26 = HEAP32[i5 >> 2] | 0;
   } while (i18 >>> 0 < i26 >>> 0);
   i11 = HEAP32[i1 >> 2] | 0;
   i12 = i26;
  }
  i8 = i8 + 1 | 0;
  if (i8 >>> 0 >= i11 >>> 0) break; else {
   i9 = i12;
   i10 = i11;
  }
 }
 return;
}

function __ZNSt3__2L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i6 = 0;
 i7 = i2;
 if (!(i5 & 4)) {
  i8 = 0;
  i9 = i1;
 } else if ((i7 - i1 | 0) > 2) if ((HEAP8[i1 >> 0] | 0) == -17) if ((HEAP8[i1 + 1 >> 0] | 0) == -69) {
  i8 = 0;
  i9 = (HEAP8[i1 + 2 >> 0] | 0) == -65 ? i1 + 3 | 0 : i1;
 } else {
  i8 = 0;
  i9 = i1;
 } else {
  i8 = 0;
  i9 = i1;
 } else {
  i8 = 0;
  i9 = i1;
 }
 L6 : while (1) {
  if (!(i8 >>> 0 < i3 >>> 0 & i9 >>> 0 < i2 >>> 0)) {
   i6 = 33;
   break;
  }
  i5 = HEAP8[i9 >> 0] | 0;
  i10 = i5 & 255;
  if (i10 >>> 0 > i4 >>> 0) {
   i6 = 33;
   break;
  }
  do if (i5 << 24 >> 24 > -1) {
   i11 = i8;
   i12 = i9 + 1 | 0;
  } else {
   if ((i5 & 255) < 194) {
    i6 = 33;
    break L6;
   }
   if ((i5 & 255) < 224) {
    if ((i7 - i9 | 0) < 2) {
     i6 = 33;
     break L6;
    }
    i13 = HEAPU8[i9 + 1 >> 0] | 0;
    if ((i13 & 192 | 0) != 128) {
     i6 = 33;
     break L6;
    }
    if ((i13 & 63 | i10 << 6 & 1984) >>> 0 > i4 >>> 0) {
     i6 = 33;
     break L6;
    } else {
     i11 = i8;
     i12 = i9 + 2 | 0;
     break;
    }
   }
   if ((i5 & 255) < 240) {
    i13 = i9;
    if ((i7 - i13 | 0) < 3) {
     i6 = 33;
     break L6;
    }
    i14 = HEAP8[i9 + 1 >> 0] | 0;
    i15 = HEAP8[i9 + 2 >> 0] | 0;
    switch (i5 << 24 >> 24) {
    case -32:
     {
      if ((i14 & -32) << 24 >> 24 != -96) {
       i16 = i13;
       break L6;
      }
      break;
     }
    case -19:
     {
      if ((i14 & -32) << 24 >> 24 != -128) {
       i16 = i13;
       break L6;
      }
      break;
     }
    default:
     if ((i14 & -64) << 24 >> 24 != -128) {
      i16 = i13;
      break L6;
     }
    }
    i13 = i15 & 255;
    if ((i13 & 192 | 0) != 128) {
     i6 = 33;
     break L6;
    }
    if (((i14 & 63) << 6 | i10 << 12 & 61440 | i13 & 63) >>> 0 > i4 >>> 0) {
     i6 = 33;
     break L6;
    } else {
     i11 = i8;
     i12 = i9 + 3 | 0;
     break;
    }
   }
   if ((i5 & 255) >= 245) {
    i6 = 33;
    break L6;
   }
   i13 = i9;
   if ((i3 - i8 | 0) >>> 0 < 2 | (i7 - i13 | 0) < 4) {
    i6 = 33;
    break L6;
   }
   i14 = HEAP8[i9 + 1 >> 0] | 0;
   i15 = HEAP8[i9 + 2 >> 0] | 0;
   i17 = HEAP8[i9 + 3 >> 0] | 0;
   switch (i5 << 24 >> 24) {
   case -16:
    {
     if ((i14 + 112 & 255) >= 48) {
      i16 = i13;
      break L6;
     }
     break;
    }
   case -12:
    {
     if ((i14 & -16) << 24 >> 24 != -128) {
      i16 = i13;
      break L6;
     }
     break;
    }
   default:
    if ((i14 & -64) << 24 >> 24 != -128) {
     i16 = i13;
     break L6;
    }
   }
   i13 = i15 & 255;
   if ((i13 & 192 | 0) != 128) {
    i6 = 33;
    break L6;
   }
   i15 = i17 & 255;
   if ((i15 & 192 | 0) != 128) {
    i6 = 33;
    break L6;
   }
   if (((i14 & 63) << 12 | i10 << 18 & 1835008 | i13 << 6 & 4032 | i15 & 63) >>> 0 > i4 >>> 0) {
    i6 = 33;
    break L6;
   } else {
    i11 = i8 + 1 | 0;
    i12 = i9 + 4 | 0;
   }
  } while (0);
  i8 = i11 + 1 | 0;
  i9 = i12;
 }
 if ((i6 | 0) == 33) i16 = i9;
 return i16 - i1 | 0;
}

function __ZN5ImGui18UpdateMovingWindowEv() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, f9 = f0, f10 = f0, f11 = f0, i12 = 0, i13 = 0, f14 = f0, f15 = f0;
 i1 = 0;
 i2 = HEAP32[1460598] | 0;
 i3 = i2 + 6472 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 if (!i4) {
  i5 = i2 + 6452 | 0;
  i6 = HEAP32[i5 >> 2] | 0;
  if (!i6) return;
  i7 = HEAP32[i6 + 76 >> 2] | 0;
  i6 = i2 + 6420 | 0;
  if ((i7 | 0) != (HEAP32[i6 >> 2] | 0)) return;
  HEAP8[i2 + 6432 >> 0] = 1;
  if ((HEAP32[i2 + 6424 >> 2] | 0) == (i7 | 0)) HEAP8[i2 + 6436 >> 0] = 1;
  if (HEAP8[i2 + 220 >> 0] | 0) return;
  i8 = (i7 | 0) != 0;
  HEAP8[i2 + 6433 >> 0] = i8 & 1;
  if (i8) {
   HEAPF32[i2 + 6428 >> 2] = Math_fround(0.0);
   HEAP8[i2 + 6435 >> 0] = 0;
  }
  HEAP32[i6 >> 2] = 0;
  HEAP32[i2 + 6440 >> 2] = 0;
  HEAP8[i2 + 6434 >> 0] = 0;
  HEAP32[i5 >> 2] = 0;
  return;
 }
 i5 = i2 + 6420 | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 HEAP8[i2 + 6432 >> 0] = 1;
 if ((HEAP32[i2 + 6424 >> 2] | 0) == (i6 | 0)) HEAP8[i2 + 6436 >> 0] = 1;
 i8 = HEAP32[i4 + 756 >> 2] | 0;
 if (!i8) ___assert_fail(35135, 31803, 3514, 35180);
 if (HEAP8[i2 + 220 >> 0] | 0) {
  f9 = Math_fround(HEAPF32[i2 + 212 >> 2]);
  if (f9 >= Math_fround(-256.0e3)) {
   f10 = Math_fround(HEAPF32[i2 + 216 >> 2]);
   if (f10 >= Math_fround(-256.0e3)) {
    f11 = Math_fround(f9 - Math_fround(HEAPF32[i2 + 6444 >> 2]));
    f9 = Math_fround(f10 - Math_fround(HEAPF32[i2 + 6448 >> 2]));
    i7 = i8 + 12 | 0;
    if (Math_fround(HEAPF32[i7 >> 2]) != f11) i1 = 11; else if (Math_fround(HEAPF32[i8 + 16 >> 2]) != f9) i1 = 11; else i12 = i4;
    if ((i1 | 0) == 11) {
     if (!(HEAP32[i8 + 8 >> 2] & 256)) {
      i1 = i2 + 11052 | 0;
      if (Math_fround(HEAPF32[i1 >> 2]) <= Math_fround(0.0)) HEAP32[i1 >> 2] = HEAP32[i2 + 24 >> 2];
     }
     i1 = i8 + 168 | 0;
     i13 = HEAP32[i1 >> 2] | 0;
     if (!(i13 & 1)) i12 = i4; else {
      HEAP32[i1 >> 2] = i13 & -15;
      HEAP32[i8 + 180 >> 2] = 2139095039;
      HEAP32[i8 + 184 >> 2] = 2139095039;
      f10 = Math_fround(HEAPF32[i7 >> 2]);
      i13 = i8 + 16 | 0;
      f14 = Math_fround(HEAPF32[i13 >> 2]);
      f15 = Math_fround(~~f11 | 0);
      f11 = Math_fround(~~f9 | 0);
      HEAPF32[i7 >> 2] = f15;
      HEAPF32[i13 >> 2] = f11;
      f9 = Math_fround(f15 - f10);
      f10 = Math_fround(f11 - f14);
      i13 = i8 + 196 | 0;
      f14 = Math_fround(f9 + Math_fround(HEAPF32[i13 >> 2]));
      HEAPF32[i13 >> 2] = f14;
      i13 = i8 + 200 | 0;
      f14 = Math_fround(f10 + Math_fround(HEAPF32[i13 >> 2]));
      HEAPF32[i13 >> 2] = f14;
      i13 = i8 + 220 | 0;
      f14 = Math_fround(f9 + Math_fround(HEAPF32[i13 >> 2]));
      HEAPF32[i13 >> 2] = f14;
      i13 = i8 + 224 | 0;
      f14 = Math_fround(f10 + Math_fround(HEAPF32[i13 >> 2]));
      HEAPF32[i13 >> 2] = f14;
      i12 = HEAP32[i3 >> 2] | 0;
     }
    }
    __ZN5ImGui11FocusWindowEP11ImGuiWindow(i12);
    return;
   }
  }
 }
 i12 = (i6 | 0) != 0;
 HEAP8[i2 + 6433 >> 0] = i12 & 1;
 if (i12) {
  HEAPF32[i2 + 6428 >> 2] = Math_fround(0.0);
  HEAP8[i2 + 6435 >> 0] = 0;
 }
 HEAP32[i5 >> 2] = 0;
 HEAP32[i2 + 6440 >> 2] = 0;
 HEAP8[i2 + 6434 >> 0] = 0;
 HEAP32[i2 + 6452 >> 2] = 0;
 HEAP32[i3 >> 2] = 0;
 return;
}

function __ZNSt3__224uniform_int_distributionIiEclINS_26linear_congruential_engineIjLj48271ELj0ELj2147483647EEEEEiRT_RKNS1_10param_typeE(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0;
 i1 = HEAP32[i3 >> 2] | 0;
 i4 = (HEAP32[i3 + 4 >> 2] | 0) - i1 | 0;
 i3 = i4 + 1 | 0;
 if (!i4) {
  i5 = i1;
  return i5 | 0;
 }
 if (!i3) {
  i4 = HEAP32[i2 >> 2] | 0;
  while (1) {
   i6 = ((i4 >>> 0) % 44488 | 0) * 48271 | 0;
   i7 = ((i4 >>> 0) / 44488 | 0) * 3399 | 0;
   i8 = (i6 >>> 0 < i7 >>> 0 ? 2147483647 : 0) + (i6 - i7) | 0;
   i9 = i8 + -1 | 0;
   if (i9 >>> 0 < 2147418112) {
    i10 = i8;
    break;
   } else i4 = i8;
  }
  do {
   i4 = ((i10 >>> 0) % 44488 | 0) * 48271 | 0;
   i8 = ((i10 >>> 0) / 44488 | 0) * 3399 | 0;
   i10 = (i4 >>> 0 < i8 >>> 0 ? 2147483647 : 0) + (i4 - i8) | 0;
   i11 = i10 + -1 | 0;
  } while (i11 >>> 0 >= 2147418112);
  HEAP32[i2 >> 2] = i10;
  i5 = i11 & 65535 | i9 << 16;
  return i5 | 0;
 }
 i9 = 32 - (Math_clz32(i3 | 0) | 0) | 0;
 i11 = i9 + (((-1 >>> (33 - i9 | 0) & i3 | 0) == 0) << 31 >> 31) | 0;
 i9 = ((i11 >>> 0) / 30 | 0) + (((i11 >>> 0) % 30 | 0 | 0) != 0 & 1) | 0;
 i10 = (i11 >>> 0) / (i9 >>> 0) | 0;
 i8 = i10 >>> 0 < 32 ? 2147483646 >>> i10 << i10 : 0;
 if ((2147483646 - i8 | 0) >>> 0 > ((i8 >>> 0) / (i9 >>> 0) | 0) >>> 0) {
  i4 = i9 + 1 | 0;
  i7 = (i11 >>> 0) / (i4 >>> 0) | 0;
  i12 = i4;
  i13 = i7 >>> 0 < 32 ? 2147483646 >>> i7 << i7 : 0;
  i14 = i7;
 } else {
  i12 = i9;
  i13 = i8;
  i14 = i10;
 }
 i10 = i12 - ((i11 >>> 0) % (i12 >>> 0) | 0) | 0;
 i11 = i14 >>> 0 < 31;
 i8 = i14 + 1 | 0;
 i9 = i11 ? 2147483646 >>> i8 << i8 : 0;
 i7 = (i14 | 0) == 0 ? 0 : -1 >>> (32 - i14 | 0);
 i4 = i11 ? -1 >>> (31 - i14 | 0) : -1;
 i6 = (i10 | 0) == 0;
 i15 = i14 >>> 0 < 32;
 do {
  if (i6) {
   i16 = 0;
   i17 = 0;
  } else {
   i18 = 0;
   i19 = 0;
   i20 = HEAP32[i2 >> 2] | 0;
   while (1) {
    i21 = i20;
    do {
     i22 = ((i21 >>> 0) % 44488 | 0) * 48271 | 0;
     i23 = ((i21 >>> 0) / 44488 | 0) * 3399 | 0;
     i21 = (i22 >>> 0 < i23 >>> 0 ? 2147483647 : 0) + (i22 - i23) | 0;
     i24 = i21 + -1 | 0;
    } while (i24 >>> 0 >= i13 >>> 0);
    i19 = (i24 & i7) + (i15 ? i19 << i14 : 0) | 0;
    i18 = i18 + 1 | 0;
    if ((i18 | 0) == (i10 | 0)) break; else i20 = i21;
   }
   HEAP32[i2 >> 2] = i21;
   i16 = i19;
   i17 = i10;
  }
  if (i17 >>> 0 < i12 >>> 0) {
   i20 = i17;
   i18 = i16;
   i23 = HEAP32[i2 >> 2] | 0;
   while (1) {
    i25 = i23;
    do {
     i22 = ((i25 >>> 0) % 44488 | 0) * 48271 | 0;
     i26 = ((i25 >>> 0) / 44488 | 0) * 3399 | 0;
     i25 = (i22 >>> 0 < i26 >>> 0 ? 2147483647 : 0) + (i22 - i26) | 0;
     i27 = i25 + -1 | 0;
    } while (i27 >>> 0 >= i9 >>> 0);
    i18 = (i27 & i4) + (i11 ? i18 << i8 : 0) | 0;
    i20 = i20 + 1 | 0;
    if ((i20 | 0) == (i12 | 0)) break; else i23 = i25;
   }
   HEAP32[i2 >> 2] = i25;
   i28 = i18;
  } else i28 = i16;
 } while (i28 >>> 0 >= i3 >>> 0);
 i5 = i1 + i28 | 0;
 return i5 | 0;
}

function __ZN7ImGuiIOC2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i2 = i1 + 156 | 0;
 i3 = i1 + 160 | 0;
 i4 = i1 + 164 | 0;
 i5 = i1 + 208 | 0;
 i6 = i1 + 212 | 0;
 i7 = i1 + 900 | 0;
 i8 = i1 + 904 | 0;
 _memset(i1 | 0, 0, 5352) | 0;
 HEAP32[i1 + 8 >> 2] = -1082130432;
 HEAP32[i1 + 12 >> 2] = -1082130432;
 HEAPF32[i1 + 16 >> 2] = Math_fround(.0166666675);
 HEAPF32[i1 + 20 >> 2] = Math_fround(5.0);
 HEAP32[i1 + 24 >> 2] = 31752;
 HEAP32[i1 + 28 >> 2] = 31762;
 HEAPF32[i1 + 32 >> 2] = Math_fround(.300000012);
 HEAPF32[i1 + 36 >> 2] = Math_fround(6.0);
 i9 = i1 + 44 | 0;
 i10 = i9 + 84 | 0;
 do {
  HEAP32[i9 >> 2] = -1;
  i9 = i9 + 4 | 0;
 } while ((i9 | 0) < (i10 | 0));
 HEAPF32[i1 + 128 >> 2] = Math_fround(.25);
 HEAPF32[i1 + 132 >> 2] = Math_fround(.0500000007);
 HEAP32[i1 + 136 >> 2] = 0;
 HEAP32[i1 + 140 >> 2] = 0;
 HEAPF32[i1 + 144 >> 2] = Math_fround(1.0);
 HEAP32[i1 + 152 >> 2] = 0;
 HEAP8[i1 + 148 >> 0] = 0;
 HEAP32[i2 >> 2] = 1065353216;
 HEAP32[i3 >> 2] = 1065353216;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 HEAP32[i4 + 12 >> 2] = 0;
 HEAP8[i4 + 16 >> 0] = 0;
 HEAP8[i1 + 181 >> 0] = 1;
 HEAP32[i1 + 184 >> 2] = 66;
 HEAP32[i1 + 188 >> 2] = 42;
 HEAP32[i1 + 192 >> 2] = 0;
 HEAP32[i1 + 196 >> 2] = 43;
 HEAP32[i1 + 200 >> 2] = 0;
 HEAP32[i1 + 204 >> 2] = 0;
 HEAP32[i5 >> 2] = -8388609;
 HEAP32[i6 >> 2] = -8388609;
 HEAP32[i7 >> 2] = -8388609;
 HEAP32[i8 >> 2] = -8388609;
 HEAPF32[i1 + 40 >> 2] = Math_fround(6.0);
 HEAPF32[i1 + 1008 >> 2] = Math_fround(-1.0);
 HEAPF32[i1 + 988 >> 2] = Math_fround(-1.0);
 HEAPF32[i1 + 1012 >> 2] = Math_fround(-1.0);
 HEAPF32[i1 + 992 >> 2] = Math_fround(-1.0);
 HEAPF32[i1 + 1016 >> 2] = Math_fround(-1.0);
 HEAPF32[i1 + 996 >> 2] = Math_fround(-1.0);
 HEAPF32[i1 + 1020 >> 2] = Math_fround(-1.0);
 HEAPF32[i1 + 1e3 >> 2] = Math_fround(-1.0);
 HEAPF32[i1 + 1024 >> 2] = Math_fround(-1.0);
 HEAPF32[i1 + 1004 >> 2] = Math_fround(-1.0);
 i8 = 0;
 do {
  HEAPF32[i1 + 3136 + (i8 << 2) >> 2] = Math_fround(-1.0);
  HEAPF32[i1 + 1088 + (i8 << 2) >> 2] = Math_fround(-1.0);
  i8 = i8 + 1 | 0;
 } while ((i8 | 0) != 512);
 HEAPF32[i1 + 5184 >> 2] = Math_fround(-1.0);
 HEAPF32[i1 + 5188 >> 2] = Math_fround(-1.0);
 HEAPF32[i1 + 5192 >> 2] = Math_fround(-1.0);
 HEAPF32[i1 + 5196 >> 2] = Math_fround(-1.0);
 HEAPF32[i1 + 5200 >> 2] = Math_fround(-1.0);
 HEAPF32[i1 + 5204 >> 2] = Math_fround(-1.0);
 HEAPF32[i1 + 5208 >> 2] = Math_fround(-1.0);
 HEAPF32[i1 + 5212 >> 2] = Math_fround(-1.0);
 HEAPF32[i1 + 5216 >> 2] = Math_fround(-1.0);
 HEAPF32[i1 + 5220 >> 2] = Math_fround(-1.0);
 HEAPF32[i1 + 5224 >> 2] = Math_fround(-1.0);
 HEAPF32[i1 + 5228 >> 2] = Math_fround(-1.0);
 HEAPF32[i1 + 5232 >> 2] = Math_fround(-1.0);
 HEAPF32[i1 + 5236 >> 2] = Math_fround(-1.0);
 HEAPF32[i1 + 5240 >> 2] = Math_fround(-1.0);
 HEAPF32[i1 + 5244 >> 2] = Math_fround(-1.0);
 HEAPF32[i1 + 5248 >> 2] = Math_fround(-1.0);
 HEAPF32[i1 + 5252 >> 2] = Math_fround(-1.0);
 HEAPF32[i1 + 5256 >> 2] = Math_fround(-1.0);
 HEAPF32[i1 + 5260 >> 2] = Math_fround(-1.0);
 HEAPF32[i1 + 5264 >> 2] = Math_fround(-1.0);
 return;
}

function __ZL15CalcSizeAutoFitP11ImGuiWindowRK6ImVec2(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, f15 = f0, f16 = f0, f17 = f0, f18 = f0, f19 = f0, i20 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i5 = i4 + 16 | 0;
 i6 = i4 + 8 | 0;
 i7 = i4 + 24 | 0;
 i8 = i4;
 i9 = HEAP32[1460598] | 0;
 i10 = i2 + 8 | 0;
 i11 = HEAP32[i10 >> 2] | 0;
 if (i11 & 33554432 | 0) {
  i12 = i3;
  i13 = HEAP32[i12 + 4 >> 2] | 0;
  i14 = i1;
  HEAP32[i14 >> 2] = HEAP32[i12 >> 2];
  HEAP32[i14 + 4 >> 2] = i13;
  STACKTOP = i4;
  return;
 }
 HEAPF32[i6 >> 2] = Math_fround(0.0);
 HEAPF32[i6 + 4 >> 2] = Math_fround(0.0);
 if (!(i11 & 268435456)) {
  i11 = i9 + 5376 | 0;
  i13 = HEAP32[i11 >> 2] | 0;
  i14 = HEAP32[i11 + 4 >> 2] | 0;
  i11 = i6;
  HEAP32[i11 >> 2] = i13;
  HEAP32[i11 + 4 >> 2] = i14;
  f15 = (HEAP32[tempDoublePtr >> 2] = i13, Math_fround(HEAPF32[tempDoublePtr >> 2]));
  f16 = f15;
  f17 = (HEAP32[tempDoublePtr >> 2] = i14, Math_fround(HEAPF32[tempDoublePtr >> 2]));
 } else {
  f16 = Math_fround(0.0);
  f17 = Math_fround(0.0);
 }
 f15 = Math_fround(Math_fround(HEAPF32[i9 + 5488 >> 2]) * Math_fround(2.0));
 f18 = Math_fround(Math_fround(HEAPF32[i9 + 5492 >> 2]) * Math_fround(2.0));
 f19 = Math_fround(Math_fround(HEAPF32[i9 + 12 >> 2]) - f15);
 f15 = Math_fround(Math_fround(HEAPF32[i9 + 16 >> 2]) - f18);
 HEAPF32[i7 >> 2] = f19;
 HEAPF32[i7 + 4 >> 2] = f15;
 i14 = HEAP32[(f16 >= f19 ? i6 : i7) >> 2] | 0;
 i13 = HEAP32[(f17 >= f15 ? i6 : i7) + 4 >> 2] | 0;
 HEAP32[i5 >> 2] = i14;
 HEAP32[i5 + 4 >> 2] = i13;
 f15 = Math_fround(HEAPF32[i3 >> 2]);
 f19 = (HEAP32[tempDoublePtr >> 2] = i13, Math_fround(HEAPF32[tempDoublePtr >> 2]));
 if (f15 < f16) i20 = i6; else {
  i13 = f15 > (HEAP32[tempDoublePtr >> 2] = i14, Math_fround(HEAPF32[tempDoublePtr >> 2]));
  i20 = i13 ? i5 : i3;
 }
 i13 = i3 + 4 | 0;
 f15 = Math_fround(HEAPF32[i13 >> 2]);
 i14 = HEAP32[(f15 < f17 ? i6 : f15 > f19 ? i5 : i3) + 4 >> 2] | 0;
 HEAP32[i1 >> 2] = HEAP32[i20 >> 2];
 i20 = i1 + 4 | 0;
 HEAP32[i20 >> 2] = i14;
 i6 = i1;
 i11 = HEAP32[i6 >> 2] | 0;
 i12 = HEAP32[i6 + 4 >> 2] | 0;
 i6 = i8;
 HEAP32[i6 >> 2] = i11;
 HEAP32[i6 + 4 >> 2] = i12;
 HEAP32[i5 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
 __ZL23CalcSizeAfterConstraintP11ImGuiWindow6ImVec2(i7, i2, i5);
 f19 = Math_fround(HEAPF32[i7 >> 2]);
 i5 = f19 < Math_fround(HEAPF32[i3 >> 2]);
 f19 = (HEAP32[tempDoublePtr >> 2] = i14, Math_fround(HEAPF32[tempDoublePtr >> 2]));
 f15 = (HEAP32[tempDoublePtr >> 2] = i11, Math_fround(HEAPF32[tempDoublePtr >> 2]));
 if (i5) if ((HEAP32[i10 >> 2] & 2056 | 0) == 2048) {
  f17 = Math_fround(Math_fround(HEAPF32[i9 + 5456 >> 2]) + f19);
  HEAPF32[i20 >> 2] = f17;
 }
 f17 = Math_fround(HEAPF32[i7 + 4 >> 2]);
 if (f17 < Math_fround(HEAPF32[i13 >> 2])) if (!(HEAP32[i10 >> 2] & 8)) {
  f17 = Math_fround(Math_fround(HEAPF32[i9 + 5456 >> 2]) + f15);
  HEAPF32[i1 >> 2] = f17;
 }
 STACKTOP = i4;
 return;
}

function __ZNSt3__2L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i6 = 0;
 i7 = i2;
 if (!(i5 & 4)) {
  i8 = 0;
  i9 = i1;
 } else if ((i7 - i1 | 0) > 2) if ((HEAP8[i1 >> 0] | 0) == -17) if ((HEAP8[i1 + 1 >> 0] | 0) == -69) {
  i8 = 0;
  i9 = (HEAP8[i1 + 2 >> 0] | 0) == -65 ? i1 + 3 | 0 : i1;
 } else {
  i8 = 0;
  i9 = i1;
 } else {
  i8 = 0;
  i9 = i1;
 } else {
  i8 = 0;
  i9 = i1;
 }
 L6 : while (1) {
  if (!(i8 >>> 0 < i3 >>> 0 & i9 >>> 0 < i2 >>> 0)) {
   i6 = 34;
   break;
  }
  i5 = HEAP8[i9 >> 0] | 0;
  i10 = i5 & 255;
  do if (i5 << 24 >> 24 > -1) {
   if (i10 >>> 0 > i4 >>> 0) {
    i6 = 34;
    break L6;
   }
   i11 = i9 + 1 | 0;
  } else {
   if ((i5 & 255) < 194) {
    i6 = 34;
    break L6;
   }
   if ((i5 & 255) < 224) {
    if ((i7 - i9 | 0) < 2) {
     i6 = 34;
     break L6;
    }
    i12 = HEAPU8[i9 + 1 >> 0] | 0;
    if ((i12 & 192 | 0) != 128) {
     i6 = 34;
     break L6;
    }
    if ((i12 & 63 | i10 << 6 & 1984) >>> 0 > i4 >>> 0) {
     i6 = 34;
     break L6;
    }
    i11 = i9 + 2 | 0;
    break;
   }
   if ((i5 & 255) < 240) {
    i12 = i9;
    if ((i7 - i12 | 0) < 3) {
     i6 = 34;
     break L6;
    }
    i13 = HEAP8[i9 + 1 >> 0] | 0;
    i14 = HEAP8[i9 + 2 >> 0] | 0;
    switch (i5 << 24 >> 24) {
    case -32:
     {
      if ((i13 & -32) << 24 >> 24 != -96) {
       i15 = i12;
       break L6;
      }
      break;
     }
    case -19:
     {
      if ((i13 & -32) << 24 >> 24 != -128) {
       i15 = i12;
       break L6;
      }
      break;
     }
    default:
     if ((i13 & -64) << 24 >> 24 != -128) {
      i15 = i12;
      break L6;
     }
    }
    i12 = i14 & 255;
    if ((i12 & 192 | 0) != 128) {
     i6 = 34;
     break L6;
    }
    if (((i13 & 63) << 6 | i10 << 12 & 61440 | i12 & 63) >>> 0 > i4 >>> 0) {
     i6 = 34;
     break L6;
    } else {
     i11 = i9 + 3 | 0;
     break;
    }
   }
   if ((i5 & 255) >= 245) {
    i6 = 34;
    break L6;
   }
   i12 = i9;
   if ((i7 - i12 | 0) < 4) {
    i6 = 34;
    break L6;
   }
   i13 = HEAP8[i9 + 1 >> 0] | 0;
   i14 = HEAP8[i9 + 2 >> 0] | 0;
   i16 = HEAP8[i9 + 3 >> 0] | 0;
   switch (i5 << 24 >> 24) {
   case -16:
    {
     if ((i13 + 112 & 255) >= 48) {
      i15 = i12;
      break L6;
     }
     break;
    }
   case -12:
    {
     if ((i13 & -16) << 24 >> 24 != -128) {
      i15 = i12;
      break L6;
     }
     break;
    }
   default:
    if ((i13 & -64) << 24 >> 24 != -128) {
     i15 = i12;
     break L6;
    }
   }
   i12 = i14 & 255;
   if ((i12 & 192 | 0) != 128) {
    i6 = 34;
    break L6;
   }
   i14 = i16 & 255;
   if ((i14 & 192 | 0) != 128) {
    i6 = 34;
    break L6;
   }
   if (((i13 & 63) << 12 | i10 << 18 & 1835008 | i12 << 6 & 4032 | i14 & 63) >>> 0 > i4 >>> 0) {
    i6 = 34;
    break L6;
   } else i11 = i9 + 4 | 0;
  } while (0);
  i8 = i8 + 1 | 0;
  i9 = i11;
 }
 if ((i6 | 0) == 34) i15 = i9;
 return i15 - i1 | 0;
}

function __ZNSt3__210__stdinbufIcE9__getcharEb(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i5 = i4 + 16 | 0;
 i6 = i4 + 8 | 0;
 i7 = i4 + 4 | 0;
 i8 = i4;
 i9 = i1 + 52 | 0;
 if (!(HEAP8[i9 >> 0] | 0)) {
  i10 = HEAP32[i1 + 44 >> 2] | 0;
  i11 = (i10 | 0) > 1 ? i10 : 1;
  i10 = i1 + 32 | 0;
  i12 = 0;
  while (1) {
   if ((i12 | 0) >= (i11 | 0)) {
    i3 = 9;
    break;
   }
   i13 = _getc(HEAP32[i10 >> 2] | 0) | 0;
   if ((i13 | 0) == -1) {
    i3 = 8;
    break;
   }
   HEAP8[i5 + i12 >> 0] = i13;
   i12 = i12 + 1 | 0;
  }
  if ((i3 | 0) == 8) i14 = __ZNSt3__211char_traitsIcE3eofEv() | 0; else if ((i3 | 0) == 9) {
   do if (!(HEAP8[i1 + 53 >> 0] | 0)) {
    i12 = i1 + 40 | 0;
    i13 = i1 + 36 | 0;
    i15 = i6 + 1 | 0;
    i16 = i11;
    L11 : while (1) {
     i17 = HEAP32[i12 >> 2] | 0;
     i18 = i17;
     i19 = HEAP32[i18 >> 2] | 0;
     i20 = HEAP32[i18 + 4 >> 2] | 0;
     i18 = HEAP32[i13 >> 2] | 0;
     i21 = i5 + i16 | 0;
     switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i18 >> 2] | 0) + 16 >> 2] & 15](i18, i17, i5, i21, i7, i6, i15, i8) | 0) {
     case 3:
      {
       i3 = 16;
       break L11;
       break;
      }
     case 2:
      {
       i3 = 18;
       break L11;
       break;
      }
     case 1:
      break;
     default:
      break L11;
     }
     i17 = HEAP32[i12 >> 2] | 0;
     HEAP32[i17 >> 2] = i19;
     HEAP32[i17 + 4 >> 2] = i20;
     if ((i16 | 0) == 8) {
      i3 = 18;
      break;
     }
     i20 = _getc(HEAP32[i10 >> 2] | 0) | 0;
     if ((i20 | 0) == -1) {
      i3 = 18;
      break;
     }
     HEAP8[i21 >> 0] = i20;
     i16 = i16 + 1 | 0;
    }
    if ((i3 | 0) == 16) HEAP8[i6 >> 0] = HEAP8[i5 >> 0] | 0; else if ((i3 | 0) == 18) {
     i22 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
     break;
    }
    i23 = i16;
    i3 = 19;
   } else {
    HEAP8[i6 >> 0] = HEAP8[i5 >> 0] | 0;
    i23 = i11;
    i3 = 19;
   } while (0);
   L21 : do if ((i3 | 0) == 19) {
    L23 : do if (i2) {
     i11 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i6 >> 0] | 0) | 0;
     HEAP32[i1 + 48 >> 2] = i11;
    } else {
     i11 = i23;
     do {
      if ((i11 | 0) <= 0) break L23;
      i11 = i11 + -1 | 0;
      i8 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i5 + i11 >> 0] | 0) | 0;
     } while ((_ungetc(i8, HEAP32[i10 >> 2] | 0) | 0) != -1);
     i22 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
     break L21;
    } while (0);
    i22 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i6 >> 0] | 0) | 0;
   } while (0);
   i14 = i22;
  }
  i24 = i14;
 } else {
  i14 = i1 + 48 | 0;
  i1 = HEAP32[i14 >> 2] | 0;
  if (i2) {
   i2 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
   HEAP32[i14 >> 2] = i2;
   HEAP8[i9 >> 0] = 0;
   i24 = i1;
  } else i24 = i1;
 }
 STACKTOP = i4;
 return i24 | 0;
}

function __ZNSt3__210__stdinbufIwE9__getcharEb(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i5 = i4 + 16 | 0;
 i6 = i4 + 8 | 0;
 i7 = i4 + 4 | 0;
 i8 = i4;
 i9 = i1 + 52 | 0;
 if (!(HEAP8[i9 >> 0] | 0)) {
  i10 = HEAP32[i1 + 44 >> 2] | 0;
  i11 = (i10 | 0) > 1 ? i10 : 1;
  i10 = i1 + 32 | 0;
  i12 = 0;
  while (1) {
   if ((i12 | 0) >= (i11 | 0)) {
    i3 = 9;
    break;
   }
   i13 = _getc(HEAP32[i10 >> 2] | 0) | 0;
   if ((i13 | 0) == -1) {
    i3 = 8;
    break;
   }
   HEAP8[i5 + i12 >> 0] = i13;
   i12 = i12 + 1 | 0;
  }
  if ((i3 | 0) == 8) i14 = __ZNSt3__211char_traitsIwE3eofEv() | 0; else if ((i3 | 0) == 9) {
   do if (!(HEAP8[i1 + 53 >> 0] | 0)) {
    i12 = i1 + 40 | 0;
    i13 = i1 + 36 | 0;
    i15 = i6 + 4 | 0;
    i16 = i11;
    L11 : while (1) {
     i17 = HEAP32[i12 >> 2] | 0;
     i18 = i17;
     i19 = HEAP32[i18 >> 2] | 0;
     i20 = HEAP32[i18 + 4 >> 2] | 0;
     i18 = HEAP32[i13 >> 2] | 0;
     i21 = i5 + i16 | 0;
     switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i18 >> 2] | 0) + 16 >> 2] & 15](i18, i17, i5, i21, i7, i6, i15, i8) | 0) {
     case 3:
      {
       i3 = 16;
       break L11;
       break;
      }
     case 2:
      {
       i3 = 18;
       break L11;
       break;
      }
     case 1:
      break;
     default:
      break L11;
     }
     i17 = HEAP32[i12 >> 2] | 0;
     HEAP32[i17 >> 2] = i19;
     HEAP32[i17 + 4 >> 2] = i20;
     if ((i16 | 0) == 8) {
      i3 = 18;
      break;
     }
     i20 = _getc(HEAP32[i10 >> 2] | 0) | 0;
     if ((i20 | 0) == -1) {
      i3 = 18;
      break;
     }
     HEAP8[i21 >> 0] = i20;
     i16 = i16 + 1 | 0;
    }
    if ((i3 | 0) == 16) HEAP32[i6 >> 2] = HEAP8[i5 >> 0]; else if ((i3 | 0) == 18) {
     i22 = __ZNSt3__211char_traitsIwE3eofEv() | 0;
     break;
    }
    i23 = i16;
    i3 = 19;
   } else {
    HEAP32[i6 >> 2] = HEAP8[i5 >> 0];
    i23 = i11;
    i3 = 19;
   } while (0);
   L21 : do if ((i3 | 0) == 19) {
    L23 : do if (i2) {
     i11 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i6 >> 2] | 0) | 0;
     HEAP32[i1 + 48 >> 2] = i11;
    } else {
     i11 = i23;
     do {
      if ((i11 | 0) <= 0) break L23;
      i11 = i11 + -1 | 0;
      i8 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP8[i5 + i11 >> 0] | 0) | 0;
     } while ((_ungetc(i8, HEAP32[i10 >> 2] | 0) | 0) != -1);
     i22 = __ZNSt3__211char_traitsIwE3eofEv() | 0;
     break L21;
    } while (0);
    i22 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i6 >> 2] | 0) | 0;
   } while (0);
   i14 = i22;
  }
  i24 = i14;
 } else {
  i14 = i1 + 48 | 0;
  i1 = HEAP32[i14 >> 2] | 0;
  if (i2) {
   i2 = __ZNSt3__211char_traitsIwE3eofEv() | 0;
   HEAP32[i14 >> 2] = i2;
   HEAP8[i9 >> 0] = 0;
   i24 = i1;
  } else i24 = i1;
 }
 STACKTOP = i4;
 return i24 | 0;
}

function __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i3 = 0;
 i4 = (i2 | 0) == (i1 | 0);
 HEAP8[i2 + 12 >> 0] = i4 & 1;
 if (i4) return; else i5 = i2;
 while (1) {
  i6 = i5 + 8 | 0;
  i7 = HEAP32[i6 >> 2] | 0;
  i2 = i7 + 12 | 0;
  if (HEAP8[i2 >> 0] | 0) {
   i3 = 23;
   break;
  }
  i8 = i7 + 8 | 0;
  i9 = HEAP32[i8 >> 2] | 0;
  i4 = HEAP32[i9 >> 2] | 0;
  if ((i4 | 0) == (i7 | 0)) {
   i10 = HEAP32[i9 + 4 >> 2] | 0;
   if (!i10) {
    i3 = 7;
    break;
   }
   i11 = i10 + 12 | 0;
   if (!(HEAP8[i11 >> 0] | 0)) i12 = i11; else {
    i3 = 7;
    break;
   }
  } else {
   if (!i4) {
    i3 = 16;
    break;
   }
   i11 = i4 + 12 | 0;
   if (!(HEAP8[i11 >> 0] | 0)) i12 = i11; else {
    i3 = 16;
    break;
   }
  }
  HEAP8[i2 >> 0] = 1;
  i2 = (i9 | 0) == (i1 | 0);
  HEAP8[i9 + 12 >> 0] = i2 & 1;
  HEAP8[i12 >> 0] = 1;
  if (i2) {
   i3 = 23;
   break;
  } else i5 = i9;
 }
 if ((i3 | 0) == 7) {
  if ((HEAP32[i7 >> 2] | 0) == (i5 | 0)) {
   i13 = i7;
   i14 = i9;
  } else {
   i12 = i7 + 4 | 0;
   i1 = HEAP32[i12 >> 2] | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   HEAP32[i12 >> 2] = i2;
   if (!i2) i15 = i9; else {
    HEAP32[i2 + 8 >> 2] = i7;
    i15 = HEAP32[i8 >> 2] | 0;
   }
   HEAP32[i1 + 8 >> 2] = i15;
   i15 = HEAP32[i8 >> 2] | 0;
   HEAP32[((HEAP32[i15 >> 2] | 0) == (i7 | 0) ? i15 : i15 + 4 | 0) >> 2] = i1;
   HEAP32[i1 >> 2] = i7;
   HEAP32[i8 >> 2] = i1;
   i13 = i1;
   i14 = HEAP32[i1 + 8 >> 2] | 0;
  }
  HEAP8[i13 + 12 >> 0] = 1;
  HEAP8[i14 + 12 >> 0] = 0;
  i13 = HEAP32[i14 >> 2] | 0;
  i1 = i13 + 4 | 0;
  i15 = HEAP32[i1 >> 2] | 0;
  HEAP32[i14 >> 2] = i15;
  if (i15 | 0) HEAP32[i15 + 8 >> 2] = i14;
  i15 = i14 + 8 | 0;
  HEAP32[i13 + 8 >> 2] = HEAP32[i15 >> 2];
  i2 = HEAP32[i15 >> 2] | 0;
  HEAP32[((HEAP32[i2 >> 2] | 0) == (i14 | 0) ? i2 : i2 + 4 | 0) >> 2] = i13;
  HEAP32[i1 >> 2] = i14;
  HEAP32[i15 >> 2] = i13;
  return;
 } else if ((i3 | 0) == 16) {
  if ((HEAP32[i7 >> 2] | 0) == (i5 | 0)) {
   i13 = i5 + 4 | 0;
   i15 = HEAP32[i13 >> 2] | 0;
   HEAP32[i7 >> 2] = i15;
   if (!i15) i16 = i9; else {
    HEAP32[i15 + 8 >> 2] = i7;
    i16 = HEAP32[i8 >> 2] | 0;
   }
   HEAP32[i6 >> 2] = i16;
   i16 = HEAP32[i8 >> 2] | 0;
   HEAP32[((HEAP32[i16 >> 2] | 0) == (i7 | 0) ? i16 : i16 + 4 | 0) >> 2] = i5;
   HEAP32[i13 >> 2] = i7;
   HEAP32[i8 >> 2] = i5;
   i17 = i5;
   i18 = HEAP32[i5 + 8 >> 2] | 0;
  } else {
   i17 = i7;
   i18 = i9;
  }
  HEAP8[i17 + 12 >> 0] = 1;
  HEAP8[i18 + 12 >> 0] = 0;
  i17 = i18 + 4 | 0;
  i9 = HEAP32[i17 >> 2] | 0;
  i7 = HEAP32[i9 >> 2] | 0;
  HEAP32[i17 >> 2] = i7;
  if (i7 | 0) HEAP32[i7 + 8 >> 2] = i18;
  i7 = i18 + 8 | 0;
  HEAP32[i9 + 8 >> 2] = HEAP32[i7 >> 2];
  i17 = HEAP32[i7 >> 2] | 0;
  HEAP32[((HEAP32[i17 >> 2] | 0) == (i18 | 0) ? i17 : i17 + 4 | 0) >> 2] = i9;
  HEAP32[i9 >> 2] = i18;
  HEAP32[i7 >> 2] = i9;
  return;
 } else if ((i3 | 0) == 23) return;
}

function __ZN10ImDrawList9PathArcToERK6ImVec2fffi(i1, i2, f3, f4, f5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 f3 = Math_fround(f3);
 f4 = Math_fround(f4);
 f5 = Math_fround(f5);
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, f18 = f0, f19 = f0, f20 = f0, f21 = f0, f22 = f0, i23 = 0, i24 = 0;
 i7 = f3 == Math_fround(0.0);
 i8 = i1 + 84 | 0;
 i9 = HEAP32[i8 >> 2] | 0;
 if (i7) {
  i7 = i1 + 88 | 0;
  if ((i9 | 0) == (HEAP32[i7 >> 2] | 0)) {
   i10 = i9 + 1 | 0;
   if (!i9) i11 = 8; else i11 = ((i9 | 0) / 2 | 0) + i9 | 0;
   i12 = (i11 | 0) > (i10 | 0) ? i11 : i10;
   if ((i9 | 0) < (i12 | 0)) {
    i10 = __ZN5ImGui8MemAllocEj(i12 << 3) | 0;
    i11 = i1 + 92 | 0;
    i13 = HEAP32[i11 >> 2] | 0;
    if (!i13) i14 = i11; else {
     _memcpy(i10 | 0, i13 | 0, HEAP32[i8 >> 2] << 3 | 0) | 0;
     __ZN5ImGui7MemFreeEPv(HEAP32[i11 >> 2] | 0);
     i14 = i11;
    }
    HEAP32[i14 >> 2] = i10;
    HEAP32[i7 >> 2] = i12;
    i15 = HEAP32[i8 >> 2] | 0;
   } else i15 = i9;
  } else i15 = i9;
  i12 = i2;
  i7 = HEAP32[i12 + 4 >> 2] | 0;
  i10 = (HEAP32[i1 + 92 >> 2] | 0) + (i15 << 3) | 0;
  HEAP32[i10 >> 2] = HEAP32[i12 >> 2];
  HEAP32[i10 + 4 >> 2] = i7;
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
  return;
 }
 i7 = i6 + 1 | 0;
 i10 = i7 + i9 | 0;
 i9 = i1 + 88 | 0;
 i12 = HEAP32[i9 >> 2] | 0;
 if ((i12 | 0) < (i10 | 0)) {
  i15 = __ZN5ImGui8MemAllocEj(i10 << 3) | 0;
  i14 = i1 + 92 | 0;
  i11 = HEAP32[i14 >> 2] | 0;
  if (!i11) i16 = i14; else {
   _memcpy(i15 | 0, i11 | 0, HEAP32[i8 >> 2] << 3 | 0) | 0;
   __ZN5ImGui7MemFreeEPv(HEAP32[i14 >> 2] | 0);
   i16 = i14;
  }
  HEAP32[i16 >> 2] = i15;
  HEAP32[i9 >> 2] = i10;
  i17 = i10;
 } else i17 = i12;
 if ((i6 | 0) < 0) return;
 f18 = Math_fround(i6 | 0);
 f19 = Math_fround(f5 - f4);
 i6 = i2 + 4 | 0;
 i12 = i1 + 92 | 0;
 i1 = 0;
 i10 = HEAP32[i8 >> 2] | 0;
 i15 = i17;
 while (1) {
  f5 = Math_fround(Math_fround(f19 * Math_fround(Math_fround(i1 | 0) / f18)) + f4);
  f20 = Math_fround(HEAPF32[i2 >> 2]);
  f21 = Math_fround(f20 + Math_fround(Math_fround(_cosf(f5)) * f3));
  f20 = Math_fround(HEAPF32[i6 >> 2]);
  f22 = Math_fround(f20 + Math_fround(Math_fround(_sinf(f5)) * f3));
  if ((i10 | 0) == (i15 | 0)) {
   i17 = i15 + 1 | 0;
   if (!i15) i23 = 8; else i23 = ((i15 | 0) / 2 | 0) + i15 | 0;
   i16 = (i23 | 0) > (i17 | 0) ? i23 : i17;
   if ((i15 | 0) < (i16 | 0)) {
    i17 = __ZN5ImGui8MemAllocEj(i16 << 3) | 0;
    i14 = HEAP32[i12 >> 2] | 0;
    if (i14 | 0) {
     _memcpy(i17 | 0, i14 | 0, HEAP32[i8 >> 2] << 3 | 0) | 0;
     __ZN5ImGui7MemFreeEPv(HEAP32[i12 >> 2] | 0);
    }
    HEAP32[i12 >> 2] = i17;
    HEAP32[i9 >> 2] = i16;
    i24 = HEAP32[i8 >> 2] | 0;
   } else i24 = i15;
  } else i24 = i10;
  i16 = HEAP32[i12 >> 2] | 0;
  i17 = i16 + (i24 << 3) | 0;
  HEAPF32[i17 >> 2] = f21;
  HEAPF32[i17 + 4 >> 2] = f22;
  i17 = (HEAP32[i8 >> 2] | 0) + 1 | 0;
  HEAP32[i8 >> 2] = i17;
  i16 = i1 + 1 | 0;
  if ((i16 | 0) == (i7 | 0)) break;
  i1 = i16;
  i10 = i17;
  i15 = HEAP32[i9 >> 2] | 0;
 }
 return;
}

function __ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_(i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i12 = i12 | 0;
 var i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 L1 : do if (i1 << 24 >> 24 == i6 << 24 >> 24) if (!(HEAP8[i2 >> 0] | 0)) i13 = -1; else {
  HEAP8[i2 >> 0] = 0;
  i14 = HEAP32[i5 >> 2] | 0;
  HEAP32[i5 >> 2] = i14 + 1;
  HEAP8[i14 >> 0] = 46;
  i14 = HEAP8[i8 + 11 >> 0] | 0;
  if (!((i14 << 24 >> 24 < 0 ? HEAP32[i8 + 4 >> 2] | 0 : i14 & 255) | 0)) i13 = 0; else {
   i14 = HEAP32[i10 >> 2] | 0;
   if ((i14 - i9 | 0) < 160) {
    i15 = HEAP32[i11 >> 2] | 0;
    HEAP32[i10 >> 2] = i14 + 4;
    HEAP32[i14 >> 2] = i15;
    i13 = 0;
   } else i13 = 0;
  }
 } else {
  if (i1 << 24 >> 24 == i7 << 24 >> 24) {
   i15 = HEAP8[i8 + 11 >> 0] | 0;
   if ((i15 << 24 >> 24 < 0 ? HEAP32[i8 + 4 >> 2] | 0 : i15 & 255) | 0) {
    if (!(HEAP8[i2 >> 0] | 0)) {
     i13 = -1;
     break;
    }
    i15 = HEAP32[i10 >> 2] | 0;
    if ((i15 - i9 | 0) >= 160) {
     i13 = 0;
     break;
    }
    i14 = HEAP32[i11 >> 2] | 0;
    HEAP32[i10 >> 2] = i15 + 4;
    HEAP32[i15 >> 2] = i14;
    HEAP32[i11 >> 2] = 0;
    i13 = 0;
    break;
   }
  }
  i14 = i12 + 32 | 0;
  i15 = 0;
  while (1) {
   i16 = i12 + i15 | 0;
   if ((i15 | 0) == 32) {
    i17 = i14;
    break;
   }
   if ((HEAP8[i16 >> 0] | 0) == i1 << 24 >> 24) {
    i17 = i16;
    break;
   } else i15 = i15 + 1 | 0;
  }
  i15 = i17 - i12 | 0;
  if ((i15 | 0) > 31) i13 = -1; else {
   i14 = HEAP8[70463 + i15 >> 0] | 0;
   switch (i15 | 0) {
   case 24:
   case 25:
    {
     i16 = HEAP32[i5 >> 2] | 0;
     if ((i16 | 0) != (i4 | 0)) if ((HEAP8[i16 + -1 >> 0] & 95) != (HEAP8[i3 >> 0] & 127)) {
      i13 = -1;
      break L1;
     }
     HEAP32[i5 >> 2] = i16 + 1;
     HEAP8[i16 >> 0] = i14;
     i13 = 0;
     break L1;
     break;
    }
   case 23:
   case 22:
    {
     HEAP8[i3 >> 0] = 80;
     i16 = HEAP32[i5 >> 2] | 0;
     HEAP32[i5 >> 2] = i16 + 1;
     HEAP8[i16 >> 0] = i14;
     i13 = 0;
     break L1;
     break;
    }
   default:
    {
     i16 = i14 & 95;
     if ((i16 | 0) == (HEAP8[i3 >> 0] | 0)) {
      HEAP8[i3 >> 0] = i16 | 128;
      if (HEAP8[i2 >> 0] | 0) {
       HEAP8[i2 >> 0] = 0;
       i16 = HEAP8[i8 + 11 >> 0] | 0;
       if ((i16 << 24 >> 24 < 0 ? HEAP32[i8 + 4 >> 2] | 0 : i16 & 255) | 0) {
        i16 = HEAP32[i10 >> 2] | 0;
        if ((i16 - i9 | 0) < 160) {
         i18 = HEAP32[i11 >> 2] | 0;
         HEAP32[i10 >> 2] = i16 + 4;
         HEAP32[i16 >> 2] = i18;
        }
       }
      }
     }
     i18 = HEAP32[i5 >> 2] | 0;
     HEAP32[i5 >> 2] = i18 + 1;
     HEAP8[i18 >> 0] = i14;
     if ((i15 | 0) > 21) {
      i13 = 0;
      break L1;
     }
     HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
     i13 = 0;
     break L1;
    }
   }
  }
 } while (0);
 return i13 | 0;
}

function _png_do_gray_to_rgb(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i3 = HEAP32[i1 >> 2] | 0;
 i4 = i1 + 9 | 0;
 i5 = HEAP8[i4 >> 0] | 0;
 if ((i5 & 255) <= 7) return;
 i6 = i1 + 8 | 0;
 i7 = HEAP8[i6 >> 0] | 0;
 if (i7 & 2) return;
 L7 : do switch (i7 << 24 >> 24) {
 case 0:
  {
   if (i5 << 24 >> 24 == 8) {
    i8 = i2 + i3 + -1 | 0;
    if (!i3) break L7;
    i9 = i8 + (i3 << 1) | 0;
    i10 = i8;
    i8 = 0;
    while (1) {
     HEAP8[i9 >> 0] = HEAP8[i10 >> 0] | 0;
     HEAP8[i9 + -1 >> 0] = HEAP8[i10 >> 0] | 0;
     HEAP8[i9 + -2 >> 0] = HEAP8[i10 >> 0] | 0;
     i8 = i8 + 1 | 0;
     if ((i8 | 0) == (i3 | 0)) break; else {
      i9 = i9 + -3 | 0;
      i10 = i10 + -1 | 0;
     }
    }
   } else {
    i10 = i2 + (i3 << 1) + -1 | 0;
    if (!i3) break L7;
    i9 = i10 + (i3 << 2) | 0;
    i8 = i10;
    i10 = 0;
    while (1) {
     HEAP8[i9 >> 0] = HEAP8[i8 >> 0] | 0;
     i11 = i8 + -1 | 0;
     HEAP8[i9 + -1 >> 0] = HEAP8[i11 >> 0] | 0;
     HEAP8[i9 + -2 >> 0] = HEAP8[i8 >> 0] | 0;
     HEAP8[i9 + -3 >> 0] = HEAP8[i11 >> 0] | 0;
     HEAP8[i9 + -4 >> 0] = HEAP8[i8 >> 0] | 0;
     HEAP8[i9 + -5 >> 0] = HEAP8[i11 >> 0] | 0;
     i10 = i10 + 1 | 0;
     if ((i10 | 0) == (i3 | 0)) break; else {
      i9 = i9 + -6 | 0;
      i8 = i8 + -2 | 0;
     }
    }
   }
   break;
  }
 case 4:
  {
   if (i5 << 24 >> 24 == 8) {
    i8 = i3 << 1;
    i9 = i2 + i8 + -1 | 0;
    if (!i3) break L7;
    i10 = i9 + i8 | 0;
    i8 = i9;
    i9 = 0;
    while (1) {
     i11 = i8 + -1 | 0;
     HEAP8[i10 >> 0] = HEAP8[i8 >> 0] | 0;
     HEAP8[i10 + -1 >> 0] = HEAP8[i11 >> 0] | 0;
     HEAP8[i10 + -2 >> 0] = HEAP8[i11 >> 0] | 0;
     HEAP8[i10 + -3 >> 0] = HEAP8[i11 >> 0] | 0;
     i9 = i9 + 1 | 0;
     if ((i9 | 0) == (i3 | 0)) break; else {
      i10 = i10 + -4 | 0;
      i8 = i8 + -2 | 0;
     }
    }
   } else {
    i8 = i3 << 2;
    i10 = i2 + i8 + -1 | 0;
    if (!i3) break L7;
    i9 = i10;
    i11 = i10 + i8 | 0;
    i8 = 0;
    while (1) {
     HEAP8[i11 >> 0] = HEAP8[i9 >> 0] | 0;
     i10 = i9 + -2 | 0;
     HEAP8[i11 + -1 >> 0] = HEAP8[i9 + -1 >> 0] | 0;
     HEAP8[i11 + -2 >> 0] = HEAP8[i10 >> 0] | 0;
     i12 = i9 + -3 | 0;
     HEAP8[i11 + -3 >> 0] = HEAP8[i12 >> 0] | 0;
     HEAP8[i11 + -4 >> 0] = HEAP8[i10 >> 0] | 0;
     HEAP8[i11 + -5 >> 0] = HEAP8[i12 >> 0] | 0;
     HEAP8[i11 + -6 >> 0] = HEAP8[i10 >> 0] | 0;
     HEAP8[i11 + -7 >> 0] = HEAP8[i12 >> 0] | 0;
     i8 = i8 + 1 | 0;
     if ((i8 | 0) == (i3 | 0)) break; else {
      i9 = i9 + -4 | 0;
      i11 = i11 + -8 | 0;
     }
    }
   }
   break;
  }
 default:
  {}
 } while (0);
 i2 = i1 + 10 | 0;
 i5 = HEAP8[i2 >> 0] | 0;
 HEAP8[i2 >> 0] = (i5 & 255) + 2;
 HEAP8[i6 >> 0] = HEAP8[i6 >> 0] | 2;
 i6 = Math_imul(HEAPU8[i4 >> 0] | 0, i5 + 2 & 255) | 0;
 HEAP8[i1 + 11 >> 0] = i6;
 i5 = i6 & 255;
 if (i5 >>> 0 > 7) i13 = Math_imul(i5 >>> 3, i3) | 0; else i13 = ((Math_imul(i5, i3) | 0) + 7 | 0) >>> 3;
 HEAP32[i1 + 4 >> 2] = i13;
 return;
}

function __ZNKSt3__28messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i2 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176);
 i8 = i7 + 168 | 0;
 i9 = i7 + 40 | 0;
 i10 = i7 + 36 | 0;
 i11 = i7 + 32 | 0;
 i12 = i7;
 i13 = i7 + 24 | 0;
 i14 = i7 + 16 | 0;
 HEAP32[i12 >> 2] = 0;
 HEAP32[i12 + 4 >> 2] = 0;
 HEAP32[i12 + 8 >> 2] = 0;
 i15 = 0;
 while (1) {
  if ((i15 | 0) == 3) break;
  HEAP32[i12 + (i15 << 2) >> 2] = 0;
  i15 = i15 + 1 | 0;
 }
 HEAP32[i13 + 4 >> 2] = 0;
 HEAP32[i13 >> 2] = 20484;
 i15 = HEAP8[i6 + 8 + 3 >> 0] | 0;
 i16 = i15 << 24 >> 24 < 0;
 i17 = i16 ? HEAP32[i6 >> 2] | 0 : i6;
 i18 = i17 + ((i16 ? HEAP32[i6 + 4 >> 2] | 0 : i15 & 255) << 2) | 0;
 i15 = i9 + 32 | 0;
 i6 = i17;
 i17 = 0;
 while (1) {
  if (!((i17 | 0) != 2 & i6 >>> 0 < i18 >>> 0)) break;
  HEAP32[i11 >> 2] = i6;
  i16 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i13 >> 2] | 0) + 12 >> 2] & 15](i13, i8, i6, i18, i11, i9, i15, i10) | 0;
  if ((i16 | 0) == 2 ? 1 : (HEAP32[i11 >> 2] | 0) == (i6 | 0)) {
   i2 = 7;
   break;
  } else i19 = i9;
  while (1) {
   if (i19 >>> 0 >= (HEAP32[i10 >> 2] | 0) >>> 0) break;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(i12, HEAP8[i19 >> 0] | 0);
   i19 = i19 + 1 | 0;
  }
  i6 = HEAP32[i11 >> 2] | 0;
  i17 = i16;
 }
 if ((i2 | 0) == 7) __ZNSt3__221__throw_runtime_errorEPKc(0);
 __ZNSt3__26locale5facetD2Ev(i13);
 i13 = (HEAP8[i12 + 11 >> 0] | 0) < 0 ? HEAP32[i12 >> 2] | 0 : i12;
 i17 = _catgets((i3 | 0) == -1 ? -1 : i3 << 1, i4, i5, i13) | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 i5 = 0;
 while (1) {
  if ((i5 | 0) == 3) break;
  HEAP32[i1 + (i5 << 2) >> 2] = 0;
  i5 = i5 + 1 | 0;
 }
 HEAP32[i14 + 4 >> 2] = 0;
 HEAP32[i14 >> 2] = 20532;
 i5 = i13 + (_strlen(i17) | 0) | 0;
 i17 = i5;
 i4 = i9 + 128 | 0;
 i3 = i13;
 i13 = 0;
 while (1) {
  if (!((i13 | 0) != 2 & i3 >>> 0 < i5 >>> 0)) {
   i2 = 21;
   break;
  }
  HEAP32[i11 >> 2] = i3;
  i6 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i14 >> 2] | 0) + 16 >> 2] & 15](i14, i8, i3, (i17 - i3 | 0) > 32 ? i3 + 32 | 0 : i5, i11, i9, i4, i10) | 0;
  if ((i6 | 0) == 2 ? 1 : (HEAP32[i11 >> 2] | 0) == (i3 | 0)) {
   i2 = 17;
   break;
  } else i20 = i9;
  while (1) {
   if (i20 >>> 0 >= (HEAP32[i10 >> 2] | 0) >>> 0) break;
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw(i1, HEAP32[i20 >> 2] | 0);
   i20 = i20 + 4 | 0;
  }
  i3 = HEAP32[i11 >> 2] | 0;
  i13 = i6;
 }
 if ((i2 | 0) == 17) __ZNSt3__221__throw_runtime_errorEPKc(0); else if ((i2 | 0) == 21) {
  __ZNSt3__26locale5facetD2Ev(i14);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i12);
  STACKTOP = i7;
  return;
 }
}

function _png_icc_set_sRGB(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0;
 i5 = 0;
 if ((HEAP8[i1 + 644 >> 0] & 48) == 48) return;
 i6 = (HEAPU8[i3 + 85 >> 0] | 0) << 16 | (HEAPU8[i3 + 84 >> 0] | 0) << 24 | (HEAPU8[i3 + 86 >> 0] | 0) << 8 | (HEAPU8[i3 + 87 >> 0] | 0);
 i7 = i3 + 88 | 0;
 i8 = i3 + 89 | 0;
 i9 = i3 + 90 | 0;
 i10 = i3 + 91 | 0;
 i11 = i3 + 92 | 0;
 i12 = i3 + 93 | 0;
 i13 = i3 + 94 | 0;
 i14 = i3 + 95 | 0;
 i15 = i3 + 96 | 0;
 i16 = i3 + 97 | 0;
 i17 = i3 + 98 | 0;
 i18 = i3 + 99 | 0;
 i19 = i3 + 1 | 0;
 i20 = i3 + 2 | 0;
 i21 = i3 + 3 | 0;
 i22 = i3 + 64 | 0;
 i23 = i3 + 65 | 0;
 i24 = i3 + 66 | 0;
 i25 = i3 + 67 | 0;
 i26 = 65536;
 i27 = 0;
 i28 = 0;
 while (1) {
  if ((i6 | 0) == (HEAP32[4480 + (i28 << 5) + 12 >> 2] | 0)) if (((HEAPU8[i8 >> 0] | 0) << 16 | (HEAPU8[i7 >> 0] | 0) << 24 | (HEAPU8[i9 >> 0] | 0) << 8 | (HEAPU8[i10 >> 0] | 0) | 0) == (HEAP32[4480 + (i28 << 5) + 16 >> 2] | 0)) if (((HEAPU8[i12 >> 0] | 0) << 16 | (HEAPU8[i11 >> 0] | 0) << 24 | (HEAPU8[i13 >> 0] | 0) << 8 | (HEAPU8[i14 >> 0] | 0) | 0) == (HEAP32[4480 + (i28 << 5) + 20 >> 2] | 0)) if (((HEAPU8[i16 >> 0] | 0) << 16 | (HEAPU8[i15 >> 0] | 0) << 24 | (HEAPU8[i17 >> 0] | 0) << 8 | (HEAPU8[i18 >> 0] | 0) | 0) == (HEAP32[4480 + (i28 << 5) + 24 >> 2] | 0)) {
   if (!i27) {
    i29 = (HEAPU8[i23 >> 0] | 0) << 16 | (HEAPU8[i22 >> 0] | 0) << 24 | (HEAPU8[i24 >> 0] | 0) << 8 | (HEAPU8[i25 >> 0] | 0);
    i30 = (HEAPU8[i19 >> 0] | 0) << 16 | (HEAPU8[i3 >> 0] | 0) << 24 | (HEAPU8[i20 >> 0] | 0) << 8 | (HEAPU8[i21 >> 0] | 0);
   } else {
    i29 = i26;
    i30 = i27;
   }
   if ((i30 | 0) == (HEAP32[4480 + (i28 << 5) + 8 >> 2] | 0)) if ((i29 | 0) == (HEAPU16[4480 + (i28 << 5) + 30 >> 1] | 0 | 0)) break; else {
    i31 = i29;
    i32 = i30;
   } else {
    i31 = i29;
    i32 = i30;
   }
  } else {
   i31 = i26;
   i32 = i27;
  } else {
   i31 = i26;
   i32 = i27;
  } else {
   i31 = i26;
   i32 = i27;
  } else {
   i31 = i26;
   i32 = i27;
  }
  i33 = i28 + 1 | 0;
  if (i33 >>> 0 < 7) {
   i26 = i31;
   i27 = i32;
   i28 = i33;
  } else {
   i5 = 22;
   break;
  }
 }
 if ((i5 | 0) == 22) return;
 if (!i4) i34 = _adler32(_adler32(0, 0, 0) | 0, i3, i30) | 0; else i34 = i4;
 if ((i34 | 0) == (HEAP32[4480 + (i28 << 5) >> 2] | 0)) {
  i34 = _crc32(_crc32(0, 0, 0) | 0, i3, i30) | 0;
  if ((i34 | 0) == (HEAP32[4480 + (i28 << 5) + 4 >> 2] | 0)) {
   if ((i28 + -5 | 0) >>> 0 < 2) _png_chunk_report(i1, 61621, 2); else if ((i28 + -4 | 0) >>> 0 < 3) _png_chunk_report(i1, 61650, 0);
   _png_colorspace_set_sRGB(i1, i2, (HEAPU8[i23 >> 0] | 0) << 16 | (HEAPU8[i22 >> 0] | 0) << 24 | (HEAPU8[i24 >> 0] | 0) << 8 | (HEAPU8[i25 >> 0] | 0)) | 0;
   return;
  }
 }
 _png_chunk_report(i1, 61693, 0);
 return;
}

function __ZN10ImDrawList15ClearFreeMemoryEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i2 = 0;
 i3 = i1 + 8 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 if (i4 | 0) {
  HEAP32[i1 + 4 >> 2] = 0;
  HEAP32[i1 >> 2] = 0;
  __ZN5ImGui7MemFreeEPv(i4);
  HEAP32[i3 >> 2] = 0;
 }
 i3 = i1 + 20 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 if (i4 | 0) {
  HEAP32[i1 + 16 >> 2] = 0;
  HEAP32[i1 + 12 >> 2] = 0;
  __ZN5ImGui7MemFreeEPv(i4);
  HEAP32[i3 >> 2] = 0;
 }
 i3 = i1 + 32 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 if (i4 | 0) {
  HEAP32[i1 + 28 >> 2] = 0;
  HEAP32[i1 + 24 >> 2] = 0;
  __ZN5ImGui7MemFreeEPv(i4);
  HEAP32[i3 >> 2] = 0;
 }
 HEAP32[i1 + 48 >> 2] = 0;
 HEAP32[i1 + 52 >> 2] = 0;
 HEAP32[i1 + 56 >> 2] = 0;
 i3 = i1 + 68 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 if (i4 | 0) {
  HEAP32[i1 + 64 >> 2] = 0;
  HEAP32[i1 + 60 >> 2] = 0;
  __ZN5ImGui7MemFreeEPv(i4);
  HEAP32[i3 >> 2] = 0;
 }
 i3 = i1 + 80 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 if (i4 | 0) {
  HEAP32[i1 + 76 >> 2] = 0;
  HEAP32[i1 + 72 >> 2] = 0;
  __ZN5ImGui7MemFreeEPv(i4);
  HEAP32[i3 >> 2] = 0;
 }
 i3 = i1 + 92 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 if (i4 | 0) {
  HEAP32[i1 + 88 >> 2] = 0;
  HEAP32[i1 + 84 >> 2] = 0;
  __ZN5ImGui7MemFreeEPv(i4);
  HEAP32[i3 >> 2] = 0;
 }
 HEAP32[i1 + 96 >> 2] = 0;
 HEAP32[i1 + 100 >> 2] = 1;
 i3 = i1 + 104 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 i5 = i1 + 112 | 0;
 L19 : do if ((i4 | 0) > 0) {
  i6 = 0;
  i7 = i4;
  while (1) {
   if (!i6) {
    if ((i7 | 0) <= 0) {
     i2 = 20;
     break;
    }
    i8 = HEAP32[i5 >> 2] | 0;
    HEAP32[i8 >> 2] = 0;
    HEAP32[i8 + 4 >> 2] = 0;
    HEAP32[i8 + 8 >> 2] = 0;
    HEAP32[i8 + 12 >> 2] = 0;
    HEAP32[i8 + 16 >> 2] = 0;
    HEAP32[i8 + 20 >> 2] = 0;
    i9 = HEAP32[i3 >> 2] | 0;
   } else i9 = i7;
   if ((i9 | 0) <= (i6 | 0)) {
    i2 = 23;
    break;
   }
   i8 = HEAP32[i5 >> 2] | 0;
   i10 = i8 + (i6 * 24 | 0) + 8 | 0;
   i11 = HEAP32[i10 >> 2] | 0;
   if (!i11) i12 = i9; else {
    i13 = i8 + (i6 * 24 | 0) | 0;
    HEAP32[i13 + 4 >> 2] = 0;
    HEAP32[i13 >> 2] = 0;
    __ZN5ImGui7MemFreeEPv(i11);
    HEAP32[i10 >> 2] = 0;
    i12 = HEAP32[i3 >> 2] | 0;
   }
   if ((i12 | 0) <= (i6 | 0)) {
    i2 = 27;
    break;
   }
   i10 = HEAP32[i5 >> 2] | 0;
   i11 = i10 + (i6 * 24 | 0) + 20 | 0;
   i13 = HEAP32[i11 >> 2] | 0;
   if (!i13) i14 = i12; else {
    i8 = i10 + (i6 * 24 | 0) | 0;
    HEAP32[i8 + 16 >> 2] = 0;
    HEAP32[i8 + 12 >> 2] = 0;
    __ZN5ImGui7MemFreeEPv(i13);
    HEAP32[i11 >> 2] = 0;
    i14 = HEAP32[i3 >> 2] | 0;
   }
   i6 = i6 + 1 | 0;
   if ((i6 | 0) >= (i14 | 0)) break L19; else i7 = i14;
  }
  if ((i2 | 0) == 20) ___assert_fail(56841, 56850, 1235, 56909); else if ((i2 | 0) == 23) ___assert_fail(56841, 56850, 1235, 56909); else if ((i2 | 0) == 27) ___assert_fail(56841, 56850, 1235, 56909);
 } while (0);
 i2 = HEAP32[i5 >> 2] | 0;
 if (!i2) return;
 HEAP32[i1 + 108 >> 2] = 0;
 HEAP32[i3 >> 2] = 0;
 __ZN5ImGui7MemFreeEPv(i2);
 HEAP32[i5 >> 2] = 0;
 return;
}

function _fmodf(f1, f2) {
 f1 = Math_fround(f1);
 f2 = Math_fround(f2);
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, f11 = f0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, f32 = f0, i33 = 0, i34 = 0, i35 = 0, i36 = 0;
 i3 = 0;
 i4 = (HEAPF32[tempDoublePtr >> 2] = f1, HEAP32[tempDoublePtr >> 2] | 0);
 i5 = (HEAPF32[tempDoublePtr >> 2] = f2, HEAP32[tempDoublePtr >> 2] | 0);
 i6 = i4 >>> 23 & 255;
 i7 = i5 >>> 23 & 255;
 i8 = i4 & -2147483648;
 i9 = i5 << 1;
 L1 : do if (!i9) i3 = 3; else if ((i6 | 0) == 255 | ((___FLOAT_BITS_444(f2) | 0) & 2147483647) >>> 0 > 2139095040) i3 = 3; else {
  i10 = i4 << 1;
  if (i10 >>> 0 <= i9 >>> 0) {
   f11 = Math_fround(f1 * Math_fround(0.0));
   return Math_fround((i10 | 0) == (i9 | 0) ? f11 : f1);
  }
  if (!i6) {
   i10 = i4 << 9;
   if ((i10 | 0) > -1) {
    i12 = i10;
    i10 = 0;
    while (1) {
     i13 = i10 + -1 | 0;
     i12 = i12 << 1;
     if ((i12 | 0) <= -1) {
      i14 = i13;
      break;
     } else i10 = i13;
    }
   } else i14 = 0;
   i15 = i4 << 1 - i14;
   i16 = i14;
  } else {
   i15 = i4 & 8388607 | 8388608;
   i16 = i6;
  }
  if (!i7) {
   i10 = i5 << 9;
   if ((i10 | 0) > -1) {
    i12 = 0;
    i13 = i10;
    while (1) {
     i10 = i12 + -1 | 0;
     i13 = i13 << 1;
     if ((i13 | 0) <= -1) {
      i17 = i10;
      break;
     } else i12 = i10;
    }
   } else i17 = 0;
   i18 = i17;
   i19 = i5 << 1 - i17;
  } else {
   i18 = i7;
   i19 = i5 & 8388607 | 8388608;
  }
  i12 = i15 - i19 | 0;
  i13 = (i12 | 0) > -1;
  L23 : do if ((i16 | 0) > (i18 | 0)) {
   i10 = i15;
   i20 = i16;
   i21 = i12;
   i22 = i13;
   while (1) {
    if (i22) if (!i21) break; else i23 = i21; else i23 = i10;
    i24 = i23 << 1;
    i25 = i20 + -1 | 0;
    i26 = i24 - i19 | 0;
    i27 = (i26 | 0) > -1;
    if ((i25 | 0) > (i18 | 0)) {
     i10 = i24;
     i20 = i25;
     i21 = i26;
     i22 = i27;
    } else {
     i28 = i24;
     i29 = i25;
     i30 = i27;
     i31 = i26;
     break L23;
    }
   }
   f32 = Math_fround(f1 * Math_fround(0.0));
   break L1;
  } else {
   i28 = i15;
   i29 = i16;
   i30 = i13;
   i31 = i12;
  } while (0);
  if (i30) if (!i31) {
   f32 = Math_fround(f1 * Math_fround(0.0));
   break;
  } else i33 = i31; else i33 = i28;
  if (i33 >>> 0 < 8388608) {
   i12 = i29;
   i13 = i33;
   while (1) {
    i22 = i13 << 1;
    i21 = i12 + -1 | 0;
    if (i22 >>> 0 < 8388608) {
     i12 = i21;
     i13 = i22;
    } else {
     i34 = i22;
     i35 = i21;
     break;
    }
   }
  } else {
   i34 = i33;
   i35 = i29;
  }
  if ((i35 | 0) > 0) i36 = i34 + -8388608 | i35 << 23; else i36 = i34 >>> (1 - i35 | 0);
  f32 = (HEAP32[tempDoublePtr >> 2] = i36 | i8, Math_fround(HEAPF32[tempDoublePtr >> 2]));
 } while (0);
 if ((i3 | 0) == 3) {
  f11 = Math_fround(f1 * f2);
  f32 = Math_fround(f11 / f11);
 }
 return Math_fround(f32);
}

function _png_xy_from_XYZ(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, d8 = 0.0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i3 = HEAP32[i2 >> 2] | 0;
 i4 = i2 + 4 | 0;
 i5 = (HEAP32[i4 >> 2] | 0) + i3 + (HEAP32[i2 + 8 >> 2] | 0) | 0;
 if (!i5) {
  i6 = 1;
  return i6 | 0;
 }
 if (!i3) i7 = 0; else {
  d8 = +Math_floor(+(+(i3 | 0) * 1.0e5 / +(i5 | 0) + .5));
  if (d8 <= 2147483647.0 & d8 >= -2147483648.0) i7 = ~~d8; else {
   i6 = 1;
   return i6 | 0;
  }
 }
 HEAP32[i1 >> 2] = i7;
 i7 = i1 + 4 | 0;
 i3 = HEAP32[i4 >> 2] | 0;
 if (!i3) i9 = 0; else {
  d8 = +Math_floor(+(+(i3 | 0) * 1.0e5 / +(i5 | 0) + .5));
  if (d8 <= 2147483647.0 & d8 >= -2147483648.0) i9 = ~~d8; else {
   i6 = 1;
   return i6 | 0;
  }
 }
 HEAP32[i7 >> 2] = i9;
 i9 = HEAP32[i2 >> 2] | 0;
 i7 = HEAP32[i4 >> 2] | 0;
 i4 = i2 + 12 | 0;
 i3 = HEAP32[i4 >> 2] | 0;
 i10 = i2 + 16 | 0;
 i11 = (HEAP32[i10 >> 2] | 0) + i3 + (HEAP32[i2 + 20 >> 2] | 0) | 0;
 i12 = i1 + 8 | 0;
 if (!i11) {
  i6 = 1;
  return i6 | 0;
 }
 if (!i3) i13 = 0; else {
  d8 = +Math_floor(+(+(i3 | 0) * 1.0e5 / +(i11 | 0) + .5));
  if (d8 <= 2147483647.0 & d8 >= -2147483648.0) i13 = ~~d8; else {
   i6 = 1;
   return i6 | 0;
  }
 }
 HEAP32[i12 >> 2] = i13;
 i13 = i1 + 12 | 0;
 i12 = HEAP32[i10 >> 2] | 0;
 if (!i12) i14 = 0; else {
  d8 = +Math_floor(+(+(i12 | 0) * 1.0e5 / +(i11 | 0) + .5));
  if (d8 <= 2147483647.0 & d8 >= -2147483648.0) i14 = ~~d8; else {
   i6 = 1;
   return i6 | 0;
  }
 }
 HEAP32[i13 >> 2] = i14;
 i14 = i11 + i5 | 0;
 i5 = (HEAP32[i4 >> 2] | 0) + i9 | 0;
 i9 = (HEAP32[i10 >> 2] | 0) + i7 | 0;
 i7 = i2 + 24 | 0;
 i10 = HEAP32[i7 >> 2] | 0;
 i4 = i2 + 28 | 0;
 i11 = (HEAP32[i4 >> 2] | 0) + i10 + (HEAP32[i2 + 32 >> 2] | 0) | 0;
 i2 = i1 + 16 | 0;
 if (!i11) {
  i6 = 1;
  return i6 | 0;
 }
 if (!i10) i15 = 0; else {
  d8 = +Math_floor(+(+(i10 | 0) * 1.0e5 / +(i11 | 0) + .5));
  if (d8 <= 2147483647.0 & d8 >= -2147483648.0) i15 = ~~d8; else {
   i6 = 1;
   return i6 | 0;
  }
 }
 HEAP32[i2 >> 2] = i15;
 i15 = i1 + 20 | 0;
 i2 = HEAP32[i4 >> 2] | 0;
 if (!i2) i16 = 0; else {
  d8 = +Math_floor(+(+(i2 | 0) * 1.0e5 / +(i11 | 0) + .5));
  if (d8 <= 2147483647.0 & d8 >= -2147483648.0) i16 = ~~d8; else {
   i6 = 1;
   return i6 | 0;
  }
 }
 HEAP32[i15 >> 2] = i16;
 i16 = i14 + i11 | 0;
 i11 = i5 + (HEAP32[i7 >> 2] | 0) | 0;
 i7 = HEAP32[i4 >> 2] | 0;
 i4 = i1 + 24 | 0;
 if (!i16) {
  i6 = 1;
  return i6 | 0;
 }
 if (!i11) i17 = 0; else {
  d8 = +Math_floor(+(+(i11 | 0) * 1.0e5 / +(i16 | 0) + .5));
  if (d8 <= 2147483647.0 & d8 >= -2147483648.0) i17 = ~~d8; else {
   i6 = 1;
   return i6 | 0;
  }
 }
 HEAP32[i4 >> 2] = i17;
 i17 = i9 + i7 | 0;
 i7 = i1 + 28 | 0;
 if (!i17) i18 = 0; else {
  d8 = +Math_floor(+(+(i17 | 0) * 1.0e5 / +(i16 | 0) + .5));
  if (d8 <= 2147483647.0 & d8 >= -2147483648.0) i18 = ~~d8; else {
   i6 = 1;
   return i6 | 0;
  }
 }
 HEAP32[i7 >> 2] = i18;
 i6 = 0;
 return i6 | 0;
}

function _png_handle_cHRM(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i5 = i4 + 32 | 0;
 i6 = i4;
 i7 = HEAP32[i1 + 208 >> 2] | 0;
 if (!(i7 & 1)) _png_chunk_error(i1, 60665);
 if (i7 & 6 | 0) {
  _png_crc_finish(i1, i3) | 0;
  _png_chunk_benign_error(i1, 61181);
  STACKTOP = i4;
  return;
 }
 if ((i3 | 0) != 32) {
  _png_crc_finish(i1, i3) | 0;
  _png_chunk_benign_error(i1, 61194);
  STACKTOP = i4;
  return;
 }
 _png_read_data(i1, i5, 32);
 _png_calculate_crc(i1, i5, 32);
 if (_png_crc_finish(i1, 0) | 0) {
  STACKTOP = i4;
  return;
 }
 i3 = (HEAPU8[i5 + 1 >> 0] | 0) << 16 | (HEAPU8[i5 >> 0] | 0) << 24 | (HEAPU8[i5 + 2 >> 0] | 0) << 8 | (HEAPU8[i5 + 3 >> 0] | 0);
 i7 = i6 + 24 | 0;
 HEAP32[i7 >> 2] = (i3 | 0) > -1 ? i3 : -1;
 i3 = (HEAPU8[i5 + 5 >> 0] | 0) << 16 | (HEAPU8[i5 + 4 >> 0] | 0) << 24 | (HEAPU8[i5 + 6 >> 0] | 0) << 8 | (HEAPU8[i5 + 7 >> 0] | 0);
 i8 = i6 + 28 | 0;
 HEAP32[i8 >> 2] = (i3 | 0) > -1 ? i3 : -1;
 i3 = (HEAPU8[i5 + 9 >> 0] | 0) << 16 | (HEAPU8[i5 + 8 >> 0] | 0) << 24 | (HEAPU8[i5 + 10 >> 0] | 0) << 8 | (HEAPU8[i5 + 11 >> 0] | 0);
 HEAP32[i6 >> 2] = (i3 | 0) > -1 ? i3 : -1;
 i3 = (HEAPU8[i5 + 12 >> 0] | 0) << 24;
 i9 = (HEAPU8[i5 + 13 >> 0] | 0) << 16 | i3 | (HEAPU8[i5 + 14 >> 0] | 0) << 8 | (HEAPU8[i5 + 15 >> 0] | 0);
 HEAP32[i6 + 4 >> 2] = (i9 | 0) > -1 ? i9 : -1;
 i9 = (HEAPU8[i5 + 16 >> 0] | 0) << 24;
 i10 = (HEAPU8[i5 + 17 >> 0] | 0) << 16 | i9 | (HEAPU8[i5 + 18 >> 0] | 0) << 8 | (HEAPU8[i5 + 19 >> 0] | 0);
 HEAP32[i6 + 8 >> 2] = (i10 | 0) > -1 ? i10 : -1;
 i10 = (HEAPU8[i5 + 20 >> 0] | 0) << 24;
 i11 = (HEAPU8[i5 + 21 >> 0] | 0) << 16 | i10 | (HEAPU8[i5 + 22 >> 0] | 0) << 8 | (HEAPU8[i5 + 23 >> 0] | 0);
 HEAP32[i6 + 12 >> 2] = (i11 | 0) > -1 ? i11 : -1;
 i11 = (HEAPU8[i5 + 24 >> 0] | 0) << 24;
 i12 = (HEAPU8[i5 + 25 >> 0] | 0) << 16 | i11 | (HEAPU8[i5 + 26 >> 0] | 0) << 8 | (HEAPU8[i5 + 27 >> 0] | 0);
 HEAP32[i6 + 16 >> 2] = (i12 | 0) > -1 ? i12 : -1;
 i12 = (HEAPU8[i5 + 28 >> 0] | 0) << 24;
 i13 = (HEAPU8[i5 + 29 >> 0] | 0) << 16 | i12 | (HEAPU8[i5 + 30 >> 0] | 0) << 8 | (HEAPU8[i5 + 31 >> 0] | 0);
 HEAP32[i6 + 20 >> 2] = (i13 | 0) > -1 ? i13 : -1;
 if ((i12 | (i3 | i9 | i10 | i11) | 0) < 0 | ((HEAP32[i7 >> 2] | 0) == -1 | (HEAP32[i8 >> 2] | 0) == -1 | (HEAP32[i6 >> 2] | 0) == -1)) {
  _png_chunk_benign_error(i1, 63161);
  STACKTOP = i4;
  return;
 }
 i8 = i1 + 898 | 0;
 i7 = HEAPU16[i8 >> 1] | 0;
 if (i7 & 32768 | 0) {
  STACKTOP = i4;
  return;
 }
 if (!(i7 & 16)) {
  HEAP16[i8 >> 1] = i7 | 16;
  _png_colorspace_set_chromaticities(i1, i1 + 824 | 0, i6, 1) | 0;
  _png_colorspace_sync(i1, i2);
  STACKTOP = i4;
  return;
 } else {
  HEAP16[i8 >> 1] = i7 | 32768;
  _png_colorspace_sync(i1, i2);
  _png_chunk_benign_error(i1, 63151);
  STACKTOP = i4;
  return;
 }
}

function __ZN10ImDrawList13PathArcToFastERK6ImVec2fii(i1, i2, f3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 f3 = Math_fround(f3);
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, f17 = f0, f18 = f0, f19 = f0, i20 = 0, i21 = 0;
 i6 = f3 == Math_fround(0.0) | (i5 | 0) < (i4 | 0);
 i7 = i1 + 84 | 0;
 i8 = HEAP32[i7 >> 2] | 0;
 if (i6) {
  i6 = i1 + 88 | 0;
  if ((i8 | 0) == (HEAP32[i6 >> 2] | 0)) {
   i9 = i8 + 1 | 0;
   if (!i8) i10 = 8; else i10 = ((i8 | 0) / 2 | 0) + i8 | 0;
   i11 = (i10 | 0) > (i9 | 0) ? i10 : i9;
   if ((i8 | 0) < (i11 | 0)) {
    i9 = __ZN5ImGui8MemAllocEj(i11 << 3) | 0;
    i10 = i1 + 92 | 0;
    i12 = HEAP32[i10 >> 2] | 0;
    if (!i12) i13 = i10; else {
     _memcpy(i9 | 0, i12 | 0, HEAP32[i7 >> 2] << 3 | 0) | 0;
     __ZN5ImGui7MemFreeEPv(HEAP32[i10 >> 2] | 0);
     i13 = i10;
    }
    HEAP32[i13 >> 2] = i9;
    HEAP32[i6 >> 2] = i11;
    i14 = HEAP32[i7 >> 2] | 0;
   } else i14 = i8;
  } else i14 = i8;
  i11 = i2;
  i6 = HEAP32[i11 + 4 >> 2] | 0;
  i9 = (HEAP32[i1 + 92 >> 2] | 0) + (i14 << 3) | 0;
  HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i9 + 4 >> 2] = i6;
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
  return;
 }
 i6 = 1 - i4 + i5 + i8 | 0;
 i8 = i1 + 88 | 0;
 i9 = HEAP32[i8 >> 2] | 0;
 if ((i9 | 0) < (i6 | 0)) {
  i11 = __ZN5ImGui8MemAllocEj(i6 << 3) | 0;
  i14 = i1 + 92 | 0;
  i13 = HEAP32[i14 >> 2] | 0;
  if (!i13) i15 = i14; else {
   _memcpy(i11 | 0, i13 | 0, HEAP32[i7 >> 2] << 3 | 0) | 0;
   __ZN5ImGui7MemFreeEPv(HEAP32[i14 >> 2] | 0);
   i15 = i14;
  }
  HEAP32[i15 >> 2] = i11;
  HEAP32[i8 >> 2] = i6;
  i16 = i6;
 } else i16 = i9;
 i9 = i1 + 40 | 0;
 i6 = i2 + 4 | 0;
 i11 = i1 + 92 | 0;
 i1 = i4;
 i4 = HEAP32[i7 >> 2] | 0;
 i15 = i16;
 while (1) {
  i16 = HEAP32[i9 >> 2] | 0;
  i14 = (i1 | 0) % 12 | 0;
  f17 = Math_fround(HEAPF32[i2 >> 2]);
  i13 = i16 + 36 + (i14 << 3) | 0;
  f18 = Math_fround(f17 + Math_fround(Math_fround(HEAPF32[i13 >> 2]) * f3));
  f17 = Math_fround(HEAPF32[i6 >> 2]);
  f19 = Math_fround(f17 + Math_fround(Math_fround(HEAPF32[i13 + 4 >> 2]) * f3));
  if ((i4 | 0) == (i15 | 0)) {
   i13 = i15 + 1 | 0;
   if (!i15) i20 = 8; else i20 = ((i15 | 0) / 2 | 0) + i15 | 0;
   i14 = (i20 | 0) > (i13 | 0) ? i20 : i13;
   if ((i15 | 0) < (i14 | 0)) {
    i13 = __ZN5ImGui8MemAllocEj(i14 << 3) | 0;
    i16 = HEAP32[i11 >> 2] | 0;
    if (i16 | 0) {
     _memcpy(i13 | 0, i16 | 0, HEAP32[i7 >> 2] << 3 | 0) | 0;
     __ZN5ImGui7MemFreeEPv(HEAP32[i11 >> 2] | 0);
    }
    HEAP32[i11 >> 2] = i13;
    HEAP32[i8 >> 2] = i14;
    i21 = HEAP32[i7 >> 2] | 0;
   } else i21 = i15;
  } else i21 = i4;
  i14 = HEAP32[i11 >> 2] | 0;
  i13 = i14 + (i21 << 3) | 0;
  HEAPF32[i13 >> 2] = f18;
  HEAPF32[i13 + 4 >> 2] = f19;
  i13 = (HEAP32[i7 >> 2] | 0) + 1 | 0;
  HEAP32[i7 >> 2] = i13;
  if ((i1 | 0) >= (i5 | 0)) break;
  i1 = i1 + 1 | 0;
  i4 = i13;
  i15 = HEAP32[i8 >> 2] | 0;
 }
 return;
}

function __ZNSt3__28ios_base4InitC2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = HEAP32[3418] | 0;
 __ZNSt3__210__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t(5844820, i1, 5844876);
 HEAP32[1461035] = 17800;
 HEAP32[1461037] = 17820;
 HEAP32[1461036] = 0;
 __ZNSt3__28ios_base4initEPv(5844148, 5844820);
 HEAP32[1461055] = 0;
 i2 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
 HEAP32[1461056] = i2;
 __ZNSt3__210__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t(5844884, i1, 5844940);
 HEAP32[1461057] = 17848;
 HEAP32[1461059] = 17868;
 HEAP32[1461058] = 0;
 __ZNSt3__28ios_base4initEPv(5844236, 5844884);
 HEAP32[1461077] = 0;
 i1 = __ZNSt3__211char_traitsIwE3eofEv() | 0;
 HEAP32[1461078] = i1;
 i1 = HEAP32[3385] | 0;
 __ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(5844948, i1, 5844996);
 HEAP32[1461079] = 1036;
 HEAP32[1461080] = 1056;
 __ZNSt3__28ios_base4initEPv(5844320, 5844948);
 HEAP32[1461098] = 0;
 i2 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
 HEAP32[1461099] = i2;
 __ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(5845004, i1, 5845052);
 HEAP32[1461100] = 17904;
 HEAP32[1461101] = 17924;
 __ZNSt3__28ios_base4initEPv(5844404, 5845004);
 HEAP32[1461119] = 0;
 i1 = __ZNSt3__211char_traitsIwE3eofEv() | 0;
 HEAP32[1461120] = i1;
 i1 = HEAP32[3353] | 0;
 __ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(5845060, i1, 5845108);
 HEAP32[1461121] = 1036;
 HEAP32[1461122] = 1056;
 __ZNSt3__28ios_base4initEPv(5844488, 5845060);
 HEAP32[1461140] = 0;
 i2 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
 HEAP32[1461141] = i2;
 i2 = HEAP32[5844484 + (HEAP32[(HEAP32[1461121] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
 HEAP32[1461163] = 1036;
 HEAP32[1461164] = 1056;
 __ZNSt3__28ios_base4initEPv(5844656, i2);
 HEAP32[1461182] = 0;
 i2 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
 HEAP32[1461183] = i2;
 __ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(5845116, i1, 5845164);
 HEAP32[1461142] = 17904;
 HEAP32[1461143] = 17924;
 __ZNSt3__28ios_base4initEPv(5844572, 5845116);
 HEAP32[1461161] = 0;
 i1 = __ZNSt3__211char_traitsIwE3eofEv() | 0;
 HEAP32[1461162] = i1;
 i1 = HEAP32[5844568 + (HEAP32[(HEAP32[1461142] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
 HEAP32[1461184] = 17904;
 HEAP32[1461185] = 17924;
 __ZNSt3__28ios_base4initEPv(5844740, i1);
 HEAP32[1461203] = 0;
 i1 = __ZNSt3__211char_traitsIwE3eofEv() | 0;
 HEAP32[1461204] = i1;
 HEAP32[5844140 + (HEAP32[(HEAP32[1461035] | 0) + -12 >> 2] | 0) + 72 >> 2] = 5844316;
 HEAP32[5844228 + (HEAP32[(HEAP32[1461057] | 0) + -12 >> 2] | 0) + 72 >> 2] = 5844400;
 i1 = 5844484 + (HEAP32[(HEAP32[1461121] | 0) + -12 >> 2] | 0) + 4 | 0;
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 8192;
 i1 = 5844568 + (HEAP32[(HEAP32[1461142] | 0) + -12 >> 2] | 0) + 4 | 0;
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 8192;
 HEAP32[5844484 + (HEAP32[(HEAP32[1461121] | 0) + -12 >> 2] | 0) + 72 >> 2] = 5844316;
 HEAP32[5844568 + (HEAP32[(HEAP32[1461142] | 0) + -12 >> 2] | 0) + 72 >> 2] = 5844400;
 return;
}

function __ZN10Simulation9doSkyStepEP7CityMap(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, f26 = f0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0;
 i2 = HEAP32[i1 >> 2] | 0;
 i3 = i1 + 4 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 i5 = Math_imul(i4, i2) | 0;
 i6 = __Znaj(i5 >>> 0 > 1073741823 ? -1 : i5 << 2) | 0;
 if (!i2) {
  __ZdaPv(i6);
  return;
 } else {
  i7 = 0;
  i8 = i4;
  i9 = i4;
  i10 = i2;
 }
 while (1) {
  i2 = i7;
  i7 = i7 + 1 | 0;
  if (!i8) {
   i11 = i10;
   i12 = i9;
   i13 = 0;
  } else {
   i4 = i2 + -1 | 0;
   i5 = 0;
   do {
    i14 = __ZN7CityMap7getTileEjj(i1, i2, i5) | 0;
    i15 = __ZN7CityMap7getTileEjj(i1, i2, i5 + -1 | 0) | 0;
    i16 = i5;
    i5 = i5 + 1 | 0;
    i17 = __ZN7CityMap7getTileEjj(i1, i2, i5) | 0;
    i18 = __ZN7CityMap7getTileEjj(i1, i7, i16) | 0;
    i19 = __ZN7CityMap7getTileEjj(i1, i4, i16) | 0;
    i20 = HEAP32[i3 >> 2] | 0;
    i21 = (Math_imul(i20, i2) | 0) + i16 | 0;
    if (!(HEAP32[i14 + 20 >> 2] | 0)) i22 = 0; else i22 = (HEAP32[i14 >> 2] | 0) == 0 ? 15 : 0;
    switch (HEAP32[i14 + 8 >> 2] | 0) {
    case 1:
     {
      i23 = ((HEAP32[i14 + 28 >> 2] | 0) * 3 | 0) + i22 | 0;
      break;
     }
    case 2:
     {
      i23 = (HEAP32[i14 + 28 >> 2] << 3) + i22 | 0;
      break;
     }
    default:
     i23 = i22;
    }
    i16 = HEAP32[i14 + 12 >> 2] | 0;
    i24 = (i16 | 0) == 3 ? i23 + 250 | 0 : i23;
    i25 = (i16 | 0) == 4 ? i24 + 150 | 0 : i24;
    i24 = (i16 | 0) == 5 ? i25 + 150 | 0 : i25;
    i25 = (i16 | 0) == 6 ? i24 + 50 | 0 : i24;
    i24 = HEAP32[i14 + 80 >> 2] | 0;
    f26 = Math_fround(((i16 | 0) == 1 ? i25 + -15 | 0 : i25) + i24 | 0);
    i25 = ~~Math_fround(Math_fround(Math_fround((HEAP32[i17 + 80 >> 2] | 0) - (i24 << 2) + (HEAP32[i15 + 80 >> 2] | 0) + (HEAP32[i18 + 80 >> 2] | 0) + (HEAP32[i19 + 80 >> 2] | 0) | 0) * Math_fround(.25)) + f26);
    HEAP32[i6 + (i21 << 2) >> 2] = (i25 | 0) > 0 ? ((i25 | 0) < 255 ? i25 : 255) : 0;
   } while (i5 >>> 0 < i20 >>> 0);
   i11 = HEAP32[i1 >> 2] | 0;
   i12 = i20;
   i13 = i20;
  }
  if (i7 >>> 0 >= i11 >>> 0) break; else {
   i8 = i13;
   i9 = i12;
   i10 = i11;
  }
 }
 if (!i11) {
  __ZdaPv(i6);
  return;
 } else {
  i27 = 0;
  i28 = i12;
  i29 = i11;
 }
 while (1) {
  if (!i28) {
   i30 = i29;
   i31 = 0;
  } else {
   i11 = 0;
   i12 = i28;
   do {
    i10 = i6 + ((Math_imul(i12, i27) | 0) + i11 << 2) | 0;
    i9 = HEAP32[i10 >> 2] | 0;
    i10 = (__ZN7CityMap7getTileEjj(i1, i27, i11) | 0) + 80 | 0;
    HEAP32[i10 >> 2] = i9;
    i11 = i11 + 1 | 0;
    i12 = HEAP32[i3 >> 2] | 0;
   } while (i11 >>> 0 < i12 >>> 0);
   i30 = HEAP32[i1 >> 2] | 0;
   i31 = i12;
  }
  i27 = i27 + 1 | 0;
  if (i27 >>> 0 >= i30 >>> 0) break; else {
   i28 = i31;
   i29 = i30;
  }
 }
 __ZdaPv(i6);
 return;
}

function __ZL24InputTextFilterCharacterPjiPFiP25ImGuiTextEditCallbackDataEPv(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i5 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i7 = i6;
 i8 = HEAP32[i1 >> 2] | 0;
 if (i8 >>> 0 < 128 & (i8 | 0) != 32) if (!(_isprint(i8 & 255) | 0)) {
  if ((i8 + -57344 | 0) >>> 0 < 6400 | ((i2 & 1048576 | 0) != 0 & (i8 | 0) == 10 | (i2 & 1024 | 0) != 0 & (i8 | 0) == 9) ^ 1) {
   i9 = 0;
   STACKTOP = i6;
   return i9 | 0;
  }
 } else i5 = 4; else i5 = 4;
 if ((i5 | 0) == 4) if ((i8 + -57344 | 0) >>> 0 < 6400) {
  i9 = 0;
  STACKTOP = i6;
  return i9 | 0;
 }
 L9 : do if (!(i2 & 131087)) i10 = i8; else {
  i5 = i8 + -48 | 0;
  i11 = i5 >>> 0 > 9;
  L11 : do if ((i2 & 1 | 0) != 0 & i11) {
   switch (i8 | 0) {
   case 42:
   case 43:
   case 45:
   case 46:
   case 47:
    {
     break L11;
     break;
    }
   default:
    i9 = 0;
   }
   STACKTOP = i6;
   return i9 | 0;
  } while (0);
  L15 : do if ((i2 & 131072 | 0) != 0 & i11) {
   switch (i8 | 0) {
   case 42:
   case 43:
   case 45:
   case 46:
   case 47:
   case 69:
   case 101:
    {
     break L15;
     break;
    }
   default:
    i9 = 0;
   }
   STACKTOP = i6;
   return i9 | 0;
  } while (0);
  if (!(((i8 & -33) + -65 | 0) >>> 0 < 6 | ((i2 & 2 | 0) == 0 | i5 >>> 0 < 10))) {
   i9 = 0;
   STACKTOP = i6;
   return i9 | 0;
  }
  i11 = i8 + -32 | 0;
  if ((i2 & 4 | 0) != 0 & (i8 + -97 | 0) >>> 0 < 26) {
   HEAP32[i1 >> 2] = i11;
   i12 = i11;
  } else i12 = i8;
  if (!(i2 & 8)) i10 = i12; else {
   if ((i12 | 0) < 32) {
    switch (i12 | 0) {
    case 9:
     {
      i9 = 0;
      break;
     }
    default:
     {
      i10 = i12;
      break L9;
     }
    }
    STACKTOP = i6;
    return i9 | 0;
   }
   if ((i12 | 0) < 12288) {
    switch (i12 | 0) {
    case 32:
     {
      i9 = 0;
      break;
     }
    default:
     {
      i10 = i12;
      break L9;
     }
    }
    STACKTOP = i6;
    return i9 | 0;
   } else {
    switch (i12 | 0) {
    case 12288:
     {
      i9 = 0;
      break;
     }
    default:
     {
      i10 = i12;
      break L9;
     }
    }
    STACKTOP = i6;
    return i9 | 0;
   }
  }
 } while (0);
 do if (i2 & 512 | 0) {
  i12 = i7 + 12 | 0;
  i8 = i12 + 36 | 0;
  do {
   HEAP32[i12 >> 2] = 0;
   i12 = i12 + 4 | 0;
  } while ((i12 | 0) < (i8 | 0));
  HEAP32[i7 >> 2] = 512;
  i12 = i7 + 14 | 0;
  HEAP16[i12 >> 1] = i10;
  HEAP32[i7 + 4 >> 2] = i2;
  HEAP32[i7 + 8 >> 2] = i4;
  if (!(FUNCTION_TABLE_ii[i3 & 127](i7) | 0)) {
   i8 = HEAP16[i12 >> 1] | 0;
   HEAP32[i1 >> 2] = i8 & 65535;
   if (!(i8 << 16 >> 16)) i9 = 0; else break;
   STACKTOP = i6;
   return i9 | 0;
  } else {
   i9 = 0;
   STACKTOP = i6;
   return i9 | 0;
  }
 } while (0);
 i9 = 1;
 STACKTOP = i6;
 return i9 | 0;
}

function __ZL23stbtt__csctx_rccurve_toP12stbtt__csctxffffff(i1, f2, f3, f4, f5, f6, f7) {
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 f4 = Math_fround(f4);
 f5 = Math_fround(f5);
 f6 = Math_fround(f6);
 f7 = Math_fround(f7);
 var i8 = 0, i9 = 0, f10 = f0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0;
 i8 = 0;
 i9 = i1 + 16 | 0;
 f10 = Math_fround(Math_fround(HEAPF32[i9 >> 2]) + f2);
 i11 = i1 + 20 | 0;
 f2 = Math_fround(Math_fround(HEAPF32[i11 >> 2]) + f3);
 f3 = Math_fround(f10 + f4);
 f4 = Math_fround(f2 + f5);
 f5 = Math_fround(f3 + f6);
 HEAPF32[i9 >> 2] = f5;
 f6 = Math_fround(f4 + f7);
 HEAPF32[i11 >> 2] = f6;
 i11 = ~~f5;
 i9 = ~~f6;
 i12 = ~~f10;
 i13 = ~~f2;
 i14 = ~~f3;
 i15 = ~~f4;
 if (!(HEAP32[i1 >> 2] | 0)) {
  i16 = HEAP32[i1 + 40 >> 2] | 0;
  i17 = i1 + 44 | 0;
  i18 = HEAP32[i17 >> 2] | 0;
  i19 = i16 + (i18 * 14 | 0) | 0;
  HEAP8[i19 + 12 >> 0] = 4;
  HEAP16[i19 >> 1] = i11;
  HEAP16[i19 + 2 >> 1] = i9;
  HEAP16[i19 + 4 >> 1] = i12;
  HEAP16[i19 + 6 >> 1] = i13;
  HEAP16[i19 + 8 >> 1] = i14;
  HEAP16[i19 + 10 >> 1] = i15;
  i20 = i17;
  i21 = i18;
  i22 = i21 + 1 | 0;
  HEAP32[i20 >> 2] = i22;
  return;
 }
 i18 = i1 + 28 | 0;
 i17 = HEAP32[i18 >> 2] | 0;
 if ((i17 | 0) < (i11 | 0)) i8 = 4; else if (!(HEAP32[i1 + 4 >> 2] | 0)) i8 = 4; else i23 = i17;
 if ((i8 | 0) == 4) {
  HEAP32[i18 >> 2] = i11;
  i23 = i11;
 }
 i17 = i1 + 36 | 0;
 i19 = HEAP32[i17 >> 2] | 0;
 if ((i19 | 0) < (i9 | 0)) i8 = 7; else if (!(HEAP32[i1 + 4 >> 2] | 0)) i8 = 7; else i24 = i19;
 if ((i8 | 0) == 7) {
  HEAP32[i17 >> 2] = i9;
  i24 = i9;
 }
 i19 = i1 + 24 | 0;
 i16 = HEAP32[i19 >> 2] | 0;
 i25 = i1 + 4 | 0;
 if ((i16 | 0) > (i11 | 0)) i8 = 10; else if (!(HEAP32[i25 >> 2] | 0)) i8 = 10; else i26 = i16;
 if ((i8 | 0) == 10) {
  HEAP32[i19 >> 2] = i11;
  i26 = i11;
 }
 i11 = i1 + 32 | 0;
 i16 = HEAP32[i11 >> 2] | 0;
 if ((i16 | 0) > (i9 | 0)) i8 = 13; else if (!(HEAP32[i25 >> 2] | 0)) i8 = 13; else i27 = i16;
 if ((i8 | 0) == 13) {
  HEAP32[i11 >> 2] = i9;
  i27 = i9;
 }
 HEAP32[i25 >> 2] = 1;
 if ((i23 | 0) < (i12 | 0)) {
  HEAP32[i18 >> 2] = i12;
  i28 = i12;
 } else i28 = i23;
 if ((i24 | 0) < (i13 | 0)) {
  HEAP32[i17 >> 2] = i13;
  i29 = i13;
 } else i29 = i24;
 if ((i26 | 0) > (i12 | 0)) {
  HEAP32[i19 >> 2] = i12;
  i30 = i12;
 } else i30 = i26;
 if ((i27 | 0) > (i13 | 0)) {
  HEAP32[i11 >> 2] = i13;
  i31 = i13;
 } else i31 = i27;
 HEAP32[i25 >> 2] = 1;
 if ((i28 | 0) < (i14 | 0)) HEAP32[i18 >> 2] = i14;
 if ((i29 | 0) < (i15 | 0)) HEAP32[i17 >> 2] = i15;
 if ((i30 | 0) > (i14 | 0)) HEAP32[i19 >> 2] = i14;
 if ((i31 | 0) > (i15 | 0)) HEAP32[i11 >> 2] = i15;
 HEAP32[i25 >> 2] = 1;
 i25 = i1 + 44 | 0;
 i20 = i25;
 i21 = HEAP32[i25 >> 2] | 0;
 i22 = i21 + 1 | 0;
 HEAP32[i20 >> 2] = i22;
 return;
}

function __ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw(i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i12 = i12 | 0;
 var i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 L1 : do if ((i1 | 0) == (i6 | 0)) if (!(HEAP8[i2 >> 0] | 0)) i13 = -1; else {
  HEAP8[i2 >> 0] = 0;
  i14 = HEAP32[i5 >> 2] | 0;
  HEAP32[i5 >> 2] = i14 + 1;
  HEAP8[i14 >> 0] = 46;
  i14 = HEAP8[i8 + 11 >> 0] | 0;
  if (!((i14 << 24 >> 24 < 0 ? HEAP32[i8 + 4 >> 2] | 0 : i14 & 255) | 0)) i13 = 0; else {
   i14 = HEAP32[i10 >> 2] | 0;
   if ((i14 - i9 | 0) < 160) {
    i15 = HEAP32[i11 >> 2] | 0;
    HEAP32[i10 >> 2] = i14 + 4;
    HEAP32[i14 >> 2] = i15;
    i13 = 0;
   } else i13 = 0;
  }
 } else {
  if ((i1 | 0) == (i7 | 0)) {
   i15 = HEAP8[i8 + 11 >> 0] | 0;
   if ((i15 << 24 >> 24 < 0 ? HEAP32[i8 + 4 >> 2] | 0 : i15 & 255) | 0) {
    if (!(HEAP8[i2 >> 0] | 0)) {
     i13 = -1;
     break;
    }
    i15 = HEAP32[i10 >> 2] | 0;
    if ((i15 - i9 | 0) >= 160) {
     i13 = 0;
     break;
    }
    i14 = HEAP32[i11 >> 2] | 0;
    HEAP32[i10 >> 2] = i15 + 4;
    HEAP32[i15 >> 2] = i14;
    HEAP32[i11 >> 2] = 0;
    i13 = 0;
    break;
   }
  }
  i14 = i12 + 128 | 0;
  i15 = 0;
  while (1) {
   i16 = i12 + (i15 << 2) | 0;
   if ((i15 | 0) == 32) {
    i17 = i14;
    break;
   }
   if ((HEAP32[i16 >> 2] | 0) == (i1 | 0)) {
    i17 = i16;
    break;
   } else i15 = i15 + 1 | 0;
  }
  i15 = i17 - i12 | 0;
  i14 = i15 >> 2;
  if ((i15 | 0) > 124) i13 = -1; else {
   i16 = HEAP8[70463 + i14 >> 0] | 0;
   switch (i14 | 0) {
   case 24:
   case 25:
    {
     i14 = HEAP32[i5 >> 2] | 0;
     if ((i14 | 0) != (i4 | 0)) if ((HEAP8[i14 + -1 >> 0] & 95) != (HEAP8[i3 >> 0] & 127)) {
      i13 = -1;
      break L1;
     }
     HEAP32[i5 >> 2] = i14 + 1;
     HEAP8[i14 >> 0] = i16;
     i13 = 0;
     break L1;
     break;
    }
   case 23:
   case 22:
    {
     HEAP8[i3 >> 0] = 80;
     break;
    }
   default:
    {
     i14 = i16 & 95;
     if ((i14 | 0) == (HEAP8[i3 >> 0] | 0)) {
      HEAP8[i3 >> 0] = i14 | 128;
      if (HEAP8[i2 >> 0] | 0) {
       HEAP8[i2 >> 0] = 0;
       i14 = HEAP8[i8 + 11 >> 0] | 0;
       if ((i14 << 24 >> 24 < 0 ? HEAP32[i8 + 4 >> 2] | 0 : i14 & 255) | 0) {
        i14 = HEAP32[i10 >> 2] | 0;
        if ((i14 - i9 | 0) < 160) {
         i18 = HEAP32[i11 >> 2] | 0;
         HEAP32[i10 >> 2] = i14 + 4;
         HEAP32[i14 >> 2] = i18;
        }
       }
      }
     }
    }
   }
   i18 = HEAP32[i5 >> 2] | 0;
   HEAP32[i5 >> 2] = i18 + 1;
   HEAP8[i18 >> 0] = i16;
   if ((i15 | 0) > 84) i13 = 0; else {
    HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
    i13 = 0;
   }
  }
 } while (0);
 return i13 | 0;
}

function __ZN5ImGui15SetColumnOffsetEif(i1, f2) {
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, f21 = f0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, f29 = f0, f30 = f0, i31 = 0, f32 = f0, f33 = f0;
 i3 = 0;
 i4 = HEAP32[1460598] | 0;
 i5 = HEAP32[(HEAP32[i4 + 6392 >> 2] | 0) + 448 >> 2] | 0;
 if (!i5) ___assert_fail(33325, 31803, 13095, 33440);
 i6 = i5 + 12 | 0;
 i7 = HEAP32[i5 + 44 >> 2] | 0;
 i8 = i5 + 4 | 0;
 i9 = i5 + 16 | 0;
 i10 = i5 + 9 | 0;
 i11 = i5 + 12 | 0;
 i12 = i5 + 52 | 0;
 i13 = i5 + 24 | 0;
 i14 = i5 + 20 | 0;
 i15 = i5 + 24 | 0;
 i16 = i4 + 5452 | 0;
 i17 = i5 + 16 | 0;
 i18 = i5 + 20 | 0;
 i19 = i5 + 24 | 0;
 i20 = i5 + 52 | 0;
 i5 = i4 + 5452 | 0;
 f21 = f2;
 i4 = i1;
 while (1) {
  if ((i4 | 0) < 0) i22 = HEAP32[i6 >> 2] | 0; else i22 = i4;
  if ((i22 | 0) >= (i7 | 0)) {
   i3 = 7;
   break;
  }
  i1 = HEAP32[i8 >> 2] | 0;
  if (!(i1 & 4)) if ((i22 | 0) < ((HEAP32[i9 >> 2] | 0) + -1 | 0)) {
   if ((i22 | 0) < 0) i23 = HEAP32[i11 >> 2] | 0; else i23 = i22;
   i24 = i23 + 1 | 0;
   if ((i7 | 0) <= (i24 | 0)) {
    i3 = 13;
    break;
   }
   i25 = HEAP32[i12 >> 2] | 0;
   i26 = (i7 | 0) > (i23 | 0);
   if (!(HEAP8[i10 >> 0] | 0)) {
    if (!i26) {
     i3 = 19;
     break;
    }
    i27 = i25 + (i24 * 28 | 0) | 0;
    i28 = i25 + (i23 * 28 | 0) | 0;
   } else {
    if (!i26) {
     i3 = 16;
     break;
    }
    i27 = i25 + (i24 * 28 | 0) + 4 | 0;
    i28 = i25 + (i23 * 28 | 0) + 4 | 0;
   }
   f2 = Math_fround(HEAPF32[i27 >> 2]);
   f29 = Math_fround(f2 - Math_fround(HEAPF32[i28 >> 2]));
   f2 = Math_fround(HEAPF32[i13 >> 2]);
   f30 = Math_fround(f29 * Math_fround(f2 - Math_fround(HEAPF32[i14 >> 2])));
   i31 = 1;
  } else {
   f30 = Math_fround(0.0);
   i31 = 0;
  } else {
   f30 = Math_fround(0.0);
   i31 = 0;
  }
  if (!(i1 & 8)) {
   f2 = Math_fround(HEAPF32[i15 >> 2]);
   f29 = Math_fround(HEAPF32[i16 >> 2]);
   f32 = Math_fround(f2 - Math_fround(f29 * Math_fround((HEAP32[i17 >> 2] | 0) - i22 | 0)));
   f33 = f32 > f21 ? f21 : f32;
  } else f33 = f21;
  f32 = Math_fround(HEAPF32[i18 >> 2]);
  f29 = Math_fround(f33 - f32);
  f2 = Math_fround(f29 / Math_fround(Math_fround(HEAPF32[i19 >> 2]) - f32));
  HEAPF32[(HEAP32[i20 >> 2] | 0) + (i22 * 28 | 0) >> 2] = f2;
  if (!i31) {
   i3 = 26;
   break;
  }
  f2 = Math_fround(HEAPF32[i5 >> 2]);
  f21 = Math_fround(f33 + (f2 >= f30 ? f2 : f30));
  i4 = i22 + 1 | 0;
 }
 if ((i3 | 0) == 7) ___assert_fail(32132, 31803, 13099, 33440); else if ((i3 | 0) == 13) ___assert_fail(56841, 56850, 1235, 56909); else if ((i3 | 0) == 16) ___assert_fail(56841, 56850, 1235, 56909); else if ((i3 | 0) == 19) ___assert_fail(56841, 56850, 1235, 56909); else if ((i3 | 0) == 26) return;
}

function __ZN10ImDrawList13AddRectFilledERK6ImVec2S2_jfi(i1, i2, i3, i4, f5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 f5 = Math_fround(f5);
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 if (i4 >>> 0 < 16777216) return;
 if (!(f5 > Math_fround(0.0))) {
  __ZN10ImDrawList11PrimReserveEii(i1, 6, 4);
  i7 = HEAP32[i3 >> 2] | 0;
  i8 = HEAP32[i2 + 4 >> 2] | 0;
  i9 = HEAP32[i2 >> 2] | 0;
  i10 = HEAP32[i3 + 4 >> 2] | 0;
  i11 = HEAP32[i1 + 40 >> 2] | 0;
  i12 = HEAP32[i11 >> 2] | 0;
  i13 = HEAP32[i11 + 4 >> 2] | 0;
  i11 = i1 + 48 | 0;
  i14 = HEAP32[i11 >> 2] | 0;
  i15 = i14 & 65535;
  i16 = i1 + 56 | 0;
  i17 = HEAP32[i16 >> 2] | 0;
  HEAP16[i17 >> 1] = i15;
  HEAP16[i17 + 2 >> 1] = i14 + 1;
  i18 = i14 + 2 & 65535;
  HEAP16[i17 + 4 >> 1] = i18;
  HEAP16[i17 + 6 >> 1] = i15;
  HEAP16[i17 + 8 >> 1] = i18;
  HEAP16[i17 + 10 >> 1] = i14 + 3;
  i14 = i1 + 52 | 0;
  i17 = i2;
  i18 = HEAP32[i17 + 4 >> 2] | 0;
  i15 = HEAP32[i14 >> 2] | 0;
  HEAP32[i15 >> 2] = HEAP32[i17 >> 2];
  HEAP32[i15 + 4 >> 2] = i18;
  i18 = (HEAP32[i14 >> 2] | 0) + 8 | 0;
  HEAP32[i18 >> 2] = i12;
  HEAP32[i18 + 4 >> 2] = i13;
  i18 = HEAP32[i14 >> 2] | 0;
  HEAP32[i18 + 16 >> 2] = i4;
  HEAP32[i18 + 20 >> 2] = i7;
  HEAP32[i18 + 24 >> 2] = i8;
  i8 = (HEAP32[i14 >> 2] | 0) + 28 | 0;
  HEAP32[i8 >> 2] = i12;
  HEAP32[i8 + 4 >> 2] = i13;
  i8 = HEAP32[i14 >> 2] | 0;
  HEAP32[i8 + 36 >> 2] = i4;
  i18 = i3;
  i7 = HEAP32[i18 + 4 >> 2] | 0;
  i15 = i8 + 40 | 0;
  HEAP32[i15 >> 2] = HEAP32[i18 >> 2];
  HEAP32[i15 + 4 >> 2] = i7;
  i7 = (HEAP32[i14 >> 2] | 0) + 48 | 0;
  HEAP32[i7 >> 2] = i12;
  HEAP32[i7 + 4 >> 2] = i13;
  i7 = HEAP32[i14 >> 2] | 0;
  HEAP32[i7 + 56 >> 2] = i4;
  HEAP32[i7 + 60 >> 2] = i9;
  HEAP32[i7 + 64 >> 2] = i10;
  i10 = (HEAP32[i14 >> 2] | 0) + 68 | 0;
  HEAP32[i10 >> 2] = i12;
  HEAP32[i10 + 4 >> 2] = i13;
  i13 = HEAP32[i14 >> 2] | 0;
  HEAP32[i13 + 76 >> 2] = i4;
  HEAP32[i14 >> 2] = i13 + 80;
  HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 4;
  HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 12;
  return;
 }
 __ZN10ImDrawList8PathRectERK6ImVec2S2_fi(i1, i2, i3, f5, i6);
 i6 = i1 + 92 | 0;
 __ZN10ImDrawList19AddConvexPolyFilledEPK6ImVec2ij(i1, HEAP32[i6 >> 2] | 0, HEAP32[i1 + 84 >> 2] | 0, i4);
 i4 = i1 + 84 | 0;
 i3 = i1 + 88 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if ((i1 | 0) < 0) {
  i2 = ((i1 | 0) / 2 | 0) + i1 | 0;
  i16 = (i2 | 0) > 0 ? i2 : 0;
  if ((i1 | 0) < (i16 | 0)) {
   i1 = __ZN5ImGui8MemAllocEj(i16 << 3) | 0;
   i2 = HEAP32[i6 >> 2] | 0;
   if (!i2) i19 = i6; else {
    _memcpy(i1 | 0, i2 | 0, HEAP32[i4 >> 2] << 3 | 0) | 0;
    __ZN5ImGui7MemFreeEPv(HEAP32[i6 >> 2] | 0);
    i19 = i6;
   }
   HEAP32[i19 >> 2] = i1;
   HEAP32[i3 >> 2] = i16;
  }
 }
 HEAP32[i4 >> 2] = 0;
 return;
}

function _scanexp(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i3 = i1 + 4 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 i5 = i1 + 100 | 0;
 if (i4 >>> 0 < (HEAP32[i5 >> 2] | 0) >>> 0) {
  HEAP32[i3 >> 2] = i4 + 1;
  i6 = HEAPU8[i4 >> 0] | 0;
 } else i6 = ___shgetc(i1) | 0;
 switch (i6 | 0) {
 case 43:
 case 45:
  {
   i4 = (i6 | 0) == 45 & 1;
   i7 = HEAP32[i3 >> 2] | 0;
   if (i7 >>> 0 < (HEAP32[i5 >> 2] | 0) >>> 0) {
    HEAP32[i3 >> 2] = i7 + 1;
    i8 = HEAPU8[i7 >> 0] | 0;
   } else i8 = ___shgetc(i1) | 0;
   if ((i2 | 0) != 0 & (i8 + -48 | 0) >>> 0 > 9) if (!(HEAP32[i5 >> 2] | 0)) {
    i9 = i4;
    i10 = i8;
   } else {
    HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + -1;
    i9 = i4;
    i10 = i8;
   } else {
    i9 = i4;
    i10 = i8;
   }
   break;
  }
 default:
  {
   i9 = 0;
   i10 = i6;
  }
 }
 if ((i10 + -48 | 0) >>> 0 > 9) if (!(HEAP32[i5 >> 2] | 0)) {
  i11 = -2147483648;
  i12 = 0;
 } else {
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + -1;
  i11 = -2147483648;
  i12 = 0;
 } else {
  i6 = 0;
  i8 = i10;
  while (1) {
   i6 = i8 + -48 + (i6 * 10 | 0) | 0;
   i10 = HEAP32[i3 >> 2] | 0;
   if (i10 >>> 0 < (HEAP32[i5 >> 2] | 0) >>> 0) {
    HEAP32[i3 >> 2] = i10 + 1;
    i13 = HEAPU8[i10 >> 0] | 0;
   } else i13 = ___shgetc(i1) | 0;
   if (!((i13 + -48 | 0) >>> 0 < 10 & (i6 | 0) < 214748364)) break; else i8 = i13;
  }
  i8 = ((i6 | 0) < 0) << 31 >> 31;
  if ((i13 + -48 | 0) >>> 0 < 10) {
   i10 = i13;
   i4 = i6;
   i2 = i8;
   while (1) {
    i7 = ___muldi3(i4 | 0, i2 | 0, 10, 0) | 0;
    i14 = tempRet0;
    i15 = _i64Add(i10 | 0, ((i10 | 0) < 0) << 31 >> 31 | 0, -48, -1) | 0;
    i16 = _i64Add(i15 | 0, tempRet0 | 0, i7 | 0, i14 | 0) | 0;
    i14 = tempRet0;
    i7 = HEAP32[i3 >> 2] | 0;
    if (i7 >>> 0 < (HEAP32[i5 >> 2] | 0) >>> 0) {
     HEAP32[i3 >> 2] = i7 + 1;
     i17 = HEAPU8[i7 >> 0] | 0;
    } else i17 = ___shgetc(i1) | 0;
    if ((i17 + -48 | 0) >>> 0 < 10 & ((i14 | 0) < 21474836 | (i14 | 0) == 21474836 & i16 >>> 0 < 2061584302)) {
     i10 = i17;
     i4 = i16;
     i2 = i14;
    } else {
     i18 = i17;
     i19 = i16;
     i20 = i14;
     break;
    }
   }
  } else {
   i18 = i13;
   i19 = i6;
   i20 = i8;
  }
  if ((i18 + -48 | 0) >>> 0 < 10) do {
   i18 = HEAP32[i3 >> 2] | 0;
   if (i18 >>> 0 < (HEAP32[i5 >> 2] | 0) >>> 0) {
    HEAP32[i3 >> 2] = i18 + 1;
    i21 = HEAPU8[i18 >> 0] | 0;
   } else i21 = ___shgetc(i1) | 0;
  } while ((i21 + -48 | 0) >>> 0 < 10);
  if (HEAP32[i5 >> 2] | 0) HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + -1;
  i3 = (i9 | 0) != 0;
  i9 = _i64Subtract(0, 0, i19 | 0, i20 | 0) | 0;
  i11 = i3 ? tempRet0 : i20;
  i12 = i3 ? i9 : i19;
 }
 tempRet0 = i11;
 return i12 | 0;
}

function __ZL30SettingsHandlerWindow_ReadOpenP12ImGuiContextP20ImGuiSettingsHandlerPKc(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i4 = i1;
 i5 = __Z6ImHashPKvij(i3, 0, 0) | 0;
 i6 = HEAP32[1460598] | 0;
 i7 = i6 + 11080 | 0;
 i8 = HEAP32[i7 >> 2] | 0;
 i9 = (i8 | 0) == 0;
 L1 : do if (!i9) {
  i10 = i6 + 11088 | 0;
  i11 = 0;
  while (1) {
   if ((i8 | 0) <= (i11 | 0)) {
    i2 = 5;
    break;
   }
   i12 = HEAP32[i10 >> 2] | 0;
   i13 = i11 + 1 | 0;
   if ((HEAP32[i12 + (i11 * 28 | 0) + 4 >> 2] | 0) == (i5 | 0)) break;
   if ((i13 | 0) == (i8 | 0)) break L1; else i11 = i13;
  }
  if ((i2 | 0) == 5) ___assert_fail(56841, 56850, 1235, 56909);
  i10 = i12 + (i11 * 28 | 0) | 0;
  if (i10 | 0) {
   i14 = i10;
   STACKTOP = i1;
   return i14 | 0;
  }
 } while (0);
 HEAP32[i4 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 HEAP32[i4 + 12 >> 2] = 0;
 HEAP32[i4 + 16 >> 2] = 0;
 HEAP32[i4 + 20 >> 2] = 0;
 HEAP8[i4 + 24 >> 0] = 0;
 i12 = i6 + 11084 | 0;
 if ((i8 | 0) == (HEAP32[i12 >> 2] | 0)) {
  i2 = i8 + 1 | 0;
  if (i9) i15 = 8; else i15 = ((i8 | 0) / 2 | 0) + i8 | 0;
  i9 = (i15 | 0) > (i2 | 0) ? i15 : i2;
  if ((i8 | 0) < (i9 | 0)) {
   HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
   i2 = __ZL13MallocWrapperjPv(i9 * 28 | 0, 0) | 0;
   i15 = i6 + 11088 | 0;
   i5 = HEAP32[i15 >> 2] | 0;
   if (!i5) i16 = i15; else {
    _memcpy(i2 | 0, i5 | 0, (HEAP32[i7 >> 2] | 0) * 28 | 0) | 0;
    i5 = HEAP32[i15 >> 2] | 0;
    if (i5 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
    __ZL11FreeWrapperPvS_(i5, 0);
    i16 = i15;
   }
   HEAP32[i16 >> 2] = i2;
   HEAP32[i12 >> 2] = i9;
   i17 = HEAP32[i7 >> 2] | 0;
  } else i17 = i8;
 } else i17 = i8;
 i8 = i6 + 11088 | 0;
 i6 = (HEAP32[i8 >> 2] | 0) + (i17 * 28 | 0) | 0;
 HEAP32[i6 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i6 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
 HEAP32[i6 + 16 >> 2] = HEAP32[i4 + 16 >> 2];
 HEAP32[i6 + 20 >> 2] = HEAP32[i4 + 20 >> 2];
 HEAP32[i6 + 24 >> 2] = HEAP32[i4 + 24 >> 2];
 i4 = HEAP32[i7 >> 2] | 0;
 HEAP32[i7 >> 2] = i4 + 1;
 if ((i4 | 0) <= -1) ___assert_fail(38278, 56850, 1245, 38287);
 i7 = HEAP32[i8 >> 2] | 0;
 i8 = i7 + (i4 * 28 | 0) | 0;
 i4 = i8 | 0;
 i7 = (_strlen(i3) | 0) + 1 | 0;
 HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
 i6 = __ZL13MallocWrapperjPv(i7, 0) | 0;
 _memcpy(i6 | 0, i3 | 0, i7 | 0) | 0;
 HEAP32[i4 >> 2] = i6;
 i6 = __Z6ImHashPKvij(i3, 0, 0) | 0;
 HEAP32[i8 + 4 >> 2] = i6;
 i14 = i4;
 STACKTOP = i1;
 return i14 | 0;
}

function _png_handle_pCAL(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i4 = 0;
 i5 = HEAP32[i1 + 208 >> 2] | 0;
 if (!(i5 & 1)) _png_chunk_error(i1, 60665);
 if (i5 & 4 | 0) {
  _png_crc_finish(i1, i3) | 0;
  _png_chunk_benign_error(i1, 61181);
  return;
 }
 if (i2 | 0) if (HEAP32[i2 + 8 >> 2] & 1024 | 0) {
  _png_crc_finish(i1, i3) | 0;
  _png_chunk_benign_error(i1, 63151);
  return;
 }
 i5 = i3 + 1 | 0;
 i6 = i1 + 788 | 0;
 i7 = HEAP32[i6 >> 2] | 0;
 if (!i7) i4 = 11; else {
  i8 = i1 + 792 | 0;
  if ((HEAP32[i8 >> 2] | 0) >>> 0 < i5 >>> 0) {
   HEAP32[i6 >> 2] = 0;
   HEAP32[i8 >> 2] = 0;
   _png_free(i1, i7);
   i4 = 11;
  } else i9 = i7;
 }
 do if ((i4 | 0) == 11) {
  i7 = _png_malloc_base(i1, i5) | 0;
  if (i7 | 0) {
   HEAP32[i6 >> 2] = i7;
   HEAP32[i1 + 792 >> 2] = i5;
   i9 = i7;
   break;
  }
  _png_crc_finish(i1, i3) | 0;
  _png_chunk_benign_error(i1, 60712);
  return;
 } while (0);
 _png_read_data(i1, i9, i3);
 _png_calculate_crc(i1, i9, i3);
 if (_png_crc_finish(i1, 0) | 0) return;
 i5 = i9 + i3 | 0;
 HEAP8[i5 >> 0] = 0;
 i3 = i9;
 while (1) {
  i10 = i3 + 1 | 0;
  if (!(HEAP8[i3 >> 0] | 0)) break; else i3 = i10;
 }
 if (i5 >>> 0 <= (i3 + 12 | 0) >>> 0) {
  _png_chunk_benign_error(i1, 61194);
  return;
 }
 i6 = HEAPU8[i3 + 2 >> 0] << 16 | HEAPU8[i10 >> 0] << 24 | HEAPU8[i3 + 3 >> 0] << 8 | HEAPU8[i3 + 4 >> 0];
 i10 = HEAPU8[i3 + 6 >> 0] << 16 | HEAPU8[i3 + 5 >> 0] << 24 | HEAPU8[i3 + 7 >> 0] << 8 | HEAPU8[i3 + 8 >> 0];
 i4 = HEAP8[i3 + 9 >> 0] | 0;
 i7 = HEAP8[i3 + 10 >> 0] | 0;
 i8 = i3 + 11 | 0;
 i3 = i4 & 255;
 if (i4 << 24 >> 24 != 0 | i7 << 24 >> 24 == 2) if ((i4 + -1 & 255) > 1 | i7 << 24 >> 24 == 3) if (i4 << 24 >> 24 != 3 | i7 << 24 >> 24 == 4) {
  if ((i4 & 255) > 3) {
   _png_chunk_benign_error(i1, 62720);
   i11 = i8;
  } else i11 = i8;
  while (1) if (!(HEAP8[i11 >> 0] | 0)) break; else i11 = i11 + 1 | 0;
  i4 = i7 & 255;
  i12 = _png_malloc_warn(i1, i4 << 2) | 0;
  if (!i12) {
   _png_chunk_benign_error(i1, 60712);
   return;
  }
  L46 : do if (i7 << 24 >> 24) {
   i13 = 0;
   i14 = i11;
   L47 : while (1) {
    i15 = i14 + 1 | 0;
    HEAP32[i12 + (i13 << 2) >> 2] = i15;
    if (i15 >>> 0 > i5 >>> 0) break; else i16 = i15;
    while (1) {
     if (!(HEAP8[i16 >> 0] | 0)) break;
     i15 = i16 + 1 | 0;
     if (i15 >>> 0 > i5 >>> 0) break L47; else i16 = i15;
    }
    i13 = i13 + 1 | 0;
    if ((i13 | 0) >= (i4 | 0)) break L46; else i14 = i16;
   }
   _png_free(i1, i12);
   _png_chunk_benign_error(i1, 62747);
   return;
  } while (0);
  _png_set_pCAL(i1, i2, i9, i6, i10, i3, i4, i8, i12);
  _png_free(i1, i12);
  return;
 }
 _png_chunk_benign_error(i1, 62696);
 return;
}

function __ZNSt3__2L12init_wmonthsEv() {
 var i1 = 0, i2 = 0;
 if (!(HEAP8[73736] | 0)) if (___cxa_guard_acquire(73736) | 0) {
  i1 = 5846412;
  do {
   HEAP32[i1 >> 2] = 0;
   HEAP32[i1 + 4 >> 2] = 0;
   HEAP32[i1 + 8 >> 2] = 0;
   i2 = 0;
   while (1) {
    if ((i2 | 0) == 3) break;
    HEAP32[i1 + (i2 << 2) >> 2] = 0;
    i2 = i2 + 1 | 0;
   }
   i1 = i1 + 12 | 0;
  } while ((i1 | 0) != 5846700);
 }
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(5846412, 18976) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(5846424, 19008) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(5846436, 19044) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(5846448, 19068) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(5846460, 19092) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(5846472, 19108) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(5846484, 19128) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(5846496, 19148) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(5846508, 19176) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(5846520, 19216) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(5846532, 19248) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(5846544, 19284) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(5846556, 19320) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(5846568, 19336) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(5846580, 19352) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(5846592, 19368) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(5846604, 19092) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(5846616, 19384) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(5846628, 19400) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(5846640, 19416) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(5846652, 19432) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(5846664, 19448) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(5846676, 19464) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(5846688, 19480) | 0;
 return;
}

function __ZNSt3__2L11init_monthsEv() {
 var i1 = 0, i2 = 0;
 if (!(HEAP8[73656] | 0)) if (___cxa_guard_acquire(73656) | 0) {
  i1 = 5845600;
  do {
   HEAP32[i1 >> 2] = 0;
   HEAP32[i1 + 4 >> 2] = 0;
   HEAP32[i1 + 8 >> 2] = 0;
   i2 = 0;
   while (1) {
    if ((i2 | 0) == 3) break;
    HEAP32[i1 + (i2 << 2) >> 2] = 0;
    i2 = i2 + 1 | 0;
   }
   i1 = i1 + 12 | 0;
  } while ((i1 | 0) != 5845888);
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(5845600, 70987) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(5845612, 70995) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(5845624, 71004) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(5845636, 71010) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(5845648, 71016) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(5845660, 71020) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(5845672, 71025) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(5845684, 71030) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(5845696, 71037) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(5845708, 71047) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(5845720, 71055) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(5845732, 71064) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(5845744, 71073) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(5845756, 71077) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(5845768, 71081) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(5845780, 71085) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(5845792, 71016) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(5845804, 71089) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(5845816, 71093) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(5845828, 71097) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(5845840, 71101) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(5845852, 71105) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(5845864, 71109) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(5845876, 71113) | 0;
 return;
}

function __ZN11ImFontAtlas18GetTexDataAsRGBA32EPPhPiS2_S2_(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 i7 = i6;
 i8 = i1 + 20 | 0;
 i9 = HEAP32[i8 >> 2] | 0;
 i10 = i9;
 do if (!i9) {
  i11 = i1 + 16 | 0;
  i12 = HEAP32[i11 >> 2] | 0;
  if (!i12) {
   if (!(HEAP32[i1 + 72 >> 2] | 0)) {
    i13 = i7 + 32 | 0;
    HEAP32[i7 >> 2] = 0;
    HEAP32[i7 + 4 >> 2] = 0;
    HEAP8[i7 + 8 >> 0] = 1;
    HEAP32[i7 + 12 >> 2] = 0;
    i14 = i7 + 16 | 0;
    HEAP32[i13 >> 2] = 0;
    HEAP32[i13 + 4 >> 2] = 0;
    HEAP32[i13 + 8 >> 2] = 0;
    HEAP32[i13 + 12 >> 2] = 0;
    HEAP32[i13 + 16 >> 2] = 0;
    HEAP32[i13 + 20 >> 2] = 0;
    HEAPF32[i7 + 56 >> 2] = Math_fround(3402823469999999843913219.0e14);
    HEAP8[i7 + 60 >> 0] = 0;
    HEAP32[i7 + 64 >> 2] = 0;
    HEAPF32[i7 + 68 >> 2] = Math_fround(1.0);
    i13 = i7 + 72 | 0;
    HEAP32[i7 + 24 >> 2] = 1;
    HEAP32[i7 + 20 >> 2] = 1;
    HEAP8[i7 + 28 >> 0] = 1;
    i15 = i7 + 94 | 0;
    i16 = i15 + 22 | 0;
    do {
     HEAP16[i15 >> 1] = 0;
     i15 = i15 + 2 | 0;
    } while ((i15 | 0) < (i16 | 0));
    i15 = i13;
    i17 = 38428;
    i16 = i15 + 22 | 0;
    do {
     HEAP8[i15 >> 0] = HEAP8[i17 >> 0] | 0;
     i15 = i15 + 1 | 0;
     i17 = i17 + 1 | 0;
    } while ((i15 | 0) < (i16 | 0));
    HEAPF32[i14 >> 2] = Math_fround(13.0);
    i17 = (__ZN11ImFontAtlas36AddFontFromMemoryCompressedBase85TTFEPKcfPK12ImFontConfigPKt(i1, 38450, Math_fround(13.0), i7, 21332) | 0) + 12 | 0;
    HEAPF32[i17 >> 2] = Math_fround(1.0);
   }
   __Z31ImFontAtlasBuildWithStbTruetypeP11ImFontAtlas(i1) | 0;
   i18 = HEAP32[i11 >> 2] | 0;
  } else i18 = i12;
  if (!i18) {
   i19 = HEAP32[i8 >> 2] | 0;
   break;
  }
  i17 = i1 + 24 | 0;
  i15 = i1 + 28 | 0;
  i16 = __ZN5ImGui8MemAllocEj(Math_imul(HEAP32[i17 >> 2] << 2, HEAP32[i15 >> 2] | 0) | 0) | 0;
  HEAP32[i8 >> 2] = i16;
  i13 = Math_imul(HEAP32[i15 >> 2] | 0, HEAP32[i17 >> 2] | 0) | 0;
  i17 = i16;
  if ((i13 | 0) > 0) {
   i15 = i16;
   i16 = i18;
   i20 = i13;
   while (1) {
    HEAP32[i15 >> 2] = (HEAPU8[i16 >> 0] | 0) << 24 | 16777215;
    if ((i20 | 0) > 1) {
     i15 = i15 + 4 | 0;
     i16 = i16 + 1 | 0;
     i20 = i20 + -1 | 0;
    } else {
     i19 = i17;
     break;
    }
   }
  } else i19 = i17;
 } else i19 = i10; while (0);
 HEAP32[i2 >> 2] = i19;
 if (i3 | 0) HEAP32[i3 >> 2] = HEAP32[i1 + 24 >> 2];
 if (i4 | 0) HEAP32[i4 >> 2] = HEAP32[i1 + 28 >> 2];
 if (!i5) {
  STACKTOP = i6;
  return;
 }
 HEAP32[i5 >> 2] = 4;
 STACKTOP = i6;
 return;
}

function _png_image_read_composite(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0;
 i2 = 0;
 i3 = HEAP32[i1 >> 2] | 0;
 i4 = HEAP32[HEAP32[i3 >> 2] >> 2] | 0;
 i5 = i4 + 432 | 0;
 i6 = HEAP8[i5 >> 0] | 0;
 switch (i6 << 24 >> 24) {
 case 0:
  {
   i7 = 1;
   break;
  }
 case 1:
  {
   i7 = 7;
   break;
  }
 default:
  _png_error(i4, 65425);
 }
 i8 = HEAP32[i3 + 12 >> 2] | 0;
 i9 = HEAP32[i3 + 8 >> 2] | 0;
 i10 = HEAP32[i1 + 28 >> 2] | 0;
 i11 = HEAP32[i3 + 16 >> 2] & 2 | 1;
 i3 = i9 + -1 | 0;
 i12 = i1 + 20 | 0;
 i13 = i1 + 24 | 0;
 i1 = Math_imul(i11, i9) | 0;
 i9 = i11 + 1 | 0;
 i14 = 0;
 i15 = i6;
 while (1) {
  if (i15 << 24 >> 24 == 1) {
   i6 = 7 - i14 >> 1;
   i16 = (i14 | 0) > 1 ? i6 : 3;
   i17 = i14 & 1;
   i18 = i17 << 3 - (i14 + 1 >> 1) & 7;
   if ((i3 + (1 << i16) - i18 | 0) >>> i16 | 0) {
    i16 = Math_imul(i18, i11) | 0;
    i19 = (i17 ^ 1) << 3 - (i14 >> 1) & 7;
    i20 = (i14 | 0) > 2 ? 8 >>> (i14 + -1 >> 1) : 8;
    i21 = i11 << i6;
    i22 = i16;
    i2 = 8;
   }
  } else {
   i19 = 0;
   i20 = 1;
   i21 = i11;
   i22 = 0;
   i2 = 8;
  }
  if ((i2 | 0) == 8) {
   i2 = 0;
   if (i19 >>> 0 < i8 >>> 0) {
    i16 = (i22 | 0) < (i1 | 0);
    i6 = i19;
    do {
     i17 = HEAP32[i12 >> 2] | 0;
     _png_read_row(i4, i17, 0);
     i18 = (HEAP32[i13 >> 2] | 0) + (Math_imul(i6, i10) | 0) | 0;
     i23 = i18 + i1 | 0;
     if (i16) {
      i24 = i18 + i22 | 0;
      i18 = i17;
      while (1) {
       i17 = HEAP8[i18 + i11 >> 0] | 0;
       if (i17 << 24 >> 24) {
        i25 = ~i17 & 255;
        if (i17 << 24 >> 24 == -1) {
         i17 = 0;
         do {
          HEAP8[i24 + i17 >> 0] = HEAP8[i18 + i17 >> 0] | 0;
          i17 = i17 + 1 | 0;
         } while ((i17 | 0) != (i11 | 0));
        } else {
         i17 = 0;
         do {
          i26 = i24 + i17 | 0;
          i27 = (Math_imul(HEAPU16[21338 + ((HEAPU8[i26 >> 0] | 0) << 1) >> 1] | 0, i25) | 0) + ((HEAPU8[i18 + i17 >> 0] | 0) * 65535 | 0) | 0;
          i28 = i27 >>> 15;
          i29 = (((Math_imul(i27 & 32767, HEAPU8[58335 + i28 >> 0] | 0) | 0) >>> 12) + (HEAPU16[21850 + (i28 << 1) >> 1] | 0) | 0) >>> 8 & 255;
          HEAP8[i26 >> 0] = i29;
          i17 = i17 + 1 | 0;
         } while ((i17 | 0) != (i11 | 0));
        }
       }
       i24 = i24 + i21 | 0;
       if (i24 >>> 0 >= i23 >>> 0) break; else i18 = i18 + i9 | 0;
      }
     }
     i6 = i6 + i20 | 0;
    } while (i6 >>> 0 < i8 >>> 0);
   }
  }
  i6 = i14 + 1 | 0;
  if ((i6 | 0) >= (i7 | 0)) break;
  i14 = i6;
  i15 = HEAP8[i5 >> 0] | 0;
 }
 return 1;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE23__append_forward_unsafeIPwEERS5_T_S9_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4 + 12 | 0;
 i6 = i4;
 i7 = i1 + 8 | 0;
 i8 = i7 + 3 | 0;
 i9 = HEAP8[i8 >> 0] | 0;
 i10 = i9 << 24 >> 24 < 0;
 if (i10) {
  i11 = HEAP32[i1 + 4 >> 2] | 0;
  i12 = (HEAP32[i7 >> 2] & 2147483647) + -1 | 0;
 } else {
  i11 = i9 & 255;
  i12 = 1;
 }
 i7 = i3 - i2 >> 2;
 do if (i7 | 0) {
  if (i10) {
   i13 = HEAP32[i1 >> 2] | 0;
   i14 = HEAP32[i1 + 4 >> 2] | 0;
  } else {
   i13 = i1;
   i14 = i9 & 255;
  }
  if (__ZNSt3__214__ptr_in_rangeIwEEbPKT_S3_S3_(i2, i13, i13 + (i14 << 2) | 0) | 0) {
   HEAP32[i6 >> 2] = 0;
   HEAP32[i6 + 4 >> 2] = 0;
   HEAP32[i6 + 8 >> 2] = 0;
   if (i7 >>> 0 > 1073741807) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i6);
   do if (i7 >>> 0 < 2) {
    HEAP8[i6 + 8 + 3 >> 0] = i7;
    i15 = i2;
    i16 = i6;
   } else {
    i17 = i7 + 4 & -4;
    if (i17 >>> 0 > 1073741823) _abort(); else {
     i18 = __Znwj(i17 << 2) | 0;
     HEAP32[i6 >> 2] = i18;
     HEAP32[i6 + 8 >> 2] = i17 | -2147483648;
     HEAP32[i6 + 4 >> 2] = i7;
     i15 = i2;
     i16 = i18;
     break;
    }
   } while (0);
   while (1) {
    if ((i15 | 0) == (i3 | 0)) break;
    __ZNSt3__211char_traitsIwE6assignERwRKw(i16, i15);
    i15 = i15 + 4 | 0;
    i16 = i16 + 4 | 0;
   }
   HEAP32[i5 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i16, i5);
   i18 = HEAP8[i6 + 8 + 3 >> 0] | 0;
   i17 = i18 << 24 >> 24 < 0;
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEPKwj(i1, i17 ? HEAP32[i6 >> 2] | 0 : i6, i17 ? HEAP32[i6 + 4 >> 2] | 0 : i18 & 255) | 0;
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i6);
   break;
  }
  if ((i12 - i11 | 0) >>> 0 < i7 >>> 0) __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj(i1, i12, i11 + i7 - i12 | 0, i11, i11, 0, 0);
  if ((HEAP8[i8 >> 0] | 0) < 0) i19 = HEAP32[i1 >> 2] | 0; else i19 = i1;
  i18 = i19 + (i11 << 2) | 0;
  i17 = i2;
  while (1) {
   if ((i17 | 0) == (i3 | 0)) break;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i18, i17);
   i18 = i18 + 4 | 0;
   i17 = i17 + 4 | 0;
  }
  HEAP32[i5 >> 2] = 0;
  __ZNSt3__211char_traitsIwE6assignERwRKw(i18, i5);
  i17 = i11 + i7 | 0;
  if ((HEAP8[i8 >> 0] | 0) < 0) {
   HEAP32[i1 + 4 >> 2] = i17;
   break;
  } else {
   HEAP8[i8 >> 0] = i17;
   break;
  }
 } while (0);
 STACKTOP = i4;
 return i1 | 0;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd(i1, i2, i3, i4, d5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 d5 = +d5;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 336 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(336);
 i6 = i1 + 300 | 0;
 i7 = i1 + 48 | 0;
 i8 = i1 + 32 | 0;
 i9 = i1 + 24 | 0;
 i10 = i1 + 8 | 0;
 i11 = i1;
 i12 = i1 + 304 | 0;
 i13 = i1 + 296 | 0;
 i14 = i1 + 68 | 0;
 i15 = i1 + 64 | 0;
 i16 = i1 + 60 | 0;
 i17 = i1 + 56 | 0;
 i18 = i11;
 HEAP32[i18 >> 2] = 37;
 HEAP32[i18 + 4 >> 2] = 0;
 i18 = __ZNSt3__214__num_put_base14__format_floatEPcPKcj(i11 + 1 | 0, 5849359, HEAP32[i3 + 4 >> 2] | 0) | 0;
 HEAP32[i13 >> 2] = i12;
 i19 = __ZNSt3__26__clocEv() | 0;
 if (i18) {
  HEAP32[i10 >> 2] = HEAP32[i3 + 8 >> 2];
  HEAPF64[i10 + 8 >> 3] = d5;
  i20 = __ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz(i12, 30, i19, i11, i10) | 0;
 } else {
  HEAPF64[i9 >> 3] = d5;
  i20 = __ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz(i12, 30, i19, i11, i9) | 0;
 }
 if ((i20 | 0) > 29) {
  i9 = __ZNSt3__26__clocEv() | 0;
  if (i18) {
   HEAP32[i8 >> 2] = HEAP32[i3 + 8 >> 2];
   HEAPF64[i8 + 8 >> 3] = d5;
   i21 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz(i13, i9, i11, i8) | 0;
  } else {
   HEAPF64[i7 >> 3] = d5;
   i21 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz(i13, i9, i11, i7) | 0;
  }
  i7 = HEAP32[i13 >> 2] | 0;
  if (!i7) __ZSt17__throw_bad_allocv(); else {
   i22 = i21;
   i23 = i7;
   i24 = i7;
  }
 } else {
  i22 = i20;
  i23 = 0;
  i24 = HEAP32[i13 >> 2] | 0;
 }
 i13 = i24 + i22 | 0;
 i20 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i24, i13, i3) | 0;
 do if ((i24 | 0) == (i12 | 0)) {
  i25 = i14;
  i26 = 1;
  i27 = 0;
 } else {
  i7 = _malloc(i22 << 3) | 0;
  if (!i7) __ZSt17__throw_bad_allocv(); else {
   i25 = i7;
   i26 = 0;
   i27 = i7;
   break;
  }
 } while (0);
 __ZNKSt3__28ios_base6getlocEv(i6, i3);
 __ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE(i24, i20, i13, i25, i15, i16, i6);
 __ZNSt3__26localeD2Ev(i6);
 HEAP32[i17 >> 2] = HEAP32[i2 >> 2];
 i13 = HEAP32[i15 >> 2] | 0;
 i15 = HEAP32[i16 >> 2] | 0;
 HEAP32[i6 >> 2] = HEAP32[i17 >> 2];
 i17 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i6, i25, i13, i15, i3, i4) | 0;
 HEAP32[i2 >> 2] = i17;
 if (!i26) _free(i27);
 _free(i23);
 STACKTOP = i1;
 return i17 | 0;
}

function __ZN10ImDrawList7AddLineERK6ImVec2S2_jf(i1, i2, i3, i4, f5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 f5 = Math_fround(f5);
 var f6 = f0, f7 = f0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 if (i4 >>> 0 < 16777216) return;
 f6 = Math_fround(Math_fround(HEAPF32[i2 >> 2]) + Math_fround(.5));
 f7 = Math_fround(Math_fround(HEAPF32[i2 + 4 >> 2]) + Math_fround(.5));
 i2 = i1 + 84 | 0;
 i8 = HEAP32[i2 >> 2] | 0;
 i9 = i1 + 88 | 0;
 if ((i8 | 0) == (HEAP32[i9 >> 2] | 0)) {
  i10 = i8 + 1 | 0;
  if (!i8) i11 = 8; else i11 = ((i8 | 0) / 2 | 0) + i8 | 0;
  i12 = (i11 | 0) > (i10 | 0) ? i11 : i10;
  if ((i8 | 0) < (i12 | 0)) {
   i10 = __ZN5ImGui8MemAllocEj(i12 << 3) | 0;
   i11 = i1 + 92 | 0;
   i13 = HEAP32[i11 >> 2] | 0;
   if (!i13) i14 = i11; else {
    _memcpy(i10 | 0, i13 | 0, HEAP32[i2 >> 2] << 3 | 0) | 0;
    __ZN5ImGui7MemFreeEPv(HEAP32[i11 >> 2] | 0);
    i14 = i11;
   }
   HEAP32[i14 >> 2] = i10;
   HEAP32[i9 >> 2] = i12;
   i15 = HEAP32[i2 >> 2] | 0;
  } else i15 = i8;
 } else i15 = i8;
 i8 = i1 + 92 | 0;
 i12 = HEAP32[i8 >> 2] | 0;
 i10 = i12 + (i15 << 3) | 0;
 HEAPF32[i10 >> 2] = f6;
 HEAPF32[i10 + 4 >> 2] = f7;
 i10 = HEAP32[i2 >> 2] | 0;
 i15 = i10 + 1 | 0;
 HEAP32[i2 >> 2] = i15;
 f7 = Math_fround(Math_fround(HEAPF32[i3 >> 2]) + Math_fround(.5));
 f6 = Math_fround(Math_fround(HEAPF32[i3 + 4 >> 2]) + Math_fround(.5));
 if ((i15 | 0) == (HEAP32[i9 >> 2] | 0)) {
  i3 = i10 + 2 | 0;
  if (!i15) i16 = 8; else i16 = ((i15 | 0) / 2 | 0) + i15 | 0;
  i10 = (i16 | 0) > (i3 | 0) ? i16 : i3;
  if ((i15 | 0) < (i10 | 0)) {
   i3 = __ZN5ImGui8MemAllocEj(i10 << 3) | 0;
   i16 = HEAP32[i8 >> 2] | 0;
   if (!i16) i17 = i8; else {
    _memcpy(i3 | 0, i16 | 0, HEAP32[i2 >> 2] << 3 | 0) | 0;
    __ZN5ImGui7MemFreeEPv(HEAP32[i8 >> 2] | 0);
    i17 = i8;
   }
   HEAP32[i17 >> 2] = i3;
   HEAP32[i9 >> 2] = i10;
   i18 = HEAP32[i2 >> 2] | 0;
  } else i18 = i15;
 } else i18 = i15;
 i15 = HEAP32[i8 >> 2] | 0;
 i10 = i15 + (i18 << 3) | 0;
 HEAPF32[i10 >> 2] = f7;
 HEAPF32[i10 + 4 >> 2] = f6;
 i10 = (HEAP32[i2 >> 2] | 0) + 1 | 0;
 HEAP32[i2 >> 2] = i10;
 __ZN10ImDrawList11AddPolylineEPK6ImVec2ijbf(i1, HEAP32[i8 >> 2] | 0, i10, i4, 0, f5);
 i4 = i1 + 84 | 0;
 i1 = HEAP32[i9 >> 2] | 0;
 if ((i1 | 0) < 0) {
  i10 = ((i1 | 0) / 2 | 0) + i1 | 0;
  i2 = (i10 | 0) > 0 ? i10 : 0;
  if ((i1 | 0) < (i2 | 0)) {
   i1 = __ZN5ImGui8MemAllocEj(i2 << 3) | 0;
   i10 = HEAP32[i8 >> 2] | 0;
   if (!i10) i19 = i8; else {
    _memcpy(i1 | 0, i10 | 0, HEAP32[i4 >> 2] << 3 | 0) | 0;
    __ZN5ImGui7MemFreeEPv(HEAP32[i8 >> 2] | 0);
    i19 = i8;
   }
   HEAP32[i19 >> 2] = i1;
   HEAP32[i9 >> 2] = i2;
  }
 }
 HEAP32[i4 >> 2] = 0;
 return;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe(i1, i2, i3, i4, d5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 d5 = +d5;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 336 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(336);
 i6 = i1 + 300 | 0;
 i7 = i1 + 48 | 0;
 i8 = i1 + 32 | 0;
 i9 = i1 + 24 | 0;
 i10 = i1 + 8 | 0;
 i11 = i1;
 i12 = i1 + 304 | 0;
 i13 = i1 + 296 | 0;
 i14 = i1 + 68 | 0;
 i15 = i1 + 64 | 0;
 i16 = i1 + 60 | 0;
 i17 = i1 + 56 | 0;
 i18 = i11;
 HEAP32[i18 >> 2] = 37;
 HEAP32[i18 + 4 >> 2] = 0;
 i18 = __ZNSt3__214__num_put_base14__format_floatEPcPKcj(i11 + 1 | 0, 70712, HEAP32[i3 + 4 >> 2] | 0) | 0;
 HEAP32[i13 >> 2] = i12;
 i19 = __ZNSt3__26__clocEv() | 0;
 if (i18) {
  HEAP32[i10 >> 2] = HEAP32[i3 + 8 >> 2];
  HEAPF64[i10 + 8 >> 3] = d5;
  i20 = __ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz(i12, 30, i19, i11, i10) | 0;
 } else {
  HEAPF64[i9 >> 3] = d5;
  i20 = __ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz(i12, 30, i19, i11, i9) | 0;
 }
 if ((i20 | 0) > 29) {
  i9 = __ZNSt3__26__clocEv() | 0;
  if (i18) {
   HEAP32[i8 >> 2] = HEAP32[i3 + 8 >> 2];
   HEAPF64[i8 + 8 >> 3] = d5;
   i21 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz(i13, i9, i11, i8) | 0;
  } else {
   HEAPF64[i7 >> 3] = d5;
   i21 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz(i13, i9, i11, i7) | 0;
  }
  i7 = HEAP32[i13 >> 2] | 0;
  if (!i7) __ZSt17__throw_bad_allocv(); else {
   i22 = i21;
   i23 = i7;
   i24 = i7;
  }
 } else {
  i22 = i20;
  i23 = 0;
  i24 = HEAP32[i13 >> 2] | 0;
 }
 i13 = i24 + i22 | 0;
 i20 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i24, i13, i3) | 0;
 do if ((i24 | 0) == (i12 | 0)) {
  i25 = i14;
  i26 = 1;
  i27 = 0;
 } else {
  i7 = _malloc(i22 << 3) | 0;
  if (!i7) __ZSt17__throw_bad_allocv(); else {
   i25 = i7;
   i26 = 0;
   i27 = i7;
   break;
  }
 } while (0);
 __ZNKSt3__28ios_base6getlocEv(i6, i3);
 __ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE(i24, i20, i13, i25, i15, i16, i6);
 __ZNSt3__26localeD2Ev(i6);
 HEAP32[i17 >> 2] = HEAP32[i2 >> 2];
 i13 = HEAP32[i15 >> 2] | 0;
 i15 = HEAP32[i16 >> 2] | 0;
 HEAP32[i6 >> 2] = HEAP32[i17 >> 2];
 i17 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i6, i25, i13, i15, i3, i4) | 0;
 HEAP32[i2 >> 2] = i17;
 if (!i26) _free(i27);
 _free(i23);
 STACKTOP = i1;
 return i17 | 0;
}

function __ZN12RenderSystem15setViewSettingsEddd(i1, d2, d3, d4) {
 i1 = i1 | 0;
 d2 = +d2;
 d3 = +d3;
 d4 = +d4;
 var i5 = 0, f6 = f0, f7 = f0, f8 = f0, f9 = f0, f10 = f0, f11 = f0, f12 = f0, f13 = f0, f14 = f0, f15 = f0, f16 = f0, f17 = f0, f18 = f0, i19 = 0, i20 = 0;
 HEAP8[5847249] = 1;
 i5 = HEAP32[i1 + 72 >> 2] | 0;
 f6 = Math_fround(HEAP32[i5 + 4 >> 2] | 0);
 f7 = Math_fround(HEAP32[i5 + 8 >> 2] | 0);
 if (d2 == 0.0) {
  f8 = Math_fround(d3);
  f9 = Math_fround(d4);
  f10 = Math_fround(f6 + f6);
  f11 = Math_fround(Math_fround(2.0) / f10);
  f12 = Math_fround(f7 + f7);
  f13 = Math_fround(Math_fround(2.0) / f12);
  f14 = Math_fround(f9 - f8);
  f15 = Math_fround(Math_fround(-2.0) / f14);
  f16 = Math_fround(Math_fround(-Math_fround(f6 - f6)) / f10);
  f10 = Math_fround(Math_fround(-Math_fround(f7 - f7)) / f12);
  f12 = Math_fround(Math_fround(-Math_fround(f8 + f9)) / f14);
  HEAPF32[i1 + 108 >> 2] = f11;
  i5 = i1 + 112 | 0;
  HEAP32[i5 >> 2] = 0;
  HEAP32[i5 + 4 >> 2] = 0;
  HEAP32[i5 + 8 >> 2] = 0;
  HEAP32[i5 + 12 >> 2] = 0;
  HEAPF32[i1 + 128 >> 2] = f13;
  i5 = i1 + 132 | 0;
  HEAP32[i5 >> 2] = 0;
  HEAP32[i5 + 4 >> 2] = 0;
  HEAP32[i5 + 8 >> 2] = 0;
  HEAP32[i5 + 12 >> 2] = 0;
  HEAPF32[i1 + 148 >> 2] = f15;
  HEAPF32[i1 + 152 >> 2] = Math_fround(0.0);
  HEAPF32[i1 + 156 >> 2] = f16;
  HEAPF32[i1 + 160 >> 2] = f10;
  f17 = Math_fround(1.0);
  f18 = f12;
  i19 = i1 + 164 | 0;
  HEAPF32[i19 >> 2] = f18;
  i20 = i1 + 168 | 0;
  HEAPF32[i20 >> 2] = f17;
  return;
 }
 f12 = Math_fround(f6 / f7);
 f7 = Math_fround(d3);
 f6 = Math_fround(d4);
 f10 = Math_fround(f12 + Math_fround(-1.1920929e-07));
 i5 = f10 >= Math_fround(0.0);
 f16 = Math_fround(-f10);
 if (!((i5 ? f10 : f16) > Math_fround(0.0))) ___assert_fail(31563, 31631, 345, 31679);
 f16 = Math_fround(_tanf(Math_fround(Math_fround(d2) * Math_fround(.5))));
 f10 = Math_fround(Math_fround(1.0) / Math_fround(f12 * f16));
 f12 = Math_fround(Math_fround(1.0) / f16);
 f16 = Math_fround(f6 - f7);
 f15 = Math_fround(Math_fround(-Math_fround(f7 + f6)) / f16);
 f13 = Math_fround(Math_fround(-Math_fround(Math_fround(f6 * Math_fround(2.0)) * f7)) / f16);
 HEAPF32[i1 + 108 >> 2] = f10;
 i5 = i1 + 112 | 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 + 8 >> 2] = 0;
 HEAP32[i5 + 12 >> 2] = 0;
 HEAPF32[i1 + 128 >> 2] = f12;
 i5 = i1 + 132 | 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 + 8 >> 2] = 0;
 HEAP32[i5 + 12 >> 2] = 0;
 HEAPF32[i1 + 148 >> 2] = f15;
 HEAPF32[i1 + 152 >> 2] = Math_fround(-1.0);
 i5 = i1 + 156 | 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 f17 = Math_fround(0.0);
 f18 = f13;
 i19 = i1 + 164 | 0;
 HEAPF32[i19 >> 2] = f18;
 i20 = i1 + 168 | 0;
 HEAPF32[i20 >> 2] = f17;
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE23__append_forward_unsafeIPcEERS5_T_S9_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i2;
 i6 = i4 + 12 | 0;
 i7 = i4;
 i8 = i1 + 11 | 0;
 i9 = HEAP8[i8 >> 0] | 0;
 i10 = i9 << 24 >> 24 < 0;
 if (i10) {
  i11 = HEAP32[i1 + 4 >> 2] | 0;
  i12 = (HEAP32[i1 + 8 >> 2] & 2147483647) + -1 | 0;
 } else {
  i11 = i9 & 255;
  i12 = 10;
 }
 i13 = i3 - i5 | 0;
 do if (i13 | 0) {
  if (i10) {
   i14 = HEAP32[i1 >> 2] | 0;
   i15 = HEAP32[i1 + 4 >> 2] | 0;
  } else {
   i14 = i1;
   i15 = i9 & 255;
  }
  if (__ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_(i2, i14, i14 + i15 | 0) | 0) {
   HEAP32[i7 >> 2] = 0;
   HEAP32[i7 + 4 >> 2] = 0;
   HEAP32[i7 + 8 >> 2] = 0;
   if (i13 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i7);
   if (i13 >>> 0 < 11) {
    HEAP8[i7 + 11 >> 0] = i13;
    i16 = i7;
   } else {
    i17 = i13 + 16 & -16;
    i18 = __Znwj(i17) | 0;
    HEAP32[i7 >> 2] = i18;
    HEAP32[i7 + 8 >> 2] = i17 | -2147483648;
    HEAP32[i7 + 4 >> 2] = i13;
    i16 = i18;
   }
   i18 = i2;
   i17 = i16;
   while (1) {
    if ((i18 | 0) == (i3 | 0)) break;
    __ZNSt3__211char_traitsIcE6assignERcRKc(i17, i18);
    i18 = i18 + 1 | 0;
    i17 = i17 + 1 | 0;
   }
   HEAP8[i6 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i16 + i13 | 0, i6);
   i17 = HEAP8[i7 + 11 >> 0] | 0;
   i18 = i17 << 24 >> 24 < 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj(i1, i18 ? HEAP32[i7 >> 2] | 0 : i7, i18 ? HEAP32[i7 + 4 >> 2] | 0 : i17 & 255) | 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i7);
   break;
  }
  if ((i12 - i11 | 0) >>> 0 < i13 >>> 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj(i1, i12, i11 + i13 - i12 | 0, i11, i11, 0, 0);
  if ((HEAP8[i8 >> 0] | 0) < 0) i19 = HEAP32[i1 >> 2] | 0; else i19 = i1;
  i17 = i3 + (i11 - i5) | 0;
  i18 = i19 + i11 | 0;
  i20 = i2;
  while (1) {
   if ((i20 | 0) == (i3 | 0)) break;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i18, i20);
   i18 = i18 + 1 | 0;
   i20 = i20 + 1 | 0;
  }
  HEAP8[i6 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc(i19 + i17 | 0, i6);
  i20 = i11 + i13 | 0;
  if ((HEAP8[i8 >> 0] | 0) < 0) {
   HEAP32[i1 + 4 >> 2] = i20;
   break;
  } else {
   HEAP8[i8 >> 0] = i20;
   break;
  }
 } while (0);
 STACKTOP = i4;
 return i1 | 0;
}

function __ZN5ImGui17GetNavInputAmountEi18ImGuiInputReadMode(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, f4 = f0, f5 = f0, i6 = 0, i7 = 0, f8 = f0, f9 = f0, f10 = f0;
 i3 = HEAP32[1460598] | 0;
 if (!i2) {
  f4 = Math_fround(HEAPF32[i3 + 788 + (i1 << 2) >> 2]);
  return Math_fround(f4);
 }
 f5 = Math_fround(HEAPF32[i3 + 5188 + (i1 << 2) >> 2]);
 i6 = f5 < Math_fround(0.0);
 if ((i2 | 0) == 2 & i6) {
  i7 = Math_fround(HEAPF32[i3 + 5272 + (i1 << 2) >> 2]) >= Math_fround(0.0);
  f4 = i7 ? Math_fround(1.0) : Math_fround(0.0);
  return Math_fround(f4);
 }
 if (i6) {
  f4 = Math_fround(0.0);
  return Math_fround(f4);
 }
 switch (i2 | 0) {
 case 1:
  {
   i2 = f5 == Math_fround(0.0);
   f4 = i2 ? Math_fround(1.0) : Math_fround(0.0);
   return Math_fround(f4);
  }
 case 3:
  {
   f8 = Math_fround(f5 - Math_fround(HEAPF32[i3 + 20 >> 2]));
   f9 = Math_fround(Math_fround(HEAPF32[i3 + 132 >> 2]) * Math_fround(.800000011));
   f10 = Math_fround(Math_fround(HEAPF32[i3 + 136 >> 2]) * Math_fround(.800000011));
   if (f5 == Math_fround(0.0)) {
    f4 = Math_fround(1.0);
    return Math_fround(f4);
   }
   if (f5 <= f9 | f10 <= Math_fround(0.0)) {
    f4 = Math_fround(0.0);
    return Math_fround(f4);
   }
   i2 = ~~Math_fround(Math_fround(f5 - f9) / f10) - ~~Math_fround(Math_fround(f8 - f9) / f10) | 0;
   f4 = Math_fround(((i2 | 0) > 0 ? i2 : 0) | 0);
   return Math_fround(f4);
  }
 case 4:
  {
   f10 = Math_fround(f5 - Math_fround(HEAPF32[i3 + 20 >> 2]));
   f9 = Math_fround(HEAPF32[i3 + 132 >> 2]);
   f8 = Math_fround(Math_fround(HEAPF32[i3 + 136 >> 2]) * Math_fround(2.0));
   if (f5 == Math_fround(0.0)) {
    f4 = Math_fround(1.0);
    return Math_fround(f4);
   }
   if (f5 <= f9 | f8 <= Math_fround(0.0)) {
    f4 = Math_fround(0.0);
    return Math_fround(f4);
   }
   i2 = ~~Math_fround(Math_fround(f5 - f9) / f8) - ~~Math_fround(Math_fround(f10 - f9) / f8) | 0;
   f4 = Math_fround(((i2 | 0) > 0 ? i2 : 0) | 0);
   return Math_fround(f4);
  }
 case 5:
  {
   f8 = Math_fround(f5 - Math_fround(HEAPF32[i3 + 20 >> 2]));
   f9 = Math_fround(Math_fround(HEAPF32[i3 + 132 >> 2]) * Math_fround(.800000011));
   f10 = Math_fround(Math_fround(HEAPF32[i3 + 136 >> 2]) * Math_fround(.300000012));
   if (f5 == Math_fround(0.0)) {
    f4 = Math_fround(1.0);
    return Math_fround(f4);
   }
   if (f5 <= f9 | f10 <= Math_fround(0.0)) {
    f4 = Math_fround(0.0);
    return Math_fround(f4);
   }
   i3 = ~~Math_fround(Math_fround(f5 - f9) / f10) - ~~Math_fround(Math_fround(f8 - f9) / f10) | 0;
   f4 = Math_fround(((i3 | 0) > 0 ? i3 : 0) | 0);
   return Math_fround(f4);
  }
 default:
  {
   f4 = Math_fround(0.0);
   return Math_fround(f4);
  }
 }
 return Math_fround(0.0);
}

function _wcsrtombs(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i5;
 L1 : do if (!i1) {
  i7 = HEAP32[i2 >> 2] | 0;
  i8 = HEAP32[i7 >> 2] | 0;
  if (!i8) i9 = 0; else {
   i10 = i7;
   i7 = 0;
   i11 = i8;
   while (1) {
    if (i11 >>> 0 > 127) {
     i8 = _wcrtomb(i6, i11, 0) | 0;
     if ((i8 | 0) == -1) {
      i9 = -1;
      break L1;
     } else i12 = i8;
    } else i12 = 1;
    i8 = i12 + i7 | 0;
    i10 = i10 + 4 | 0;
    i11 = HEAP32[i10 >> 2] | 0;
    if (!i11) {
     i9 = i8;
     break;
    } else i7 = i8;
   }
  }
 } else {
  L9 : do if (i3 >>> 0 > 3) {
   i7 = i1;
   i11 = i3;
   i10 = HEAP32[i2 >> 2] | 0;
   while (1) {
    i8 = HEAP32[i10 >> 2] | 0;
    if ((i8 + -1 | 0) >>> 0 > 126) {
     if (!i8) break;
     i13 = _wcrtomb(i7, i8, 0) | 0;
     if ((i13 | 0) == -1) {
      i9 = -1;
      break L1;
     }
     i14 = i7 + i13 | 0;
     i15 = i11 - i13 | 0;
     i16 = i10;
    } else {
     HEAP8[i7 >> 0] = i8;
     i14 = i7 + 1 | 0;
     i15 = i11 + -1 | 0;
     i16 = HEAP32[i2 >> 2] | 0;
    }
    i10 = i16 + 4 | 0;
    HEAP32[i2 >> 2] = i10;
    if (i15 >>> 0 <= 3) {
     i17 = i14;
     i18 = i15;
     break L9;
    } else {
     i7 = i14;
     i11 = i15;
    }
   }
   HEAP8[i7 >> 0] = 0;
   HEAP32[i2 >> 2] = 0;
   i9 = i3 - i11 | 0;
   break L1;
  } else {
   i17 = i1;
   i18 = i3;
  } while (0);
  if (!i18) i9 = i3; else {
   i10 = i17;
   i8 = i18;
   i13 = HEAP32[i2 >> 2] | 0;
   while (1) {
    i19 = HEAP32[i13 >> 2] | 0;
    if ((i19 + -1 | 0) >>> 0 > 126) {
     if (!i19) {
      i4 = 19;
      break;
     }
     i20 = _wcrtomb(i6, i19, 0) | 0;
     if ((i20 | 0) == -1) {
      i9 = -1;
      break L1;
     }
     if (i8 >>> 0 < i20 >>> 0) {
      i4 = 22;
      break;
     }
     _wcrtomb(i10, HEAP32[i13 >> 2] | 0, 0) | 0;
     i21 = i10 + i20 | 0;
     i22 = i8 - i20 | 0;
     i23 = i13;
    } else {
     HEAP8[i10 >> 0] = i19;
     i21 = i10 + 1 | 0;
     i22 = i8 + -1 | 0;
     i23 = HEAP32[i2 >> 2] | 0;
    }
    i13 = i23 + 4 | 0;
    HEAP32[i2 >> 2] = i13;
    if (!i22) {
     i9 = i3;
     break L1;
    } else {
     i10 = i21;
     i8 = i22;
    }
   }
   if ((i4 | 0) == 19) {
    HEAP8[i10 >> 0] = 0;
    HEAP32[i2 >> 2] = 0;
    i9 = i3 - i8 | 0;
    break;
   } else if ((i4 | 0) == 22) {
    i9 = i3 - i8 | 0;
    break;
   }
  }
 } while (0);
 STACKTOP = i5;
 return i9 | 0;
}

function __ZN5ImGui12CalcItemSizeE6ImVec2ff(i1, i2, f3, f4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 f3 = Math_fround(f3);
 f4 = Math_fround(f4);
 var i5 = 0, i6 = 0, f7 = f0, f8 = f0, f9 = f0, f10 = f0, f11 = f0, f12 = f0, f13 = f0, f14 = f0, i15 = 0, f16 = f0, i17 = 0, i18 = 0, f19 = f0, f20 = f0, f21 = f0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, f32 = f0;
 i5 = 0;
 i6 = HEAP32[1460598] | 0;
 f7 = Math_fround(HEAPF32[i2 >> 2]);
 if (f7 < Math_fround(0.0)) i5 = 3; else if (Math_fround(HEAPF32[i2 + 4 >> 2]) < Math_fround(0.0)) i5 = 3; else {
  f8 = Math_fround(0.0);
  f9 = Math_fround(0.0);
 }
 if ((i5 | 0) == 3) {
  i5 = HEAP32[i6 + 6392 >> 2] | 0;
  f10 = Math_fround(HEAPF32[i5 + 536 >> 2]);
  f11 = Math_fround(HEAPF32[i5 + 12 >> 2]);
  f12 = Math_fround(f10 - f11);
  f10 = Math_fround(HEAPF32[i5 + 540 >> 2]);
  f13 = Math_fround(HEAPF32[i5 + 16 >> 2]);
  f14 = Math_fround(f10 - f13);
  i15 = HEAP32[i5 + 448 >> 2] | 0;
  do if (!i15) f16 = f12; else {
   i17 = HEAP32[i15 + 12 >> 2] | 0;
   i18 = i17 + ((i17 | 0) > -2 & 1) | 0;
   if ((i18 | 0) < (HEAP32[i15 + 44 >> 2] | 0)) {
    f10 = Math_fround(HEAPF32[(HEAP32[i15 + 52 >> 2] | 0) + (i18 * 28 | 0) >> 2]);
    f19 = Math_fround(HEAPF32[i15 + 20 >> 2]);
    f20 = Math_fround(f19 + Math_fround(f10 * Math_fround(Math_fround(HEAPF32[i15 + 24 >> 2]) - f19)));
    f16 = Math_fround(f20 - Math_fround(HEAPF32[i5 + 60 >> 2]));
    break;
   } else ___assert_fail(32132, 31803, 13059, 32169);
  } while (0);
  f8 = Math_fround(f16 + f11);
  f9 = Math_fround(f14 + f13);
 }
 if (f7 <= Math_fround(0.0)) {
  if (f7 == Math_fround(0.0)) f21 = f3; else {
   f3 = Math_fround(f8 - Math_fround(HEAPF32[(HEAP32[i6 + 6392 >> 2] | 0) + 196 >> 2]));
   i5 = f3 >= Math_fround(4.0);
   f21 = Math_fround(f7 + (i5 ? f3 : Math_fround(4.0)));
  }
  HEAPF32[i2 >> 2] = f21;
 }
 i5 = i2 + 4 | 0;
 f21 = Math_fround(HEAPF32[i5 >> 2]);
 if (!(f21 <= Math_fround(0.0))) {
  i22 = i2;
  i23 = i22;
  i24 = HEAP32[i23 >> 2] | 0;
  i25 = i22 + 4 | 0;
  i26 = i25;
  i27 = HEAP32[i26 >> 2] | 0;
  i28 = i1;
  i29 = i28;
  HEAP32[i29 >> 2] = i24;
  i30 = i28 + 4 | 0;
  i31 = i30;
  HEAP32[i31 >> 2] = i27;
  return;
 }
 if (f21 == Math_fround(0.0)) f32 = f4; else {
  f4 = Math_fround(f9 - Math_fround(HEAPF32[(HEAP32[i6 + 6392 >> 2] | 0) + 200 >> 2]));
  i6 = f4 >= Math_fround(4.0);
  f32 = Math_fround(f21 + (i6 ? f4 : Math_fround(4.0)));
 }
 HEAPF32[i5 >> 2] = f32;
 i22 = i2;
 i23 = i22;
 i24 = HEAP32[i23 >> 2] | 0;
 i25 = i22 + 4 | 0;
 i26 = i25;
 i27 = HEAP32[i26 >> 2] | 0;
 i28 = i1;
 i29 = i28;
 HEAP32[i29 >> 2] = i24;
 i30 = i28 + 4 | 0;
 i31 = i30;
 HEAP32[i31 >> 2] = i27;
 return;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd(i1, i2, i3, i4, d5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 d5 = +d5;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176);
 i6 = i1 + 72 | 0;
 i7 = i1 + 48 | 0;
 i8 = i1 + 32 | 0;
 i9 = i1 + 24 | 0;
 i10 = i1 + 8 | 0;
 i11 = i1;
 i12 = i1 + 134 | 0;
 i13 = i1 + 68 | 0;
 i14 = i1 + 76 | 0;
 i15 = i1 + 64 | 0;
 i16 = i1 + 60 | 0;
 i17 = i1 + 56 | 0;
 i18 = i11;
 HEAP32[i18 >> 2] = 37;
 HEAP32[i18 + 4 >> 2] = 0;
 i18 = __ZNSt3__214__num_put_base14__format_floatEPcPKcj(i11 + 1 | 0, 5849359, HEAP32[i3 + 4 >> 2] | 0) | 0;
 HEAP32[i13 >> 2] = i12;
 i19 = __ZNSt3__26__clocEv() | 0;
 if (i18) {
  HEAP32[i10 >> 2] = HEAP32[i3 + 8 >> 2];
  HEAPF64[i10 + 8 >> 3] = d5;
  i20 = __ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz(i12, 30, i19, i11, i10) | 0;
 } else {
  HEAPF64[i9 >> 3] = d5;
  i20 = __ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz(i12, 30, i19, i11, i9) | 0;
 }
 if ((i20 | 0) > 29) {
  i9 = __ZNSt3__26__clocEv() | 0;
  if (i18) {
   HEAP32[i8 >> 2] = HEAP32[i3 + 8 >> 2];
   HEAPF64[i8 + 8 >> 3] = d5;
   i21 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz(i13, i9, i11, i8) | 0;
  } else {
   HEAPF64[i7 >> 3] = d5;
   i21 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz(i13, i9, i11, i7) | 0;
  }
  i7 = HEAP32[i13 >> 2] | 0;
  if (!i7) __ZSt17__throw_bad_allocv(); else {
   i22 = i21;
   i23 = i7;
   i24 = i7;
  }
 } else {
  i22 = i20;
  i23 = 0;
  i24 = HEAP32[i13 >> 2] | 0;
 }
 i13 = i24 + i22 | 0;
 i20 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i24, i13, i3) | 0;
 if ((i24 | 0) == (i12 | 0)) {
  i25 = i14;
  i26 = 0;
 } else {
  i14 = _malloc(i22 << 1) | 0;
  if (!i14) __ZSt17__throw_bad_allocv(); else {
   i25 = i14;
   i26 = i14;
  }
 }
 __ZNKSt3__28ios_base6getlocEv(i6, i3);
 __ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE(i24, i20, i13, i25, i15, i16, i6);
 __ZNSt3__26localeD2Ev(i6);
 HEAP32[i17 >> 2] = HEAP32[i2 >> 2];
 i2 = HEAP32[i15 >> 2] | 0;
 i15 = HEAP32[i16 >> 2] | 0;
 HEAP32[i6 >> 2] = HEAP32[i17 >> 2];
 i17 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i6, i25, i2, i15, i3, i4) | 0;
 _free(i26);
 _free(i23);
 STACKTOP = i1;
 return i17 | 0;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce(i1, i2, i3, i4, d5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 d5 = +d5;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176);
 i6 = i1 + 72 | 0;
 i7 = i1 + 48 | 0;
 i8 = i1 + 32 | 0;
 i9 = i1 + 24 | 0;
 i10 = i1 + 8 | 0;
 i11 = i1;
 i12 = i1 + 134 | 0;
 i13 = i1 + 68 | 0;
 i14 = i1 + 76 | 0;
 i15 = i1 + 64 | 0;
 i16 = i1 + 60 | 0;
 i17 = i1 + 56 | 0;
 i18 = i11;
 HEAP32[i18 >> 2] = 37;
 HEAP32[i18 + 4 >> 2] = 0;
 i18 = __ZNSt3__214__num_put_base14__format_floatEPcPKcj(i11 + 1 | 0, 70712, HEAP32[i3 + 4 >> 2] | 0) | 0;
 HEAP32[i13 >> 2] = i12;
 i19 = __ZNSt3__26__clocEv() | 0;
 if (i18) {
  HEAP32[i10 >> 2] = HEAP32[i3 + 8 >> 2];
  HEAPF64[i10 + 8 >> 3] = d5;
  i20 = __ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz(i12, 30, i19, i11, i10) | 0;
 } else {
  HEAPF64[i9 >> 3] = d5;
  i20 = __ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz(i12, 30, i19, i11, i9) | 0;
 }
 if ((i20 | 0) > 29) {
  i9 = __ZNSt3__26__clocEv() | 0;
  if (i18) {
   HEAP32[i8 >> 2] = HEAP32[i3 + 8 >> 2];
   HEAPF64[i8 + 8 >> 3] = d5;
   i21 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz(i13, i9, i11, i8) | 0;
  } else {
   HEAPF64[i7 >> 3] = d5;
   i21 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz(i13, i9, i11, i7) | 0;
  }
  i7 = HEAP32[i13 >> 2] | 0;
  if (!i7) __ZSt17__throw_bad_allocv(); else {
   i22 = i21;
   i23 = i7;
   i24 = i7;
  }
 } else {
  i22 = i20;
  i23 = 0;
  i24 = HEAP32[i13 >> 2] | 0;
 }
 i13 = i24 + i22 | 0;
 i20 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i24, i13, i3) | 0;
 if ((i24 | 0) == (i12 | 0)) {
  i25 = i14;
  i26 = 0;
 } else {
  i14 = _malloc(i22 << 1) | 0;
  if (!i14) __ZSt17__throw_bad_allocv(); else {
   i25 = i14;
   i26 = i14;
  }
 }
 __ZNKSt3__28ios_base6getlocEv(i6, i3);
 __ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE(i24, i20, i13, i25, i15, i16, i6);
 __ZNSt3__26localeD2Ev(i6);
 HEAP32[i17 >> 2] = HEAP32[i2 >> 2];
 i2 = HEAP32[i15 >> 2] | 0;
 i15 = HEAP32[i16 >> 2] | 0;
 HEAP32[i6 >> 2] = HEAP32[i17 >> 2];
 i17 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i6, i25, i2, i15, i3, i4) | 0;
 _free(i26);
 _free(i23);
 STACKTOP = i1;
 return i17 | 0;
}

function _png_handle_zTXt(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i6 = i5 + 28 | 0;
 i7 = i5;
 i8 = i1 + 756 | 0;
 i9 = HEAP32[i8 >> 2] | 0;
 switch (i9 | 0) {
 case 0:
  break;
 case 1:
  {
   _png_crc_finish(i1, i3) | 0;
   STACKTOP = i5;
   return;
  }
 default:
  i4 = 3;
 }
 if ((i4 | 0) == 3) {
  i10 = i9 + -1 | 0;
  HEAP32[i8 >> 2] = i10;
  if ((i10 | 0) == 1) {
   _png_crc_finish(i1, i3) | 0;
   _png_chunk_benign_error(i1, 60641);
   STACKTOP = i5;
   return;
  }
 }
 i10 = i1 + 208 | 0;
 i8 = HEAP32[i10 >> 2] | 0;
 if (!(i8 & 1)) _png_chunk_error(i1, 60665);
 if (i8 & 4 | 0) HEAP32[i10 >> 2] = i8 | 8;
 i8 = i1 + 788 | 0;
 i10 = HEAP32[i8 >> 2] | 0;
 if (!i10) i4 = 12; else {
  i9 = i1 + 792 | 0;
  if ((HEAP32[i9 >> 2] | 0) >>> 0 < i3 >>> 0) {
   HEAP32[i8 >> 2] = 0;
   HEAP32[i9 >> 2] = 0;
   _png_free(i1, i10);
   i4 = 12;
  } else i11 = i10;
 }
 do if ((i4 | 0) == 12) {
  i10 = _png_malloc_base(i1, i3) | 0;
  if (i10 | 0) {
   HEAP32[i8 >> 2] = i10;
   HEAP32[i1 + 792 >> 2] = i3;
   i11 = i10;
   break;
  }
  _png_crc_finish(i1, i3) | 0;
  _png_chunk_benign_error(i1, 60712);
  STACKTOP = i5;
  return;
 } while (0);
 _png_read_data(i1, i11, i3);
 _png_calculate_crc(i1, i11, i3);
 if (_png_crc_finish(i1, 0) | 0) {
  STACKTOP = i5;
  return;
 }
 do if (!i3) i12 = 60747; else {
  i4 = 0;
  while (1) {
   if (!(HEAP8[i11 + i4 >> 0] | 0)) {
    i13 = i4;
    break;
   }
   i10 = i4 + 1 | 0;
   if (i10 >>> 0 < i3 >>> 0) i4 = i10; else {
    i13 = i10;
    break;
   }
  }
  if ((i13 + -1 | 0) >>> 0 > 78) i12 = 60747; else if ((i13 + 3 | 0) >>> 0 > i3 >>> 0) i12 = 60944; else if (!(HEAP8[i11 + (i13 + 1) >> 0] | 0)) {
   HEAP32[i6 >> 2] = -1;
   i4 = i13 + 2 | 0;
   if ((_png_decompress_chunk(i1, i3, i4, i6) | 0) == 1) {
    i10 = HEAP32[i8 >> 2] | 0;
    i9 = HEAP32[i6 >> 2] | 0;
    HEAP8[i10 + (i9 + i4) >> 0] = 0;
    HEAP32[i7 >> 2] = 0;
    HEAP32[i7 + 4 >> 2] = i10;
    HEAP32[i7 + 8 >> 2] = i10 + i13 + 2;
    HEAP32[i7 + 12 >> 2] = i9;
    HEAP32[i7 + 16 >> 2] = 0;
    HEAP32[i7 + 20 >> 2] = 0;
    HEAP32[i7 + 24 >> 2] = 0;
    if (_png_set_text_2(i1, i2, i7, 1) | 0) {
     i12 = 60954;
     break;
    }
    STACKTOP = i5;
    return;
   } else {
    i9 = HEAP32[i1 + 248 >> 2] | 0;
    if (i9 | 0) {
     i12 = i9;
     break;
    }
    STACKTOP = i5;
    return;
   }
  } else i12 = 61156;
 } while (0);
 _png_chunk_benign_error(i1, i12);
 STACKTOP = i5;
 return;
}

function __ZN11ImFontAtlas18AddFontFromFileTTFEPKcfPK12ImFontConfigPKt(i1, i2, f3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 f3 = Math_fround(f3);
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i6 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256);
 i8 = i7;
 i9 = i7 + 136 | 0;
 i10 = i7 + 132 | 0;
 i11 = i7 + 16 | 0;
 HEAP32[i10 >> 2] = 0;
 i12 = __Z18ImFileLoadToMemoryPKcS0_Pji(i2, 64903, i10, 0) | 0;
 if (!i12) ___assert_fail(54909, 38201, 1564, 55974);
 if (!i4) {
  i13 = i11 + 32 | 0;
  HEAP32[i11 >> 2] = 0;
  HEAP32[i11 + 4 >> 2] = 0;
  HEAP8[i11 + 8 >> 0] = 1;
  HEAP32[i11 + 12 >> 2] = 0;
  HEAPF32[i11 + 16 >> 2] = Math_fround(0.0);
  HEAP32[i11 + 20 >> 2] = 3;
  HEAP32[i11 + 24 >> 2] = 1;
  HEAP8[i11 + 28 >> 0] = 0;
  HEAP32[i13 >> 2] = 0;
  HEAP32[i13 + 4 >> 2] = 0;
  HEAP32[i13 + 8 >> 2] = 0;
  HEAP32[i13 + 12 >> 2] = 0;
  HEAP32[i13 + 16 >> 2] = 0;
  HEAP32[i13 + 20 >> 2] = 0;
  HEAPF32[i11 + 56 >> 2] = Math_fround(3402823469999999843913219.0e14);
  HEAP8[i11 + 60 >> 0] = 0;
  HEAP32[i11 + 64 >> 2] = 0;
  HEAPF32[i11 + 68 >> 2] = Math_fround(1.0);
  i13 = i11 + 72 | 0;
  i14 = i13;
  i15 = i14 + 44 | 0;
  do {
   HEAP32[i14 >> 2] = 0;
   i14 = i14 + 4 | 0;
  } while ((i14 | 0) < (i15 | 0));
  i16 = i13;
  i6 = 6;
 } else {
  i14 = i11;
  i17 = i4;
  i15 = i14 + 116 | 0;
  do {
   HEAP32[i14 >> 2] = HEAP32[i17 >> 2];
   i14 = i14 + 4 | 0;
   i17 = i17 + 4 | 0;
  } while ((i14 | 0) < (i15 | 0));
  i4 = i11 + 72 | 0;
  if (!(HEAP8[i4 >> 0] | 0)) {
   i16 = i4;
   i6 = 6;
  }
 }
 if ((i6 | 0) == 6) {
  i6 = i2 + (_strlen(i2) | 0) | 0;
  L9 : while (1) {
   if (i6 >>> 0 <= i2 >>> 0) break;
   i4 = i6 + -1 | 0;
   switch (HEAP8[i4 >> 0] | 0) {
   case 92:
   case 47:
    {
     break L9;
     break;
    }
   default:
    i6 = i4;
   }
  }
  HEAP32[i8 >> 2] = i6;
  HEAPF64[i8 + 8 >> 3] = +f3;
  __Z14ImFormatStringPcjPKcz(i16, 40, 55993, i8) | 0;
 }
 i8 = HEAP32[i10 >> 2] | 0;
 i14 = i9;
 i17 = i11;
 i15 = i14 + 116 | 0;
 do {
  HEAP32[i14 >> 2] = HEAP32[i17 >> 2];
  i14 = i14 + 4 | 0;
  i17 = i17 + 4 | 0;
 } while ((i14 | 0) < (i15 | 0));
 if (HEAP32[i9 >> 2] | 0) ___assert_fail(55813, 38201, 1582, 56004);
 HEAP32[i9 >> 2] = i12;
 HEAP32[i9 + 4 >> 2] = i8;
 HEAPF32[i9 + 16 >> 2] = f3;
 if (!i5) {
  i18 = __ZN11ImFontAtlas7AddFontEPK12ImFontConfig(i1, i9) | 0;
  STACKTOP = i7;
  return i18 | 0;
 }
 HEAP32[i9 + 48 >> 2] = i5;
 i18 = __ZN11ImFontAtlas7AddFontEPK12ImFontConfig(i1, i9) | 0;
 STACKTOP = i7;
 return i18 | 0;
}

function _png_image_read_colormapped(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = 0;
 i3 = HEAP32[i1 >> 2] | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 i6 = HEAP32[i4 + 4 >> 2] | 0;
 _png_set_keep_unknown_chunks(i5, 1, 0, -1);
 _png_set_keep_unknown_chunks(i5, 0, 65194, 6);
 i4 = i1 + 40 | 0;
 if (!(HEAP32[i4 >> 2] | 0)) i7 = _png_set_interlace_handling(i5) | 0; else i7 = 0;
 do if (i5 | 0) if (!(HEAP32[i5 + 212 >> 2] & 64)) {
  _png_read_start_row(i5);
  _png_read_transform_info(i5, i6);
  break;
 } else {
  _png_app_error(i5, 64380);
  break;
 } while (0);
 L10 : do switch (HEAP32[i4 >> 2] | 0) {
 case 0:
  {
   switch (HEAP8[i6 + 25 >> 0] | 0) {
   case 0:
   case 3:
    break;
   default:
    {
     i2 = 22;
     break L10;
    }
   }
   if ((HEAP8[i6 + 24 >> 0] | 0) != 8) i2 = 22;
   break;
  }
 case 1:
 case 2:
  {
   if ((HEAP8[i6 + 25 >> 0] | 0) == 4) if ((HEAP8[i6 + 24 >> 0] | 0) == 8) if ((HEAP32[i5 + 488 >> 2] | 0) == 22e4) {
    if ((HEAP32[i3 + 24 >> 2] | 0) != 256) i2 = 22;
   } else i2 = 22; else i2 = 22; else i2 = 22;
   break;
  }
 case 3:
  {
   if ((HEAP8[i6 + 25 >> 0] | 0) == 2) if ((HEAP8[i6 + 24 >> 0] | 0) == 8) if ((HEAP32[i5 + 488 >> 2] | 0) == 22e4) {
    if ((HEAP32[i3 + 24 >> 2] | 0) != 216) i2 = 22;
   } else i2 = 22; else i2 = 22; else i2 = 22;
   break;
  }
 case 4:
  {
   if ((HEAP8[i6 + 25 >> 0] | 0) == 6) if ((HEAP8[i6 + 24 >> 0] | 0) == 8) if ((HEAP32[i5 + 488 >> 2] | 0) == 22e4) {
    if ((HEAP32[i3 + 24 >> 2] | 0) != 244) i2 = 22;
   } else i2 = 22; else i2 = 22; else i2 = 22;
   break;
  }
 default:
  i2 = 22;
 } while (0);
 if ((i2 | 0) == 22) _png_error(i5, 65781);
 i2 = HEAP32[i1 + 4 >> 2] | 0;
 i4 = HEAP32[i1 + 8 >> 2] | 0;
 if ((i4 | 0) < 0) i8 = i2 + (Math_imul((HEAP32[i3 + 12 >> 2] | 0) + -1 | 0, 0 - i4 | 0) | 0) | 0; else i8 = i2;
 i2 = i1 + 24 | 0;
 HEAP32[i2 >> 2] = i8;
 HEAP32[i1 + 28 >> 2] = i4;
 if (!i7) {
  i9 = _png_malloc(i5, _png_get_rowbytes(i5, i6) | 0) | 0;
  i6 = i1 + 20 | 0;
  HEAP32[i6 >> 2] = i9;
  i10 = _png_safe_execute(i3, 73, i1) | 0;
  HEAP32[i6 >> 2] = 0;
  _png_free(i5, i9);
  i11 = i10;
  return i11 | 0;
 }
 if ((i7 | 0) <= 0) {
  i11 = 1;
  return i11 | 0;
 }
 i10 = i3 + 12 | 0;
 i3 = i7;
 i7 = i8;
 while (1) {
  i8 = i3 + -1 | 0;
  i9 = HEAP32[i10 >> 2] | 0;
  if (i9 | 0) {
   i6 = i9;
   i9 = i7;
   while (1) {
    i6 = i6 + -1 | 0;
    _png_read_row(i5, i9, 0);
    if (!i6) break; else i9 = i9 + i4 | 0;
   }
  }
  if ((i3 | 0) <= 1) {
   i11 = 1;
   break;
  }
  i3 = i8;
  i7 = HEAP32[i2 >> 2] | 0;
 }
 return i11 | 0;
}

function _png_decompress_chunk(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i5;
 i7 = HEAP32[i1 + 760 >> 2] | 0;
 switch (i7 | 0) {
 case -1:
 case 0:
  {
   i8 = -1;
   i9 = i3 + 1 | 0;
   break;
  }
 default:
  {
   i10 = i3 + 1 | 0;
   if (i7 >>> 0 < i10 >>> 0) {
    _png_zstream_error(i1, -4);
    i11 = -4;
    STACKTOP = i5;
    return i11 | 0;
   } else {
    i8 = i7;
    i9 = i10;
   }
  }
 }
 i10 = i8 - i9 | 0;
 if (i10 >>> 0 < (HEAP32[i4 >> 2] | 0) >>> 0) HEAP32[i4 >> 2] = i10;
 i10 = i1 + 376 | 0;
 i9 = _png_inflate_claim(i1, HEAP32[i10 >> 2] | 0) | 0;
 switch (i9 | 0) {
 case 0:
  {
   i8 = i2 - i3 | 0;
   HEAP32[i6 >> 2] = i8;
   i2 = i1 + 788 | 0;
   i7 = _png_inflate(i1, HEAP32[i10 >> 2] | 0, (HEAP32[i2 >> 2] | 0) + i3 | 0, i6, 0, i4) | 0;
   L12 : do switch (i7 | 0) {
   case 1:
    {
     if (_inflateReset(i1 + 224 | 0) | 0) {
      _png_zstream_error(i1, 1);
      i12 = -7;
      break L12;
     }
     i13 = HEAP32[i4 >> 2] | 0;
     i14 = i3 + 1 + i13 | 0;
     i15 = _png_malloc_base(i1, i14) | 0;
     if (!i15) {
      _png_zstream_error(i1, -4);
      i12 = -4;
      break L12;
     }
     i16 = _png_inflate(i1, HEAP32[i10 >> 2] | 0, (HEAP32[i2 >> 2] | 0) + i3 | 0, i6, i15 + i3 | 0, i4) | 0;
     switch (i16 | 0) {
     case 1:
      {
       if ((i13 | 0) == (HEAP32[i4 >> 2] | 0)) {
        HEAP8[i15 + (i13 + i3) >> 0] = 0;
        i13 = HEAP32[i2 >> 2] | 0;
        if (i3 | 0) _memcpy(i15 | 0, i13 | 0, i3 | 0) | 0;
        HEAP32[i2 >> 2] = i15;
        HEAP32[i1 + 792 >> 2] = i14;
        i17 = i13;
        i18 = 1;
       } else {
        i17 = i15;
        i18 = -7;
       }
       break;
      }
     case 0:
      {
       i17 = i15;
       i18 = -7;
       break;
      }
     default:
      {
       i17 = i15;
       i18 = i16;
      }
     }
     _png_free(i1, i17);
     if ((i18 | 0) != 1 ? 1 : (i8 | 0) == (HEAP32[i6 >> 2] | 0)) i12 = i18; else {
      _png_chunk_benign_error(i1, 60874);
      i12 = 1;
     }
     break;
    }
   case 0:
    {
     i12 = -7;
     break;
    }
   default:
    i12 = i7;
   } while (0);
   HEAP32[i1 + 220 >> 2] = 0;
   i11 = i12;
   STACKTOP = i5;
   return i11 | 0;
  }
 case 1:
  {
   i11 = -7;
   STACKTOP = i5;
   return i11 | 0;
  }
 default:
  {
   i11 = i9;
   STACKTOP = i5;
   return i11 | 0;
  }
 }
 return 0;
}

function __Z18ImTextCharFromUtf8PjPKcS1_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i4 = 0;
 i5 = HEAPU8[i2 >> 0] | 0;
 if (!(i5 & 128)) {
  HEAP32[i1 >> 2] = i5;
  i6 = 1;
  return i6 | 0;
 }
 if ((i5 & 224 | 0) == 192) {
  HEAP32[i1 >> 2] = 65533;
  if (i3 | 0) if ((i3 - i2 | 0) < 2) {
   i6 = 1;
   return i6 | 0;
  }
  i7 = HEAP8[i2 >> 0] | 0;
  if ((i7 & 255) < 194) {
   i6 = 2;
   return i6 | 0;
  }
  i8 = HEAPU8[i2 + 1 >> 0] | 0;
  if ((i8 & 192 | 0) != 128) {
   i6 = 2;
   return i6 | 0;
  }
  HEAP32[i1 >> 2] = i8 & 63 | (i7 & 31) << 6;
  i6 = 2;
  return i6 | 0;
 }
 if ((i5 & 240 | 0) == 224) {
  HEAP32[i1 >> 2] = 65533;
  if (i3 | 0) if ((i3 - i2 | 0) < 3) {
   i6 = 1;
   return i6 | 0;
  }
  i7 = HEAP8[i2 >> 0] | 0;
  switch (i7 << 24 >> 24) {
  case -32:
   {
    if ((HEAP8[i2 + 1 >> 0] & -32) << 24 >> 24 == -96) i4 = 14; else {
     i6 = 3;
     return i6 | 0;
    }
    break;
   }
  case -19:
   {
    i8 = HEAP8[i2 + 1 >> 0] | 0;
    if ((i8 & 255) > 159) {
     i6 = 3;
     return i6 | 0;
    } else i9 = i8;
    break;
   }
  default:
   i4 = 14;
  }
  if ((i4 | 0) == 14) i9 = HEAP8[i2 + 1 >> 0] | 0;
  i8 = i9 & 255;
  if ((i8 & 192 | 0) != 128) {
   i6 = 3;
   return i6 | 0;
  }
  i9 = HEAPU8[i2 + 2 >> 0] | 0;
  if ((i9 & 192 | 0) != 128) {
   i6 = 3;
   return i6 | 0;
  }
  HEAP32[i1 >> 2] = i9 & 63 | i8 << 6 & 4032 | (i7 & 15) << 12;
  i6 = 3;
  return i6 | 0;
 }
 if ((i5 & 248 | 0) != 240) {
  HEAP32[i1 >> 2] = 0;
  i6 = 0;
  return i6 | 0;
 }
 HEAP32[i1 >> 2] = 65533;
 if (i3 | 0) if ((i3 - i2 | 0) < 4) {
  i6 = 1;
  return i6 | 0;
 }
 i3 = HEAP8[i2 >> 0] | 0;
 if ((i3 & 255) > 244) {
  i6 = 4;
  return i6 | 0;
 }
 switch (i3 << 24 >> 24) {
 case -16:
  {
   if (((HEAP8[i2 + 1 >> 0] | 0) + 112 & 255) > 47) {
    i6 = 4;
    return i6 | 0;
   } else i4 = 25;
   break;
  }
 case -12:
  {
   i5 = HEAP8[i2 + 1 >> 0] | 0;
   if ((i5 & 255) > 143) {
    i6 = 4;
    return i6 | 0;
   } else i10 = i5;
   break;
  }
 default:
  i4 = 25;
 }
 if ((i4 | 0) == 25) i10 = HEAP8[i2 + 1 >> 0] | 0;
 i4 = i10 & 255;
 if ((i4 & 192 | 0) != 128) {
  i6 = 4;
  return i6 | 0;
 }
 i10 = HEAPU8[i2 + 2 >> 0] | 0;
 if ((i10 & 192 | 0) != 128) {
  i6 = 4;
  return i6 | 0;
 }
 i5 = HEAPU8[i2 + 3 >> 0] | 0;
 if ((i5 & 192 | 0) != 128) {
  i6 = 4;
  return i6 | 0;
 }
 i2 = i10 << 6 & 4032 | i4 << 12 & 258048 | (i3 & 7) << 18;
 if ((i2 & 2095104 | 0) == 55296) {
  i6 = 4;
  return i6 | 0;
 }
 HEAP32[i1 >> 2] = i2 | i5 & 63;
 i6 = 4;
 return i6 | 0;
}

function __ZN7CityMap13checkRoadTileEii(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i4 = 0;
 i5 = HEAP32[i1 >> 2] | 0;
 i6 = i5 >>> 0 > i2 >>> 0;
 if (i6) if ((HEAP32[i1 + 4 >> 2] | 0) >>> 0 > i3 >>> 0) i7 = i1 + 128 + (i2 * 22528 | 0) + (i3 * 88 | 0) | 0; else i4 = 4; else i4 = 4;
 if ((i4 | 0) == 4) i7 = i1 + 40 | 0;
 if (!(HEAP32[i7 + 16 >> 2] | 0)) return;
 i8 = i3 + -1 | 0;
 if (i6) {
  i6 = (HEAP32[i1 + 4 >> 2] | 0) >>> 0 > i8 >>> 0 ? i1 + 128 + (i2 * 22528 | 0) + (i8 * 88 | 0) | 0 : i1 + 40 | 0;
  i8 = i3 + 1 | 0;
  if ((HEAP32[i1 + 4 >> 2] | 0) >>> 0 > i8 >>> 0) {
   i9 = i1 + 128 + (i2 * 22528 | 0) + (i8 * 88 | 0) | 0;
   i10 = i6;
  } else {
   i11 = i6;
   i4 = 10;
  }
 } else {
  i11 = i1 + 40 | 0;
  i4 = 10;
 }
 if ((i4 | 0) == 10) {
  i9 = i1 + 40 | 0;
  i10 = i11;
 }
 i11 = i2 + 1 | 0;
 if (i5 >>> 0 > i11 >>> 0) if ((HEAP32[i1 + 4 >> 2] | 0) >>> 0 > i3 >>> 0) i12 = i1 + 128 + (i11 * 22528 | 0) + (i3 * 88 | 0) | 0; else i4 = 14; else i4 = 14;
 if ((i4 | 0) == 14) i12 = i1 + 40 | 0;
 i11 = i2 + -1 | 0;
 if (i5 >>> 0 > i11 >>> 0) if ((HEAP32[i1 + 4 >> 2] | 0) >>> 0 > i3 >>> 0) i13 = i1 + 128 + (i11 * 22528 | 0) + (i3 * 88 | 0) | 0; else i4 = 18; else i4 = 18;
 if ((i4 | 0) == 18) i13 = i1 + 40 | 0;
 i1 = (HEAP32[i10 + 16 >> 2] | 0) != 0;
 i10 = i1 & 1;
 i4 = (HEAP32[i9 + 16 >> 2] | 0) == 0;
 i9 = (HEAP32[i12 + 16 >> 2] | 0) == 0;
 i12 = (HEAP32[i13 + 16 >> 2] | 0) == 0;
 i13 = i4 ? i10 : i10 | 2;
 i3 = i9 ? i13 : i13 | 4;
 i13 = i7 + 20 | 0;
 HEAP32[i13 >> 2] = (i4 ? i10 : i1 ? 2 : 1) + ((i9 ^ 1) & 1) + ((i12 ^ 1) & 1);
 do switch ((i12 ? i3 : i3 | 8) | 0) {
 case 0:
  {
   i14 = 0;
   i15 = 0;
   break;
  }
 case 3:
 case 2:
 case 1:
  {
   i14 = 1;
   i15 = 0;
   break;
  }
 case 4:
  {
   i14 = 0;
   i15 = 0;
   break;
  }
 case 5:
  {
   i14 = 0;
   i15 = 1;
   break;
  }
 case 6:
  {
   i14 = 1;
   i15 = 1;
   break;
  }
 case 7:
  {
   i14 = 0;
   i15 = 2;
   break;
  }
 case 8:
  {
   i14 = 0;
   i15 = 0;
   break;
  }
 case 9:
  {
   i14 = 3;
   i15 = 1;
   break;
  }
 case 10:
  {
   i14 = 2;
   i15 = 1;
   break;
  }
 case 11:
  {
   i14 = 2;
   i15 = 2;
   break;
  }
 case 12:
  {
   i14 = 0;
   i15 = 0;
   break;
  }
 case 13:
  {
   i14 = 3;
   i15 = 2;
   break;
  }
 case 14:
  {
   i14 = 1;
   i15 = 2;
   break;
  }
 case 15:
  {
   i14 = 0;
   i15 = 3;
   break;
  }
 default:
  return;
 } while (0);
 HEAP32[i13 >> 2] = i15;
 HEAP32[i7 + 24 >> 2] = i14;
 return;
}

function __Z5splitINSt3__220back_insert_iteratorINS0_6vectorINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS6_IS8_EEEEEEEvRKS8_cT_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160);
 i5 = i4 + 16 | 0;
 i6 = i4;
 i7 = i5 + 64 | 0;
 i8 = i5 + 8 | 0;
 HEAP32[i8 >> 2] = 3456;
 i9 = i5 + 12 | 0;
 HEAP32[i5 >> 2] = 1084;
 HEAP32[i7 >> 2] = 1104;
 HEAP32[i5 + 4 >> 2] = 0;
 __ZNSt3__28ios_base4initEPv(i5 + 64 | 0, i9);
 HEAP32[i5 + 136 >> 2] = 0;
 HEAP32[i5 + 140 >> 2] = -1;
 HEAP32[i5 >> 2] = 3436;
 HEAP32[i7 >> 2] = 3476;
 HEAP32[i8 >> 2] = 3456;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev(i9);
 HEAP32[i9 >> 2] = 3492;
 i8 = i5 + 44 | 0;
 HEAP32[i8 >> 2] = 0;
 HEAP32[i8 + 4 >> 2] = 0;
 HEAP32[i8 + 8 >> 2] = 0;
 HEAP32[i8 + 12 >> 2] = 0;
 HEAP32[i5 + 60 >> 2] = 24;
 __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE(i9, i1);
 HEAP32[i6 >> 2] = 0;
 HEAP32[i6 + 4 >> 2] = 0;
 HEAP32[i6 + 8 >> 2] = 0;
 i1 = HEAP32[i3 >> 2] | 0;
 i3 = i1 + 4 | 0;
 i10 = i1 + 8 | 0;
 while (1) {
  i11 = __ZNSt3__27getlineIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_istreamIT_T0_EES9_RNS_12basic_stringIS6_S7_T1_EES6_(i5, i6, i2) | 0;
  if (HEAP32[i11 + (HEAP32[(HEAP32[i11 >> 2] | 0) + -12 >> 2] | 0) + 16 >> 2] & 5 | 0) break;
  i11 = HEAP32[i3 >> 2] | 0;
  if ((i11 | 0) == (HEAP32[i10 >> 2] | 0)) {
   __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIRKS6_EEvOT_(i1, i6);
   continue;
  } else {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_(i11, i6);
   HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 12;
   continue;
  }
 }
 if ((HEAP8[i6 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[i6 >> 2] | 0);
 HEAP32[i5 >> 2] = 3436;
 HEAP32[i7 >> 2] = 3476;
 HEAP32[i5 + 8 >> 2] = 3456;
 HEAP32[i9 >> 2] = 3492;
 if ((HEAP8[i8 + 11 >> 0] | 0) >= 0) {
  __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev(i9);
  __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev(i5, 3552);
  __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev(i7);
  STACKTOP = i4;
  return;
 }
 __ZdlPv(HEAP32[i8 >> 2] | 0);
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev(i9);
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev(i5, 3552);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev(i7);
 STACKTOP = i4;
 return;
}

function __ZN7CityMap13checkPipeTileEii(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i4 = 0;
 i5 = HEAP32[i1 >> 2] | 0;
 i6 = i5 >>> 0 > i2 >>> 0;
 if (i6) if ((HEAP32[i1 + 4 >> 2] | 0) >>> 0 > i3 >>> 0) i7 = i1 + 128 + (i2 * 22528 | 0) + (i3 * 88 | 0) | 0; else i4 = 4; else i4 = 4;
 if ((i4 | 0) == 4) i7 = i1 + 40 | 0;
 i8 = HEAP32[i7 + 44 >> 2] | 0;
 if (!i8) return;
 if (HEAP8[i7 + 84 >> 0] | 0) {
  HEAP32[i7 + 48 >> 2] = 3;
  return;
 }
 i9 = i3 + -1 | 0;
 if (i6) {
  i6 = (HEAP32[i1 + 4 >> 2] | 0) >>> 0 > i9 >>> 0 ? i1 + 128 + (i2 * 22528 | 0) + (i9 * 88 | 0) | 0 : i1 + 40 | 0;
  i9 = i3 + 1 | 0;
  if ((HEAP32[i1 + 4 >> 2] | 0) >>> 0 > i9 >>> 0) {
   i10 = i1 + 128 + (i2 * 22528 | 0) + (i9 * 88 | 0) | 0;
   i11 = i6;
  } else {
   i12 = i6;
   i4 = 12;
  }
 } else {
  i12 = i1 + 40 | 0;
  i4 = 12;
 }
 if ((i4 | 0) == 12) {
  i10 = i1 + 40 | 0;
  i11 = i12;
 }
 i12 = i2 + 1 | 0;
 if (i5 >>> 0 > i12 >>> 0) if ((HEAP32[i1 + 4 >> 2] | 0) >>> 0 > i3 >>> 0) i13 = i1 + 128 + (i12 * 22528 | 0) + (i3 * 88 | 0) | 0; else i4 = 16; else i4 = 16;
 if ((i4 | 0) == 16) i13 = i1 + 40 | 0;
 i12 = i2 + -1 | 0;
 if (i5 >>> 0 > i12 >>> 0) if ((HEAP32[i1 + 4 >> 2] | 0) >>> 0 > i3 >>> 0) i14 = i1 + 128 + (i12 * 22528 | 0) + (i3 * 88 | 0) | 0; else i4 = 20; else i4 = 20;
 if ((i4 | 0) == 20) i14 = i1 + 40 | 0;
 i1 = (HEAP32[i11 + 44 >> 2] | 0) == (i8 | 0) & 1;
 i11 = (HEAP32[i10 + 44 >> 2] | 0) == (i8 | 0) ? i1 | 2 : i1;
 i1 = (HEAP32[i13 + 44 >> 2] | 0) == (i8 | 0) ? i11 | 4 : i11;
 do switch (((HEAP32[i14 + 44 >> 2] | 0) == (i8 | 0) ? i1 | 8 : i1) | 0) {
 case 0:
  {
   i15 = 0;
   i16 = 0;
   break;
  }
 case 3:
 case 2:
 case 1:
  {
   i15 = 1;
   i16 = 0;
   break;
  }
 case 4:
  {
   i15 = 0;
   i16 = 0;
   break;
  }
 case 5:
  {
   i15 = 0;
   i16 = 1;
   break;
  }
 case 6:
  {
   i15 = 1;
   i16 = 1;
   break;
  }
 case 7:
  {
   i15 = 0;
   i16 = 2;
   break;
  }
 case 8:
  {
   i15 = 0;
   i16 = 0;
   break;
  }
 case 9:
  {
   i15 = 3;
   i16 = 1;
   break;
  }
 case 10:
  {
   i15 = 2;
   i16 = 1;
   break;
  }
 case 11:
  {
   i15 = 2;
   i16 = 2;
   break;
  }
 case 12:
  {
   i15 = 0;
   i16 = 0;
   break;
  }
 case 13:
  {
   i15 = 3;
   i16 = 2;
   break;
  }
 case 14:
  {
   i15 = 1;
   i16 = 2;
   break;
  }
 case 15:
  {
   i15 = 0;
   i16 = 3;
   break;
  }
 default:
  return;
 } while (0);
 HEAP32[i7 + 48 >> 2] = i16;
 HEAP32[i7 + 52 >> 2] = i15;
 return;
}

function __ZN5ImGui19IsMouseHoveringRectERK6ImVec2S2_b(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, f11 = f0, f12 = f0, f13 = f0, f14 = f0, f15 = f0, f16 = f0, f17 = f0, f18 = f0, f19 = f0, f20 = f0, f21 = f0, i22 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4;
 i6 = HEAP32[1460598] | 0;
 i7 = i1;
 i1 = HEAP32[i7 >> 2] | 0;
 i8 = HEAP32[i7 + 4 >> 2] | 0;
 i7 = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i7 + 4 >> 2] = i8;
 i7 = i5 + 8 | 0;
 i9 = i2;
 i2 = HEAP32[i9 >> 2] | 0;
 i10 = HEAP32[i9 + 4 >> 2] | 0;
 i9 = i7;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i9 + 4 >> 2] = i10;
 f11 = (HEAP32[tempDoublePtr >> 2] = i1, Math_fround(HEAPF32[tempDoublePtr >> 2]));
 f12 = (HEAP32[tempDoublePtr >> 2] = i8, Math_fround(HEAPF32[tempDoublePtr >> 2]));
 f13 = (HEAP32[tempDoublePtr >> 2] = i2, Math_fround(HEAPF32[tempDoublePtr >> 2]));
 f14 = (HEAP32[tempDoublePtr >> 2] = i10, Math_fround(HEAPF32[tempDoublePtr >> 2]));
 if (i3) {
  i3 = HEAP32[i6 + 6392 >> 2] | 0;
  i10 = i3 + 464 | 0;
  i2 = Math_fround(HEAPF32[i10 >> 2]) <= f11;
  i8 = HEAP32[(i2 ? i5 : i10) >> 2] | 0;
  i2 = Math_fround(HEAPF32[i3 + 468 >> 2]) <= f12;
  i1 = HEAP32[(i2 ? i5 : i10) + 4 >> 2] | 0;
  i10 = i5;
  HEAP32[i10 >> 2] = i8;
  HEAP32[i10 + 4 >> 2] = i1;
  i10 = i3 + 472 | 0;
  i5 = Math_fround(HEAPF32[i10 >> 2]) > f13;
  i2 = HEAP32[(i5 ? i7 : i10) >> 2] | 0;
  i5 = Math_fround(HEAPF32[i3 + 476 >> 2]) > f14;
  i3 = HEAP32[(i5 ? i7 : i10) + 4 >> 2] | 0;
  i10 = i7;
  HEAP32[i10 >> 2] = i2;
  HEAP32[i10 + 4 >> 2] = i3;
  f15 = (HEAP32[tempDoublePtr >> 2] = i8, Math_fround(HEAPF32[tempDoublePtr >> 2]));
  f16 = (HEAP32[tempDoublePtr >> 2] = i3, Math_fround(HEAPF32[tempDoublePtr >> 2]));
  f17 = (HEAP32[tempDoublePtr >> 2] = i2, Math_fround(HEAPF32[tempDoublePtr >> 2]));
  f18 = f15;
  f19 = f16;
  f20 = f17;
  f21 = (HEAP32[tempDoublePtr >> 2] = i1, Math_fround(HEAPF32[tempDoublePtr >> 2]));
 } else {
  f18 = f11;
  f19 = f14;
  f20 = f13;
  f21 = f12;
 }
 f12 = Math_fround(HEAPF32[i6 + 5440 >> 2]);
 f13 = Math_fround(f18 - f12);
 f18 = Math_fround(HEAPF32[i6 + 5444 >> 2]);
 f14 = Math_fround(HEAPF32[i6 + 212 >> 2]);
 if (!(f14 >= f13)) {
  i22 = 0;
  STACKTOP = i4;
  return i22 | 0;
 }
 f13 = Math_fround(f18 + f19);
 f19 = Math_fround(f12 + f20);
 f20 = Math_fround(f21 - f18);
 f18 = Math_fround(HEAPF32[i6 + 216 >> 2]);
 i22 = f14 < f19 & f18 >= f20 & f18 < f13;
 STACKTOP = i4;
 return i22 | 0;
}

function __ZNSt3__2rsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_istreamIT_T0_EES9_RNS_12basic_stringIS6_S7_T1_EE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i3 + 4 | 0;
 i5 = i3;
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b(i4, i1, 0);
 if (!(HEAP8[i4 >> 0] | 0)) {
  i4 = i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0;
  __ZNSt3__28ios_base5clearEj(i4, HEAP32[i4 + 16 >> 2] | 4);
  STACKTOP = i3;
  return i1 | 0;
 }
 i4 = i2 + 11 | 0;
 if ((HEAP8[i4 >> 0] | 0) < 0) {
  HEAP8[HEAP32[i2 >> 2] >> 0] = 0;
  HEAP32[i2 + 4 >> 2] = 0;
 } else {
  HEAP8[i2 >> 0] = 0;
  HEAP8[i4 >> 0] = 0;
 }
 i4 = i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0;
 i6 = HEAP32[i4 + 12 >> 2] | 0;
 i7 = (i6 | 0) < 1 ? 2147483647 : i6;
 __ZNKSt3__28ios_base6getlocEv(i5, i4);
 i4 = __ZNKSt3__26locale9use_facetERNS0_2idE(i5, 5845188) | 0;
 __ZNSt3__26localeD2Ev(i5);
 L9 : do if ((i7 | 0) > 0) {
  i5 = i4 + 8 | 0;
  i6 = 0;
  while (1) {
   i8 = HEAP32[i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
   i9 = HEAP32[i8 + 12 >> 2] | 0;
   if ((i9 | 0) == (HEAP32[i8 + 16 >> 2] | 0)) {
    i10 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 36 >> 2] & 127](i8) | 0;
    if ((i10 | 0) == -1) {
     i11 = i6;
     i12 = 2;
     break L9;
    } else i13 = i10;
   } else i13 = HEAPU8[i9 >> 0] | 0;
   i9 = i13 & 255;
   if (i9 << 24 >> 24 > -1) if (HEAP16[(HEAP32[i5 >> 2] | 0) + (i13 << 24 >> 24 << 1) >> 1] & 8192) {
    i11 = i6;
    i12 = 0;
    break L9;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(i2, i9);
   i9 = i6 + 1 | 0;
   i10 = HEAP32[i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
   i8 = i10 + 12 | 0;
   i14 = HEAP32[i8 >> 2] | 0;
   if ((i14 | 0) == (HEAP32[i10 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 40 >> 2] & 127](i10) | 0; else HEAP32[i8 >> 2] = i14 + 1;
   if ((i9 | 0) < (i7 | 0)) i6 = i9; else {
    i11 = i9;
    i12 = 0;
    break;
   }
  }
 } else {
  i11 = 0;
  i12 = 0;
 } while (0);
 HEAP32[i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) + 12 >> 2] = 0;
 i7 = i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0;
 __ZNSt3__28ios_base5clearEj(i7, HEAP32[i7 + 16 >> 2] | ((i11 | 0) == 0 ? i12 | 4 : i12));
 STACKTOP = i3;
 return i1 | 0;
}

function __ZN7CityMap8saveFileENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 i5 = i4;
 i6 = i4 + 52 | 0;
 i7 = i4 + 40 | 0;
 i8 = i4 + 28 | 0;
 i9 = i4 + 16 | 0;
 i10 = i4 + 4 | 0;
 i11 = i9 + 11 | 0;
 HEAP8[i11 >> 0] = 10;
 i12 = i9;
 i13 = 26254;
 i14 = i12 + 10 | 0;
 do {
  HEAP8[i12 >> 0] = HEAP8[i13 >> 0] | 0;
  i12 = i12 + 1 | 0;
  i13 = i13 + 1 | 0;
 } while ((i12 | 0) < (i14 | 0));
 HEAP8[i9 + 10 >> 0] = 0;
 i13 = HEAP8[i2 + 11 >> 0] | 0;
 i12 = i13 << 24 >> 24 < 0;
 i14 = __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj(i9, i12 ? HEAP32[i2 >> 2] | 0 : i2, i12 ? HEAP32[i2 + 4 >> 2] | 0 : i13 & 255) | 0;
 HEAP32[i8 >> 2] = HEAP32[i14 >> 2];
 HEAP32[i8 + 4 >> 2] = HEAP32[i14 + 4 >> 2];
 HEAP32[i8 + 8 >> 2] = HEAP32[i14 + 8 >> 2];
 HEAP32[i14 >> 2] = 0;
 HEAP32[i14 + 4 >> 2] = 0;
 HEAP32[i14 + 8 >> 2] = 0;
 HEAP32[i10 >> 2] = 0;
 HEAP32[i10 + 4 >> 2] = 0;
 HEAP32[i10 + 8 >> 2] = 0;
 i14 = i10 + 11 | 0;
 HEAP8[i14 >> 0] = 5;
 HEAP8[i10 >> 0] = HEAP8[26455] | 0;
 HEAP8[i10 + 1 >> 0] = HEAP8[26456] | 0;
 HEAP8[i10 + 2 >> 0] = HEAP8[26457] | 0;
 HEAP8[i10 + 3 >> 0] = HEAP8[26458] | 0;
 HEAP8[i10 + 4 >> 0] = HEAP8[26459] | 0;
 HEAP8[i10 + 5 >> 0] = 0;
 i13 = __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj(i8, i10, 5) | 0;
 HEAP32[i7 >> 2] = HEAP32[i13 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
 HEAP32[i13 >> 2] = 0;
 HEAP32[i13 + 4 >> 2] = 0;
 HEAP32[i13 + 8 >> 2] = 0;
 if ((HEAP8[i14 >> 0] | 0) < 0) __ZdlPv(HEAP32[i10 >> 2] | 0);
 if ((HEAP8[i8 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[i8 >> 2] | 0);
 if ((HEAP8[i11 >> 0] | 0) < 0) __ZdlPv(HEAP32[i9 >> 2] | 0);
 i9 = (HEAP8[i7 + 11 >> 0] | 0) < 0;
 i11 = HEAP32[i7 >> 2] | 0;
 i8 = i9 ? i11 : i7;
 if ((_stat(i8, i6) | 0) == -1) {
  i6 = ___errno_location() | 0;
  if ((HEAP32[i6 >> 2] | 0) != 2) i3 = 9;
 } else i3 = 9;
 HEAP32[i5 >> 2] = 438;
 i3 = _open(i8, 66, i5) | 0;
 if ((i3 | 0) != -1) {
  i5 = i1 + 4 | 0;
  i8 = _write(i3, i1 + 128 | 0, Math_imul((HEAP32[i1 >> 2] | 0) * 88 | 0, HEAP32[i5 >> 2] | 0) | 0) | 0;
  _close(i3) | 0;
 }
 _emscripten_asm_const_i(1) | 0;
 if (!i9) {
  STACKTOP = i4;
  return;
 }
 __ZdlPv(i11);
 STACKTOP = i4;
 return;
}

function __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i3;
 if ((i2 | 0) == -1) {
  i5 = 0;
  STACKTOP = i3;
  return i5 | 0;
 }
 i6 = i1 + 12 | 0;
 i7 = i1 + 8 | 0;
 i8 = (HEAP32[i6 >> 2] | 0) - (HEAP32[i7 >> 2] | 0) | 0;
 i9 = i1 + 24 | 0;
 i10 = HEAP32[i9 >> 2] | 0;
 i11 = i1 + 28 | 0;
 i12 = HEAP32[i11 >> 2] | 0;
 if ((i10 | 0) == (i12 | 0)) {
  i13 = i1 + 48 | 0;
  if (!(HEAP32[i13 >> 2] & 16)) {
   i5 = -1;
   STACKTOP = i3;
   return i5 | 0;
  }
  i14 = i1 + 20 | 0;
  i15 = HEAP32[i14 >> 2] | 0;
  i16 = i1 + 44 | 0;
  i17 = (HEAP32[i16 >> 2] | 0) - i15 | 0;
  i18 = i1 + 32 | 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(i18, 0);
  i19 = i18 + 11 | 0;
  if ((HEAP8[i19 >> 0] | 0) < 0) i20 = (HEAP32[i1 + 40 >> 2] & 2147483647) + -1 | 0; else i20 = 10;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i20, 0);
  i20 = HEAP8[i19 >> 0] | 0;
  if (i20 << 24 >> 24 < 0) {
   i21 = HEAP32[i18 >> 2] | 0;
   i22 = HEAP32[i1 + 36 >> 2] | 0;
  } else {
   i21 = i18;
   i22 = i20 & 255;
  }
  i20 = i21 + i22 | 0;
  HEAP32[i14 >> 2] = i21;
  HEAP32[i11 >> 2] = i20;
  i11 = i21 + (i10 - i15) | 0;
  HEAP32[i9 >> 2] = i11;
  i15 = i21 + i17 | 0;
  HEAP32[i16 >> 2] = i15;
  i23 = i16;
  i24 = i13;
  i25 = i16;
  i26 = i11;
  i27 = i15;
  i28 = i20;
 } else {
  i20 = i1 + 44 | 0;
  i23 = i20;
  i24 = i1 + 48 | 0;
  i25 = i20;
  i26 = i10;
  i27 = HEAP32[i20 >> 2] | 0;
  i28 = i12;
 }
 i12 = i26 + 1 | 0;
 HEAP32[i4 >> 2] = i12;
 i20 = HEAP32[(i12 >>> 0 < i27 >>> 0 ? i25 : i4) >> 2] | 0;
 HEAP32[i23 >> 2] = i20;
 if (HEAP32[i24 >> 2] & 8 | 0) {
  i24 = i1 + 32 | 0;
  if ((HEAP8[i24 + 11 >> 0] | 0) < 0) i29 = HEAP32[i24 >> 2] | 0; else i29 = i24;
  HEAP32[i7 >> 2] = i29;
  HEAP32[i6 >> 2] = i29 + i8;
  HEAP32[i1 + 16 >> 2] = i20;
 }
 if ((i26 | 0) == (i28 | 0)) {
  i5 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 52 >> 2] & 31](i1, i2 & 255) | 0;
  STACKTOP = i3;
  return i5 | 0;
 } else {
  HEAP32[i9 >> 2] = i12;
  HEAP8[i26 >> 0] = i2;
  i5 = i2 & 255;
  STACKTOP = i3;
  return i5 | 0;
 }
 return 0;
}

function __ZL22stbtt__tesselate_cubicP12stbtt__pointPifffffffffi(i1, i2, f3, f4, f5, f6, f7, f8, f9, f10, f11, i12) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 f3 = Math_fround(f3);
 f4 = Math_fround(f4);
 f5 = Math_fround(f5);
 f6 = Math_fround(f6);
 f7 = Math_fround(f7);
 f8 = Math_fround(f8);
 f9 = Math_fround(f9);
 f10 = Math_fround(f10);
 f11 = Math_fround(f11);
 i12 = i12 | 0;
 var i13 = 0, f14 = f0, i15 = 0, f16 = f0, f17 = f0, f18 = f0, f19 = f0, f20 = f0, f21 = f0, f22 = f0, f23 = f0, f24 = f0;
 i13 = 0;
 f14 = f3;
 f3 = f4;
 f4 = f5;
 f5 = f6;
 f6 = f7;
 f7 = f8;
 i15 = i12;
 while (1) {
  f8 = Math_fround(f4 - f14);
  f16 = Math_fround(f5 - f3);
  f17 = Math_fround(f6 - f4);
  f18 = Math_fround(f7 - f5);
  f19 = Math_fround(f9 - f6);
  f20 = Math_fround(f10 - f7);
  f21 = Math_fround(f9 - f14);
  f22 = Math_fround(f10 - f3);
  f23 = Math_fround(Math_fround(Math_fround(Math_sqrt(Math_fround(Math_fround(f8 * f8) + Math_fround(f16 * f16)))) + Math_fround(Math_sqrt(Math_fround(Math_fround(f17 * f17) + Math_fround(f18 * f18))))) + Math_fround(Math_sqrt(Math_fround(Math_fround(f19 * f19) + Math_fround(f20 * f20)))));
  f20 = Math_fround(Math_sqrt(Math_fround(Math_fround(f21 * f21) + Math_fround(f22 * f22))));
  if ((i15 | 0) > 16) {
   i13 = 8;
   break;
  }
  if (!(Math_fround(Math_fround(f23 * f23) - Math_fround(f20 * f20)) > f11)) break;
  f20 = Math_fround(Math_fround(f14 + f4) * Math_fround(.5));
  f23 = Math_fround(Math_fround(f3 + f5) * Math_fround(.5));
  f22 = Math_fround(Math_fround(f4 + f6) * Math_fround(.5));
  f21 = Math_fround(Math_fround(f5 + f7) * Math_fround(.5));
  f19 = Math_fround(Math_fround(f6 + f9) * Math_fround(.5));
  f18 = Math_fround(Math_fround(f7 + f10) * Math_fround(.5));
  f17 = Math_fround(Math_fround(f20 + f22) * Math_fround(.5));
  f16 = Math_fround(Math_fround(f23 + f21) * Math_fround(.5));
  f8 = Math_fround(Math_fround(f22 + f19) * Math_fround(.5));
  f22 = Math_fround(Math_fround(f21 + f18) * Math_fround(.5));
  f21 = Math_fround(Math_fround(f17 + f8) * Math_fround(.5));
  f24 = Math_fround(Math_fround(f16 + f22) * Math_fround(.5));
  i12 = i15 + 1 | 0;
  __ZL22stbtt__tesselate_cubicP12stbtt__pointPifffffffffi(i1, i2, f14, f3, f20, f23, f17, f16, f21, f24, f11, i12);
  f14 = f21;
  f3 = f24;
  f4 = f8;
  f5 = f22;
  f6 = f19;
  f7 = f18;
  i15 = i12;
 }
 if ((i13 | 0) == 8) return;
 i13 = HEAP32[i2 >> 2] | 0;
 if (i1 | 0) {
  i15 = i1 + (i13 << 3) | 0;
  HEAPF32[i15 >> 2] = f9;
  HEAPF32[i15 + 4 >> 2] = f10;
 }
 HEAP32[i2 >> 2] = i13 + 1;
 return;
}

function __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i7 = i2 + 44 | 0;
 i8 = HEAP32[i7 >> 2] | 0;
 i9 = i2 + 24 | 0;
 i10 = HEAP32[i9 >> 2] | 0;
 i11 = i10;
 if (i8 >>> 0 < i10 >>> 0) {
  HEAP32[i7 >> 2] = i10;
  i12 = i11;
 } else i12 = i8;
 i8 = i6 & 24;
 L4 : do if (!i8) {
  i13 = -1;
  i14 = -1;
 } else if ((i5 | 0) == 1 & (i8 | 0) == 24) {
  i13 = -1;
  i14 = -1;
 } else {
  L7 : do switch (i5 | 0) {
  case 0:
   {
    i15 = 0;
    i16 = 0;
    break;
   }
  case 1:
   {
    if (!(i6 & 8)) {
     i7 = i11 - (HEAP32[i2 + 20 >> 2] | 0) | 0;
     i15 = i7;
     i16 = ((i7 | 0) < 0) << 31 >> 31;
     break L7;
    } else {
     i7 = (HEAP32[i2 + 12 >> 2] | 0) - (HEAP32[i2 + 8 >> 2] | 0) | 0;
     i15 = i7;
     i16 = ((i7 | 0) < 0) << 31 >> 31;
     break L7;
    }
    break;
   }
  case 2:
   {
    i7 = i2 + 32 | 0;
    if ((HEAP8[i7 + 11 >> 0] | 0) < 0) i17 = HEAP32[i7 >> 2] | 0; else i17 = i7;
    i7 = i12 - i17 | 0;
    i15 = i7;
    i16 = ((i7 | 0) < 0) << 31 >> 31;
    break;
   }
  default:
   {
    i13 = -1;
    i14 = -1;
    break L4;
   }
  } while (0);
  i7 = _i64Add(i15 | 0, i16 | 0, i3 | 0, i4 | 0) | 0;
  i18 = tempRet0;
  if ((i18 | 0) < 0) {
   i13 = -1;
   i14 = -1;
  } else {
   i19 = i2 + 32 | 0;
   if ((HEAP8[i19 + 11 >> 0] | 0) < 0) i20 = HEAP32[i19 >> 2] | 0; else i20 = i19;
   i19 = i12 - i20 | 0;
   i21 = ((i19 | 0) < 0) << 31 >> 31;
   if ((i18 | 0) > (i21 | 0) | (i18 | 0) == (i21 | 0) & i7 >>> 0 > i19 >>> 0) {
    i13 = -1;
    i14 = -1;
   } else {
    i19 = i6 & 8;
    if (!((i7 | 0) == 0 & (i18 | 0) == 0)) {
     if (i19 | 0) if (!(HEAP32[i2 + 12 >> 2] | 0)) {
      i13 = -1;
      i14 = -1;
      break;
     }
     if ((i6 & 16 | 0) != 0 & (i10 | 0) == 0) {
      i13 = -1;
      i14 = -1;
      break;
     }
    }
    if (i19 | 0) {
     HEAP32[i2 + 12 >> 2] = (HEAP32[i2 + 8 >> 2] | 0) + i7;
     HEAP32[i2 + 16 >> 2] = i12;
    }
    if (!(i6 & 16)) {
     i13 = i7;
     i14 = i18;
    } else {
     HEAP32[i9 >> 2] = (HEAP32[i2 + 20 >> 2] | 0) + i7;
     i13 = i7;
     i14 = i18;
    }
   }
  }
 } while (0);
 i2 = i1;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 i2 = i1 + 8 | 0;
 HEAP32[i2 >> 2] = i13;
 HEAP32[i2 + 4 >> 2] = i14;
 return;
}

function _png_handle_bKGD(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i5 + 10 | 0;
 i7 = i5;
 i8 = HEAP32[i1 + 208 >> 2] | 0;
 if (!(i8 & 1)) _png_chunk_error(i1, 60665);
 if (!(i8 & 4)) {
  i9 = i1 + 435 | 0;
  i10 = HEAP8[i9 >> 0] | 0;
  i11 = i10 << 24 >> 24 == 3;
  if (!((i8 & 2 | 0) == 0 & i11)) {
   i8 = (i2 | 0) != 0;
   if (i8) if (HEAP32[i2 + 8 >> 2] & 32 | 0) {
    _png_crc_finish(i1, i3) | 0;
    _png_chunk_benign_error(i1, 63151);
    STACKTOP = i5;
    return;
   }
   if (((i11 ? 1 : (i10 << 1 & 4 | 2) & 255) | 0) != (i3 | 0)) {
    _png_crc_finish(i1, i3) | 0;
    _png_chunk_benign_error(i1, 61194);
    STACKTOP = i5;
    return;
   }
   _png_read_data(i1, i6, i3);
   _png_calculate_crc(i1, i6, i3);
   if (_png_crc_finish(i1, 0) | 0) {
    STACKTOP = i5;
    return;
   }
   i10 = HEAP8[i9 >> 0] | 0;
   do if (i10 << 24 >> 24 == 3) {
    i9 = HEAP8[i6 >> 0] | 0;
    HEAP8[i7 >> 0] = i9;
    do if (i8) {
     i11 = HEAP16[i2 + 20 >> 1] | 0;
     if (!(i11 << 16 >> 16)) i4 = 18; else {
      i12 = i9 & 255;
      if (i12 >>> 0 < (i11 & 65535) >>> 0) {
       i11 = HEAP32[i1 + 416 >> 2] | 0;
       i13 = i11 + (i12 * 3 | 0) | 0;
       HEAP16[i7 + 2 >> 1] = HEAPU8[i13 >> 0] | 0;
       HEAP16[i7 + 4 >> 1] = HEAPU8[i13 + 1 >> 0] | 0;
       HEAP16[i7 + 6 >> 1] = HEAPU8[i13 + 2 >> 0] | 0;
       break;
      }
      _png_chunk_benign_error(i1, 63266);
      STACKTOP = i5;
      return;
     }
    } else i4 = 18; while (0);
    if ((i4 | 0) == 18) {
     HEAP16[i7 + 6 >> 1] = 0;
     HEAP16[i7 + 4 >> 1] = 0;
     HEAP16[i7 + 2 >> 1] = 0;
    }
    HEAP16[i7 + 8 >> 1] = 0;
   } else {
    HEAP8[i7 >> 0] = 0;
    i9 = (HEAPU8[i6 >> 0] << 8 | HEAPU8[i6 + 1 >> 0]) & 65535;
    if (!(i10 & 2)) {
     HEAP16[i7 + 8 >> 1] = i9;
     HEAP16[i7 + 6 >> 1] = i9;
     HEAP16[i7 + 4 >> 1] = i9;
     HEAP16[i7 + 2 >> 1] = i9;
     break;
    } else {
     HEAP16[i7 + 2 >> 1] = i9;
     HEAP16[i7 + 4 >> 1] = HEAPU8[i6 + 2 >> 0] << 8 | HEAPU8[i6 + 3 >> 0];
     HEAP16[i7 + 6 >> 1] = HEAPU8[i6 + 4 >> 0] << 8 | HEAPU8[i6 + 5 >> 0];
     HEAP16[i7 + 8 >> 1] = 0;
     break;
    }
   } while (0);
   _png_set_bKGD(i1, i2, i7);
   STACKTOP = i5;
   return;
  }
 }
 _png_crc_finish(i1, i3) | 0;
 _png_chunk_benign_error(i1, 61181);
 STACKTOP = i5;
 return;
}

function _png_handle_sCAL(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i5 + 4 | 0;
 i7 = i5;
 i8 = HEAP32[i1 + 208 >> 2] | 0;
 if (!(i8 & 1)) _png_chunk_error(i1, 60665);
 if (i8 & 4 | 0) {
  _png_crc_finish(i1, i3) | 0;
  _png_chunk_benign_error(i1, 61181);
  STACKTOP = i5;
  return;
 }
 if (i2 | 0) if (HEAP32[i2 + 8 >> 2] & 16384 | 0) {
  _png_crc_finish(i1, i3) | 0;
  _png_chunk_benign_error(i1, 63151);
  STACKTOP = i5;
  return;
 }
 if (i3 >>> 0 < 4) {
  _png_crc_finish(i1, i3) | 0;
  _png_chunk_benign_error(i1, 61194);
  STACKTOP = i5;
  return;
 }
 i8 = i3 + 1 | 0;
 i9 = i1 + 788 | 0;
 i10 = HEAP32[i9 >> 2] | 0;
 if (!i10) i4 = 13; else {
  i11 = i1 + 792 | 0;
  if ((HEAP32[i11 >> 2] | 0) >>> 0 < i8 >>> 0) {
   HEAP32[i9 >> 2] = 0;
   HEAP32[i11 >> 2] = 0;
   _png_free(i1, i10);
   i4 = 13;
  } else i12 = i10;
 }
 do if ((i4 | 0) == 13) {
  i10 = _png_malloc_base(i1, i8) | 0;
  if (i10 | 0) {
   HEAP32[i9 >> 2] = i10;
   HEAP32[i1 + 792 >> 2] = i8;
   i12 = i10;
   break;
  }
  _png_chunk_benign_error(i1, 60712);
  _png_crc_finish(i1, i3) | 0;
  STACKTOP = i5;
  return;
 } while (0);
 _png_read_data(i1, i12, i3);
 _png_calculate_crc(i1, i12, i3);
 HEAP8[i12 + i3 >> 0] = 0;
 if (_png_crc_finish(i1, 0) | 0) {
  STACKTOP = i5;
  return;
 }
 if (((HEAP8[i12 >> 0] | 0) + -1 & 255) >= 2) {
  _png_chunk_benign_error(i1, 62505);
  STACKTOP = i5;
  return;
 }
 HEAP32[i6 >> 2] = 1;
 HEAP32[i7 >> 2] = 0;
 if (_png_check_fp_number(i12, i3, i7, i6) | 0) {
  i8 = HEAP32[i6 >> 2] | 0;
  if (i8 >>> 0 < i3 >>> 0) {
   i9 = i8 + 1 | 0;
   HEAP32[i6 >> 2] = i9;
   if (!(HEAP8[i12 + i8 >> 0] | 0)) {
    if ((HEAP32[i7 >> 2] & 392 | 0) != 264) {
     _png_chunk_benign_error(i1, 62535);
     STACKTOP = i5;
     return;
    }
    HEAP32[i7 >> 2] = 0;
    i8 = (_png_check_fp_number(i12, i3, i7, i6) | 0) != 0;
    if (!(i8 & (HEAP32[i6 >> 2] | 0) == (i3 | 0))) {
     _png_chunk_benign_error(i1, 62554);
     STACKTOP = i5;
     return;
    }
    if ((HEAP32[i7 >> 2] & 392 | 0) == 264) {
     _png_set_sCAL_s(i1, i2, HEAPU8[i12 >> 0] | 0, i12 + 1 | 0, i12 + i9 | 0);
     STACKTOP = i5;
     return;
    } else {
     _png_chunk_benign_error(i1, 62572);
     STACKTOP = i5;
     return;
    }
   }
  }
 }
 _png_chunk_benign_error(i1, 62518);
 STACKTOP = i5;
 return;
}

function __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 12 | 0;
 i9 = i7;
 i10 = HEAP32[i1 >> 2] | 0;
 L1 : do if (!i10) i11 = 0; else {
  i12 = i4;
  i13 = i2;
  i14 = i12 - i13 >> 2;
  i15 = i5 + 12 | 0;
  i16 = HEAP32[i15 >> 2] | 0;
  i17 = (i16 | 0) > (i14 | 0) ? i16 - i14 | 0 : 0;
  i14 = i3;
  i16 = i14 - i13 | 0;
  i13 = i16 >> 2;
  if ((i16 | 0) > 0) if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i10 >> 2] | 0) + 48 >> 2] & 31](i10, i2, i13) | 0) != (i13 | 0)) {
   HEAP32[i1 >> 2] = 0;
   i11 = 0;
   break;
  }
  do if ((i17 | 0) > 0) {
   HEAP32[i9 >> 2] = 0;
   HEAP32[i9 + 4 >> 2] = 0;
   HEAP32[i9 + 8 >> 2] = 0;
   if (i17 >>> 0 > 1073741807) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i9);
   do if (i17 >>> 0 < 2) {
    i13 = i9 + 8 + 3 | 0;
    HEAP8[i13 >> 0] = i17;
    i18 = i9;
    i19 = i13;
    i20 = i9;
   } else {
    i13 = i17 + 4 & -4;
    if (i13 >>> 0 > 1073741823) _abort(); else {
     i16 = __Znwj(i13 << 2) | 0;
     HEAP32[i9 >> 2] = i16;
     i21 = i9 + 8 | 0;
     HEAP32[i21 >> 2] = i13 | -2147483648;
     HEAP32[i9 + 4 >> 2] = i17;
     i18 = i16;
     i19 = i21 + 3 | 0;
     i20 = i9;
     break;
    }
   } while (0);
   __ZNSt3__211char_traitsIwE6assignEPwjw(i18, i17, i6) | 0;
   HEAP32[i8 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i18 + (i17 << 2) | 0, i8);
   if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i10 >> 2] | 0) + 48 >> 2] & 31](i10, (HEAP8[i19 >> 0] | 0) < 0 ? HEAP32[i9 >> 2] | 0 : i20, i17) | 0) == (i17 | 0)) {
    __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i9);
    break;
   } else {
    HEAP32[i1 >> 2] = 0;
    __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i9);
    i11 = 0;
    break L1;
   }
  } while (0);
  i17 = i12 - i14 | 0;
  i21 = i17 >> 2;
  if ((i17 | 0) > 0) if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i10 >> 2] | 0) + 48 >> 2] & 31](i10, i3, i21) | 0) != (i21 | 0)) {
   HEAP32[i1 >> 2] = 0;
   i11 = 0;
   break;
  }
  HEAP32[i15 >> 2] = 0;
  i11 = i10;
 } while (0);
 STACKTOP = i7;
 return i11 | 0;
}

function _pop_arg(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, d8 = 0.0;
 L1 : do if (i2 >>> 0 <= 20) do switch (i2 | 0) {
 case 9:
  {
   i4 = (HEAP32[i3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i5 = HEAP32[i4 >> 2] | 0;
   HEAP32[i3 >> 2] = i4 + 4;
   HEAP32[i1 >> 2] = i5;
   break L1;
   break;
  }
 case 10:
  {
   i5 = (HEAP32[i3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i4 = HEAP32[i5 >> 2] | 0;
   HEAP32[i3 >> 2] = i5 + 4;
   i5 = i1;
   HEAP32[i5 >> 2] = i4;
   HEAP32[i5 + 4 >> 2] = ((i4 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 11:
  {
   i4 = (HEAP32[i3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i5 = HEAP32[i4 >> 2] | 0;
   HEAP32[i3 >> 2] = i4 + 4;
   i4 = i1;
   HEAP32[i4 >> 2] = i5;
   HEAP32[i4 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 12:
  {
   i4 = (HEAP32[i3 >> 2] | 0) + (8 - 1) & ~(8 - 1);
   i5 = i4;
   i6 = HEAP32[i5 >> 2] | 0;
   i7 = HEAP32[i5 + 4 >> 2] | 0;
   HEAP32[i3 >> 2] = i4 + 8;
   i4 = i1;
   HEAP32[i4 >> 2] = i6;
   HEAP32[i4 + 4 >> 2] = i7;
   break L1;
   break;
  }
 case 13:
  {
   i7 = (HEAP32[i3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i4 = HEAP32[i7 >> 2] | 0;
   HEAP32[i3 >> 2] = i7 + 4;
   i7 = (i4 & 65535) << 16 >> 16;
   i4 = i1;
   HEAP32[i4 >> 2] = i7;
   HEAP32[i4 + 4 >> 2] = ((i7 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 14:
  {
   i7 = (HEAP32[i3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i4 = HEAP32[i7 >> 2] | 0;
   HEAP32[i3 >> 2] = i7 + 4;
   i7 = i1;
   HEAP32[i7 >> 2] = i4 & 65535;
   HEAP32[i7 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 15:
  {
   i7 = (HEAP32[i3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i4 = HEAP32[i7 >> 2] | 0;
   HEAP32[i3 >> 2] = i7 + 4;
   i7 = (i4 & 255) << 24 >> 24;
   i4 = i1;
   HEAP32[i4 >> 2] = i7;
   HEAP32[i4 + 4 >> 2] = ((i7 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 16:
  {
   i7 = (HEAP32[i3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i4 = HEAP32[i7 >> 2] | 0;
   HEAP32[i3 >> 2] = i7 + 4;
   i7 = i1;
   HEAP32[i7 >> 2] = i4 & 255;
   HEAP32[i7 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 17:
  {
   i7 = (HEAP32[i3 >> 2] | 0) + (8 - 1) & ~(8 - 1);
   d8 = +HEAPF64[i7 >> 3];
   HEAP32[i3 >> 2] = i7 + 8;
   HEAPF64[i1 >> 3] = d8;
   break L1;
   break;
  }
 case 18:
  {
   i7 = (HEAP32[i3 >> 2] | 0) + (8 - 1) & ~(8 - 1);
   d8 = +HEAPF64[i7 >> 3];
   HEAP32[i3 >> 2] = i7 + 8;
   HEAPF64[i1 >> 3] = d8;
   break L1;
   break;
  }
 default:
  break L1;
 } while (0); while (0);
 return;
}

function _qsort(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(208);
 i6 = i5 + 8 | 0;
 i7 = i5;
 i8 = Math_imul(i3, i2) | 0;
 i2 = i7;
 HEAP32[i2 >> 2] = 1;
 HEAP32[i2 + 4 >> 2] = 0;
 L1 : do if (i8 | 0) {
  i2 = 0 - i3 | 0;
  HEAP32[i6 + 4 >> 2] = i3;
  HEAP32[i6 >> 2] = i3;
  i9 = 2;
  i10 = i3;
  i11 = i3;
  while (1) {
   i12 = i10 + i3 + i11 | 0;
   HEAP32[i6 + (i9 << 2) >> 2] = i12;
   if (i12 >>> 0 < i8 >>> 0) {
    i13 = i11;
    i9 = i9 + 1 | 0;
    i11 = i12;
    i10 = i13;
   } else break;
  }
  i10 = i1 + i8 + i2 | 0;
  if (i10 >>> 0 > i1 >>> 0) {
   i11 = i10;
   i9 = 1;
   i13 = i1;
   i12 = 1;
   while (1) {
    do if ((i12 & 3 | 0) == 3) {
     _sift(i13, i3, i4, i9, i6);
     _shr(i7, 2);
     i14 = i9 + 2 | 0;
    } else {
     i15 = i9 + -1 | 0;
     if ((HEAP32[i6 + (i15 << 2) >> 2] | 0) >>> 0 < (i11 - i13 | 0) >>> 0) _sift(i13, i3, i4, i9, i6); else _trinkle(i13, i3, i4, i7, i9, 0, i6);
     if ((i9 | 0) == 1) {
      _shl(i7, 1);
      i14 = 0;
      break;
     } else {
      _shl(i7, i15);
      i14 = 1;
      break;
     }
    } while (0);
    i15 = HEAP32[i7 >> 2] | 1;
    HEAP32[i7 >> 2] = i15;
    i16 = i13 + i3 | 0;
    if (i16 >>> 0 < i10 >>> 0) {
     i9 = i14;
     i13 = i16;
     i12 = i15;
    } else {
     i17 = i14;
     i18 = i16;
     i19 = i15;
     break;
    }
   }
  } else {
   i17 = 1;
   i18 = i1;
   i19 = 1;
  }
  _trinkle(i18, i3, i4, i7, i17, 0, i6);
  i12 = i7 + 4 | 0;
  i13 = i18;
  i9 = i17;
  i10 = i19;
  while (1) {
   if ((i9 | 0) == 1 & (i10 | 0) == 1) {
    if (!(HEAP32[i12 >> 2] | 0)) break L1;
   } else if ((i9 | 0) >= 2) {
    _shl(i7, 2);
    i11 = i9 + -2 | 0;
    HEAP32[i7 >> 2] = HEAP32[i7 >> 2] ^ 7;
    _shr(i7, 1);
    _trinkle(i13 + (0 - (HEAP32[i6 + (i11 << 2) >> 2] | 0)) + i2 | 0, i3, i4, i7, i9 + -1 | 0, 1, i6);
    _shl(i7, 1);
    i15 = HEAP32[i7 >> 2] | 1;
    HEAP32[i7 >> 2] = i15;
    i16 = i13 + i2 | 0;
    _trinkle(i16, i3, i4, i7, i11, 1, i6);
    i13 = i16;
    i9 = i11;
    i10 = i15;
    continue;
   }
   i15 = _pntz(i7) | 0;
   _shr(i7, i15);
   i13 = i13 + i2 | 0;
   i9 = i15 + i9 | 0;
   i10 = HEAP32[i7 >> 2] | 0;
  }
 } while (0);
 STACKTOP = i5;
 return;
}

function _mbsnrtowcs(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 1040 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1040);
 i7 = i6 + 8 | 0;
 i8 = i6;
 i9 = HEAP32[i2 >> 2] | 0;
 HEAP32[i8 >> 2] = i9;
 i10 = (i1 | 0) != 0;
 i11 = i10 ? i4 : 256;
 i4 = i10 ? i1 : i7;
 i1 = i9;
 L1 : do if ((i11 | 0) != 0 & (i9 | 0) != 0) {
  i12 = 0;
  i13 = i3;
  i14 = i11;
  i15 = i4;
  i16 = i1;
  while (1) {
   i17 = i13 >>> 2;
   i18 = i17 >>> 0 >= i14 >>> 0;
   if (!(i13 >>> 0 > 131 | i18)) {
    i19 = i15;
    i20 = i12;
    i21 = i13;
    i22 = i14;
    i23 = i16;
    break L1;
   }
   i24 = i18 ? i14 : i17;
   i25 = i13 - i24 | 0;
   i17 = _mbsrtowcs(i15, i8, i24, i5) | 0;
   if ((i17 | 0) == -1) break;
   i24 = (i15 | 0) == (i7 | 0);
   i18 = i14 - (i24 ? 0 : i17) | 0;
   i26 = i24 ? i15 : i15 + (i17 << 2) | 0;
   i24 = i17 + i12 | 0;
   i17 = HEAP32[i8 >> 2] | 0;
   if ((i18 | 0) != 0 & (i17 | 0) != 0) {
    i12 = i24;
    i13 = i25;
    i14 = i18;
    i15 = i26;
    i16 = i17;
   } else {
    i19 = i26;
    i20 = i24;
    i21 = i25;
    i22 = i18;
    i23 = i17;
    break L1;
   }
  }
  i19 = i15;
  i20 = -1;
  i21 = i25;
  i22 = 0;
  i23 = HEAP32[i8 >> 2] | 0;
 } else {
  i19 = i4;
  i20 = 0;
  i21 = i3;
  i22 = i11;
  i23 = i1;
 } while (0);
 L8 : do if (!i23) i27 = i20; else if ((i22 | 0) != 0 & (i21 | 0) != 0) {
  i1 = i20;
  i11 = i21;
  i3 = i19;
  i4 = i22;
  i25 = i23;
  while (1) {
   i28 = _mbrtowc(i3, i25, i11, i5) | 0;
   if ((i28 + 2 | 0) >>> 0 < 3) break;
   i25 = (HEAP32[i8 >> 2] | 0) + i28 | 0;
   HEAP32[i8 >> 2] = i25;
   i11 = i11 - i28 | 0;
   i4 = i4 + -1 | 0;
   i7 = i1 + 1 | 0;
   if (!((i4 | 0) != 0 & (i11 | 0) != 0)) {
    i27 = i7;
    break L8;
   } else {
    i1 = i7;
    i3 = i3 + 4 | 0;
   }
  }
  switch (i28 | 0) {
  case -1:
   {
    i27 = -1;
    break L8;
    break;
   }
  case 0:
   {
    HEAP32[i8 >> 2] = 0;
    i27 = i1;
    break L8;
    break;
   }
  default:
   {
    HEAP32[i5 >> 2] = 0;
    i27 = i1;
    break L8;
   }
  }
 } else i27 = i20; while (0);
 if (i10) HEAP32[i2 >> 2] = HEAP32[i8 >> 2];
 STACKTOP = i6;
 return i27 | 0;
}

function __ZNSt3__2L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i9 = 0;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i6 >> 2] = i4;
 i1 = i5;
 if (!(i8 & 2)) i9 = 4; else if ((i1 - i4 | 0) < 3) i10 = 1; else {
  HEAP32[i6 >> 2] = i4 + 1;
  HEAP8[i4 >> 0] = -17;
  i4 = HEAP32[i6 >> 2] | 0;
  HEAP32[i6 >> 2] = i4 + 1;
  HEAP8[i4 >> 0] = -69;
  i4 = HEAP32[i6 >> 2] | 0;
  HEAP32[i6 >> 2] = i4 + 1;
  HEAP8[i4 >> 0] = -65;
  i9 = 4;
 }
 L4 : do if ((i9 | 0) == 4) {
  i4 = HEAP32[i3 >> 2] | 0;
  while (1) {
   if (i4 >>> 0 >= i2 >>> 0) {
    i10 = 0;
    break L4;
   }
   i8 = HEAP32[i4 >> 2] | 0;
   if (i8 >>> 0 > i7 >>> 0 | (i8 & -2048 | 0) == 55296) {
    i10 = 2;
    break L4;
   }
   do if (i8 >>> 0 < 128) {
    i5 = HEAP32[i6 >> 2] | 0;
    if ((i1 - i5 | 0) < 1) {
     i10 = 1;
     break L4;
    }
    HEAP32[i6 >> 2] = i5 + 1;
    HEAP8[i5 >> 0] = i8;
   } else {
    if (i8 >>> 0 < 2048) {
     i5 = HEAP32[i6 >> 2] | 0;
     if ((i1 - i5 | 0) < 2) {
      i10 = 1;
      break L4;
     }
     HEAP32[i6 >> 2] = i5 + 1;
     HEAP8[i5 >> 0] = i8 >>> 6 | 192;
     i5 = HEAP32[i6 >> 2] | 0;
     HEAP32[i6 >> 2] = i5 + 1;
     HEAP8[i5 >> 0] = i8 & 63 | 128;
     break;
    }
    i5 = HEAP32[i6 >> 2] | 0;
    i11 = i1 - i5 | 0;
    if (i8 >>> 0 < 65536) {
     if ((i11 | 0) < 3) {
      i10 = 1;
      break L4;
     }
     HEAP32[i6 >> 2] = i5 + 1;
     HEAP8[i5 >> 0] = i8 >>> 12 | 224;
     i12 = HEAP32[i6 >> 2] | 0;
     HEAP32[i6 >> 2] = i12 + 1;
     HEAP8[i12 >> 0] = i8 >>> 6 & 63 | 128;
     i12 = HEAP32[i6 >> 2] | 0;
     HEAP32[i6 >> 2] = i12 + 1;
     HEAP8[i12 >> 0] = i8 & 63 | 128;
     break;
    } else {
     if ((i11 | 0) < 4) {
      i10 = 1;
      break L4;
     }
     HEAP32[i6 >> 2] = i5 + 1;
     HEAP8[i5 >> 0] = i8 >>> 18 | 240;
     i5 = HEAP32[i6 >> 2] | 0;
     HEAP32[i6 >> 2] = i5 + 1;
     HEAP8[i5 >> 0] = i8 >>> 12 & 63 | 128;
     i5 = HEAP32[i6 >> 2] | 0;
     HEAP32[i6 >> 2] = i5 + 1;
     HEAP8[i5 >> 0] = i8 >>> 6 & 63 | 128;
     i5 = HEAP32[i6 >> 2] | 0;
     HEAP32[i6 >> 2] = i5 + 1;
     HEAP8[i5 >> 0] = i8 & 63 | 128;
     break;
    }
   } while (0);
   i8 = (HEAP32[i3 >> 2] | 0) + 4 | 0;
   HEAP32[i3 >> 2] = i8;
   i4 = i8;
  }
 } while (0);
 return i10 | 0;
}

function __ZN10Simulation14doConnectivityEP7CityMapi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i3 = HEAP32[i1 >> 2] | 0;
 if (!i3) {
  __ZN10Simulation18doSurfaceUtilitiesEP7CityMapi(i1, i2);
  return;
 }
 i4 = i1 + 4 | 0;
 i5 = ~(1 << i2);
 i6 = 0;
 i7 = i3;
 i3 = HEAP32[i4 >> 2] | 0;
 while (1) {
  if (!i3) {
   i8 = 0;
   i9 = i7;
  } else {
   i10 = 0;
   do {
    i11 = __ZN7CityMap7getTileEjj(i1, i6, i10) | 0;
    i12 = i11 + 72 | 0;
    HEAP32[i12 >> 2] = HEAP32[i12 >> 2] & i5;
    switch (HEAP32[i11 + 12 >> 2] | 0) {
    case 5:
    case 3:
    case 2:
     break;
    default:
     {
      i12 = i11 + 76 | 0;
      HEAP32[i12 >> 2] = HEAP32[i12 >> 2] & i5;
     }
    }
    i10 = i10 + 1 | 0;
    i13 = HEAP32[i4 >> 2] | 0;
   } while (i10 >>> 0 < i13 >>> 0);
   i8 = i13;
   i9 = HEAP32[i1 >> 2] | 0;
  }
  i6 = i6 + 1 | 0;
  if (i6 >>> 0 >= i9 >>> 0) break; else {
   i7 = i9;
   i3 = i8;
  }
 }
 if (!i9) {
  __ZN10Simulation18doSurfaceUtilitiesEP7CityMapi(i1, i2);
  return;
 }
 i8 = i1 + 4 | 0;
 i3 = 1 << i2;
 i7 = 0;
 i6 = HEAP32[i8 >> 2] | 0;
 i13 = i9;
 while (1) {
  i9 = i7;
  i7 = i7 + 1 | 0;
  if (!i6) {
   i14 = i13;
   i15 = 0;
  } else {
   i4 = i9 + -1 | 0;
   i5 = 0;
   do {
    i10 = __ZN7CityMap7getTileEjj(i1, i9, i5) | 0;
    i12 = __ZN7CityMap7getTileEjj(i1, i9, i5 + -1 | 0) | 0;
    i11 = i5;
    i5 = i5 + 1 | 0;
    i16 = __ZN7CityMap7getTileEjj(i1, i9, i5) | 0;
    i17 = __ZN7CityMap7getTileEjj(i1, i7, i11) | 0;
    i18 = __ZN7CityMap7getTileEjj(i1, i4, i11) | 0;
    if (!(HEAP32[i10 + 76 >> 2] & i3)) if ((HEAP32[i10 + 44 >> 2] | 0) == (i2 | 0)) {
     if (HEAP32[i12 + 76 >> 2] & i3 | 0) __ZN10Simulation7connectEP7CityMapiii(i1, i9, i11, i2);
     if (HEAP32[i16 + 76 >> 2] & i3 | 0) __ZN10Simulation7connectEP7CityMapiii(i1, i9, i11, i2);
     if (HEAP32[i17 + 76 >> 2] & i3 | 0) __ZN10Simulation7connectEP7CityMapiii(i1, i9, i11, i2);
     if (HEAP32[i18 + 76 >> 2] & i3 | 0) __ZN10Simulation7connectEP7CityMapiii(i1, i9, i11, i2);
    }
    i19 = HEAP32[i8 >> 2] | 0;
   } while (i5 >>> 0 < i19 >>> 0);
   i14 = HEAP32[i1 >> 2] | 0;
   i15 = i19;
  }
  if (i7 >>> 0 >= i14 >>> 0) break; else {
   i6 = i15;
   i13 = i14;
  }
 }
 __ZN10Simulation18doSurfaceUtilitiesEP7CityMapi(i1, i2);
 return;
}

function __ZL31stbtt_GetGlyphBitmapBoxSubpixelPK14stbtt_fontinfoiffffPiS2_S2_S2_(i1, i2, f3, f4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 f3 = Math_fround(f3);
 f4 = Math_fround(f4);
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i10 = i9;
 do if (!(HEAP32[i1 + 60 >> 2] | 0)) {
  i11 = __ZL20stbtt__GetGlyfOffsetPK14stbtt_fontinfoi(i1, i2) | 0;
  if ((i11 | 0) >= 0) {
   i12 = (HEAP32[i1 + 4 >> 2] | 0) + i11 | 0;
   i11 = i12 + 2 | 0;
   i13 = i12 + 4 | 0;
   i14 = i12 + 6 | 0;
   i15 = i12 + 8 | 0;
   i16 = ((HEAPU8[i15 >> 0] | 0) << 8 | (HEAPU8[i15 + 1 >> 0] | 0)) << 16 >> 16;
   i17 = ((HEAPU8[i14 >> 0] | 0) << 8 | (HEAPU8[i14 + 1 >> 0] | 0)) << 16 >> 16;
   i18 = ((HEAPU8[i13 >> 0] | 0) << 8 | (HEAPU8[i13 + 1 >> 0] | 0)) << 16 >> 16;
   i19 = ((HEAPU8[i11 >> 0] | 0) << 8 | (HEAPU8[i11 + 1 >> 0] | 0)) << 16 >> 16;
   break;
  }
  if (i5 | 0) HEAP32[i5 >> 2] = 0;
  if (i6 | 0) HEAP32[i6 >> 2] = 0;
  if (i7 | 0) HEAP32[i7 >> 2] = 0;
  if (!i8) {
   STACKTOP = i9;
   return;
  }
  HEAP32[i8 >> 2] = 0;
  STACKTOP = i9;
  return;
 } else {
  i11 = i10 + 4 | 0;
  i13 = i11 + 44 | 0;
  do {
   HEAP32[i11 >> 2] = 0;
   i11 = i11 + 4 | 0;
  } while ((i11 | 0) < (i13 | 0));
  HEAP32[i10 >> 2] = 1;
  i11 = (__ZL21stbtt__run_charstringPK14stbtt_fontinfoiP12stbtt__csctx(i1, i2, i10) | 0) != 0;
  i16 = i11 ? HEAP32[i10 + 36 >> 2] | 0 : 0;
  i17 = i11 ? HEAP32[i10 + 28 >> 2] | 0 : 0;
  i18 = i11 ? HEAP32[i10 + 32 >> 2] | 0 : 0;
  i19 = i11 ? HEAP32[i10 + 24 >> 2] | 0 : 0;
 } while (0);
 if (i5 | 0) {
  i10 = ~~Math_fround(Math_floor(Math_fround(Math_fround(Math_fround(i19 | 0) * f3) + Math_fround(0.0))));
  HEAP32[i5 >> 2] = i10;
 }
 if (i6 | 0) {
  i10 = ~~Math_fround(Math_floor(Math_fround(Math_fround(Math_fround(0 - i16 | 0) * f4) + Math_fround(0.0))));
  HEAP32[i6 >> 2] = i10;
 }
 if (i7 | 0) {
  i10 = ~~Math_fround(Math_ceil(Math_fround(Math_fround(Math_fround(i17 | 0) * f3) + Math_fround(0.0))));
  HEAP32[i7 >> 2] = i10;
 }
 if (!i8) {
  STACKTOP = i9;
  return;
 }
 i10 = ~~Math_fround(Math_ceil(Math_fround(Math_fround(Math_fround(0 - i18 | 0) * f4) + Math_fround(0.0))));
 HEAP32[i8 >> 2] = i10;
 STACKTOP = i9;
 return;
}

function __ZN10ImDrawList7AddTextEPK6ImFontfRK6ImVec2jPKcS7_fPK6ImVec4(i1, i2, f3, i4, i5, i6, i7, f8, i9) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 f3 = Math_fround(f3);
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 f8 = Math_fround(f8);
 i9 = i9 | 0;
 var i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, f16 = f0, f17 = f0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i11 = i10 + 24 | 0;
 i12 = i10 + 8 | 0;
 i13 = i10;
 if (i5 >>> 0 < 16777216) {
  STACKTOP = i10;
  return;
 }
 if (!i7) i14 = i6 + (_strlen(i6) | 0) | 0; else i14 = i7;
 if ((i14 | 0) == (i6 | 0)) {
  STACKTOP = i10;
  return;
 }
 if (!i2) i15 = HEAP32[(HEAP32[i1 + 40 >> 2] | 0) + 8 >> 2] | 0; else i15 = i2;
 if (f3 == Math_fround(0.0)) f16 = Math_fround(HEAPF32[(HEAP32[i1 + 40 >> 2] | 0) + 12 >> 2]); else f16 = f3;
 i2 = HEAP32[i1 + 72 >> 2] | 0;
 if ((i2 | 0) <= 0) ___assert_fail(38278, 56850, 1245, 38287);
 if ((HEAP32[(HEAP32[i15 + 68 >> 2] | 0) + 4 >> 2] | 0) != (HEAP32[(HEAP32[i1 + 80 >> 2] | 0) + (i2 + -1 << 2) >> 2] | 0)) ___assert_fail(38366, 38201, 1138, 38420);
 i2 = HEAP32[i1 + 60 >> 2] | 0;
 if ((i2 | 0) <= 0) ___assert_fail(38278, 56850, 1245, 38287);
 i7 = (HEAP32[i1 + 68 >> 2] | 0) + (i2 + -1 << 4) | 0;
 HEAP32[i12 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i12 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
 HEAP32[i12 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
 HEAP32[i12 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
 i7 = (i9 | 0) != 0;
 if (i7) {
  f3 = Math_fround(HEAPF32[i12 >> 2]);
  f17 = Math_fround(HEAPF32[i9 >> 2]);
  HEAPF32[i12 >> 2] = f3 >= f17 ? f3 : f17;
  i2 = i12 + 4 | 0;
  f17 = Math_fround(HEAPF32[i2 >> 2]);
  f3 = Math_fround(HEAPF32[i9 + 4 >> 2]);
  HEAPF32[i2 >> 2] = f17 >= f3 ? f17 : f3;
  i2 = i12 + 8 | 0;
  f3 = Math_fround(HEAPF32[i2 >> 2]);
  f17 = Math_fround(HEAPF32[i9 + 8 >> 2]);
  HEAPF32[i2 >> 2] = f3 < f17 ? f3 : f17;
  i2 = i12 + 12 | 0;
  f17 = Math_fround(HEAPF32[i2 >> 2]);
  f3 = Math_fround(HEAPF32[i9 + 12 >> 2]);
  HEAPF32[i2 >> 2] = f17 < f3 ? f17 : f3;
 }
 i2 = i4;
 i4 = HEAP32[i2 + 4 >> 2] | 0;
 i9 = i13;
 HEAP32[i9 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 + 4 >> 2] = i4;
 HEAP32[i11 >> 2] = HEAP32[i13 >> 2];
 HEAP32[i11 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
 __ZNK6ImFont10RenderTextEP10ImDrawListf6ImVec2jRK6ImVec4PKcS7_fb(i15, i1, f16, i11, i5, i12, i6, i14, f8, i7);
 STACKTOP = i10;
 return;
}

function __ZN5ImGui8PushFontEP6ImFont(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, f7 = f0, f8 = f0, f9 = f0, f10 = f0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i2 = HEAP32[1460598] | 0;
 if (!i1) {
  i3 = HEAP32[i2 + 156 >> 2] | 0;
  if (!i3) {
   i4 = HEAP32[i2 + 144 >> 2] | 0;
   if ((HEAP32[i4 + 48 >> 2] | 0) <= 0) ___assert_fail(56841, 56850, 1235, 56909);
   i5 = HEAP32[HEAP32[i4 + 56 >> 2] >> 2] | 0;
   if (!i5) ___assert_fail(32700, 31803, 6868, 32725); else i6 = i5;
  } else i6 = i3;
 } else i6 = i1;
 i1 = i6;
 i3 = i6 + 68 | 0;
 i5 = HEAP32[i3 >> 2] | 0;
 if (!i5) ___assert_fail(32700, 31803, 6868, 32725);
 f7 = Math_fround(HEAPF32[i6 + 4 >> 2]);
 if (!(f7 > Math_fround(0.0))) ___assert_fail(32740, 31803, 6869, 32725);
 HEAP32[i2 + 6180 >> 2] = i6;
 f8 = Math_fround(HEAPF32[i2 + 148 >> 2]);
 f9 = Math_fround(f7 * Math_fround(f8 * Math_fround(HEAPF32[i6 >> 2])));
 HEAPF32[i2 + 6188 >> 2] = f9;
 i6 = i2 + 6392 | 0;
 i4 = HEAP32[i6 >> 2] | 0;
 if (!i4) f10 = Math_fround(0.0); else f10 = Math_fround(f9 * Math_fround(HEAPF32[i4 + 624 >> 2]));
 HEAPF32[i2 + 6184 >> 2] = f10;
 i4 = i5 + 40 | 0;
 i5 = HEAP32[i4 + 4 >> 2] | 0;
 i11 = i2 + 6192 | 0;
 HEAP32[i11 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i11 + 4 >> 2] = i5;
 HEAP32[i2 + 6200 >> 2] = i1;
 HEAPF32[i2 + 6204 >> 2] = f10;
 i5 = i2 + 6500 | 0;
 i11 = HEAP32[i5 >> 2] | 0;
 i4 = i2 + 6504 | 0;
 if ((i11 | 0) == (HEAP32[i4 >> 2] | 0)) {
  i12 = i11 + 1 | 0;
  if (!i11) i13 = 8; else i13 = ((i11 | 0) / 2 | 0) + i11 | 0;
  i14 = (i13 | 0) > (i12 | 0) ? i13 : i12;
  if ((i11 | 0) < (i14 | 0)) {
   HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
   i12 = __ZL13MallocWrapperjPv(i14 << 2, 0) | 0;
   i13 = i2 + 6508 | 0;
   i15 = HEAP32[i13 >> 2] | 0;
   if (!i15) i16 = i13; else {
    _memcpy(i12 | 0, i15 | 0, HEAP32[i5 >> 2] << 2 | 0) | 0;
    i15 = HEAP32[i13 >> 2] | 0;
    if (i15 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
    __ZL11FreeWrapperPvS_(i15, 0);
    i16 = i13;
   }
   HEAP32[i16 >> 2] = i12;
   HEAP32[i4 >> 2] = i14;
   i17 = HEAP32[i5 >> 2] | 0;
  } else i17 = i11;
 } else i17 = i11;
 HEAP32[(HEAP32[i2 + 6508 >> 2] | 0) + (i17 << 2) >> 2] = i1;
 HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 __ZN10ImDrawList13PushTextureIDEPv(HEAP32[(HEAP32[i6 >> 2] | 0) + 632 >> 2] | 0, HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] | 0);
 return;
}

function __ZN5ImGui10BeginGroupEv() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, f13 = f0, f14 = f0;
 i1 = HEAP32[1460598] | 0;
 i2 = HEAP32[i1 + 6392 >> 2] | 0;
 HEAP8[i2 + 120 >> 0] = 1;
 i3 = i2 + 196 | 0;
 i4 = i2 + 400 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 i6 = i5 + 1 | 0;
 i7 = i2 + 404 | 0;
 i8 = HEAP32[i7 >> 2] | 0;
 if ((i8 | 0) <= (i5 | 0)) {
  if (!i8) i9 = 8; else i9 = ((i8 | 0) / 2 | 0) + i8 | 0;
  i10 = (i9 | 0) > (i6 | 0) ? i9 : i6;
  if ((i8 | 0) < (i10 | 0)) {
   HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
   i8 = __ZL13MallocWrapperjPv(i10 * 40 | 0, 0) | 0;
   i9 = i2 + 408 | 0;
   i11 = HEAP32[i9 >> 2] | 0;
   if (!i11) i12 = i9; else {
    _memcpy(i8 | 0, i11 | 0, (HEAP32[i4 >> 2] | 0) * 40 | 0) | 0;
    i11 = HEAP32[i9 >> 2] | 0;
    if (i11 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
    __ZL11FreeWrapperPvS_(i11, 0);
    i12 = i9;
   }
   HEAP32[i12 >> 2] = i8;
   HEAP32[i7 >> 2] = i10;
  }
 }
 HEAP32[i4 >> 2] = i6;
 if ((i5 | 0) > -1) {
  i6 = HEAP32[i2 + 408 >> 2] | 0;
  i4 = i3;
  i10 = HEAP32[i4 + 4 >> 2] | 0;
  i7 = i6 + (i5 * 40 | 0) | 0;
  i5 = i7 | 0;
  HEAP32[i5 >> 2] = HEAP32[i4 >> 2];
  HEAP32[i5 + 4 >> 2] = i10;
  i10 = i2 + 220 | 0;
  i5 = i10;
  i4 = HEAP32[i5 + 4 >> 2] | 0;
  i6 = i7 + 8 | 0;
  HEAP32[i6 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i6 + 4 >> 2] = i4;
  i4 = i2 + 436 | 0;
  HEAP32[i7 + 16 >> 2] = HEAP32[i4 >> 2];
  i6 = i2 + 440 | 0;
  HEAP32[i7 + 20 >> 2] = HEAP32[i6 >> 2];
  i5 = i2 + 228 | 0;
  HEAP32[i7 + 24 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i7 + 28 >> 2] = HEAP32[i2 + 232 >> 2];
  i8 = i2 + 244 | 0;
  HEAP32[i7 + 32 >> 2] = HEAP32[i8 >> 2];
  HEAP8[i7 + 36 >> 0] = HEAP8[i1 + 6432 >> 0] | 0;
  HEAP8[i7 + 37 >> 0] = HEAP8[i1 + 6436 >> 0] | 0;
  HEAP8[i7 + 38 >> 0] = 1;
  f13 = Math_fround(HEAPF32[i3 >> 2]);
  f14 = Math_fround(f13 - Math_fround(HEAPF32[i2 + 12 >> 2]));
  f13 = Math_fround(f14 - Math_fround(HEAPF32[i2 + 444 >> 2]));
  HEAPF32[i6 >> 2] = f13;
  HEAPF32[i4 >> 2] = f13;
  i4 = i3;
  i3 = HEAP32[i4 + 4 >> 2] | 0;
  i6 = i10;
  HEAP32[i6 >> 2] = HEAP32[i4 >> 2];
  HEAP32[i6 + 4 >> 2] = i3;
  HEAPF32[i5 >> 2] = Math_fround(0.0);
  f13 = Math_fround(Math_fround(HEAPF32[i2 + 200 >> 2]) + Math_fround(-9999.0));
  HEAPF32[i8 >> 2] = f13;
  return;
 } else ___assert_fail(38278, 56850, 1245, 38287);
}

function _png_handle_tRNS(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(272);
 i5 = i4 + 8 | 0;
 i6 = i4;
 i7 = HEAP32[i1 + 208 >> 2] | 0;
 if (!(i7 & 1)) _png_chunk_error(i1, 60665);
 if (i7 & 4 | 0) {
  _png_crc_finish(i1, i3) | 0;
  _png_chunk_benign_error(i1, 61181);
  STACKTOP = i4;
  return;
 }
 if (i2 | 0) if (HEAP32[i2 + 8 >> 2] & 16 | 0) {
  _png_crc_finish(i1, i3) | 0;
  _png_chunk_benign_error(i1, 63151);
  STACKTOP = i4;
  return;
 }
 L13 : do switch (HEAP8[i1 + 435 >> 0] | 0) {
 case 0:
  {
   if ((i3 | 0) == 2) {
    _png_read_data(i1, i6, 2);
    _png_calculate_crc(i1, i6, 2);
    i8 = i1 + 428 | 0;
    HEAP16[i8 >> 1] = 1;
    HEAP16[i1 + 540 >> 1] = HEAPU8[i6 >> 0] << 8 | HEAPU8[i6 + 1 >> 0];
    i9 = i8;
    break L13;
   }
   _png_crc_finish(i1, i3) | 0;
   _png_chunk_benign_error(i1, 61194);
   STACKTOP = i4;
   return;
  }
 case 2:
  {
   if ((i3 | 0) == 6) {
    _png_read_data(i1, i6, 6);
    _png_calculate_crc(i1, i6, 6);
    i8 = i1 + 428 | 0;
    HEAP16[i8 >> 1] = 1;
    HEAP16[i1 + 534 >> 1] = HEAPU8[i6 >> 0] << 8 | HEAPU8[i6 + 1 >> 0];
    HEAP16[i1 + 536 >> 1] = HEAPU8[i6 + 2 >> 0] << 8 | HEAPU8[i6 + 3 >> 0];
    HEAP16[i1 + 538 >> 1] = HEAPU8[i6 + 4 >> 0] << 8 | HEAPU8[i6 + 5 >> 0];
    i9 = i8;
    break L13;
   }
   _png_crc_finish(i1, i3) | 0;
   _png_chunk_benign_error(i1, 61194);
   STACKTOP = i4;
   return;
  }
 case 3:
  {
   if (!(i7 & 2)) {
    _png_crc_finish(i1, i3) | 0;
    _png_chunk_benign_error(i1, 61181);
    STACKTOP = i4;
    return;
   }
   if (!(i3 >>> 0 > 256 ? 1 : (i3 + -1 | 0) >>> 0 >= (HEAPU16[i1 + 420 >> 1] | 0) >>> 0)) {
    _png_read_data(i1, i5, i3);
    _png_calculate_crc(i1, i5, i3);
    i8 = i1 + 428 | 0;
    HEAP16[i8 >> 1] = i3;
    i9 = i8;
    break L13;
   }
   _png_crc_finish(i1, i3) | 0;
   _png_chunk_benign_error(i1, 61194);
   STACKTOP = i4;
   return;
  }
 default:
  {
   _png_crc_finish(i1, i3) | 0;
   _png_chunk_benign_error(i1, 61202);
   STACKTOP = i4;
   return;
  }
 } while (0);
 if (!(_png_crc_finish(i1, 0) | 0)) {
  _png_set_tRNS(i1, i2, i5, HEAPU16[i9 >> 1] | 0, i1 + 532 | 0);
  STACKTOP = i4;
  return;
 } else {
  HEAP16[i9 >> 1] = 0;
  STACKTOP = i4;
  return;
 }
}

function __ZN7CityMap18availableLoadFilesERNSt3__26vectorINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS5_IS7_EEEE(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 528 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(528);
 i4 = i3 + 16 | 0;
 i5 = i3 + 12 | 0;
 i6 = i3;
 i7 = _scandir(26241, i5, 0, 19) | 0;
 if ((i7 | 0) <= 0) {
  STACKTOP = i3;
  return;
 }
 i8 = i6 + 11 | 0;
 i9 = i1 + 4 | 0;
 i10 = i1 + 8 | 0;
 i11 = i6 + 8 | 0;
 i12 = i6 + 4 | 0;
 i13 = 0;
 while (1) {
  i14 = (HEAP32[(HEAP32[i5 >> 2] | 0) + (i13 << 2) >> 2] | 0) + 11 | 0;
  HEAP8[i4 >> 0] = HEAP8[26251] | 0;
  HEAP8[i4 + 1 >> 0] = HEAP8[26252] | 0;
  HEAP8[i4 + 2 >> 0] = HEAP8[26253] | 0;
  i15 = i4 + (_strlen(i4) | 0) | 0;
  HEAP8[i15 >> 0] = 47;
  HEAP8[i15 + 1 >> 0] = 0;
  _strcat(i4, i14) | 0;
  HEAP32[i6 >> 2] = 0;
  HEAP32[i6 + 4 >> 2] = 0;
  HEAP32[i6 + 8 >> 2] = 0;
  i15 = _strlen(i14) | 0;
  if (i15 >>> 0 > 4294967279) {
   i2 = 4;
   break;
  }
  if (i15 >>> 0 < 11) {
   HEAP8[i8 >> 0] = i15;
   if (!i15) i16 = i6; else {
    i17 = i6;
    i2 = 8;
   }
  } else {
   i18 = i15 + 16 & -16;
   i19 = __Znwj(i18) | 0;
   HEAP32[i6 >> 2] = i19;
   HEAP32[i11 >> 2] = i18 | -2147483648;
   HEAP32[i12 >> 2] = i15;
   i17 = i19;
   i2 = 8;
  }
  if ((i2 | 0) == 8) {
   i2 = 0;
   _memcpy(i17 | 0, i14 | 0, i15 | 0) | 0;
   i16 = i17;
  }
  HEAP8[i16 + i15 >> 0] = 0;
  i15 = HEAP32[i9 >> 2] | 0;
  if (i15 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
   HEAP32[i15 >> 2] = HEAP32[i6 >> 2];
   HEAP32[i15 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
   HEAP32[i15 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
   HEAP32[i6 >> 2] = 0;
   HEAP32[i6 + 4 >> 2] = 0;
   HEAP32[i6 + 8 >> 2] = 0;
   HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 12;
  } else {
   __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_(i1, i6);
   if ((HEAP8[i8 >> 0] | 0) < 0) __ZdlPv(HEAP32[i6 >> 2] | 0);
  }
  i13 = i13 + 1 | 0;
  if ((i13 | 0) >= (i7 | 0)) {
   i2 = 14;
   break;
  }
 }
 if ((i2 | 0) == 4) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i6); else if ((i2 | 0) == 14) {
  STACKTOP = i3;
  return;
 }
}

function _trinkle(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0;
 i8 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 i10 = i9 + 232 | 0;
 i11 = i9;
 i12 = HEAP32[i4 >> 2] | 0;
 HEAP32[i10 >> 2] = i12;
 i13 = HEAP32[i4 + 4 >> 2] | 0;
 i4 = i10 + 4 | 0;
 HEAP32[i4 >> 2] = i13;
 HEAP32[i11 >> 2] = i1;
 L1 : do if ((i12 | 0) != 1 | (i13 | 0) != 0) {
  i14 = 0 - i2 | 0;
  i15 = i1 + (0 - (HEAP32[i7 + (i5 << 2) >> 2] | 0)) | 0;
  if ((FUNCTION_TABLE_iii[i3 & 31](i15, i1) | 0) < 1) {
   i16 = i1;
   i17 = 1;
   i18 = i5;
   i19 = i6;
   i8 = 9;
  } else {
   i20 = 1;
   i21 = i5;
   i22 = (i6 | 0) == 0;
   i23 = i1;
   i24 = i15;
   while (1) {
    if (i22 & (i21 | 0) > 1) {
     i15 = i23 + i14 | 0;
     i25 = HEAP32[i7 + (i21 + -2 << 2) >> 2] | 0;
     if ((FUNCTION_TABLE_iii[i3 & 31](i15, i24) | 0) > -1) {
      i26 = i20;
      i27 = i21;
      i28 = i23;
      i8 = 10;
      break L1;
     }
     if ((FUNCTION_TABLE_iii[i3 & 31](i15 + (0 - i25) | 0, i24) | 0) > -1) {
      i26 = i20;
      i27 = i21;
      i28 = i23;
      i8 = 10;
      break L1;
     }
    }
    i25 = i20 + 1 | 0;
    HEAP32[i11 + (i20 << 2) >> 2] = i24;
    i15 = _pntz(i10) | 0;
    _shr(i10, i15);
    i29 = i15 + i21 | 0;
    if (!((HEAP32[i10 >> 2] | 0) != 1 | (HEAP32[i4 >> 2] | 0) != 0)) {
     i26 = i25;
     i27 = i29;
     i28 = i24;
     i8 = 10;
     break L1;
    }
    i15 = i24 + (0 - (HEAP32[i7 + (i29 << 2) >> 2] | 0)) | 0;
    if ((FUNCTION_TABLE_iii[i3 & 31](i15, HEAP32[i11 >> 2] | 0) | 0) < 1) {
     i16 = i24;
     i17 = i25;
     i18 = i29;
     i19 = 0;
     i8 = 9;
     break;
    } else {
     i30 = i24;
     i20 = i25;
     i21 = i29;
     i22 = 1;
     i24 = i15;
     i23 = i30;
    }
   }
  }
 } else {
  i16 = i1;
  i17 = 1;
  i18 = i5;
  i19 = i6;
  i8 = 9;
 } while (0);
 if ((i8 | 0) == 9) if (!i19) {
  i26 = i17;
  i27 = i18;
  i28 = i16;
  i8 = 10;
 }
 if ((i8 | 0) == 10) {
  _cycle(i2, i11, i26);
  _sift(i28, i2, i3, i27, i7);
 }
 STACKTOP = i9;
 return;
}

function __Z37ImGui_ImplOpenGL3_CreateDeviceObjectsv() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 1056 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1056);
 i2 = i1 + 24 | 0;
 i3 = i1 + 20 | 0;
 i4 = i1 + 16 | 0;
 i5 = i1 + 12 | 0;
 i6 = i1 + 8 | 0;
 i7 = i1 + 4 | 0;
 i8 = i1;
 i9 = i1 + 32 | 0;
 _glGetIntegerv(32873, i2 | 0);
 _glGetIntegerv(34964, i3 | 0);
 _glGetIntegerv(34229, i4 | 0);
 HEAP32[i5 >> 2] = 56370;
 HEAP32[i6 >> 2] = 56629;
 i10 = _glCreateProgram() | 0;
 HEAP32[1460871] = i10;
 i10 = _glCreateShader(35633) | 0;
 HEAP32[1460872] = i10;
 i10 = _glCreateShader(35632) | 0;
 HEAP32[1460873] = i10;
 _glShaderSource(HEAP32[1460872] | 0, 1, i5 | 0, 0);
 _glShaderSource(HEAP32[1460873] | 0, 1, i6 | 0, 0);
 _glCompileShader(HEAP32[1460872] | 0);
 _glCompileShader(HEAP32[1460873] | 0);
 HEAP32[i8 >> 2] = 0;
 _glGetShaderiv(HEAP32[1460872] | 0, 35713, i7 | 0);
 if (!(HEAP32[i7 >> 2] | 0)) {
  _glGetShaderiv(HEAP32[1460872] | 0, 35716, i8 | 0);
  if ((HEAP32[i8 >> 2] | 0) > 0) {
   _memset(i9 | 0, 0, 1024) | 0;
   _glGetShaderInfoLog(HEAP32[1460872] | 0, 1024, 0, i9 | 0);
  }
 }
 HEAP32[i8 >> 2] = 0;
 _glGetShaderiv(HEAP32[1460873] | 0, 35713, i7 | 0);
 if (!(HEAP32[i7 >> 2] | 0)) {
  _glGetShaderiv(HEAP32[1460873] | 0, 35716, i8 | 0);
  if ((HEAP32[i8 >> 2] | 0) > 0) {
   _memset(i9 | 0, 0, 1024) | 0;
   _glGetShaderInfoLog(HEAP32[1460873] | 0, 1024, 0, i9 | 0);
  }
 }
 _glAttachShader(HEAP32[1460871] | 0, HEAP32[1460872] | 0);
 _glAttachShader(HEAP32[1460871] | 0, HEAP32[1460873] | 0);
 _glLinkProgram(HEAP32[1460871] | 0);
 i9 = _glGetUniformLocation(HEAP32[1460871] | 0, 56807) | 0;
 HEAP32[1460875] = i9;
 i9 = _glGetUniformLocation(HEAP32[1460871] | 0, 56815) | 0;
 HEAP32[1460876] = i9;
 i9 = _glGetAttribLocation(HEAP32[1460871] | 0, 56823) | 0;
 HEAP32[1460877] = i9;
 i9 = _glGetAttribLocation(HEAP32[1460871] | 0, 56832) | 0;
 HEAP32[1460878] = i9;
 i9 = _glGetAttribLocation(HEAP32[1460871] | 0, 56835) | 0;
 HEAP32[1460879] = i9;
 _glGenBuffers(1, 5843476);
 _glGenBuffers(1, 5843480);
 __Z36ImGui_ImplOpenGL3_CreateFontsTexturev() | 0;
 _glBindTexture(3553, HEAP32[i2 >> 2] | 0);
 _glBindBuffer(34962, HEAP32[i3 >> 2] | 0);
 _glBindVertexArray(HEAP32[i4 >> 2] | 0);
 STACKTOP = i1;
 return 1;
}

function _png_read_finish_row(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i2 = 0;
 i3 = i1 + 372 | 0;
 i4 = (HEAP32[i3 >> 2] | 0) + 1 | 0;
 HEAP32[i3 >> 2] = i4;
 i5 = i1 + 356 | 0;
 if (i4 >>> 0 < (HEAP32[i5 >> 2] | 0) >>> 0) return;
 L4 : do if (HEAP8[i1 + 432 >> 0] | 0) {
  HEAP32[i3 >> 2] = 0;
  _memset(HEAP32[i1 + 380 >> 2] | 0, 0, (HEAP32[i1 + 364 >> 2] | 0) + 1 | 0) | 0;
  i4 = i1 + 433 | 0;
  i6 = (HEAP8[i4 >> 0] | 0) + 1 << 24 >> 24;
  HEAP8[i4 >> 0] = i6;
  i7 = i6 & 255;
  if ((i6 & 255) <= 6) {
   i8 = (HEAP32[i1 + 348 >> 2] | 0) + -1 | 0;
   i9 = i1 + 368 | 0;
   do if (!(HEAP32[i1 + 216 >> 2] & 2)) {
    i10 = (HEAP32[i1 + 352 >> 2] | 0) + -1 | 0;
    i11 = i7;
    i12 = i6;
    while (1) {
     i13 = HEAPU8[64438 + i11 >> 0] | 0;
     i14 = i8 + i13 - (HEAPU8[64445 + i11 >> 0] | 0) | 0;
     i15 = i12 & 255;
     i16 = HEAPU8[64691 + i15 >> 0] | 0;
     i17 = i10 + i16 - (HEAPU8[64698 + i15 >> 0] | 0) | 0;
     if (!(i17 >>> 0 < i16 >>> 0 | i14 >>> 0 < i13 >>> 0)) {
      i2 = 9;
      break;
     }
     i15 = i12 + 1 << 24 >> 24;
     HEAP8[i4 >> 0] = i15;
     if ((i15 & 255) > 6) {
      i2 = 11;
      break;
     } else {
      i11 = i15 & 255;
      i12 = i15;
     }
    }
    if ((i2 | 0) == 9) {
     HEAP32[i5 >> 2] = (i17 >>> 0) / (i16 >>> 0) | 0;
     i18 = (i14 >>> 0) / (i13 >>> 0) | 0;
     break;
    } else if ((i2 | 0) == 11) {
     HEAP32[i5 >> 2] = (i17 >>> 0) / (i16 >>> 0) | 0;
     HEAP32[i9 >> 2] = (i14 >>> 0) / (i13 >>> 0) | 0;
     break L4;
    }
   } else {
    i12 = HEAPU8[64438 + i7 >> 0] | 0;
    i18 = ((i8 + i12 - (HEAPU8[64445 + i7 >> 0] | 0) | 0) >>> 0) / (i12 >>> 0) | 0;
   } while (0);
   HEAP32[i9 >> 2] = i18;
   return;
  }
 } while (0);
 i18 = i1 + 212 | 0;
 if (!(HEAP32[i18 >> 2] & 8)) {
  _png_read_IDAT_data(i1, 0, 0);
  HEAP32[i1 + 236 >> 2] = 0;
  i13 = HEAP32[i18 >> 2] | 0;
  i14 = i1 + 208 | 0;
  if (!(i13 & 8)) {
   HEAP32[i14 >> 2] = HEAP32[i14 >> 2] | 8;
   HEAP32[i18 >> 2] = i13 | 8;
  }
 }
 i13 = i1 + 220 | 0;
 if ((HEAP32[i13 >> 2] | 0) != 1229209940) return;
 HEAP32[i1 + 224 >> 2] = 0;
 HEAP32[i1 + 228 >> 2] = 0;
 HEAP32[i13 >> 2] = 0;
 _png_crc_finish(i1, HEAP32[i1 + 408 >> 2] | 0) | 0;
 return;
}

function __ZN5ImGui3EndEv() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, f8 = f0, f9 = f0;
 i1 = HEAP32[1460598] | 0;
 i2 = HEAP32[i1 + 6392 >> 2] | 0;
 if (!(HEAP32[i2 + 448 >> 2] | 0)) i3 = i2; else {
  __ZN5ImGui10EndColumnsEv();
  i3 = HEAP32[(HEAP32[1460598] | 0) + 6392 >> 2] | 0;
 }
 HEAP8[i3 + 120 >> 0] = 1;
 i4 = i3 + 632 | 0;
 __ZN10ImDrawList11PopClipRectEv(HEAP32[i4 >> 2] | 0);
 i5 = HEAP32[i4 >> 2] | 0;
 i4 = HEAP32[i5 + 60 >> 2] | 0;
 if ((i4 | 0) <= 0) ___assert_fail(38278, 56850, 1245, 38287);
 i6 = HEAP32[i5 + 68 >> 2] | 0;
 i5 = i4 + -1 | 0;
 i4 = i6 + (i5 << 4) | 0;
 i5 = HEAP32[i4 + 4 >> 2] | 0;
 i6 = HEAP32[i4 + 8 >> 2] | 0;
 i7 = HEAP32[i4 + 12 >> 2] | 0;
 HEAP32[i3 + 464 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i3 + 468 >> 2] = i5;
 HEAP32[i3 + 472 >> 2] = i6;
 HEAP32[i3 + 476 >> 2] = i7;
 i7 = i2 + 8 | 0;
 if (!(HEAP32[i7 >> 2] & 16777216)) __ZN5ImGui9LogFinishEv();
 i3 = i1 + 6364 | 0;
 i6 = HEAP32[i3 >> 2] | 0;
 if ((i6 | 0) <= 0) ___assert_fail(38278, 56850, 1268, 31920);
 i5 = i6 + -1 | 0;
 HEAP32[i3 >> 2] = i5;
 do if (HEAP32[i7 >> 2] & 67108864 | 0) {
  i3 = i1 + 6524 | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  if ((i4 | 0) > 0) {
   HEAP32[i3 >> 2] = i4 + -1;
   break;
  } else ___assert_fail(38278, 56850, 1268, 31920);
 } while (0);
 i7 = HEAP32[1460598] | 0;
 if ((HEAP32[i2 + 412 >> 2] | 0) != (HEAP32[i2 + 452 >> 2] | 0)) ___assert_fail(32929, 31803, 5550, 32998);
 if ((HEAP32[i2 + 416 >> 2] | 0) != (HEAP32[i2 + 400 >> 2] | 0)) ___assert_fail(33014, 31803, 5551, 32998);
 if ((HEAP32[i2 + 420 >> 2] | 0) != (HEAP32[i7 + 6524 >> 2] | 0)) ___assert_fail(33070, 31803, 5552, 32998);
 if ((HEAP32[i2 + 424 >> 2] | 0) < (HEAP32[i7 + 6476 >> 2] | 0)) ___assert_fail(33146, 31803, 5554, 32998);
 if ((HEAP32[i2 + 428 >> 2] | 0) < (HEAP32[i7 + 6488 >> 2] | 0)) ___assert_fail(33211, 31803, 5555, 32998);
 if ((HEAP32[i2 + 432 >> 2] | 0) < (HEAP32[i7 + 6500 >> 2] | 0)) ___assert_fail(33272, 31803, 5556, 32998);
 if (!i5) {
  HEAP32[i7 + 6392 >> 2] = 0;
  return;
 }
 i5 = HEAP32[(HEAP32[i1 + 6372 >> 2] | 0) + (i6 + -2 << 2) >> 2] | 0;
 HEAP32[i7 + 6392 >> 2] = i5;
 if (!i5) return;
 f8 = Math_fround(HEAPF32[i7 + 6188 >> 2]);
 f9 = Math_fround(f8 * Math_fround(HEAPF32[i5 + 624 >> 2]));
 HEAPF32[i7 + 6204 >> 2] = f9;
 HEAPF32[i7 + 6184 >> 2] = f9;
 return;
}

function __Z31ImFontAtlasBuildPackCustomRectsP11ImFontAtlasPv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i3 = 0;
 i4 = i1 + 60 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 if ((i5 | 0) <= 0) ___assert_fail(55453, 38201, 1942, 55474);
 i6 = (i5 | 0) > 8 ? i5 : 8;
 if ((i6 | 0) > 0) {
  i7 = __ZN5ImGui8MemAllocEj(i6 << 4) | 0;
  i8 = i7;
  i9 = HEAP32[i4 >> 2] | 0;
  i10 = i7;
 } else {
  i8 = 0;
  i9 = i5;
  i10 = 0;
 }
 _memset(i10 | 0, 0, i9 << 4 | 0) | 0;
 i9 = HEAP32[i4 >> 2] | 0;
 L7 : do if ((i9 | 0) > 0) {
  i7 = i1 + 68 | 0;
  i6 = 0;
  while (1) {
   if ((i5 | 0) <= (i6 | 0)) {
    i3 = 8;
    break;
   }
   i11 = HEAP32[i7 >> 2] | 0;
   HEAP16[i8 + (i6 << 4) + 4 >> 1] = HEAP16[i11 + (i6 * 28 | 0) + 4 >> 1] | 0;
   if ((i9 | 0) <= (i6 | 0)) {
    i3 = 10;
    break;
   }
   HEAP16[i8 + (i6 << 4) + 6 >> 1] = HEAP16[i11 + (i6 * 28 | 0) + 6 >> 1] | 0;
   i6 = i6 + 1 | 0;
   if ((i6 | 0) >= (i9 | 0)) break L7;
  }
  if ((i3 | 0) == 8) ___assert_fail(56841, 56850, 1235, 56909); else if ((i3 | 0) == 10) ___assert_fail(56841, 56850, 1235, 56909);
 } while (0);
 __ZL16stbrp_pack_rectsP13stbrp_contextP10stbrp_recti(i2, i8, i5);
 i2 = i1 + 68 | 0;
 i9 = i1 + 28 | 0;
 i1 = 0;
 while (1) {
  if (HEAP32[i8 + (i1 << 4) + 12 >> 2] | 0) {
   if ((HEAP32[i4 >> 2] | 0) <= (i1 | 0)) {
    i3 = 18;
    break;
   }
   i6 = HEAP32[i2 >> 2] | 0;
   i7 = i8 + (i1 << 4) | 0;
   i11 = i6 + (i1 * 28 | 0) | 0;
   HEAP16[i11 + 8 >> 1] = HEAP16[i7 + 8 >> 1] | 0;
   i12 = HEAP16[i7 + 10 >> 1] | 0;
   HEAP16[i11 + 10 >> 1] = i12;
   if ((HEAP16[i8 + (i1 << 4) + 4 >> 1] | 0) != (HEAP16[i6 + (i1 * 28 | 0) + 4 >> 1] | 0)) {
    i3 = 21;
    break;
   }
   i11 = HEAP16[i8 + (i1 << 4) + 6 >> 1] | 0;
   if (i11 << 16 >> 16 != (HEAP16[i6 + (i1 * 28 | 0) + 6 >> 1] | 0)) {
    i3 = 21;
    break;
   }
   i6 = HEAP32[i9 >> 2] | 0;
   i7 = (i12 & 65535) + (i11 & 65535) | 0;
   HEAP32[i9 >> 2] = (i6 | 0) >= (i7 | 0) ? i6 : i7;
  }
  i1 = i1 + 1 | 0;
  if ((i1 | 0) >= (i5 | 0)) {
   i3 = 13;
   break;
  }
 }
 if ((i3 | 0) == 13) {
  if (!i8) return;
  __ZN5ImGui7MemFreeEPv(i10);
  return;
 } else if ((i3 | 0) == 18) ___assert_fail(56841, 56850, 1235, 56909); else if ((i3 | 0) == 21) ___assert_fail(55506, 38201, 1958, 55474);
}

function _png_set_alpha_mode_fixed(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i4 = 0;
 if (!i1) return;
 i5 = i1 + 212 | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 if (i6 & 64 | 0) {
  _png_app_error(i1, 58866);
  return;
 }
 HEAP32[i5 >> 2] = i6 | 16384;
 L8 : do if ((i3 | 0) < -2) if ((i3 | 0) < -5e4) switch (i3 | 0) {
 case -1e5:
  {
   i4 = 5;
   break L8;
   break;
  }
 default:
  {
   i4 = 6;
   break L8;
  }
 } else switch (i3 | 0) {
 case -5e4:
  {
   i7 = 151724;
   break L8;
   break;
  }
 default:
  {
   i4 = 6;
   break L8;
  }
 } else switch (i3 | 0) {
 case -1:
  {
   i4 = 5;
   break;
  }
 case -2:
  {
   i7 = 151724;
   break;
  }
 default:
  i4 = 6;
 } while (0);
 if ((i4 | 0) == 5) {
  HEAP32[i5 >> 2] = i6 | 20480;
  i7 = 22e4;
 } else if ((i4 | 0) == 6) if ((i3 + -7e4 | 0) >>> 0 > 23e4) _png_error(i1, 59001); else i7 = i3;
 i3 = _png_reciprocal(i7) | 0;
 switch (i2 | 0) {
 case 0:
  {
   i2 = i1 + 216 | 0;
   i4 = HEAP32[i2 >> 2] & -8388609;
   HEAP32[i2 >> 2] = i4;
   i8 = i7;
   i9 = 0;
   i10 = HEAP32[i5 >> 2] & -8193;
   i11 = i4;
   break;
  }
 case 1:
  {
   i4 = i1 + 216 | 0;
   i2 = HEAP32[i4 >> 2] & -8388609;
   HEAP32[i4 >> 2] = i2;
   i8 = 1e5;
   i9 = 1;
   i10 = HEAP32[i5 >> 2] & -8193;
   i11 = i2;
   break;
  }
 case 2:
  {
   i2 = i1 + 216 | 0;
   i4 = HEAP32[i2 >> 2] & -8388609;
   HEAP32[i2 >> 2] = i4;
   i8 = i7;
   i9 = 1;
   i10 = HEAP32[i5 >> 2] | 8192;
   i11 = i4;
   break;
  }
 case 3:
  {
   i4 = i1 + 216 | 0;
   i2 = HEAP32[i4 >> 2] | 8388608;
   HEAP32[i4 >> 2] = i2;
   i8 = i7;
   i9 = 1;
   i10 = HEAP32[i5 >> 2] & -8193;
   i11 = i2;
   break;
  }
 default:
  _png_error(i1, 59036);
 }
 HEAP32[i5 >> 2] = i10;
 i10 = i1 + 824 | 0;
 i5 = HEAP32[i10 >> 2] | 0;
 if (!i5) {
  HEAP32[i10 >> 2] = i3;
  i10 = i1 + 898 | 0;
  HEAP16[i10 >> 1] = HEAP16[i10 >> 1] | 1;
  i12 = i3;
 } else i12 = i5;
 HEAP32[i1 + 488 >> 2] = i8;
 if (!i9) return;
 i9 = i1 + 452 | 0;
 HEAP32[i9 >> 2] = 0;
 HEAP32[i9 + 4 >> 2] = 0;
 HEAP16[i9 + 8 >> 1] = 0;
 HEAP32[i1 + 448 >> 2] = i12;
 HEAP8[i1 + 446 >> 0] = 2;
 i12 = i1 + 216 | 0;
 i9 = i11 & -257;
 HEAP32[i12 >> 2] = i9;
 if (i11 & 128 | 0) _png_error(i1, 59055);
 HEAP32[i12 >> 2] = i9 | 128;
 return;
}

function __ZN7CityMap8loadFileENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i4 = i3;
 i5 = i3 + 40 | 0;
 i6 = i3 + 28 | 0;
 i7 = i3 + 16 | 0;
 i8 = i3 + 4 | 0;
 i9 = i7 + 11 | 0;
 HEAP8[i9 >> 0] = 10;
 i10 = i7;
 i11 = 26254;
 i12 = i10 + 10 | 0;
 do {
  HEAP8[i10 >> 0] = HEAP8[i11 >> 0] | 0;
  i10 = i10 + 1 | 0;
  i11 = i11 + 1 | 0;
 } while ((i10 | 0) < (i12 | 0));
 HEAP8[i7 + 10 >> 0] = 0;
 i11 = HEAP8[i2 + 11 >> 0] | 0;
 i10 = i11 << 24 >> 24 < 0;
 i12 = __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj(i7, i10 ? HEAP32[i2 >> 2] | 0 : i2, i10 ? HEAP32[i2 + 4 >> 2] | 0 : i11 & 255) | 0;
 HEAP32[i6 >> 2] = HEAP32[i12 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
 HEAP32[i12 >> 2] = 0;
 HEAP32[i12 + 4 >> 2] = 0;
 HEAP32[i12 + 8 >> 2] = 0;
 HEAP32[i8 >> 2] = 0;
 HEAP32[i8 + 4 >> 2] = 0;
 HEAP32[i8 + 8 >> 2] = 0;
 i12 = i8 + 11 | 0;
 HEAP8[i12 >> 0] = 5;
 HEAP8[i8 >> 0] = HEAP8[26455] | 0;
 HEAP8[i8 + 1 >> 0] = HEAP8[26456] | 0;
 HEAP8[i8 + 2 >> 0] = HEAP8[26457] | 0;
 HEAP8[i8 + 3 >> 0] = HEAP8[26458] | 0;
 HEAP8[i8 + 4 >> 0] = HEAP8[26459] | 0;
 HEAP8[i8 + 5 >> 0] = 0;
 i11 = __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj(i6, i8, 5) | 0;
 HEAP32[i5 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
 HEAP32[i11 >> 2] = 0;
 HEAP32[i11 + 4 >> 2] = 0;
 HEAP32[i11 + 8 >> 2] = 0;
 if ((HEAP8[i12 >> 0] | 0) < 0) __ZdlPv(HEAP32[i8 >> 2] | 0);
 if ((HEAP8[i6 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[i6 >> 2] | 0);
 if ((HEAP8[i9 >> 0] | 0) < 0) __ZdlPv(HEAP32[i7 >> 2] | 0);
 i7 = (HEAP8[i5 + 11 >> 0] | 0) < 0;
 i9 = HEAP32[i5 >> 2] | 0;
 i6 = _open(i7 ? i9 : i5, 0, i4) | 0;
 if ((i6 | 0) != -1) {
  _read(i6, i1 + 128 | 0, Math_imul((HEAP32[i1 >> 2] | 0) * 88 | 0, HEAP32[i1 + 4 >> 2] | 0) | 0) | 0;
  _close(i6) | 0;
 }
 HEAP8[i1 + 36 >> 0] = 1;
 if (!i7) {
  STACKTOP = i3;
  return;
 }
 __ZdlPv(i9);
 STACKTOP = i3;
 return;
}

function __ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_(i1, i2, i3, i4, i5, i6, i7, i8, i9, i10) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 var i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i11 = 0;
 i12 = HEAP32[i4 >> 2] | 0;
 i13 = (i12 | 0) == (i3 | 0);
 do if (i13) {
  i14 = (HEAP8[i10 + 24 >> 0] | 0) == i1 << 24 >> 24;
  if (!i14) if ((HEAP8[i10 + 25 >> 0] | 0) != i1 << 24 >> 24) {
   i11 = 5;
   break;
  }
  HEAP32[i4 >> 2] = i3 + 1;
  HEAP8[i3 >> 0] = i14 ? 43 : 45;
  HEAP32[i5 >> 2] = 0;
  i15 = 0;
 } else i11 = 5; while (0);
 L6 : do if ((i11 | 0) == 5) {
  i14 = HEAP8[i7 + 11 >> 0] | 0;
  if (i1 << 24 >> 24 == i6 << 24 >> 24 ? ((i14 << 24 >> 24 < 0 ? HEAP32[i7 + 4 >> 2] | 0 : i14 & 255) | 0) != 0 : 0) {
   i14 = HEAP32[i9 >> 2] | 0;
   if ((i14 - i8 | 0) >= 160) {
    i15 = 0;
    break;
   }
   i16 = HEAP32[i5 >> 2] | 0;
   HEAP32[i9 >> 2] = i14 + 4;
   HEAP32[i14 >> 2] = i16;
   HEAP32[i5 >> 2] = 0;
   i15 = 0;
   break;
  }
  i16 = i10 + 26 | 0;
  i14 = 0;
  while (1) {
   i17 = i10 + i14 | 0;
   if ((i14 | 0) == 26) {
    i18 = i16;
    break;
   }
   if ((HEAP8[i17 >> 0] | 0) == i1 << 24 >> 24) {
    i18 = i17;
    break;
   } else i14 = i14 + 1 | 0;
  }
  i14 = i18 - i10 | 0;
  if ((i14 | 0) > 23) i15 = -1; else {
   switch (i2 | 0) {
   case 10:
   case 8:
    {
     if ((i14 | 0) >= (i2 | 0)) {
      i15 = -1;
      break L6;
     }
     break;
    }
   case 16:
    {
     if ((i14 | 0) >= 22) {
      if (i13) {
       i15 = -1;
       break L6;
      }
      if ((i12 - i3 | 0) >= 3) {
       i15 = -1;
       break L6;
      }
      if ((HEAP8[i12 + -1 >> 0] | 0) != 48) {
       i15 = -1;
       break L6;
      }
      HEAP32[i5 >> 2] = 0;
      i16 = HEAP8[70463 + i14 >> 0] | 0;
      HEAP32[i4 >> 2] = i12 + 1;
      HEAP8[i12 >> 0] = i16;
      i15 = 0;
      break L6;
     }
     break;
    }
   default:
    {}
   }
   i16 = HEAP8[70463 + i14 >> 0] | 0;
   HEAP32[i4 >> 2] = i12 + 1;
   HEAP8[i12 >> 0] = i16;
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
   i15 = 0;
  }
 } while (0);
 return i15 | 0;
}

function __ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw(i1, i2, i3, i4, i5, i6, i7, i8, i9, i10) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 var i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i11 = 0;
 i12 = HEAP32[i4 >> 2] | 0;
 i13 = (i12 | 0) == (i3 | 0);
 do if (i13) {
  i14 = (HEAP32[i10 + 96 >> 2] | 0) == (i1 | 0);
  if (!i14) if ((HEAP32[i10 + 100 >> 2] | 0) != (i1 | 0)) {
   i11 = 5;
   break;
  }
  HEAP32[i4 >> 2] = i3 + 1;
  HEAP8[i3 >> 0] = i14 ? 43 : 45;
  HEAP32[i5 >> 2] = 0;
  i15 = 0;
 } else i11 = 5; while (0);
 L6 : do if ((i11 | 0) == 5) {
  i14 = HEAP8[i7 + 11 >> 0] | 0;
  if ((i1 | 0) == (i6 | 0) ? ((i14 << 24 >> 24 < 0 ? HEAP32[i7 + 4 >> 2] | 0 : i14 & 255) | 0) != 0 : 0) {
   i14 = HEAP32[i9 >> 2] | 0;
   if ((i14 - i8 | 0) >= 160) {
    i15 = 0;
    break;
   }
   i16 = HEAP32[i5 >> 2] | 0;
   HEAP32[i9 >> 2] = i14 + 4;
   HEAP32[i14 >> 2] = i16;
   HEAP32[i5 >> 2] = 0;
   i15 = 0;
   break;
  }
  i16 = i10 + 104 | 0;
  i14 = 0;
  while (1) {
   i17 = i10 + (i14 << 2) | 0;
   if ((i14 | 0) == 26) {
    i18 = i16;
    break;
   }
   if ((HEAP32[i17 >> 2] | 0) == (i1 | 0)) {
    i18 = i17;
    break;
   } else i14 = i14 + 1 | 0;
  }
  i14 = i18 - i10 | 0;
  i16 = i14 >> 2;
  if ((i14 | 0) > 92) i15 = -1; else {
   switch (i2 | 0) {
   case 10:
   case 8:
    {
     if ((i16 | 0) >= (i2 | 0)) {
      i15 = -1;
      break L6;
     }
     break;
    }
   case 16:
    {
     if ((i14 | 0) >= 88) {
      if (i13) {
       i15 = -1;
       break L6;
      }
      if ((i12 - i3 | 0) >= 3) {
       i15 = -1;
       break L6;
      }
      if ((HEAP8[i12 + -1 >> 0] | 0) != 48) {
       i15 = -1;
       break L6;
      }
      HEAP32[i5 >> 2] = 0;
      i14 = HEAP8[70463 + i16 >> 0] | 0;
      HEAP32[i4 >> 2] = i12 + 1;
      HEAP8[i12 >> 0] = i14;
      i15 = 0;
      break L6;
     }
     break;
    }
   default:
    {}
   }
   i14 = HEAP8[70463 + i16 >> 0] | 0;
   HEAP32[i4 >> 2] = i12 + 1;
   HEAP8[i12 >> 0] = i14;
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
   i15 = 0;
  }
 } while (0);
 return i15 | 0;
}

function __ZL20stbtt__cff_index_get10stbtt__bufi(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i4 = HEAP32[i2 + 8 >> 2] | 0;
 if ((i4 | 0) < 0) ___assert_fail(50765, 50789, 1116, 50855);
 i5 = i2 + 4 | 0;
 HEAP32[i5 >> 2] = 0;
 i6 = HEAP32[i2 >> 2] | 0;
 if (!i4) {
  i7 = 0;
  i8 = 0;
 } else {
  HEAP32[i5 >> 2] = 1;
  i7 = HEAP8[i6 >> 0] | 0;
  i8 = 1;
 }
 i2 = i8 + 1 | 0;
 if ((i8 | 0) < (i4 | 0)) {
  HEAP32[i5 >> 2] = i2;
  i9 = HEAP8[i6 + i8 >> 0] | 0;
  i10 = i2;
 } else {
  i9 = 0;
  i10 = i8;
 }
 i8 = (i7 & 255) << 8 | i9 & 255;
 if ((i10 | 0) < (i4 | 0)) {
  i9 = i10 + 1 | 0;
  HEAP32[i5 >> 2] = i9;
  i11 = HEAP8[i6 + i10 >> 0] | 0;
  i12 = i9;
 } else {
  i11 = 0;
  i12 = i10;
 }
 i10 = i11 & 255;
 if (i8 >>> 0 <= i3 >>> 0) ___assert_fail(55330, 50789, 1233, 55350);
 if ((i11 + -1 & 255) >= 4) ___assert_fail(55371, 50789, 1234, 55350);
 i11 = i12 + (Math_imul(i10, i3) | 0) | 0;
 if ((i11 | 0) < 0 | (i4 | 0) < (i11 | 0)) ___assert_fail(50765, 50789, 1116, 50855);
 HEAP32[i5 >> 2] = i11;
 if ((i10 + -1 | 0) >>> 0 < 4) {
  i13 = 0;
  i14 = 0;
  i15 = i11;
 } else ___assert_fail(55400, 50789, 1129, 55417);
 while (1) {
  i11 = i15 + 1 | 0;
  if ((i15 | 0) < (i4 | 0)) {
   HEAP32[i5 >> 2] = i11;
   i16 = HEAP8[i6 + i15 >> 0] | 0;
   i17 = i11;
  } else {
   i16 = 0;
   i17 = i15;
  }
  i13 = i13 << 8 | i16 & 255;
  i14 = i14 + 1 | 0;
  if ((i14 | 0) == (i10 | 0)) {
   i18 = 0;
   i19 = 0;
   i20 = i17;
   break;
  } else i15 = i17;
 }
 while (1) {
  i17 = i20 + 1 | 0;
  if ((i20 | 0) < (i4 | 0)) {
   HEAP32[i5 >> 2] = i17;
   i21 = HEAP8[i6 + i20 >> 0] | 0;
   i22 = i17;
  } else {
   i21 = 0;
   i22 = i20;
  }
  i18 = i18 << 8 | i21 & 255;
  i19 = i19 + 1 | 0;
  if ((i19 | 0) == (i10 | 0)) break; else i20 = i22;
 }
 i22 = (Math_imul(i8 + 1 | 0, i10) | 0) + 2 + i13 | 0;
 i10 = i18 - i13 | 0;
 HEAP32[i1 >> 2] = 0;
 i13 = i1 + 8 | 0;
 HEAP32[i13 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 if ((i10 | i22 | 0) < 0) return;
 if ((i4 | 0) < (i22 | 0) | (i4 - i22 | 0) < (i10 | 0)) return;
 HEAP32[i1 >> 2] = i6 + i22;
 HEAP32[i13 >> 2] = i10;
 return;
}

function __ZN11ImFontAtlas14AddFontDefaultEPK12ImFontConfig(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, f14 = f0, f15 = f0, i16 = 0, i17 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 i5 = i4;
 if (!i2) {
  i6 = i5 + 32 | 0;
  HEAP32[i5 >> 2] = 0;
  HEAP32[i5 + 4 >> 2] = 0;
  HEAP8[i5 + 8 >> 0] = 1;
  HEAP32[i5 + 12 >> 2] = 0;
  HEAPF32[i5 + 16 >> 2] = Math_fround(0.0);
  i7 = i5 + 20 | 0;
  i8 = i5 + 24 | 0;
  i9 = i5 + 28 | 0;
  HEAP32[i6 >> 2] = 0;
  HEAP32[i6 + 4 >> 2] = 0;
  HEAP32[i6 + 8 >> 2] = 0;
  HEAP32[i6 + 12 >> 2] = 0;
  HEAP32[i6 + 16 >> 2] = 0;
  HEAP32[i6 + 20 >> 2] = 0;
  HEAPF32[i5 + 56 >> 2] = Math_fround(3402823469999999843913219.0e14);
  HEAP8[i5 + 60 >> 0] = 0;
  HEAP32[i5 + 64 >> 2] = 0;
  HEAPF32[i5 + 68 >> 2] = Math_fround(1.0);
  i6 = i5 + 72 | 0;
  i10 = i6;
  i11 = i10 + 44 | 0;
  do {
   HEAP32[i10 >> 2] = 0;
   i10 = i10 + 4 | 0;
  } while ((i10 | 0) < (i11 | 0));
  HEAP32[i8 >> 2] = 1;
  HEAP32[i7 >> 2] = 1;
  HEAP8[i9 >> 0] = 1;
  i12 = i6;
  i3 = 4;
 } else {
  i10 = i5;
  i13 = i2;
  i11 = i10 + 116 | 0;
  do {
   HEAP32[i10 >> 2] = HEAP32[i13 >> 2];
   i10 = i10 + 4 | 0;
   i13 = i13 + 4 | 0;
  } while ((i10 | 0) < (i11 | 0));
  i2 = i5 + 72 | 0;
  if (!(HEAP8[i2 >> 0] | 0)) {
   i12 = i2;
   i3 = 4;
  }
 }
 if ((i3 | 0) == 4) {
  i10 = i12;
  i13 = 38428;
  i11 = i10 + 22 | 0;
  do {
   HEAP8[i10 >> 0] = HEAP8[i13 >> 0] | 0;
   i10 = i10 + 1 | 0;
   i13 = i13 + 1 | 0;
  } while ((i10 | 0) < (i11 | 0));
 }
 i13 = i5 + 16 | 0;
 f14 = Math_fround(HEAPF32[i13 >> 2]);
 if (!(f14 <= Math_fround(0.0))) {
  f15 = f14;
  i16 = __ZN11ImFontAtlas36AddFontFromMemoryCompressedBase85TTFEPKcfPK12ImFontConfigPKt(i1, 38450, f15, i5, 21332) | 0;
  i17 = i16 + 12 | 0;
  HEAPF32[i17 >> 2] = Math_fround(1.0);
  STACKTOP = i4;
  return i16 | 0;
 }
 HEAPF32[i13 >> 2] = Math_fround(13.0);
 f15 = Math_fround(13.0);
 i16 = __ZN11ImFontAtlas36AddFontFromMemoryCompressedBase85TTFEPKcfPK12ImFontConfigPKt(i1, 38450, f15, i5, 21332) | 0;
 i17 = i16 + 12 | 0;
 HEAPF32[i17 >> 2] = Math_fround(1.0);
 STACKTOP = i4;
 return i16 | 0;
}

function __ZN5ImGui10RenderTextE6ImVec2PKcS2_b(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, f13 = f0, f14 = f0, f15 = f0, f16 = f0, f17 = f0, f18 = f0, i19 = 0, i20 = 0;
 i5 = HEAP32[1460598] | 0;
 i6 = HEAP32[i5 + 6392 >> 2] | 0;
 i7 = (i3 | 0) == 0;
 L1 : do if (i4) {
  i8 = i7 ? -1 : i3;
  if (i8 >>> 0 > i2 >>> 0) i9 = i2; else return;
  while (1) {
   switch (HEAP8[i9 >> 0] | 0) {
   case 0:
    {
     i10 = i9;
     break L1;
     break;
    }
   case 35:
    {
     i11 = i9 + 1 | 0;
     if ((HEAP8[i11 >> 0] | 0) == 35) {
      i10 = i9;
      break L1;
     } else i12 = i11;
     break;
    }
   default:
    i12 = i9 + 1 | 0;
   }
   if (i12 >>> 0 < i8 >>> 0) i9 = i12; else {
    i10 = i12;
    break L1;
   }
  }
 } else if (i7) i10 = i2 + (_strlen(i2) | 0) | 0; else i10 = i3; while (0);
 if ((i10 | 0) == (i2 | 0)) return;
 f13 = Math_fround(HEAPF32[i5 + 6184 >> 2]);
 f14 = Math_fround(HEAPF32[i5 + 5508 >> 2]);
 f15 = Math_fround(HEAPF32[i5 + 5512 >> 2]);
 f16 = Math_fround(HEAPF32[i5 + 5516 >> 2]);
 f17 = Math_fround(HEAPF32[i5 + 5520 >> 2]);
 f18 = Math_fround(f17 * Math_fround(HEAPF32[i5 + 5356 >> 2]));
 i3 = f14 < Math_fround(0.0);
 i7 = f14 > Math_fround(1.0);
 i12 = ~~Math_fround(Math_fround((i7 ? Math_fround(1.0) : f14) * Math_fround(255.0)) + Math_fround(.5));
 i7 = f15 < Math_fround(0.0);
 i9 = f15 > Math_fround(1.0);
 i4 = ~~Math_fround(Math_fround((i9 ? Math_fround(1.0) : f15) * Math_fround(255.0)) + Math_fround(.5)) << 8;
 i9 = f16 < Math_fround(0.0);
 i8 = f16 > Math_fround(1.0);
 i11 = ~~Math_fround(Math_fround((i8 ? Math_fround(1.0) : f16) * Math_fround(255.0)) + Math_fround(.5)) << 16;
 i8 = f18 < Math_fround(0.0);
 i19 = f18 > Math_fround(1.0);
 i20 = ~~Math_fround(Math_fround((i19 ? Math_fround(1.0) : f18) * Math_fround(255.0)) + Math_fround(.5)) << 24;
 __ZN10ImDrawList7AddTextEPK6ImFontfRK6ImVec2jPKcS7_fPK6ImVec4(HEAP32[i6 + 632 >> 2] | 0, HEAP32[i5 + 6180 >> 2] | 0, f13, i1, (i7 ? 0 : i4) | (i3 ? 0 : i12) | (i9 ? 0 : i11) | (i8 ? 0 : i20), i2, i10, Math_fround(0.0), 0);
 if (!(HEAP8[i5 + 11092 >> 0] | 0)) return;
 __ZL15LogRenderedTextPK6ImVec2PKcS3_(i1, i2, i10);
 return;
}

function _png_check_fp_number(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i5 = HEAP32[i3 >> 2] | 0;
 i6 = HEAP32[i4 >> 2] | 0;
 L1 : do if (i6 >>> 0 < i2 >>> 0) {
  i7 = i6;
  i8 = i5;
  while (1) {
   switch (HEAP8[i1 + i7 >> 0] | 0) {
   case 43:
    {
     i9 = 4;
     break;
    }
   case 45:
    {
     i9 = 132;
     break;
    }
   case 46:
    {
     i9 = 16;
     break;
    }
   case 48:
    {
     i9 = 8;
     break;
    }
   case 57:
   case 56:
   case 55:
   case 54:
   case 53:
   case 52:
   case 51:
   case 50:
   case 49:
    {
     i9 = 264;
     break;
    }
   case 101:
   case 69:
    {
     i9 = 32;
     break;
    }
   default:
    {
     i10 = i7;
     i11 = i8;
     break L1;
    }
   }
   L11 : do switch ((i9 | i8 & 3) & 63) {
   case 4:
    {
     if (i8 & 60 | 0) {
      i10 = i7;
      i11 = i8;
      break L1;
     }
     i12 = i9 | i8;
     break;
    }
   case 16:
    {
     if (i8 & 16 | 0) {
      i10 = i7;
      i11 = i8;
      break L1;
     }
     if (!(i8 & 8)) {
      i12 = i8 & 448 | i9 | 1;
      break L11;
     } else {
      i12 = i9 | i8;
      break L11;
     }
     break;
    }
   case 8:
    {
     i12 = ((i8 & 16 | 0) == 0 ? i8 : i8 & 384 | 17) | i9 | 64;
     break;
    }
   case 32:
    {
     if (!(i8 & 8)) {
      i10 = i7;
      i11 = i8;
      break L1;
     }
     i12 = i8 & 448 | 2;
     break;
    }
   case 9:
    {
     i12 = i8 | i9 | 64;
     break;
    }
   case 33:
    {
     if (!(i8 & 8)) {
      i10 = i7;
      i11 = i8;
      break L1;
     }
     i12 = i8 & 448 | 2;
     break;
    }
   case 6:
    {
     if (i8 & 60 | 0) {
      i10 = i7;
      i11 = i8;
      break L1;
     }
     i12 = i8 | 4;
     break;
    }
   case 10:
    {
     i12 = i8 | 72;
     break;
    }
   default:
    {
     i10 = i7;
     i11 = i8;
     break L1;
    }
   } while (0);
   i13 = i7 + 1 | 0;
   if (i13 >>> 0 < i2 >>> 0) {
    i7 = i13;
    i8 = i12;
   } else {
    i10 = i13;
    i11 = i12;
    break L1;
   }
  }
 } else {
  i10 = i6;
  i11 = i5;
 } while (0);
 HEAP32[i3 >> 2] = i11;
 HEAP32[i4 >> 2] = i10;
 return i11 >>> 3 & 1 | 0;
}

function ___stpncpy(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i4 = 0;
 i5 = i2;
 L1 : do if (!((i5 ^ i1) & 3)) {
  i6 = (i3 | 0) != 0;
  if (i6 & (i5 & 3 | 0) != 0) {
   i7 = i3;
   i8 = i2;
   i9 = i1;
   while (1) {
    i10 = HEAP8[i8 >> 0] | 0;
    HEAP8[i9 >> 0] = i10;
    if (!(i10 << 24 >> 24)) {
     i11 = i9;
     i12 = i7;
     break L1;
    }
    i10 = i7 + -1 | 0;
    i13 = i8 + 1 | 0;
    i14 = i9 + 1 | 0;
    i15 = (i10 | 0) != 0;
    if (i15 & (i13 & 3 | 0) != 0) {
     i7 = i10;
     i8 = i13;
     i9 = i14;
    } else {
     i16 = i10;
     i17 = i13;
     i18 = i14;
     i19 = i15;
     break;
    }
   }
  } else {
   i16 = i3;
   i17 = i2;
   i18 = i1;
   i19 = i6;
  }
  if (i19) if (!(HEAP8[i17 >> 0] | 0)) {
   i11 = i18;
   i12 = i16;
  } else {
   L10 : do if (i16 >>> 0 > 3) {
    i9 = i18;
    i8 = i17;
    i7 = i16;
    while (1) {
     i15 = HEAP32[i8 >> 2] | 0;
     if ((i15 & -2139062144 ^ -2139062144) & i15 + -16843009 | 0) {
      i20 = i8;
      i21 = i9;
      i22 = i7;
      break L10;
     }
     HEAP32[i9 >> 2] = i15;
     i15 = i7 + -4 | 0;
     i14 = i8 + 4 | 0;
     i13 = i9 + 4 | 0;
     if (i15 >>> 0 > 3) {
      i9 = i13;
      i8 = i14;
      i7 = i15;
     } else {
      i20 = i14;
      i21 = i13;
      i22 = i15;
      break;
     }
    }
   } else {
    i20 = i17;
    i21 = i18;
    i22 = i16;
   } while (0);
   i23 = i20;
   i24 = i21;
   i25 = i22;
   i4 = 11;
  } else {
   i11 = i18;
   i12 = 0;
  }
 } else {
  i23 = i2;
  i24 = i1;
  i25 = i3;
  i4 = 11;
 } while (0);
 L15 : do if ((i4 | 0) == 11) if (!i25) {
  i11 = i24;
  i12 = 0;
 } else {
  i3 = i23;
  i1 = i24;
  i2 = i25;
  while (1) {
   i18 = HEAP8[i3 >> 0] | 0;
   HEAP8[i1 >> 0] = i18;
   if (!(i18 << 24 >> 24)) {
    i11 = i1;
    i12 = i2;
    break L15;
   }
   i2 = i2 + -1 | 0;
   i18 = i1 + 1 | 0;
   if (!i2) {
    i11 = i18;
    i12 = 0;
    break;
   } else {
    i3 = i3 + 1 | 0;
    i1 = i18;
   }
  }
 } while (0);
 _memset(i11 | 0, 0, i12 | 0) | 0;
 return i11 | 0;
}

function __ZN15CityMapRenderer4tickEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, f8 = f0, f9 = f0, f10 = f0, f11 = f0, f12 = f0, f13 = f0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 i3 = i2 + 80 | 0;
 i4 = i2 + 64 | 0;
 i5 = i2;
 i6 = i1 + 124 | 0;
 __ZN11RenderQueue5clearEv(i6);
 i7 = i1 + 252 | 0;
 __ZN11RenderQueue10setProgramEi(i6, HEAP32[(HEAP32[i7 >> 2] | 0) + 44 >> 2] | 0);
 __ZN11RenderQueue7setMeshEi(i6, 37);
 i1 = HEAP32[i7 >> 2] | 0;
 f8 = Math_fround(~~Math_fround(Math_fround(HEAPF32[i1 >> 2]) + Math_fround(.5)) | 0);
 f9 = Math_fround(~~Math_fround(Math_fround(HEAPF32[i1 + 4 >> 2]) + Math_fround(.5)) | 0);
 HEAPF32[i4 >> 2] = Math_fround(.790000021);
 HEAPF32[i4 + 4 >> 2] = Math_fround(.790000021);
 HEAPF32[i4 + 8 >> 2] = Math_fround(.200000003);
 HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 __ZN11RenderQueue10setDiffuseEN3glm3vecILi3EfLNS0_9qualifierE0EEE(i6, i3);
 HEAP32[i5 >> 2] = 1065353216;
 i4 = i5 + 4 | 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 HEAP32[i4 + 12 >> 2] = 0;
 HEAP32[i5 + 20 >> 2] = 1065353216;
 i4 = i5 + 24 | 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 HEAP32[i4 + 12 >> 2] = 0;
 HEAP32[i5 + 40 >> 2] = 1065353216;
 HEAPF32[i5 + 44 >> 2] = Math_fround(0.0);
 f10 = Math_fround(f8 * Math_fround(0.0));
 f11 = Math_fround(f9 * Math_fround(0.0));
 f12 = Math_fround(f10 + f11);
 f13 = Math_fround(Math_fround(f11 + f8) + Math_fround(0.0));
 f8 = Math_fround(Math_fround(f10 + f9) + Math_fround(0.0));
 f9 = Math_fround(Math_fround(f12 + Math_fround(.100000001)) + Math_fround(0.0));
 f10 = Math_fround(Math_fround(f12 + Math_fround(0.0)) + Math_fround(1.0));
 HEAPF32[i5 + 48 >> 2] = f13;
 HEAPF32[i5 + 52 >> 2] = f8;
 HEAPF32[i5 + 56 >> 2] = f9;
 HEAPF32[i5 + 60 >> 2] = f10;
 i4 = i3;
 i1 = i5;
 i5 = i4 + 64 | 0;
 do {
  HEAP32[i4 >> 2] = HEAP32[i1 >> 2];
  i4 = i4 + 4 | 0;
  i1 = i1 + 4 | 0;
 } while ((i4 | 0) < (i5 | 0));
 __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i6, i3);
 STACKTOP = i2;
 return;
}

function __ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff(i1, i2, i3, f4, f5, f6, f7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 f4 = Math_fround(f4);
 f5 = Math_fround(f5);
 f6 = Math_fround(f6);
 f7 = Math_fround(f7);
 var f8 = f0, f9 = f0, f10 = f0, f11 = f0, f12 = f0, f13 = f0, i14 = 0;
 if (f5 == f7) return;
 if (!(f5 < f7)) ___assert_fail(54757, 50789, 2921, 54765);
 f8 = Math_fround(HEAPF32[i3 + 20 >> 2]);
 f9 = Math_fround(HEAPF32[i3 + 24 >> 2]);
 if (!(f8 <= f9)) ___assert_fail(54792, 50789, 2922, 54765);
 if (f8 > f7 | f9 < f5) return;
 if (f8 > f5) {
  f10 = f8;
  f11 = Math_fround(Math_fround(Math_fround(Math_fround(f6 - f4) * Math_fround(f8 - f5)) / Math_fround(f7 - f5)) + f4);
 } else {
  f10 = f5;
  f11 = f4;
 }
 if (f9 < f7) {
  f12 = f9;
  f13 = Math_fround(Math_fround(Math_fround(Math_fround(f6 - f11) * Math_fround(f9 - f7)) / Math_fround(f7 - f10)) + f6);
 } else {
  f12 = f7;
  f13 = f6;
 }
 f6 = Math_fround(i2 | 0);
 f7 = Math_fround(i2 + 1 | 0);
 do if (f11 == f6) {
  if (!(f13 <= f7)) ___assert_fail(54807, 50789, 2935, 54765);
 } else {
  if (f11 == f7) {
   if (f13 >= f6) break;
   ___assert_fail(54817, 50789, 2937, 54765);
  }
  if (f11 <= f6) {
   if (f13 <= f6) break;
   ___assert_fail(54825, 50789, 2939, 54765);
  }
  if (!(f11 >= f7)) {
   if (!(!(f13 >= f6) | !(f13 <= f7))) break;
   ___assert_fail(54843, 50789, 2943, 54765);
  } else {
   if (f13 >= f7) break;
   ___assert_fail(54833, 50789, 2941, 54765);
  }
 } while (0);
 if (!(!(f11 <= f6) | !(f13 <= f6))) {
  f9 = Math_fround(Math_fround(f12 - f10) * Math_fround(HEAPF32[i3 + 16 >> 2]));
  i14 = i1 + (i2 << 2) | 0;
  f4 = Math_fround(Math_fround(HEAPF32[i14 >> 2]) + f9);
  HEAPF32[i14 >> 2] = f4;
  return;
 }
 if (!(!(f11 >= f7) | !(f13 >= f7))) return;
 if (!(f13 <= f7) | (!(f11 >= f6) | !(f11 <= f7) | !(f13 >= f6))) ___assert_fail(54864, 50789, 2950, 54765);
 f7 = Math_fround(Math_fround(Math_fround(1.0) - Math_fround(Math_fround(Math_fround(f11 - f6) + Math_fround(f13 - f6)) * Math_fround(.5))) * Math_fround(Math_fround(f12 - f10) * Math_fround(HEAPF32[i3 + 16 >> 2])));
 i3 = i1 + (i2 << 2) | 0;
 f10 = Math_fround(Math_fround(HEAPF32[i3 >> 2]) + f7);
 HEAPF32[i3 >> 2] = f10;
 return;
}

function __ZN5ImGui23SaveIniSettingsToMemoryEPj(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i2 = 0;
 i3 = HEAP32[1460598] | 0;
 HEAPF32[i3 + 11052 >> 2] = Math_fround(0.0);
 i4 = i3 + 11056 | 0;
 i5 = i3 + 11060 | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 do if ((i6 | 0) < 0) {
  i7 = ((i6 | 0) / 2 | 0) + i6 | 0;
  i8 = (i7 | 0) > 0 ? i7 : 0;
  if ((i6 | 0) >= (i8 | 0)) {
   HEAP32[i4 >> 2] = 0;
   i9 = i4;
   i2 = 10;
   break;
  }
  HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
  i7 = __ZL13MallocWrapperjPv(i8, 0) | 0;
  i10 = i3 + 11064 | 0;
  i11 = HEAP32[i10 >> 2] | 0;
  if (i11 | 0) {
   _memcpy(i7 | 0, i11 | 0, HEAP32[i4 >> 2] | 0) | 0;
   i11 = HEAP32[i10 >> 2] | 0;
   if (i11 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
   __ZL11FreeWrapperPvS_(i11, 0);
  }
  HEAP32[i10 >> 2] = i7;
  HEAP32[i5 >> 2] = i8;
  i12 = i8;
  i2 = 9;
 } else {
  i12 = i6;
  i2 = 9;
 } while (0);
 if ((i2 | 0) == 9) {
  HEAP32[i4 >> 2] = 0;
  if (!i12) {
   HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
   i12 = __ZL13MallocWrapperjPv(8, 0) | 0;
   i6 = i3 + 11064 | 0;
   i8 = HEAP32[i6 >> 2] | 0;
   if (i8 | 0) {
    _memcpy(i12 | 0, i8 | 0, HEAP32[i4 >> 2] | 0) | 0;
    i8 = HEAP32[i6 >> 2] | 0;
    if (i8 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
    __ZL11FreeWrapperPvS_(i8, 0);
   }
   HEAP32[i6 >> 2] = i12;
   HEAP32[i5 >> 2] = 8;
   i13 = i6;
   i14 = i12;
   i15 = HEAP32[i4 >> 2] | 0;
   i16 = i4;
  } else {
   i9 = i4;
   i2 = 10;
  }
 }
 if ((i2 | 0) == 10) {
  i2 = i3 + 11064 | 0;
  i13 = i2;
  i14 = HEAP32[i2 >> 2] | 0;
  i15 = 0;
  i16 = i9;
 }
 HEAP8[i14 + i15 >> 0] = 0;
 HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
 i15 = i3 + 11068 | 0;
 if ((HEAP32[i15 >> 2] | 0) > 0) {
  i14 = i3 + 11076 | 0;
  i9 = 0;
  do {
   i2 = HEAP32[i14 >> 2] | 0;
   i12 = i2 + (i9 * 24 | 0) | 0;
   FUNCTION_TABLE_viii[HEAP32[i12 + 16 >> 2] & 15](i3, i12 | 0, i4);
   i9 = i9 + 1 | 0;
  } while ((i9 | 0) < (HEAP32[i15 >> 2] | 0));
 }
 if (!i1) {
  i17 = HEAP32[i13 >> 2] | 0;
  return i17 | 0;
 }
 HEAP32[i1 >> 2] = (HEAP32[i16 >> 2] | 0) + -1;
 i17 = HEAP32[i13 >> 2] | 0;
 return i17 | 0;
}

function __ZN11ImFontAtlas21GetMouseCursorTexDataEiP6ImVec2S1_S1_S1_(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, f11 = f0, f12 = f0, f13 = f0, f14 = f0, f15 = f0, f16 = f0;
 if (i2 >>> 0 > 7) {
  i7 = 0;
  return i7 | 0;
 }
 if (HEAP32[i1 >> 2] & 2 | 0) {
  i7 = 0;
  return i7 | 0;
 }
 i8 = HEAP32[i1 + 84 >> 2] | 0;
 if ((i8 | 0) == -1) ___assert_fail(56025, 38201, 1657, 56048);
 if ((HEAP32[i1 + 60 >> 2] | 0) <= (i8 | 0)) ___assert_fail(56841, 56850, 1235, 56909);
 i9 = HEAP32[i1 + 68 >> 2] | 0;
 if ((HEAP32[i9 + (i8 * 28 | 0) >> 2] | 0) != -2147483648) ___assert_fail(51540, 38201, 1659, 56048);
 i10 = i9 + (i8 * 28 | 0) | 0;
 f11 = Math_fround(HEAPU16[i10 + 8 >> 1] | 0);
 f12 = Math_fround(HEAPU16[i10 + 10 >> 1] | 0);
 i10 = 4288 + (i2 * 24 | 0) | 0;
 f13 = Math_fround(Math_fround(HEAPF32[i10 >> 2]) + f11);
 f11 = Math_fround(Math_fround(HEAPF32[i10 + 4 >> 2]) + f12);
 i2 = i10 + 8 | 0;
 f12 = Math_fround(HEAPF32[i2 >> 2]);
 f14 = Math_fround(HEAPF32[i10 + 12 >> 2]);
 i8 = i2;
 i2 = HEAP32[i8 + 4 >> 2] | 0;
 i9 = i4;
 HEAP32[i9 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i9 + 4 >> 2] = i2;
 i2 = i10 + 16 | 0;
 i10 = HEAP32[i2 + 4 >> 2] | 0;
 i9 = i3;
 HEAP32[i9 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 + 4 >> 2] = i10;
 i10 = i1 + 32 | 0;
 f15 = Math_fround(f13 * Math_fround(HEAPF32[i10 >> 2]));
 i9 = i1 + 36 | 0;
 f16 = Math_fround(f11 * Math_fround(HEAPF32[i9 >> 2]));
 HEAPF32[i5 >> 2] = f15;
 HEAPF32[i5 + 4 >> 2] = f16;
 f16 = Math_fround(f13 + f12);
 f15 = Math_fround(f11 + f14);
 f14 = Math_fround(f16 * Math_fround(HEAPF32[i10 >> 2]));
 f16 = Math_fround(f15 * Math_fround(HEAPF32[i9 >> 2]));
 HEAPF32[i5 + 8 >> 2] = f14;
 HEAPF32[i5 + 12 >> 2] = f16;
 f16 = Math_fround(f13 + Math_fround(109.0));
 f13 = Math_fround(f16 * Math_fround(HEAPF32[i10 >> 2]));
 f14 = Math_fround(f11 * Math_fround(HEAPF32[i9 >> 2]));
 HEAPF32[i6 >> 2] = f13;
 HEAPF32[i6 + 4 >> 2] = f14;
 f14 = Math_fround(f16 + f12);
 f12 = Math_fround(f14 * Math_fround(HEAPF32[i10 >> 2]));
 f14 = Math_fround(f15 * Math_fround(HEAPF32[i9 >> 2]));
 HEAPF32[i6 + 8 >> 2] = f12;
 HEAPF32[i6 + 12 >> 2] = f14;
 i7 = 1;
 return i7 | 0;
}

function _wcsnrtombs(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(272);
 i6 = i5 + 8 | 0;
 i7 = i5;
 i8 = HEAP32[i2 >> 2] | 0;
 HEAP32[i7 >> 2] = i8;
 i9 = (i1 | 0) != 0;
 i10 = i9 ? i4 : 256;
 i4 = i9 ? i1 : i6;
 i1 = i8;
 L1 : do if ((i10 | 0) != 0 & (i8 | 0) != 0) {
  i11 = 0;
  i12 = i3;
  i13 = i10;
  i14 = i4;
  i15 = i1;
  while (1) {
   i16 = i12 >>> 0 >= i13 >>> 0;
   if (!(i16 | i12 >>> 0 > 32)) {
    i17 = i14;
    i18 = i11;
    i19 = i12;
    i20 = i13;
    i21 = i15;
    break L1;
   }
   i22 = i16 ? i13 : i12;
   i23 = i12 - i22 | 0;
   i16 = _wcsrtombs(i14, i7, i22, 0) | 0;
   if ((i16 | 0) == -1) break;
   i22 = (i14 | 0) == (i6 | 0);
   i24 = i13 - (i22 ? 0 : i16) | 0;
   i25 = i22 ? i14 : i14 + i16 | 0;
   i22 = i16 + i11 | 0;
   i16 = HEAP32[i7 >> 2] | 0;
   if ((i24 | 0) != 0 & (i16 | 0) != 0) {
    i11 = i22;
    i12 = i23;
    i13 = i24;
    i14 = i25;
    i15 = i16;
   } else {
    i17 = i25;
    i18 = i22;
    i19 = i23;
    i20 = i24;
    i21 = i16;
    break L1;
   }
  }
  i17 = i14;
  i18 = -1;
  i19 = i23;
  i20 = 0;
  i21 = HEAP32[i7 >> 2] | 0;
 } else {
  i17 = i4;
  i18 = 0;
  i19 = i3;
  i20 = i10;
  i21 = i1;
 } while (0);
 L8 : do if (!i21) i26 = i18; else if ((i20 | 0) != 0 & (i19 | 0) != 0) {
  i1 = i18;
  i10 = i19;
  i3 = i17;
  i4 = i20;
  i23 = i21;
  while (1) {
   i27 = _wcrtomb(i3, HEAP32[i23 >> 2] | 0, 0) | 0;
   if ((i27 + 1 | 0) >>> 0 < 2) break;
   i23 = (HEAP32[i7 >> 2] | 0) + 4 | 0;
   HEAP32[i7 >> 2] = i23;
   i10 = i10 + -1 | 0;
   i4 = i4 - i27 | 0;
   i6 = i27 + i1 | 0;
   if (!((i4 | 0) != 0 & (i10 | 0) != 0)) {
    i26 = i6;
    break L8;
   } else {
    i1 = i6;
    i3 = i3 + i27 | 0;
   }
  }
  if (!i27) {
   HEAP32[i7 >> 2] = 0;
   i26 = i1;
  } else i26 = -1;
 } else i26 = i18; while (0);
 if (i9) HEAP32[i2 >> 2] = HEAP32[i7 >> 2];
 STACKTOP = i5;
 return i26 | 0;
}

function __ZL14stbtt__cff_intP10stbtt__buf(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i2 = i1 + 4 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 i4 = HEAP32[i1 + 8 >> 2] | 0;
 if ((i3 | 0) >= (i4 | 0)) ___assert_fail(54909, 50789, 1179, 55007);
 i5 = i3 + 1 | 0;
 i6 = HEAP32[i1 >> 2] | 0;
 HEAP32[i2 >> 2] = i5;
 i1 = HEAP8[i6 + i3 >> 0] | 0;
 i7 = i1 & 255;
 if ((i1 + -32 & 255) < 215) {
  i8 = i7 + -139 | 0;
  return i8 | 0;
 }
 if ((i1 + 9 & 255) < 4) {
  if ((i5 | 0) < (i4 | 0)) {
   HEAP32[i2 >> 2] = i3 + 2;
   i9 = HEAP8[i6 + i5 >> 0] | 0;
  } else i9 = 0;
  i8 = ((i7 << 8) + -63232 | i9 & 255) + 108 | 0;
  return i8 | 0;
 }
 if ((i1 & 255) > 250 & i1 << 24 >> 24 != -1) {
  if ((i5 | 0) < (i4 | 0)) {
   HEAP32[i2 >> 2] = i3 + 2;
   i10 = HEAP8[i6 + i5 >> 0] | 0;
  } else i10 = 0;
  i8 = (251 - i7 << 8) + -108 - (i10 & 255) | 0;
  return i8 | 0;
 }
 switch (i1 << 24 >> 24) {
 case 28:
  {
   i1 = i3 + 2 | 0;
   if ((i5 | 0) < (i4 | 0)) {
    HEAP32[i2 >> 2] = i1;
    i11 = HEAP8[i6 + i5 >> 0] | 0;
    i12 = i1;
   } else {
    i11 = 0;
    i12 = i5;
   }
   if ((i12 | 0) < (i4 | 0)) {
    HEAP32[i2 >> 2] = i12 + 1;
    i13 = HEAP8[i6 + i12 >> 0] | 0;
   } else i13 = 0;
   i8 = (i11 & 255) << 8 | i13 & 255;
   return i8 | 0;
  }
 case 29:
  {
   i13 = i3 + 2 | 0;
   if ((i5 | 0) < (i4 | 0)) {
    HEAP32[i2 >> 2] = i13;
    i14 = HEAP8[i6 + i5 >> 0] | 0;
    i15 = i13;
   } else {
    i14 = 0;
    i15 = i5;
   }
   i5 = i15 + 1 | 0;
   if ((i15 | 0) < (i4 | 0)) {
    HEAP32[i2 >> 2] = i5;
    i16 = HEAP8[i6 + i15 >> 0] | 0;
    i17 = i5;
   } else {
    i16 = 0;
    i17 = i15;
   }
   i15 = i17 + 1 | 0;
   if ((i17 | 0) < (i4 | 0)) {
    HEAP32[i2 >> 2] = i15;
    i18 = HEAP8[i6 + i17 >> 0] | 0;
    i19 = i15;
   } else {
    i18 = 0;
    i19 = i17;
   }
   if ((i19 | 0) < (i4 | 0)) {
    HEAP32[i2 >> 2] = i19 + 1;
    i20 = HEAP8[i6 + i19 >> 0] | 0;
   } else i20 = 0;
   i8 = (((i14 & 255) << 8 | i16 & 255) << 8 | i18 & 255) << 8 | i20 & 255;
   return i8 | 0;
  }
 default:
  ___assert_fail(54909, 50789, 1179, 55007);
 }
 return 0;
}

function _png_handle_PLTE(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 784 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(784);
 i6 = i5 + 8 | 0;
 i7 = i5;
 i8 = i1 + 208 | 0;
 i9 = HEAP32[i8 >> 2] | 0;
 if (!(i9 & 1)) _png_chunk_error(i1, 60665);
 if (i9 & 2 | 0) _png_chunk_error(i1, 63151);
 if (i9 & 4 | 0) {
  _png_crc_finish(i1, i3) | 0;
  _png_chunk_benign_error(i1, 61181);
  STACKTOP = i5;
  return;
 }
 HEAP32[i8 >> 2] = i9 | 2;
 i9 = i1 + 435 | 0;
 if (!(HEAP8[i9 >> 0] & 2)) {
  _png_crc_finish(i1, i3) | 0;
  _png_chunk_benign_error(i1, 63280);
  STACKTOP = i5;
  return;
 }
 if (!(i3 >>> 0 < 769 & ((i3 >>> 0) % 3 | 0 | 0) == 0)) {
  _png_crc_finish(i1, i3) | 0;
  if ((HEAP8[i9 >> 0] | 0) == 3) _png_chunk_error(i1, 61194);
  _png_chunk_benign_error(i1, 61194);
  STACKTOP = i5;
  return;
 }
 i9 = (i3 >>> 0) / 3 | 0;
 if (i3 >>> 0 > 2) {
  i3 = i7 + 1 | 0;
  i8 = i7 + 2 | 0;
  i10 = 0;
  i11 = i6;
  while (1) {
   _png_read_data(i1, i7, 3);
   _png_calculate_crc(i1, i7, 3);
   HEAP8[i11 >> 0] = HEAP8[i7 >> 0] | 0;
   HEAP8[i11 + 1 >> 0] = HEAP8[i3 >> 0] | 0;
   HEAP8[i11 + 2 >> 0] = HEAP8[i8 >> 0] | 0;
   i10 = i10 + 1 | 0;
   if ((i10 | 0) >= (i9 | 0)) break; else i11 = i11 + 3 | 0;
  }
 }
 _png_crc_finish(i1, 0) | 0;
 _png_set_PLTE(i1, i2, i6, i9);
 i9 = i1 + 428 | 0;
 do if (!(HEAP16[i9 >> 1] | 0)) {
  if (!i2) {
   STACKTOP = i5;
   return;
  }
  i6 = i2 + 8 | 0;
  i11 = HEAP32[i6 >> 2] | 0;
  if (!(i11 & 16)) {
   i12 = i6;
   i13 = i11;
  } else {
   HEAP16[i9 >> 1] = 0;
   i14 = i6;
   i4 = 22;
  }
 } else {
  HEAP16[i9 >> 1] = 0;
  if (i2 | 0) {
   i14 = i2 + 8 | 0;
   i4 = 22;
   break;
  }
  _png_chunk_benign_error(i1, 63305);
  STACKTOP = i5;
  return;
 } while (0);
 if ((i4 | 0) == 22) {
  HEAP16[i2 + 22 >> 1] = 0;
  _png_chunk_benign_error(i1, 63305);
  i12 = i14;
  i13 = HEAP32[i14 >> 2] | 0;
 }
 if (i13 & 64 | 0) _png_chunk_benign_error(i1, 63324);
 if (!(HEAP32[i12 >> 2] & 32)) {
  STACKTOP = i5;
  return;
 }
 _png_chunk_benign_error(i1, 63343);
 STACKTOP = i5;
 return;
}

function _png_format_buffer(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i4 = 0;
 i5 = i1 >>> 24;
 if ((i5 + -65 | 0) >>> 0 > 57 | (i5 + -91 | 0) >>> 0 < 6) {
  HEAP8[i2 >> 0] = 91;
  HEAP8[i2 + 1 >> 0] = HEAP8[67525 + (i1 >>> 28) >> 0] | 0;
  HEAP8[i2 + 2 >> 0] = HEAP8[67525 + (i5 & 15) >> 0] | 0;
  i6 = 3;
  i7 = 93;
 } else {
  i6 = 0;
  i7 = i5 & 255;
 }
 i5 = i6 + 1 | 0;
 HEAP8[i2 + i6 >> 0] = i7;
 i7 = i1 >>> 16;
 i8 = i7 & 255;
 if ((i8 + -65 | 0) >>> 0 > 57 | (i8 + -91 | 0) >>> 0 < 6) {
  HEAP8[i2 + i5 >> 0] = 91;
  HEAP8[i2 + (i6 + 2) >> 0] = HEAP8[67525 + (i1 >>> 20 & 15) >> 0] | 0;
  HEAP8[i2 + (i6 + 3) >> 0] = HEAP8[67525 + (i7 & 15) >> 0] | 0;
  i9 = i6 | 4;
  i10 = 93;
 } else {
  i9 = i5;
  i10 = i7 & 255;
 }
 i7 = i9 + 1 | 0;
 HEAP8[i2 + i9 >> 0] = i10;
 i10 = i1 >>> 8;
 i5 = i10 & 255;
 if ((i5 + -65 | 0) >>> 0 > 57 | (i5 + -91 | 0) >>> 0 < 6) {
  HEAP8[i2 + i7 >> 0] = 91;
  HEAP8[i2 + (i9 + 2) >> 0] = HEAP8[67525 + (i1 >>> 12 & 15) >> 0] | 0;
  HEAP8[i2 + (i9 + 3) >> 0] = HEAP8[67525 + (i10 & 15) >> 0] | 0;
  i11 = i9 + 4 | 0;
  i12 = 93;
 } else {
  i11 = i7;
  i12 = i10 & 255;
 }
 i10 = i11 + 1 | 0;
 HEAP8[i2 + i11 >> 0] = i12;
 i12 = i1 & 255;
 if ((i12 + -65 | 0) >>> 0 > 57 | (i12 + -91 | 0) >>> 0 < 6) {
  HEAP8[i2 + i10 >> 0] = 91;
  HEAP8[i2 + (i11 + 2) >> 0] = HEAP8[67525 + (i1 >>> 4 & 15) >> 0] | 0;
  HEAP8[i2 + (i11 + 3) >> 0] = HEAP8[67525 + (i1 & 15) >> 0] | 0;
  i13 = i11 + 4 | 0;
  i14 = 93;
 } else {
  i13 = i10;
  i14 = i1 & 255;
 }
 i1 = i13 + 1 | 0;
 HEAP8[i2 + i13 >> 0] = i14;
 if (!i3) {
  i15 = i1;
  i16 = i2 + i15 | 0;
  HEAP8[i16 >> 0] = 0;
  return;
 }
 HEAP8[i2 + i1 >> 0] = 58;
 HEAP8[i2 + (i13 + 2) >> 0] = 32;
 i1 = 0;
 i14 = i13 + 3 | 0;
 while (1) {
  i13 = HEAP8[i3 + i1 >> 0] | 0;
  if (!(i13 << 24 >> 24)) {
   i15 = i14;
   i4 = 8;
   break;
  }
  i10 = i14 + 1 | 0;
  HEAP8[i2 + i14 >> 0] = i13;
  if ((i1 | 0) < 194) {
   i1 = i1 + 1 | 0;
   i14 = i10;
  } else {
   i15 = i10;
   i4 = 8;
   break;
  }
 }
 if ((i4 | 0) == 8) {
  i16 = i2 + i15 | 0;
  HEAP8[i16 >> 0] = 0;
  return;
 }
}

function _mbrtowc(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i5 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i6;
 i8 = (i4 | 0) == 0 ? 5844108 : i4;
 i4 = HEAP32[i8 >> 2] | 0;
 L1 : do if (!i2) if (!i4) i9 = 0; else i5 = 17; else {
  i10 = (i1 | 0) == 0 ? i7 : i1;
  if (!i3) i9 = -2; else {
   if (!i4) {
    i11 = HEAP8[i2 >> 0] | 0;
    if (i11 << 24 >> 24 > -1) {
     HEAP32[i10 >> 2] = i11 & 255;
     i9 = i11 << 24 >> 24 != 0 & 1;
     break;
    }
    i11 = (___pthread_self_63() | 0) + 188 | 0;
    i12 = HEAP8[i2 >> 0] | 0;
    if (!(HEAP32[HEAP32[i11 >> 2] >> 2] | 0)) {
     HEAP32[i10 >> 2] = i12 << 24 >> 24 & 57343;
     i9 = 1;
     break;
    }
    i11 = (i12 & 255) + -194 | 0;
    if (i11 >>> 0 > 50) {
     i5 = 17;
     break;
    }
    i12 = HEAP32[13208 + (i11 << 2) >> 2] | 0;
    i11 = i3 + -1 | 0;
    if (!i11) i13 = i12; else {
     i14 = i2 + 1 | 0;
     i15 = i12;
     i16 = i11;
     i5 = 11;
    }
   } else {
    i14 = i2;
    i15 = i4;
    i16 = i3;
    i5 = 11;
   }
   L14 : do if ((i5 | 0) == 11) {
    i11 = HEAP8[i14 >> 0] | 0;
    i12 = (i11 & 255) >>> 3;
    if ((i12 + -16 | i12 + (i15 >> 26)) >>> 0 > 7) {
     i5 = 17;
     break L1;
    } else {
     i17 = i14;
     i18 = i15;
     i19 = i16;
     i20 = i11;
    }
    while (1) {
     i17 = i17 + 1 | 0;
     i18 = (i20 & 255) + -128 | i18 << 6;
     i19 = i19 + -1 | 0;
     if ((i18 | 0) >= 0) break;
     if (!i19) {
      i13 = i18;
      break L14;
     }
     i20 = HEAP8[i17 >> 0] | 0;
     if ((i20 & -64) << 24 >> 24 != -128) {
      i5 = 17;
      break L1;
     }
    }
    HEAP32[i8 >> 2] = 0;
    HEAP32[i10 >> 2] = i18;
    i9 = i3 - i19 | 0;
    break L1;
   } while (0);
   HEAP32[i8 >> 2] = i13;
   i9 = -2;
  }
 } while (0);
 if ((i5 | 0) == 17) {
  HEAP32[i8 >> 2] = 0;
  i8 = ___errno_location() | 0;
  HEAP32[i8 >> 2] = 84;
  i9 = -1;
 }
 STACKTOP = i6;
 return i9 | 0;
}

function __ZN6ImFont8AddGlyphEtfffffffff(i1, i2, f3, f4, f5, f6, f7, f8, f9, f10, f11) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 f3 = Math_fround(f3);
 f4 = Math_fround(f4);
 f5 = Math_fround(f5);
 f6 = Math_fround(f6);
 f7 = Math_fround(f7);
 f8 = Math_fround(f8);
 f9 = Math_fround(f9);
 f10 = Math_fround(f10);
 f11 = Math_fround(f11);
 var i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i12 = i1 + 16 | 0;
 i13 = HEAP32[i12 >> 2] | 0;
 i14 = i13 + 1 | 0;
 i15 = i1 + 20 | 0;
 i16 = HEAP32[i15 >> 2] | 0;
 if ((i16 | 0) <= (i13 | 0)) {
  if (!i16) i17 = 8; else i17 = ((i16 | 0) / 2 | 0) + i16 | 0;
  i18 = (i17 | 0) > (i14 | 0) ? i17 : i14;
  if ((i16 | 0) < (i18 | 0)) {
   i16 = __ZN5ImGui8MemAllocEj(i18 * 40 | 0) | 0;
   i17 = i1 + 24 | 0;
   i19 = HEAP32[i17 >> 2] | 0;
   if (!i19) i20 = i17; else {
    _memcpy(i16 | 0, i19 | 0, (HEAP32[i12 >> 2] | 0) * 40 | 0) | 0;
    __ZN5ImGui7MemFreeEPv(HEAP32[i17 >> 2] | 0);
    i20 = i17;
   }
   HEAP32[i20 >> 2] = i16;
   HEAP32[i15 >> 2] = i18;
  }
 }
 HEAP32[i12 >> 2] = i14;
 if ((i13 | 0) <= -1) ___assert_fail(38278, 56850, 1245, 38287);
 i14 = HEAP32[i1 + 24 >> 2] | 0;
 i12 = i14 + (i13 * 40 | 0) | 0;
 HEAP16[i12 >> 1] = i2;
 HEAPF32[i12 + 8 >> 2] = f3;
 HEAPF32[i12 + 12 >> 2] = f4;
 HEAPF32[i12 + 16 >> 2] = f5;
 HEAPF32[i12 + 20 >> 2] = f6;
 HEAPF32[i12 + 24 >> 2] = f7;
 HEAPF32[i12 + 28 >> 2] = f8;
 HEAPF32[i12 + 32 >> 2] = f9;
 HEAPF32[i12 + 36 >> 2] = f10;
 i2 = HEAP32[i1 + 64 >> 2] | 0;
 f6 = Math_fround(Math_fround(HEAPF32[i2 + 32 >> 2]) + f11);
 i13 = i12 + 4 | 0;
 HEAPF32[i13 >> 2] = f6;
 if (HEAP8[i2 + 28 >> 0] | 0) {
  f11 = Math_fround(~~Math_fround(f6 + Math_fround(.5)) | 0);
  HEAPF32[i13 >> 2] = f11;
 }
 HEAP8[i1 + 80 >> 0] = 1;
 f11 = Math_fround(f9 - f7);
 i13 = HEAP32[i1 + 68 >> 2] | 0;
 i2 = ~~Math_fround(Math_fround(f11 * Math_fround(HEAP32[i13 + 24 >> 2] | 0)) + Math_fround(1.99000001));
 f11 = Math_fround(f10 - f8);
 i12 = Math_imul(~~Math_fround(Math_fround(f11 * Math_fround(HEAP32[i13 + 28 >> 2] | 0)) + Math_fround(1.99000001)), i2) | 0;
 i2 = i1 + 84 | 0;
 HEAP32[i2 >> 2] = i12 + (HEAP32[i2 >> 2] | 0);
 return;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i8 = i7 + 40 | 0;
 i9 = i7 + 16 | 0;
 i10 = i7 + 8 | 0;
 i11 = i7 + 12 | 0;
 i12 = i7 + 4 | 0;
 i13 = i7;
 if (!(HEAP32[i4 + 4 >> 2] & 1)) {
  HEAP32[i10 >> 2] = -1;
  i14 = HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] | 0;
  HEAP32[i11 >> 2] = HEAP32[i2 >> 2];
  HEAP32[i12 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i8 >> 2] = HEAP32[i12 >> 2];
  i12 = FUNCTION_TABLE_iiiiiii[i14 & 63](i1, i9, i8, i4, i5, i10) | 0;
  HEAP32[i2 >> 2] = i12;
  switch (HEAP32[i10 >> 2] | 0) {
  case 0:
   {
    HEAP8[i6 >> 0] = 0;
    break;
   }
  case 1:
   {
    HEAP8[i6 >> 0] = 1;
    break;
   }
  default:
   {
    HEAP8[i6 >> 0] = 1;
    HEAP32[i5 >> 2] = 4;
   }
  }
  i15 = HEAP32[i2 >> 2] | 0;
 } else {
  __ZNKSt3__28ios_base6getlocEv(i8, i4);
  i10 = __ZNKSt3__26locale9use_facetERNS0_2idE(i8, 5845220) | 0;
  __ZNSt3__26localeD2Ev(i8);
  __ZNKSt3__28ios_base6getlocEv(i8, i4);
  i4 = __ZNKSt3__26locale9use_facetERNS0_2idE(i8, 5845228) | 0;
  __ZNSt3__26localeD2Ev(i8);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] & 63](i9, i4);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] & 63](i9 + 12 | 0, i4);
  HEAP32[i13 >> 2] = HEAP32[i3 >> 2];
  i3 = i9 + 24 | 0;
  HEAP32[i8 >> 2] = HEAP32[i13 >> 2];
  i13 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb(i2, i8, i9, i3, i10, i5, 1) | 0) == (i9 | 0) & 1;
  HEAP8[i6 >> 0] = i13;
  i13 = HEAP32[i2 >> 2] | 0;
  i2 = i3;
  do {
   i2 = i2 + -12 | 0;
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i2);
  } while ((i2 | 0) != (i9 | 0));
  i15 = i13;
 }
 STACKTOP = i7;
 return i15 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i8 = i7 + 40 | 0;
 i9 = i7 + 16 | 0;
 i10 = i7 + 8 | 0;
 i11 = i7 + 12 | 0;
 i12 = i7 + 4 | 0;
 i13 = i7;
 if (!(HEAP32[i4 + 4 >> 2] & 1)) {
  HEAP32[i10 >> 2] = -1;
  i14 = HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] | 0;
  HEAP32[i11 >> 2] = HEAP32[i2 >> 2];
  HEAP32[i12 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i8 >> 2] = HEAP32[i12 >> 2];
  i12 = FUNCTION_TABLE_iiiiiii[i14 & 63](i1, i9, i8, i4, i5, i10) | 0;
  HEAP32[i2 >> 2] = i12;
  switch (HEAP32[i10 >> 2] | 0) {
  case 0:
   {
    HEAP8[i6 >> 0] = 0;
    break;
   }
  case 1:
   {
    HEAP8[i6 >> 0] = 1;
    break;
   }
  default:
   {
    HEAP8[i6 >> 0] = 1;
    HEAP32[i5 >> 2] = 4;
   }
  }
  i15 = HEAP32[i2 >> 2] | 0;
 } else {
  __ZNKSt3__28ios_base6getlocEv(i8, i4);
  i10 = __ZNKSt3__26locale9use_facetERNS0_2idE(i8, 5845188) | 0;
  __ZNSt3__26localeD2Ev(i8);
  __ZNKSt3__28ios_base6getlocEv(i8, i4);
  i4 = __ZNKSt3__26locale9use_facetERNS0_2idE(i8, 5845204) | 0;
  __ZNSt3__26localeD2Ev(i8);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] & 63](i9, i4);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] & 63](i9 + 12 | 0, i4);
  HEAP32[i13 >> 2] = HEAP32[i3 >> 2];
  i3 = i9 + 24 | 0;
  HEAP32[i8 >> 2] = HEAP32[i13 >> 2];
  i13 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb(i2, i8, i9, i3, i10, i5, 1) | 0) == (i9 | 0) & 1;
  HEAP8[i6 >> 0] = i13;
  i13 = HEAP32[i2 >> 2] | 0;
  i2 = i3;
  do {
   i2 = i2 + -12 | 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i2);
  } while ((i2 | 0) != (i9 | 0));
  i15 = i13;
 }
 STACKTOP = i7;
 return i15 | 0;
}

function _png_inflate(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0;
 i7 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 1024 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1024);
 i9 = i8;
 if ((HEAP32[i1 + 220 >> 2] | 0) != (i2 | 0)) {
  HEAP32[i1 + 248 >> 2] = 61107;
  i10 = -2;
  STACKTOP = i8;
  return i10 | 0;
 }
 i2 = HEAP32[i6 >> 2] | 0;
 i11 = HEAP32[i4 >> 2] | 0;
 i12 = i1 + 224 | 0;
 HEAP32[i12 >> 2] = i3;
 i3 = i1 + 228 | 0;
 HEAP32[i3 >> 2] = 0;
 i13 = i1 + 240 | 0;
 HEAP32[i13 >> 2] = 0;
 i14 = (i5 | 0) == 0;
 i15 = i1 + 236 | 0;
 if (i14) {
  HEAP32[i3 >> 2] = i11;
  HEAP32[i15 >> 2] = i9;
  i16 = i2 >>> 0 < 1024 ? i2 : 1024;
  HEAP32[i13 >> 2] = i16;
  i17 = i2 - i16 | 0;
  i16 = _inflate(i12, (i17 | 0) == 0 ? 4 : 0) | 0;
  if (!i16) {
   i18 = i17;
   while (1) {
    i19 = (HEAP32[i13 >> 2] | 0) + i18 | 0;
    HEAP32[i15 >> 2] = i9;
    i20 = i19 >>> 0 < 1024 ? i19 : 1024;
    HEAP32[i13 >> 2] = i20;
    i21 = i19 - i20 | 0;
    i20 = _inflate(i12, (i21 | 0) == 0 ? 4 : 0) | 0;
    if (!i20) i18 = i21; else {
     i22 = i20;
     i23 = i21;
     i7 = 7;
     break;
    }
   }
  } else {
   i24 = i17;
   i25 = i16;
   i7 = 8;
  }
 } else {
  HEAP32[i15 >> 2] = i5;
  HEAP32[i3 >> 2] = i11;
  HEAP32[i13 >> 2] = i2;
  i2 = _inflate(i12, 4) | 0;
  if (!i2) {
   do i11 = _inflate(i12, 4) | 0; while (!(i11 | 0));
   i22 = i11;
   i23 = 0;
   i7 = 7;
  } else {
   i26 = 0;
   i27 = i2;
  }
 }
 if ((i7 | 0) == 7) if (i14) {
  i24 = i23;
  i25 = i22;
  i7 = 8;
 } else {
  i26 = i23;
  i27 = i22;
 }
 if ((i7 | 0) == 8) {
  HEAP32[i15 >> 2] = 0;
  i26 = i24;
  i27 = i25;
 }
 i25 = HEAP32[i3 >> 2] | 0;
 i3 = (HEAP32[i13 >> 2] | 0) + i26 | 0;
 if (i3 | 0) HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) - i3;
 if (i25 | 0) HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) - i25;
 _png_zstream_error(i1, i27);
 i10 = i27;
 STACKTOP = i8;
 return i10 | 0;
}

function __ZL15LogRenderedTextPK6ImVec2PKcS3_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, f14 = f0, i15 = 0, i16 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i5 = i4 + 16 | 0;
 i6 = i4;
 i7 = HEAP32[1460598] | 0;
 i8 = HEAP32[i7 + 6392 >> 2] | 0;
 L1 : do if (!i3) if ((i2 | 0) == (-1 | 0)) i9 = -1; else {
  i10 = i2;
  while (1) {
   switch (HEAP8[i10 >> 0] | 0) {
   case 0:
    {
     i9 = i10;
     break L1;
     break;
    }
   case 35:
    {
     i11 = i10 + 1 | 0;
     if ((HEAP8[i11 >> 0] | 0) == 35) {
      i9 = i10;
      break L1;
     } else i12 = i11;
     break;
    }
   default:
    i12 = i10 + 1 | 0;
   }
   if ((i12 | 0) == (-1 | 0)) {
    i9 = -1;
    break L1;
   } else i10 = i12;
  }
 } else i9 = i3; while (0);
 if (!i1) i13 = 0; else {
  f14 = Math_fround(HEAPF32[i1 + 4 >> 2]);
  i1 = i8 + 244 | 0;
  i3 = f14 > Math_fround(Math_fround(HEAPF32[i1 >> 2]) + Math_fround(1.0));
  HEAPF32[i1 >> 2] = f14;
  i13 = i3;
 }
 i3 = i7 + 11112 | 0;
 i7 = HEAP32[i3 >> 2] | 0;
 i1 = HEAP32[i8 + 248 >> 2] | 0;
 if ((i7 | 0) > (i1 | 0)) {
  HEAP32[i3 >> 2] = i1;
  i15 = i1;
 } else i15 = i7;
 i7 = i1 - i15 << 2;
 i15 = i2;
 while (1) {
  L18 : do if (i15 >>> 0 < i9 >>> 0) {
   i1 = i15;
   while (1) {
    if ((HEAP8[i1 >> 0] | 0) == 10) {
     i16 = i1;
     break L18;
    }
    i1 = i1 + 1 | 0;
    if (i1 >>> 0 >= i9 >>> 0) {
     i16 = 0;
     break;
    }
   }
  } else i16 = 0; while (0);
  i1 = (i16 | 0) == 0;
  i3 = i1 ? i9 : i16;
  do if (!((i3 | 0) == 0 | i1 & (i3 | 0) == (i15 | 0))) {
   i8 = i3 - i15 | 0;
   if (i13 | (i15 | 0) != (i2 | 0)) {
    HEAP32[i6 >> 2] = i7;
    HEAP32[i6 + 4 >> 2] = 5849359;
    HEAP32[i6 + 8 >> 2] = i8;
    HEAP32[i6 + 12 >> 2] = i15;
    __ZN5ImGui7LogTextEPKcz(32685, i6);
    break;
   } else {
    HEAP32[i5 >> 2] = i8;
    HEAP32[i5 + 4 >> 2] = i2;
    __ZN5ImGui7LogTextEPKcz(32694, i5);
    break;
   }
  } while (0);
  if (i1) break; else i15 = i3 + 1 | 0;
 }
 STACKTOP = i4;
 return;
}

function _png_do_bgr(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i3 = HEAP8[i1 + 8 >> 0] | 0;
 if (!(i3 & 2)) return;
 i4 = HEAP32[i1 >> 2] | 0;
 switch (HEAP8[i1 + 9 >> 0] | 0) {
 case 8:
  {
   switch (i3 << 24 >> 24) {
   case 2:
    {
     if (!i4) return; else {
      i5 = 0;
      i6 = i2;
     }
     while (1) {
      i1 = HEAP8[i6 >> 0] | 0;
      i7 = i6 + 2 | 0;
      HEAP8[i6 >> 0] = HEAP8[i7 >> 0] | 0;
      HEAP8[i7 >> 0] = i1;
      i5 = i5 + 1 | 0;
      if ((i5 | 0) == (i4 | 0)) break; else i6 = i6 + 3 | 0;
     }
     return;
    }
   case 6:
    {
     if (!i4) return; else {
      i8 = i2;
      i9 = 0;
     }
     while (1) {
      i6 = HEAP8[i8 >> 0] | 0;
      i5 = i8 + 2 | 0;
      HEAP8[i8 >> 0] = HEAP8[i5 >> 0] | 0;
      HEAP8[i5 >> 0] = i6;
      i9 = i9 + 1 | 0;
      if ((i9 | 0) == (i4 | 0)) break; else i8 = i8 + 4 | 0;
     }
     return;
    }
   default:
    return;
   }
   break;
  }
 case 16:
  {
   switch (i3 << 24 >> 24) {
   case 2:
    {
     if (!i4) return; else {
      i10 = 0;
      i11 = i2;
     }
     while (1) {
      i3 = HEAP8[i11 >> 0] | 0;
      i8 = i11 + 4 | 0;
      HEAP8[i11 >> 0] = HEAP8[i8 >> 0] | 0;
      HEAP8[i8 >> 0] = i3;
      i3 = i11 + 1 | 0;
      i8 = HEAP8[i3 >> 0] | 0;
      i9 = i11 + 5 | 0;
      HEAP8[i3 >> 0] = HEAP8[i9 >> 0] | 0;
      HEAP8[i9 >> 0] = i8;
      i10 = i10 + 1 | 0;
      if ((i10 | 0) == (i4 | 0)) break; else i11 = i11 + 6 | 0;
     }
     return;
    }
   case 6:
    {
     if (!i4) return; else {
      i12 = 0;
      i13 = i2;
     }
     while (1) {
      i2 = HEAP8[i13 >> 0] | 0;
      i11 = i13 + 4 | 0;
      HEAP8[i13 >> 0] = HEAP8[i11 >> 0] | 0;
      HEAP8[i11 >> 0] = i2;
      i2 = i13 + 1 | 0;
      i11 = HEAP8[i2 >> 0] | 0;
      i10 = i13 + 5 | 0;
      HEAP8[i2 >> 0] = HEAP8[i10 >> 0] | 0;
      HEAP8[i10 >> 0] = i11;
      i12 = i12 + 1 | 0;
      if ((i12 | 0) == (i4 | 0)) break; else i13 = i13 + 8 | 0;
     }
     return;
    }
   default:
    return;
   }
   break;
  }
 default:
  return;
 }
}

function _png_check_IHDR(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i9 = 0;
 if (!i2) {
  _png_warning(i1, 63762);
  i10 = 1;
 } else {
  if ((i2 | 0) < 0) {
   _png_warning(i1, 63790);
   i11 = 1;
  } else i11 = 0;
  if ((i2 + 7 & -8) >>> 0 < 536870905) i10 = i11; else {
   _png_warning(i1, 63818);
   i10 = 1;
  }
 }
 if ((HEAP32[i1 + 748 >> 2] | 0) >>> 0 < i2 >>> 0) {
  _png_warning(i1, 63865);
  i12 = 1;
 } else i12 = i10;
 if (!i3) {
  _png_warning(i1, 63904);
  i13 = 1;
 } else if ((i3 | 0) < 0) {
  _png_warning(i1, 63933);
  i13 = 1;
 } else i13 = i12;
 if ((HEAP32[i1 + 752 >> 2] | 0) >>> 0 < i3 >>> 0) {
  _png_warning(i1, 63962);
  i14 = 1;
 } else i14 = i13;
 switch (i4 | 0) {
 case 1:
 case 2:
 case 4:
 case 8:
 case 16:
  {
   i15 = i14;
   break;
  }
 default:
  {
   _png_warning(i1, 64002);
   i15 = 1;
  }
 }
 i14 = i5 | 4;
 if (i5 >>> 0 > 6 | (i14 | 0) == 5) {
  _png_warning(i1, 64028);
  i16 = 1;
 } else i16 = i15;
 if ((i4 | 0) > 8 & (i5 | 0) == 3) i9 = 21; else if ((i4 | 0) < 8 & ((i5 | 0) == 4 | (i14 | 0) == 6)) i9 = 21; else i17 = i16;
 if ((i9 | 0) == 21) {
  _png_warning(i1, 64055);
  i17 = 1;
 }
 if ((i6 | 0) > 1) {
  _png_warning(i1, 64104);
  i18 = 1;
 } else i18 = i17;
 if (!i7) i19 = i18; else {
  _png_warning(i1, 64137);
  i19 = 1;
 }
 i18 = i1 + 208 | 0;
 if (HEAP32[i18 >> 2] & 4096 | 0) if (HEAP32[i1 + 708 >> 2] | 0) _png_warning(i1, 64172);
 if (!i8) i20 = i19; else {
  if ((i8 | 0) == 64 ? (HEAP32[i1 + 708 >> 2] & 4 | 0) != 0 : 0) {
   i8 = HEAP32[i18 >> 2] | 0;
   if ((i14 | 0) == 6 & (i8 & 4096 | 0) == 0) {
    i21 = i19;
    i22 = i8;
   } else i9 = 32;
  } else i9 = 32;
  if ((i9 | 0) == 32) {
   _png_warning(i1, 64221);
   i21 = 1;
   i22 = HEAP32[i18 >> 2] | 0;
  }
  if (!(i22 & 4096)) i20 = i21; else {
   _png_warning(i1, 64251);
   _png_error(i1, 64281);
  }
 }
 if ((i20 | 0) == 1) _png_error(i1, 64281); else return;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i6 + 4 | 0;
 i8 = i6;
 if (!(HEAP32[i3 + 4 >> 2] & 1)) {
  i9 = HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] | 0;
  HEAP32[i8 >> 2] = HEAP32[i2 >> 2];
  HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
  i10 = FUNCTION_TABLE_iiiiii[i9 & 31](i1, i7, i3, i4, i5 & 1) | 0;
 } else {
  __ZNKSt3__28ios_base6getlocEv(i7, i3);
  i3 = __ZNKSt3__26locale9use_facetERNS0_2idE(i7, 5845228) | 0;
  __ZNSt3__26localeD2Ev(i7);
  i4 = HEAP32[i3 >> 2] | 0;
  if (i5) FUNCTION_TABLE_vii[HEAP32[i4 + 24 >> 2] & 63](i7, i3); else FUNCTION_TABLE_vii[HEAP32[i4 + 28 >> 2] & 63](i7, i3);
  i3 = i7 + 8 + 3 | 0;
  i4 = HEAP8[i3 >> 0] | 0;
  i5 = HEAP32[i7 >> 2] | 0;
  i1 = i7 + 4 | 0;
  i9 = i4 << 24 >> 24 < 0 ? i5 : i7;
  i8 = i4;
  i4 = i5;
  while (1) {
   i5 = i8 << 24 >> 24 < 0;
   if ((i9 | 0) == ((i5 ? i4 : i7) + ((i5 ? HEAP32[i1 >> 2] | 0 : i8 & 255) << 2) | 0)) break;
   i5 = HEAP32[i9 >> 2] | 0;
   i11 = HEAP32[i2 >> 2] | 0;
   if (i11 | 0) {
    i12 = i11 + 24 | 0;
    i13 = HEAP32[i12 >> 2] | 0;
    if ((i13 | 0) == (HEAP32[i11 + 28 >> 2] | 0)) {
     i14 = HEAP32[(HEAP32[i11 >> 2] | 0) + 52 >> 2] | 0;
     i15 = __ZNSt3__211char_traitsIwE11to_int_typeEw(i5) | 0;
     i16 = FUNCTION_TABLE_iii[i14 & 31](i11, i15) | 0;
    } else {
     HEAP32[i12 >> 2] = i13 + 4;
     HEAP32[i13 >> 2] = i5;
     i16 = __ZNSt3__211char_traitsIwE11to_int_typeEw(i5) | 0;
    }
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i16, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) HEAP32[i2 >> 2] = 0;
   }
   i9 = i9 + 4 | 0;
   i8 = HEAP8[i3 >> 0] | 0;
   i4 = HEAP32[i7 >> 2] | 0;
  }
  i4 = HEAP32[i2 >> 2] | 0;
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i7);
  i10 = i4;
 }
 STACKTOP = i6;
 return i10 | 0;
}

function __ZN4Mesh15addUniqueVertexERNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i3 = i1 + 12 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 i5 = i1 + 16 | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 i7 = i4;
 i8 = i6;
 L1 : do if ((i4 | 0) == (i6 | 0)) i9 = i4; else {
  i10 = HEAP8[i2 + 11 >> 0] | 0;
  i11 = i10 << 24 >> 24 < 0;
  i12 = i11 ? HEAP32[i2 + 4 >> 2] | 0 : i10 & 255;
  i10 = i11 ? HEAP32[i2 >> 2] | 0 : i2;
  i11 = (i12 | 0) == 0;
  i13 = i4;
  while (1) {
   i14 = HEAP8[i13 + 11 >> 0] | 0;
   i15 = i14 << 24 >> 24 < 0;
   i16 = i14 & 255;
   do if (((i15 ? HEAP32[i13 + 4 >> 2] | 0 : i16) | 0) == (i12 | 0)) {
    i14 = HEAP32[i13 >> 2] | 0;
    i17 = i15 ? i14 : i13;
    if (i15) {
     if (i11) {
      i9 = i13;
      break L1;
     }
     if (!(_memcmp(i17, i10, i12) | 0)) {
      i9 = i13;
      break L1;
     } else break;
    }
    if (i11) {
     i9 = i13;
     break L1;
    }
    if ((HEAP8[i10 >> 0] | 0) == (i14 & 255) << 24 >> 24) {
     i14 = i13;
     i17 = i16;
     i18 = i10;
     do {
      i17 = i17 + -1 | 0;
      i14 = i14 + 1 | 0;
      if (!i17) {
       i9 = i13;
       break L1;
      }
      i18 = i18 + 1 | 0;
     } while ((HEAP8[i14 >> 0] | 0) == (HEAP8[i18 >> 0] | 0));
    }
   } while (0);
   i13 = i13 + 12 | 0;
   if ((i13 | 0) == (i6 | 0)) {
    i9 = i6;
    break;
   }
  }
 } while (0);
 i4 = (i9 - i7 | 0) / 12 | 0;
 if ((i4 | 0) != ((i8 - i7 | 0) / 12 | 0 | 0)) {
  i19 = i4;
  return i19 | 0;
 }
 if ((i6 | 0) == (HEAP32[i1 + 20 >> 2] | 0)) {
  __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIRKS6_EEvOT_(i3, i2);
  i20 = HEAP32[i5 >> 2] | 0;
 } else {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_(i6, i2);
  i2 = (HEAP32[i5 >> 2] | 0) + 12 | 0;
  HEAP32[i5 >> 2] = i2;
  i20 = i2;
 }
 i19 = ((i20 - (HEAP32[i3 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
 return i19 | 0;
}

function __ZN10ImDrawList12PushClipRectE6ImVec2S0_b(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var f5 = f0, f6 = f0, f7 = f0, f8 = f0, f9 = f0, f10 = f0, f11 = f0, f12 = f0, i13 = 0, i14 = 0, i15 = 0, f16 = f0, f17 = f0, f18 = f0, f19 = f0, f20 = f0, i21 = 0, i22 = 0, i23 = 0;
 f5 = Math_fround(HEAPF32[i2 >> 2]);
 f6 = Math_fround(HEAPF32[i2 + 4 >> 2]);
 f7 = Math_fround(HEAPF32[i3 >> 2]);
 f8 = Math_fround(HEAPF32[i3 + 4 >> 2]);
 i3 = i1 + 60 | 0;
 i2 = HEAP32[i3 >> 2] | 0;
 if (i4) if (!i2) {
  f9 = f5;
  f10 = f7;
  f11 = f8;
  f12 = f6;
  i13 = 0;
 } else {
  i4 = HEAP32[i1 + 68 >> 2] | 0;
  i14 = i2 + -1 | 0;
  i15 = i4 + (i14 << 4) | 0;
  f16 = Math_fround(HEAPF32[i15 >> 2]);
  f17 = Math_fround(HEAPF32[i15 + 4 >> 2]);
  f18 = Math_fround(HEAPF32[i15 + 8 >> 2]);
  f19 = Math_fround(HEAPF32[i15 + 12 >> 2]);
  f20 = f5 < f16 ? f16 : f5;
  f16 = f6 < f17 ? f17 : f6;
  f17 = f7 > f18 ? f18 : f7;
  if (f8 > f19) {
   f9 = f20;
   f10 = f17;
   f11 = f19;
   f12 = f16;
   i13 = i2;
  } else {
   f9 = f20;
   f10 = f17;
   f11 = f8;
   f12 = f16;
   i13 = i2;
  }
 } else {
  f9 = f5;
  f10 = f7;
  f11 = f8;
  f12 = f6;
  i13 = i2;
 }
 f6 = f9 >= f10 ? f9 : f10;
 f10 = f12 >= f11 ? f12 : f11;
 i2 = i1 + 64 | 0;
 if ((i13 | 0) == (HEAP32[i2 >> 2] | 0)) {
  i15 = i13 + 1 | 0;
  if (!i13) i21 = 8; else i21 = ((i13 | 0) / 2 | 0) + i13 | 0;
  i14 = (i21 | 0) > (i15 | 0) ? i21 : i15;
  if ((i13 | 0) < (i14 | 0)) {
   i15 = __ZN5ImGui8MemAllocEj(i14 << 4) | 0;
   i21 = i1 + 68 | 0;
   i4 = HEAP32[i21 >> 2] | 0;
   if (!i4) i22 = i21; else {
    _memcpy(i15 | 0, i4 | 0, HEAP32[i3 >> 2] << 4 | 0) | 0;
    __ZN5ImGui7MemFreeEPv(HEAP32[i21 >> 2] | 0);
    i22 = i21;
   }
   HEAP32[i22 >> 2] = i15;
   HEAP32[i2 >> 2] = i14;
   i23 = HEAP32[i3 >> 2] | 0;
  } else i23 = i13;
 } else i23 = i13;
 i13 = HEAP32[i1 + 68 >> 2] | 0;
 i14 = i13 + (i23 << 4) | 0;
 HEAPF32[i14 >> 2] = f9;
 HEAPF32[i14 + 4 >> 2] = f12;
 HEAPF32[i14 + 8 >> 2] = f6;
 HEAPF32[i14 + 12 >> 2] = f10;
 HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
 __ZN10ImDrawList14UpdateClipRectEv(i1);
 return;
}

function _png_set_pCAL(i1, i2, i3, i4, i5, i6, i7, i8, i9) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 var i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i10 = 0;
 if ((i1 | 0) == 0 | (i2 | 0) == 0 | (i3 | 0) == 0 | (i8 | 0) == 0) return;
 i11 = (i7 | 0) > 0;
 if (i11 & (i9 | 0) == 0) return;
 i12 = (_strlen(i3) | 0) + 1 | 0;
 if (i6 >>> 0 > 3) _png_error(i1, 62760);
 if (i7 >>> 0 > 255) _png_error(i1, 62787);
 L13 : do if (i7 | 0) {
  i13 = 0;
  while (1) {
   i14 = HEAP32[i9 + (i13 << 2) >> 2] | 0;
   if (!i14) {
    i10 = 11;
    break;
   }
   i13 = i13 + 1 | 0;
   if (!(_png_check_fp_string(i14, _strlen(i14) | 0) | 0)) {
    i10 = 11;
    break;
   }
   if ((i13 | 0) >= (i7 | 0)) break L13;
  }
  if ((i10 | 0) == 11) _png_error(i1, 62816);
 } while (0);
 i10 = _png_malloc_warn(i1, i12) | 0;
 HEAP32[i2 + 208 >> 2] = i10;
 if (!i10) {
  _png_warning(i1, 62850);
  return;
 }
 _memcpy(i10 | 0, i3 | 0, i12 | 0) | 0;
 HEAP32[i2 + 212 >> 2] = i4;
 HEAP32[i2 + 216 >> 2] = i5;
 HEAP8[i2 + 228 >> 0] = i6;
 HEAP8[i2 + 229 >> 0] = i7;
 i6 = (_strlen(i8) | 0) + 1 | 0;
 i5 = _png_malloc_warn(i1, i6) | 0;
 HEAP32[i2 + 220 >> 2] = i5;
 if (!i5) {
  _png_warning(i1, 62887);
  return;
 }
 _memcpy(i5 | 0, i8 | 0, i6 | 0) | 0;
 i6 = (i7 << 2) + 4 | 0;
 i8 = _png_malloc_warn(i1, i6) | 0;
 i5 = i2 + 224 | 0;
 HEAP32[i5 >> 2] = i8;
 if (!i8) {
  _png_warning(i1, 62922);
  return;
 }
 _memset(i8 | 0, 0, i6 | 0) | 0;
 L34 : do if (i11) {
  i6 = 0;
  while (1) {
   i8 = i9 + (i6 << 2) | 0;
   i4 = (_strlen(HEAP32[i8 >> 2] | 0) | 0) + 1 | 0;
   i12 = _png_malloc_warn(i1, i4) | 0;
   HEAP32[(HEAP32[i5 >> 2] | 0) + (i6 << 2) >> 2] = i12;
   i12 = HEAP32[(HEAP32[i5 >> 2] | 0) + (i6 << 2) >> 2] | 0;
   if (!i12) break;
   _memcpy(i12 | 0, HEAP32[i8 >> 2] | 0, i4 | 0) | 0;
   i6 = i6 + 1 | 0;
   if ((i6 | 0) >= (i7 | 0)) break L34;
  }
  _png_warning(i1, 62958);
  return;
 } while (0);
 i1 = i2 + 8 | 0;
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 1024;
 i1 = i2 + 232 | 0;
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 128;
 return;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i6 + 4 | 0;
 i8 = i6;
 if (!(HEAP32[i3 + 4 >> 2] & 1)) {
  i9 = HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] | 0;
  HEAP32[i8 >> 2] = HEAP32[i2 >> 2];
  HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
  i10 = FUNCTION_TABLE_iiiiii[i9 & 31](i1, i7, i3, i4, i5 & 1) | 0;
 } else {
  __ZNKSt3__28ios_base6getlocEv(i7, i3);
  i3 = __ZNKSt3__26locale9use_facetERNS0_2idE(i7, 5845204) | 0;
  __ZNSt3__26localeD2Ev(i7);
  i4 = HEAP32[i3 >> 2] | 0;
  if (i5) FUNCTION_TABLE_vii[HEAP32[i4 + 24 >> 2] & 63](i7, i3); else FUNCTION_TABLE_vii[HEAP32[i4 + 28 >> 2] & 63](i7, i3);
  i3 = i7 + 11 | 0;
  i4 = HEAP8[i3 >> 0] | 0;
  i5 = HEAP32[i7 >> 2] | 0;
  i1 = i7 + 4 | 0;
  i9 = i4 << 24 >> 24 < 0 ? i5 : i7;
  i8 = i4;
  i4 = i5;
  while (1) {
   i5 = i8 << 24 >> 24 < 0;
   if ((i9 | 0) == ((i5 ? i4 : i7) + (i5 ? HEAP32[i1 >> 2] | 0 : i8 & 255) | 0)) break;
   i5 = HEAP8[i9 >> 0] | 0;
   i11 = HEAP32[i2 >> 2] | 0;
   if (i11 | 0) {
    i12 = i11 + 24 | 0;
    i13 = HEAP32[i12 >> 2] | 0;
    if ((i13 | 0) == (HEAP32[i11 + 28 >> 2] | 0)) {
     i14 = HEAP32[(HEAP32[i11 >> 2] | 0) + 52 >> 2] | 0;
     i15 = __ZNSt3__211char_traitsIcE11to_int_typeEc(i5) | 0;
     i16 = FUNCTION_TABLE_iii[i14 & 31](i11, i15) | 0;
    } else {
     HEAP32[i12 >> 2] = i13 + 1;
     HEAP8[i13 >> 0] = i5;
     i16 = __ZNSt3__211char_traitsIcE11to_int_typeEc(i5) | 0;
    }
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i16, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) HEAP32[i2 >> 2] = 0;
   }
   i9 = i9 + 1 | 0;
   i8 = HEAP8[i3 >> 0] | 0;
   i4 = HEAP32[i7 >> 2] | 0;
  }
  i4 = HEAP32[i2 >> 2] | 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i7);
  i10 = i4;
 }
 STACKTOP = i6;
 return i10 | 0;
}

function _png_safe_execute(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176);
 i6 = 4;
 i7 = _malloc(40) | 0;
 HEAP32[i7 >> 2] = 0;
 i8 = i5 + 164 | 0;
 i9 = i5 + 160 | 0;
 i10 = i5 + 156 | 0;
 i11 = i5;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i10 >> 2] = HEAP32[(HEAP32[HEAP32[i8 >> 2] >> 2] | 0) + 8 >> 2];
 i7 = _saveSetjmp(i11, 1, i7 | 0, i6 | 0) | 0;
 i6 = tempRet0;
 __THREW__ = 0;
 i1 = __THREW__;
 __THREW__ = 0;
 if ((i1 | 0) != 0 & (threwValue | 0) != 0) {
  i12 = _testSetjmp(HEAP32[i1 >> 2] | 0, i7 | 0, i6 | 0) | 0;
  if (!i12) _longjmp(i1 | 0, threwValue | 0);
  tempRet0 = threwValue;
 } else i12 = -1;
 if ((i12 | 0) == 1) i13 = tempRet0; else i13 = 0;
 while (1) {
  HEAP32[i9 >> 2] = (i13 | 0) == 0 & 1;
  if (HEAP32[i9 >> 2] | 0) {
   HEAP32[(HEAP32[HEAP32[i8 >> 2] >> 2] | 0) + 8 >> 2] = i11;
   __THREW__ = 0;
   i12 = invoke_ii(i2 | 0, i3 | 0) | 0;
   i1 = __THREW__;
   __THREW__ = 0;
   if ((i1 | 0) != 0 & (threwValue | 0) != 0) {
    i14 = _testSetjmp(HEAP32[i1 >> 2] | 0, i7 | 0, i6 | 0) | 0;
    if (!i14) _longjmp(i1 | 0, threwValue | 0);
    tempRet0 = threwValue;
   } else i14 = -1;
   if ((i14 | 0) == 1) {
    i13 = tempRet0;
    continue;
   }
   HEAP32[i9 >> 2] = i12;
  }
  HEAP32[(HEAP32[HEAP32[i8 >> 2] >> 2] | 0) + 8 >> 2] = HEAP32[i10 >> 2];
  if (HEAP32[i9 >> 2] | 0) {
   i4 = 9;
   break;
  }
  __THREW__ = 0;
  invoke_vi(127, HEAP32[i8 >> 2] | 0);
  i12 = __THREW__;
  __THREW__ = 0;
  if ((i12 | 0) != 0 & (threwValue | 0) != 0) {
   i15 = _testSetjmp(HEAP32[i12 >> 2] | 0, i7 | 0, i6 | 0) | 0;
   if (!i15) _longjmp(i12 | 0, threwValue | 0);
   tempRet0 = threwValue;
  } else i15 = -1;
  if ((i15 | 0) == 1) i13 = tempRet0; else break;
 }
 if ((i4 | 0) == 9) {
  i16 = HEAP32[i9 >> 2] | 0;
  _free(i7 | 0);
  STACKTOP = i5;
  return i16 | 0;
 }
 i16 = HEAP32[i9 >> 2] | 0;
 _free(i7 | 0);
 STACKTOP = i5;
 return i16 | 0;
}

function __ZN10ImDrawList7AddRectERK6ImVec2S2_jfif(i1, i2, i3, i4, f5, i6, f7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 f5 = Math_fround(f5);
 i6 = i6 | 0;
 f7 = Math_fround(f7);
 var i8 = 0, i9 = 0, i10 = 0, f11 = f0, f12 = f0, i13 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i9 = i8 + 8 | 0;
 i10 = i8;
 if (i4 >>> 0 < 16777216) {
  STACKTOP = i8;
  return;
 }
 if (!(HEAP32[i1 + 36 >> 2] & 1)) {
  f11 = Math_fround(Math_fround(HEAPF32[i2 >> 2]) + Math_fround(.5));
  f12 = Math_fround(Math_fround(HEAPF32[i2 + 4 >> 2]) + Math_fround(.5));
  HEAPF32[i9 >> 2] = f11;
  HEAPF32[i9 + 4 >> 2] = f12;
  f12 = Math_fround(Math_fround(HEAPF32[i3 >> 2]) + Math_fround(-.49000001));
  f11 = Math_fround(Math_fround(HEAPF32[i3 + 4 >> 2]) + Math_fround(-.49000001));
  HEAPF32[i10 >> 2] = f12;
  HEAPF32[i10 + 4 >> 2] = f11;
  __ZN10ImDrawList8PathRectERK6ImVec2S2_fi(i1, i9, i10, f5, i6);
 } else {
  f11 = Math_fround(Math_fround(HEAPF32[i2 >> 2]) + Math_fround(.5));
  f12 = Math_fround(Math_fround(HEAPF32[i2 + 4 >> 2]) + Math_fround(.5));
  HEAPF32[i9 >> 2] = f11;
  HEAPF32[i9 + 4 >> 2] = f12;
  f12 = Math_fround(Math_fround(HEAPF32[i3 >> 2]) + Math_fround(-.5));
  f11 = Math_fround(Math_fround(HEAPF32[i3 + 4 >> 2]) + Math_fround(-.5));
  HEAPF32[i10 >> 2] = f12;
  HEAPF32[i10 + 4 >> 2] = f11;
  __ZN10ImDrawList8PathRectERK6ImVec2S2_fi(i1, i9, i10, f5, i6);
 }
 i6 = i1 + 92 | 0;
 __ZN10ImDrawList11AddPolylineEPK6ImVec2ijbf(i1, HEAP32[i6 >> 2] | 0, HEAP32[i1 + 84 >> 2] | 0, i4, 1, f7);
 i4 = i1 + 84 | 0;
 i10 = i1 + 88 | 0;
 i1 = HEAP32[i10 >> 2] | 0;
 if ((i1 | 0) < 0) {
  i9 = ((i1 | 0) / 2 | 0) + i1 | 0;
  i3 = (i9 | 0) > 0 ? i9 : 0;
  if ((i1 | 0) < (i3 | 0)) {
   i1 = __ZN5ImGui8MemAllocEj(i3 << 3) | 0;
   i9 = HEAP32[i6 >> 2] | 0;
   if (!i9) i13 = i6; else {
    _memcpy(i1 | 0, i9 | 0, HEAP32[i4 >> 2] << 3 | 0) | 0;
    __ZN5ImGui7MemFreeEPv(HEAP32[i6 >> 2] | 0);
    i13 = i6;
   }
   HEAP32[i13 >> 2] = i1;
   HEAP32[i10 >> 2] = i3;
  }
 }
 HEAP32[i4 >> 2] = 0;
 STACKTOP = i8;
 return;
}

function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorItNS5_ItEEEEEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE12__find_equalIS7_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISM_EERKT_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i4 = 0;
 i5 = i1 + 4 | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 if (!i6) {
  HEAP32[i2 >> 2] = i5;
  i7 = i5;
  return i7 | 0;
 }
 i5 = HEAP8[i3 + 11 >> 0] | 0;
 i8 = i5 << 24 >> 24 < 0;
 i9 = i8 ? HEAP32[i3 + 4 >> 2] | 0 : i5 & 255;
 i5 = i8 ? HEAP32[i3 >> 2] | 0 : i3;
 i3 = i1 + 4 | 0;
 i1 = i6;
 while (1) {
  i6 = i1 + 16 | 0;
  i8 = HEAP8[i6 + 11 >> 0] | 0;
  i10 = i8 << 24 >> 24 < 0;
  i11 = i10 ? HEAP32[i1 + 20 >> 2] | 0 : i8 & 255;
  i8 = i11 >>> 0 < i9 >>> 0;
  i12 = i8 ? i11 : i9;
  if (!i12) i4 = 6; else {
   i13 = _memcmp(i5, i10 ? HEAP32[i6 >> 2] | 0 : i6, i12) | 0;
   if (!i13) i4 = 6; else if ((i13 | 0) < 0) i4 = 8; else i4 = 10;
  }
  if ((i4 | 0) == 6) {
   i4 = 0;
   if (i9 >>> 0 < i11 >>> 0) i4 = 8; else i4 = 10;
  }
  if ((i4 | 0) == 8) {
   i4 = 0;
   i13 = HEAP32[i1 >> 2] | 0;
   if (!i13) {
    i4 = 9;
    break;
   } else {
    i14 = i1;
    i15 = i13;
   }
  } else if ((i4 | 0) == 10) {
   i4 = 0;
   i13 = i9 >>> 0 < i11 >>> 0 ? i9 : i11;
   if (!i13) i4 = 12; else {
    i11 = _memcmp(i10 ? HEAP32[i6 >> 2] | 0 : i6, i5, i13) | 0;
    if (!i11) i4 = 12; else if ((i11 | 0) >= 0) {
     i4 = 16;
     break;
    }
   }
   if ((i4 | 0) == 12) {
    i4 = 0;
    if (!i8) {
     i4 = 16;
     break;
    }
   }
   i16 = i1 + 4 | 0;
   i8 = HEAP32[i16 >> 2] | 0;
   if (!i8) {
    i4 = 15;
    break;
   } else {
    i14 = i16;
    i15 = i8;
   }
  }
  i3 = i14;
  i1 = i15;
 }
 if ((i4 | 0) == 9) {
  HEAP32[i2 >> 2] = i1;
  i7 = i1;
  return i7 | 0;
 } else if ((i4 | 0) == 15) {
  HEAP32[i2 >> 2] = i1;
  i7 = i16;
  return i7 | 0;
 } else if ((i4 | 0) == 16) {
  HEAP32[i2 >> 2] = i1;
  i7 = i3;
  return i7 | 0;
 }
 return 0;
}

function __ZL22stbtt__tesselate_curveP12stbtt__pointPifffffffi(i1, i2, f3, f4, f5, f6, f7, f8, f9, i10) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 f3 = Math_fround(f3);
 f4 = Math_fround(f4);
 f5 = Math_fround(f5);
 f6 = Math_fround(f6);
 f7 = Math_fround(f7);
 f8 = Math_fround(f8);
 f9 = Math_fround(f9);
 i10 = i10 | 0;
 var i11 = 0, f12 = f0, f13 = f0, f14 = f0, f15 = f0, f16 = f0, i17 = 0, f18 = f0, f19 = f0, f20 = f0;
 i11 = 0;
 f12 = Math_fround(Math_fround(Math_fround(Math_fround(f5 * Math_fround(2.0)) + f3) + f7) * Math_fround(.25));
 f13 = Math_fround(Math_fround(Math_fround(Math_fround(f6 * Math_fround(2.0)) + f4) + f8) * Math_fround(.25));
 if ((i10 | 0) > 16) return;
 f14 = f3;
 f15 = f4;
 f16 = f5;
 f5 = f6;
 i17 = i10;
 f6 = Math_fround(Math_fround(Math_fround(f7 + f3) * Math_fround(.5)) - f12);
 f3 = Math_fround(Math_fround(Math_fround(f8 + f4) * Math_fround(.5)) - f13);
 f4 = f12;
 f12 = f13;
 while (1) {
  if (!(Math_fround(Math_fround(f6 * f6) + Math_fround(f3 * f3)) > f9)) break;
  i10 = i17;
  i17 = i17 + 1 | 0;
  __ZL22stbtt__tesselate_curveP12stbtt__pointPifffffffi(i1, i2, f14, f15, Math_fround(Math_fround(f14 + f16) * Math_fround(.5)), Math_fround(Math_fround(f15 + f5) * Math_fround(.5)), f4, f12, f9, i17);
  f16 = Math_fround(Math_fround(f16 + f7) * Math_fround(.5));
  f5 = Math_fround(Math_fround(f5 + f8) * Math_fround(.5));
  f13 = Math_fround(Math_fround(Math_fround(f4 + Math_fround(f16 * Math_fround(2.0))) + f7) * Math_fround(.25));
  f18 = Math_fround(Math_fround(Math_fround(f12 + Math_fround(f5 * Math_fround(2.0))) + f8) * Math_fround(.25));
  f6 = Math_fround(Math_fround(Math_fround(f4 + f7) * Math_fround(.5)) - f13);
  f3 = Math_fround(Math_fround(Math_fround(f12 + f8) * Math_fround(.5)) - f18);
  if ((i10 | 0) > 15) {
   i11 = 8;
   break;
  } else {
   f19 = f12;
   f20 = f4;
   f4 = f13;
   f12 = f18;
   f15 = f19;
   f14 = f20;
  }
 }
 if ((i11 | 0) == 8) return;
 i11 = HEAP32[i2 >> 2] | 0;
 if (i1 | 0) {
  i17 = i1 + (i11 << 3) | 0;
  HEAPF32[i17 >> 2] = f7;
  HEAPF32[i17 + 4 >> 2] = f8;
 }
 HEAP32[i2 >> 2] = i11 + 1;
 return;
}

function __ZL28NavScrollToBringItemIntoViewP11ImGuiWindowRK6ImRect(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var f3 = f0, f4 = f0, f5 = f0, f6 = f0, f7 = f0, i8 = 0, f9 = f0, f10 = f0, f11 = f0, f12 = f0;
 f3 = Math_fround(Math_fround(HEAPF32[i1 + 496 >> 2]) + Math_fround(-1.0));
 f4 = Math_fround(Math_fround(HEAPF32[i1 + 500 >> 2]) + Math_fround(-1.0));
 f5 = Math_fround(Math_fround(HEAPF32[i1 + 504 >> 2]) + Math_fround(1.0));
 f6 = Math_fround(Math_fround(HEAPF32[i1 + 508 >> 2]) + Math_fround(1.0));
 f7 = Math_fround(HEAPF32[i2 >> 2]);
 if (f7 >= f3) if (Math_fround(HEAPF32[i2 + 4 >> 2]) >= f4) if (Math_fround(HEAPF32[i2 + 8 >> 2]) <= f5) if (Math_fround(HEAPF32[i2 + 12 >> 2]) <= f6) return;
 i8 = HEAP32[1460598] | 0;
 do if (HEAP8[i1 + 116 >> 0] | 0) {
  if (f7 < f3) {
   f9 = Math_fround(f7 - Math_fround(HEAPF32[i1 + 12 >> 2]));
   f10 = Math_fround(f9 + Math_fround(HEAPF32[i1 + 84 >> 2]));
   f9 = Math_fround(f10 - Math_fround(HEAPF32[i8 + 5424 >> 2]));
   HEAPF32[i1 + 92 >> 2] = f9;
   HEAPF32[i1 + 100 >> 2] = Math_fround(0.0);
   break;
  }
  f9 = Math_fround(HEAPF32[i2 + 8 >> 2]);
  if (f9 >= f5) {
   f10 = Math_fround(f9 - Math_fround(HEAPF32[i1 + 12 >> 2]));
   f9 = Math_fround(f10 + Math_fround(HEAPF32[i1 + 84 >> 2]));
   f10 = Math_fround(f9 + Math_fround(HEAPF32[i8 + 5424 >> 2]));
   HEAPF32[i1 + 92 >> 2] = f10;
   HEAPF32[i1 + 100 >> 2] = Math_fround(1.0);
  }
 } while (0);
 f5 = Math_fround(HEAPF32[i2 + 4 >> 2]);
 do if (f5 < f4) {
  f7 = Math_fround(f5 - Math_fround(HEAPF32[i1 + 16 >> 2]));
  f3 = Math_fround(f7 + Math_fround(HEAPF32[i1 + 88 >> 2]));
  f11 = Math_fround(0.0);
  f12 = Math_fround(f3 - Math_fround(HEAPF32[i8 + 5428 >> 2]));
 } else {
  f3 = Math_fround(HEAPF32[i2 + 12 >> 2]);
  if (!(f3 >= f6)) return; else {
   f7 = Math_fround(f3 - Math_fround(HEAPF32[i1 + 16 >> 2]));
   f3 = Math_fround(f7 + Math_fround(HEAPF32[i1 + 88 >> 2]));
   f11 = Math_fround(1.0);
   f12 = Math_fround(f3 + Math_fround(HEAPF32[i8 + 5428 >> 2]));
   break;
  }
 } while (0);
 HEAPF32[i1 + 96 >> 2] = f12;
 HEAPF32[i1 + 104 >> 2] = f11;
 return;
}

function __ZN13ActionManager20releaseActionCommandEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i2 + 12 | 0;
 i4 = i2 + 8 | 0;
 i5 = i2 + 4 | 0;
 i6 = i2;
 i7 = i1 + 44 | 0;
 if (!(HEAP8[i7 >> 0] | 0)) i8 = i1 + 4 | 0; else {
  i9 = i1 + 4 | 0;
  if (!(__ZN8LineTool7getLineERiS0_S0_S0_(i9, i3, i5, i4, i6) | 0)) {
   __ZN8LineTool5resetEv(i9);
   HEAP8[i7 >> 0] = 0;
   HEAP32[i1 + 28 >> 2] = 0;
   STACKTOP = i2;
   return;
  }
  i10 = HEAP32[i3 >> 2] | 0;
  i11 = HEAP32[i4 >> 2] | 0;
  if ((i10 | 0) > (i11 | 0)) {
   HEAP32[i3 >> 2] = i11;
   HEAP32[i4 >> 2] = i10;
   i12 = i11;
   i13 = i10;
  } else {
   i12 = i10;
   i13 = i11;
  }
  i11 = HEAP32[i5 >> 2] | 0;
  i10 = HEAP32[i6 >> 2] | 0;
  if ((i11 | 0) > (i10 | 0)) {
   HEAP32[i5 >> 2] = i10;
   HEAP32[i6 >> 2] = i11;
   i14 = i11;
   i15 = i10;
  } else {
   i14 = i10;
   i15 = i11;
  }
  L14 : do if ((i12 | 0) <= (i13 | 0)) {
   i11 = i1 + 32 | 0;
   i10 = i1 + 36 | 0;
   i3 = i1 + 40 | 0;
   i16 = i12;
   i17 = i15;
   i18 = i14;
   i19 = i13;
   while (1) {
    if ((i17 | 0) > (i18 | 0)) {
     i20 = i19;
     i21 = i18;
    } else {
     i22 = i17;
     while (1) {
      i23 = __ZN7CityMap7getTileEjj(HEAP32[i1 >> 2] | 0, i16, i22) | 0;
      HEAP32[i11 >> 2] = i23;
      HEAP32[i10 >> 2] = i16;
      HEAP32[i3 >> 2] = i22;
      __ZN13ActionManager17performTileActionEv(i1);
      i24 = HEAP32[i6 >> 2] | 0;
      if ((i22 | 0) < (i24 | 0)) i22 = i22 + 1 | 0; else break;
     }
     i20 = HEAP32[i4 >> 2] | 0;
     i21 = i24;
    }
    if ((i16 | 0) >= (i20 | 0)) break L14;
    i16 = i16 + 1 | 0;
    i17 = HEAP32[i5 >> 2] | 0;
    i18 = i21;
    i19 = i20;
   }
  } while (0);
  i8 = i9;
 }
 __ZN8LineTool5resetEv(i8);
 HEAP8[i7 >> 0] = 0;
 HEAP32[i1 + 28 >> 2] = 0;
 STACKTOP = i2;
 return;
}

function __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7;
 i9 = HEAP32[i1 >> 2] | 0;
 if (!i9) {
  i10 = 0;
  STACKTOP = i7;
  return i10 | 0;
 }
 i11 = i4;
 i4 = i2;
 i12 = i11 - i4 | 0;
 i13 = i5 + 12 | 0;
 i5 = HEAP32[i13 >> 2] | 0;
 i14 = (i5 | 0) > (i12 | 0) ? i5 - i12 | 0 : 0;
 i12 = i3;
 i5 = i12 - i4 | 0;
 if ((i5 | 0) > 0) if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i9 >> 2] | 0) + 48 >> 2] & 31](i9, i2, i5) | 0) != (i5 | 0)) {
  HEAP32[i1 >> 2] = 0;
  i10 = 0;
  STACKTOP = i7;
  return i10 | 0;
 }
 do if ((i14 | 0) > 0) {
  HEAP32[i8 >> 2] = 0;
  HEAP32[i8 + 4 >> 2] = 0;
  HEAP32[i8 + 8 >> 2] = 0;
  if (i14 >>> 0 < 11) {
   i5 = i8 + 11 | 0;
   HEAP8[i5 >> 0] = i14;
   i15 = i8;
   i16 = i5;
   i17 = i8;
  } else {
   i5 = i14 + 16 & -16;
   i2 = __Znwj(i5) | 0;
   HEAP32[i8 >> 2] = i2;
   HEAP32[i8 + 8 >> 2] = i5 | -2147483648;
   HEAP32[i8 + 4 >> 2] = i14;
   i15 = i2;
   i16 = i8 + 11 | 0;
   i17 = i8;
  }
  _memset(i15 | 0, i6 | 0, i14 | 0) | 0;
  HEAP8[i15 + i14 >> 0] = 0;
  if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i9 >> 2] | 0) + 48 >> 2] & 31](i9, (HEAP8[i16 >> 0] | 0) < 0 ? HEAP32[i17 >> 2] | 0 : i8, i14) | 0) == (i14 | 0)) {
   if ((HEAP8[i16 >> 0] | 0) < 0) __ZdlPv(HEAP32[i17 >> 2] | 0);
   break;
  }
  HEAP32[i1 >> 2] = 0;
  if ((HEAP8[i16 >> 0] | 0) < 0) __ZdlPv(HEAP32[i17 >> 2] | 0);
  i10 = 0;
  STACKTOP = i7;
  return i10 | 0;
 } while (0);
 i17 = i11 - i12 | 0;
 if ((i17 | 0) > 0) if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i9 >> 2] | 0) + 48 >> 2] & 31](i9, i3, i17) | 0) != (i17 | 0)) {
  HEAP32[i1 >> 2] = 0;
  i10 = 0;
  STACKTOP = i7;
  return i10 | 0;
 }
 HEAP32[i13 >> 2] = 0;
 i10 = i9;
 STACKTOP = i7;
 return i10 | 0;
}

function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i3 = i1 + 4 | 0;
 i4 = HEAP32[i1 >> 2] | 0;
 i5 = ((HEAP32[i3 >> 2] | 0) - i4 | 0) / 12 | 0;
 i6 = i5 + 1 | 0;
 if (i6 >>> 0 > 357913941) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv(i1);
 i7 = i1 + 8 | 0;
 i8 = ((HEAP32[i7 >> 2] | 0) - i4 | 0) / 12 | 0;
 i4 = i8 << 1;
 i9 = i8 >>> 0 < 178956970 ? (i4 >>> 0 < i6 >>> 0 ? i6 : i4) : 357913941;
 do if (!i9) i10 = 0; else if (i9 >>> 0 > 357913941) {
  i4 = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc(i4, 29699);
  HEAP32[i4 >> 2] = 21232;
  ___cxa_throw(i4 | 0, 3136, 120);
 } else {
  i10 = __Znwj(i9 * 12 | 0) | 0;
  break;
 } while (0);
 i4 = i10 + (i5 * 12 | 0) | 0;
 i5 = i4;
 i6 = i10 + (i9 * 12 | 0) | 0;
 HEAP32[i4 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 i2 = i4 + 12 | 0;
 i9 = HEAP32[i1 >> 2] | 0;
 i10 = HEAP32[i3 >> 2] | 0;
 if ((i10 | 0) == (i9 | 0)) {
  i11 = i5;
  i12 = i9;
  i13 = i9;
 } else {
  i8 = i10;
  i10 = i5;
  i5 = i4;
  do {
   i4 = i5 + -12 | 0;
   i8 = i8 + -12 | 0;
   HEAP32[i4 >> 2] = HEAP32[i8 >> 2];
   HEAP32[i4 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
   HEAP32[i4 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
   HEAP32[i8 >> 2] = 0;
   HEAP32[i8 + 4 >> 2] = 0;
   HEAP32[i8 + 8 >> 2] = 0;
   i5 = i10 + -12 | 0;
   i10 = i5;
  } while ((i8 | 0) != (i9 | 0));
  i11 = i10;
  i12 = HEAP32[i1 >> 2] | 0;
  i13 = HEAP32[i3 >> 2] | 0;
 }
 HEAP32[i1 >> 2] = i11;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i7 >> 2] = i6;
 i6 = i12;
 if ((i13 | 0) != (i6 | 0)) {
  i7 = i13;
  do {
   i7 = i7 + -12 | 0;
   if ((HEAP8[i7 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[i7 >> 2] | 0);
  } while ((i7 | 0) != (i6 | 0));
 }
 if (!i12) return;
 __ZdlPv(i12);
 return;
}

function _png_handle_IHDR(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4;
 i6 = i1 + 208 | 0;
 i7 = HEAP32[i6 >> 2] | 0;
 if (i7 & 1 | 0) _png_chunk_error(i1, 61181);
 if ((i3 | 0) != 13) _png_chunk_error(i1, 61194);
 HEAP32[i6 >> 2] = i7 | 1;
 _png_read_data(i1, i5, 13);
 _png_calculate_crc(i1, i5, 13);
 _png_crc_finish(i1, 0) | 0;
 i7 = (HEAPU8[i5 + 1 >> 0] | 0) << 16 | (HEAPU8[i5 >> 0] | 0) << 24 | (HEAPU8[i5 + 2 >> 0] | 0) << 8 | (HEAPU8[i5 + 3 >> 0] | 0);
 if ((i7 | 0) < 0) _png_error(i1, 63728);
 i6 = (HEAPU8[i5 + 5 >> 0] | 0) << 16 | (HEAPU8[i5 + 4 >> 0] | 0) << 24 | (HEAPU8[i5 + 6 >> 0] | 0) << 8 | (HEAPU8[i5 + 7 >> 0] | 0);
 if ((i6 | 0) < 0) _png_error(i1, 63728);
 i3 = HEAP8[i5 + 8 >> 0] | 0;
 i8 = i3 & 255;
 i9 = HEAP8[i5 + 9 >> 0] | 0;
 i10 = i9 & 255;
 i11 = HEAP8[i5 + 10 >> 0] | 0;
 i12 = i11 & 255;
 i13 = HEAP8[i5 + 11 >> 0] | 0;
 i14 = i13 & 255;
 i15 = HEAP8[i5 + 12 >> 0] | 0;
 i5 = i15 & 255;
 HEAP32[i1 + 348 >> 2] = i7;
 HEAP32[i1 + 352 >> 2] = i6;
 HEAP8[i1 + 436 >> 0] = i3;
 HEAP8[i1 + 432 >> 0] = i15;
 HEAP8[i1 + 435 >> 0] = i9;
 HEAP8[i1 + 712 >> 0] = i13;
 HEAP8[i1 + 744 >> 0] = i11;
 switch (i9 << 24 >> 24) {
 case 6:
  {
   i16 = 4;
   break;
  }
 case 4:
  {
   i16 = 2;
   break;
  }
 case 2:
  {
   i16 = 3;
   break;
  }
 default:
  i16 = 1;
 }
 HEAP8[i1 + 439 >> 0] = i16;
 i9 = Math_imul(i8, i16 & 255) | 0;
 HEAP8[i1 + 438 >> 0] = i9;
 i16 = i9 & 255;
 if (i16 >>> 0 > 7) {
  i17 = Math_imul(i16 >>> 3, i7) | 0;
  i18 = i1 + 364 | 0;
  HEAP32[i18 >> 2] = i17;
  _png_set_IHDR(i1, i2, i7, i6, i8, i10, i5, i12, i14);
  STACKTOP = i4;
  return;
 } else {
  i17 = ((Math_imul(i16, i7) | 0) + 7 | 0) >>> 3;
  i18 = i1 + 364 | 0;
  HEAP32[i18 >> 2] = i17;
  _png_set_IHDR(i1, i2, i7, i6, i8, i10, i5, i12, i14);
  STACKTOP = i4;
  return;
 }
}

function __ZN10ImDrawList11PrimReserveEii(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i4 = (HEAP32[i1 + 8 >> 2] | 0) + ((HEAP32[i1 >> 2] | 0) + -1 << 5) | 0;
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + i2;
 i4 = i1 + 24 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 i6 = i5 + i3 | 0;
 i3 = i1 + 28 | 0;
 i7 = HEAP32[i3 >> 2] | 0;
 if ((i7 | 0) < (i6 | 0)) {
  if (!i7) i8 = 8; else i8 = ((i7 | 0) / 2 | 0) + i7 | 0;
  i9 = (i8 | 0) > (i6 | 0) ? i8 : i6;
  if ((i7 | 0) < (i9 | 0)) {
   i7 = __ZN5ImGui8MemAllocEj(i9 * 20 | 0) | 0;
   i8 = i1 + 32 | 0;
   i10 = HEAP32[i8 >> 2] | 0;
   if (!i10) i11 = i8; else {
    _memcpy(i7 | 0, i10 | 0, (HEAP32[i4 >> 2] | 0) * 20 | 0) | 0;
    __ZN5ImGui7MemFreeEPv(HEAP32[i8 >> 2] | 0);
    i11 = i8;
   }
   HEAP32[i11 >> 2] = i7;
   HEAP32[i3 >> 2] = i9;
  }
 }
 HEAP32[i4 >> 2] = i6;
 HEAP32[i1 + 52 >> 2] = (HEAP32[i1 + 32 >> 2] | 0) + (i5 * 20 | 0);
 i5 = i1 + 12 | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 i4 = i6 + i2 | 0;
 i2 = i1 + 16 | 0;
 i9 = HEAP32[i2 >> 2] | 0;
 if ((i9 | 0) >= (i4 | 0)) {
  HEAP32[i5 >> 2] = i4;
  i12 = i1 + 20 | 0;
  i13 = HEAP32[i12 >> 2] | 0;
  i14 = i13 + (i6 << 1) | 0;
  i15 = i1 + 56 | 0;
  HEAP32[i15 >> 2] = i14;
  return;
 }
 if (!i9) i16 = 8; else i16 = ((i9 | 0) / 2 | 0) + i9 | 0;
 i3 = (i16 | 0) > (i4 | 0) ? i16 : i4;
 if ((i9 | 0) >= (i3 | 0)) {
  HEAP32[i5 >> 2] = i4;
  i12 = i1 + 20 | 0;
  i13 = HEAP32[i12 >> 2] | 0;
  i14 = i13 + (i6 << 1) | 0;
  i15 = i1 + 56 | 0;
  HEAP32[i15 >> 2] = i14;
  return;
 }
 i9 = __ZN5ImGui8MemAllocEj(i3 << 1) | 0;
 i16 = i1 + 20 | 0;
 i7 = HEAP32[i16 >> 2] | 0;
 if (!i7) i17 = i16; else {
  _memcpy(i9 | 0, i7 | 0, HEAP32[i5 >> 2] << 1 | 0) | 0;
  __ZN5ImGui7MemFreeEPv(HEAP32[i16 >> 2] | 0);
  i17 = i16;
 }
 HEAP32[i17 >> 2] = i9;
 HEAP32[i2 >> 2] = i3;
 HEAP32[i5 >> 2] = i4;
 i12 = i1 + 20 | 0;
 i13 = HEAP32[i12 >> 2] | 0;
 i14 = i13 + (i6 << 1) | 0;
 i15 = i1 + 56 | 0;
 HEAP32[i15 >> 2] = i14;
 return;
}

function __ZL20stbtt__cff_get_indexP10stbtt__buf(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i3 = i2 + 4 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 i5 = HEAP32[i2 + 8 >> 2] | 0;
 i6 = i4 + 1 | 0;
 if ((i5 | 0) > (i4 | 0)) {
  i7 = HEAP32[i2 >> 2] | 0;
  HEAP32[i3 >> 2] = i6;
  i8 = HEAP8[i7 + i4 >> 0] | 0;
  i9 = i6;
 } else {
  i8 = 0;
  i9 = i4;
 }
 i6 = i9 + 1 | 0;
 if ((i9 | 0) < (i5 | 0)) {
  i7 = HEAP32[i2 >> 2] | 0;
  HEAP32[i3 >> 2] = i6;
  i10 = HEAP8[i7 + i9 >> 0] | 0;
  i11 = i6;
 } else {
  i10 = 0;
  i11 = i9;
 }
 i9 = (i8 & 255) << 8 | i10 & 255;
 do if (!i9) i12 = i11; else {
  if ((i11 | 0) >= (i5 | 0)) ___assert_fail(55371, 50789, 1164, 55432);
  i10 = i11 + 1 | 0;
  i8 = HEAP32[i2 >> 2] | 0;
  HEAP32[i3 >> 2] = i10;
  i6 = HEAP8[i8 + i11 >> 0] | 0;
  i7 = i6 & 255;
  if ((i6 + -1 & 255) >= 4) ___assert_fail(55371, 50789, 1164, 55432);
  i6 = i10 + (Math_imul(i9, i7) | 0) | 0;
  if ((i6 | 0) < 0 | (i5 | 0) < (i6 | 0)) ___assert_fail(50765, 50789, 1116, 50855);
  HEAP32[i3 >> 2] = i6;
  if ((i7 + -1 | 0) >>> 0 < 4) {
   i13 = 0;
   i14 = 0;
   i15 = i6;
  } else ___assert_fail(55400, 50789, 1129, 55417);
  while (1) {
   i6 = i15 + 1 | 0;
   if ((i15 | 0) < (i5 | 0)) {
    HEAP32[i3 >> 2] = i6;
    i16 = HEAP8[i8 + i15 >> 0] | 0;
    i17 = i6;
   } else {
    i16 = 0;
    i17 = i15;
   }
   i13 = i13 << 8 | i16 & 255;
   i14 = i14 + 1 | 0;
   if ((i14 | 0) == (i7 | 0)) break; else i15 = i17;
  }
  i7 = i13 + -1 + i17 | 0;
  if ((i7 | 0) < 0 | (i5 | 0) < (i7 | 0)) ___assert_fail(50765, 50789, 1116, 50855); else {
   HEAP32[i3 >> 2] = i7;
   i12 = i7;
   break;
  }
 } while (0);
 i3 = i12 - i4 | 0;
 HEAP32[i1 >> 2] = 0;
 i12 = i1 + 8 | 0;
 HEAP32[i12 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 if ((i3 | i4 | 0) < 0) return;
 if ((i5 | 0) < (i4 | 0) | (i5 - i4 | 0) < (i3 | 0)) return;
 HEAP32[i1 >> 2] = (HEAP32[i2 >> 2] | 0) + i4;
 HEAP32[i12 >> 2] = i3;
 return;
}

function __ZNSt3__210__stdinbufIwE9pbackfailEj(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i5 = i4 + 16 | 0;
 i6 = i4 + 8 | 0;
 i7 = i4 + 4 | 0;
 i8 = i4;
 i9 = __ZNSt3__211char_traitsIwE11eq_int_typeEjj(i2, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0;
 i10 = i1 + 52 | 0;
 i11 = (HEAP8[i10 >> 0] | 0) != 0;
 do if (i9) if (i11) i12 = i2; else {
  i13 = HEAP32[i1 + 48 >> 2] | 0;
  i14 = ((__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i13, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) ^ 1) & 1;
  HEAP8[i10 >> 0] = i14;
  i12 = i13;
 } else {
  if (i11) {
   i13 = i1 + 48 | 0;
   i14 = __ZNSt3__211char_traitsIwE12to_char_typeEj(HEAP32[i13 >> 2] | 0) | 0;
   HEAP32[i7 >> 2] = i14;
   i14 = HEAP32[i1 + 36 >> 2] | 0;
   switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i14 >> 2] | 0) + 12 >> 2] & 15](i14, HEAP32[i1 + 40 >> 2] | 0, i7, i7 + 4 | 0, i8, i5, i5 + 8 | 0, i6) | 0) {
   case 1:
   case 2:
    {
     i3 = 11;
     break;
    }
   case 3:
    {
     HEAP8[i5 >> 0] = HEAP32[i13 >> 2];
     HEAP32[i6 >> 2] = i5 + 1;
     i3 = 8;
     break;
    }
   default:
    i3 = 8;
   }
   L9 : do if ((i3 | 0) == 8) {
    i14 = i1 + 32 | 0;
    while (1) {
     i15 = HEAP32[i6 >> 2] | 0;
     if (i15 >>> 0 <= i5 >>> 0) {
      i16 = 1;
      i17 = 0;
      break L9;
     }
     i18 = i15 + -1 | 0;
     HEAP32[i6 >> 2] = i18;
     if ((_ungetc(HEAP8[i18 >> 0] | 0, HEAP32[i14 >> 2] | 0) | 0) == -1) {
      i3 = 11;
      break;
     }
    }
   } while (0);
   if ((i3 | 0) == 11) {
    i16 = 0;
    i17 = __ZNSt3__211char_traitsIwE3eofEv() | 0;
   }
   if (i16) i19 = i13; else {
    i12 = i17;
    break;
   }
  } else i19 = i1 + 48 | 0;
  HEAP32[i19 >> 2] = i2;
  HEAP8[i10 >> 0] = 1;
  i12 = i2;
 } while (0);
 STACKTOP = i4;
 return i12 | 0;
}

function __ZNKSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i3 = HEAP32[i2 + 48 >> 2] | 0;
 if (i3 & 16 | 0) {
  i4 = i2 + 44 | 0;
  i5 = HEAP32[i4 >> 2] | 0;
  i6 = HEAP32[i2 + 24 >> 2] | 0;
  if (i5 >>> 0 < i6 >>> 0) {
   HEAP32[i4 >> 2] = i6;
   i7 = i6;
  } else i7 = i5;
  i5 = HEAP32[i2 + 20 >> 2] | 0;
  HEAP32[i1 >> 2] = 0;
  HEAP32[i1 + 4 >> 2] = 0;
  HEAP32[i1 + 8 >> 2] = 0;
  i6 = i7 - i5 | 0;
  if (i6 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i1);
  if (i6 >>> 0 < 11) {
   HEAP8[i1 + 11 >> 0] = i6;
   i8 = i1;
  } else {
   i4 = i6 + 16 & -16;
   i9 = __Znwj(i4) | 0;
   HEAP32[i1 >> 2] = i9;
   HEAP32[i1 + 8 >> 2] = i4 | -2147483648;
   HEAP32[i1 + 4 >> 2] = i6;
   i8 = i9;
  }
  if ((i5 | 0) == (i7 | 0)) i10 = i8; else {
   i9 = i8;
   i4 = i5;
   while (1) {
    HEAP8[i9 >> 0] = HEAP8[i4 >> 0] | 0;
    i4 = i4 + 1 | 0;
    if ((i4 | 0) == (i7 | 0)) break; else i9 = i9 + 1 | 0;
   }
   i10 = i8 + i6 | 0;
  }
  HEAP8[i10 >> 0] = 0;
  return;
 }
 if (!(i3 & 8)) {
  HEAP32[i1 >> 2] = 0;
  HEAP32[i1 + 4 >> 2] = 0;
  HEAP32[i1 + 8 >> 2] = 0;
  return;
 }
 i3 = HEAP32[i2 + 8 >> 2] | 0;
 i10 = HEAP32[i2 + 16 >> 2] | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 i2 = i10 - i3 | 0;
 if (i2 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i1);
 if (i2 >>> 0 < 11) {
  HEAP8[i1 + 11 >> 0] = i2;
  i11 = i1;
 } else {
  i6 = i2 + 16 & -16;
  i8 = __Znwj(i6) | 0;
  HEAP32[i1 >> 2] = i8;
  HEAP32[i1 + 8 >> 2] = i6 | -2147483648;
  HEAP32[i1 + 4 >> 2] = i2;
  i11 = i8;
 }
 if ((i3 | 0) == (i10 | 0)) i12 = i11; else {
  i8 = i11;
  i1 = i3;
  while (1) {
   HEAP8[i8 >> 0] = HEAP8[i1 >> 0] | 0;
   i1 = i1 + 1 | 0;
   if ((i1 | 0) == (i10 | 0)) break; else i8 = i8 + 1 | 0;
  }
  i12 = i11 + i2 | 0;
 }
 HEAP8[i12 >> 0] = 0;
 return;
}

function __ZNSt3__210__stdinbufIcE9pbackfailEi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i5 = i4 + 16 | 0;
 i6 = i4 + 4 | 0;
 i7 = i4 + 8 | 0;
 i8 = i4;
 i9 = __ZNSt3__211char_traitsIcE11eq_int_typeEii(i2, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0;
 i10 = i1 + 52 | 0;
 i11 = (HEAP8[i10 >> 0] | 0) != 0;
 do if (i9) if (i11) i12 = i2; else {
  i13 = HEAP32[i1 + 48 >> 2] | 0;
  i14 = ((__ZNSt3__211char_traitsIcE11eq_int_typeEii(i13, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) ^ 1) & 1;
  HEAP8[i10 >> 0] = i14;
  i12 = i13;
 } else {
  if (i11) {
   i13 = i1 + 48 | 0;
   i14 = __ZNSt3__211char_traitsIcE12to_char_typeEi(HEAP32[i13 >> 2] | 0) | 0;
   HEAP8[i7 >> 0] = i14;
   i14 = HEAP32[i1 + 36 >> 2] | 0;
   switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i14 >> 2] | 0) + 12 >> 2] & 15](i14, HEAP32[i1 + 40 >> 2] | 0, i7, i7 + 1 | 0, i8, i5, i5 + 8 | 0, i6) | 0) {
   case 1:
   case 2:
    {
     i3 = 11;
     break;
    }
   case 3:
    {
     HEAP8[i5 >> 0] = HEAP32[i13 >> 2];
     HEAP32[i6 >> 2] = i5 + 1;
     i3 = 8;
     break;
    }
   default:
    i3 = 8;
   }
   L9 : do if ((i3 | 0) == 8) {
    i14 = i1 + 32 | 0;
    while (1) {
     i15 = HEAP32[i6 >> 2] | 0;
     if (i15 >>> 0 <= i5 >>> 0) {
      i16 = 1;
      i17 = 0;
      break L9;
     }
     i18 = i15 + -1 | 0;
     HEAP32[i6 >> 2] = i18;
     if ((_ungetc(HEAP8[i18 >> 0] | 0, HEAP32[i14 >> 2] | 0) | 0) == -1) {
      i3 = 11;
      break;
     }
    }
   } while (0);
   if ((i3 | 0) == 11) {
    i16 = 0;
    i17 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
   }
   if (i16) i19 = i13; else {
    i12 = i17;
    break;
   }
  } else i19 = i1 + 48 | 0;
  HEAP32[i19 >> 2] = i2;
  HEAP8[i10 >> 0] = 1;
  i12 = i2;
 } while (0);
 STACKTOP = i4;
 return i12 | 0;
}

function __ZNSt3__26locale5__impC2ERKS1_PNS0_5facetEl(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i5;
 HEAP32[i1 + 4 >> 2] = -1;
 HEAP32[i1 >> 2] = 20628;
 i7 = i1 + 8 | 0;
 i8 = i2 + 8 | 0;
 i9 = i2 + 12 | 0;
 i10 = ((HEAP32[i9 >> 2] | 0) - (HEAP32[i8 >> 2] | 0) >> 2) + 1 | 0;
 __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej(i7, i10 >>> 0 > 28 ? i10 : 28);
 i10 = i1 + 144 | 0;
 HEAP32[i10 >> 2] = 0;
 HEAP32[i10 + 4 >> 2] = 0;
 HEAP32[i10 + 8 >> 2] = 0;
 i11 = __ZNSt3__211char_traitsIcE6lengthEPKc(72607) | 0;
 if (i11 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i10);
 if (i11 >>> 0 < 11) {
  HEAP8[i10 + 11 >> 0] = i11;
  i12 = i10;
 } else {
  i13 = i11 + 16 & -16;
  i14 = __Znwj(i13) | 0;
  HEAP32[i10 >> 2] = i14;
  HEAP32[i1 + 152 >> 2] = i13 | -2147483648;
  HEAP32[i1 + 148 >> 2] = i11;
  i12 = i14;
 }
 __ZNSt3__211char_traitsIcE4copyEPcPKcj(i12, 72607, i11) | 0;
 HEAP8[i6 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc(i12 + i11 | 0, i6);
 __ZNSt3__214__shared_count12__add_sharedEv(i3);
 if ((i1 | 0) != (i2 | 0)) __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6assignIPS3_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS3_NS_15iterator_traitsISA_E9referenceEEE5valueEvE4typeESA_SA_(i7, HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0);
 i2 = 0;
 while (1) {
  if (i2 >>> 0 >= (HEAP32[i9 >> 2] | 0) - (HEAP32[i8 >> 2] | 0) >> 2 >>> 0) break;
  i6 = HEAP32[(HEAP32[i7 >> 2] | 0) + (i2 << 2) >> 2] | 0;
  if (i6 | 0) __ZNSt3__214__shared_count12__add_sharedEv(i6);
  i2 = i2 + 1 | 0;
 }
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i3, i4);
 if (i3 | 0) __ZNSt3__212_GLOBAL__N_17releaseclEPNS_6locale5facetE(i3);
 STACKTOP = i5;
 return;
}

function _scandir(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 i5 = _opendir(i1) | 0;
 i1 = ___errno_location() | 0;
 i6 = HEAP32[i1 >> 2] | 0;
 do if (!i5) i7 = -1; else {
  i1 = (i3 | 0) == 0;
  i8 = 0;
  i9 = 0;
  i10 = 0;
  i11 = 0;
  i12 = 0;
  i13 = 0;
  L3 : while (1) {
   do {
    i14 = ___errno_location() | 0;
    HEAP32[i14 >> 2] = 0;
    i15 = _readdir(i5) | 0;
    if (!i15) {
     i16 = i10;
     i17 = i12;
     i18 = i11;
     break L3;
    }
    if (i1) break;
   } while (!(FUNCTION_TABLE_ii[i3 & 127](i15) | 0));
   if (i9 >>> 0 < i8 >>> 0) {
    i19 = i8;
    i20 = i10;
    i21 = i11;
    i22 = i12;
    i23 = i13;
   } else {
    i14 = i8 << 1 | 1;
    if (i14 >>> 0 > 1073741823) {
     i16 = i10;
     i17 = i12;
     i18 = i11;
     break;
    }
    i24 = _realloc(i13, i14 << 2) | 0;
    if (!i24) {
     i16 = i10;
     i17 = i12;
     i18 = i11;
     break;
    }
    i19 = i14;
    i20 = i24;
    i21 = i24;
    i22 = i24;
    i23 = i24;
   }
   i24 = i15 + 8 | 0;
   i14 = _malloc(HEAPU16[i24 >> 1] | 0) | 0;
   HEAP32[i20 + (i9 << 2) >> 2] = i14;
   if (!i14) {
    i16 = i20;
    i17 = i22;
    i18 = i21;
    break;
   }
   _memcpy(i14 | 0, i15 | 0, HEAPU16[i24 >> 1] | 0 | 0) | 0;
   i8 = i19;
   i9 = i9 + 1 | 0;
   i10 = i20;
   i11 = i21;
   i12 = i22;
   i13 = i23;
  }
  _closedir(i5) | 0;
  i13 = ___errno_location() | 0;
  if (!(HEAP32[i13 >> 2] | 0)) {
   i13 = ___errno_location() | 0;
   HEAP32[i13 >> 2] = i6;
   if (i4 | 0) _qsort(i18, i9, 4, i4);
   HEAP32[i2 >> 2] = i18;
   i7 = i9;
   break;
  } else {
   if (!((i16 | 0) == 0 | (i9 | 0) == 0)) {
    i13 = i9;
    do {
     i13 = i13 + -1 | 0;
     _free(HEAP32[i16 + (i13 << 2) >> 2] | 0);
    } while ((i13 | 0) != 0);
   }
   _free(i17);
   i7 = -1;
   break;
  }
 } while (0);
 return i7 | 0;
}

function __ZN5ImGui8ItemSizeERK6ImVec2f(i1, f2) {
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, f7 = f0, f8 = f0, f9 = f0, i10 = 0, i11 = 0, f12 = f0, i13 = 0, f14 = f0, f15 = f0;
 i3 = HEAP32[1460598] | 0;
 i4 = i3 + 6392 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 if (HEAP8[i5 + 123 >> 0] | 0) return;
 i6 = i5 + 228 | 0;
 f7 = Math_fround(HEAPF32[i6 >> 2]);
 f8 = Math_fround(HEAPF32[i1 + 4 >> 2]);
 f9 = f7 >= f8 ? f7 : f8;
 i10 = i5 + 232 | 0;
 f8 = Math_fround(HEAPF32[i10 >> 2]);
 i11 = i5 + 196 | 0;
 f7 = Math_fround(HEAPF32[i11 >> 2]);
 f12 = Math_fround(f7 + Math_fround(HEAPF32[i1 >> 2]));
 i1 = i5 + 200 | 0;
 i13 = HEAP32[i1 >> 2] | 0;
 HEAPF32[i5 + 204 >> 2] = f12;
 HEAP32[i5 + 208 >> 2] = i13;
 f7 = Math_fround(HEAPF32[i5 + 12 >> 2]);
 f14 = Math_fround(f7 + Math_fround(HEAPF32[i5 + 436 >> 2]));
 f7 = Math_fround(~~Math_fround(f14 + Math_fround(HEAPF32[i5 + 444 >> 2])) | 0);
 f14 = Math_fround(f9 + (HEAP32[tempDoublePtr >> 2] = i13, Math_fround(HEAPF32[tempDoublePtr >> 2])));
 i13 = i3 + 5428 | 0;
 f15 = Math_fround(~~Math_fround(f14 + Math_fround(HEAPF32[i13 >> 2])) | 0);
 HEAPF32[i11 >> 2] = f7;
 HEAPF32[i1 >> 2] = f15;
 i1 = i5 + 220 | 0;
 f7 = Math_fround(HEAPF32[i1 >> 2]);
 HEAPF32[i1 >> 2] = f7 >= f12 ? f7 : f12;
 i1 = i5 + 224 | 0;
 f12 = Math_fround(HEAPF32[i1 >> 2]);
 f7 = Math_fround(f15 - Math_fround(HEAPF32[i13 >> 2]));
 HEAPF32[i1 >> 2] = f12 >= f7 ? f12 : f7;
 HEAPF32[i5 + 236 >> 2] = f9;
 HEAPF32[i5 + 240 >> 2] = f8 >= f2 ? f8 : f2;
 HEAPF32[i10 >> 2] = Math_fround(0.0);
 HEAPF32[i6 >> 2] = Math_fround(0.0);
 if ((HEAP32[i5 + 344 >> 2] | 0) != 1) return;
 i5 = HEAP32[i4 >> 2] | 0;
 HEAP8[i5 + 120 >> 0] = 1;
 if (HEAP8[i5 + 123 >> 0] | 0) return;
 f2 = Math_fround(HEAPF32[i3 + 5424 >> 2]);
 f8 = Math_fround(f2 + Math_fround(HEAPF32[i5 + 204 >> 2]));
 HEAPF32[i5 + 196 >> 2] = f8;
 HEAP32[i5 + 200 >> 2] = HEAP32[i5 + 208 >> 2];
 HEAP32[i5 + 228 >> 2] = HEAP32[i5 + 236 >> 2];
 HEAP32[i5 + 232 >> 2] = HEAP32[i5 + 240 >> 2];
 return;
}
function _png_handle_tEXt(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i6 = i5;
 i7 = i1 + 756 | 0;
 i8 = HEAP32[i7 >> 2] | 0;
 switch (i8 | 0) {
 case 0:
  break;
 case 1:
  {
   _png_crc_finish(i1, i3) | 0;
   STACKTOP = i5;
   return;
  }
 default:
  i4 = 3;
 }
 if ((i4 | 0) == 3) {
  i9 = i8 + -1 | 0;
  HEAP32[i7 >> 2] = i9;
  if ((i9 | 0) == 1) {
   _png_crc_finish(i1, i3) | 0;
   _png_chunk_benign_error(i1, 60641);
   STACKTOP = i5;
   return;
  }
 }
 i9 = i1 + 208 | 0;
 i7 = HEAP32[i9 >> 2] | 0;
 if (!(i7 & 1)) _png_chunk_error(i1, 60665);
 if (i7 & 4 | 0) HEAP32[i9 >> 2] = i7 | 8;
 i7 = i3 + 1 | 0;
 i9 = i1 + 788 | 0;
 i8 = HEAP32[i9 >> 2] | 0;
 if (!i8) i4 = 12; else {
  i10 = i1 + 792 | 0;
  if ((HEAP32[i10 >> 2] | 0) >>> 0 < i7 >>> 0) {
   HEAP32[i9 >> 2] = 0;
   HEAP32[i10 >> 2] = 0;
   _png_free(i1, i8);
   i4 = 12;
  } else i11 = i8;
 }
 do if ((i4 | 0) == 12) {
  i8 = _png_malloc_base(i1, i7) | 0;
  if (i8 | 0) {
   HEAP32[i9 >> 2] = i8;
   HEAP32[i1 + 792 >> 2] = i7;
   i11 = i8;
   break;
  }
  _png_chunk_warning(i1, 60678);
  _png_chunk_benign_error(i1, 60712);
  STACKTOP = i5;
  return;
 } while (0);
 _png_read_data(i1, i11, i3);
 _png_calculate_crc(i1, i11, i3);
 if (_png_crc_finish(i1, 0) | 0) {
  STACKTOP = i5;
  return;
 }
 i7 = i11 + i3 | 0;
 HEAP8[i7 >> 0] = 0;
 i3 = i11;
 while (1) {
  i12 = i3 + 1 | 0;
  if (!(HEAP8[i3 >> 0] | 0)) break; else i3 = i12;
 }
 i9 = (i3 | 0) == (i7 | 0) ? i3 : i12;
 HEAP32[i6 >> 2] = -1;
 HEAP32[i6 + 4 >> 2] = i11;
 HEAP32[i6 + 20 >> 2] = 0;
 HEAP32[i6 + 24 >> 2] = 0;
 HEAP32[i6 + 16 >> 2] = 0;
 HEAP32[i6 + 8 >> 2] = i9;
 i11 = _strlen(i9) | 0;
 HEAP32[i6 + 12 >> 2] = i11;
 if (!(_png_set_text_2(i1, i2, i6, 1) | 0)) {
  STACKTOP = i5;
  return;
 }
 _png_warning(i1, 61307);
 STACKTOP = i5;
 return;
}

function __ZNSt3__26vectorIiNS_9allocatorIiEEE6assignIPiEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIiNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i4 = i3;
 i5 = i2;
 i6 = i4 - i5 | 0;
 i7 = i6 >> 2;
 i8 = i1 + 8 | 0;
 i9 = HEAP32[i8 >> 2] | 0;
 i10 = HEAP32[i1 >> 2] | 0;
 i11 = i10;
 if (i7 >>> 0 <= i9 - i10 >> 2 >>> 0) {
  i12 = i1 + 4 | 0;
  i13 = (HEAP32[i12 >> 2] | 0) - i10 >> 2;
  i14 = i7 >>> 0 > i13 >>> 0;
  i15 = i14 ? i2 + (i13 << 2) | 0 : i3;
  i3 = i15;
  i13 = i3 - i5 | 0;
  i5 = i13 >> 2;
  if (i5 | 0) _memmove(i10 | 0, i2 | 0, i13 | 0) | 0;
  i13 = i11 + (i5 << 2) | 0;
  if (i14) {
   i14 = i4 - i3 | 0;
   if ((i14 | 0) <= 0) return;
   _memcpy(HEAP32[i12 >> 2] | 0, i15 | 0, i14 | 0) | 0;
   HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + (i14 >>> 2 << 2);
   return;
  } else {
   i14 = HEAP32[i12 >> 2] | 0;
   if ((i14 | 0) == (i13 | 0)) return;
   HEAP32[i12 >> 2] = i14 + (~((i14 + -4 - i13 | 0) >>> 2) << 2);
   return;
  }
 }
 i13 = i10;
 if (!i10) i16 = i9; else {
  i9 = i1 + 4 | 0;
  i14 = HEAP32[i9 >> 2] | 0;
  if ((i14 | 0) != (i11 | 0)) HEAP32[i9 >> 2] = i14 + (~((i14 + -4 - i10 | 0) >>> 2) << 2);
  __ZdlPv(i13);
  HEAP32[i8 >> 2] = 0;
  HEAP32[i9 >> 2] = 0;
  HEAP32[i1 >> 2] = 0;
  i16 = 0;
 }
 if (i7 >>> 0 > 1073741823) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv(i1);
 i9 = i16 >> 1;
 i13 = i16 >> 2 >>> 0 < 536870911 ? (i9 >>> 0 < i7 >>> 0 ? i7 : i9) : 1073741823;
 if (i13 >>> 0 > 1073741823) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv(i1);
 i9 = __Znwj(i13 << 2) | 0;
 i7 = i1 + 4 | 0;
 HEAP32[i7 >> 2] = i9;
 HEAP32[i1 >> 2] = i9;
 HEAP32[i8 >> 2] = i9 + (i13 << 2);
 if ((i6 | 0) <= 0) return;
 _memcpy(i9 | 0, i2 | 0, i6 | 0) | 0;
 HEAP32[i7 >> 2] = i9 + (i6 >>> 2 << 2);
 return;
}

function ___stdio_write(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i6 = i5 + 16 | 0;
 i7 = i5;
 i8 = i5 + 32 | 0;
 i9 = i1 + 28 | 0;
 i10 = HEAP32[i9 >> 2] | 0;
 HEAP32[i8 >> 2] = i10;
 i11 = i1 + 20 | 0;
 i12 = (HEAP32[i11 >> 2] | 0) - i10 | 0;
 HEAP32[i8 + 4 >> 2] = i12;
 HEAP32[i8 + 8 >> 2] = i2;
 HEAP32[i8 + 12 >> 2] = i3;
 i2 = i12 + i3 | 0;
 i12 = i1 + 60 | 0;
 HEAP32[i7 >> 2] = HEAP32[i12 >> 2];
 HEAP32[i7 + 4 >> 2] = i8;
 HEAP32[i7 + 8 >> 2] = 2;
 i10 = ___syscall_ret(___syscall146(146, i7 | 0) | 0) | 0;
 L1 : do if ((i2 | 0) == (i10 | 0)) i4 = 3; else {
  i7 = 2;
  i13 = i2;
  i14 = i8;
  i15 = i10;
  while (1) {
   if ((i15 | 0) < 0) break;
   i13 = i13 - i15 | 0;
   i16 = HEAP32[i14 + 4 >> 2] | 0;
   i17 = i15 >>> 0 > i16 >>> 0;
   i18 = i17 ? i14 + 8 | 0 : i14;
   i19 = i7 + (i17 << 31 >> 31) | 0;
   i20 = i15 - (i17 ? i16 : 0) | 0;
   HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + i20;
   i16 = i18 + 4 | 0;
   HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) - i20;
   HEAP32[i6 >> 2] = HEAP32[i12 >> 2];
   HEAP32[i6 + 4 >> 2] = i18;
   HEAP32[i6 + 8 >> 2] = i19;
   i15 = ___syscall_ret(___syscall146(146, i6 | 0) | 0) | 0;
   if ((i13 | 0) == (i15 | 0)) {
    i4 = 3;
    break L1;
   } else {
    i7 = i19;
    i14 = i18;
   }
  }
  HEAP32[i1 + 16 >> 2] = 0;
  HEAP32[i9 >> 2] = 0;
  HEAP32[i11 >> 2] = 0;
  HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 32;
  if ((i7 | 0) == 2) i21 = 0; else i21 = i3 - (HEAP32[i14 + 4 >> 2] | 0) | 0;
 } while (0);
 if ((i4 | 0) == 3) {
  i4 = HEAP32[i1 + 44 >> 2] | 0;
  HEAP32[i1 + 16 >> 2] = i4 + (HEAP32[i1 + 48 >> 2] | 0);
  i1 = i4;
  HEAP32[i9 >> 2] = i1;
  HEAP32[i11 >> 2] = i1;
  i21 = i3;
 }
 STACKTOP = i5;
 return i21 | 0;
}

function _memchr(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0;
 i4 = 0;
 i5 = i2 & 255;
 i6 = (i3 | 0) != 0;
 L1 : do if (i6 & (i1 & 3 | 0) != 0) {
  i7 = i2 & 255;
  i8 = i1;
  i9 = i3;
  while (1) {
   if ((HEAP8[i8 >> 0] | 0) == i7 << 24 >> 24) {
    i10 = i8;
    i11 = i9;
    i4 = 6;
    break L1;
   }
   i12 = i8 + 1 | 0;
   i13 = i9 + -1 | 0;
   i14 = (i13 | 0) != 0;
   if (i14 & (i12 & 3 | 0) != 0) {
    i8 = i12;
    i9 = i13;
   } else {
    i15 = i12;
    i16 = i13;
    i17 = i14;
    i4 = 5;
    break;
   }
  }
 } else {
  i15 = i1;
  i16 = i3;
  i17 = i6;
  i4 = 5;
 } while (0);
 if ((i4 | 0) == 5) if (i17) {
  i10 = i15;
  i11 = i16;
  i4 = 6;
 } else {
  i18 = i15;
  i19 = 0;
 }
 L8 : do if ((i4 | 0) == 6) {
  i15 = i2 & 255;
  if ((HEAP8[i10 >> 0] | 0) == i15 << 24 >> 24) {
   i18 = i10;
   i19 = i11;
  } else {
   i16 = Math_imul(i5, 16843009) | 0;
   L11 : do if (i11 >>> 0 > 3) {
    i17 = i10;
    i6 = i11;
    while (1) {
     i3 = HEAP32[i17 >> 2] ^ i16;
     if ((i3 & -2139062144 ^ -2139062144) & i3 + -16843009 | 0) break;
     i3 = i17 + 4 | 0;
     i1 = i6 + -4 | 0;
     if (i1 >>> 0 > 3) {
      i17 = i3;
      i6 = i1;
     } else {
      i20 = i3;
      i21 = i1;
      i4 = 11;
      break L11;
     }
    }
    i22 = i17;
    i23 = i6;
   } else {
    i20 = i10;
    i21 = i11;
    i4 = 11;
   } while (0);
   if ((i4 | 0) == 11) if (!i21) {
    i18 = i20;
    i19 = 0;
    break;
   } else {
    i22 = i20;
    i23 = i21;
   }
   while (1) {
    if ((HEAP8[i22 >> 0] | 0) == i15 << 24 >> 24) {
     i18 = i22;
     i19 = i23;
     break L8;
    }
    i16 = i22 + 1 | 0;
    i23 = i23 + -1 | 0;
    if (!i23) {
     i18 = i16;
     i19 = 0;
     break;
    } else i22 = i16;
   }
  }
 } while (0);
 return (i19 | 0 ? i18 : 0) | 0;
}

function _png_handle_unknown(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i5 = 0;
 i6 = i1 + 684 | 0;
 do if (!(HEAP32[i6 >> 2] | 0)) {
  if (!i4) i7 = HEAP32[i1 + 688 >> 2] | 0; else i7 = i4;
  switch (i7 | 0) {
  case 3:
   {
    i5 = 13;
    break;
   }
  case 2:
   {
    if (!(HEAP32[i1 + 376 >> 2] & 536870912)) i5 = 14; else i5 = 13;
    break;
   }
  default:
   i5 = 14;
  }
  if ((i5 | 0) == 13) {
   i8 = (_png_cache_unknown_chunk(i1, i3) | 0) == 0;
   i9 = i8 ? 1 : i7;
   i5 = 15;
   break;
  } else if ((i5 | 0) == 14) {
   _png_crc_finish(i1, i3) | 0;
   i9 = i7;
   i5 = 15;
   break;
  }
 } else if (!(_png_cache_unknown_chunk(i1, i3) | 0)) i10 = 0; else {
  i8 = FUNCTION_TABLE_iii[HEAP32[i6 >> 2] & 31](i1, i1 + 764 | 0) | 0;
  if ((i8 | 0) < 0) _png_chunk_error(i1, 63401);
  if (!i8) if ((i4 | 0) < 2) if ((HEAP32[i1 + 688 >> 2] | 0) < 2) {
   _png_chunk_warning(i1, 63421);
   _png_app_warning(i1, 63443);
   i5 = 16;
  } else i5 = 16; else {
   i9 = i4;
   i5 = 15;
  } else i10 = 1;
 } while (0);
 if ((i5 | 0) == 15) switch (i9 | 0) {
 case 3:
  {
   i5 = 17;
   break;
  }
 case 2:
  {
   i5 = 16;
   break;
  }
 default:
  i10 = 0;
 }
 if ((i5 | 0) == 16) if (!(HEAP32[i1 + 376 >> 2] & 536870912)) i10 = 0; else i5 = 17;
 L23 : do if ((i5 | 0) == 17) {
  i9 = i1 + 756 | 0;
  i4 = HEAP32[i9 >> 2] | 0;
  switch (i4 | 0) {
  case 1:
   {
    i10 = 0;
    break L23;
    break;
   }
  case 2:
   {
    HEAP32[i9 >> 2] = 1;
    _png_chunk_benign_error(i1, 60641);
    i10 = 0;
    break L23;
    break;
   }
  case 0:
   break;
  default:
   HEAP32[i9 >> 2] = i4 + -1;
  }
  _png_set_unknown_chunks(i1, i2, i1 + 764 | 0, 1);
  i10 = 1;
 } while (0);
 i2 = i1 + 772 | 0;
 i5 = HEAP32[i2 >> 2] | 0;
 if (i5 | 0) _png_free(i1, i5);
 HEAP32[i2 >> 2] = 0;
 if (i10 | 0) return;
 if (!(HEAP32[i1 + 376 >> 2] & 536870912)) _png_chunk_error(i1, 63519); else return;
}

function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6assignIPS3_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS3_NS_15iterator_traitsISA_E9referenceEEE5valueEvE4typeESA_SA_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i4 = i2;
 i5 = i3 - i4 >> 2;
 i6 = i1 + 8 | 0;
 i7 = HEAP32[i1 >> 2] | 0;
 i8 = i7;
 L1 : do if (i5 >>> 0 > (HEAP32[i6 >> 2] | 0) - i7 >> 2 >>> 0) {
  __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE10deallocateEv(i1);
  i9 = __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8max_sizeEv(i1) | 0;
  if (i9 >>> 0 < i5 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv(i1); else {
   i10 = (HEAP32[i6 >> 2] | 0) - (HEAP32[i1 >> 2] | 0) | 0;
   i11 = i10 >> 1;
   __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj(i1, i10 >> 2 >>> 0 < i9 >>> 1 >>> 0 ? (i11 >>> 0 < i5 >>> 0 ? i5 : i11) : i9);
   __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endIPS3_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_j(i1, i2, i3, i5);
   break;
  }
 } else {
  i9 = i1 + 4 | 0;
  i11 = (HEAP32[i9 >> 2] | 0) - i7 >> 2;
  i10 = i5 >>> 0 > i11 >>> 0;
  i12 = i10 ? i2 + (i11 << 2) | 0 : i3;
  i11 = i12 - i4 | 0;
  i13 = i11 >> 2;
  if (i13 | 0) _memmove(i7 | 0, i2 | 0, i11 | 0) | 0;
  i11 = i8 + (i13 << 2) | 0;
  if (i10) {
   __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endIPS3_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_j(i1, i12, i3, i5 - ((HEAP32[i9 >> 2] | 0) - (HEAP32[i1 >> 2] | 0) >> 2) | 0);
   break;
  }
  i12 = HEAP32[i9 >> 2] | 0;
  while (1) {
   if ((i12 | 0) == (i11 | 0)) break L1;
   i10 = i12 + -4 | 0;
   HEAP32[i9 >> 2] = i10;
   i12 = i10;
  }
 } while (0);
 return;
}

function _png_set_unknown_chunks(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i5 = 0;
 if ((i3 | 0) == 0 | ((i1 | 0) == 0 | (i2 | 0) == 0 | (i4 | 0) < 1)) return;
 i6 = i2 + 236 | 0;
 i7 = i2 + 240 | 0;
 i8 = _png_realloc_array(i1, HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0, i4, 20) | 0;
 if (!i8) {
  _png_chunk_report(i1, 63544, 1);
  return;
 }
 _png_free(i1, HEAP32[i6 >> 2] | 0);
 HEAP32[i6 >> 2] = i8;
 i6 = i2 + 232 | 0;
 HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 512;
 if ((i4 | 0) <= 0) return;
 i6 = i1 + 208 | 0;
 i2 = i4;
 i4 = i3;
 i3 = i8 + ((HEAP32[i7 >> 2] | 0) * 20 | 0) | 0;
 while (1) {
  HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
  HEAP8[i3 + 4 >> 0] = 0;
  i8 = HEAP8[i4 + 16 >> 0] & 11;
  i9 = i8 & 255;
  if (!(i8 << 24 >> 24)) {
   if (HEAP32[i6 >> 2] & 32768 | 0) {
    i5 = 9;
    break;
   }
   _png_app_warning(i1, 63568);
   i8 = HEAP32[i6 >> 2] & 11;
   if (!i8) {
    i5 = 9;
    break;
   } else i10 = i8;
  } else i10 = i9;
  while (1) {
   i9 = i10 & 0 - i10;
   if ((i10 | 0) == (i9 | 0)) break; else i10 = i9 ^ i10;
  }
  HEAP8[i3 + 16 >> 0] = i10;
  i9 = i4 + 12 | 0;
  i8 = HEAP32[i9 >> 2] | 0;
  do if (!i8) {
   HEAP32[i3 + 8 >> 2] = 0;
   i11 = 0;
   i5 = 16;
  } else {
   i12 = _png_malloc_base(i1, i8) | 0;
   HEAP32[i3 + 8 >> 2] = i12;
   if (!i12) {
    _png_chunk_report(i1, 63663, 1);
    i13 = i3;
    break;
   } else {
    _memcpy(i12 | 0, HEAP32[i4 + 8 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0;
    i11 = HEAP32[i9 >> 2] | 0;
    i5 = 16;
    break;
   }
  } while (0);
  if ((i5 | 0) == 16) {
   i5 = 0;
   HEAP32[i3 + 12 >> 2] = i11;
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
   i13 = i3 + 20 | 0;
  }
  if ((i2 | 0) > 1) {
   i2 = i2 + -1 | 0;
   i4 = i4 + 20 | 0;
   i3 = i13;
  } else {
   i5 = 18;
   break;
  }
 }
 if ((i5 | 0) == 9) _png_error(i1, 63620); else if ((i5 | 0) == 18) return;
}

function __ZN15ImGuiTextBuffer8appendfvEPKcPi(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i5;
 HEAP32[i6 >> 2] = HEAP32[i3 >> 2];
 i7 = _vsnprintf(0, 0, i2, i3) | 0;
 if ((i7 | 0) < 1) {
  STACKTOP = i5;
  return;
 }
 i3 = HEAP32[i1 >> 2] | 0;
 i8 = i3 + i7 | 0;
 i9 = i1 + 4 | 0;
 i10 = HEAP32[i9 >> 2] | 0;
 if ((i8 | 0) < (i10 | 0)) i4 = 10; else {
  i11 = i10 << 1;
  i12 = (i8 | 0) > (i11 | 0) ? i8 : i11;
  if ((i10 | 0) < (i12 | 0)) {
   HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
   i11 = __ZL13MallocWrapperjPv(i12, 0) | 0;
   i13 = i1 + 8 | 0;
   i14 = HEAP32[i13 >> 2] | 0;
   if (i14 | 0) {
    _memcpy(i11 | 0, i14 | 0, HEAP32[i1 >> 2] | 0) | 0;
    i14 = HEAP32[i13 >> 2] | 0;
    if (i14 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
    __ZL11FreeWrapperPvS_(i14, 0);
   }
   HEAP32[i13 >> 2] = i11;
   HEAP32[i9 >> 2] = i12;
  } else i4 = 10;
 }
 if ((i4 | 0) == 10) if ((i10 | 0) < (i8 | 0)) {
  if (!i10) i15 = 8; else i15 = ((i10 | 0) / 2 | 0) + i10 | 0;
  i4 = (i15 | 0) > (i8 | 0) ? i15 : i8;
  if ((i10 | 0) < (i4 | 0)) {
   HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
   i10 = __ZL13MallocWrapperjPv(i4, 0) | 0;
   i15 = i1 + 8 | 0;
   i12 = HEAP32[i15 >> 2] | 0;
   if (i12 | 0) {
    _memcpy(i10 | 0, i12 | 0, HEAP32[i1 >> 2] | 0) | 0;
    i12 = HEAP32[i15 >> 2] | 0;
    if (i12 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
    __ZL11FreeWrapperPvS_(i12, 0);
   }
   HEAP32[i15 >> 2] = i10;
   HEAP32[i9 >> 2] = i4;
  }
 }
 HEAP32[i1 >> 2] = i8;
 i8 = (HEAP32[i1 + 8 >> 2] | 0) + (i3 + -1) | 0;
 i3 = i7 + 1 | 0;
 i1 = _vsnprintf(i8, i3, i2, i6) | 0;
 if (i8 | 0) HEAP8[i8 + ((i1 | 0) != -1 & (i1 | 0) < (i3 | 0) ? i1 : i7) >> 0] = 0;
 STACKTOP = i5;
 return;
}

function __ZL33NavUpdateWindowingHighlightWindowi(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i2 = 0;
 i3 = HEAP32[1460598] | 0;
 i4 = i3 + 6704 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 if (!i5) ___assert_fail(36913, 31803, 3004, 36934);
 if (HEAP32[i5 + 8 >> 2] & 134217728 | 0) return;
 i6 = HEAP32[i3 + 6340 >> 2] | 0;
 i7 = i3 + 6348 | 0;
 i8 = i6;
 while (1) {
  i9 = i8 + -1 | 0;
  if ((i8 | 0) <= 0) {
   i10 = -1;
   break;
  }
  if ((HEAP32[(HEAP32[i7 >> 2] | 0) + (i9 << 2) >> 2] | 0) == (i5 | 0)) {
   i10 = i9;
   break;
  } else i8 = i9;
 }
 i8 = i10 + i1 | 0;
 L11 : do if ((i8 | 0) > -1) {
  i5 = i3 + 6644 | 0;
  i9 = i8;
  while (1) {
   if ((i9 | 0) >= (i6 | 0)) {
    i2 = 15;
    break L11;
   }
   i11 = HEAP32[(HEAP32[i7 >> 2] | 0) + (i9 << 2) >> 2] | 0;
   if (HEAP8[i11 + 118 >> 0] | 0) if ((HEAP32[i11 + 764 >> 2] | 0) == (i11 | 0)) {
    if (!(HEAP32[i11 + 8 >> 2] & 524288)) {
     i12 = i11;
     break L11;
    }
    if ((HEAP32[i5 >> 2] | 0) == (i11 | 0)) {
     i12 = i11;
     break L11;
    }
   }
   i9 = i9 + i1 | 0;
   if ((i9 | 0) <= -1) {
    i2 = 15;
    break;
   }
  }
 } else i2 = 15; while (0);
 L21 : do if ((i2 | 0) == 15) {
  if ((i1 | 0) < 0) if ((i6 | 0) > 0) i13 = i6 + -1 | 0; else {
   i12 = 0;
   break;
  } else i13 = 0;
  i8 = i3 + 6644 | 0;
  i9 = i13;
  while (1) {
   if ((i9 | 0) == (i10 | 0) | (i9 | 0) >= (i6 | 0)) {
    i12 = 0;
    break L21;
   }
   i5 = HEAP32[(HEAP32[i7 >> 2] | 0) + (i9 << 2) >> 2] | 0;
   if (HEAP8[i5 + 118 >> 0] | 0) if ((HEAP32[i5 + 764 >> 2] | 0) == (i5 | 0)) {
    if (!(HEAP32[i5 + 8 >> 2] & 524288)) {
     i12 = i5;
     break L21;
    }
    if ((HEAP32[i8 >> 2] | 0) == (i5 | 0)) {
     i12 = i5;
     break L21;
    }
   }
   i9 = i9 + i1 | 0;
   if ((i9 | 0) <= -1) {
    i12 = 0;
    break;
   }
  }
 } while (0);
 HEAP32[i4 >> 2] = i12;
 HEAP8[i3 + 6716 >> 0] = 0;
 return;
}

function _png_icc_profile_error(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224);
 i7 = i6 + 24 | 0;
 i8 = i6;
 i9 = (i2 | 0) != 0;
 if (i9) {
  i10 = i2 + 74 | 0;
  HEAP16[i10 >> 1] = HEAP16[i10 >> 1] | -32768;
 }
 i10 = _png_safecat(i7, 196, 0, 61913) | 0;
 i2 = _png_safecat(i7, 196, _png_safecat(i7, i10 + 79 | 0, i10, i3) | 0, 61923) | 0;
 i3 = i4 >>> 24;
 if (((i3 & 223) + -65 | 0) >>> 0 < 26 | ((i3 | 0) == 32 | (i3 + -48 | 0) >>> 0 < 10)) {
  i10 = i4 >>> 16;
  i11 = i10 & 255;
  if (((i10 & 223) + -65 | 0) >>> 0 < 26 | ((i11 | 0) == 32 | (i11 + -48 | 0) >>> 0 < 10)) {
   i12 = i4 >>> 8;
   i13 = i12 & 255;
   if (((i12 & 223) + -65 | 0) >>> 0 < 26 | ((i13 | 0) == 32 | (i13 + -48 | 0) >>> 0 < 10)) {
    i14 = i4 & 255;
    if (((i4 & 223) + -65 | 0) >>> 0 < 26 | ((i14 | 0) == 32 | (i14 + -48 | 0) >>> 0 < 10)) {
     i15 = i7 + i2 | 0;
     HEAP8[i15 >> 0] = 39;
     HEAP8[i15 + 1 >> 0] = (i3 + -32 | 0) >>> 0 < 95 ? i3 & 255 : 63;
     HEAP8[i15 + 2 >> 0] = (i11 + -32 | 0) >>> 0 < 95 ? i10 & 255 : 63;
     HEAP8[i15 + 3 >> 0] = (i13 + -32 | 0) >>> 0 < 95 ? i12 & 255 : 63;
     HEAP8[i15 + 4 >> 0] = (i14 + -32 | 0) >>> 0 < 95 ? i4 & 255 : 63;
     HEAP8[i15 + 5 >> 0] = 39;
     HEAP8[i7 + (i2 + 6) >> 0] = 58;
     HEAP8[i7 + (i2 + 7) >> 0] = 32;
     i16 = i2 + 8 | 0;
     _png_safecat(i7, 196, i16, i5) | 0;
     i17 = i9 ? 2 : 1;
     _png_chunk_report(i1, i7, i17);
     STACKTOP = i6;
     return;
    }
   }
  }
 }
 i16 = _png_safecat(i7, 196, _png_safecat(i7, 196, i2, _png_format_number(i8, i8 + 24 | 0, 3, i4) | 0) | 0, 61927) | 0;
 _png_safecat(i7, 196, i16, i5) | 0;
 i17 = i9 ? 2 : 1;
 _png_chunk_report(i1, i7, i17);
 STACKTOP = i6;
 return;
}

function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIRKS6_EEvOT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i3 = i1 + 4 | 0;
 i4 = HEAP32[i1 >> 2] | 0;
 i5 = ((HEAP32[i3 >> 2] | 0) - i4 | 0) / 12 | 0;
 i6 = i5 + 1 | 0;
 if (i6 >>> 0 > 357913941) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv(i1);
 i7 = i1 + 8 | 0;
 i8 = ((HEAP32[i7 >> 2] | 0) - i4 | 0) / 12 | 0;
 i4 = i8 << 1;
 i9 = i8 >>> 0 < 178956970 ? (i4 >>> 0 < i6 >>> 0 ? i6 : i4) : 357913941;
 do if (!i9) i10 = 0; else if (i9 >>> 0 > 357913941) {
  i4 = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc(i4, 29699);
  HEAP32[i4 >> 2] = 21232;
  ___cxa_throw(i4 | 0, 3136, 120);
 } else {
  i10 = __Znwj(i9 * 12 | 0) | 0;
  break;
 } while (0);
 i4 = i10 + (i5 * 12 | 0) | 0;
 i5 = i4;
 i6 = i10 + (i9 * 12 | 0) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_(i4, i2);
 i2 = i4 + 12 | 0;
 i9 = HEAP32[i1 >> 2] | 0;
 i10 = HEAP32[i3 >> 2] | 0;
 if ((i10 | 0) == (i9 | 0)) {
  i11 = i5;
  i12 = i9;
  i13 = i9;
 } else {
  i8 = i10;
  i10 = i5;
  i5 = i4;
  do {
   i4 = i5 + -12 | 0;
   i8 = i8 + -12 | 0;
   HEAP32[i4 >> 2] = HEAP32[i8 >> 2];
   HEAP32[i4 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
   HEAP32[i4 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
   HEAP32[i8 >> 2] = 0;
   HEAP32[i8 + 4 >> 2] = 0;
   HEAP32[i8 + 8 >> 2] = 0;
   i5 = i10 + -12 | 0;
   i10 = i5;
  } while ((i8 | 0) != (i9 | 0));
  i11 = i10;
  i12 = HEAP32[i1 >> 2] | 0;
  i13 = HEAP32[i3 >> 2] | 0;
 }
 HEAP32[i1 >> 2] = i11;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i7 >> 2] = i6;
 i6 = i12;
 if ((i13 | 0) != (i6 | 0)) {
  i7 = i13;
  do {
   i7 = i7 + -12 | 0;
   if ((HEAP8[i7 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[i7 >> 2] | 0);
  } while ((i7 | 0) != (i6 | 0));
 }
 if (!i12) return;
 __ZdlPv(i12);
 return;
}

function _png_colorspace_set_chromaticities(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i6 = i5;
 switch (_png_colorspace_check_xy(i6, i3) | 0) {
 case 0:
  {
   i7 = i2 + 74 | 0;
   i8 = HEAP16[i7 >> 1] | 0;
   i9 = i8 & 65535;
   if (i9 & 32768 | 0) {
    i10 = 0;
    STACKTOP = i5;
    return i10 | 0;
   }
   i11 = i2 + 4 | 0;
   do if (!((i4 | 0) > 1 | (i9 & 2 | 0) == 0)) if (!(_png_colorspace_endpoints_match(i3, i11, 100) | 0)) {
    HEAP16[i7 >> 1] = i8 | -32768;
    _png_benign_error(i1, 63176);
    i10 = 0;
    STACKTOP = i5;
    return i10 | 0;
   } else {
    if (!i4) i10 = 1; else break;
    STACKTOP = i5;
    return i10 | 0;
   } while (0);
   HEAP32[i11 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i11 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
   HEAP32[i11 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
   HEAP32[i11 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
   HEAP32[i11 + 16 >> 2] = HEAP32[i3 + 16 >> 2];
   HEAP32[i11 + 20 >> 2] = HEAP32[i3 + 20 >> 2];
   HEAP32[i11 + 24 >> 2] = HEAP32[i3 + 24 >> 2];
   HEAP32[i11 + 28 >> 2] = HEAP32[i3 + 28 >> 2];
   i11 = i2 + 36 | 0;
   i4 = i6;
   i6 = i11 + 36 | 0;
   do {
    HEAP32[i11 >> 2] = HEAP32[i4 >> 2];
    i11 = i11 + 4 | 0;
    i4 = i4 + 4 | 0;
   } while ((i11 | 0) < (i6 | 0));
   i4 = (_png_colorspace_endpoints_match(i3, 4704, 1e3) | 0) != 0;
   i3 = (i8 | 2) & 65535;
   HEAP16[i7 >> 1] = i4 ? i3 | 64 : i3 & 65471;
   i10 = 2;
   STACKTOP = i5;
   return i10 | 0;
  }
 case 1:
  {
   i3 = i2 + 74 | 0;
   HEAP16[i3 >> 1] = HEAP16[i3 >> 1] | -32768;
   _png_benign_error(i1, 63204);
   i10 = 0;
   STACKTOP = i5;
   return i10 | 0;
  }
 default:
  {
   i10 = i2 + 74 | 0;
   HEAP16[i10 >> 1] = HEAP16[i10 >> 1] | -32768;
   _png_error(i1, 63227);
  }
 }
 return 0;
}

function __ZNSt3__211__stdoutbufIwE8overflowEj(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i5 = i4 + 16 | 0;
 i6 = i4 + 8 | 0;
 i7 = i4 + 4 | 0;
 i8 = i4;
 do if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i2, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) i3 = 15; else {
  i9 = __ZNSt3__211char_traitsIwE12to_char_typeEj(i2) | 0;
  HEAP32[i6 >> 2] = i9;
  if (HEAP8[i1 + 44 >> 0] | 0) {
   if ((_fwrite(i6, 4, 1, HEAP32[i1 + 32 >> 2] | 0) | 0) == 1) {
    i3 = 15;
    break;
   }
   i10 = __ZNSt3__211char_traitsIwE3eofEv() | 0;
   break;
  }
  HEAP32[i7 >> 2] = i5;
  i9 = i6 + 4 | 0;
  i11 = i1 + 36 | 0;
  i12 = i1 + 40 | 0;
  i13 = i5 + 8 | 0;
  i14 = i5;
  i15 = i1 + 32 | 0;
  i16 = i6;
  while (1) {
   i17 = HEAP32[i11 >> 2] | 0;
   i18 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i17 >> 2] | 0) + 12 >> 2] & 15](i17, HEAP32[i12 >> 2] | 0, i16, i9, i8, i5, i13, i7) | 0;
   if ((HEAP32[i8 >> 2] | 0) == (i16 | 0)) {
    i3 = 14;
    break;
   }
   if ((i18 | 0) == 3) {
    i3 = 8;
    break;
   }
   if (i18 >>> 0 >= 2) {
    i3 = 14;
    break;
   }
   i17 = (HEAP32[i7 >> 2] | 0) - i14 | 0;
   if ((_fwrite(i5, 1, i17, HEAP32[i15 >> 2] | 0) | 0) != (i17 | 0)) {
    i3 = 14;
    break;
   }
   if ((i18 | 0) == 1) i16 = HEAP32[i8 >> 2] | 0; else {
    i3 = 13;
    break;
   }
  }
  if ((i3 | 0) == 8) if ((_fwrite(i16, 1, 1, HEAP32[i15 >> 2] | 0) | 0) == 1) i3 = 13; else i3 = 14;
  if ((i3 | 0) == 13) {
   i3 = 15;
   break;
  } else if ((i3 | 0) == 14) {
   i10 = __ZNSt3__211char_traitsIwE3eofEv() | 0;
   break;
  }
 } while (0);
 if ((i3 | 0) == 15) i10 = __ZNSt3__211char_traitsIwE7not_eofEj(i2) | 0;
 STACKTOP = i4;
 return i10 | 0;
}

function __ZNSt3__211__stdoutbufIcE8overflowEi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i5 = i4 + 16 | 0;
 i6 = i4 + 8 | 0;
 i7 = i4 + 4 | 0;
 i8 = i4;
 do if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i2, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) i3 = 15; else {
  i9 = __ZNSt3__211char_traitsIcE12to_char_typeEi(i2) | 0;
  HEAP8[i6 >> 0] = i9;
  if (HEAP8[i1 + 44 >> 0] | 0) {
   if ((_fwrite(i6, 1, 1, HEAP32[i1 + 32 >> 2] | 0) | 0) == 1) {
    i3 = 15;
    break;
   }
   i10 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
   break;
  }
  HEAP32[i7 >> 2] = i5;
  i9 = i6 + 1 | 0;
  i11 = i1 + 36 | 0;
  i12 = i1 + 40 | 0;
  i13 = i5 + 8 | 0;
  i14 = i5;
  i15 = i1 + 32 | 0;
  i16 = i6;
  while (1) {
   i17 = HEAP32[i11 >> 2] | 0;
   i18 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i17 >> 2] | 0) + 12 >> 2] & 15](i17, HEAP32[i12 >> 2] | 0, i16, i9, i8, i5, i13, i7) | 0;
   if ((HEAP32[i8 >> 2] | 0) == (i16 | 0)) {
    i3 = 14;
    break;
   }
   if ((i18 | 0) == 3) {
    i3 = 8;
    break;
   }
   if (i18 >>> 0 >= 2) {
    i3 = 14;
    break;
   }
   i17 = (HEAP32[i7 >> 2] | 0) - i14 | 0;
   if ((_fwrite(i5, 1, i17, HEAP32[i15 >> 2] | 0) | 0) != (i17 | 0)) {
    i3 = 14;
    break;
   }
   if ((i18 | 0) == 1) i16 = HEAP32[i8 >> 2] | 0; else {
    i3 = 13;
    break;
   }
  }
  if ((i3 | 0) == 8) if ((_fwrite(i16, 1, 1, HEAP32[i15 >> 2] | 0) | 0) == 1) i3 = 13; else i3 = 14;
  if ((i3 | 0) == 13) {
   i3 = 15;
   break;
  } else if ((i3 | 0) == 14) {
   i10 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
   break;
  }
 } while (0);
 if ((i3 | 0) == 15) i10 = __ZNSt3__211char_traitsIcE7not_eofEi(i2) | 0;
 STACKTOP = i4;
 return i10 | 0;
}

function __ZN6ImFont9GrowIndexEi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i3 = i1 + 28 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 i5 = i1 + 40 | 0;
 if ((i4 | 0) != (HEAP32[i5 >> 2] | 0)) ___assert_fail(51396, 38201, 2340, 51435);
 if ((i4 | 0) >= (i2 | 0)) return;
 i6 = i1 + 32 | 0;
 i7 = HEAP32[i6 >> 2] | 0;
 if ((i7 | 0) < (i2 | 0)) {
  if (!i7) i8 = 8; else i8 = ((i7 | 0) / 2 | 0) + i7 | 0;
  i9 = (i8 | 0) > (i2 | 0) ? i8 : i2;
  if ((i7 | 0) < (i9 | 0)) {
   i7 = __ZN5ImGui8MemAllocEj(i9 << 2) | 0;
   i8 = i1 + 36 | 0;
   i10 = HEAP32[i8 >> 2] | 0;
   if (!i10) i11 = i8; else {
    _memcpy(i7 | 0, i10 | 0, HEAP32[i3 >> 2] << 2 | 0) | 0;
    __ZN5ImGui7MemFreeEPv(HEAP32[i8 >> 2] | 0);
    i11 = i8;
   }
   HEAP32[i11 >> 2] = i7;
   HEAP32[i6 >> 2] = i9;
   i12 = HEAP32[i3 >> 2] | 0;
  } else i12 = i4;
 } else i12 = i4;
 if ((i12 | 0) < (i2 | 0)) {
  i4 = i1 + 36 | 0;
  i9 = i12;
  do {
   HEAP32[(HEAP32[i4 >> 2] | 0) + (i9 << 2) >> 2] = -1082130432;
   i9 = i9 + 1 | 0;
  } while ((i9 | 0) != (i2 | 0));
 }
 HEAP32[i3 >> 2] = i2;
 i3 = i1 + 44 | 0;
 i9 = HEAP32[i3 >> 2] | 0;
 if ((i9 | 0) < (i2 | 0)) {
  if (!i9) i13 = 8; else i13 = ((i9 | 0) / 2 | 0) + i9 | 0;
  i4 = (i13 | 0) > (i2 | 0) ? i13 : i2;
  if ((i9 | 0) < (i4 | 0)) {
   i9 = __ZN5ImGui8MemAllocEj(i4 << 1) | 0;
   i13 = i1 + 48 | 0;
   i12 = HEAP32[i13 >> 2] | 0;
   if (!i12) i14 = i13; else {
    _memcpy(i9 | 0, i12 | 0, HEAP32[i5 >> 2] << 1 | 0) | 0;
    __ZN5ImGui7MemFreeEPv(HEAP32[i13 >> 2] | 0);
    i14 = i13;
   }
   HEAP32[i14 >> 2] = i9;
   HEAP32[i3 >> 2] = i4;
  }
 }
 i4 = HEAP32[i5 >> 2] | 0;
 if ((i4 | 0) < (i2 | 0)) {
  i3 = i1 + 48 | 0;
  i1 = i4;
  do {
   HEAP16[(HEAP32[i3 >> 2] | 0) + (i1 << 1) >> 1] = -1;
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) != (i2 | 0));
 }
 HEAP32[i5 >> 2] = i2;
 return;
}

function __ZN8ImVectorIP11ImGuiWindowE6insertEPKS1_RS3_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i4 = i1 + 8 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 if (i5 >>> 0 > i2 >>> 0) ___assert_fail(31883, 56850, 1273, 31913);
 i6 = HEAP32[i1 >> 2] | 0;
 if ((i5 + (i6 << 2) | 0) >>> 0 < i2 >>> 0) ___assert_fail(31883, 56850, 1273, 31913);
 i7 = i2 - i5 >> 2;
 i2 = i1 + 4 | 0;
 if ((i6 | 0) == (HEAP32[i2 >> 2] | 0)) {
  i8 = i6 + 1 | 0;
  if (!i6) i9 = 8; else i9 = ((i6 | 0) / 2 | 0) + i6 | 0;
  i10 = (i9 | 0) > (i8 | 0) ? i9 : i8;
  if ((i6 | 0) < (i10 | 0)) {
   HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
   i8 = __ZL13MallocWrapperjPv(i10 << 2, 0) | 0;
   i9 = HEAP32[i4 >> 2] | 0;
   if (!i9) i11 = i4; else {
    _memcpy(i8 | 0, i9 | 0, HEAP32[i1 >> 2] << 2 | 0) | 0;
    i9 = HEAP32[i4 >> 2] | 0;
    if (i9 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
    __ZL11FreeWrapperPvS_(i9, 0);
    i11 = i4;
   }
   HEAP32[i11 >> 2] = i8;
   HEAP32[i2 >> 2] = i10;
   i12 = HEAP32[i1 >> 2] | 0;
   i13 = i8;
  } else {
   i12 = i6;
   i13 = i5;
  }
 } else {
  i12 = i6;
  i13 = i5;
 }
 if ((i12 | 0) <= (i7 | 0)) {
  i14 = i13;
  i15 = i14 + (i7 << 2) | 0;
  i16 = HEAP32[i3 >> 2] | 0;
  HEAP32[i15 >> 2] = i16;
  i17 = HEAP32[i1 >> 2] | 0;
  i18 = i17 + 1 | 0;
  HEAP32[i1 >> 2] = i18;
  i19 = HEAP32[i4 >> 2] | 0;
  i20 = i19 + (i7 << 2) | 0;
  return i20 | 0;
 }
 i5 = i13 + (i7 << 2) | 0;
 _memmove(i5 + 4 | 0, i5 | 0, i12 - i7 << 2 | 0) | 0;
 i14 = HEAP32[i4 >> 2] | 0;
 i15 = i14 + (i7 << 2) | 0;
 i16 = HEAP32[i3 >> 2] | 0;
 HEAP32[i15 >> 2] = i16;
 i17 = HEAP32[i1 >> 2] | 0;
 i18 = i17 + 1 | 0;
 HEAP32[i1 >> 2] = i18;
 i19 = HEAP32[i4 >> 2] | 0;
 i20 = i19 + (i7 << 2) | 0;
 return i20 | 0;
}

function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorItNS5_ItEEEEEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE25__emplace_unique_key_argsIS7_JRKNS_21piecewise_construct_tENS_5tupleIJRKS7_EEENSM_IJEEEEEENS_4pairINS_15__tree_iteratorISB_PNS_11__tree_nodeISB_PvEEiEEbEERKT_DpOT0_(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i6;
 i7 = __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorItNS5_ItEEEEEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE12__find_equalIS7_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISM_EERKT_(i2, i4, i3) | 0;
 i3 = HEAP32[i7 >> 2] | 0;
 if (i3 | 0) {
  i8 = i3;
  i9 = 0;
  i10 = i8;
  HEAP32[i1 >> 2] = i10;
  i11 = i1 + 4 | 0;
  HEAP8[i11 >> 0] = i9;
  STACKTOP = i6;
  return;
 }
 i3 = __Znwj(40) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_(i3 + 16 | 0, HEAP32[i5 >> 2] | 0);
 HEAP32[i3 + 28 >> 2] = 0;
 HEAP32[i3 + 32 >> 2] = 0;
 HEAP32[i3 + 36 >> 2] = 0;
 i5 = HEAP32[i4 >> 2] | 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = i5;
 HEAP32[i7 >> 2] = i3;
 i5 = HEAP32[HEAP32[i2 >> 2] >> 2] | 0;
 if (!i5) i12 = i3; else {
  HEAP32[i2 >> 2] = i5;
  i12 = HEAP32[i7 >> 2] | 0;
 }
 __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[i2 + 4 >> 2] | 0, i12);
 i12 = i2 + 8 | 0;
 HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
 i8 = i3;
 i9 = 1;
 i10 = i8;
 HEAP32[i1 >> 2] = i10;
 i11 = i1 + 4 | 0;
 HEAP8[i11 >> 0] = i9;
 STACKTOP = i6;
 return;
}

function __ZN5ImGui14PushStyleColorEiRK6ImVec4(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i3;
 i5 = HEAP32[1460598] | 0;
 i6 = i5 + 5508 + (i1 << 4) | 0;
 HEAP32[i4 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i4 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 i7 = i5 + 6476 | 0;
 i8 = HEAP32[i7 >> 2] | 0;
 i9 = i5 + 6480 | 0;
 if ((i8 | 0) == (HEAP32[i9 >> 2] | 0)) {
  i10 = i8 + 1 | 0;
  if (!i8) i11 = 8; else i11 = ((i8 | 0) / 2 | 0) + i8 | 0;
  i12 = (i11 | 0) > (i10 | 0) ? i11 : i10;
  if ((i8 | 0) < (i12 | 0)) {
   HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
   i10 = __ZL13MallocWrapperjPv(i12 * 20 | 0, 0) | 0;
   i11 = i5 + 6484 | 0;
   i13 = HEAP32[i11 >> 2] | 0;
   if (!i13) i14 = i11; else {
    _memcpy(i10 | 0, i13 | 0, (HEAP32[i7 >> 2] | 0) * 20 | 0) | 0;
    i13 = HEAP32[i11 >> 2] | 0;
    if (i13 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
    __ZL11FreeWrapperPvS_(i13, 0);
    i14 = i11;
   }
   HEAP32[i14 >> 2] = i10;
   HEAP32[i9 >> 2] = i12;
   i15 = HEAP32[i7 >> 2] | 0;
  } else i15 = i8;
 } else i15 = i8;
 i8 = HEAP32[i5 + 6484 >> 2] | 0;
 i5 = i8 + (i15 * 20 | 0) | 0;
 HEAP32[i5 >> 2] = i1;
 i1 = i5 + 4 | 0;
 HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
 HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
 HEAP32[i6 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i6 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
 STACKTOP = i3;
 return;
}

function __ZN17ImDrawDataBuilder22FlattenIntoSingleLayerEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i2 = HEAP32[i1 >> 2] | 0;
 i3 = i1 + 12 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 i5 = i4 + i2 | 0;
 i6 = i1 + 4 | 0;
 i7 = HEAP32[i6 >> 2] | 0;
 if ((i7 | 0) < (i5 | 0)) {
  if (!i7) i8 = 8; else i8 = ((i7 | 0) / 2 | 0) + i7 | 0;
  i9 = (i8 | 0) > (i5 | 0) ? i8 : i5;
  if ((i7 | 0) < (i9 | 0)) {
   HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
   i7 = __ZL13MallocWrapperjPv(i9 << 2, 0) | 0;
   i8 = i1 + 8 | 0;
   i10 = HEAP32[i8 >> 2] | 0;
   if (!i10) i11 = i8; else {
    _memcpy(i7 | 0, i10 | 0, HEAP32[i1 >> 2] << 2 | 0) | 0;
    i10 = HEAP32[i8 >> 2] | 0;
    if (i10 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
    __ZL11FreeWrapperPvS_(i10, 0);
    i11 = i8;
   }
   HEAP32[i11 >> 2] = i7;
   HEAP32[i6 >> 2] = i9;
   i12 = HEAP32[i3 >> 2] | 0;
  } else i12 = i4;
 } else i12 = i4;
 HEAP32[i1 >> 2] = i5;
 if (!i12) return;
 if ((i4 | 0) <= 0) ___assert_fail(56841, 56850, 1235, 56909);
 if ((i12 | 0) <= 0) ___assert_fail(56841, 56850, 1235, 56909);
 i4 = i1 + 20 | 0;
 _memcpy((HEAP32[i1 + 8 >> 2] | 0) + (i2 << 2) | 0, HEAP32[i4 >> 2] | 0, i12 << 2 | 0) | 0;
 i12 = i1 + 16 | 0;
 i1 = HEAP32[i12 >> 2] | 0;
 if ((i1 | 0) < 0) {
  i2 = ((i1 | 0) / 2 | 0) + i1 | 0;
  i5 = (i2 | 0) > 0 ? i2 : 0;
  if ((i1 | 0) < (i5 | 0)) {
   HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
   i1 = __ZL13MallocWrapperjPv(i5 << 2, 0) | 0;
   i2 = HEAP32[i4 >> 2] | 0;
   if (i2 | 0) {
    _memcpy(i1 | 0, i2 | 0, HEAP32[i3 >> 2] << 2 | 0) | 0;
    i2 = HEAP32[i4 >> 2] | 0;
    if (i2 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
    __ZL11FreeWrapperPvS_(i2, 0);
   }
   HEAP32[i4 >> 2] = i1;
   HEAP32[i12 >> 2] = i5;
  }
 }
 HEAP32[i3 >> 2] = 0;
 return;
}

function __ZN11ImFontAtlas20AddCustomRectRegularEjii(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i5;
 if (i2 >>> 0 <= 65535) ___assert_fail(55588, 38201, 1615, 55602);
 if ((i3 + -1 | 0) >>> 0 >= 65535) ___assert_fail(55623, 38201, 1616, 55602);
 if ((i4 + -1 | 0) >>> 0 >= 65535) ___assert_fail(55652, 38201, 1617, 55602);
 HEAP32[i6 >> 2] = 0;
 HEAP32[i6 + 4 >> 2] = 0;
 HEAP32[i6 + 8 >> 2] = 0;
 HEAP32[i6 + 12 >> 2] = 0;
 i7 = i3 & 65535;
 i3 = i4 & 65535;
 i4 = i1 + 60 | 0;
 i8 = HEAP32[i4 >> 2] | 0;
 i9 = i1 + 64 | 0;
 if ((i8 | 0) == (HEAP32[i9 >> 2] | 0)) {
  i10 = i8 + 1 | 0;
  if (!i8) i11 = 8; else i11 = ((i8 | 0) / 2 | 0) + i8 | 0;
  i12 = (i11 | 0) > (i10 | 0) ? i11 : i10;
  if ((i8 | 0) < (i12 | 0)) {
   i10 = __ZN5ImGui8MemAllocEj(i12 * 28 | 0) | 0;
   i11 = i1 + 68 | 0;
   i13 = HEAP32[i11 >> 2] | 0;
   if (!i13) i14 = i11; else {
    _memcpy(i10 | 0, i13 | 0, (HEAP32[i4 >> 2] | 0) * 28 | 0) | 0;
    __ZN5ImGui7MemFreeEPv(HEAP32[i11 >> 2] | 0);
    i14 = i11;
   }
   HEAP32[i14 >> 2] = i10;
   HEAP32[i9 >> 2] = i12;
   i15 = HEAP32[i4 >> 2] | 0;
  } else i15 = i8;
 } else i15 = i8;
 i8 = HEAP32[i1 + 68 >> 2] | 0;
 i1 = i8 + (i15 * 28 | 0) | 0;
 HEAP32[i1 >> 2] = i2;
 HEAP16[i1 + 4 >> 1] = i7;
 HEAP16[i1 + 6 >> 1] = i3;
 HEAP16[i1 + 8 >> 1] = -1;
 HEAP16[i1 + 10 >> 1] = -1;
 i3 = i1 + 12 | 0;
 HEAP32[i3 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 i6 = HEAP32[i4 >> 2] | 0;
 HEAP32[i4 >> 2] = i6 + 1;
 STACKTOP = i5;
 return i6 | 0;
}

function __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev(i1) {
 i1 = i1 | 0;
 __embind_register_void(3216, 56920);
 __embind_register_bool(3224, 56925, 1, 1, 0);
 __embind_register_integer(3232, 56930, 1, -128, 127);
 __embind_register_integer(3248, 56935, 1, -128, 127);
 __embind_register_integer(3240, 56947, 1, 0, 255);
 __embind_register_integer(3256, 56961, 2, -32768, 32767);
 __embind_register_integer(3264, 56967, 2, 0, 65535);
 __embind_register_integer(3272, 56982, 4, -2147483648, 2147483647);
 __embind_register_integer(3280, 56986, 4, 0, -1);
 __embind_register_integer(3288, 56999, 4, -2147483648, 2147483647);
 __embind_register_integer(3296, 57004, 4, 0, -1);
 __embind_register_float(3304, 57018, 4);
 __embind_register_float(3312, 57024, 8);
 __embind_register_std_string(1392, 57031);
 __embind_register_std_string(1416, 57043);
 __embind_register_std_wstring(1440, 4, 57076);
 __embind_register_emval(1464, 57089);
 __embind_register_memory_view(1472, 0, 57105);
 __embind_register_memory_view(1480, 0, 57135);
 __embind_register_memory_view(1488, 1, 57172);
 __embind_register_memory_view(1496, 2, 57211);
 __embind_register_memory_view(1504, 3, 57242);
 __embind_register_memory_view(1512, 4, 57282);
 __embind_register_memory_view(1520, 5, 57311);
 __embind_register_memory_view(1528, 4, 57349);
 __embind_register_memory_view(1536, 5, 57379);
 __embind_register_memory_view(1480, 0, 57418);
 __embind_register_memory_view(1488, 1, 57450);
 __embind_register_memory_view(1496, 2, 57483);
 __embind_register_memory_view(1504, 3, 57516);
 __embind_register_memory_view(1512, 4, 57550);
 __embind_register_memory_view(1520, 5, 57583);
 __embind_register_memory_view(1544, 6, 57617);
 __embind_register_memory_view(1552, 7, 57648);
 __embind_register_memory_view(1560, 7, 57680);
 return;
}

function _png_handle_sBIT(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4;
 i6 = HEAP32[i1 + 208 >> 2] | 0;
 if (!(i6 & 1)) _png_chunk_error(i1, 60665);
 if (i6 & 6 | 0) {
  _png_crc_finish(i1, i3) | 0;
  _png_chunk_benign_error(i1, 61181);
  STACKTOP = i4;
  return;
 }
 if (i2 | 0) if (HEAP32[i2 + 8 >> 2] & 2 | 0) {
  _png_crc_finish(i1, i3) | 0;
  _png_chunk_benign_error(i1, 63151);
  STACKTOP = i4;
  return;
 }
 i6 = i1 + 435 | 0;
 if ((HEAP8[i6 >> 0] | 0) == 3) {
  i7 = 8;
  i8 = 3;
 } else {
  i7 = HEAP8[i1 + 436 >> 0] | 0;
  i8 = HEAPU8[i1 + 439 >> 0] | 0;
 }
 if (i3 >>> 0 > 4 | (i8 | 0) != (i3 | 0)) {
  _png_chunk_benign_error(i1, 61194);
  _png_crc_finish(i1, i3) | 0;
  STACKTOP = i4;
  return;
 }
 i8 = i5 + 3 | 0;
 i9 = i5 + 2 | 0;
 i10 = i5 + 1 | 0;
 _memset(i5 | 0, i7 | 0, 4) | 0;
 _png_read_data(i1, i5, i3);
 _png_calculate_crc(i1, i5, i3);
 if (_png_crc_finish(i1, 0) | 0) {
  STACKTOP = i4;
  return;
 }
 L23 : do if (i3 | 0) {
  i11 = 0;
  while (1) {
   if (((HEAP8[i5 + i11 >> 0] | 0) + -1 & 255) >= (i7 & 255)) break;
   i11 = i11 + 1 | 0;
   if (i11 >>> 0 >= i3 >>> 0) break L23;
  }
  _png_chunk_benign_error(i1, 61194);
  STACKTOP = i4;
  return;
 } while (0);
 i3 = HEAP8[i5 >> 0] | 0;
 i5 = i1 + 516 | 0;
 if (!(HEAP8[i6 >> 0] & 2)) {
  HEAP8[i1 + 519 >> 0] = i3;
  i12 = i3;
  i13 = i10;
  i14 = i3;
 } else {
  i12 = HEAP8[i9 >> 0] | 0;
  i13 = i8;
  i14 = HEAP8[i10 >> 0] | 0;
 }
 HEAP8[i5 >> 0] = i3;
 HEAP8[i1 + 517 >> 0] = i14;
 HEAP8[i1 + 518 >> 0] = i12;
 HEAP8[i1 + 520 >> 0] = HEAP8[i13 >> 0] | 0;
 _png_set_sBIT(i1, i2, i5);
 STACKTOP = i4;
 return;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i3 = 0;
 if (i2 >>> 0 > 1073741807) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i1);
 i4 = i1 + 8 | 0;
 i5 = i4 + 3 | 0;
 i6 = HEAP8[i5 >> 0] | 0;
 i7 = i6 << 24 >> 24 < 0;
 if (i7) {
  i8 = HEAP32[i1 + 4 >> 2] | 0;
  i9 = (HEAP32[i4 >> 2] & 2147483647) + -1 | 0;
 } else {
  i8 = i6 & 255;
  i9 = 1;
 }
 i10 = i8 >>> 0 > i2 >>> 0 ? i8 : i2;
 i2 = i10 >>> 0 < 2;
 i11 = i2 ? 1 : (i10 + 4 & -4) + -1 | 0;
 do if ((i11 | 0) != (i9 | 0)) {
  do if (i2) {
   i10 = HEAP32[i1 >> 2] | 0;
   if (i7) {
    i12 = 0;
    i13 = i10;
    i14 = i1;
    i3 = 15;
   } else {
    __ZNSt3__211char_traitsIwE4copyEPwPKwj(i1, i10, (i6 & 255) + 1 | 0) | 0;
    __ZdlPv(i10);
    i3 = 18;
   }
  } else {
   i10 = i11 + 1 | 0;
   if (i10 >>> 0 > 1073741823) _abort();
   i15 = __Znwj(i10 << 2) | 0;
   if (i7) {
    i12 = 1;
    i13 = HEAP32[i1 >> 2] | 0;
    i14 = i15;
    i3 = 15;
    break;
   } else {
    __ZNSt3__211char_traitsIwE4copyEPwPKwj(i15, i1, (i6 & 255) + 1 | 0) | 0;
    i16 = i15;
    i17 = i10;
    i18 = i1 + 4 | 0;
    i3 = 17;
    break;
   }
  } while (0);
  if ((i3 | 0) == 15) {
   i10 = i1 + 4 | 0;
   __ZNSt3__211char_traitsIwE4copyEPwPKwj(i14, i13, (HEAP32[i10 >> 2] | 0) + 1 | 0) | 0;
   __ZdlPv(i13);
   if (i12) {
    i16 = i14;
    i17 = i11 + 1 | 0;
    i18 = i10;
    i3 = 17;
   } else i3 = 18;
  }
  if ((i3 | 0) == 17) {
   HEAP32[i4 >> 2] = i17 | -2147483648;
   HEAP32[i18 >> 2] = i8;
   HEAP32[i1 >> 2] = i16;
   break;
  } else if ((i3 | 0) == 18) {
   HEAP8[i5 >> 0] = i8;
   break;
  }
 } while (0);
 return;
}

function __ZL21AddDrawListToDrawDataP8ImVectorIP10ImDrawListES1_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i3 = i2;
 i4 = HEAP32[i2 >> 2] | 0;
 if (!i4) return;
 if ((i4 | 0) <= 0) ___assert_fail(38278, 56850, 1245, 38287);
 i5 = HEAP32[i2 + 8 >> 2] | 0;
 i6 = i4 + -1 | 0;
 if (!(HEAP32[i5 + (i6 << 5) >> 2] | 0)) if (!(HEAP32[i5 + (i6 << 5) + 24 >> 2] | 0)) {
  HEAP32[i2 >> 2] = i6;
  if (!i6) return;
 }
 i6 = HEAP32[i2 + 24 >> 2] | 0;
 if (i6 | 0) if ((HEAP32[i2 + 52 >> 2] | 0) != ((HEAP32[i2 + 32 >> 2] | 0) + (i6 * 20 | 0) | 0)) ___assert_fail(37131, 31803, 4178, 37246);
 i5 = HEAP32[i2 + 12 >> 2] | 0;
 if (i5 | 0) if ((HEAP32[i2 + 56 >> 2] | 0) != ((HEAP32[i2 + 20 >> 2] | 0) + (i5 << 1) | 0)) ___assert_fail(37268, 31803, 4179, 37246);
 if ((HEAP32[i2 + 48 >> 2] | 0) != (i6 | 0)) ___assert_fail(37383, 31803, 4180, 37246);
 if (i6 >>> 0 >= 65536) ___assert_fail(37443, 31803, 4191, 37246);
 i6 = HEAP32[i1 >> 2] | 0;
 i2 = i1 + 4 | 0;
 if ((i6 | 0) == (HEAP32[i2 >> 2] | 0)) {
  i5 = i6 + 1 | 0;
  if (!i6) i7 = 8; else i7 = ((i6 | 0) / 2 | 0) + i6 | 0;
  i4 = (i7 | 0) > (i5 | 0) ? i7 : i5;
  if ((i6 | 0) < (i4 | 0)) {
   HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
   i5 = __ZL13MallocWrapperjPv(i4 << 2, 0) | 0;
   i7 = i1 + 8 | 0;
   i8 = HEAP32[i7 >> 2] | 0;
   if (!i8) i9 = i7; else {
    _memcpy(i5 | 0, i8 | 0, HEAP32[i1 >> 2] << 2 | 0) | 0;
    i8 = HEAP32[i7 >> 2] | 0;
    if (i8 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
    __ZL11FreeWrapperPvS_(i8, 0);
    i9 = i7;
   }
   HEAP32[i9 >> 2] = i5;
   HEAP32[i2 >> 2] = i4;
   i10 = HEAP32[i1 >> 2] | 0;
  } else i10 = i6;
 } else i10 = i6;
 HEAP32[(HEAP32[i1 + 8 >> 2] | 0) + (i10 << 2) >> 2] = i3;
 HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 return;
}

function _memcpy(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 if ((i3 | 0) >= 8192) return _emscripten_memcpy_big(i1 | 0, i2 | 0, i3 | 0) | 0;
 i4 = i1 | 0;
 i5 = i1 + i3 | 0;
 if ((i1 & 3) == (i2 & 3)) {
  while (i1 & 3) {
   if (!i3) return i4 | 0;
   HEAP8[i1 >> 0] = HEAP8[i2 >> 0] | 0;
   i1 = i1 + 1 | 0;
   i2 = i2 + 1 | 0;
   i3 = i3 - 1 | 0;
  }
  i6 = i5 & -4 | 0;
  i3 = i6 - 64 | 0;
  while ((i1 | 0) <= (i3 | 0)) {
   HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
   HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
   HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
   HEAP32[i1 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
   HEAP32[i1 + 16 >> 2] = HEAP32[i2 + 16 >> 2];
   HEAP32[i1 + 20 >> 2] = HEAP32[i2 + 20 >> 2];
   HEAP32[i1 + 24 >> 2] = HEAP32[i2 + 24 >> 2];
   HEAP32[i1 + 28 >> 2] = HEAP32[i2 + 28 >> 2];
   HEAP32[i1 + 32 >> 2] = HEAP32[i2 + 32 >> 2];
   HEAP32[i1 + 36 >> 2] = HEAP32[i2 + 36 >> 2];
   HEAP32[i1 + 40 >> 2] = HEAP32[i2 + 40 >> 2];
   HEAP32[i1 + 44 >> 2] = HEAP32[i2 + 44 >> 2];
   HEAP32[i1 + 48 >> 2] = HEAP32[i2 + 48 >> 2];
   HEAP32[i1 + 52 >> 2] = HEAP32[i2 + 52 >> 2];
   HEAP32[i1 + 56 >> 2] = HEAP32[i2 + 56 >> 2];
   HEAP32[i1 + 60 >> 2] = HEAP32[i2 + 60 >> 2];
   i1 = i1 + 64 | 0;
   i2 = i2 + 64 | 0;
  }
  while ((i1 | 0) < (i6 | 0)) {
   HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
   i1 = i1 + 4 | 0;
   i2 = i2 + 4 | 0;
  }
 } else {
  i6 = i5 - 4 | 0;
  while ((i1 | 0) < (i6 | 0)) {
   HEAP8[i1 >> 0] = HEAP8[i2 >> 0] | 0;
   HEAP8[i1 + 1 >> 0] = HEAP8[i2 + 1 >> 0] | 0;
   HEAP8[i1 + 2 >> 0] = HEAP8[i2 + 2 >> 0] | 0;
   HEAP8[i1 + 3 >> 0] = HEAP8[i2 + 3 >> 0] | 0;
   i1 = i1 + 4 | 0;
   i2 = i2 + 4 | 0;
  }
 }
 while ((i1 | 0) < (i5 | 0)) {
  HEAP8[i1 >> 0] = HEAP8[i2 >> 0] | 0;
  i1 = i1 + 1 | 0;
  i2 = i2 + 1 | 0;
 }
 return i4 | 0;
}

function __ZN8ImVectorI20ImGuiSettingsHandlerE6insertEPKS0_RS2_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i4 = i1 + 8 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 if (i5 >>> 0 > i2 >>> 0) ___assert_fail(31883, 56850, 1273, 31913);
 i6 = HEAP32[i1 >> 2] | 0;
 if ((i5 + (i6 * 24 | 0) | 0) >>> 0 < i2 >>> 0) ___assert_fail(31883, 56850, 1273, 31913);
 i7 = (i2 - i5 | 0) / 24 | 0;
 i2 = i1 + 4 | 0;
 if ((i6 | 0) == (HEAP32[i2 >> 2] | 0)) {
  i8 = i6 + 1 | 0;
  if (!i6) i9 = 8; else i9 = ((i6 | 0) / 2 | 0) + i6 | 0;
  i10 = (i9 | 0) > (i8 | 0) ? i9 : i8;
  if ((i6 | 0) < (i10 | 0)) {
   HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
   i8 = __ZL13MallocWrapperjPv(i10 * 24 | 0, 0) | 0;
   i9 = HEAP32[i4 >> 2] | 0;
   if (!i9) i11 = i4; else {
    _memcpy(i8 | 0, i9 | 0, (HEAP32[i1 >> 2] | 0) * 24 | 0) | 0;
    i9 = HEAP32[i4 >> 2] | 0;
    if (i9 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
    __ZL11FreeWrapperPvS_(i9, 0);
    i11 = i4;
   }
   HEAP32[i11 >> 2] = i8;
   HEAP32[i2 >> 2] = i10;
   i12 = HEAP32[i1 >> 2] | 0;
   i13 = i8;
  } else {
   i12 = i6;
   i13 = i5;
  }
 } else {
  i12 = i6;
  i13 = i5;
 }
 if ((i12 | 0) > (i7 | 0)) {
  i5 = i13 + (i7 * 24 | 0) | 0;
  _memmove(i5 + 24 | 0, i5 | 0, (i12 - i7 | 0) * 24 | 0) | 0;
  i14 = HEAP32[i4 >> 2] | 0;
 } else i14 = i13;
 i13 = i14 + (i7 * 24 | 0) | 0;
 HEAP32[i13 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i13 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i13 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i13 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 HEAP32[i13 + 16 >> 2] = HEAP32[i3 + 16 >> 2];
 HEAP32[i13 + 20 >> 2] = HEAP32[i3 + 20 >> 2];
 HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 return (HEAP32[i4 >> 2] | 0) + (i7 * 24 | 0) | 0;
}

function _sinf(f1) {
 f1 = Math_fround(f1);
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, f7 = f0, d8 = 0.0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i2;
 i4 = (HEAPF32[tempDoublePtr >> 2] = f1, HEAP32[tempDoublePtr >> 2] | 0);
 i5 = i4 >>> 31;
 i6 = i4 & 2147483647;
 L1 : do if (i6 >>> 0 < 1061752795) if (i6 >>> 0 < 964689920) f7 = f1; else f7 = Math_fround(___sindf(+f1)); else {
  if (i6 >>> 0 < 1081824210) {
   i4 = (i5 | 0) != 0;
   d8 = +f1;
   if (i6 >>> 0 >= 1075235812) {
    f7 = Math_fround(___sindf(-((i4 ? 3.141592653589793 : -3.141592653589793) + d8)));
    break;
   }
   if (i4) {
    f7 = Math_fround(-Math_fround(___cosdf(d8 + 1.5707963267948966)));
    break;
   } else {
    f7 = Math_fround(___cosdf(d8 + -1.5707963267948966));
    break;
   }
  }
  if (i6 >>> 0 < 1088565718) {
   i4 = (i5 | 0) != 0;
   d8 = +f1;
   if (i6 >>> 0 >= 1085271520) {
    f7 = Math_fround(___sindf((i4 ? 6.283185307179586 : -6.283185307179586) + d8));
    break;
   }
   if (i4) {
    f7 = Math_fround(___cosdf(d8 + 4.71238898038469));
    break;
   } else {
    f7 = Math_fround(-Math_fround(___cosdf(d8 + -4.71238898038469)));
    break;
   }
  }
  if (i6 >>> 0 > 2139095039) {
   f7 = Math_fround(f1 - f1);
   break;
  }
  switch ((___rem_pio2f(f1, i3) | 0) & 3) {
  case 0:
   {
    f7 = Math_fround(___sindf(+HEAPF64[i3 >> 3]));
    break L1;
    break;
   }
  case 1:
   {
    f7 = Math_fround(___cosdf(+HEAPF64[i3 >> 3]));
    break L1;
    break;
   }
  case 2:
   {
    f7 = Math_fround(___sindf(-+HEAPF64[i3 >> 3]));
    break L1;
    break;
   }
  default:
   {
    f7 = Math_fround(-Math_fround(___cosdf(+HEAPF64[i3 >> 3])));
    break L1;
   }
  }
 } while (0);
 STACKTOP = i2;
 return Math_fround(f7);
}

function _png_set_sPLT(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i5 = 0;
 if ((i3 | 0) == 0 | ((i1 | 0) == 0 | (i2 | 0) == 0 | (i4 | 0) < 1)) return;
 i6 = i2 + 244 | 0;
 i7 = i2 + 248 | 0;
 i8 = _png_realloc_array(i1, HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0, i4, 16) | 0;
 if (!i8) {
  _png_chunk_report(i1, 61485, 1);
  return;
 }
 _png_free(i1, HEAP32[i6 >> 2] | 0);
 HEAP32[i6 >> 2] = i8;
 i6 = i2 + 232 | 0;
 HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 32;
 i6 = i2 + 8 | 0;
 i2 = i3;
 i3 = i8 + (HEAP32[i7 >> 2] << 4) | 0;
 i8 = i4;
 while (1) {
  i4 = HEAP32[i2 >> 2] | 0;
  if (!i4) i5 = 7; else {
   i9 = i2 + 8 | 0;
   if (!(HEAP32[i9 >> 2] | 0)) i5 = 7; else {
    HEAP8[i3 + 4 >> 0] = HEAP8[i2 + 4 >> 0] | 0;
    i10 = (_strlen(i4) | 0) + 1 | 0;
    i4 = _png_malloc_base(i1, i10) | 0;
    HEAP32[i3 >> 2] = i4;
    if (!i4) break;
    _memcpy(i4 | 0, HEAP32[i2 >> 2] | 0, i10 | 0) | 0;
    i10 = i2 + 12 | 0;
    i4 = _png_malloc_array(i1, HEAP32[i10 >> 2] | 0, 10) | 0;
    HEAP32[i3 + 8 >> 2] = i4;
    if (!i4) {
     i5 = 10;
     break;
    }
    HEAP32[i3 + 12 >> 2] = HEAP32[i10 >> 2];
    _memcpy(i4 | 0, HEAP32[i9 >> 2] | 0, (HEAP32[i10 >> 2] | 0) * 10 | 0) | 0;
    HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 8192;
    HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
    i11 = i3 + 16 | 0;
   }
  }
  if ((i5 | 0) == 7) {
   i5 = 0;
   _png_app_error(i1, 61506);
   i11 = i3;
  }
  i10 = i8 + -1 | 0;
  if (!i10) {
   i5 = 15;
   break;
  } else {
   i2 = i2 + 16 | 0;
   i3 = i11;
   i8 = i10;
  }
 }
 if ((i5 | 0) == 10) {
  _png_free(i1, HEAP32[i3 >> 2] | 0);
  HEAP32[i3 >> 2] = 0;
 } else if ((i5 | 0) == 15) return;
 if ((i8 | 0) <= 0) return;
 _png_chunk_report(i1, 61533, 1);
 return;
}

function __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE8__appendEjRKS4_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i4 = i1 + 8 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 i6 = i1 + 4 | 0;
 i7 = HEAP32[i6 >> 2] | 0;
 if (((i5 - i7 | 0) / 12 | 0) >>> 0 >= i2 >>> 0) {
  i8 = i2;
  i9 = i7;
  do {
   HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i9 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
   HEAP32[i9 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
   i9 = (HEAP32[i6 >> 2] | 0) + 12 | 0;
   HEAP32[i6 >> 2] = i9;
   i8 = i8 + -1 | 0;
  } while ((i8 | 0) != 0);
  return;
 }
 i8 = HEAP32[i1 >> 2] | 0;
 i9 = (i7 - i8 | 0) / 12 | 0;
 i7 = i9 + i2 | 0;
 if (i7 >>> 0 > 357913941) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv(i1);
 i10 = (i5 - i8 | 0) / 12 | 0;
 i8 = i10 << 1;
 i5 = i10 >>> 0 < 178956970 ? (i8 >>> 0 < i7 >>> 0 ? i7 : i8) : 357913941;
 do if (!i5) i11 = 0; else if (i5 >>> 0 > 357913941) {
  i8 = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc(i8, 29699);
  HEAP32[i8 >> 2] = 21232;
  ___cxa_throw(i8 | 0, 3136, 120);
 } else {
  i11 = __Znwj(i5 * 12 | 0) | 0;
  break;
 } while (0);
 i8 = i11 + (i9 * 12 | 0) | 0;
 i9 = i11 + (i5 * 12 | 0) | 0;
 i5 = i2;
 i2 = i8;
 i11 = i8;
 do {
  HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i2 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
  HEAP32[i2 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
  i2 = i11 + 12 | 0;
  i11 = i2;
  i5 = i5 + -1 | 0;
 } while ((i5 | 0) != 0);
 i5 = HEAP32[i1 >> 2] | 0;
 i2 = (HEAP32[i6 >> 2] | 0) - i5 | 0;
 i3 = i8 + (((i2 | 0) / -12 | 0) * 12 | 0) | 0;
 if ((i2 | 0) > 0) _memcpy(i3 | 0, i5 | 0, i2 | 0) | 0;
 HEAP32[i1 >> 2] = i3;
 HEAP32[i6 >> 2] = i11;
 HEAP32[i4 >> 2] = i9;
 if (!i5) return;
 __ZdlPv(i5);
 return;
}

function _cosf(f1) {
 f1 = Math_fround(f1);
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, f7 = f0, d8 = 0.0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i2;
 i4 = (HEAPF32[tempDoublePtr >> 2] = f1, HEAP32[tempDoublePtr >> 2] | 0);
 i5 = i4 >>> 31;
 i6 = i4 & 2147483647;
 L1 : do if (i6 >>> 0 < 1061752795) if (i6 >>> 0 < 964689920) f7 = Math_fround(1.0); else f7 = Math_fround(___cosdf(+f1)); else {
  if (i6 >>> 0 < 1081824210) {
   i4 = (i5 | 0) != 0;
   d8 = +f1;
   if (i6 >>> 0 > 1075235811) {
    f7 = Math_fround(-Math_fround(___cosdf((i4 ? 3.141592653589793 : -3.141592653589793) + d8)));
    break;
   }
   if (i4) {
    f7 = Math_fround(___sindf(d8 + 1.5707963267948966));
    break;
   } else {
    f7 = Math_fround(___sindf(1.5707963267948966 - d8));
    break;
   }
  }
  if (i6 >>> 0 < 1088565718) {
   i4 = (i5 | 0) != 0;
   if (i6 >>> 0 > 1085271519) {
    f7 = Math_fround(___cosdf((i4 ? 6.283185307179586 : -6.283185307179586) + +f1));
    break;
   }
   if (i4) {
    f7 = Math_fround(___sindf(+Math_fround(-f1) + -4.71238898038469));
    break;
   } else {
    f7 = Math_fround(___sindf(+f1 + -4.71238898038469));
    break;
   }
  }
  if (i6 >>> 0 > 2139095039) {
   f7 = Math_fround(f1 - f1);
   break;
  }
  switch ((___rem_pio2f(f1, i3) | 0) & 3) {
  case 0:
   {
    f7 = Math_fround(___cosdf(+HEAPF64[i3 >> 3]));
    break L1;
    break;
   }
  case 1:
   {
    f7 = Math_fround(___sindf(-+HEAPF64[i3 >> 3]));
    break L1;
    break;
   }
  case 2:
   {
    f7 = Math_fround(-Math_fround(___cosdf(+HEAPF64[i3 >> 3])));
    break L1;
    break;
   }
  default:
   {
    f7 = Math_fround(___sindf(+HEAPF64[i3 >> 3]));
    break L1;
   }
  }
 } while (0);
 STACKTOP = i2;
 return Math_fround(f7);
}

function __ZN5ImGui7PopFontEv() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, f11 = f0, f12 = f0, f13 = f0, f14 = f0;
 i1 = 0;
 i2 = HEAP32[1460598] | 0;
 __ZN10ImDrawList12PopTextureIDEv(HEAP32[(HEAP32[i2 + 6392 >> 2] | 0) + 632 >> 2] | 0);
 i3 = i2 + 6500 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 if ((i4 | 0) <= 0) ___assert_fail(38278, 56850, 1268, 31920);
 i5 = i4 + -1 | 0;
 HEAP32[i3 >> 2] = i5;
 do if (!i5) {
  i3 = HEAP32[1460598] | 0;
  i6 = HEAP32[i3 + 156 >> 2] | 0;
  if (!i6) {
   i7 = HEAP32[i3 + 144 >> 2] | 0;
   if ((HEAP32[i7 + 48 >> 2] | 0) > 0) {
    i8 = HEAP32[i7 + 56 >> 2] | 0;
    i1 = 9;
    break;
   } else ___assert_fail(56841, 56850, 1235, 56909);
  } else {
   i9 = i6;
   i10 = i3;
  }
 } else {
  i8 = (HEAP32[i2 + 6508 >> 2] | 0) + (i4 + -2 << 2) | 0;
  i1 = 9;
 } while (0);
 do if ((i1 | 0) == 9) {
  i4 = HEAP32[i8 >> 2] | 0;
  if (!i4) ___assert_fail(32700, 31803, 6868, 32725); else {
   i9 = i4;
   i10 = HEAP32[1460598] | 0;
   break;
  }
 } while (0);
 i8 = HEAP32[i9 + 68 >> 2] | 0;
 if (!i8) ___assert_fail(32700, 31803, 6868, 32725);
 f11 = Math_fround(HEAPF32[i9 + 4 >> 2]);
 if (!(f11 > Math_fround(0.0))) ___assert_fail(32740, 31803, 6869, 32725);
 HEAP32[i10 + 6180 >> 2] = i9;
 f12 = Math_fround(HEAPF32[i10 + 148 >> 2]);
 f13 = Math_fround(f11 * Math_fround(f12 * Math_fround(HEAPF32[i9 >> 2])));
 HEAPF32[i10 + 6188 >> 2] = f13;
 i1 = HEAP32[i10 + 6392 >> 2] | 0;
 if (!i1) f14 = Math_fround(0.0); else f14 = Math_fround(f13 * Math_fround(HEAPF32[i1 + 624 >> 2]));
 HEAPF32[i10 + 6184 >> 2] = f14;
 i1 = i8 + 40 | 0;
 i8 = HEAP32[i1 + 4 >> 2] | 0;
 i4 = i10 + 6192 | 0;
 HEAP32[i4 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i4 + 4 >> 2] = i8;
 HEAP32[i10 + 6200 >> 2] = i9;
 HEAPF32[i10 + 6204 >> 2] = f14;
 return;
}

function __ZNSt3__2L11init_wweeksEv() {
 var i1 = 0, i2 = 0;
 if (!(HEAP8[73752] | 0)) if (___cxa_guard_acquire(73752) | 0) {
  i1 = 5846704;
  do {
   HEAP32[i1 >> 2] = 0;
   HEAP32[i1 + 4 >> 2] = 0;
   HEAP32[i1 + 8 >> 2] = 0;
   i2 = 0;
   while (1) {
    if ((i2 | 0) == 3) break;
    HEAP32[i1 + (i2 << 2) >> 2] = 0;
    i2 = i2 + 1 | 0;
   }
   i1 = i1 + 12 | 0;
  } while ((i1 | 0) != 5846872);
 }
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(5846704, 19496) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(5846716, 19524) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(5846728, 19552) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(5846740, 19584) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(5846752, 19624) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(5846764, 19660) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(5846776, 19688) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(5846788, 19724) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(5846800, 19740) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(5846812, 19756) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(5846824, 19772) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(5846836, 19788) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(5846848, 19804) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(5846860, 19820) | 0;
 return;
}

function __ZNSt3__2L10init_weeksEv() {
 var i1 = 0, i2 = 0;
 if (!(HEAP8[73672] | 0)) if (___cxa_guard_acquire(73672) | 0) {
  i1 = 5845892;
  do {
   HEAP32[i1 >> 2] = 0;
   HEAP32[i1 + 4 >> 2] = 0;
   HEAP32[i1 + 8 >> 2] = 0;
   i2 = 0;
   while (1) {
    if ((i2 | 0) == 3) break;
    HEAP32[i1 + (i2 << 2) >> 2] = 0;
    i2 = i2 + 1 | 0;
   }
   i1 = i1 + 12 | 0;
  } while ((i1 | 0) != 5846060);
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(5845892, 71117) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(5845904, 71124) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(5845916, 71131) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(5845928, 71139) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(5845940, 71149) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(5845952, 71158) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(5845964, 71165) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(5845976, 71174) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(5845988, 71178) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(5846e3, 71182) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(5846012, 71186) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(5846024, 71190) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(5846036, 71194) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(5846048, 71198) | 0;
 return;
}

function __ZN5ImGui10InitializeEP12ImGuiContext(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i3 = i2;
 if (HEAP8[i1 >> 0] | 0) ___assert_fail(34805, 31803, 3915, 34841);
 if (HEAP8[i1 + 11048 >> 0] | 0) ___assert_fail(34805, 31803, 3915, 34841);
 HEAP32[i3 + 20 >> 2] = 0;
 HEAP32[i3 >> 2] = 34852;
 i4 = __Z6ImHashPKvij(34852, 0, 0) | 0;
 HEAP32[i3 + 4 >> 2] = i4;
 HEAP32[i3 + 8 >> 2] = 28;
 HEAP32[i3 + 12 >> 2] = 11;
 HEAP32[i3 + 16 >> 2] = 2;
 i4 = i1 + 11068 | 0;
 if (HEAP32[i4 >> 2] | 0) {
  __ZN8ImVectorI20ImGuiSettingsHandlerE6insertEPKS0_RS2_(i4, HEAP32[i1 + 11076 >> 2] | 0, i3) | 0;
  HEAP8[i1 >> 0] = 1;
  STACKTOP = i2;
  return;
 }
 i5 = i1 + 11072 | 0;
 if (!(HEAP32[i5 >> 2] | 0)) {
  HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
  i6 = __ZL13MallocWrapperjPv(192, 0) | 0;
  i7 = i1 + 11076 | 0;
  i8 = HEAP32[i7 >> 2] | 0;
  if (!i8) i9 = i7; else {
   _memcpy(i6 | 0, i8 | 0, (HEAP32[i4 >> 2] | 0) * 24 | 0) | 0;
   i8 = HEAP32[i7 >> 2] | 0;
   if (i8 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
   __ZL11FreeWrapperPvS_(i8, 0);
   i9 = i7;
  }
  HEAP32[i9 >> 2] = i6;
  HEAP32[i5 >> 2] = 8;
  i10 = i6;
  i11 = HEAP32[i4 >> 2] | 0;
 } else {
  i10 = HEAP32[i1 + 11076 >> 2] | 0;
  i11 = 0;
 }
 i6 = i10 + (i11 * 24 | 0) | 0;
 HEAP32[i6 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i6 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 HEAP32[i6 + 16 >> 2] = HEAP32[i3 + 16 >> 2];
 HEAP32[i6 + 20 >> 2] = HEAP32[i3 + 20 >> 2];
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
 HEAP8[i1 >> 0] = 1;
 STACKTOP = i2;
 return;
}

function __ZN5ImGui6PushIDEPKc(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i2 = HEAP32[(HEAP32[1460598] | 0) + 6392 >> 2] | 0;
 i3 = i2 + 452 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 if ((i4 | 0) <= 0) ___assert_fail(38278, 56850, 1245, 38287);
 i5 = i2 + 460 | 0;
 i6 = __Z6ImHashPKvij(i1, 0, HEAP32[(HEAP32[i5 >> 2] | 0) + (i4 + -1 << 2) >> 2] | 0) | 0;
 i4 = HEAP32[1460598] | 0;
 if ((HEAP32[i4 + 6420 >> 2] | 0) == (i6 | 0)) HEAP8[i4 + 6432 >> 0] = 1;
 if ((HEAP32[i4 + 6424 >> 2] | 0) == (i6 | 0)) HEAP8[i4 + 6436 >> 0] = 1;
 i4 = HEAP32[i3 >> 2] | 0;
 i1 = i2 + 456 | 0;
 if ((i4 | 0) != (HEAP32[i1 >> 2] | 0)) {
  i7 = i4;
  i8 = HEAP32[i5 >> 2] | 0;
  i9 = i8 + (i7 << 2) | 0;
  HEAP32[i9 >> 2] = i6;
  i10 = HEAP32[i3 >> 2] | 0;
  i11 = i10 + 1 | 0;
  HEAP32[i3 >> 2] = i11;
  return;
 }
 i2 = i4 + 1 | 0;
 if (!i4) i12 = 8; else i12 = ((i4 | 0) / 2 | 0) + i4 | 0;
 i13 = (i12 | 0) > (i2 | 0) ? i12 : i2;
 if ((i4 | 0) >= (i13 | 0)) {
  i7 = i4;
  i8 = HEAP32[i5 >> 2] | 0;
  i9 = i8 + (i7 << 2) | 0;
  HEAP32[i9 >> 2] = i6;
  i10 = HEAP32[i3 >> 2] | 0;
  i11 = i10 + 1 | 0;
  HEAP32[i3 >> 2] = i11;
  return;
 }
 HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
 i4 = __ZL13MallocWrapperjPv(i13 << 2, 0) | 0;
 i2 = HEAP32[i5 >> 2] | 0;
 if (!i2) i14 = i5; else {
  _memcpy(i4 | 0, i2 | 0, HEAP32[i3 >> 2] << 2 | 0) | 0;
  i2 = HEAP32[i5 >> 2] | 0;
  if (i2 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
  __ZL11FreeWrapperPvS_(i2, 0);
  i14 = i5;
 }
 HEAP32[i14 >> 2] = i4;
 HEAP32[i1 >> 2] = i13;
 i7 = HEAP32[i3 >> 2] | 0;
 i8 = HEAP32[i5 >> 2] | 0;
 i9 = i8 + (i7 << 2) | 0;
 HEAP32[i9 >> 2] = i6;
 i10 = HEAP32[i3 >> 2] | 0;
 i11 = i10 + 1 | 0;
 HEAP32[i3 >> 2] = i11;
 return;
}

function ___fdopen(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i4 = i3 + 40 | 0;
 i5 = i3 + 24 | 0;
 i6 = i3 + 16 | 0;
 i7 = i3;
 i8 = i3 + 56 | 0;
 if (!(_strchr(69714, HEAP8[i2 >> 0] | 0) | 0)) {
  i9 = ___errno_location() | 0;
  HEAP32[i9 >> 2] = 22;
  i10 = 0;
 } else {
  i9 = _malloc(1156) | 0;
  if (!i9) i10 = 0; else {
   _memset(i9 | 0, 0, 124) | 0;
   if (!(_strchr(i2, 43) | 0)) HEAP32[i9 >> 2] = (HEAP8[i2 >> 0] | 0) == 114 ? 8 : 4;
   if (_strchr(i2, 101) | 0) {
    HEAP32[i7 >> 2] = i1;
    HEAP32[i7 + 4 >> 2] = 2;
    HEAP32[i7 + 8 >> 2] = 1;
    ___syscall221(221, i7 | 0) | 0;
   }
   if ((HEAP8[i2 >> 0] | 0) == 97) {
    HEAP32[i6 >> 2] = i1;
    HEAP32[i6 + 4 >> 2] = 3;
    i2 = ___syscall221(221, i6 | 0) | 0;
    if (!(i2 & 1024)) {
     HEAP32[i5 >> 2] = i1;
     HEAP32[i5 + 4 >> 2] = 4;
     HEAP32[i5 + 8 >> 2] = i2 | 1024;
     ___syscall221(221, i5 | 0) | 0;
    }
    i5 = HEAP32[i9 >> 2] | 128;
    HEAP32[i9 >> 2] = i5;
    i11 = i5;
   } else i11 = HEAP32[i9 >> 2] | 0;
   HEAP32[i9 + 60 >> 2] = i1;
   HEAP32[i9 + 44 >> 2] = i9 + 132;
   HEAP32[i9 + 48 >> 2] = 1024;
   i5 = i9 + 75 | 0;
   HEAP8[i5 >> 0] = -1;
   if (!(i11 & 8)) {
    HEAP32[i4 >> 2] = i1;
    HEAP32[i4 + 4 >> 2] = 21523;
    HEAP32[i4 + 8 >> 2] = i8;
    if (!(___syscall54(54, i4 | 0) | 0)) HEAP8[i5 >> 0] = 10;
   }
   HEAP32[i9 + 32 >> 2] = 8;
   HEAP32[i9 + 36 >> 2] = 5;
   HEAP32[i9 + 40 >> 2] = 6;
   HEAP32[i9 + 12 >> 2] = 9;
   if (!(HEAP32[1461005] | 0)) HEAP32[i9 + 76 >> 2] = -1;
   ___ofl_add(i9) | 0;
   i10 = i9;
  }
 }
 STACKTOP = i3;
 return i10 | 0;
}

function __ZNSt3__26vectorIN3glm3vecILi2EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE8__appendEjRKS4_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i4 = i1 + 8 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 i6 = i1 + 4 | 0;
 i7 = HEAP32[i6 >> 2] | 0;
 if (i5 - i7 >> 3 >>> 0 >= i2 >>> 0) {
  i8 = i2;
  i9 = i7;
  do {
   i10 = i3;
   i11 = HEAP32[i10 + 4 >> 2] | 0;
   i12 = i9;
   HEAP32[i12 >> 2] = HEAP32[i10 >> 2];
   HEAP32[i12 + 4 >> 2] = i11;
   i9 = (HEAP32[i6 >> 2] | 0) + 8 | 0;
   HEAP32[i6 >> 2] = i9;
   i8 = i8 + -1 | 0;
  } while ((i8 | 0) != 0);
  return;
 }
 i8 = HEAP32[i1 >> 2] | 0;
 i9 = i7 - i8 >> 3;
 i7 = i9 + i2 | 0;
 if (i7 >>> 0 > 536870911) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv(i1);
 i11 = i5 - i8 | 0;
 i8 = i11 >> 2;
 i5 = i11 >> 3 >>> 0 < 268435455 ? (i8 >>> 0 < i7 >>> 0 ? i7 : i8) : 536870911;
 do if (!i5) i13 = 0; else if (i5 >>> 0 > 536870911) {
  i8 = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc(i8, 29699);
  HEAP32[i8 >> 2] = 21232;
  ___cxa_throw(i8 | 0, 3136, 120);
 } else {
  i13 = __Znwj(i5 << 3) | 0;
  break;
 } while (0);
 i8 = i13 + (i9 << 3) | 0;
 i9 = i13 + (i5 << 3) | 0;
 i5 = i2;
 i2 = i8;
 i13 = i8;
 do {
  i7 = i3;
  i11 = HEAP32[i7 + 4 >> 2] | 0;
  i12 = i2;
  HEAP32[i12 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i12 + 4 >> 2] = i11;
  i2 = i13 + 8 | 0;
  i13 = i2;
  i5 = i5 + -1 | 0;
 } while ((i5 | 0) != 0);
 i5 = HEAP32[i1 >> 2] | 0;
 i2 = (HEAP32[i6 >> 2] | 0) - i5 | 0;
 i3 = i8 + (0 - (i2 >> 3) << 3) | 0;
 if ((i2 | 0) > 0) _memcpy(i3 | 0, i5 | 0, i2 | 0) | 0;
 HEAP32[i1 >> 2] = i3;
 HEAP32[i6 >> 2] = i13;
 HEAP32[i4 >> 2] = i9;
 if (!i5) return;
 __ZdlPv(i5);
 return;
}

function __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4 + 12 | 0;
 i6 = i4;
 i7 = i4 + 8 | 0;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_(i6, i1);
 if (!(HEAP8[i6 >> 0] | 0)) {
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(i6);
  STACKTOP = i4;
  return i1 | 0;
 }
 i8 = (HEAP32[i1 >> 2] | 0) + -12 | 0;
 HEAP32[i7 >> 2] = HEAP32[i1 + (HEAP32[i8 >> 2] | 0) + 24 >> 2];
 i9 = i1 + (HEAP32[i8 >> 2] | 0) | 0;
 i8 = HEAP32[i9 + 4 >> 2] | 0;
 i10 = i2 + i3 | 0;
 i3 = i9 + 76 | 0;
 i11 = HEAP32[i3 >> 2] | 0;
 if ((i11 | 0) == -1) {
  __ZNKSt3__28ios_base6getlocEv(i5, i9);
  i12 = __ZNKSt3__26locale9use_facetERNS0_2idE(i5, 5845188) | 0;
  i13 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i12 >> 2] | 0) + 28 >> 2] & 31](i12, 32) | 0;
  __ZNSt3__26localeD2Ev(i5);
  i12 = i13 << 24 >> 24;
  HEAP32[i3 >> 2] = i12;
  i14 = i12;
 } else i14 = i11;
 HEAP32[i5 >> 2] = HEAP32[i7 >> 2];
 if (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i5, i2, (i8 & 176 | 0) == 32 ? i10 : i2, i10, i9, i14 & 255) | 0) {
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(i6);
  STACKTOP = i4;
  return i1 | 0;
 }
 i14 = i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0;
 __ZNSt3__28ios_base5clearEj(i14, HEAP32[i14 + 16 >> 2] | 5);
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(i6);
 STACKTOP = i4;
 return i1 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i3 = 0;
 if (i2 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i1);
 i4 = i1 + 11 | 0;
 i5 = HEAP8[i4 >> 0] | 0;
 i6 = i5 << 24 >> 24 < 0;
 if (i6) {
  i7 = HEAP32[i1 + 4 >> 2] | 0;
  i8 = (HEAP32[i1 + 8 >> 2] & 2147483647) + -1 | 0;
 } else {
  i7 = i5 & 255;
  i8 = 10;
 }
 i9 = i7 >>> 0 > i2 >>> 0 ? i7 : i2;
 i2 = i9 >>> 0 < 11;
 i10 = i2 ? 10 : (i9 + 16 & -16) + -1 | 0;
 do if ((i10 | 0) != (i8 | 0)) {
  do if (i2) {
   i9 = HEAP32[i1 >> 2] | 0;
   if (i6) {
    i11 = 0;
    i12 = i9;
    i13 = i1;
    i3 = 13;
   } else {
    __ZNSt3__211char_traitsIcE4copyEPcPKcj(i1, i9, (i5 & 255) + 1 | 0) | 0;
    __ZdlPv(i9);
    i3 = 16;
   }
  } else {
   i9 = i10 + 1 | 0;
   i14 = __Znwj(i9) | 0;
   if (i6) {
    i11 = 1;
    i12 = HEAP32[i1 >> 2] | 0;
    i13 = i14;
    i3 = 13;
    break;
   } else {
    __ZNSt3__211char_traitsIcE4copyEPcPKcj(i14, i1, (i5 & 255) + 1 | 0) | 0;
    i15 = i14;
    i16 = i9;
    i17 = i1 + 4 | 0;
    i3 = 15;
    break;
   }
  } while (0);
  if ((i3 | 0) == 13) {
   i9 = i1 + 4 | 0;
   __ZNSt3__211char_traitsIcE4copyEPcPKcj(i13, i12, (HEAP32[i9 >> 2] | 0) + 1 | 0) | 0;
   __ZdlPv(i12);
   if (i11) {
    i15 = i13;
    i16 = i10 + 1 | 0;
    i17 = i9;
    i3 = 15;
   } else i3 = 16;
  }
  if ((i3 | 0) == 15) {
   HEAP32[i1 + 8 >> 2] = i16 | -2147483648;
   HEAP32[i17 >> 2] = i7;
   HEAP32[i1 >> 2] = i15;
   break;
  } else if ((i3 | 0) == 16) {
   HEAP8[i4 >> 0] = i7;
   break;
  }
 } while (0);
 return;
}

function __ZNSt3__26__treeINS_12__value_typeIP4MeshNS_4listIN11RenderQueue9TransformENS_9allocatorIS6_EEEEEENS_19__map_value_compareIS3_SA_NS_4lessIS3_EELb1EEENS7_ISA_EEE30__emplace_hint_unique_key_argsIS3_JRKNS_4pairIKS3_S9_EEEEENS_15__tree_iteratorISA_PNS_11__tree_nodeISA_PvEEiEENS_21__tree_const_iteratorISA_SR_iEERKT_DpOT0_(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i5 + 12 | 0;
 i7 = i5 + 8 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i6 >> 2] = HEAP32[i8 >> 2];
 i8 = __ZNSt3__26__treeINS_12__value_typeIP4MeshNS_4listIN11RenderQueue9TransformENS_9allocatorIS6_EEEEEENS_19__map_value_compareIS3_SA_NS_4lessIS3_EELb1EEENS7_ISA_EEE12__find_equalIS3_EERPNS_16__tree_node_baseIPvEENS_21__tree_const_iteratorISA_PNS_11__tree_nodeISA_SJ_EEiEERPNS_15__tree_end_nodeISL_EESM_RKT_(i1, i6, i7, i5 + 4 | 0, i3) | 0;
 i3 = HEAP32[i8 >> 2] | 0;
 if (i3 | 0) {
  i9 = i3;
  STACKTOP = i5;
  return i9 | 0;
 }
 i3 = __Znwj(32) | 0;
 HEAP32[i3 + 16 >> 2] = HEAP32[i4 >> 2];
 __ZNSt3__24listIN11RenderQueue9TransformENS_9allocatorIS2_EEEC2ERKS5_(i3 + 20 | 0, i4 + 4 | 0);
 i4 = HEAP32[i7 >> 2] | 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = i4;
 HEAP32[i8 >> 2] = i3;
 i4 = HEAP32[HEAP32[i1 >> 2] >> 2] | 0;
 if (!i4) i10 = i3; else {
  HEAP32[i1 >> 2] = i4;
  i10 = HEAP32[i8 >> 2] | 0;
 }
 __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[i1 + 4 >> 2] | 0, i10);
 i10 = i1 + 8 | 0;
 HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
 i9 = i3;
 STACKTOP = i5;
 return i9 | 0;
}

function __ZN7CityMap8generateEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (!i2) {
  i3 = i1 + 36 | 0;
  HEAP8[i3 >> 0] = 1;
  return;
 }
 i4 = i1 + 4 | 0;
 i5 = 0;
 i6 = HEAP32[i4 >> 2] | 0;
 i7 = i2;
 while (1) {
  if (!i6) {
   i8 = 0;
   i9 = i7;
  } else {
   i2 = 0;
   do {
    if ((__ZN7CityMap4diceEv(0) | 0) > 420) {
     i10 = i1 + 128 + (i5 * 22528 | 0) + (i2 * 88 | 0) | 0;
     HEAP32[i10 + 12 >> 2] = 1;
     i11 = i10 + 28 | 0;
     i12 = i10 + 32 | 0;
     i13 = i10 + 36 | 0;
     i14 = i10 + 40 | 0;
     if (((HEAP32[i12 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) + (HEAP32[i13 >> 2] | 0) | 0) == (0 - (HEAP32[i14 >> 2] | 0) | 0)) do {
      if ((__ZN7CityMap4diceEv(0) | 0) > 300) {
       i10 = __ZN7CityMap4diceEv(0) | 0;
       HEAP32[i11 >> 2] = i10;
      }
      if ((__ZN7CityMap4diceEv(0) | 0) > 300) {
       i10 = __ZN7CityMap4diceEv(0) | 0;
       HEAP32[i12 >> 2] = i10;
      }
      if ((__ZN7CityMap4diceEv(0) | 0) > 300) {
       i10 = __ZN7CityMap4diceEv(0) | 0;
       HEAP32[i13 >> 2] = i10;
      }
      if ((__ZN7CityMap4diceEv(0) | 0) > 300) {
       i10 = __ZN7CityMap4diceEv(0) | 0;
       HEAP32[i14 >> 2] = i10;
       i15 = i10;
      } else i15 = HEAP32[i14 >> 2] | 0;
     } while (((HEAP32[i12 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) + (HEAP32[i13 >> 2] | 0) | 0) == (0 - i15 | 0));
    }
    i2 = i2 + 1 | 0;
    i16 = HEAP32[i4 >> 2] | 0;
   } while (i2 >>> 0 < i16 >>> 0);
   i8 = i16;
   i9 = HEAP32[i1 >> 2] | 0;
  }
  i5 = i5 + 1 | 0;
  if (i5 >>> 0 >= i9 >>> 0) break; else {
   i6 = i8;
   i7 = i9;
  }
 }
 i3 = i1 + 36 | 0;
 HEAP8[i3 >> 0] = 1;
 return;
}

function _png_colorspace_set_rgb_coefficients(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, d7 = 0.0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 if (HEAP8[i1 + 701 >> 0] | 0) return;
 if (!(HEAP16[i1 + 898 >> 1] & 2)) return;
 i2 = HEAP32[i1 + 864 >> 2] | 0;
 i3 = HEAP32[i1 + 876 >> 2] | 0;
 i4 = HEAP32[i1 + 888 >> 2] | 0;
 i5 = i3 + i2 + i4 | 0;
 if (!((i2 | 0) > -1 & (i5 | 0) > 0)) _png_error(i1, 59398);
 if (!i2) i6 = 0; else {
  d7 = +Math_floor(+(+(i2 | 0) * 32768.0 / +(i5 | 0) + .5));
  if (d7 <= 2147483647.0 & d7 >= -2147483648.0) i6 = ~~d7; else _png_error(i1, 59398);
 }
 if (!((i3 | 0) > -1 & i6 >>> 0 < 32769)) _png_error(i1, 59398);
 if (!i3) i8 = 0; else {
  d7 = +Math_floor(+(+(i3 | 0) * 32768.0 / +(i5 | 0) + .5));
  if (d7 <= 2147483647.0 & d7 >= -2147483648.0) i8 = ~~d7; else _png_error(i1, 59398);
 }
 if (!((i4 | 0) > -1 & i8 >>> 0 < 32769)) _png_error(i1, 59398);
 if (!i4) i9 = 0; else {
  d7 = +Math_floor(+(+(i4 | 0) * 32768.0 / +(i5 | 0) + .5));
  i5 = ~~d7;
  if (d7 <= 2147483647.0 & d7 >= -2147483648.0 & i5 >>> 0 < 32769) i9 = i5; else _png_error(i1, 59398);
 }
 i5 = i8 + i6 + i9 | 0;
 if ((i5 | 0) >= 32770) _png_error(i1, 59398);
 i4 = (i5 | 0) == 32769 ? -1 : (i5 | 0) < 32768 & 1;
 do if (!i4) {
  i10 = i9;
  i11 = i8;
  i12 = i6;
 } else {
  if (!((i8 | 0) < (i6 | 0) | (i8 | 0) < (i9 | 0))) {
   i10 = i9;
   i11 = i4 + i8 | 0;
   i12 = i6;
   break;
  }
  if ((i6 | 0) < (i8 | 0) | (i6 | 0) < (i9 | 0)) {
   i10 = i4 + i9 | 0;
   i11 = i8;
   i12 = i6;
   break;
  } else {
   i10 = i9;
   i11 = i8;
   i12 = i4 + i6 | 0;
   break;
  }
 } while (0);
 if ((i11 + i12 + i10 | 0) != 32768) _png_error(i1, 59356);
 HEAP16[i1 + 702 >> 1] = i12;
 HEAP16[i1 + 704 >> 1] = i11;
 return;
}

function __Z15ImTextStrToUtf8PciPKtS1_(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i5 = i1 + i2 | 0;
 i2 = i5 + -1 | 0;
 L1 : do if (i2 >>> 0 > i1 >>> 0) {
  i6 = (i4 | 0) == 0;
  i7 = i5;
  i8 = i1;
  i9 = i3;
  while (1) {
   if (!(i6 | i9 >>> 0 < i4 >>> 0)) {
    i10 = i8;
    break L1;
   }
   i11 = HEAP16[i9 >> 1] | 0;
   if (!(i11 << 16 >> 16)) {
    i10 = i8;
    break L1;
   }
   i9 = i9 + 2 | 0;
   if ((i11 & 65535) < 128) {
    HEAP8[i8 >> 0] = i11;
    i12 = i8 + 1 | 0;
   } else {
    i13 = i11 & 65535;
    i14 = i7 - i8 | 0;
    L10 : do if ((i11 & 65535) < 2048) if ((i14 | 0) < 3) i15 = 0; else {
     HEAP8[i8 >> 0] = (i13 >>> 6) + 192;
     HEAP8[i8 + 1 >> 0] = i13 & 63 | 128;
     i15 = 2;
    } else switch ((i13 & 64512) << 16 >> 16) {
    case -9216:
     {
      i15 = 0;
      break L10;
      break;
     }
    case -10240:
     {
      if ((i14 | 0) < 5) {
       i15 = 0;
       break L10;
      }
      HEAP8[i8 >> 0] = -16;
      HEAP8[i8 + 1 >> 0] = i13 >>> 12 | 128;
      HEAP8[i8 + 2 >> 0] = i13 >>> 6 & 63 | 128;
      HEAP8[i8 + 3 >> 0] = i13 & 63 | 128;
      i15 = 4;
      break L10;
      break;
     }
    default:
     {
      if ((i14 | 0) < 4) {
       i15 = 0;
       break L10;
      }
      HEAP8[i8 >> 0] = i13 >>> 12 | 224;
      HEAP8[i8 + 1 >> 0] = i13 >>> 6 & 63 | 128;
      HEAP8[i8 + 2 >> 0] = i13 & 63 | 128;
      i15 = 3;
      break L10;
     }
    } while (0);
    i12 = i8 + i15 | 0;
   }
   if (i12 >>> 0 >= i2 >>> 0) {
    i10 = i12;
    break;
   } else i8 = i12;
  }
 } else i10 = i1; while (0);
 HEAP8[i10 >> 0] = 0;
 return i10 - i1 | 0;
}

function __ZN5ImGui17RenderTextWrappedE6ImVec2PKcS2_f(i1, i2, i3, f4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 f4 = Math_fround(f4);
 var i5 = 0, i6 = 0, i7 = 0, f8 = f0, f9 = f0, f10 = f0, f11 = f0, f12 = f0, f13 = f0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i5 = HEAP32[1460598] | 0;
 i6 = HEAP32[i5 + 6392 >> 2] | 0;
 if (!i3) i7 = i2 + (_strlen(i2) | 0) | 0; else i7 = i3;
 if ((i7 | 0) == (i2 | 0)) return;
 f8 = Math_fround(HEAPF32[i5 + 6184 >> 2]);
 f9 = Math_fround(HEAPF32[i5 + 5508 >> 2]);
 f10 = Math_fround(HEAPF32[i5 + 5512 >> 2]);
 f11 = Math_fround(HEAPF32[i5 + 5516 >> 2]);
 f12 = Math_fround(HEAPF32[i5 + 5520 >> 2]);
 f13 = Math_fround(f12 * Math_fround(HEAPF32[i5 + 5356 >> 2]));
 i3 = f9 < Math_fround(0.0);
 i14 = f9 > Math_fround(1.0);
 i15 = ~~Math_fround(Math_fround((i14 ? Math_fround(1.0) : f9) * Math_fround(255.0)) + Math_fround(.5));
 i14 = f10 < Math_fround(0.0);
 i16 = f10 > Math_fround(1.0);
 i17 = ~~Math_fround(Math_fround((i16 ? Math_fround(1.0) : f10) * Math_fround(255.0)) + Math_fround(.5)) << 8;
 i16 = f11 < Math_fround(0.0);
 i18 = f11 > Math_fround(1.0);
 i19 = ~~Math_fround(Math_fround((i18 ? Math_fround(1.0) : f11) * Math_fround(255.0)) + Math_fround(.5)) << 16;
 i18 = f13 < Math_fround(0.0);
 i20 = f13 > Math_fround(1.0);
 i21 = ~~Math_fround(Math_fround((i20 ? Math_fround(1.0) : f13) * Math_fround(255.0)) + Math_fround(.5)) << 24;
 __ZN10ImDrawList7AddTextEPK6ImFontfRK6ImVec2jPKcS7_fPK6ImVec4(HEAP32[i6 + 632 >> 2] | 0, HEAP32[i5 + 6180 >> 2] | 0, f8, i1, (i14 ? 0 : i17) | (i3 ? 0 : i15) | (i16 ? 0 : i19) | (i18 ? 0 : i21), i2, i7, f4, 0);
 if (!(HEAP8[i5 + 11092 >> 0] | 0)) return;
 __ZL15LogRenderedTextPK6ImVec2PKcS3_(i1, i2, i7);
 return;
}

function __ZN5ImGui18BringWindowToFrontEP11ImGuiWindow(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i2 = 0;
 i3 = i1;
 i4 = HEAP32[1460598] | 0;
 i5 = i4 + 6340 | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 if ((i6 | 0) <= 0) ___assert_fail(38278, 56850, 1245, 38287);
 i7 = i4 + 6348 | 0;
 i8 = HEAP32[i7 >> 2] | 0;
 i9 = HEAP32[i8 + (i6 + -1 << 2) >> 2] | 0;
 if ((i9 | 0) == (i1 | 0)) return;
 if (!((i6 | 0) > 1 ? (HEAP32[i9 + 756 >> 2] | 0) != (i1 | 0) : 0)) return;
 i9 = i6 + -2 | 0;
 while (1) {
  i10 = i8 + (i9 << 2) | 0;
  if ((HEAP32[i10 >> 2] | 0) == (i1 | 0)) break;
  if ((i9 | 0) > 0) i9 = i9 + -1 | 0; else {
   i2 = 21;
   break;
  }
 }
 if ((i2 | 0) == 21) return;
 if (!((i9 | 0) > -1 & (i6 | 0) > (i9 | 0))) ___assert_fail(32800, 56850, 1270, 32829);
 _memmove(i10 | 0, i10 + 4 | 0, (i6 - i9 << 2) + -4 | 0) | 0;
 i9 = HEAP32[i5 >> 2] | 0;
 i6 = i9 + -1 | 0;
 HEAP32[i5 >> 2] = i6;
 i10 = i4 + 6344 | 0;
 if ((i6 | 0) == (HEAP32[i10 >> 2] | 0)) {
  if (!i6) i11 = 8; else i11 = ((i6 | 0) / 2 | 0) + i6 | 0;
  i4 = (i11 | 0) > (i9 | 0) ? i11 : i9;
  HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
  i9 = __ZL13MallocWrapperjPv(i4 << 2, 0) | 0;
  i11 = HEAP32[i7 >> 2] | 0;
  if (!i11) i12 = i7; else {
   _memcpy(i9 | 0, i11 | 0, HEAP32[i5 >> 2] << 2 | 0) | 0;
   i11 = HEAP32[i7 >> 2] | 0;
   if (i11 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
   __ZL11FreeWrapperPvS_(i11, 0);
   i12 = i7;
  }
  HEAP32[i12 >> 2] = i9;
  HEAP32[i10 >> 2] = i4;
  i13 = i9;
  i14 = HEAP32[i5 >> 2] | 0;
 } else {
  i13 = HEAP32[i7 >> 2] | 0;
  i14 = i6;
 }
 HEAP32[i13 + (i14 << 2) >> 2] = i3;
 HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 return;
}

function __ZNSt3__27getlineIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_istreamIT_T0_EES9_RNS_12basic_stringIS6_S7_T1_EES6_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4;
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b(i5, i1, 1);
 if (!(HEAP8[i5 >> 0] | 0)) {
  STACKTOP = i4;
  return i1 | 0;
 }
 i5 = i2 + 11 | 0;
 if ((HEAP8[i5 >> 0] | 0) < 0) {
  HEAP8[HEAP32[i2 >> 2] >> 0] = 0;
  i6 = i2 + 4 | 0;
  HEAP32[i6 >> 2] = 0;
  i7 = i6;
 } else {
  HEAP8[i2 >> 0] = 0;
  HEAP8[i5 >> 0] = 0;
  i7 = i2 + 4 | 0;
 }
 i6 = 0;
 while (1) {
  i8 = HEAP32[i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
  i9 = i8 + 12 | 0;
  i10 = HEAP32[i9 >> 2] | 0;
  if ((i10 | 0) == (HEAP32[i8 + 16 >> 2] | 0)) {
   i11 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 40 >> 2] & 127](i8) | 0;
   if ((i11 | 0) == -1) {
    i12 = i6;
    i13 = 2;
    break;
   } else i14 = i11;
  } else {
   HEAP32[i9 >> 2] = i10 + 1;
   i14 = HEAPU8[i10 >> 0] | 0;
  }
  i10 = i6 + 1 | 0;
  i9 = i14 & 255;
  if (i9 << 24 >> 24 == i3 << 24 >> 24) {
   i12 = i10;
   i13 = 0;
   break;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(i2, i9);
  if ((HEAP8[i5 >> 0] | 0) < 0 & (HEAP32[i7 >> 2] | 0) == -17) {
   i12 = i10;
   i13 = 4;
   break;
  } else i6 = i10;
 }
 i6 = i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0;
 __ZNSt3__28ios_base5clearEj(i6, HEAP32[i6 + 16 >> 2] | ((i12 | 0) == 0 ? i13 | 4 : i13));
 STACKTOP = i4;
 return i1 | 0;
}

function _make_ga_colormap(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = 0;
 do {
  i3 = ((i2 << 8 | 115) >>> 0) / 231 | 0;
  _png_create_colormap_entry(i1, i2, i3, i3, i3, 255, 1);
  i2 = i2 + 1 | 0;
 } while ((i2 | 0) != 231);
 _png_create_colormap_entry(i1, 231, 255, 255, 255, 0, 1);
 _png_create_colormap_entry(i1, 232, 0, 0, 0, 51, 1);
 _png_create_colormap_entry(i1, 233, 51, 51, 51, 51, 1);
 _png_create_colormap_entry(i1, 234, 102, 102, 102, 51, 1);
 _png_create_colormap_entry(i1, 235, 153, 153, 153, 51, 1);
 _png_create_colormap_entry(i1, 236, 204, 204, 204, 51, 1);
 _png_create_colormap_entry(i1, 237, 255, 255, 255, 51, 1);
 _png_create_colormap_entry(i1, 238, 0, 0, 0, 102, 1);
 _png_create_colormap_entry(i1, 239, 51, 51, 51, 102, 1);
 _png_create_colormap_entry(i1, 240, 102, 102, 102, 102, 1);
 _png_create_colormap_entry(i1, 241, 153, 153, 153, 102, 1);
 _png_create_colormap_entry(i1, 242, 204, 204, 204, 102, 1);
 _png_create_colormap_entry(i1, 243, 255, 255, 255, 102, 1);
 _png_create_colormap_entry(i1, 244, 0, 0, 0, 153, 1);
 _png_create_colormap_entry(i1, 245, 51, 51, 51, 153, 1);
 _png_create_colormap_entry(i1, 246, 102, 102, 102, 153, 1);
 _png_create_colormap_entry(i1, 247, 153, 153, 153, 153, 1);
 _png_create_colormap_entry(i1, 248, 204, 204, 204, 153, 1);
 _png_create_colormap_entry(i1, 249, 255, 255, 255, 153, 1);
 _png_create_colormap_entry(i1, 250, 0, 0, 0, 204, 1);
 _png_create_colormap_entry(i1, 251, 51, 51, 51, 204, 1);
 _png_create_colormap_entry(i1, 252, 102, 102, 102, 204, 1);
 _png_create_colormap_entry(i1, 253, 153, 153, 153, 204, 1);
 _png_create_colormap_entry(i1, 254, 204, 204, 204, 204, 1);
 _png_create_colormap_entry(i1, 255, 255, 255, 255, 204, 1);
 return 256;
}

function _png_image_read_init(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i3 + 4 | 0;
 i5 = i3;
 if (HEAP32[i1 >> 2] | 0) {
  i6 = _png_image_error(i1, 64863) | 0;
  STACKTOP = i3;
  return i6 | 0;
 }
 i7 = _png_create_png_struct(64826, i1, 48, 49, 0, 0, 0) | 0;
 L5 : do if (!i7) {
  HEAP32[i4 >> 2] = 0;
  i8 = i1;
  i9 = i8 + 96 | 0;
  do {
   HEAP32[i8 >> 2] = 0;
   i8 = i8 + 4 | 0;
  } while ((i8 | 0) < (i9 | 0));
  HEAP32[i1 + 4 >> 2] = 1;
  i2 = 9;
 } else {
  HEAP32[i7 + 208 >> 2] = 32768;
  HEAP32[i7 + 796 >> 2] = 8192;
  i10 = i7 + 212 | 0;
  HEAP32[i10 >> 2] = HEAP32[i10 >> 2] | 3145728;
  _png_set_read_fn(i7, 0, 0);
  HEAP32[i4 >> 2] = i7;
  i8 = i1;
  i9 = i8 + 96 | 0;
  do {
   HEAP32[i8 >> 2] = 0;
   i8 = i8 + 4 | 0;
  } while ((i8 | 0) < (i9 | 0));
  HEAP32[i1 + 4 >> 2] = 1;
  i10 = _png_create_info_struct(i7) | 0;
  HEAP32[i5 >> 2] = i10;
  i11 = i7;
  i12 = i10;
  do if (i10 | 0) {
   i13 = _png_malloc_warn(i7, 24) | 0;
   if (!i13) {
    _png_destroy_info_struct(i7, i5);
    break;
   } else {
    i14 = i13 + 8 | 0;
    HEAP32[i14 >> 2] = 0;
    HEAP32[i14 + 4 >> 2] = 0;
    HEAP32[i14 + 8 >> 2] = 0;
    HEAP32[i14 + 12 >> 2] = 0;
    HEAP32[i13 >> 2] = i11;
    HEAP32[i13 + 4 >> 2] = i12;
    HEAP8[i13 + 20 >> 0] = 0;
    HEAP32[i1 >> 2] = i13;
    i15 = 1;
    break L5;
   }
  } while (0);
  _png_destroy_read_struct(i4, 0, 0);
  i2 = 9;
 } while (0);
 if ((i2 | 0) == 9) i15 = _png_image_error(i1, 64833) | 0;
 i6 = i15;
 STACKTOP = i3;
 return i6 | 0;
}

function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i6 = 0;
 do if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b(i1, HEAP32[i2 + 8 >> 2] | 0, i5) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, i2, i3, i4); else {
  if (!(__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b(i1, HEAP32[i2 >> 2] | 0, i5) | 0)) {
   i7 = HEAP32[i1 + 8 >> 2] | 0;
   FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i7 >> 2] | 0) + 24 >> 2] & 7](i7, i2, i3, i4, i5);
   break;
  }
  if ((HEAP32[i2 + 16 >> 2] | 0) != (i3 | 0)) {
   i7 = i2 + 20 | 0;
   if ((HEAP32[i7 >> 2] | 0) != (i3 | 0)) {
    HEAP32[i2 + 32 >> 2] = i4;
    i8 = i2 + 44 | 0;
    if ((HEAP32[i8 >> 2] | 0) == 4) break;
    i9 = i2 + 52 | 0;
    HEAP8[i9 >> 0] = 0;
    i10 = i2 + 53 | 0;
    HEAP8[i10 >> 0] = 0;
    i11 = HEAP32[i1 + 8 >> 2] | 0;
    FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[i11 >> 2] | 0) + 20 >> 2] & 15](i11, i2, i3, i3, 1, i5);
    if (!(HEAP8[i10 >> 0] | 0)) {
     i12 = 4;
     i6 = 11;
    } else if (!(HEAP8[i9 >> 0] | 0)) {
     i12 = 3;
     i6 = 11;
    } else i13 = 3;
    if ((i6 | 0) == 11) {
     HEAP32[i7 >> 2] = i3;
     i7 = i2 + 40 | 0;
     HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
     if ((HEAP32[i2 + 36 >> 2] | 0) == 1) if ((HEAP32[i2 + 24 >> 2] | 0) == 2) {
      HEAP8[i2 + 54 >> 0] = 1;
      i13 = i12;
     } else i13 = i12; else i13 = i12;
    }
    HEAP32[i8 >> 2] = i13;
    break;
   }
  }
  if ((i4 | 0) == 1) HEAP32[i2 + 32 >> 2] = 1;
 } while (0);
 return;
}

function _png_colorspace_set_sRGB(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, d10 = 0.0;
 i4 = i2 + 74 | 0;
 i5 = HEAP16[i4 >> 1] | 0;
 i6 = i5 & 65535;
 if (i6 & 32768 | 0) {
  i7 = 0;
  return i7 | 0;
 }
 if (i3 >>> 0 > 3) {
  _png_icc_profile_error(i1, i2, 61749, i3, 61754);
  i7 = 0;
  return i7 | 0;
 }
 if (i6 & 4 | 0) if ((HEAPU16[i2 + 72 >> 1] | 0 | 0) != (i3 | 0)) {
  _png_icc_profile_error(i1, i2, 61749, i3, 61784);
  i7 = 0;
  return i7 | 0;
 }
 if (i6 & 32 | 0) {
  _png_benign_error(i1, 61815);
  i7 = 0;
  return i7 | 0;
 }
 if (!(i6 & 2)) i8 = i5; else if (!(_png_colorspace_endpoints_match(4704, i2 + 4 | 0, 100) | 0)) {
  _png_chunk_report(i1, 61850, 2);
  i8 = HEAP16[i4 >> 1] | 0;
 } else i8 = i5;
 do if (!(i8 & 1)) i9 = i8; else {
  i5 = HEAP32[i2 >> 2] | 0;
  if (i5 | 0) {
   d10 = +Math_floor(+(+(i5 | 0) * 1.0e5 / 45455.0 + .5));
   if (d10 <= 2147483647.0 & d10 >= -2147483648.0) if ((~~d10 + -95e3 | 0) >>> 0 < 10001) {
    i9 = i8;
    break;
   }
  }
  _png_chunk_report(i1, 61881, 2);
  i9 = HEAP16[i4 >> 1] | 0;
 } while (0);
 HEAP16[i2 + 72 >> 1] = i3;
 i3 = i2 + 4 | 0;
 HEAP32[i3 >> 2] = HEAP32[1176];
 HEAP32[i3 + 4 >> 2] = HEAP32[1177];
 HEAP32[i3 + 8 >> 2] = HEAP32[1178];
 HEAP32[i3 + 12 >> 2] = HEAP32[1179];
 HEAP32[i3 + 16 >> 2] = HEAP32[1180];
 HEAP32[i3 + 20 >> 2] = HEAP32[1181];
 HEAP32[i3 + 24 >> 2] = HEAP32[1182];
 HEAP32[i3 + 28 >> 2] = HEAP32[1183];
 i3 = i2 + 36 | 0;
 i1 = 4736;
 i8 = i3 + 36 | 0;
 do {
  HEAP32[i3 >> 2] = HEAP32[i1 >> 2];
  i3 = i3 + 4 | 0;
  i1 = i1 + 4 | 0;
 } while ((i3 | 0) < (i8 | 0));
 HEAP32[i2 >> 2] = 45455;
 HEAP16[i4 >> 1] = i9 | 231;
 i7 = 1;
 return i7 | 0;
}

function __ZL19ImGui_ImplGlfw_InitP10GLFWwindowb13GlfwClientApi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 HEAP32[1460860] = i1;
 HEAPF64[9198] = 0.0;
 i3 = __ZN5ImGui5GetIOEv() | 0;
 i4 = i3 + 4 | 0;
 HEAP32[i4 >> 2] = HEAP32[i4 >> 2] | 6;
 HEAP32[i3 + 44 >> 2] = 258;
 HEAP32[i3 + 48 >> 2] = 263;
 HEAP32[i3 + 52 >> 2] = 262;
 HEAP32[i3 + 56 >> 2] = 265;
 HEAP32[i3 + 60 >> 2] = 264;
 HEAP32[i3 + 64 >> 2] = 266;
 HEAP32[i3 + 68 >> 2] = 267;
 HEAP32[i3 + 72 >> 2] = 268;
 HEAP32[i3 + 76 >> 2] = 269;
 HEAP32[i3 + 80 >> 2] = 260;
 HEAP32[i3 + 84 >> 2] = 261;
 HEAP32[i3 + 88 >> 2] = 259;
 HEAP32[i3 + 92 >> 2] = 32;
 HEAP32[i3 + 96 >> 2] = 257;
 HEAP32[i3 + 100 >> 2] = 256;
 HEAP32[i3 + 104 >> 2] = 65;
 HEAP32[i3 + 108 >> 2] = 67;
 HEAP32[i3 + 112 >> 2] = 86;
 HEAP32[i3 + 116 >> 2] = 88;
 HEAP32[i3 + 120 >> 2] = 89;
 HEAP32[i3 + 124 >> 2] = 90;
 HEAP32[i3 + 188 >> 2] = 44;
 HEAP32[i3 + 184 >> 2] = 67;
 HEAP32[i3 + 192 >> 2] = HEAP32[1460860];
 i3 = _glfwCreateStandardCursor(221185) | 0;
 HEAP32[1460861] = i3;
 i3 = _glfwCreateStandardCursor(221186) | 0;
 HEAP32[1460862] = i3;
 i3 = _glfwCreateStandardCursor(221185) | 0;
 HEAP32[1460863] = i3;
 i3 = _glfwCreateStandardCursor(221190) | 0;
 HEAP32[1460864] = i3;
 i3 = _glfwCreateStandardCursor(221189) | 0;
 HEAP32[1460865] = i3;
 i3 = _glfwCreateStandardCursor(221185) | 0;
 HEAP32[1460866] = i3;
 i3 = _glfwCreateStandardCursor(221185) | 0;
 HEAP32[1460867] = i3;
 i3 = _glfwCreateStandardCursor(221188) | 0;
 HEAP32[1460868] = i3;
 if (!i2) return;
 _glfwSetMouseButtonCallback(i1 | 0, 12) | 0;
 _glfwSetScrollCallback(i1 | 0, 3) | 0;
 _glfwSetKeyCallback(i1 | 0, 4) | 0;
 _glfwSetCharCallback(i1 | 0, 41) | 0;
 return;
}

function __ZN5ImGui9LogFinishEv() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = HEAP32[1460598] | 0;
 i3 = i2 + 11092 | 0;
 if (!(HEAP8[i3 >> 0] | 0)) {
  STACKTOP = i1;
  return;
 }
 __ZN5ImGui7LogTextEPKcz(56185, i1);
 i4 = i2 + 11096 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 if (i5 | 0) {
  if ((i5 | 0) == (HEAP32[3385] | 0)) _fflush(i5) | 0; else _fclose(i5) | 0;
  HEAP32[i4 >> 2] = 0;
 }
 i4 = i2 + 11100 | 0;
 if ((HEAP32[i4 >> 2] | 0) > 2) {
  i5 = i2 + 11108 | 0;
  i6 = HEAP32[i5 >> 2] | 0;
  i7 = HEAP32[1460598] | 0;
  i8 = HEAP32[i7 + 192 >> 2] | 0;
  if (!i8) i9 = i6; else {
   FUNCTION_TABLE_vii[i8 & 63](HEAP32[i7 + 196 >> 2] | 0, i6);
   i9 = HEAP32[i5 >> 2] | 0;
  }
  i6 = i2 + 11104 | 0;
  if (i9 | 0) {
   HEAP32[i6 >> 2] = 0;
   HEAP32[i4 >> 2] = 0;
   HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
   __ZL11FreeWrapperPvS_(i9, 0);
   HEAP32[i5 >> 2] = 0;
  }
  i9 = HEAP32[i4 >> 2] | 0;
  i2 = i9 + 1 | 0;
  if (!i9) i10 = 8; else i10 = ((i9 | 0) / 2 | 0) + i9 | 0;
  i9 = (i10 | 0) > (i2 | 0) ? i10 : i2;
  HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
  i2 = __ZL13MallocWrapperjPv(i9, 0) | 0;
  i10 = HEAP32[i5 >> 2] | 0;
  if (i10 | 0) {
   _memcpy(i2 | 0, i10 | 0, HEAP32[i4 >> 2] | 0) | 0;
   i10 = HEAP32[i5 >> 2] | 0;
   if (i10 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
   __ZL11FreeWrapperPvS_(i10, 0);
  }
  HEAP32[i5 >> 2] = i2;
  HEAP32[i6 >> 2] = i9;
  HEAP8[i2 + (HEAP32[i4 >> 2] | 0) >> 0] = 0;
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
 }
 HEAP8[i3 >> 0] = 0;
 STACKTOP = i1;
 return;
}

function __ZL23AddWindowToSortedBufferP8ImVectorIP11ImGuiWindowES1_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i3 = 0;
 i4 = i2;
 i5 = HEAP32[i1 >> 2] | 0;
 i6 = i1 + 4 | 0;
 if ((i5 | 0) == (HEAP32[i6 >> 2] | 0)) {
  i7 = i5 + 1 | 0;
  if (!i5) i8 = 8; else i8 = ((i5 | 0) / 2 | 0) + i5 | 0;
  i9 = (i8 | 0) > (i7 | 0) ? i8 : i7;
  if ((i5 | 0) < (i9 | 0)) {
   HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
   i7 = __ZL13MallocWrapperjPv(i9 << 2, 0) | 0;
   i8 = i1 + 8 | 0;
   i10 = HEAP32[i8 >> 2] | 0;
   if (!i10) i11 = i8; else {
    _memcpy(i7 | 0, i10 | 0, HEAP32[i1 >> 2] << 2 | 0) | 0;
    i10 = HEAP32[i8 >> 2] | 0;
    if (i10 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
    __ZL11FreeWrapperPvS_(i10, 0);
    i11 = i8;
   }
   HEAP32[i11 >> 2] = i7;
   HEAP32[i6 >> 2] = i9;
   i12 = HEAP32[i1 >> 2] | 0;
  } else i12 = i5;
 } else i12 = i5;
 HEAP32[(HEAP32[i1 + 8 >> 2] | 0) + (i12 << 2) >> 2] = i4;
 HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 if (!(HEAP8[i2 + 118 >> 0] | 0)) return;
 i4 = i2 + 328 | 0;
 i12 = HEAP32[i4 >> 2] | 0;
 if ((i12 | 0) > 1) _qsort(HEAP32[i2 + 336 >> 2] | 0, i12, 4, 20); else if ((i12 | 0) != 1) return;
 i5 = i2 + 336 | 0;
 i2 = 0;
 while (1) {
  if ((HEAP32[i4 >> 2] | 0) <= (i2 | 0)) {
   i3 = 17;
   break;
  }
  i9 = HEAP32[(HEAP32[i5 >> 2] | 0) + (i2 << 2) >> 2] | 0;
  if (HEAP8[i9 + 118 >> 0] | 0) __ZL23AddWindowToSortedBufferP8ImVectorIP11ImGuiWindowES1_(i1, i9);
  i2 = i2 + 1 | 0;
  if ((i2 | 0) >= (i12 | 0)) {
   i3 = 21;
   break;
  }
 }
 if ((i3 | 0) == 17) ___assert_fail(56841, 56850, 1235, 56909); else if ((i3 | 0) == 21) return;
}

function __ZN8ImGuiStbL24STB_TEXTEDIT_INSERTCHARSEP18ImGuiTextEditStateiPKti(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i5 = i1 + 44 | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 if ((i6 | 0) < (i2 | 0)) ___assert_fail(32759, 31803, 10271, 32775);
 i7 = i1 + 4 | 0;
 if ((i6 + i4 | 0) >= (HEAP32[i7 >> 2] | 0)) {
  i8 = 0;
  return i8 | 0;
 }
 i9 = i3 + (i4 << 1) | 0;
 i10 = (i9 | 0) == 0;
 L7 : do if ((i4 | 0) > 0 | i10) {
  i11 = 0;
  i12 = i3;
  while (1) {
   i13 = HEAP16[i12 >> 1] | 0;
   if (!(i13 << 16 >> 16)) {
    i14 = i11;
    break L7;
   }
   i12 = i12 + 2 | 0;
   if ((i13 & 65535) < 128) i15 = 1; else {
    i16 = i13 & -1024;
    i17 = i16 << 16 >> 16 | 0;
    i15 = (i13 & 65535) < 2048 ? 2 : (i17 | 0) == -9216 ? 0 : (i17 | 0) == -10240 ? 4 : 3;
   }
   i17 = i15 + i11 | 0;
   if (!(i10 | i12 >>> 0 < i9 >>> 0)) {
    i14 = i17;
    break;
   } else i11 = i17;
  }
 } else i14 = 0; while (0);
 i9 = i1 + 40 | 0;
 if (((HEAP32[i9 >> 2] | 0) + i14 | 0) >= (HEAP32[i1 + 48 >> 2] | 0)) {
  i8 = 0;
  return i8 | 0;
 }
 i10 = i1 + 12 | 0;
 i1 = (HEAP32[i10 >> 2] | 0) + (i2 << 1) | 0;
 if ((i6 | 0) == (i2 | 0)) i18 = i1; else {
  _memmove(i1 + (i4 << 1) | 0, i1 | 0, i6 - i2 << 1 | 0) | 0;
  i18 = i1;
 }
 _memcpy(i18 | 0, i3 | 0, i4 << 1 | 0) | 0;
 i3 = (HEAP32[i5 >> 2] | 0) + i4 | 0;
 HEAP32[i5 >> 2] = i3;
 HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + i14;
 if ((HEAP32[i7 >> 2] | 0) <= (i3 | 0)) ___assert_fail(56841, 56850, 1235, 56909);
 HEAP16[(HEAP32[i10 >> 2] | 0) + (i3 << 1) >> 1] = 0;
 i8 = 1;
 return i8 | 0;
}

function __ZNSt3__26vectorIN3glm3vecILi4EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE8__appendEj(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i3 = i1 + 8 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 i5 = i1 + 4 | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 if (i4 - i6 >> 4 >>> 0 >= i2 >>> 0) {
  i7 = i2;
  i8 = i6;
  do {
   HEAP32[i8 >> 2] = 0;
   HEAP32[i8 + 4 >> 2] = 0;
   HEAP32[i8 + 8 >> 2] = 0;
   HEAP32[i8 + 12 >> 2] = 0;
   i8 = (HEAP32[i5 >> 2] | 0) + 16 | 0;
   HEAP32[i5 >> 2] = i8;
   i7 = i7 + -1 | 0;
  } while ((i7 | 0) != 0);
  return;
 }
 i7 = HEAP32[i1 >> 2] | 0;
 i8 = i6 - i7 >> 4;
 i6 = i8 + i2 | 0;
 if (i6 >>> 0 > 268435455) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv(i1);
 i9 = i4 - i7 | 0;
 i7 = i9 >> 3;
 i4 = i9 >> 4 >>> 0 < 134217727 ? (i7 >>> 0 < i6 >>> 0 ? i6 : i7) : 268435455;
 do if (!i4) i10 = 0; else if (i4 >>> 0 > 268435455) {
  i7 = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc(i7, 29699);
  HEAP32[i7 >> 2] = 21232;
  ___cxa_throw(i7 | 0, 3136, 120);
 } else {
  i10 = __Znwj(i4 << 4) | 0;
  break;
 } while (0);
 i7 = i10 + (i8 << 4) | 0;
 i8 = i10 + (i4 << 4) | 0;
 i4 = i2;
 i2 = i7;
 i10 = i7;
 do {
  HEAP32[i2 >> 2] = 0;
  HEAP32[i2 + 4 >> 2] = 0;
  HEAP32[i2 + 8 >> 2] = 0;
  HEAP32[i2 + 12 >> 2] = 0;
  i2 = i10 + 16 | 0;
  i10 = i2;
  i4 = i4 + -1 | 0;
 } while ((i4 | 0) != 0);
 i4 = HEAP32[i1 >> 2] | 0;
 i2 = (HEAP32[i5 >> 2] | 0) - i4 | 0;
 i6 = i7 + (0 - (i2 >> 4) << 4) | 0;
 if ((i2 | 0) > 0) _memcpy(i6 | 0, i4 | 0, i2 | 0) | 0;
 HEAP32[i1 >> 2] = i6;
 HEAP32[i5 >> 2] = i10;
 HEAP32[i3 >> 2] = i8;
 if (!i4) return;
 __ZdlPv(i4);
 return;
}

function _png_image_finish_read(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i7 = i6;
 if (!i1) {
  i8 = 0;
  STACKTOP = i6;
  return i8 | 0;
 }
 if ((HEAP32[i1 + 4 >> 2] | 0) != 1) {
  i8 = _png_image_error(i1, 65102) | 0;
  STACKTOP = i6;
  return i8 | 0;
 }
 if (!i4) {
  i9 = HEAP32[i1 + 16 >> 2] | 0;
  i10 = Math_imul((i9 & 8 | 0) == 0 ? (i9 & 3) + 1 | 0 : 1, HEAP32[i1 + 8 >> 2] | 0) | 0;
 } else i10 = i4;
 if ((i3 | 0) != 0 & (HEAP32[i1 >> 2] | 0) != 0) {
  i4 = HEAP32[i1 + 16 >> 2] | 0;
  i9 = (i4 & 8 | 0) == 0;
  if (((i10 | 0) < 0 ? 0 - i10 | 0 : i10) >>> 0 >= (Math_imul(i9 ? (i4 & 3) + 1 | 0 : 1, HEAP32[i1 + 8 >> 2] | 0) | 0) >>> 0) {
   if (!i9) if (!((i5 | 0) != 0 & (HEAP32[i1 + 24 >> 2] | 0) != 0)) {
    i8 = _png_image_error(i1, 65015) | 0;
    STACKTOP = i6;
    return i8 | 0;
   }
   i4 = i7 + 24 | 0;
   HEAP32[i4 >> 2] = 0;
   HEAP32[i4 + 4 >> 2] = 0;
   HEAP32[i4 + 8 >> 2] = 0;
   HEAP32[i4 + 12 >> 2] = 0;
   HEAP32[i4 + 16 >> 2] = 0;
   HEAP32[i7 >> 2] = i1;
   HEAP32[i7 + 4 >> 2] = i3;
   HEAP32[i7 + 8 >> 2] = i10;
   HEAP32[i7 + 12 >> 2] = i5;
   HEAP32[i7 + 16 >> 2] = i2;
   HEAP32[i7 + 20 >> 2] = 0;
   if (i9) i11 = _png_safe_execute(i1, 72, i7) | 0; else if (!(_png_safe_execute(i1, 70, i7) | 0)) i11 = 0; else i11 = (_png_safe_execute(i1, 71, i7) | 0) != 0 & 1;
   _png_image_free(i1);
   i8 = i11;
   STACKTOP = i6;
   return i8 | 0;
  }
 }
 i8 = _png_image_error(i1, 65062) | 0;
 STACKTOP = i6;
 return i8 | 0;
}

function __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE8__appendEj(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i3 = i1 + 8 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 i5 = i1 + 4 | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 if (((i4 - i6 | 0) / 12 | 0) >>> 0 >= i2 >>> 0) {
  i7 = i2;
  i8 = i6;
  do {
   HEAP32[i8 >> 2] = 0;
   HEAP32[i8 + 4 >> 2] = 0;
   HEAP32[i8 + 8 >> 2] = 0;
   i8 = (HEAP32[i5 >> 2] | 0) + 12 | 0;
   HEAP32[i5 >> 2] = i8;
   i7 = i7 + -1 | 0;
  } while ((i7 | 0) != 0);
  return;
 }
 i7 = HEAP32[i1 >> 2] | 0;
 i8 = (i6 - i7 | 0) / 12 | 0;
 i6 = i8 + i2 | 0;
 if (i6 >>> 0 > 357913941) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv(i1);
 i9 = (i4 - i7 | 0) / 12 | 0;
 i7 = i9 << 1;
 i4 = i9 >>> 0 < 178956970 ? (i7 >>> 0 < i6 >>> 0 ? i6 : i7) : 357913941;
 do if (!i4) i10 = 0; else if (i4 >>> 0 > 357913941) {
  i7 = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc(i7, 29699);
  HEAP32[i7 >> 2] = 21232;
  ___cxa_throw(i7 | 0, 3136, 120);
 } else {
  i10 = __Znwj(i4 * 12 | 0) | 0;
  break;
 } while (0);
 i7 = i10 + (i8 * 12 | 0) | 0;
 i8 = i10 + (i4 * 12 | 0) | 0;
 i4 = i2;
 i2 = i7;
 i10 = i7;
 do {
  HEAP32[i2 >> 2] = 0;
  HEAP32[i2 + 4 >> 2] = 0;
  HEAP32[i2 + 8 >> 2] = 0;
  i2 = i10 + 12 | 0;
  i10 = i2;
  i4 = i4 + -1 | 0;
 } while ((i4 | 0) != 0);
 i4 = HEAP32[i1 >> 2] | 0;
 i2 = (HEAP32[i5 >> 2] | 0) - i4 | 0;
 i6 = i7 + (((i2 | 0) / -12 | 0) * 12 | 0) | 0;
 if ((i2 | 0) > 0) _memcpy(i6 | 0, i4 | 0, i2 | 0) | 0;
 HEAP32[i1 >> 2] = i6;
 HEAP32[i5 >> 2] = i10;
 HEAP32[i3 >> 2] = i8;
 if (!i4) return;
 __ZdlPv(i4);
 return;
}

function _vfprintf(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224);
 i5 = i4 + 120 | 0;
 i6 = i4 + 80 | 0;
 i7 = i4;
 i8 = i4 + 136 | 0;
 i9 = i6;
 i10 = i9 + 40 | 0;
 do {
  HEAP32[i9 >> 2] = 0;
  i9 = i9 + 4 | 0;
 } while ((i9 | 0) < (i10 | 0));
 HEAP32[i5 >> 2] = HEAP32[i3 >> 2];
 if ((_printf_core(0, i2, i5, i7, i6) | 0) < 0) i11 = -1; else {
  if ((HEAP32[i1 + 76 >> 2] | 0) > -1) i12 = ___lockfile(i1) | 0; else i12 = 0;
  i3 = HEAP32[i1 >> 2] | 0;
  i9 = i3 & 32;
  if ((HEAP8[i1 + 74 >> 0] | 0) < 1) HEAP32[i1 >> 2] = i3 & -33;
  i3 = i1 + 48 | 0;
  if (!(HEAP32[i3 >> 2] | 0)) {
   i10 = i1 + 44 | 0;
   i13 = HEAP32[i10 >> 2] | 0;
   HEAP32[i10 >> 2] = i8;
   i14 = i1 + 28 | 0;
   HEAP32[i14 >> 2] = i8;
   i15 = i1 + 20 | 0;
   HEAP32[i15 >> 2] = i8;
   HEAP32[i3 >> 2] = 80;
   i16 = i1 + 16 | 0;
   HEAP32[i16 >> 2] = i8 + 80;
   i8 = _printf_core(i1, i2, i5, i7, i6) | 0;
   if (!i13) i17 = i8; else {
    FUNCTION_TABLE_iiii[HEAP32[i1 + 36 >> 2] & 31](i1, 0, 0) | 0;
    i18 = (HEAP32[i15 >> 2] | 0) == 0 ? -1 : i8;
    HEAP32[i10 >> 2] = i13;
    HEAP32[i3 >> 2] = 0;
    HEAP32[i16 >> 2] = 0;
    HEAP32[i14 >> 2] = 0;
    HEAP32[i15 >> 2] = 0;
    i17 = i18;
   }
  } else i17 = _printf_core(i1, i2, i5, i7, i6) | 0;
  i6 = HEAP32[i1 >> 2] | 0;
  HEAP32[i1 >> 2] = i6 | i9;
  if (i12 | 0) ___unlockfile(i1);
  i11 = (i6 & 32 | 0) == 0 ? i17 : -1;
 }
 STACKTOP = i4;
 return i11 | 0;
}

function __ZN5ImGui18PushColumnClipRectEi(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i3 = i2 + 24 | 0;
 i4 = i2 + 16 | 0;
 i5 = i2 + 8 | 0;
 i6 = i2;
 i7 = HEAP32[(HEAP32[1460598] | 0) + 6392 >> 2] | 0;
 i8 = HEAP32[i7 + 448 >> 2] | 0;
 if ((i1 | 0) < 0) i9 = HEAP32[i8 + 12 >> 2] | 0; else i9 = i1;
 if ((HEAP32[i8 + 44 >> 2] | 0) <= (i9 | 0)) ___assert_fail(56841, 56850, 1235, 56909);
 i1 = HEAP32[i8 + 52 >> 2] | 0;
 HEAP8[i7 + 120 >> 0] = 1;
 i8 = i7 + 632 | 0;
 i10 = HEAP32[i8 >> 2] | 0;
 i11 = i1 + (i9 * 28 | 0) | 0;
 i9 = i11 + 12 | 0;
 i1 = HEAP32[i9 + 4 >> 2] | 0;
 i12 = i5;
 HEAP32[i12 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i12 + 4 >> 2] = i1;
 i1 = i11 + 20 | 0;
 i11 = HEAP32[i1 + 4 >> 2] | 0;
 i12 = i6;
 HEAP32[i12 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i12 + 4 >> 2] = i11;
 HEAP32[i4 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i3 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 __ZN10ImDrawList12PushClipRectE6ImVec2S0_b(i10, i4, i3, 0);
 i3 = HEAP32[i8 >> 2] | 0;
 i8 = HEAP32[i3 + 60 >> 2] | 0;
 if ((i8 | 0) > 0) {
  i4 = HEAP32[i3 + 68 >> 2] | 0;
  i3 = i8 + -1 | 0;
  i8 = i4 + (i3 << 4) | 0;
  i3 = HEAP32[i8 + 4 >> 2] | 0;
  i4 = HEAP32[i8 + 8 >> 2] | 0;
  i10 = HEAP32[i8 + 12 >> 2] | 0;
  HEAP32[i7 + 464 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i7 + 468 >> 2] = i3;
  HEAP32[i7 + 472 >> 2] = i4;
  HEAP32[i7 + 476 >> 2] = i10;
  STACKTOP = i2;
  return;
 } else ___assert_fail(38278, 56850, 1245, 38287);
}

function _png_destroy_gamma_table(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i2 = i1 + 492 | 0;
 _png_free(i1, HEAP32[i2 >> 2] | 0);
 HEAP32[i2 >> 2] = 0;
 i2 = i1 + 496 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if (i3 | 0) {
  i4 = 8 - (HEAP32[i1 + 484 >> 2] | 0) | 0;
  i5 = 1 << i4;
  if ((i4 | 0) == 31) i6 = i3; else {
   i4 = 0;
   i7 = i3;
   while (1) {
    _png_free(i1, HEAP32[i7 + (i4 << 2) >> 2] | 0);
    i4 = i4 + 1 | 0;
    i3 = HEAP32[i2 >> 2] | 0;
    if ((i4 | 0) >= (i5 | 0)) {
     i6 = i3;
     break;
    } else i7 = i3;
   }
  }
  _png_free(i1, i6);
  HEAP32[i2 >> 2] = 0;
 }
 i2 = i1 + 500 | 0;
 _png_free(i1, HEAP32[i2 >> 2] | 0);
 HEAP32[i2 >> 2] = 0;
 i2 = i1 + 504 | 0;
 _png_free(i1, HEAP32[i2 >> 2] | 0);
 HEAP32[i2 >> 2] = 0;
 i2 = i1 + 508 | 0;
 i6 = HEAP32[i2 >> 2] | 0;
 if (i6 | 0) {
  i7 = 8 - (HEAP32[i1 + 484 >> 2] | 0) | 0;
  i5 = 1 << i7;
  if ((i7 | 0) == 31) i8 = i6; else {
   i7 = 0;
   i4 = i6;
   while (1) {
    _png_free(i1, HEAP32[i4 + (i7 << 2) >> 2] | 0);
    i7 = i7 + 1 | 0;
    i6 = HEAP32[i2 >> 2] | 0;
    if ((i7 | 0) >= (i5 | 0)) {
     i8 = i6;
     break;
    } else i4 = i6;
   }
  }
  _png_free(i1, i8);
  HEAP32[i2 >> 2] = 0;
 }
 i2 = i1 + 512 | 0;
 i8 = HEAP32[i2 >> 2] | 0;
 if (!i8) return;
 i4 = 8 - (HEAP32[i1 + 484 >> 2] | 0) | 0;
 i5 = 1 << i4;
 if ((i4 | 0) == 31) i9 = i8; else {
  i4 = 0;
  i7 = i8;
  while (1) {
   _png_free(i1, HEAP32[i7 + (i4 << 2) >> 2] | 0);
   i4 = i4 + 1 | 0;
   i8 = HEAP32[i2 >> 2] | 0;
   if ((i4 | 0) >= (i5 | 0)) {
    i9 = i8;
    break;
   } else i7 = i8;
  }
 }
 _png_free(i1, i9);
 HEAP32[i2 >> 2] = 0;
 return;
}

function ___dynamic_cast(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i6 = i5;
 i7 = HEAP32[i1 >> 2] | 0;
 i8 = i1 + (HEAP32[i7 + -8 >> 2] | 0) | 0;
 i9 = HEAP32[i7 + -4 >> 2] | 0;
 HEAP32[i6 >> 2] = i3;
 HEAP32[i6 + 4 >> 2] = i1;
 HEAP32[i6 + 8 >> 2] = i2;
 HEAP32[i6 + 12 >> 2] = i4;
 i4 = i6 + 16 | 0;
 i2 = i6 + 20 | 0;
 i1 = i6 + 24 | 0;
 i7 = i6 + 28 | 0;
 i10 = i6 + 32 | 0;
 i11 = i6 + 40 | 0;
 i12 = i4;
 i13 = i12 + 36 | 0;
 do {
  HEAP32[i12 >> 2] = 0;
  i12 = i12 + 4 | 0;
 } while ((i12 | 0) < (i13 | 0));
 HEAP16[i4 + 36 >> 1] = 0;
 HEAP8[i4 + 38 >> 0] = 0;
 L1 : do if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b(i9, i3, 0) | 0) {
  HEAP32[i6 + 48 >> 2] = 1;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[i9 >> 2] | 0) + 20 >> 2] & 15](i9, i6, i8, i8, 1, 0);
  i14 = (HEAP32[i1 >> 2] | 0) == 1 ? i8 : 0;
 } else {
  FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i9 >> 2] | 0) + 24 >> 2] & 7](i9, i6, i8, 1, 0);
  switch (HEAP32[i6 + 36 >> 2] | 0) {
  case 0:
   {
    i14 = (HEAP32[i11 >> 2] | 0) == 1 & (HEAP32[i7 >> 2] | 0) == 1 & (HEAP32[i10 >> 2] | 0) == 1 ? HEAP32[i2 >> 2] | 0 : 0;
    break L1;
    break;
   }
  case 1:
   break;
  default:
   {
    i14 = 0;
    break L1;
   }
  }
  if ((HEAP32[i1 >> 2] | 0) != 1) if (!((HEAP32[i11 >> 2] | 0) == 0 & (HEAP32[i7 >> 2] | 0) == 1 & (HEAP32[i10 >> 2] | 0) == 1)) {
   i14 = 0;
   break;
  }
  i14 = HEAP32[i4 >> 2] | 0;
 } while (0);
 STACKTOP = i5;
 return i14 | 0;
}

function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_(i6, i1);
 if (HEAP8[i6 >> 0] | 0) {
  __ZNKSt3__28ios_base6getlocEv(i4, i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0);
  i7 = __ZNKSt3__26locale9use_facetERNS0_2idE(i4, 5845244) | 0;
  __ZNSt3__26localeD2Ev(i4);
  i8 = i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0;
  i9 = HEAP32[i8 + 24 >> 2] | 0;
  i10 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
  i11 = i8 + 76 | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i10, HEAP32[i11 >> 2] | 0) | 0) {
   __ZNKSt3__28ios_base6getlocEv(i4, i8);
   i10 = __ZNKSt3__26locale9use_facetERNS0_2idE(i4, 5845188) | 0;
   i12 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i10 >> 2] | 0) + 28 >> 2] & 31](i10, 32) | 0;
   __ZNSt3__26localeD2Ev(i4);
   i10 = i12 << 24 >> 24;
   HEAP32[i11 >> 2] = i10;
   i13 = i10;
  } else i13 = HEAP32[i11 >> 2] | 0;
  i11 = HEAP32[(HEAP32[i7 >> 2] | 0) + 16 >> 2] | 0;
  HEAP32[i5 >> 2] = i9;
  HEAP32[i4 >> 2] = HEAP32[i5 >> 2];
  if (!(FUNCTION_TABLE_iiiiii[i11 & 31](i7, i4, i8, i13 & 255, i2) | 0)) {
   i2 = i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0;
   __ZNSt3__28ios_base5clearEj(i2, HEAP32[i2 + 16 >> 2] | 5);
  }
 }
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(i6);
 STACKTOP = i3;
 return i1 | 0;
}

function __ZN10ImDrawList10AddDrawCmdEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, f4 = f0, f5 = f0, f6 = f0, f7 = f0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i2 = HEAP32[i1 + 60 >> 2] | 0;
 if (!i2) i3 = (HEAP32[i1 + 40 >> 2] | 0) + 20 | 0; else i3 = (HEAP32[i1 + 68 >> 2] | 0) + (i2 + -1 << 4) | 0;
 f4 = Math_fround(HEAPF32[i3 >> 2]);
 f5 = Math_fround(HEAPF32[i3 + 4 >> 2]);
 f6 = Math_fround(HEAPF32[i3 + 8 >> 2]);
 f7 = Math_fround(HEAPF32[i3 + 12 >> 2]);
 i3 = HEAP32[i1 + 72 >> 2] | 0;
 if (!i3) i8 = 0; else i8 = HEAP32[(HEAP32[i1 + 80 >> 2] | 0) + (i3 + -1 << 2) >> 2] | 0;
 if (!(f4 <= f6) | !(f5 <= f7)) ___assert_fail(38112, 38201, 384, 38267);
 i3 = HEAP32[i1 >> 2] | 0;
 i2 = i1 + 4 | 0;
 if ((i3 | 0) == (HEAP32[i2 >> 2] | 0)) {
  i9 = i3 + 1 | 0;
  if (!i3) i10 = 8; else i10 = ((i3 | 0) / 2 | 0) + i3 | 0;
  i11 = (i10 | 0) > (i9 | 0) ? i10 : i9;
  if ((i3 | 0) < (i11 | 0)) {
   i9 = __ZN5ImGui8MemAllocEj(i11 << 5) | 0;
   i10 = i1 + 8 | 0;
   i12 = HEAP32[i10 >> 2] | 0;
   if (!i12) i13 = i10; else {
    _memcpy(i9 | 0, i12 | 0, HEAP32[i1 >> 2] << 5 | 0) | 0;
    __ZN5ImGui7MemFreeEPv(HEAP32[i10 >> 2] | 0);
    i13 = i10;
   }
   HEAP32[i13 >> 2] = i9;
   HEAP32[i2 >> 2] = i11;
   i14 = HEAP32[i1 >> 2] | 0;
  } else i14 = i3;
 } else i14 = i3;
 i3 = HEAP32[i1 + 8 >> 2] | 0;
 i11 = i3 + (i14 << 5) | 0;
 HEAP32[i11 >> 2] = 0;
 HEAPF32[i11 + 4 >> 2] = f4;
 HEAPF32[i11 + 8 >> 2] = f5;
 HEAPF32[i11 + 12 >> 2] = f6;
 HEAPF32[i11 + 16 >> 2] = f7;
 HEAP32[i11 + 20 >> 2] = i8;
 i8 = i11 + 24 | 0;
 HEAP32[i8 >> 2] = 0;
 HEAP32[i8 + 4 >> 2] = 0;
 HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 return;
}

function __ZN10ImDrawList14UpdateClipRectEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i2;
 i4 = HEAP32[i1 + 60 >> 2] | 0;
 if (!i4) i5 = (HEAP32[i1 + 40 >> 2] | 0) + 20 | 0; else i5 = (HEAP32[i1 + 68 >> 2] | 0) + (i4 + -1 << 4) | 0;
 HEAP32[i3 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 i5 = HEAP32[i1 >> 2] | 0;
 do if ((i5 | 0) > 0) {
  i4 = i5 + -1 | 0;
  i6 = HEAP32[i1 + 8 >> 2] | 0;
  i7 = i6 + (i4 << 5) | 0;
  if (i7 | 0) {
   i8 = (HEAP32[i7 >> 2] | 0) == 0;
   if (!i8) if (_memcmp(i6 + (i4 << 5) + 4 | 0, i3, 16) | 0) break;
   if (!(HEAP32[i6 + (i4 << 5) + 24 >> 2] | 0)) {
    i9 = (i5 | 0) > 1;
    i10 = i9 ? i7 + -32 | 0 : 0;
    if (i9 & i8) if (!(_memcmp(i10 + 4 | 0, i3, 16) | 0)) {
     i8 = HEAP32[i1 + 72 >> 2] | 0;
     if (!i8) i11 = 0; else i11 = HEAP32[(HEAP32[i1 + 80 >> 2] | 0) + (i8 + -1 << 2) >> 2] | 0;
     if ((HEAP32[i10 + 20 >> 2] | 0) == (i11 | 0)) if (!(HEAP32[i10 + 24 >> 2] | 0)) {
      HEAP32[i1 >> 2] = i4;
      STACKTOP = i2;
      return;
     }
    }
    i10 = i6 + (i4 << 5) + 4 | 0;
    HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
    HEAP32[i10 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
    HEAP32[i10 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
    HEAP32[i10 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
    STACKTOP = i2;
    return;
   }
  }
 } while (0);
 __ZN10ImDrawList10AddDrawCmdEv(i1);
 STACKTOP = i2;
 return;
}

function __ZL25stbrp__skyline_find_min_yP13stbrp_contextP10stbrp_nodeiiPi(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i5 = i3 + i2 | 0;
 i6 = HEAPU16[i1 >> 1] | 0;
 if ((i6 | 0) > (i2 | 0)) ___assert_fail(55160, 50526, 293, 55175);
 if ((HEAPU16[HEAP32[i1 + 4 >> 2] >> 1] | 0 | 0) <= (i2 | 0)) ___assert_fail(55201, 50526, 300, 55175);
 if ((i5 | 0) > (i6 | 0)) {
  i7 = 0;
  i8 = 0;
  i9 = 0;
  i10 = i1;
  i11 = i6;
 } else {
  i12 = 0;
  i13 = 0;
  HEAP32[i4 >> 2] = i12;
  return i13 | 0;
 }
 while (1) {
  i6 = HEAPU16[i10 + 2 >> 1] | 0;
  do if ((i9 | 0) < (i6 | 0)) {
   i1 = (Math_imul(i6 - i9 | 0, i8) | 0) + i7 | 0;
   i14 = HEAP32[i10 + 4 >> 2] | 0;
   i15 = HEAP16[i14 >> 1] | 0;
   i16 = i15 & 65535;
   if ((i11 | 0) < (i2 | 0)) {
    i17 = i1;
    i18 = i6;
    i19 = i16 - i2 | 0;
    i20 = i15;
    i21 = i14;
    break;
   } else {
    i17 = i1;
    i18 = i6;
    i19 = i16 - i11 | 0;
    i20 = i15;
    i21 = i14;
    break;
   }
  } else {
   i14 = HEAP32[i10 + 4 >> 2] | 0;
   i15 = HEAP16[i14 >> 1] | 0;
   i16 = (i15 & 65535) - i11 | 0;
   i1 = (i16 + i8 | 0) > (i3 | 0) ? i3 - i8 | 0 : i16;
   i17 = (Math_imul(i1, i9 - i6 | 0) | 0) + i7 | 0;
   i18 = i9;
   i19 = i1;
   i20 = i15;
   i21 = i14;
  } while (0);
  i11 = i20 & 65535;
  if ((i5 | 0) <= (i11 | 0)) {
   i12 = i17;
   i13 = i18;
   break;
  } else {
   i7 = i17;
   i8 = i19 + i8 | 0;
   i9 = i18;
   i10 = i21;
  }
 }
 HEAP32[i4 >> 2] = i12;
 return i13 | 0;
}

function _mbtowc(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4;
 L1 : do if (!i2) i6 = 0; else {
  do if (i3 | 0) {
   i7 = (i1 | 0) == 0 ? i5 : i1;
   i8 = HEAP8[i2 >> 0] | 0;
   if (i8 << 24 >> 24 > -1) {
    HEAP32[i7 >> 2] = i8 & 255;
    i6 = i8 << 24 >> 24 != 0 & 1;
    break L1;
   }
   i8 = (___pthread_self_73() | 0) + 188 | 0;
   i9 = HEAP8[i2 >> 0] | 0;
   if (!(HEAP32[HEAP32[i8 >> 2] >> 2] | 0)) {
    HEAP32[i7 >> 2] = i9 << 24 >> 24 & 57343;
    i6 = 1;
    break L1;
   }
   i8 = (i9 & 255) + -194 | 0;
   if (i8 >>> 0 <= 50) {
    i9 = i2 + 1 | 0;
    i10 = HEAP32[13208 + (i8 << 2) >> 2] | 0;
    if (i3 >>> 0 < 4) if (i10 & -2147483648 >>> ((i3 * 6 | 0) + -6 | 0) | 0) break;
    i8 = HEAPU8[i9 >> 0] | 0;
    i9 = i8 >>> 3;
    if ((i9 + -16 | i9 + (i10 >> 26)) >>> 0 <= 7) {
     i9 = i8 + -128 | i10 << 6;
     if ((i9 | 0) >= 0) {
      HEAP32[i7 >> 2] = i9;
      i6 = 2;
      break L1;
     }
     i10 = (HEAPU8[i2 + 2 >> 0] | 0) + -128 | 0;
     if (i10 >>> 0 <= 63) {
      i8 = i10 | i9 << 6;
      if ((i8 | 0) >= 0) {
       HEAP32[i7 >> 2] = i8;
       i6 = 3;
       break L1;
      }
      i9 = (HEAPU8[i2 + 3 >> 0] | 0) + -128 | 0;
      if (i9 >>> 0 <= 63) {
       HEAP32[i7 >> 2] = i9 | i8 << 6;
       i6 = 4;
       break L1;
      }
     }
    }
   }
  } while (0);
  i8 = ___errno_location() | 0;
  HEAP32[i8 >> 2] = 84;
  i6 = -1;
 } while (0);
 STACKTOP = i4;
 return i6 | 0;
}

function ___mo_lookup(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i4 = (HEAP32[i1 >> 2] | 0) + 1794895138 | 0;
 i5 = _swapc(HEAP32[i1 + 8 >> 2] | 0, i4) | 0;
 i6 = _swapc(HEAP32[i1 + 12 >> 2] | 0, i4) | 0;
 i7 = _swapc(HEAP32[i1 + 16 >> 2] | 0, i4) | 0;
 L1 : do if (i5 >>> 0 < i2 >>> 2 >>> 0) {
  i8 = i2 - (i5 << 2) | 0;
  if (i6 >>> 0 < i8 >>> 0 & i7 >>> 0 < i8 >>> 0) if (!((i7 | i6) & 3)) {
   i8 = i6 >>> 2;
   i9 = i7 >>> 2;
   i10 = 0;
   i11 = i5;
   while (1) {
    i12 = i11 >>> 1;
    i13 = i10 + i12 | 0;
    i14 = i13 << 1;
    i15 = i14 + i8 | 0;
    i16 = _swapc(HEAP32[i1 + (i15 << 2) >> 2] | 0, i4) | 0;
    i17 = _swapc(HEAP32[i1 + (i15 + 1 << 2) >> 2] | 0, i4) | 0;
    if (!(i17 >>> 0 < i2 >>> 0 & i16 >>> 0 < (i2 - i17 | 0) >>> 0)) {
     i18 = 0;
     break L1;
    }
    if (HEAP8[i1 + (i17 + i16) >> 0] | 0) {
     i18 = 0;
     break L1;
    }
    i16 = _strcmp(i3, i1 + i17 | 0) | 0;
    if (!i16) break;
    i17 = (i16 | 0) < 0;
    if ((i11 | 0) == 1) {
     i18 = 0;
     break L1;
    } else {
     i10 = i17 ? i10 : i13;
     i11 = i17 ? i12 : i11 - i12 | 0;
    }
   }
   i11 = i14 + i9 | 0;
   i10 = _swapc(HEAP32[i1 + (i11 << 2) >> 2] | 0, i4) | 0;
   i8 = _swapc(HEAP32[i1 + (i11 + 1 << 2) >> 2] | 0, i4) | 0;
   if (i8 >>> 0 < i2 >>> 0 & i10 >>> 0 < (i2 - i8 | 0) >>> 0) i18 = (HEAP8[i1 + (i8 + i10) >> 0] | 0) == 0 ? i1 + i8 | 0 : 0; else i18 = 0;
  } else i18 = 0; else i18 = 0;
 } else i18 = 0; while (0);
 return i18 | 0;
}

function __ZN5ImGui21FocusableItemRegisterEP11ImGuiWindowjb(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, f9 = f0, f10 = f0, f11 = f0, i12 = 0;
 i4 = HEAP32[1460598] | 0;
 i5 = (HEAP32[i1 + 352 >> 2] & 5 | 0) == 1;
 i6 = i1 + 816 | 0;
 i7 = (HEAP32[i6 >> 2] | 0) + 1 | 0;
 HEAP32[i6 >> 2] = i7;
 if (i5) {
  i6 = i1 + 820 | 0;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 }
 do if (i3) if ((HEAP32[i4 + 6420 >> 2] | 0) == (i2 | 0)) if ((HEAP32[i1 + 832 >> 2] | 0) == 2147483647) {
  i6 = i1 + 836 | 0;
  if ((HEAP32[i6 >> 2] | 0) == 2147483647) if (!(HEAP8[i4 + 237 >> 0] | 0)) {
   i8 = HEAP32[i4 + 48 >> 2] | 0;
   if ((i8 | 0) > -1) {
    if ((i8 | 0) >= 512) ___assert_fail(32321, 31803, 4844, 32415);
    f9 = Math_fround(HEAPF32[i4 + 1092 + (i8 << 2) >> 2]);
    if (!(f9 == Math_fround(0.0))) {
     f10 = Math_fround(HEAPF32[i4 + 132 >> 2]);
     if (!(f9 > f10)) break;
     f11 = Math_fround(HEAPF32[i4 + 136 >> 2]);
     if (f9 <= f10 | f11 <= Math_fround(0.0)) break;
     if ((~~Math_fround(Math_fround(f9 - f10) / f11) | 0) <= (~~Math_fround(Math_fround(Math_fround(f9 - Math_fround(HEAPF32[i4 + 20 >> 2])) - f10) / f11) | 0)) break;
    }
    HEAP32[i6 >> 2] = ((HEAP8[i4 + 238 >> 0] | 0) == 0 ? 1 : i5 << 31 >> 31) + (HEAP32[i1 + 820 >> 2] | 0);
   }
  }
 } while (0);
 i3 = (i7 | 0) == (HEAP32[i1 + 824 >> 2] | 0);
 if (i3 | i5 ^ 1) {
  i12 = i3;
  return i12 | 0;
 }
 if ((HEAP32[i1 + 820 >> 2] | 0) != (HEAP32[i1 + 828 >> 2] | 0)) {
  i12 = 0;
  return i12 | 0;
 }
 HEAP32[i4 + 6668 >> 2] = i2;
 i12 = 1;
 return i12 | 0;
}

function __ZN5ImGui12PushStyleVarEiRK6ImVec2(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 if (i1 >>> 0 >= 21) ___assert_fail(33560, 31803, 7017, 33598);
 if (!(1074226 >>> i1 & 1)) ___assert_fail(54909, 31803, 7047, 34224);
 i3 = HEAP32[1460598] | 0;
 i4 = i3 + 5356 + (HEAP32[3908 + (i1 * 12 | 0) + 8 >> 2] | 0) | 0;
 i5 = i4;
 i6 = HEAP32[i5 >> 2] | 0;
 i7 = HEAP32[i5 + 4 >> 2] | 0;
 i5 = i3 + 6488 | 0;
 i8 = HEAP32[i5 >> 2] | 0;
 i9 = i3 + 6492 | 0;
 if ((i8 | 0) == (HEAP32[i9 >> 2] | 0)) {
  i10 = i8 + 1 | 0;
  if (!i8) i11 = 8; else i11 = ((i8 | 0) / 2 | 0) + i8 | 0;
  i12 = (i11 | 0) > (i10 | 0) ? i11 : i10;
  if ((i8 | 0) < (i12 | 0)) {
   HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
   i10 = __ZL13MallocWrapperjPv(i12 * 12 | 0, 0) | 0;
   i11 = i3 + 6496 | 0;
   i13 = HEAP32[i11 >> 2] | 0;
   if (!i13) i14 = i11; else {
    _memcpy(i10 | 0, i13 | 0, (HEAP32[i5 >> 2] | 0) * 12 | 0) | 0;
    i13 = HEAP32[i11 >> 2] | 0;
    if (i13 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
    __ZL11FreeWrapperPvS_(i13, 0);
    i14 = i11;
   }
   HEAP32[i14 >> 2] = i10;
   HEAP32[i9 >> 2] = i12;
   i15 = HEAP32[i5 >> 2] | 0;
  } else i15 = i8;
 } else i15 = i8;
 i8 = HEAP32[i3 + 6496 >> 2] | 0;
 i3 = i8 + (i15 * 12 | 0) | 0;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i3 + 4 >> 2] = i6;
 HEAP32[i3 + 8 >> 2] = i7;
 HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 i5 = i2;
 i2 = HEAP32[i5 + 4 >> 2] | 0;
 i7 = i4;
 HEAP32[i7 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i7 + 4 >> 2] = i2;
 return;
}

function __ZN8ImVectorIN12ImGuiStorage4PairEE6insertEPKS1_RS3_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i4 = i1 + 8 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 if (i5 >>> 0 > i2 >>> 0) ___assert_fail(31883, 56850, 1273, 31913);
 i6 = HEAP32[i1 >> 2] | 0;
 if ((i5 + (i6 << 3) | 0) >>> 0 < i2 >>> 0) ___assert_fail(31883, 56850, 1273, 31913);
 i7 = i2 - i5 >> 3;
 i2 = i1 + 4 | 0;
 if ((i6 | 0) == (HEAP32[i2 >> 2] | 0)) {
  i8 = i6 + 1 | 0;
  if (!i6) i9 = 8; else i9 = ((i6 | 0) / 2 | 0) + i6 | 0;
  i10 = (i9 | 0) > (i8 | 0) ? i9 : i8;
  if ((i6 | 0) < (i10 | 0)) {
   HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
   i8 = __ZL13MallocWrapperjPv(i10 << 3, 0) | 0;
   i9 = HEAP32[i4 >> 2] | 0;
   if (!i9) i11 = i4; else {
    _memcpy(i8 | 0, i9 | 0, HEAP32[i1 >> 2] << 3 | 0) | 0;
    i9 = HEAP32[i4 >> 2] | 0;
    if (i9 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
    __ZL11FreeWrapperPvS_(i9, 0);
    i11 = i4;
   }
   HEAP32[i11 >> 2] = i8;
   HEAP32[i2 >> 2] = i10;
   i12 = HEAP32[i1 >> 2] | 0;
   i13 = i8;
  } else {
   i12 = i6;
   i13 = i5;
  }
 } else {
  i12 = i6;
  i13 = i5;
 }
 if ((i12 | 0) > (i7 | 0)) {
  i5 = i13 + (i7 << 3) | 0;
  _memmove(i5 + 8 | 0, i5 | 0, i12 - i7 << 3 | 0) | 0;
  i14 = HEAP32[i4 >> 2] | 0;
 } else i14 = i13;
 i13 = i3;
 i3 = HEAP32[i13 + 4 >> 2] | 0;
 i12 = i14 + (i7 << 3) | 0;
 HEAP32[i12 >> 2] = HEAP32[i13 >> 2];
 HEAP32[i12 + 4 >> 2] = i3;
 HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 return (HEAP32[i4 >> 2] | 0) + (i7 << 3) | 0;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 i6 = i1;
 i7 = i1 + 112 | 0;
 i8 = i1 + 100 | 0;
 i9 = i1 + 16 | 0;
 i10 = i1 + 12 | 0;
 i11 = i1 + 4 | 0;
 i12 = i1 + 8 | 0;
 HEAP8[i7 >> 0] = HEAP8[70717] | 0;
 HEAP8[i7 + 1 >> 0] = HEAP8[70718] | 0;
 HEAP8[i7 + 2 >> 0] = HEAP8[70719] | 0;
 HEAP8[i7 + 3 >> 0] = HEAP8[70720] | 0;
 HEAP8[i7 + 4 >> 0] = HEAP8[70721] | 0;
 HEAP8[i7 + 5 >> 0] = HEAP8[70722] | 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj(i7 + 1 | 0, 70723, 0, HEAP32[i3 + 4 >> 2] | 0);
 i13 = __ZNSt3__26__clocEv() | 0;
 HEAP32[i6 >> 2] = i5;
 i5 = i8 + (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz(i8, 12, i13, i7, i6) | 0) | 0;
 i7 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i8, i5, i3) | 0;
 __ZNKSt3__28ios_base6getlocEv(i6, i3);
 __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE(i8, i7, i5, i9, i10, i11, i6);
 __ZNSt3__26localeD2Ev(i6);
 HEAP32[i12 >> 2] = HEAP32[i2 >> 2];
 i2 = HEAP32[i10 >> 2] | 0;
 i10 = HEAP32[i11 >> 2] | 0;
 HEAP32[i6 >> 2] = HEAP32[i12 >> 2];
 i12 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i6, i9, i2, i10, i3, i4) | 0;
 STACKTOP = i1;
 return i12 | 0;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 i6 = i1;
 i7 = i1 + 122 | 0;
 i8 = i1 + 108 | 0;
 i9 = i1 + 16 | 0;
 i10 = i1 + 12 | 0;
 i11 = i1 + 4 | 0;
 i12 = i1 + 8 | 0;
 HEAP8[i7 >> 0] = HEAP8[70717] | 0;
 HEAP8[i7 + 1 >> 0] = HEAP8[70718] | 0;
 HEAP8[i7 + 2 >> 0] = HEAP8[70719] | 0;
 HEAP8[i7 + 3 >> 0] = HEAP8[70720] | 0;
 HEAP8[i7 + 4 >> 0] = HEAP8[70721] | 0;
 HEAP8[i7 + 5 >> 0] = HEAP8[70722] | 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj(i7 + 1 | 0, 70723, 1, HEAP32[i3 + 4 >> 2] | 0);
 i13 = __ZNSt3__26__clocEv() | 0;
 HEAP32[i6 >> 2] = i5;
 i5 = i8 + (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz(i8, 13, i13, i7, i6) | 0) | 0;
 i7 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i8, i5, i3) | 0;
 __ZNKSt3__28ios_base6getlocEv(i6, i3);
 __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE(i8, i7, i5, i9, i10, i11, i6);
 __ZNSt3__26localeD2Ev(i6);
 HEAP32[i12 >> 2] = HEAP32[i2 >> 2];
 i2 = HEAP32[i10 >> 2] | 0;
 i10 = HEAP32[i11 >> 2] | 0;
 HEAP32[i6 >> 2] = HEAP32[i12 >> 2];
 i12 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i6, i9, i2, i10, i3, i4) | 0;
 STACKTOP = i1;
 return i12 | 0;
}

function __ZN10ImDrawData14ScaleClipRectsERK6ImVec2(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, f11 = f0, f12 = f0, i13 = 0, i14 = 0, i15 = 0, f16 = f0, i17 = 0, f18 = f0, i19 = 0, f20 = f0, i21 = 0, f22 = f0, i23 = 0;
 i3 = 0;
 i4 = i1 + 8 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 if ((i5 | 0) <= 0) return;
 i6 = i1 + 4 | 0;
 i1 = i2 + 4 | 0;
 i7 = 0;
 i8 = i5;
 L4 : while (1) {
  i5 = HEAP32[(HEAP32[i6 >> 2] | 0) + (i7 << 2) >> 2] | 0;
  i9 = HEAP32[i5 >> 2] | 0;
  if ((i9 | 0) > 0) {
   i10 = i5 + 8 | 0;
   f11 = Math_fround(HEAPF32[i2 >> 2]);
   f12 = Math_fround(HEAPF32[i1 >> 2]);
   i13 = 0;
   i14 = i9;
   do {
    if ((i14 | 0) <= (i13 | 0)) {
     i3 = 9;
     break L4;
    }
    i9 = HEAP32[i10 >> 2] | 0;
    i15 = i9 + (i13 << 5) | 0;
    i9 = i15 + 4 | 0;
    f16 = Math_fround(Math_fround(HEAPF32[i9 >> 2]) * f11);
    i17 = i15 + 8 | 0;
    f18 = Math_fround(Math_fround(HEAPF32[i17 >> 2]) * f12);
    i19 = i15 + 12 | 0;
    f20 = Math_fround(f11 * Math_fround(HEAPF32[i19 >> 2]));
    i21 = i15 + 16 | 0;
    f22 = Math_fround(f12 * Math_fround(HEAPF32[i21 >> 2]));
    HEAPF32[i9 >> 2] = f16;
    HEAPF32[i17 >> 2] = f18;
    HEAPF32[i19 >> 2] = f20;
    HEAPF32[i21 >> 2] = f22;
    i13 = i13 + 1 | 0;
    i14 = HEAP32[i5 >> 2] | 0;
   } while ((i13 | 0) < (i14 | 0));
   i23 = HEAP32[i4 >> 2] | 0;
  } else i23 = i8;
  i7 = i7 + 1 | 0;
  if ((i7 | 0) >= (i23 | 0)) {
   i3 = 3;
   break;
  } else i8 = i23;
 }
 if ((i3 | 0) == 3) return; else if ((i3 | 0) == 9) ___assert_fail(56841, 56850, 1235, 56909);
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i6 = i1;
 i7 = i1 + 52 | 0;
 i8 = i1 + 40 | 0;
 i9 = i1 + 16 | 0;
 i10 = i1 + 12 | 0;
 i11 = i1 + 4 | 0;
 i12 = i1 + 8 | 0;
 HEAP8[i7 >> 0] = HEAP8[70717] | 0;
 HEAP8[i7 + 1 >> 0] = HEAP8[70718] | 0;
 HEAP8[i7 + 2 >> 0] = HEAP8[70719] | 0;
 HEAP8[i7 + 3 >> 0] = HEAP8[70720] | 0;
 HEAP8[i7 + 4 >> 0] = HEAP8[70721] | 0;
 HEAP8[i7 + 5 >> 0] = HEAP8[70722] | 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj(i7 + 1 | 0, 70723, 0, HEAP32[i3 + 4 >> 2] | 0);
 i13 = __ZNSt3__26__clocEv() | 0;
 HEAP32[i6 >> 2] = i5;
 i5 = i8 + (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz(i8, 12, i13, i7, i6) | 0) | 0;
 i7 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i8, i5, i3) | 0;
 __ZNKSt3__28ios_base6getlocEv(i6, i3);
 __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE(i8, i7, i5, i9, i10, i11, i6);
 __ZNSt3__26localeD2Ev(i6);
 HEAP32[i12 >> 2] = HEAP32[i2 >> 2];
 i2 = HEAP32[i10 >> 2] | 0;
 i10 = HEAP32[i11 >> 2] | 0;
 HEAP32[i6 >> 2] = HEAP32[i12 >> 2];
 i12 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i6, i9, i2, i10, i3, i4) | 0;
 STACKTOP = i1;
 return i12 | 0;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i6 = i1;
 i7 = i1 + 52 | 0;
 i8 = i1 + 39 | 0;
 i9 = i1 + 16 | 0;
 i10 = i1 + 12 | 0;
 i11 = i1 + 4 | 0;
 i12 = i1 + 8 | 0;
 HEAP8[i7 >> 0] = HEAP8[70717] | 0;
 HEAP8[i7 + 1 >> 0] = HEAP8[70718] | 0;
 HEAP8[i7 + 2 >> 0] = HEAP8[70719] | 0;
 HEAP8[i7 + 3 >> 0] = HEAP8[70720] | 0;
 HEAP8[i7 + 4 >> 0] = HEAP8[70721] | 0;
 HEAP8[i7 + 5 >> 0] = HEAP8[70722] | 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj(i7 + 1 | 0, 70723, 1, HEAP32[i3 + 4 >> 2] | 0);
 i13 = __ZNSt3__26__clocEv() | 0;
 HEAP32[i6 >> 2] = i5;
 i5 = i8 + (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz(i8, 13, i13, i7, i6) | 0) | 0;
 i7 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i8, i5, i3) | 0;
 __ZNKSt3__28ios_base6getlocEv(i6, i3);
 __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE(i8, i7, i5, i9, i10, i11, i6);
 __ZNSt3__26localeD2Ev(i6);
 HEAP32[i12 >> 2] = HEAP32[i2 >> 2];
 i2 = HEAP32[i10 >> 2] | 0;
 i10 = HEAP32[i11 >> 2] | 0;
 HEAP32[i6 >> 2] = HEAP32[i12 >> 2];
 i12 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i6, i9, i2, i10, i3, i4) | 0;
 STACKTOP = i1;
 return i12 | 0;
}

function __ZNSt3__26vectorIN3glm3vecILi2EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE8__appendEj(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i3 = i1 + 8 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 i5 = i1 + 4 | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 if (i4 - i6 >> 3 >>> 0 >= i2 >>> 0) {
  i7 = i2;
  i8 = i6;
  do {
   i9 = i8;
   HEAP32[i9 >> 2] = 0;
   HEAP32[i9 + 4 >> 2] = 0;
   i8 = (HEAP32[i5 >> 2] | 0) + 8 | 0;
   HEAP32[i5 >> 2] = i8;
   i7 = i7 + -1 | 0;
  } while ((i7 | 0) != 0);
  return;
 }
 i7 = HEAP32[i1 >> 2] | 0;
 i8 = i6 - i7 >> 3;
 i6 = i8 + i2 | 0;
 if (i6 >>> 0 > 536870911) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv(i1);
 i9 = i4 - i7 | 0;
 i7 = i9 >> 2;
 i4 = i9 >> 3 >>> 0 < 268435455 ? (i7 >>> 0 < i6 >>> 0 ? i6 : i7) : 536870911;
 do if (!i4) i10 = 0; else if (i4 >>> 0 > 536870911) {
  i7 = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc(i7, 29699);
  HEAP32[i7 >> 2] = 21232;
  ___cxa_throw(i7 | 0, 3136, 120);
 } else {
  i10 = __Znwj(i4 << 3) | 0;
  break;
 } while (0);
 i7 = i10 + (i8 << 3) | 0;
 i8 = i10 + (i4 << 3) | 0;
 i4 = i2;
 i2 = i7;
 i10 = i7;
 do {
  i6 = i2;
  HEAP32[i6 >> 2] = 0;
  HEAP32[i6 + 4 >> 2] = 0;
  i2 = i10 + 8 | 0;
  i10 = i2;
  i4 = i4 + -1 | 0;
 } while ((i4 | 0) != 0);
 i4 = HEAP32[i1 >> 2] | 0;
 i2 = (HEAP32[i5 >> 2] | 0) - i4 | 0;
 i6 = i7 + (0 - (i2 >> 3) << 3) | 0;
 if ((i2 | 0) > 0) _memcpy(i6 | 0, i4 | 0, i2 | 0) | 0;
 HEAP32[i1 >> 2] = i6;
 HEAP32[i5 >> 2] = i10;
 HEAP32[i3 >> 2] = i8;
 if (!i4) return;
 __ZdlPv(i4);
 return;
}

function __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i3 = i1 + 32 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_(i3, i2) | 0;
 i2 = i1 + 44 | 0;
 HEAP32[i2 >> 2] = 0;
 i4 = i1 + 48 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 if (i5 & 8 | 0) {
  i6 = HEAP8[i3 + 11 >> 0] | 0;
  if (i6 << 24 >> 24 < 0) {
   i7 = HEAP32[i3 >> 2] | 0;
   i8 = i7;
   i9 = i7;
   i10 = i7 + (HEAP32[i1 + 36 >> 2] | 0) | 0;
  } else {
   i8 = i3;
   i9 = i3;
   i10 = i3 + (i6 & 255) | 0;
  }
  HEAP32[i2 >> 2] = i10;
  HEAP32[i1 + 8 >> 2] = i8;
  HEAP32[i1 + 12 >> 2] = i9;
  HEAP32[i1 + 16 >> 2] = i10;
 }
 if (!(i5 & 16)) return;
 i5 = i3 + 11 | 0;
 i10 = HEAP8[i5 >> 0] | 0;
 if (i10 << 24 >> 24 < 0) {
  i9 = HEAP32[i1 + 36 >> 2] | 0;
  HEAP32[i2 >> 2] = (HEAP32[i3 >> 2] | 0) + i9;
  i11 = (HEAP32[i1 + 40 >> 2] & 2147483647) + -1 | 0;
  i12 = i9;
 } else {
  i9 = i10 & 255;
  HEAP32[i2 >> 2] = i3 + i9;
  i11 = 10;
  i12 = i9;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i3, i11, 0);
 i11 = HEAP8[i5 >> 0] | 0;
 if (i11 << 24 >> 24 < 0) {
  i13 = HEAP32[i3 >> 2] | 0;
  i14 = HEAP32[i1 + 36 >> 2] | 0;
 } else {
  i13 = i3;
  i14 = i11 & 255;
 }
 i11 = i1 + 24 | 0;
 HEAP32[i11 >> 2] = i13;
 HEAP32[i1 + 20 >> 2] = i13;
 HEAP32[i1 + 28 >> 2] = i13 + i14;
 if (!(HEAP32[i4 >> 2] & 3)) return;
 HEAP32[i11 >> 2] = i13 + i12;
 return;
}

function __Z6ImHashPKvij(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 if (!(HEAP32[1460601] | 0)) {
  i4 = 0;
  do {
   i5 = i4 >>> 1;
   i6 = (0 - (i4 & 1) & -306674912 ^ i5) >>> 1;
   i7 = (0 - (i5 & 1) & -306674912 ^ i6) >>> 1;
   i5 = (0 - (i6 & 1) & -306674912 ^ i7) >>> 1;
   i6 = (0 - (i7 & 1) & -306674912 ^ i5) >>> 1;
   i7 = (0 - (i5 & 1) & -306674912 ^ i6) >>> 1;
   i5 = (0 - (i6 & 1) & -306674912 ^ i7) >>> 1;
   HEAP32[5842400 + (i4 << 2) >> 2] = 0 - (i5 & 1) & -306674912 ^ (0 - (i7 & 1) & -306674912 ^ i5) >>> 1;
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) != 256);
 }
 i4 = ~i3;
 if ((i2 | 0) > 0) {
  i3 = i1;
  i5 = i4;
  i7 = i2;
  while (1) {
   i7 = i7 + -1 | 0;
   i2 = HEAP32[5842400 + ((i5 & 255 ^ HEAPU8[i3 >> 0]) << 2) >> 2] ^ i5 >>> 8;
   if (!i7) {
    i8 = i2;
    break;
   } else {
    i3 = i3 + 1 | 0;
    i5 = i2;
   }
  }
  i9 = ~i8;
  return i9 | 0;
 }
 i5 = HEAP8[i1 >> 0] | 0;
 if (!(i5 << 24 >> 24)) {
  i8 = i4;
  i9 = ~i8;
  return i9 | 0;
 } else {
  i10 = i4;
  i11 = i1;
  i12 = i5;
 }
 while (1) {
  i5 = i11;
  i11 = i11 + 1 | 0;
  i1 = HEAP8[i11 >> 0] | 0;
  if (i12 << 24 >> 24 == 35 & i1 << 24 >> 24 == 35) {
   i13 = (HEAP8[i5 + 2 >> 0] | 0) == 35 ? i4 : i10;
   i14 = 35;
  } else {
   i13 = i10;
   i14 = i1;
  }
  i1 = i13 >>> 8 ^ HEAP32[5842400 + ((i13 & 255 ^ i12 & 255) << 2) >> 2];
  if (!(i14 << 24 >> 24)) {
   i8 = i1;
   break;
  } else {
   i10 = i1;
   i12 = i14;
  }
 }
 i9 = ~i8;
 return i9 | 0;
}

function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 127](i1) | 0;
 i3 = __ZNKSt3__26locale9use_facetERNS0_2idE(i2, 5846980) | 0;
 HEAP32[i1 + 68 >> 2] = i3;
 i2 = i1 + 98 | 0;
 i4 = HEAP8[i2 >> 0] | 0;
 i5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] & 127](i3) | 0;
 HEAP8[i2 >> 0] = i5 & 1;
 if ((i4 & 255 | 0) == (i5 & 1 | 0)) return;
 i4 = i1 + 8 | 0;
 i2 = i1 + 96 | 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 HEAP32[i4 + 12 >> 2] = 0;
 HEAP32[i4 + 16 >> 2] = 0;
 HEAP32[i4 + 20 >> 2] = 0;
 i4 = (HEAP8[i2 >> 0] | 0) != 0;
 if (i5) {
  i5 = i1 + 32 | 0;
  if (i4) {
   i3 = HEAP32[i5 >> 2] | 0;
   if (i3 | 0) __ZdaPv(i3);
  }
  i3 = i1 + 97 | 0;
  HEAP8[i2 >> 0] = HEAP8[i3 >> 0] | 0;
  i6 = i1 + 60 | 0;
  HEAP32[i1 + 52 >> 2] = HEAP32[i6 >> 2];
  i7 = i1 + 56 | 0;
  HEAP32[i5 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i6 >> 2] = 0;
  HEAP32[i7 >> 2] = 0;
  HEAP8[i3 >> 0] = 0;
  return;
 }
 if (!i4) {
  i4 = i1 + 32 | 0;
  i3 = HEAP32[i4 >> 2] | 0;
  if ((i3 | 0) != (i1 + 44 | 0)) {
   i7 = HEAP32[i1 + 52 >> 2] | 0;
   HEAP32[i1 + 60 >> 2] = i7;
   HEAP32[i1 + 56 >> 2] = i3;
   HEAP8[i1 + 97 >> 0] = 0;
   i3 = __Znaj(i7) | 0;
   HEAP32[i4 >> 2] = i3;
   HEAP8[i2 >> 0] = 1;
   return;
  }
 }
 i2 = HEAP32[i1 + 52 >> 2] | 0;
 HEAP32[i1 + 60 >> 2] = i2;
 i3 = __Znaj(i2) | 0;
 HEAP32[i1 + 56 >> 2] = i3;
 HEAP8[i1 + 97 >> 0] = 1;
 return;
}

function __ZN11ImFontAtlas36AddFontFromMemoryCompressedBase85TTFEPKcfPK12ImFontConfigPKt(i1, i2, f3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 f3 = Math_fround(f3);
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i6 = __ZN5ImGui8MemAllocEj((((_strlen(i2) | 0) + 4 | 0) / 5 | 0) << 2) | 0;
 i7 = HEAP8[i2 >> 0] | 0;
 if (!(i7 << 24 >> 24)) {
  i8 = __ZN11ImFontAtlas30AddFontFromMemoryCompressedTTFEPKvifPK12ImFontConfigPKt(i1, i6, 0, f3, i4, i5) | 0;
  __ZN5ImGui7MemFreeEPv(i6);
  return i8 | 0;
 } else {
  i9 = i6;
  i10 = i2;
  i11 = i7;
 }
 while (1) {
  i7 = HEAP8[i10 + 1 >> 0] | 0;
  i2 = HEAP8[i10 + 2 >> 0] | 0;
  i12 = HEAP8[i10 + 3 >> 0] | 0;
  i13 = HEAP8[i10 + 4 >> 0] | 0;
  i14 = i7 << 24 >> 24 | 0;
  i7 = i2 << 24 >> 24 | 0;
  i2 = i12 << 24 >> 24 | 0;
  i12 = i13 << 24 >> 24 | 0;
  i13 = i11 << 24 >> 24 | 0;
  i15 = ((((i14 | 0) > 91 ? -36 : -35) + i14 + ((((i7 | 0) > 91 ? -36 : -35) + i7 + ((((i2 | 0) > 91 ? -36 : -35) + i2 + ((i12 - ((i12 | 0) > 91 ? 36 : 35) | 0) * 85 | 0) | 0) * 85 | 0) | 0) * 85 | 0) | 0) * 85 | 0) + (i13 - ((i13 | 0) > 91 ? 36 : 35)) | 0;
  HEAP8[i9 >> 0] = i15;
  HEAP8[i9 + 1 >> 0] = i15 >>> 8;
  HEAP8[i9 + 2 >> 0] = i15 >>> 16;
  HEAP8[i9 + 3 >> 0] = i15 >>> 24;
  i10 = i10 + 5 | 0;
  i11 = HEAP8[i10 >> 0] | 0;
  if (!(i11 << 24 >> 24)) break; else i9 = i9 + 4 | 0;
 }
 i8 = __ZN11ImFontAtlas30AddFontFromMemoryCompressedTTFEPKvifPK12ImFontConfigPKt(i1, i6, 0, f3, i4, i5) | 0;
 __ZN5ImGui7MemFreeEPv(i6);
 return i8 | 0;
}

function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b(i1, HEAP32[i2 + 8 >> 2] | 0, i6) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, i2, i3, i4, i5); else {
  i7 = i2 + 52 | 0;
  i8 = HEAP8[i7 >> 0] | 0;
  i9 = i2 + 53 | 0;
  i10 = HEAP8[i9 >> 0] | 0;
  i11 = HEAP32[i1 + 12 >> 2] | 0;
  i12 = i1 + 16 + (i11 << 3) | 0;
  HEAP8[i7 >> 0] = 0;
  HEAP8[i9 >> 0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i1 + 16 | 0, i2, i3, i4, i5, i6);
  L4 : do if ((i11 | 0) > 1) {
   i13 = i2 + 24 | 0;
   i14 = i1 + 8 | 0;
   i15 = i2 + 54 | 0;
   i16 = i1 + 24 | 0;
   do {
    if (HEAP8[i15 >> 0] | 0) break L4;
    if (!(HEAP8[i7 >> 0] | 0)) {
     if (HEAP8[i9 >> 0] | 0) if (!(HEAP32[i14 >> 2] & 1)) break L4;
    } else {
     if ((HEAP32[i13 >> 2] | 0) == 1) break L4;
     if (!(HEAP32[i14 >> 2] & 2)) break L4;
    }
    HEAP8[i7 >> 0] = 0;
    HEAP8[i9 >> 0] = 0;
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i16, i2, i3, i4, i5, i6);
    i16 = i16 + 8 | 0;
   } while (i16 >>> 0 < i12 >>> 0);
  } while (0);
  HEAP8[i7 >> 0] = i8;
  HEAP8[i9 >> 0] = i10;
 }
 return;
}

function __ZN9MenuBuild11drawMessageEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, f6 = f0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 i3 = i2 + 56 | 0;
 i4 = i2 + 72 | 0;
 i5 = i2 + 64 | 0;
 f6 = Math_fround(Math_fround(HEAP32[(HEAP32[1460597] | 0) + 4 >> 2] | 0) + Math_fround(-254.0));
 HEAPF32[i4 >> 2] = f6;
 HEAPF32[i4 + 4 >> 2] = Math_fround(112.0);
 HEAPF32[i5 >> 2] = Math_fround(0.0);
 HEAPF32[i5 + 4 >> 2] = Math_fround(0.0);
 __ZN5ImGui16SetNextWindowPosERK6ImVec2iS2_(i4, 0, i5);
 __ZN5ImGui5BeginEPKcPbi(26524, 0, 71) | 0;
 __ZN5ImGui8SameLineEff(Math_fround(220.0), Math_fround(1.0));
 __ZN5ImGui4TextEPKcz(5849359, i2);
 i5 = i1 + 4 | 0;
 switch (HEAP32[i5 >> 2] | 0) {
 case 1:
  {
   __ZN5ImGui11TextWrappedEPKcz(26532, i2 + 8 | 0);
   break;
  }
 case 2:
  {
   __ZN5ImGui11TextWrappedEPKcz(26697, i2 + 16 | 0);
   break;
  }
 case 3:
  {
   __ZN5ImGui11TextWrappedEPKcz(26911, i2 + 24 | 0);
   break;
  }
 case 4:
  {
   __ZN5ImGui11TextWrappedEPKcz(27015, i2 + 32 | 0);
   break;
  }
 case 5:
  {
   __ZN5ImGui11TextWrappedEPKcz(27137, i2 + 40 | 0);
   break;
  }
 case 6:
  {
   __ZN5ImGui11TextWrappedEPKcz(27245, i2 + 48 | 0);
   break;
  }
 case 7:
  {
   __ZN5ImGui11TextWrappedEPKcz(27561, i3);
   HEAPF32[i3 >> 2] = Math_fround(0.0);
   HEAPF32[i3 + 4 >> 2] = Math_fround(0.0);
   if (__ZN5ImGui6ButtonEPKcRK6ImVec2(27610, i3) | 0) HEAP32[i5 >> 2] = 0;
   break;
  }
 default:
  {}
 }
 __ZN5ImGui3EndEv();
 STACKTOP = i2;
 return;
}

function _png_safe_error(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = HEAP32[i1 + 176 >> 2] | 0;
 if (!i3) _abort();
 i1 = (i2 | 0) == 0;
 if (i1) i4 = 0; else {
  i5 = HEAP8[i2 >> 0] | 0;
  if (!(i5 << 24 >> 24)) i4 = 0; else {
   i6 = 0;
   i7 = i2;
   i8 = i5;
   while (1) {
    i7 = i7 + 1 | 0;
    i5 = i6 + 1 | 0;
    HEAP8[i3 + 32 + i6 >> 0] = i8;
    i8 = HEAP8[i7 >> 0] | 0;
    if (!(i5 >>> 0 < 63 & i8 << 24 >> 24 != 0)) {
     i4 = i5;
     break;
    } else i6 = i5;
   }
  }
 }
 HEAP8[i3 + 32 + i4 >> 0] = 0;
 i4 = i3 + 28 | 0;
 HEAP32[i4 >> 2] = HEAP32[i4 >> 2] | 2;
 i4 = HEAP32[i3 >> 2] | 0;
 if (i4 | 0) {
  i6 = HEAP32[i4 + 8 >> 2] | 0;
  if (i6 | 0) _longjmp(i6 | 0, 1);
 }
 HEAP8[i3 + 32 >> 0] = 98;
 HEAP8[i3 + 33 >> 0] = 97;
 HEAP8[i3 + 34 >> 0] = 100;
 HEAP8[i3 + 35 >> 0] = 32;
 HEAP8[i3 + 36 >> 0] = 108;
 HEAP8[i3 + 37 >> 0] = 111;
 HEAP8[i3 + 38 >> 0] = 110;
 HEAP8[i3 + 39 >> 0] = 103;
 HEAP8[i3 + 40 >> 0] = 106;
 HEAP8[i3 + 41 >> 0] = 109;
 HEAP8[i3 + 42 >> 0] = 112;
 HEAP8[i3 + 43 >> 0] = 58;
 HEAP8[i3 + 44 >> 0] = 32;
 HEAP8[i3 + 45 >> 0] = 0;
 if (i1) i9 = 13; else {
  i1 = HEAP8[i2 >> 0] | 0;
  if (!(i1 << 24 >> 24)) i9 = 13; else {
   i6 = 13;
   i4 = i2;
   i2 = i1;
   while (1) {
    i4 = i4 + 1 | 0;
    i1 = i6 + 1 | 0;
    HEAP8[i3 + 32 + i6 >> 0] = i2;
    i2 = HEAP8[i4 >> 0] | 0;
    if (!(i1 >>> 0 < 63 & i2 << 24 >> 24 != 0)) {
     i9 = i1;
     break;
    } else i6 = i1;
   }
  }
 }
 HEAP8[i3 + 32 + i9 >> 0] = 0;
 _abort();
}

function __ZNKSt3__28messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i2;
 HEAP32[i7 >> 2] = 0;
 HEAP32[i7 + 4 >> 2] = 0;
 HEAP32[i7 + 8 >> 2] = 0;
 i8 = 0;
 while (1) {
  if ((i8 | 0) == 3) break;
  HEAP32[i7 + (i8 << 2) >> 2] = 0;
  i8 = i8 + 1 | 0;
 }
 i8 = HEAP8[i6 + 11 >> 0] | 0;
 i9 = i8 << 24 >> 24 < 0;
 i10 = i9 ? HEAP32[i6 >> 2] | 0 : i6;
 i11 = i10 + (i9 ? HEAP32[i6 + 4 >> 2] | 0 : i8 & 255) | 0;
 i8 = i10;
 while (1) {
  if (i8 >>> 0 >= i11 >>> 0) break;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(i7, HEAP8[i8 >> 0] | 0);
  i8 = i8 + 1 | 0;
 }
 i8 = (HEAP8[i7 + 11 >> 0] | 0) < 0 ? HEAP32[i7 >> 2] | 0 : i7;
 i11 = _catgets((i3 | 0) == -1 ? -1 : i3 << 1, i4, i5, i8) | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 i5 = 0;
 while (1) {
  if ((i5 | 0) == 3) break;
  HEAP32[i1 + (i5 << 2) >> 2] = 0;
  i5 = i5 + 1 | 0;
 }
 i5 = i8 + (_strlen(i11) | 0) | 0;
 i11 = i8;
 while (1) {
  if (i11 >>> 0 >= i5 >>> 0) break;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(i1, HEAP8[i11 >> 0] | 0);
  i11 = i11 + 1 | 0;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i7);
 STACKTOP = i2;
 return;
}

function __ZN12RenderSystem4initER13WindowManager(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = HEAP32[i1 + 72 >> 2] | 0;
 HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 _glEnable(2929);
 _glBlendFunc(770, 771);
 _glEnable(3042);
 _glTexParameteri(3553, 10242, 33071);
 _glTexParameteri(3553, 10243, 33071);
 i2 = __Z10loadShaderjPKc(35633, 30042) | 0;
 i3 = __Z12buildProgramjjPKcS0_(i2, __Z10loadShaderjPKc(35632, 30487) | 0, 30778, 30788) | 0;
 i2 = i1 + 40 | 0;
 HEAP32[i2 >> 2] = i3;
 i3 = __Z10loadShaderjPKc(35633, 30792) | 0;
 i4 = __Z12buildProgramjjPKcS0_(i3, __Z10loadShaderjPKc(35632, 31240) | 0, 30778, 0) | 0;
 i3 = i1 + 44 | 0;
 HEAP32[i3 >> 2] = i4;
 i4 = _glGetAttribLocation(HEAP32[i2 >> 2] | 0, 30778) | 0;
 HEAP32[i1 + 96 >> 2] = i4;
 i4 = _glGetAttribLocation(HEAP32[i3 >> 2] | 0, 30778) | 0;
 HEAP32[i1 + 100 >> 2] = i4;
 i4 = _glGetAttribLocation(HEAP32[i2 >> 2] | 0, 30788) | 0;
 HEAP32[i1 + 104 >> 2] = i4;
 _glGetUniformLocation(HEAP32[i2 >> 2] | 0, 31535) | 0;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 0;
 i4 = _glGetUniformLocation(HEAP32[i2 >> 2] | 0, 31543) | 0;
 HEAP32[i1 + 12 >> 2] = i4;
 i4 = _glGetUniformLocation(HEAP32[i2 >> 2] | 0, 31552) | 0;
 HEAP32[i1 + 8 >> 2] = i4;
 i4 = _glGetUniformLocation(HEAP32[i3 >> 2] | 0, 31543) | 0;
 HEAP32[i1 + 24 >> 2] = i4;
 i4 = _glGetUniformLocation(HEAP32[i3 >> 2] | 0, 31552) | 0;
 HEAP32[i1 + 20 >> 2] = i4;
 HEAP32[i1 + 32 >> 2] = 0;
 return;
}

function _png_free_jmpbuf(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160);
 i4 = 4;
 i5 = _malloc(40) | 0;
 HEAP32[i5 >> 2] = 0;
 i6 = i3;
 if (!i1) {
  _free(i5 | 0);
  STACKTOP = i3;
  return;
 }
 i7 = i1 + 160 | 0;
 i8 = HEAP32[i7 >> 2] | 0;
 i9 = i1 + 164 | 0;
 if (i8 | 0) if (!((i8 | 0) == (i1 | 0) | (HEAP32[i9 >> 2] | 0) == 0)) {
  i5 = _saveSetjmp(i6, 1, i5 | 0, i4 | 0) | 0;
  i4 = tempRet0;
  __THREW__ = 0;
  i10 = __THREW__;
  __THREW__ = 0;
  if ((i10 | 0) != 0 & (threwValue | 0) != 0) {
   i11 = _testSetjmp(HEAP32[i10 >> 2] | 0, i5 | 0, i4 | 0) | 0;
   if (!i11) _longjmp(i10 | 0, threwValue | 0);
   tempRet0 = threwValue;
  } else i11 = -1;
  if ((i11 | 0) == 1) i12 = tempRet0; else i12 = 0;
  while (1) {
   if (i12 | 0) break;
   HEAP32[i7 >> 2] = i6;
   HEAP32[i9 >> 2] = 0;
   HEAP32[i1 + 156 >> 2] = 45;
   __THREW__ = 0;
   invoke_vii(47, i1 | 0, i8 | 0);
   i11 = __THREW__;
   __THREW__ = 0;
   if ((i11 | 0) != 0 & (threwValue | 0) != 0) {
    i13 = _testSetjmp(HEAP32[i11 >> 2] | 0, i5 | 0, i4 | 0) | 0;
    if (!i13) _longjmp(i11 | 0, threwValue | 0);
    tempRet0 = threwValue;
   } else i13 = -1;
   if ((i13 | 0) == 1) i12 = tempRet0; else {
    i2 = 8;
    break;
   }
  }
 }
 HEAP32[i9 >> 2] = 0;
 HEAP32[i7 >> 2] = 0;
 HEAP32[i1 + 156 >> 2] = 0;
 _free(i5 | 0);
 STACKTOP = i3;
 return;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(192);
 i6 = i1;
 i7 = i1 + 176 | 0;
 i8 = i1 + 156 | 0;
 i9 = i1 + 4 | 0;
 i10 = i1 + 152 | 0;
 HEAP8[i7 >> 0] = HEAP8[70706] | 0;
 HEAP8[i7 + 1 >> 0] = HEAP8[70707] | 0;
 HEAP8[i7 + 2 >> 0] = HEAP8[70708] | 0;
 HEAP8[i7 + 3 >> 0] = HEAP8[70709] | 0;
 HEAP8[i7 + 4 >> 0] = HEAP8[70710] | 0;
 HEAP8[i7 + 5 >> 0] = HEAP8[70711] | 0;
 i11 = __ZNSt3__26__clocEv() | 0;
 HEAP32[i6 >> 2] = i5;
 i5 = __ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz(i8, 20, i11, i7, i6) | 0;
 i7 = i8 + i5 | 0;
 i11 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i8, i7, i3) | 0;
 __ZNKSt3__28ios_base6getlocEv(i6, i3);
 i12 = __ZNKSt3__26locale9use_facetERNS0_2idE(i6, 5845220) | 0;
 __ZNSt3__26localeD2Ev(i6);
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 48 >> 2] & 7](i12, i8, i7, i9) | 0;
 i12 = i9 + (i5 << 2) | 0;
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i6 >> 2] = HEAP32[i10 >> 2];
 i10 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i6, i9, (i11 | 0) == (i7 | 0) ? i12 : i9 + (i11 - i8 << 2) | 0, i12, i3, i4) | 0;
 STACKTOP = i1;
 return i10 | 0;
}

function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i4 = i3;
 i5 = i1 + 8 | 0;
 i6 = i1 + 4 | 0;
 i7 = HEAP32[i6 >> 2] | 0;
 do if ((HEAP32[i5 >> 2] | 0) - i7 >> 2 >>> 0 < i2 >>> 0) {
  i8 = (i7 - (HEAP32[i1 >> 2] | 0) >> 2) + i2 | 0;
  i9 = __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8max_sizeEv(i1) | 0;
  if (i9 >>> 0 < i8 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv(i1); else {
   i10 = HEAP32[i1 >> 2] | 0;
   i11 = (HEAP32[i5 >> 2] | 0) - i10 | 0;
   i12 = i11 >> 1;
   __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_(i4, i11 >> 2 >>> 0 < i9 >>> 1 >>> 0 ? (i12 >>> 0 < i8 >>> 0 ? i8 : i12) : i9, (HEAP32[i6 >> 2] | 0) - i10 >> 2, i1 + 16 | 0);
   __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj(i4, i2);
   __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE(i1, i4);
   __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev(i4);
   break;
  }
 } else __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj(i1, i2); while (0);
 STACKTOP = i3;
 return;
}

function ___stpcpy(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i3 = 0;
 i4 = i2;
 L1 : do if (!((i4 ^ i1) & 3)) {
  if (!(i4 & 3)) {
   i5 = i2;
   i6 = i1;
  } else {
   i7 = i2;
   i8 = i1;
   while (1) {
    i9 = HEAP8[i7 >> 0] | 0;
    HEAP8[i8 >> 0] = i9;
    if (!(i9 << 24 >> 24)) {
     i10 = i8;
     break L1;
    }
    i9 = i7 + 1 | 0;
    i11 = i8 + 1 | 0;
    if (!(i9 & 3)) {
     i5 = i9;
     i6 = i11;
     break;
    } else {
     i7 = i9;
     i8 = i11;
    }
   }
  }
  i8 = HEAP32[i5 >> 2] | 0;
  if (!((i8 & -2139062144 ^ -2139062144) & i8 + -16843009)) {
   i7 = i6;
   i11 = i5;
   i9 = i8;
   while (1) {
    i8 = i11 + 4 | 0;
    i12 = i7 + 4 | 0;
    HEAP32[i7 >> 2] = i9;
    i9 = HEAP32[i8 >> 2] | 0;
    if ((i9 & -2139062144 ^ -2139062144) & i9 + -16843009 | 0) {
     i13 = i8;
     i14 = i12;
     break;
    } else {
     i7 = i12;
     i11 = i8;
    }
   }
  } else {
   i13 = i5;
   i14 = i6;
  }
  i15 = i13;
  i16 = i14;
  i3 = 8;
 } else {
  i15 = i2;
  i16 = i1;
  i3 = 8;
 } while (0);
 if ((i3 | 0) == 8) {
  i3 = HEAP8[i15 >> 0] | 0;
  HEAP8[i16 >> 0] = i3;
  if (!(i3 << 24 >> 24)) i10 = i16; else {
   i3 = i16;
   i16 = i15;
   while (1) {
    i16 = i16 + 1 | 0;
    i15 = i3 + 1 | 0;
    i1 = HEAP8[i16 >> 0] | 0;
    HEAP8[i15 >> 0] = i1;
    if (!(i1 << 24 >> 24)) {
     i10 = i15;
     break;
    } else i3 = i15;
   }
  }
 }
 return i10 | 0;
}

function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE6setbufEPci(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i4 = i1 + 8 | 0;
 i5 = i1 + 96 | 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 HEAP32[i4 + 12 >> 2] = 0;
 HEAP32[i4 + 16 >> 2] = 0;
 HEAP32[i4 + 20 >> 2] = 0;
 if (HEAP8[i5 >> 0] | 0) {
  i4 = HEAP32[i1 + 32 >> 2] | 0;
  if (i4 | 0) __ZdaPv(i4);
 }
 i4 = i1 + 97 | 0;
 if (HEAP8[i4 >> 0] | 0) {
  i6 = HEAP32[i1 + 56 >> 2] | 0;
  if (i6 | 0) __ZdaPv(i6);
 }
 i6 = i1 + 52 | 0;
 HEAP32[i6 >> 2] = i3;
 if (i3 >>> 0 > 8) {
  i7 = HEAP8[i1 + 98 >> 0] | 0;
  if ((i2 | 0) != 0 & i7 << 24 >> 24 != 0) {
   i8 = 0;
   i9 = i2;
  } else {
   i8 = 1;
   i9 = __Znaj(i3) | 0;
  }
  HEAP32[i1 + 32 >> 2] = i9;
  i10 = i8;
  i11 = i7;
 } else {
  HEAP32[i1 + 32 >> 2] = i1 + 44;
  HEAP32[i6 >> 2] = 8;
  i10 = 0;
  i11 = HEAP8[i1 + 98 >> 0] | 0;
 }
 HEAP8[i5 >> 0] = i10;
 if (i11 << 24 >> 24) {
  HEAP32[i1 + 60 >> 2] = 0;
  i12 = 0;
  i13 = 0;
  i14 = i1 + 56 | 0;
  HEAP32[i14 >> 2] = i13;
  HEAP8[i4 >> 0] = i12;
  return i1 | 0;
 }
 i11 = (i3 | 0) > 8 ? i3 : 8;
 HEAP32[i1 + 60 >> 2] = i11;
 if ((i2 | 0) != 0 & i11 >>> 0 > 7) {
  i12 = 0;
  i13 = i2;
  i14 = i1 + 56 | 0;
  HEAP32[i14 >> 2] = i13;
  HEAP8[i4 >> 0] = i12;
  return i1 | 0;
 }
 i12 = 1;
 i13 = __Znaj(i11) | 0;
 i14 = i1 + 56 | 0;
 HEAP32[i14 >> 2] = i13;
 HEAP8[i4 >> 0] = i12;
 return i1 | 0;
}

function __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i5 = 0;
 i6 = i1 + 11 | 0;
 i7 = HEAP8[i6 >> 0] | 0;
 i8 = i1 + 4 | 0;
 i9 = HEAP32[i8 >> 2] | 0;
 do if ((i7 << 24 >> 24 < 0 ? i9 : i7 & 255) | 0) {
  if ((i2 | 0) == (i3 | 0)) {
   i10 = i7;
   i11 = i9;
  } else {
   i12 = i3;
   i13 = i2;
   while (1) {
    i14 = i12 + -4 | 0;
    if (i13 >>> 0 >= i14 >>> 0) break;
    i15 = HEAP32[i13 >> 2] | 0;
    HEAP32[i13 >> 2] = HEAP32[i14 >> 2];
    HEAP32[i14 >> 2] = i15;
    i12 = i14;
    i13 = i13 + 4 | 0;
   }
   i10 = HEAP8[i6 >> 0] | 0;
   i11 = HEAP32[i8 >> 2] | 0;
  }
  i13 = i10 << 24 >> 24 < 0;
  i12 = i13 ? HEAP32[i1 >> 2] | 0 : i1;
  i14 = i3 + -4 | 0;
  i15 = i12 + (i13 ? i11 : i10 & 255) | 0;
  i13 = i2;
  i16 = i12;
  while (1) {
   i17 = HEAP8[i16 >> 0] | 0;
   i12 = i17 << 24 >> 24 | 0;
   i18 = (i12 | 0) > 0 & (i12 | 0) != 127;
   if (i13 >>> 0 >= i14 >>> 0) break;
   if (i18) if ((HEAP32[i13 >> 2] | 0) != (i17 << 24 >> 24 | 0)) {
    i5 = 10;
    break;
   }
   i13 = i13 + 4 | 0;
   i16 = (i15 - i16 | 0) > 1 ? i16 + 1 | 0 : i16;
  }
  if ((i5 | 0) == 10) {
   HEAP32[i4 >> 2] = 4;
   break;
  }
  if (i18) if (((HEAP32[i14 >> 2] | 0) + -1 | 0) >>> 0 >= i17 << 24 >> 24 >>> 0) HEAP32[i4 >> 2] = 4;
 } while (0);
 return;
}

function __ZL17ClosePopupToLeveli(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 if ((i1 | 0) <= -1) ___assert_fail(36806, 31803, 5219, 36821);
 i2 = HEAP32[1460598] | 0;
 i3 = i2 + 6512 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 do if (!i1) if ((i4 | 0) > 0) {
  i5 = (HEAP32[i2 + 6520 >> 2] | 0) + 8 | 0;
  break;
 } else ___assert_fail(56841, 56850, 1235, 56909); else if ((i4 | 0) < (i1 | 0)) ___assert_fail(56841, 56850, 1235, 56909); else {
  i5 = (HEAP32[i2 + 6520 >> 2] | 0) + ((i1 + -1 | 0) * 36 | 0) + 4 | 0;
  break;
 } while (0);
 i4 = HEAP32[i5 >> 2] | 0;
 if (!(HEAP32[i2 + 6720 >> 2] | 0)) {
  i5 = HEAP32[i4 + 772 >> 2] | 0;
  i6 = (i5 | 0) == 0 ? i4 : i5;
 } else i6 = i4;
 __ZN5ImGui11FocusWindowEP11ImGuiWindow(i6);
 HEAP8[i6 + 296 >> 0] = 1;
 i6 = i2 + 6516 | 0;
 i4 = HEAP32[i6 >> 2] | 0;
 if ((i4 | 0) >= (i1 | 0)) {
  HEAP32[i3 >> 2] = i1;
  return;
 }
 if (!i4) i7 = 8; else i7 = ((i4 | 0) / 2 | 0) + i4 | 0;
 i5 = (i7 | 0) > (i1 | 0) ? i7 : i1;
 if ((i4 | 0) >= (i5 | 0)) {
  HEAP32[i3 >> 2] = i1;
  return;
 }
 HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
 i4 = __ZL13MallocWrapperjPv(i5 * 36 | 0, 0) | 0;
 i7 = i2 + 6520 | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 if (!i2) i8 = i7; else {
  _memcpy(i4 | 0, i2 | 0, (HEAP32[i3 >> 2] | 0) * 36 | 0) | 0;
  i2 = HEAP32[i7 >> 2] | 0;
  if (i2 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
  __ZL11FreeWrapperPvS_(i2, 0);
  i8 = i7;
 }
 HEAP32[i8 >> 2] = i4;
 HEAP32[i6 >> 2] = i5;
 HEAP32[i3 >> 2] = i1;
 return;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 i6 = i1;
 i7 = i1 + 68 | 0;
 i8 = i1 + 48 | 0;
 i9 = i1 + 8 | 0;
 i10 = i1 + 4 | 0;
 HEAP8[i7 >> 0] = HEAP8[70706] | 0;
 HEAP8[i7 + 1 >> 0] = HEAP8[70707] | 0;
 HEAP8[i7 + 2 >> 0] = HEAP8[70708] | 0;
 HEAP8[i7 + 3 >> 0] = HEAP8[70709] | 0;
 HEAP8[i7 + 4 >> 0] = HEAP8[70710] | 0;
 HEAP8[i7 + 5 >> 0] = HEAP8[70711] | 0;
 i11 = __ZNSt3__26__clocEv() | 0;
 HEAP32[i6 >> 2] = i5;
 i5 = __ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz(i8, 20, i11, i7, i6) | 0;
 i7 = i8 + i5 | 0;
 i11 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i8, i7, i3) | 0;
 __ZNKSt3__28ios_base6getlocEv(i6, i3);
 i12 = __ZNKSt3__26locale9use_facetERNS0_2idE(i6, 5845188) | 0;
 __ZNSt3__26localeD2Ev(i6);
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 32 >> 2] & 7](i12, i8, i7, i9) | 0;
 i12 = i9 + i5 | 0;
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i6 >> 2] = HEAP32[i10 >> 2];
 i10 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i6, i9, (i11 | 0) == (i7 | 0) ? i12 : i9 + (i11 - i8) | 0, i12, i3, i4) | 0;
 STACKTOP = i1;
 return i10 | 0;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i10 = i9;
 if ((1073741806 - i2 | 0) >>> 0 < i3 >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i1);
 i11 = i1 + 8 | 0;
 if ((HEAP8[i11 + 3 >> 0] | 0) < 0) i12 = HEAP32[i1 >> 2] | 0; else i12 = i1;
 if (i2 >>> 0 < 536870887) {
  i13 = i3 + i2 | 0;
  i3 = i2 << 1;
  i14 = i13 >>> 0 < i3 >>> 0 ? i3 : i13;
  i13 = i14 >>> 0 < 2 ? 2 : i14 + 4 & -4;
  if (i13 >>> 0 > 1073741823) _abort(); else i15 = i13;
 } else i15 = 1073741807;
 i13 = __Znwj(i15 << 2) | 0;
 if (i5 | 0) __ZNSt3__211char_traitsIwE4copyEPwPKwj(i13, i12, i5) | 0;
 if (i7 | 0) __ZNSt3__211char_traitsIwE4copyEPwPKwj(i13 + (i5 << 2) | 0, i8, i7) | 0;
 i8 = i4 - i6 | 0;
 i4 = i8 - i5 | 0;
 if (i4 | 0) __ZNSt3__211char_traitsIwE4copyEPwPKwj(i13 + (i5 << 2) + (i7 << 2) | 0, i12 + (i5 << 2) + (i6 << 2) | 0, i4) | 0;
 if ((i2 | 0) != 1) __ZdlPv(i12);
 HEAP32[i1 >> 2] = i13;
 HEAP32[i11 >> 2] = i15 | -2147483648;
 i15 = i8 + i7 | 0;
 HEAP32[i1 + 4 >> 2] = i15;
 HEAP32[i10 >> 2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw(i13 + (i15 << 2) | 0, i10);
 STACKTOP = i9;
 return;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224);
 i7 = i1 + 8 | 0;
 i8 = i1;
 i9 = i1 + 200 | 0;
 i10 = i1 + 28 | 0;
 i11 = i1 + 24 | 0;
 i12 = i1 + 16 | 0;
 i13 = i1 + 20 | 0;
 i14 = i8;
 HEAP32[i14 >> 2] = 37;
 HEAP32[i14 + 4 >> 2] = 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj(i8 + 1 | 0, 70714, 0, HEAP32[i3 + 4 >> 2] | 0);
 i14 = __ZNSt3__26__clocEv() | 0;
 i15 = i7;
 HEAP32[i15 >> 2] = i5;
 HEAP32[i15 + 4 >> 2] = i6;
 i6 = i9 + (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz(i9, 23, i14, i8, i7) | 0) | 0;
 i8 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i9, i6, i3) | 0;
 __ZNKSt3__28ios_base6getlocEv(i7, i3);
 __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE(i9, i8, i6, i10, i11, i12, i7);
 __ZNSt3__26localeD2Ev(i7);
 HEAP32[i13 >> 2] = HEAP32[i2 >> 2];
 i2 = HEAP32[i11 >> 2] | 0;
 i11 = HEAP32[i12 >> 2] | 0;
 HEAP32[i7 >> 2] = HEAP32[i13 >> 2];
 i13 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i7, i10, i2, i11, i3, i4) | 0;
 STACKTOP = i1;
 return i13 | 0;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224);
 i7 = i1 + 8 | 0;
 i8 = i1;
 i9 = i1 + 200 | 0;
 i10 = i1 + 28 | 0;
 i11 = i1 + 24 | 0;
 i12 = i1 + 16 | 0;
 i13 = i1 + 20 | 0;
 i14 = i8;
 HEAP32[i14 >> 2] = 37;
 HEAP32[i14 + 4 >> 2] = 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj(i8 + 1 | 0, 70714, 1, HEAP32[i3 + 4 >> 2] | 0);
 i14 = __ZNSt3__26__clocEv() | 0;
 i15 = i7;
 HEAP32[i15 >> 2] = i5;
 HEAP32[i15 + 4 >> 2] = i6;
 i6 = i9 + (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz(i9, 23, i14, i8, i7) | 0) | 0;
 i8 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i9, i6, i3) | 0;
 __ZNKSt3__28ios_base6getlocEv(i7, i3);
 __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE(i9, i8, i6, i10, i11, i12, i7);
 __ZNSt3__26localeD2Ev(i7);
 HEAP32[i13 >> 2] = HEAP32[i2 >> 2];
 i2 = HEAP32[i11 >> 2] | 0;
 i11 = HEAP32[i12 >> 2] | 0;
 HEAP32[i7 >> 2] = HEAP32[i13 >> 2];
 i13 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i7, i10, i2, i11, i3, i4) | 0;
 STACKTOP = i1;
 return i13 | 0;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 i7 = i1 + 8 | 0;
 i8 = i1;
 i9 = i1 + 71 | 0;
 i10 = i1 + 28 | 0;
 i11 = i1 + 24 | 0;
 i12 = i1 + 16 | 0;
 i13 = i1 + 20 | 0;
 i14 = i8;
 HEAP32[i14 >> 2] = 37;
 HEAP32[i14 + 4 >> 2] = 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj(i8 + 1 | 0, 70714, 0, HEAP32[i3 + 4 >> 2] | 0);
 i14 = __ZNSt3__26__clocEv() | 0;
 i15 = i7;
 HEAP32[i15 >> 2] = i5;
 HEAP32[i15 + 4 >> 2] = i6;
 i6 = i9 + (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz(i9, 23, i14, i8, i7) | 0) | 0;
 i8 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i9, i6, i3) | 0;
 __ZNKSt3__28ios_base6getlocEv(i7, i3);
 __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE(i9, i8, i6, i10, i11, i12, i7);
 __ZNSt3__26localeD2Ev(i7);
 HEAP32[i13 >> 2] = HEAP32[i2 >> 2];
 i2 = HEAP32[i11 >> 2] | 0;
 i11 = HEAP32[i12 >> 2] | 0;
 HEAP32[i7 >> 2] = HEAP32[i13 >> 2];
 i13 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i7, i10, i2, i11, i3, i4) | 0;
 STACKTOP = i1;
 return i13 | 0;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 i7 = i1 + 8 | 0;
 i8 = i1;
 i9 = i1 + 71 | 0;
 i10 = i1 + 28 | 0;
 i11 = i1 + 24 | 0;
 i12 = i1 + 16 | 0;
 i13 = i1 + 20 | 0;
 i14 = i8;
 HEAP32[i14 >> 2] = 37;
 HEAP32[i14 + 4 >> 2] = 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj(i8 + 1 | 0, 70714, 1, HEAP32[i3 + 4 >> 2] | 0);
 i14 = __ZNSt3__26__clocEv() | 0;
 i15 = i7;
 HEAP32[i15 >> 2] = i5;
 HEAP32[i15 + 4 >> 2] = i6;
 i6 = i9 + (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz(i9, 23, i14, i8, i7) | 0) | 0;
 i8 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i9, i6, i3) | 0;
 __ZNKSt3__28ios_base6getlocEv(i7, i3);
 __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE(i9, i8, i6, i10, i11, i12, i7);
 __ZNSt3__26localeD2Ev(i7);
 HEAP32[i13 >> 2] = HEAP32[i2 >> 2];
 i2 = HEAP32[i11 >> 2] | 0;
 i11 = HEAP32[i12 >> 2] | 0;
 HEAP32[i7 >> 2] = HEAP32[i13 >> 2];
 i13 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i7, i10, i2, i11, i3, i4) | 0;
 STACKTOP = i1;
 return i13 | 0;
}

function __ZN5ImGui16BeginMainMenuBarEv() {
 var i1 = 0, i2 = 0, i3 = 0, f4 = f0, f5 = f0, f6 = f0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i1;
 i3 = HEAP32[1460598] | 0;
 f4 = Math_fround(HEAPF32[i3 + 5492 >> 2]);
 f5 = Math_fround(HEAPF32[i3 + 5412 >> 2]);
 f6 = Math_fround(f4 - f5);
 i7 = f6 >= Math_fround(0.0);
 f4 = i7 ? f6 : Math_fround(0.0);
 i7 = i3 + 6628 | 0;
 HEAP32[i7 >> 2] = HEAP32[i3 + 5488 >> 2];
 i8 = i3 + 6632 | 0;
 HEAPF32[i8 >> 2] = f4;
 i9 = i3 + 6564 | 0;
 HEAP32[i9 >> 2] = 0;
 HEAP32[i9 + 4 >> 2] = 0;
 HEAP32[i9 + 8 >> 2] = 0;
 HEAP32[i9 + 12 >> 2] = 0;
 HEAP32[i3 + 6536 >> 2] = 1;
 f6 = Math_fround(Math_fround(f4 + Math_fround(HEAPF32[i3 + 6188 >> 2])) + f5);
 HEAP32[i3 + 6580 >> 2] = HEAP32[i3 + 12 >> 2];
 HEAPF32[i3 + 6584 >> 2] = f6;
 HEAP32[i3 + 6540 >> 2] = 1;
 __ZN5ImGui12PushStyleVarEif(2, Math_fround(0.0));
 HEAPF32[i2 >> 2] = Math_fround(0.0);
 HEAPF32[i2 + 4 >> 2] = Math_fround(0.0);
 __ZN5ImGui12PushStyleVarEiRK6ImVec2(4, i2);
 if (__ZN5ImGui5BeginEPKcPbi(37925, 0, 1295) | 0) {
  i2 = __ZN5ImGui12BeginMenuBarEv() | 0;
  __ZN5ImGui11PopStyleVarEi(2);
  HEAP32[i7 >> 2] = 0;
  HEAP32[i8 >> 2] = 0;
  if (i2) {
   i10 = 1;
   STACKTOP = i1;
   return i10 | 0;
  }
 } else {
  __ZN5ImGui11PopStyleVarEi(2);
  HEAP32[i7 >> 2] = 0;
  HEAP32[i8 >> 2] = 0;
 }
 __ZN5ImGui3EndEv();
 i10 = 0;
 STACKTOP = i1;
 return i10 | 0;
}

function _decode_gamma(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i4 = 0;
 if ((i3 | 0) == 3) i5 = HEAP32[i1 + 32 >> 2] | 0; else i5 = i3;
 L4 : do if (!i5) {
  i3 = HEAP32[(HEAP32[HEAP32[HEAP32[i1 >> 2] >> 2] >> 2] | 0) + 824 >> 2] | 0;
  if (!(_png_gamma_significant(i3) | 0)) {
   HEAP32[i1 + 32 >> 2] = 4;
   i4 = 16;
   break;
  }
  do if ((i3 | 0) < 1e5) {
   if (!i3) i6 = i1 + 32 | 0; else {
    i7 = i1 + 32 | 0;
    if (!(_png_gamma_significant(((i3 * 11 | 0) + 2 | 0) / 5 | 0) | 0)) i6 = i7; else {
     i8 = i7;
     break;
    }
   }
   HEAP32[i6 >> 2] = 1;
   i4 = 15;
   break L4;
  } else i8 = i1 + 32 | 0; while (0);
  HEAP32[i8 >> 2] = 3;
  i7 = _png_reciprocal(i3) | 0;
  HEAP32[i1 + 36 >> 2] = i7;
  i9 = HEAP32[i8 >> 2] | 0;
  i4 = 13;
 } else {
  i9 = i5;
  i4 = 13;
 } while (0);
 L17 : do if ((i4 | 0) == 13) switch (i9 | 0) {
 case 1:
  {
   i4 = 15;
   break L17;
   break;
  }
 case 4:
  {
   i4 = 16;
   break L17;
   break;
  }
 case 3:
  {
   i10 = (_png_gamma_16bit_correct(i2 * 257 | 0, HEAP32[i1 + 36 >> 2] | 0) | 0) & 65535;
   return i10 | 0;
  }
 case 2:
  {
   i10 = i2;
   return i10 | 0;
  }
 default:
  _png_error(HEAP32[HEAP32[HEAP32[i1 >> 2] >> 2] >> 2] | 0, 66456);
 } while (0);
 if ((i4 | 0) == 15) {
  i10 = HEAPU16[21338 + (i2 << 1) >> 1] | 0;
  return i10 | 0;
 } else if ((i4 | 0) == 16) {
  i10 = i2 * 257 | 0;
  return i10 | 0;
 }
 return 0;
}

function __ZL30SettingsHandlerWindow_ReadLineP12ImGuiContextP20ImGuiSettingsHandlerPvPKc(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, f10 = f0, f11 = f0, i12 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i1 = i2 + 16 | 0;
 i5 = i2 + 8 | 0;
 i6 = i2;
 i7 = i2 + 28 | 0;
 i8 = i2 + 24 | 0;
 i9 = i2 + 20 | 0;
 HEAP32[i6 >> 2] = i7;
 HEAP32[i6 + 4 >> 2] = i8;
 if ((_sscanf(i4, 34968, i6) | 0) == 2) {
  i6 = HEAP32[i8 >> 2] | 0;
  HEAP32[i3 + 8 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i3 + 12 >> 2] = i6;
  STACKTOP = i2;
  return;
 }
 HEAP32[i5 >> 2] = i7;
 HEAP32[i5 + 4 >> 2] = i8;
 if ((_sscanf(i4, 34978, i5) | 0) == 2) {
  i6 = HEAP32[i7 >> 2] | 0;
  f10 = Math_fround(HEAPF32[i8 >> 2]);
  HEAP32[i5 >> 2] = i6;
  HEAPF32[i5 + 4 >> 2] = f10;
  i8 = HEAP32[1460598] | 0;
  i7 = i8 + 5376 | 0;
  f11 = (HEAP32[tempDoublePtr >> 2] = i6, Math_fround(HEAPF32[tempDoublePtr >> 2]));
  i6 = Math_fround(HEAPF32[i7 >> 2]) <= f11;
  i12 = f10 >= Math_fround(HEAPF32[i8 + 5380 >> 2]);
  i8 = HEAP32[(i12 ? i5 : i7) + 4 >> 2] | 0;
  i12 = i3 + 16 | 0;
  HEAP32[i12 >> 2] = HEAP32[(i6 ? i5 : i7) >> 2];
  HEAP32[i12 + 4 >> 2] = i8;
  STACKTOP = i2;
  return;
 }
 HEAP32[i1 >> 2] = i9;
 if ((_sscanf(i4, 34989, i1) | 0) != 1) {
  STACKTOP = i2;
  return;
 }
 HEAP8[i3 + 24 >> 0] = (HEAP32[i9 >> 2] | 0) != 0 & 1;
 STACKTOP = i2;
 return;
}

function __ZN5ImGui13IsItemHoveredEi(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = HEAP32[1460598] | 0;
 i3 = HEAP32[i2 + 6392 >> 2] | 0;
 if (HEAP8[i2 + 6731 >> 0] | 0) if (!(HEAP8[i2 + 6730 >> 0] | 0)) {
  i4 = HEAP32[i2 + 6648 >> 2] | 0;
  if (!i4) {
   i5 = 0;
   return i5 | 0;
  }
  i5 = (i4 | 0) == (HEAP32[i3 + 256 >> 2] | 0);
  return i5 | 0;
 }
 if (!(HEAP32[i3 + 260 >> 2] & 1)) {
  i5 = 0;
  return i5 | 0;
 }
 if (i1 & 3 | 0) ___assert_fail(33456, 31803, 2645, 33535);
 i4 = HEAP32[i3 + 756 >> 2] | 0;
 if ((i1 & 64 | 0) == 0 ? (HEAP32[i2 + 6400 >> 2] | 0) != (i4 | 0) : 0) {
  i5 = 0;
  return i5 | 0;
 }
 if (!(i1 & 32)) {
  i6 = HEAP32[i2 + 6420 >> 2] | 0;
  if (i6 | 0) if ((i6 | 0) != (HEAP32[i3 + 256 >> 2] | 0)) if (!(HEAP8[i2 + 6434 >> 0] | 0)) if ((i6 | 0) != (HEAP32[i3 + 76 >> 2] | 0)) {
   i5 = 0;
   return i5 | 0;
  }
 }
 i6 = HEAP32[i2 + 6644 >> 2] | 0;
 if (i6 | 0) {
  i2 = HEAP32[i6 + 756 >> 2] | 0;
  if (i2 | 0) if (!((HEAP8[i2 + 119 >> 0] | 0) == 0 | (i2 | 0) == (i4 | 0))) {
   i4 = HEAP32[i2 + 8 >> 2] | 0;
   if (i4 & 134217728 | 0) {
    i5 = 0;
    return i5 | 0;
   }
   if ((i1 & 8 | 0) == 0 & (i4 & 67108864 | 0) != 0) {
    i5 = 0;
    return i5 | 0;
   }
  }
 }
 if (HEAP32[i3 + 352 >> 2] & 4 | 0) {
  i5 = 0;
  return i5 | 0;
 }
 if ((HEAP32[i3 + 256 >> 2] | 0) == (HEAP32[i3 + 76 >> 2] | 0)) if (HEAP8[i3 + 120 >> 0] | 0) {
  i5 = 0;
  return i5 | 0;
 }
 i5 = 1;
 return i5 | 0;
}

function __ZN5ImGui13PushItemWidthEf(f1) {
 f1 = Math_fround(f1);
 var i2 = 0, f3 = f0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i2 = HEAP32[(HEAP32[1460598] | 0) + 6392 >> 2] | 0;
 HEAP8[i2 + 120 >> 0] = 1;
 if (f1 == Math_fround(0.0)) f3 = Math_fround(HEAPF32[i2 + 548 >> 2]); else f3 = f1;
 i4 = i2 + 356 | 0;
 HEAPF32[i4 >> 2] = f3;
 i5 = i2 + 376 | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 i7 = i2 + 380 | 0;
 i8 = (HEAPF32[tempDoublePtr >> 2] = f3, HEAP32[tempDoublePtr >> 2] | 0);
 if ((i6 | 0) == (HEAP32[i7 >> 2] | 0)) {
  i9 = i6 + 1 | 0;
  if (!i6) i10 = 8; else i10 = ((i6 | 0) / 2 | 0) + i6 | 0;
  i11 = (i10 | 0) > (i9 | 0) ? i10 : i9;
  if ((i6 | 0) < (i11 | 0)) {
   HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
   i9 = __ZL13MallocWrapperjPv(i11 << 2, 0) | 0;
   i10 = i2 + 384 | 0;
   i12 = HEAP32[i10 >> 2] | 0;
   if (!i12) i13 = i10; else {
    _memcpy(i9 | 0, i12 | 0, HEAP32[i5 >> 2] << 2 | 0) | 0;
    i12 = HEAP32[i10 >> 2] | 0;
    if (i12 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
    __ZL11FreeWrapperPvS_(i12, 0);
    i13 = i10;
   }
   HEAP32[i13 >> 2] = i9;
   HEAP32[i7 >> 2] = i11;
   i14 = HEAP32[i5 >> 2] | 0;
   i15 = HEAP32[i4 >> 2] | 0;
  } else {
   i14 = i6;
   i15 = i8;
  }
 } else {
  i14 = i6;
  i15 = i8;
 }
 HEAP32[(HEAP32[i2 + 384 >> 2] | 0) + (i14 << 2) >> 2] = i15;
 HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 return;
}

function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEEC2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i2;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev(i1);
 HEAP32[i1 >> 2] = 3840;
 HEAP32[i1 + 32 >> 2] = 0;
 HEAP32[i1 + 36 >> 2] = 0;
 HEAP32[i1 + 40 >> 2] = 0;
 i4 = i1 + 52 | 0;
 i5 = i1 + 68 | 0;
 i6 = i1 + 98 | 0;
 i7 = i4;
 i8 = i7 + 44 | 0;
 do {
  HEAP32[i7 >> 2] = 0;
  i7 = i7 + 4 | 0;
 } while ((i7 | 0) < (i8 | 0));
 HEAP16[i4 + 44 >> 1] = 0;
 HEAP8[i4 + 46 >> 0] = 0;
 i4 = i1 + 4 | 0;
 __ZNSt3__26localeC2ERKS0_(i3, i4);
 i7 = __ZNKSt3__26locale9has_facetERNS0_2idE(i3, 5846980) | 0;
 __ZNSt3__26localeD2Ev(i3);
 if (!i7) {
  i9 = HEAP32[i1 >> 2] | 0;
  i10 = i9 + 12 | 0;
  i11 = HEAP32[i10 >> 2] | 0;
  FUNCTION_TABLE_iiii[i11 & 31](i1, 0, 4096) | 0;
  STACKTOP = i2;
  return;
 }
 __ZNSt3__26localeC2ERKS0_(i3, i4);
 i4 = __ZNKSt3__26locale9use_facetERNS0_2idE(i3, 5846980) | 0;
 HEAP32[i5 >> 2] = i4;
 __ZNSt3__26localeD2Ev(i3);
 i3 = HEAP32[i5 >> 2] | 0;
 i5 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] & 127](i3) | 0) & 1;
 HEAP8[i6 >> 0] = i5;
 i9 = HEAP32[i1 >> 2] | 0;
 i10 = i9 + 12 | 0;
 i11 = HEAP32[i10 >> 2] | 0;
 FUNCTION_TABLE_iiii[i11 & 31](i1, 0, 4096) | 0;
 STACKTOP = i2;
 return;
}

function _png_destroy_read_struct(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 if (!i1) return;
 i4 = HEAP32[i1 >> 2] | 0;
 if (!i4) return;
 _png_destroy_info_struct(i4, i3);
 _png_destroy_info_struct(i4, i2);
 HEAP32[i1 >> 2] = 0;
 _png_destroy_gamma_table(i4);
 i1 = i4 + 728 | 0;
 _png_free(i4, HEAP32[i1 >> 2] | 0);
 HEAP32[i1 >> 2] = 0;
 i1 = i4 + 804 | 0;
 _png_free(i4, HEAP32[i1 >> 2] | 0);
 HEAP32[i1 >> 2] = 0;
 i1 = i4 + 788 | 0;
 _png_free(i4, HEAP32[i1 >> 2] | 0);
 HEAP32[i1 >> 2] = 0;
 i1 = i4 + 612 | 0;
 _png_free(i4, HEAP32[i1 >> 2] | 0);
 HEAP32[i1 >> 2] = 0;
 i1 = i4 + 616 | 0;
 _png_free(i4, HEAP32[i1 >> 2] | 0);
 HEAP32[i1 >> 2] = 0;
 i1 = i4 + 676 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (!(i2 & 4096)) i5 = i2; else {
  i2 = i4 + 416 | 0;
  _png_zfree(i4, HEAP32[i2 >> 2] | 0);
  HEAP32[i2 >> 2] = 0;
  i5 = HEAP32[i1 >> 2] | 0;
 }
 i2 = i5 & -4097;
 HEAP32[i1 >> 2] = i2;
 if (!(i5 & 8192)) i6 = i2; else {
  i2 = i4 + 528 | 0;
  _png_free(i4, HEAP32[i2 >> 2] | 0);
  HEAP32[i2 >> 2] = 0;
  i6 = HEAP32[i1 >> 2] | 0;
 }
 HEAP32[i1 >> 2] = i6 & -8193;
 _inflateEnd(i4 + 224 | 0) | 0;
 i6 = i4 + 568 | 0;
 _png_free(i4, HEAP32[i6 >> 2] | 0);
 HEAP32[i6 >> 2] = 0;
 i6 = i4 + 772 | 0;
 _png_free(i4, HEAP32[i6 >> 2] | 0);
 HEAP32[i6 >> 2] = 0;
 i6 = i4 + 696 | 0;
 _png_free(i4, HEAP32[i6 >> 2] | 0);
 HEAP32[i6 >> 2] = 0;
 _png_destroy_png_struct(i4);
 return;
}

function __ZN5ImGui12PushStyleVarEif(i1, f2) {
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 if (i1 >>> 0 >= 21) ___assert_fail(33560, 31803, 7017, 33598);
 if (!(1022925 >>> i1 & 1)) ___assert_fail(54909, 31803, 7033, 34224);
 i3 = HEAP32[1460598] | 0;
 i4 = i3 + 5356 + (HEAP32[3908 + (i1 * 12 | 0) + 8 >> 2] | 0) | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 i6 = i3 + 6488 | 0;
 i7 = HEAP32[i6 >> 2] | 0;
 i8 = i3 + 6492 | 0;
 if ((i7 | 0) == (HEAP32[i8 >> 2] | 0)) {
  i9 = i7 + 1 | 0;
  if (!i7) i10 = 8; else i10 = ((i7 | 0) / 2 | 0) + i7 | 0;
  i11 = (i10 | 0) > (i9 | 0) ? i10 : i9;
  if ((i7 | 0) < (i11 | 0)) {
   HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
   i9 = __ZL13MallocWrapperjPv(i11 * 12 | 0, 0) | 0;
   i10 = i3 + 6496 | 0;
   i12 = HEAP32[i10 >> 2] | 0;
   if (!i12) i13 = i10; else {
    _memcpy(i9 | 0, i12 | 0, (HEAP32[i6 >> 2] | 0) * 12 | 0) | 0;
    i12 = HEAP32[i10 >> 2] | 0;
    if (i12 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
    __ZL11FreeWrapperPvS_(i12, 0);
    i13 = i10;
   }
   HEAP32[i13 >> 2] = i9;
   HEAP32[i8 >> 2] = i11;
   i14 = HEAP32[i6 >> 2] | 0;
  } else i14 = i7;
 } else i14 = i7;
 i7 = HEAP32[i3 + 6496 >> 2] | 0;
 i3 = i7 + (i14 * 12 | 0) | 0;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i3 + 4 >> 2] = i5;
 HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 HEAPF32[i4 >> 2] = f2;
 return;
}

function __ZNSt3__26__treeINS_12__value_typeIP4MeshNS_4listIN11RenderQueue9TransformENS_9allocatorIS6_EEEEEENS_19__map_value_compareIS3_SA_NS_4lessIS3_EELb1EEENS7_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 if (!i2) return;
 __ZNSt3__26__treeINS_12__value_typeIP4MeshNS_4listIN11RenderQueue9TransformENS_9allocatorIS6_EEEEEENS_19__map_value_compareIS3_SA_NS_4lessIS3_EELb1EEENS7_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE(i1, HEAP32[i2 >> 2] | 0);
 __ZNSt3__26__treeINS_12__value_typeIP4MeshNS_4listIN11RenderQueue9TransformENS_9allocatorIS6_EEEEEENS_19__map_value_compareIS3_SA_NS_4lessIS3_EELb1EEENS7_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE(i1, HEAP32[i2 + 4 >> 2] | 0);
 i1 = i2 + 20 | 0;
 i3 = i2 + 28 | 0;
 if (HEAP32[i3 >> 2] | 0) {
  i4 = HEAP32[i2 + 24 >> 2] | 0;
  i5 = (HEAP32[i1 >> 2] | 0) + 4 | 0;
  i6 = HEAP32[i4 >> 2] | 0;
  HEAP32[i6 + 4 >> 2] = HEAP32[i5 >> 2];
  HEAP32[HEAP32[i5 >> 2] >> 2] = i6;
  HEAP32[i3 >> 2] = 0;
  if ((i4 | 0) != (i1 | 0)) {
   i3 = i4;
   do {
    i4 = i3;
    i3 = HEAP32[i3 + 4 >> 2] | 0;
    i6 = HEAP32[i4 + 88 >> 2] | 0;
    if (i6 | 0) {
     i5 = i4 + 92 | 0;
     i7 = HEAP32[i5 >> 2] | 0;
     if ((i7 | 0) != (i6 | 0)) HEAP32[i5 >> 2] = i7 + (~((i7 + -4 - i6 | 0) >>> 2) << 2);
     __ZdlPv(i6);
    }
    __ZdlPv(i4);
   } while ((i3 | 0) != (i1 | 0));
  }
 }
 __ZdlPv(i2);
 return;
}

function __ZN17ImDrawDataBuilder5ClearEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = i1 + 4 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if ((i3 | 0) < 0) {
  i4 = ((i3 | 0) / 2 | 0) + i3 | 0;
  i5 = (i4 | 0) > 0 ? i4 : 0;
  if ((i3 | 0) < (i5 | 0)) {
   HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
   i3 = __ZL13MallocWrapperjPv(i5 << 2, 0) | 0;
   i4 = i1 + 8 | 0;
   i6 = HEAP32[i4 >> 2] | 0;
   if (!i6) i7 = i4; else {
    _memcpy(i3 | 0, i6 | 0, HEAP32[i1 >> 2] << 2 | 0) | 0;
    i6 = HEAP32[i4 >> 2] | 0;
    if (i6 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
    __ZL11FreeWrapperPvS_(i6, 0);
    i7 = i4;
   }
   HEAP32[i7 >> 2] = i3;
   HEAP32[i2 >> 2] = i5;
  }
 }
 HEAP32[i1 >> 2] = 0;
 i5 = i1 + 12 | 0;
 i2 = i1 + 16 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if ((i3 | 0) >= 0) {
  HEAP32[i5 >> 2] = 0;
  return;
 }
 i7 = ((i3 | 0) / 2 | 0) + i3 | 0;
 i4 = (i7 | 0) > 0 ? i7 : 0;
 if ((i3 | 0) >= (i4 | 0)) {
  HEAP32[i5 >> 2] = 0;
  return;
 }
 HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
 i3 = __ZL13MallocWrapperjPv(i4 << 2, 0) | 0;
 i7 = i1 + 20 | 0;
 i1 = HEAP32[i7 >> 2] | 0;
 if (!i1) i8 = i7; else {
  _memcpy(i3 | 0, i1 | 0, HEAP32[i5 >> 2] << 2 | 0) | 0;
  i1 = HEAP32[i7 >> 2] | 0;
  if (i1 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
  __ZL11FreeWrapperPvS_(i1, 0);
  i8 = i7;
 }
 HEAP32[i8 >> 2] = i3;
 HEAP32[i2 >> 2] = i4;
 HEAP32[i5 >> 2] = 0;
 return;
}

function _png_destroy_write_struct(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 if (!i1) return;
 i3 = HEAP32[i1 >> 2] | 0;
 if (!i3) return;
 _png_destroy_info_struct(i3, i2);
 HEAP32[i1 >> 2] = 0;
 if (HEAP32[i3 + 212 >> 2] & 2 | 0) _deflateEnd(i3 + 224 | 0) | 0;
 _png_free_buffer_list(i3, i3 + 280 | 0);
 i1 = i3 + 384 | 0;
 _png_free(i3, HEAP32[i1 >> 2] | 0);
 HEAP32[i1 >> 2] = 0;
 i1 = i3 + 380 | 0;
 _png_free(i3, HEAP32[i1 >> 2] | 0);
 i2 = i3 + 388 | 0;
 _png_free(i3, HEAP32[i2 >> 2] | 0);
 _png_free(i3, HEAP32[i3 + 392 >> 2] | 0);
 _png_free(i3, HEAP32[i3 + 396 >> 2] | 0);
 _png_free(i3, HEAP32[i3 + 400 >> 2] | 0);
 HEAP32[i1 >> 2] = 0;
 HEAP8[i3 + 621 >> 0] = 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 HEAP32[i2 + 12 >> 2] = 0;
 HEAP8[i3 + 620 >> 0] = 1;
 i2 = i3 + 624 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if (i1 | 0) {
  HEAP32[i2 >> 2] = 0;
  _png_free(i3, i1);
 }
 i1 = i3 + 628 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i2 | 0) {
  HEAP32[i1 >> 2] = 0;
  _png_free(i3, i2);
 }
 i2 = i3 + 632 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if (i1 | 0) {
  HEAP32[i2 >> 2] = 0;
  _png_free(i3, i1);
 }
 i1 = i3 + 636 | 0;
 _png_free(i3, HEAP32[i1 >> 2] | 0);
 i2 = i3 + 640 | 0;
 _png_free(i3, HEAP32[i2 >> 2] | 0);
 HEAP32[i1 >> 2] = 0;
 HEAP32[i2 >> 2] = 0;
 i2 = i3 + 696 | 0;
 _png_free(i3, HEAP32[i2 >> 2] | 0);
 HEAP32[i2 >> 2] = 0;
 _png_destroy_png_struct(i3);
 return;
}

function __ZN5ImGui13ItemHoverableERK6ImRectj(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, f8 = f0, f9 = f0;
 i3 = HEAP32[1460598] | 0;
 i4 = i3 + 6404 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 if (!((i5 | 0) == 0 | (i5 | 0) == (i2 | 0))) if (!(HEAP8[i3 + 6408 >> 0] | 0)) {
  i6 = 0;
  return i6 | 0;
 }
 i5 = HEAP32[i3 + 6392 >> 2] | 0;
 if ((HEAP32[i3 + 6396 >> 2] | 0) != (i5 | 0)) {
  i6 = 0;
  return i6 | 0;
 }
 i7 = HEAP32[i3 + 6420 >> 2] | 0;
 if (!((i7 | 0) == 0 | (i7 | 0) == (i2 | 0))) if (!(HEAP8[i3 + 6434 >> 0] | 0)) {
  i6 = 0;
  return i6 | 0;
 }
 if (!(__ZN5ImGui19IsMouseHoveringRectERK6ImVec2S2_b(i1, i1 + 8 | 0, 1) | 0)) {
  i6 = 0;
  return i6 | 0;
 }
 if (HEAP8[i3 + 6731 >> 0] | 0) {
  i6 = 0;
  return i6 | 0;
 }
 i1 = HEAP32[i3 + 6644 >> 2] | 0;
 if (i1 | 0) {
  i7 = HEAP32[i1 + 756 >> 2] | 0;
  if (i7 | 0) if (HEAP8[i7 + 119 >> 0] | 0) if ((i7 | 0) != (HEAP32[i5 + 756 >> 2] | 0)) if (HEAP32[i7 + 8 >> 2] & 201326592 | 0) {
   i6 = 0;
   return i6 | 0;
  }
 }
 if (HEAP32[i5 + 352 >> 2] & 4 | 0) {
  i6 = 0;
  return i6 | 0;
 }
 HEAP32[i4 >> 2] = i2;
 HEAP8[i3 + 6408 >> 0] = 0;
 if (!i2) f8 = Math_fround(0.0); else if ((HEAP32[i3 + 6412 >> 2] | 0) == (i2 | 0)) {
  f9 = Math_fround(HEAPF32[i3 + 6416 >> 2]);
  f8 = Math_fround(f9 + Math_fround(HEAPF32[i3 + 20 >> 2]));
 } else f8 = Math_fround(0.0);
 HEAPF32[i3 + 6416 >> 2] = f8;
 i6 = 1;
 return i6 | 0;
}

function __ZL16stbtt__get_subrs10stbtt__bufS_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i5 = i4 + 20 | 0;
 i6 = i4;
 i7 = i4 + 8 | 0;
 HEAP32[i5 >> 2] = 0;
 i8 = i6;
 HEAP32[i8 >> 2] = 0;
 HEAP32[i8 + 4 >> 2] = 0;
 __ZL20stbtt__dict_get_intsP10stbtt__bufiiPj(i3, 18, 2, i6);
 i3 = HEAP32[i6 + 4 >> 2] | 0;
 i8 = HEAP32[i6 >> 2] | 0;
 if ((i3 | 0) == 0 | (i8 | 0) == 0) {
  HEAP32[i1 >> 2] = 0;
  HEAP32[i1 + 8 >> 2] = 0;
  HEAP32[i1 + 4 >> 2] = 0;
  STACKTOP = i4;
  return;
 }
 if ((i8 | i3 | 0) < 0) {
  i9 = 0;
  i10 = 0;
 } else {
  i6 = HEAP32[i2 + 8 >> 2] | 0;
  if ((i6 | 0) < (i3 | 0) | (i6 - i3 | 0) < (i8 | 0)) {
   i9 = 0;
   i10 = 0;
  } else {
   i9 = (HEAP32[i2 >> 2] | 0) + i3 | 0;
   i10 = i8;
  }
 }
 HEAP32[i7 >> 2] = i9;
 HEAP32[i7 + 4 >> 2] = 0;
 HEAP32[i7 + 8 >> 2] = i10;
 __ZL20stbtt__dict_get_intsP10stbtt__bufiiPj(i7, 19, 1, i5);
 i7 = HEAP32[i5 >> 2] | 0;
 if (!i7) {
  HEAP32[i1 >> 2] = 0;
  HEAP32[i1 + 8 >> 2] = 0;
  HEAP32[i1 + 4 >> 2] = 0;
  STACKTOP = i4;
  return;
 }
 i5 = i3 + i7 | 0;
 if ((i5 | 0) < 0 ? 1 : (HEAP32[i2 + 8 >> 2] | 0) < (i5 | 0)) ___assert_fail(50765, 50789, 1116, 50855);
 HEAP32[i2 + 4 >> 2] = i5;
 __ZL20stbtt__cff_get_indexP10stbtt__buf(i1, i2);
 STACKTOP = i4;
 return;
}

function __ZN5ImGui21ClosePopupsOverWindowEP11ImGuiWindow(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i2 = 0;
 i3 = HEAP32[1460598] | 0;
 i4 = HEAP32[i3 + 6512 >> 2] | 0;
 if (!i4) return;
 L4 : do if ((i1 | 0) != 0 & (i4 | 0) > 0) {
  i5 = HEAP32[i3 + 6520 >> 2] | 0;
  i6 = i1 + 756 | 0;
  i7 = 0;
  L6 : while (1) {
   i8 = HEAP32[i5 + (i7 * 36 | 0) + 4 >> 2] | 0;
   if (i8 | 0) {
    i9 = HEAP32[i8 + 8 >> 2] | 0;
    if (!(i9 & 67108864)) {
     i2 = 6;
     break;
    }
    if (!(i9 & 16777216)) {
     if ((i7 | 0) < (i4 | 0)) {
      i10 = i7;
      i11 = 1;
     } else {
      i12 = i7;
      break L4;
     }
     do {
      if (!i11) {
       i2 = 11;
       break L6;
      }
      i9 = HEAP32[i5 + (i10 * 36 | 0) + 4 >> 2] | 0;
      if (!i9) i13 = 0; else i13 = (HEAP32[i9 + 756 >> 2] | 0) == (HEAP32[i6 >> 2] | 0);
      i10 = i10 + 1 | 0;
      i11 = (i10 | 0) < (i4 | 0);
     } while (!(i13 | i11 ^ 1));
     if (!i13) {
      i12 = i7;
      break L4;
     }
    }
   }
   i9 = i7 + 1 | 0;
   if ((i9 | 0) < (i4 | 0)) i7 = i9; else {
    i12 = i9;
    break L4;
   }
  }
  if ((i2 | 0) == 6) ___assert_fail(36839, 31803, 5191, 36891); else if ((i2 | 0) == 11) ___assert_fail(56841, 56850, 1235, 56909);
 } else i12 = 0; while (0);
 if ((i12 | 0) >= (i4 | 0)) return;
 __ZL17ClosePopupToLeveli(i12);
 return;
}

function __ZN5ImGui12BeginPopupExEji(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i4 = i3 + 8 | 0;
 i5 = i3;
 i6 = i3 + 12 | 0;
 i7 = HEAP32[1460598] | 0;
 i8 = HEAP32[i7 + 6524 >> 2] | 0;
 if ((HEAP32[i7 + 6512 >> 2] | 0) > (i8 | 0)) if ((HEAP32[(HEAP32[i7 + 6520 >> 2] | 0) + (i8 * 36 | 0) >> 2] | 0) == (i1 | 0)) {
  if (!(i2 & 268435456)) {
   HEAP32[i4 >> 2] = i1;
   __Z14ImFormatStringPcjPKcz(i6, 20, 37681, i4) | 0;
  } else {
   HEAP32[i5 >> 2] = i8;
   __Z14ImFormatStringPcjPKcz(i6, 20, 37669, i5) | 0;
  }
  i5 = __ZN5ImGui5BeginEPKcPbi(i6, 0, i2 | 67108864) | 0;
  do if (!i5) {
   i2 = HEAP32[1460598] | 0;
   i6 = HEAP32[i2 + 6392 >> 2] | 0;
   if (!(HEAP32[i6 + 8 >> 2] & 67108864)) ___assert_fail(37694, 31803, 5372, 37742);
   if ((HEAP32[i2 + 6524 >> 2] | 0) > 0) {
    __ZN5ImGui25NavMoveRequestTryWrappingEP11ImGuiWindowi(i6, 2);
    __ZN5ImGui3EndEv();
    break;
   } else ___assert_fail(37751, 31803, 5373, 37742);
  } while (0);
  i9 = i5;
  STACKTOP = i3;
  return i9 | 0;
 }
 i5 = i7 + 6536 | 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 + 8 >> 2] = 0;
 HEAP32[i5 + 12 >> 2] = 0;
 HEAP32[i5 + 16 >> 2] = 0;
 HEAP32[i5 + 20 >> 2] = 0;
 HEAP32[i5 + 24 >> 2] = 0;
 i9 = 0;
 STACKTOP = i3;
 return i9 | 0;
}

function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i6 = HEAP32[i2 + 68 >> 2] | 0;
 if (!i6) {
  i7 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev(i7);
  ___cxa_throw(i7 | 0, 3152, 123);
 }
 i7 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 24 >> 2] & 127](i6) | 0;
 i6 = i2 + 64 | 0;
 if (!(HEAP32[i6 >> 2] | 0)) {
  i8 = 0;
  i9 = 0;
  i10 = -1;
  i11 = -1;
 } else if (((i3 | 0) != 0 | (i4 | 0) != 0) & (i7 | 0) < 1) {
  i8 = 0;
  i9 = 0;
  i10 = -1;
  i11 = -1;
 } else if (i5 >>> 0 < 3 & (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 127](i2) | 0) == 0) {
  i12 = HEAP32[i6 >> 2] | 0;
  i13 = ___muldi3(i7 | 0, ((i7 | 0) < 0) << 31 >> 31 | 0, i3 | 0, i4 | 0) | 0;
  if (!(___fseeko(i12, (i7 | 0) > 0 ? i13 : 0, i5) | 0)) {
   i5 = ___ftello(HEAP32[i6 >> 2] | 0) | 0;
   i6 = i2 + 72 | 0;
   i8 = HEAP32[i6 >> 2] | 0;
   i9 = HEAP32[i6 + 4 >> 2] | 0;
   i10 = i5;
   i11 = ((i5 | 0) < 0) << 31 >> 31;
  } else {
   i8 = 0;
   i9 = 0;
   i10 = -1;
   i11 = -1;
  }
 } else {
  i8 = 0;
  i9 = 0;
  i10 = -1;
  i11 = -1;
 }
 i5 = i1;
 HEAP32[i5 >> 2] = i8;
 HEAP32[i5 + 4 >> 2] = i9;
 i9 = i1 + 8 | 0;
 HEAP32[i9 >> 2] = i10;
 HEAP32[i9 + 4 >> 2] = i11;
 return;
}

function _png_inflate_read(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i7 = 0;
 if ((HEAP32[i1 + 220 >> 2] | 0) != (HEAP32[i1 + 376 >> 2] | 0)) {
  HEAP32[i1 + 248 >> 2] = 61107;
  return;
 }
 i8 = i1 + 224 | 0;
 HEAP32[i1 + 236 >> 2] = i4;
 i4 = i1 + 240 | 0;
 HEAP32[i4 >> 2] = 0;
 i9 = i1 + 228 | 0;
 i10 = i6 | 0 ? 4 : 2;
 i6 = 1024;
 while (1) {
  if (!(HEAP32[i9 >> 2] | 0)) {
   i11 = HEAP32[i3 >> 2] | 0;
   i12 = i6 >>> 0 > i11 >>> 0 ? i11 : i6;
   HEAP32[i3 >> 2] = i11 - i12;
   if (i12 | 0) {
    _png_read_data(i1, i2, i12);
    _png_calculate_crc(i1, i2, i12);
   }
   HEAP32[i8 >> 2] = i2;
   HEAP32[i9 >> 2] = i12;
   i13 = i12;
  } else i13 = i6;
  if (!(HEAP32[i4 >> 2] | 0)) {
   i12 = HEAP32[i5 >> 2] | 0;
   HEAP32[i5 >> 2] = 0;
   HEAP32[i4 >> 2] = i12;
  }
  i14 = _inflate(i8, (HEAP32[i3 >> 2] | 0) == 0 ? i10 : 0) | 0;
  if (i14 | 0) {
   i7 = 10;
   break;
  }
  if (HEAP32[i5 >> 2] | 0) {
   i6 = i13;
   continue;
  }
  if (!(HEAP32[i4 >> 2] | 0)) {
   i15 = 0;
   i16 = 0;
   i17 = 0;
   break;
  } else i6 = i13;
 }
 if ((i7 | 0) == 10) {
  i15 = i14;
  i16 = HEAP32[i4 >> 2] | 0;
  i17 = HEAP32[i5 >> 2] | 0;
 }
 HEAP32[i5 >> 2] = i17 + i16;
 HEAP32[i4 >> 2] = 0;
 _png_zstream_error(i1, i15);
 return;
}

function __ZN5ImGui11PopStyleVarEi(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i2 = 0;
 i3 = HEAP32[1460598] | 0;
 if ((i1 | 0) <= 0) return;
 i4 = i3 + 6488 | 0;
 i5 = i3 + 6496 | 0;
 i6 = i3 + 5356 | 0;
 i3 = i1;
 i1 = HEAP32[i4 >> 2] | 0;
 while (1) {
  if ((i1 | 0) <= 0) {
   i2 = 4;
   break;
  }
  i7 = HEAP32[i5 >> 2] | 0;
  i8 = i1 + -1 | 0;
  i9 = HEAP32[i7 + (i8 * 12 | 0) >> 2] | 0;
  if (i9 >>> 0 >= 21) {
   i2 = 6;
   break;
  }
  i10 = i6 + (HEAP32[3908 + (i9 * 12 | 0) + 8 >> 2] | 0) | 0;
  if (!(1022925 >>> i9 & 1)) if (!(1074226 >>> i9 & 1)) i11 = i1; else {
   i9 = i7 + (i8 * 12 | 0) | 0;
   HEAP32[i10 >> 2] = HEAP32[i9 + 4 >> 2];
   i12 = i9 + 8 | 0;
   i13 = i10 + 4 | 0;
   i2 = 11;
  } else {
   i12 = i7 + (i8 * 12 | 0) + 4 | 0;
   i13 = i10;
   i2 = 11;
  }
  if ((i2 | 0) == 11) {
   i2 = 0;
   HEAP32[i13 >> 2] = HEAP32[i12 >> 2];
   i10 = HEAP32[i4 >> 2] | 0;
   if ((i10 | 0) > 0) i11 = i10; else {
    i2 = 12;
    break;
   }
  }
  i1 = i11 + -1 | 0;
  HEAP32[i4 >> 2] = i1;
  if ((i3 | 0) <= 1) {
   i2 = 14;
   break;
  } else i3 = i3 + -1 | 0;
 }
 if ((i2 | 0) == 4) ___assert_fail(38278, 56850, 1245, 38287); else if ((i2 | 0) == 6) ___assert_fail(33560, 31803, 7017, 33598); else if ((i2 | 0) == 12) ___assert_fail(38278, 56850, 1268, 31920); else if ((i2 | 0) == 14) return;
}

function __ZN5ImGui14BeginTooltipExEib(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i4 = i3 + 8 | 0;
 i5 = i3;
 i6 = i3 + 16 | 0;
 i7 = (HEAP32[1460598] | 0) + 11016 | 0;
 HEAP32[i5 >> 2] = HEAP32[i7 >> 2];
 __Z14ImFormatStringPcjPKcz(i6, 16, 37559, i5) | 0;
 if (i2) {
  i2 = HEAP32[1460598] | 0;
  i5 = __Z6ImHashPKvij(i6, 0, 0) | 0;
  i8 = HEAP32[i2 + 6384 >> 2] | 0;
  i9 = HEAP32[i2 + 6376 >> 2] | 0;
  i2 = i9 << 3 >> 3;
  if (!i2) i10 = i8; else {
   i11 = i2;
   i2 = i8;
   while (1) {
    i12 = i11 >>> 1;
    i13 = i2 + (i12 << 3) | 0;
    i14 = (HEAP32[i13 >> 2] | 0) >>> 0 < i5 >>> 0;
    i11 = i14 ? i11 + -1 - i12 | 0 : i12;
    i12 = i14 ? i13 + 8 | 0 : i2;
    if (!i11) {
     i10 = i12;
     break;
    } else i2 = i12;
   }
  }
  if ((i10 | 0) != (i8 + (i9 << 3) | 0)) if ((HEAP32[i10 >> 2] | 0) == (i5 | 0)) {
   i5 = HEAP32[i10 + 4 >> 2] | 0;
   if (i5 | 0) if (HEAP8[i5 + 118 >> 0] | 0) {
    HEAP32[i5 + 164 >> 2] = 1;
    i5 = (HEAP32[i7 >> 2] | 0) + 1 | 0;
    HEAP32[i7 >> 2] = i5;
    HEAP32[i4 >> 2] = i5;
    __Z14ImFormatStringPcjPKcz(i6, 16, 37559, i4) | 0;
   }
  }
 }
 __ZN5ImGui5BeginEPKcPbi(i6, 0, i1 | 34341703) | 0;
 STACKTOP = i3;
 return;
}

function _png_set_tRNS(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0;
 if ((i1 | 0) == 0 | (i2 | 0) == 0) return;
 if (i3 | 0) {
  _png_free_data(i1, i2, 8192, 0);
  i6 = _png_malloc(i1, 256) | 0;
  HEAP32[i2 + 156 >> 2] = i6;
  HEAP32[i1 + 528 >> 2] = i6;
  if ((i4 + -1 | 0) >>> 0 < 256) _memcpy(i6 | 0, i3 | 0, i4 | 0) | 0;
 }
 if (!i5) {
  HEAP16[i2 + 22 >> 1] = i4;
  if (!i4) return;
 } else {
  i3 = HEAP8[i2 + 24 >> 0] | 0;
  L12 : do if ((i3 & 255) < 16) {
   i6 = 1 << (i3 & 255);
   switch (HEAP8[i2 + 25 >> 0] | 0) {
   case 0:
    {
     if ((i6 | 0) > (HEAPU16[i5 + 8 >> 1] | 0)) break L12;
     break;
    }
   case 2:
    {
     if ((i6 | 0) > (HEAPU16[i5 + 2 >> 1] | 0)) if ((i6 | 0) > (HEAPU16[i5 + 4 >> 1] | 0)) if ((i6 | 0) > (HEAPU16[i5 + 6 >> 1] | 0)) break L12;
     break;
    }
   default:
    break L12;
   }
   _png_warning(i1, 61229);
  } while (0);
  i1 = i2 + 160 | 0;
  HEAP16[i1 >> 1] = HEAP16[i5 >> 1] | 0;
  HEAP16[i1 + 2 >> 1] = HEAP16[i5 + 2 >> 1] | 0;
  HEAP16[i1 + 4 >> 1] = HEAP16[i5 + 4 >> 1] | 0;
  HEAP16[i1 + 6 >> 1] = HEAP16[i5 + 6 >> 1] | 0;
  HEAP16[i1 + 8 >> 1] = HEAP16[i5 + 8 >> 1] | 0;
  HEAP16[i2 + 22 >> 1] = (i4 | 0) == 0 ? 1 : i4 & 65535;
 }
 i4 = i2 + 8 | 0;
 HEAP32[i4 >> 2] = HEAP32[i4 >> 2] | 16;
 i4 = i2 + 232 | 0;
 HEAP32[i4 >> 2] = HEAP32[i4 >> 2] | 8192;
 return;
}

function __ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i5;
 if ((i1 | 0) == (i2 | 0)) {
  HEAP32[i3 >> 2] = 4;
  i7 = 0;
 } else {
  i8 = ___errno_location() | 0;
  i9 = HEAP32[i8 >> 2] | 0;
  i8 = ___errno_location() | 0;
  HEAP32[i8 >> 2] = 0;
  i8 = _strtoll_l(i1, i6, i4, __ZNSt3__26__clocEv() | 0) | 0;
  i4 = tempRet0;
  i1 = ___errno_location() | 0;
  i10 = HEAP32[i1 >> 2] | 0;
  if (!i10) {
   i1 = ___errno_location() | 0;
   HEAP32[i1 >> 2] = i9;
  }
  L7 : do if ((HEAP32[i6 >> 2] | 0) == (i2 | 0)) {
   do if ((i10 | 0) == 34) {
    HEAP32[i3 >> 2] = 4;
    if ((i4 | 0) > 0 | (i4 | 0) == 0 & i8 >>> 0 > 0) {
     i11 = 2147483647;
     break L7;
    }
   } else {
    if ((i4 | 0) < -1 | (i4 | 0) == -1 & i8 >>> 0 < 2147483648) {
     HEAP32[i3 >> 2] = 4;
     break;
    }
    if ((i4 | 0) > 0 | (i4 | 0) == 0 & i8 >>> 0 > 2147483647) {
     HEAP32[i3 >> 2] = 4;
     i11 = 2147483647;
     break L7;
    } else {
     i11 = i8;
     break L7;
    }
   } while (0);
   i11 = -2147483648;
  } else {
   HEAP32[i3 >> 2] = 4;
   i11 = 0;
  } while (0);
  i7 = i11;
 }
 STACKTOP = i5;
 return i7 | 0;
}

function _png_crc_finish(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 1024 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1024);
 i5 = i4;
 if (i2 | 0) if (!i1) {
  i6 = i2;
  do i6 = i6 - (i6 >>> 0 < 1024 ? i6 : 1024) | 0; while ((i6 | 0) != 0);
 } else {
  i6 = i2;
  do {
   i2 = i6 >>> 0 < 1024 ? i6 : 1024;
   i6 = i6 - i2 | 0;
   _png_read_data(i1, i5, i2);
   _png_calculate_crc(i1, i5, i2);
  } while ((i6 | 0) != 0);
 }
 i6 = i1 + 376 | 0;
 i2 = i1 + 212 | 0;
 i7 = HEAP32[i2 >> 2] | 0;
 if (!(HEAP32[i6 >> 2] & 536870912)) {
  HEAP32[i1 + 800 >> 2] = 129;
  _png_read_data(i1, i5, 4);
  if (i7 & 2048 | 0) i3 = 8;
 } else {
  HEAP32[i1 + 800 >> 2] = 129;
  _png_read_data(i1, i5, 4);
  if ((i7 & 768 | 0) == 768) i3 = 8;
 }
 if ((i3 | 0) == 8) {
  i8 = 0;
  STACKTOP = i4;
  return i8 | 0;
 }
 if (((HEAPU8[i5 + 1 >> 0] | 0) << 16 | (HEAPU8[i5 >> 0] | 0) << 24 | (HEAPU8[i5 + 2 >> 0] | 0) << 8 | (HEAPU8[i5 + 3 >> 0] | 0) | 0) == (HEAP32[i1 + 412 >> 2] | 0)) {
  i8 = 0;
  STACKTOP = i4;
  return i8 | 0;
 }
 i5 = HEAP32[i2 >> 2] | 0;
 if (!(HEAP32[i6 >> 2] & 536870912)) {
  if (!(i5 & 1024)) _png_chunk_error(i1, 61146);
 } else if (i5 & 512 | 0) _png_chunk_error(i1, 61146);
 _png_chunk_warning(i1, 61146);
 i8 = 1;
 STACKTOP = i4;
 return i8 | 0;
}

function _deflateEnd(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 if (!i1) {
  i2 = -2;
  return i2 | 0;
 }
 i3 = i1 + 28 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 if (!i4) {
  i2 = -2;
  return i2 | 0;
 }
 i5 = HEAP32[i4 + 4 >> 2] | 0;
 switch (i5 | 0) {
 case 42:
 case 69:
 case 73:
 case 91:
 case 103:
 case 113:
 case 666:
  break;
 default:
  {
   i2 = -2;
   return i2 | 0;
  }
 }
 i6 = HEAP32[i4 + 8 >> 2] | 0;
 if (!i6) i7 = i4; else {
  FUNCTION_TABLE_vii[HEAP32[i1 + 36 >> 2] & 63](HEAP32[i1 + 40 >> 2] | 0, i6);
  i7 = HEAP32[i3 >> 2] | 0;
 }
 i6 = HEAP32[i7 + 68 >> 2] | 0;
 if (!i6) i8 = i7; else {
  FUNCTION_TABLE_vii[HEAP32[i1 + 36 >> 2] & 63](HEAP32[i1 + 40 >> 2] | 0, i6);
  i8 = HEAP32[i3 >> 2] | 0;
 }
 i6 = HEAP32[i8 + 64 >> 2] | 0;
 if (!i6) i9 = i8; else {
  FUNCTION_TABLE_vii[HEAP32[i1 + 36 >> 2] & 63](HEAP32[i1 + 40 >> 2] | 0, i6);
  i9 = HEAP32[i3 >> 2] | 0;
 }
 i6 = HEAP32[i9 + 56 >> 2] | 0;
 if (!i6) {
  i10 = i1 + 40 | 0;
  i11 = i1 + 36 | 0;
  i12 = i9;
 } else {
  i9 = i1 + 36 | 0;
  i8 = i1 + 40 | 0;
  FUNCTION_TABLE_vii[HEAP32[i9 >> 2] & 63](HEAP32[i8 >> 2] | 0, i6);
  i10 = i8;
  i11 = i9;
  i12 = HEAP32[i3 >> 2] | 0;
 }
 FUNCTION_TABLE_vii[HEAP32[i11 >> 2] & 63](HEAP32[i10 >> 2] | 0, i12);
 HEAP32[i3 >> 2] = 0;
 i2 = (i5 | 0) == 113 ? -3 : 0;
 return i2 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i10 = i9;
 if ((-18 - i2 | 0) >>> 0 < i3 >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i1);
 if ((HEAP8[i1 + 11 >> 0] | 0) < 0) i11 = HEAP32[i1 >> 2] | 0; else i11 = i1;
 if (i2 >>> 0 < 2147483623) {
  i12 = i3 + i2 | 0;
  i3 = i2 << 1;
  i13 = i12 >>> 0 < i3 >>> 0 ? i3 : i12;
  i14 = i13 >>> 0 < 11 ? 11 : i13 + 16 & -16;
 } else i14 = -17;
 i13 = __Znwj(i14) | 0;
 if (i5 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcj(i13, i11, i5) | 0;
 if (i7 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcj(i13 + i5 | 0, i8, i7) | 0;
 i8 = i4 - i6 | 0;
 i4 = i8 - i5 | 0;
 if (i4 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcj(i13 + i5 + i7 | 0, i11 + i5 + i6 | 0, i4) | 0;
 if ((i2 | 0) != 10) __ZdlPv(i11);
 HEAP32[i1 >> 2] = i13;
 HEAP32[i1 + 8 >> 2] = i14 | -2147483648;
 i14 = i8 + i7 | 0;
 HEAP32[i1 + 4 >> 2] = i14;
 HEAP8[i10 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc(i13 + i14 | 0, i10);
 STACKTOP = i9;
 return;
}

function __ZL30SetClipboardTextFn_DefaultImplPvPKc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i1 = HEAP32[1460598] | 0;
 i3 = i1 + 11020 | 0;
 i4 = i1 + 11028 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 i6 = i1 + 11024 | 0;
 if (i5 | 0) {
  HEAP32[i6 >> 2] = 0;
  HEAP32[i3 >> 2] = 0;
  HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
  __ZL11FreeWrapperPvS_(i5, 0);
  HEAP32[i4 >> 2] = 0;
 }
 i5 = _strlen(i2) | 0;
 i1 = i5 + 1 | 0;
 i7 = HEAP32[i6 >> 2] | 0;
 if ((i7 | 0) > (i5 | 0)) i8 = 0; else {
  if (!i7) i9 = 8; else i9 = ((i7 | 0) / 2 | 0) + i7 | 0;
  i10 = (i9 | 0) > (i1 | 0) ? i9 : i1;
  if ((i7 | 0) < (i10 | 0)) {
   HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
   i7 = __ZL13MallocWrapperjPv(i10, 0) | 0;
   i9 = HEAP32[i4 >> 2] | 0;
   if (i9 | 0) {
    _memcpy(i7 | 0, i9 | 0, HEAP32[i3 >> 2] | 0) | 0;
    i9 = HEAP32[i4 >> 2] | 0;
    if (i9 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
    __ZL11FreeWrapperPvS_(i9, 0);
   }
   HEAP32[i4 >> 2] = i7;
   HEAP32[i6 >> 2] = i10;
   i8 = i7;
  } else i8 = 0;
 }
 HEAP32[i3 >> 2] = i1;
 if ((i5 | 0) <= -1) ___assert_fail(56841, 56850, 1235, 56909);
 _memcpy(i8 | 0, i2 | 0, i5 | 0) | 0;
 if ((HEAP32[i3 >> 2] | 0) > (i5 | 0)) {
  HEAP8[(HEAP32[i4 >> 2] | 0) + i5 >> 0] = 0;
  return;
 } else ___assert_fail(56841, 56850, 1235, 56909);
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 4 | 0;
 i9 = i7;
 i10 = i1 + 8 | 0;
 i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 8 >> 2] & 127](i10) | 0;
 i10 = HEAP8[i1 + 8 + 3 >> 0] | 0;
 if (i10 << 24 >> 24 < 0) i11 = HEAP32[i1 + 4 >> 2] | 0; else i11 = i10 & 255;
 i10 = HEAP8[i1 + 20 + 3 >> 0] | 0;
 if (i10 << 24 >> 24 < 0) i12 = HEAP32[i1 + 16 >> 2] | 0; else i12 = i10 & 255;
 do if ((i11 | 0) == (0 - i12 | 0)) HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 4; else {
  HEAP32[i9 >> 2] = HEAP32[i4 >> 2];
  HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
  i10 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb(i3, i8, i1, i1 + 24 | 0, i6, i5, 0) | 0) - i1 | 0;
  i13 = HEAP32[i2 >> 2] | 0;
  if ((i13 | 0) == 12 & (i10 | 0) == 0) {
   HEAP32[i2 >> 2] = 0;
   break;
  }
  if ((i13 | 0) < 12 & (i10 | 0) == 12) HEAP32[i2 >> 2] = i13 + 12;
 } while (0);
 STACKTOP = i7;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 4 | 0;
 i9 = i7;
 i10 = i1 + 8 | 0;
 i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 8 >> 2] & 127](i10) | 0;
 i10 = HEAP8[i1 + 11 >> 0] | 0;
 if (i10 << 24 >> 24 < 0) i11 = HEAP32[i1 + 4 >> 2] | 0; else i11 = i10 & 255;
 i10 = HEAP8[i1 + 12 + 11 >> 0] | 0;
 if (i10 << 24 >> 24 < 0) i12 = HEAP32[i1 + 16 >> 2] | 0; else i12 = i10 & 255;
 do if ((i11 | 0) == (0 - i12 | 0)) HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 4; else {
  HEAP32[i9 >> 2] = HEAP32[i4 >> 2];
  HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
  i10 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb(i3, i8, i1, i1 + 24 | 0, i6, i5, 0) | 0) - i1 | 0;
  i13 = HEAP32[i2 >> 2] | 0;
  if ((i13 | 0) == 12 & (i10 | 0) == 0) {
   HEAP32[i2 >> 2] = 0;
   break;
  }
  if ((i13 | 0) < 12 & (i10 | 0) == 12) HEAP32[i2 >> 2] = i13 + 12;
 } while (0);
 STACKTOP = i7;
 return;
}

function __ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_PKS6_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 i6 = 0;
 while (1) {
  if ((i6 | 0) == 3) break;
  HEAP32[i1 + (i6 << 2) >> 2] = 0;
  i6 = i6 + 1 | 0;
 }
 i6 = i2 + 11 | 0;
 i7 = HEAP8[i6 >> 0] | 0;
 i8 = i7 << 24 >> 24 < 0 ? HEAP32[i2 + 4 >> 2] | 0 : i7 & 255;
 i7 = __ZNSt3__211char_traitsIcE6lengthEPKc(i3) | 0;
 i9 = (HEAP8[i6 >> 0] | 0) < 0 ? HEAP32[i2 >> 2] | 0 : i2;
 i2 = i8 + i7 | 0;
 if (i2 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i1);
 if (i2 >>> 0 < 11) {
  HEAP8[i1 + 11 >> 0] = i8;
  i10 = i1;
 } else {
  i6 = i2 + 16 & -16;
  i2 = __Znwj(i6) | 0;
  HEAP32[i1 >> 2] = i2;
  HEAP32[i1 + 8 >> 2] = i6 | -2147483648;
  HEAP32[i1 + 4 >> 2] = i8;
  i10 = i2;
 }
 __ZNSt3__211char_traitsIcE4copyEPcPKcj(i10, i9, i8) | 0;
 HEAP8[i5 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc(i10 + i8 | 0, i5);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj(i1, i3, i7) | 0;
 STACKTOP = i4;
 return;
}

function _inflateInit_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 if (!i2) {
  i4 = -6;
  return i4 | 0;
 }
 if ((i3 | 0) != 56 | (HEAP8[i2 >> 0] | 0) != 49) {
  i4 = -6;
  return i4 | 0;
 }
 if (!i1) {
  i4 = -2;
  return i4 | 0;
 }
 i2 = i1 + 24 | 0;
 HEAP32[i2 >> 2] = 0;
 i3 = i1 + 32 | 0;
 i5 = HEAP32[i3 >> 2] | 0;
 if (!i5) {
  HEAP32[i3 >> 2] = 30;
  HEAP32[i1 + 40 >> 2] = 0;
  i6 = 30;
 } else i6 = i5;
 i5 = i1 + 36 | 0;
 if (!(HEAP32[i5 >> 2] | 0)) HEAP32[i5 >> 2] = 50;
 i5 = FUNCTION_TABLE_iiii[i6 & 31](HEAP32[i1 + 40 >> 2] | 0, 1, 7116) | 0;
 if (!i5) {
  i4 = -4;
  return i4 | 0;
 }
 HEAP32[i1 + 28 >> 2] = i5;
 HEAP32[i5 + 52 >> 2] = 0;
 HEAP32[i5 + 8 >> 2] = 1;
 HEAP32[i5 + 36 >> 2] = 15;
 HEAP32[i5 + 40 >> 2] = 0;
 HEAP32[i5 + 44 >> 2] = 0;
 HEAP32[i5 + 48 >> 2] = 0;
 HEAP32[i5 + 28 >> 2] = 0;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i1 + 48 >> 2] = 1;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 + 12 >> 2] = 0;
 HEAP32[i5 + 20 >> 2] = 32768;
 HEAP32[i5 + 32 >> 2] = 0;
 HEAP32[i5 + 56 >> 2] = 0;
 HEAP32[i5 + 60 >> 2] = 0;
 i1 = i5 + 1328 | 0;
 HEAP32[i5 + 108 >> 2] = i1;
 HEAP32[i5 + 80 >> 2] = i1;
 HEAP32[i5 + 76 >> 2] = i1;
 HEAP32[i5 + 7104 >> 2] = 1;
 HEAP32[i5 + 7108 >> 2] = -1;
 i4 = 0;
 return i4 | 0;
}

function _tanf(f1) {
 f1 = Math_fround(f1);
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, f7 = f0, d8 = 0.0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i2;
 i4 = (HEAPF32[tempDoublePtr >> 2] = f1, HEAP32[tempDoublePtr >> 2] | 0);
 i5 = i4 >>> 31;
 i6 = i4 & 2147483647;
 do if (i6 >>> 0 < 1061752795) if (i6 >>> 0 < 964689920) f7 = f1; else f7 = Math_fround(___tandf(+f1, 0)); else {
  if (i6 >>> 0 < 1081824210) {
   i4 = (i5 | 0) != 0;
   d8 = +f1;
   if (i6 >>> 0 < 1075235812) {
    f7 = Math_fround(___tandf((i4 ? 1.5707963267948966 : -1.5707963267948966) + d8, 1));
    break;
   } else {
    f7 = Math_fround(___tandf((i4 ? 3.141592653589793 : -3.141592653589793) + d8, 0));
    break;
   }
  }
  if (i6 >>> 0 < 1088565718) {
   i4 = (i5 | 0) != 0;
   d8 = +f1;
   if (i6 >>> 0 < 1085271520) {
    f7 = Math_fround(___tandf((i4 ? 4.71238898038469 : -4.71238898038469) + d8, 1));
    break;
   } else {
    f7 = Math_fround(___tandf((i4 ? 6.283185307179586 : -6.283185307179586) + d8, 0));
    break;
   }
  } else if (i6 >>> 0 > 2139095039) {
   f7 = Math_fround(f1 - f1);
   break;
  } else {
   i4 = ___rem_pio2f(f1, i3) | 0;
   f7 = Math_fround(___tandf(+HEAPF64[i3 >> 3], i4 & 1));
   break;
  }
 } while (0);
 STACKTOP = i2;
 return Math_fround(f7);
}

function __ZN5ImGui12TextWrappedVEPKcPi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, f8 = f0;
 i3 = HEAP32[1460598] | 0;
 i4 = HEAP32[i3 + 6392 >> 2] | 0;
 if (!(Math_fround(HEAPF32[i4 + 360 >> 2]) < Math_fround(0.0))) {
  HEAP8[i4 + 120 >> 0] = 1;
  if (HEAP8[i4 + 123 >> 0] | 0) return;
  i4 = i3 + 11620 | 0;
  i5 = _vsnprintf(i4, 3073, i1, i2) | 0;
  i6 = ((i5 | 0) != -1 & (i5 | 0) < 3073 ? i5 : 3072) + (i3 + 11620) | 0;
  HEAP8[i6 >> 0] = 0;
  __ZN5ImGui15TextUnformattedEPKcS1_(i4, i6);
  return;
 }
 __ZN5ImGui15PushTextWrapPosEf(Math_fround(0.0));
 i6 = HEAP32[1460598] | 0;
 i4 = HEAP32[i6 + 6392 >> 2] | 0;
 HEAP8[i4 + 120 >> 0] = 1;
 if (!(HEAP8[i4 + 123 >> 0] | 0)) {
  i3 = i6 + 11620 | 0;
  i5 = _vsnprintf(i3, 3073, i1, i2) | 0;
  i2 = ((i5 | 0) != -1 & (i5 | 0) < 3073 ? i5 : 3072) + (i6 + 11620) | 0;
  HEAP8[i2 >> 0] = 0;
  __ZN5ImGui15TextUnformattedEPKcS1_(i3, i2);
  i7 = HEAP32[(HEAP32[1460598] | 0) + 6392 >> 2] | 0;
 } else i7 = i4;
 HEAP8[i7 + 120 >> 0] = 1;
 i4 = i7 + 388 | 0;
 i2 = HEAP32[i4 >> 2] | 0;
 if ((i2 | 0) <= 0) ___assert_fail(38278, 56850, 1268, 31920);
 i3 = i2 + -1 | 0;
 HEAP32[i4 >> 2] = i3;
 if (!i3) f8 = Math_fround(-1.0); else f8 = Math_fround(HEAPF32[(HEAP32[i7 + 396 >> 2] | 0) + (i2 + -2 << 2) >> 2]);
 HEAPF32[i7 + 360 >> 2] = f8;
 return;
}

function _png_build_16bit_table(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, d8 = 0.0, i9 = 0, i10 = 0, d11 = 0.0, i12 = 0, i13 = 0, i14 = 0;
 i5 = 8 - i3 | 0;
 i6 = 1 << i5;
 i7 = (1 << 16 - i3) + -1 | 0;
 d8 = 1.0 / +(i7 | 0);
 i9 = 1 << 15 - i3;
 i10 = _png_calloc(i1, i6 << 2) | 0;
 HEAP32[i2 >> 2] = i10;
 i2 = (i3 | 0) == 0;
 d11 = +(i4 | 0) * 1.0e-05;
 if ((i4 + -95e3 | 0) >>> 0 < 10001) i12 = 0; else {
  i4 = 0;
  do {
   i3 = _png_malloc(i1, 512) | 0;
   HEAP32[i10 + (i4 << 2) >> 2] = i3;
   i13 = 0;
   do {
    i14 = ~~+Math_floor(+(+Math_pow(+(d8 * +(((i13 << i5) + i4 | 0) >>> 0)), +d11) * 65535.0 + .5)) & 65535;
    HEAP16[i3 + (i13 << 1) >> 1] = i14;
    i13 = i13 + 1 | 0;
   } while ((i13 | 0) != 256);
   i4 = i4 + 1 | 0;
  } while (i4 >>> 0 < i6 >>> 0);
  return;
 }
 do {
  i4 = _png_malloc(i1, 512) | 0;
  HEAP32[i10 + (i12 << 2) >> 2] = i4;
  if (i2) {
   i13 = 0;
   do {
    HEAP16[i4 + (i13 << 1) >> 1] = (i13 << i5) + i12;
    i13 = i13 + 1 | 0;
   } while ((i13 | 0) != 256);
  } else {
   i13 = 0;
   do {
    HEAP16[i4 + (i13 << 1) >> 1] = (((((i13 << i5) + i12 | 0) * 65535 | 0) + i9 | 0) >>> 0) / (i7 >>> 0) | 0;
    i13 = i13 + 1 | 0;
   } while ((i13 | 0) != 256);
  }
  i12 = i12 + 1 | 0;
 } while (i12 >>> 0 < i6 >>> 0);
 return;
}

function __ZNSt3__26vectorIN3glm3vecILi4EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i3 = i1 + 4 | 0;
 i4 = HEAP32[i1 >> 2] | 0;
 i5 = (HEAP32[i3 >> 2] | 0) - i4 | 0;
 i6 = i5 >> 4;
 i7 = i6 + 1 | 0;
 if (i7 >>> 0 > 268435455) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv(i1);
 i8 = i1 + 8 | 0;
 i9 = (HEAP32[i8 >> 2] | 0) - i4 | 0;
 i10 = i9 >> 3;
 i11 = i9 >> 4 >>> 0 < 134217727 ? (i10 >>> 0 < i7 >>> 0 ? i7 : i10) : 268435455;
 do if (!i11) {
  i12 = 0;
  i13 = 0;
 } else if (i11 >>> 0 > 268435455) {
  i10 = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc(i10, 29699);
  HEAP32[i10 >> 2] = 21232;
  ___cxa_throw(i10 | 0, 3136, 120);
 } else {
  i10 = __Znwj(i11 << 4) | 0;
  i12 = i10;
  i13 = i10;
  break;
 } while (0);
 i10 = i12 + (i6 << 4) | 0;
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i10 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i10 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i10 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
 if ((i5 | 0) > 0) _memcpy(i13 | 0, i4 | 0, i5 | 0) | 0;
 HEAP32[i1 >> 2] = i12;
 HEAP32[i3 >> 2] = i10 + 16;
 HEAP32[i8 >> 2] = i12 + (i11 << 4);
 if (!i4) return;
 __ZdlPv(i4);
 return;
}

function __ZL25default_terminate_handlerv() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i2 = i1 + 32 | 0;
 i3 = i1 + 24 | 0;
 i4 = i1 + 16 | 0;
 i5 = i1;
 i6 = i1 + 36 | 0;
 i1 = ___cxa_get_globals_fast() | 0;
 if (i1 | 0) {
  i7 = HEAP32[i1 >> 2] | 0;
  if (i7 | 0) {
   i1 = i7 + 48 | 0;
   i8 = HEAP32[i1 >> 2] | 0;
   i9 = HEAP32[i1 + 4 >> 2] | 0;
   if (!((i8 & -256 | 0) == 1126902528 & (i9 | 0) == 1129074247)) {
    HEAP32[i3 >> 2] = 72810;
    _abort_message(72760, i3);
   }
   if ((i8 | 0) == 1126902529 & (i9 | 0) == 1129074247) i10 = HEAP32[i7 + 44 >> 2] | 0; else i10 = i7 + 80 | 0;
   HEAP32[i6 >> 2] = i10;
   i10 = HEAP32[i7 >> 2] | 0;
   i7 = HEAP32[i10 + 4 >> 2] | 0;
   if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[764] | 0) + 16 >> 2] & 31](3056, i10, i6) | 0) {
    i10 = HEAP32[i6 >> 2] | 0;
    i6 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 8 >> 2] & 127](i10) | 0;
    HEAP32[i5 >> 2] = 72810;
    HEAP32[i5 + 4 >> 2] = i7;
    HEAP32[i5 + 8 >> 2] = i6;
    _abort_message(72674, i5);
   } else {
    HEAP32[i4 >> 2] = 72810;
    HEAP32[i4 + 4 >> 2] = i7;
    _abort_message(72719, i4);
   }
  }
 }
 _abort_message(72798, i2);
}

function __Z25ImFontAtlasBuildSetupFontP11ImFontAtlasP6ImFontP12ImFontConfigff(i1, i2, i3, f4, f5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 f4 = Math_fround(f4);
 f5 = Math_fround(f5);
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 if (HEAP8[i3 + 60 >> 0] | 0) {
  i6 = i2 + 62 | 0;
  i7 = i6;
  i8 = (HEAP16[i6 >> 1] | 0) + 1 << 16 >> 16;
  HEAP16[i7 >> 1] = i8;
  return;
 }
 HEAPF32[i2 >> 2] = Math_fround(0.0);
 i6 = i2 + 24 | 0;
 i9 = HEAP32[i6 >> 2] | 0;
 if (i9 | 0) {
  HEAP32[i2 + 20 >> 2] = 0;
  HEAP32[i2 + 16 >> 2] = 0;
  __ZN5ImGui7MemFreeEPv(i9);
  HEAP32[i6 >> 2] = 0;
 }
 i6 = i2 + 36 | 0;
 i9 = HEAP32[i6 >> 2] | 0;
 if (i9 | 0) {
  HEAP32[i2 + 32 >> 2] = 0;
  HEAP32[i2 + 28 >> 2] = 0;
  __ZN5ImGui7MemFreeEPv(i9);
  HEAP32[i6 >> 2] = 0;
 }
 i6 = i2 + 48 | 0;
 i9 = HEAP32[i6 >> 2] | 0;
 if (i9 | 0) {
  HEAP32[i2 + 44 >> 2] = 0;
  HEAP32[i2 + 40 >> 2] = 0;
  __ZN5ImGui7MemFreeEPv(i9);
  HEAP32[i6 >> 2] = 0;
 }
 HEAP32[i2 + 52 >> 2] = 0;
 HEAPF32[i2 + 56 >> 2] = Math_fround(0.0);
 i6 = i2 + 62 | 0;
 HEAP16[i6 >> 1] = 0;
 HEAP8[i2 + 80 >> 0] = 1;
 HEAP32[i2 + 84 >> 2] = 0;
 HEAP32[i2 >> 2] = HEAP32[i3 + 16 >> 2];
 HEAP32[i2 + 64 >> 2] = i3;
 HEAP32[i2 + 68 >> 2] = i1;
 HEAPF32[i2 + 72 >> 2] = f4;
 HEAPF32[i2 + 76 >> 2] = f5;
 i7 = i6;
 i8 = 1;
 HEAP16[i7 >> 1] = i8;
 return;
}

function __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIRKS4_EEvOT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i3 = i1 + 4 | 0;
 i4 = HEAP32[i1 >> 2] | 0;
 i5 = (HEAP32[i3 >> 2] | 0) - i4 | 0;
 i6 = (i5 | 0) / 12 | 0;
 i7 = i6 + 1 | 0;
 if (i7 >>> 0 > 357913941) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv(i1);
 i8 = i1 + 8 | 0;
 i9 = ((HEAP32[i8 >> 2] | 0) - i4 | 0) / 12 | 0;
 i10 = i9 << 1;
 i11 = i9 >>> 0 < 178956970 ? (i10 >>> 0 < i7 >>> 0 ? i7 : i10) : 357913941;
 do if (!i11) i12 = 0; else if (i11 >>> 0 > 357913941) {
  i10 = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc(i10, 29699);
  HEAP32[i10 >> 2] = 21232;
  ___cxa_throw(i10 | 0, 3136, 120);
 } else {
  i12 = __Znwj(i11 * 12 | 0) | 0;
  break;
 } while (0);
 i10 = i12 + (i6 * 12 | 0) | 0;
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i10 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i10 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 i2 = i10 + (((i5 | 0) / -12 | 0) * 12 | 0) | 0;
 if ((i5 | 0) > 0) _memcpy(i2 | 0, i4 | 0, i5 | 0) | 0;
 HEAP32[i1 >> 2] = i2;
 HEAP32[i3 >> 2] = i10 + 12;
 HEAP32[i8 >> 2] = i12 + (i11 * 12 | 0);
 if (!i4) return;
 __ZdlPv(i4);
 return;
}

function __ZNSt3__26vectorIN3glm3vecILi3EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i3 = i1 + 4 | 0;
 i4 = HEAP32[i1 >> 2] | 0;
 i5 = (HEAP32[i3 >> 2] | 0) - i4 | 0;
 i6 = (i5 | 0) / 12 | 0;
 i7 = i6 + 1 | 0;
 if (i7 >>> 0 > 357913941) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv(i1);
 i8 = i1 + 8 | 0;
 i9 = ((HEAP32[i8 >> 2] | 0) - i4 | 0) / 12 | 0;
 i10 = i9 << 1;
 i11 = i9 >>> 0 < 178956970 ? (i10 >>> 0 < i7 >>> 0 ? i7 : i10) : 357913941;
 do if (!i11) i12 = 0; else if (i11 >>> 0 > 357913941) {
  i10 = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc(i10, 29699);
  HEAP32[i10 >> 2] = 21232;
  ___cxa_throw(i10 | 0, 3136, 120);
 } else {
  i12 = __Znwj(i11 * 12 | 0) | 0;
  break;
 } while (0);
 i10 = i12 + (i6 * 12 | 0) | 0;
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i10 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i10 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 i2 = i10 + (((i5 | 0) / -12 | 0) * 12 | 0) | 0;
 if ((i5 | 0) > 0) _memcpy(i2 | 0, i4 | 0, i5 | 0) | 0;
 HEAP32[i1 >> 2] = i2;
 HEAP32[i3 >> 2] = i10 + 12;
 HEAP32[i8 >> 2] = i12 + (i11 * 12 | 0);
 if (!i4) return;
 __ZdlPv(i4);
 return;
}

function __ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 416 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(416);
 i3 = i4 + 8 | 0;
 i8 = i4;
 HEAP32[i8 >> 2] = i3 + 400;
 __ZNKSt3__210__time_put8__do_putEPwRS1_PK2tmcc(i1 + 8 | 0, i3, i8, i5, i6, i7);
 i7 = HEAP32[i8 >> 2] | 0;
 i8 = i3;
 i3 = HEAP32[i2 >> 2] | 0;
 while (1) {
  if ((i8 | 0) == (i7 | 0)) break;
  i2 = HEAP32[i8 >> 2] | 0;
  if (!i3) i9 = 0; else {
   i6 = i3 + 24 | 0;
   i5 = HEAP32[i6 >> 2] | 0;
   if ((i5 | 0) == (HEAP32[i3 + 28 >> 2] | 0)) {
    i1 = HEAP32[(HEAP32[i3 >> 2] | 0) + 52 >> 2] | 0;
    i10 = __ZNSt3__211char_traitsIwE11to_int_typeEw(i2) | 0;
    i11 = FUNCTION_TABLE_iii[i1 & 31](i3, i10) | 0;
   } else {
    HEAP32[i6 >> 2] = i5 + 4;
    HEAP32[i5 >> 2] = i2;
    i11 = __ZNSt3__211char_traitsIwE11to_int_typeEw(i2) | 0;
   }
   i2 = __ZNSt3__211char_traitsIwE11eq_int_typeEjj(i11, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0;
   i9 = i2 ? 0 : i3;
  }
  i8 = i8 + 4 | 0;
  i3 = i9;
 }
 STACKTOP = i4;
 return i3 | 0;
}

function __ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 i3 = i4 + 4 | 0;
 i8 = i4;
 HEAP32[i8 >> 2] = i3 + 100;
 __ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc(i1 + 8 | 0, i3, i8, i5, i6, i7);
 i7 = HEAP32[i8 >> 2] | 0;
 i8 = i3;
 i3 = HEAP32[i2 >> 2] | 0;
 while (1) {
  if ((i8 | 0) == (i7 | 0)) break;
  i2 = HEAP8[i8 >> 0] | 0;
  if (!i3) i9 = 0; else {
   i6 = i3 + 24 | 0;
   i5 = HEAP32[i6 >> 2] | 0;
   if ((i5 | 0) == (HEAP32[i3 + 28 >> 2] | 0)) {
    i1 = HEAP32[(HEAP32[i3 >> 2] | 0) + 52 >> 2] | 0;
    i10 = __ZNSt3__211char_traitsIcE11to_int_typeEc(i2) | 0;
    i11 = FUNCTION_TABLE_iii[i1 & 31](i3, i10) | 0;
   } else {
    HEAP32[i6 >> 2] = i5 + 1;
    HEAP8[i5 >> 0] = i2;
    i11 = __ZNSt3__211char_traitsIcE11to_int_typeEc(i2) | 0;
   }
   i2 = __ZNSt3__211char_traitsIcE11eq_int_typeEii(i11, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0;
   i9 = i2 ? 0 : i3;
  }
  i8 = i8 + 1 | 0;
  i3 = i9;
 }
 STACKTOP = i4;
 return i3 | 0;
}

function _fread(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i5 = 0;
 i6 = Math_imul(i3, i2) | 0;
 i7 = (i2 | 0) == 0 ? 0 : i3;
 if ((HEAP32[i4 + 76 >> 2] | 0) > -1) i8 = ___lockfile(i4) | 0; else i8 = 0;
 i3 = i4 + 74 | 0;
 i9 = HEAP8[i3 >> 0] | 0;
 HEAP8[i3 >> 0] = i9 + 255 | i9;
 i9 = i4 + 4 | 0;
 i3 = HEAP32[i9 >> 2] | 0;
 i10 = (HEAP32[i4 + 8 >> 2] | 0) - i3 | 0;
 if ((i10 | 0) > 0) {
  i11 = i10 >>> 0 < i6 >>> 0 ? i10 : i6;
  _memcpy(i1 | 0, i3 | 0, i11 | 0) | 0;
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + i11;
  i12 = i6 - i11 | 0;
  i13 = i1 + i11 | 0;
 } else {
  i12 = i6;
  i13 = i1;
 }
 L7 : do if (!i12) i5 = 13; else {
  i1 = i4 + 32 | 0;
  i11 = i12;
  i9 = i13;
  while (1) {
   if (___toread(i4) | 0) break;
   i3 = FUNCTION_TABLE_iiii[HEAP32[i1 >> 2] & 31](i4, i9, i11) | 0;
   if ((i3 + 1 | 0) >>> 0 < 2) break;
   i10 = i11 - i3 | 0;
   if (!i10) {
    i5 = 13;
    break L7;
   } else {
    i11 = i10;
    i9 = i9 + i3 | 0;
   }
  }
  if (i8 | 0) ___unlockfile(i4);
  i14 = ((i6 - i11 | 0) >>> 0) / (i2 >>> 0) | 0;
 } while (0);
 if ((i5 | 0) == 13) if (!i8) i14 = i7; else {
  ___unlockfile(i4);
  i14 = i7;
 }
 return i14 | 0;
}

function ___fwritex(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i4 = 0;
 i5 = i3 + 16 | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 if (!i6) if (!(___towrite(i3) | 0)) {
  i7 = HEAP32[i5 >> 2] | 0;
  i4 = 5;
 } else i8 = 0; else {
  i7 = i6;
  i4 = 5;
 }
 L5 : do if ((i4 | 0) == 5) {
  i6 = i3 + 20 | 0;
  i5 = HEAP32[i6 >> 2] | 0;
  i9 = i5;
  if ((i7 - i5 | 0) >>> 0 < i2 >>> 0) {
   i8 = FUNCTION_TABLE_iiii[HEAP32[i3 + 36 >> 2] & 31](i3, i1, i2) | 0;
   break;
  }
  L10 : do if ((HEAP8[i3 + 75 >> 0] | 0) > -1) {
   i5 = i2;
   while (1) {
    if (!i5) {
     i10 = 0;
     i11 = i1;
     i12 = i2;
     i13 = i9;
     break L10;
    }
    i14 = i5 + -1 | 0;
    if ((HEAP8[i1 + i14 >> 0] | 0) == 10) break; else i5 = i14;
   }
   i14 = FUNCTION_TABLE_iiii[HEAP32[i3 + 36 >> 2] & 31](i3, i1, i5) | 0;
   if (i14 >>> 0 < i5 >>> 0) {
    i8 = i14;
    break L5;
   }
   i10 = i5;
   i11 = i1 + i5 | 0;
   i12 = i2 - i5 | 0;
   i13 = HEAP32[i6 >> 2] | 0;
  } else {
   i10 = 0;
   i11 = i1;
   i12 = i2;
   i13 = i9;
  } while (0);
  _memcpy(i13 | 0, i11 | 0, i12 | 0) | 0;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + i12;
  i8 = i10 + i12 | 0;
 } while (0);
 return i8 | 0;
}

function __ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i5 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i6;
 do if ((i1 | 0) == (i2 | 0)) {
  HEAP32[i3 >> 2] = 4;
  i8 = 0;
  i9 = 0;
 } else {
  if ((HEAP8[i1 >> 0] | 0) == 45) {
   HEAP32[i3 >> 2] = 4;
   i8 = 0;
   i9 = 0;
   break;
  }
  i10 = ___errno_location() | 0;
  i11 = HEAP32[i10 >> 2] | 0;
  i10 = ___errno_location() | 0;
  HEAP32[i10 >> 2] = 0;
  i10 = _strtoull_l(i1, i7, i4, __ZNSt3__26__clocEv() | 0) | 0;
  i12 = tempRet0;
  i13 = ___errno_location() | 0;
  i14 = HEAP32[i13 >> 2] | 0;
  if (!i14) {
   i13 = ___errno_location() | 0;
   HEAP32[i13 >> 2] = i11;
  }
  if ((HEAP32[i7 >> 2] | 0) == (i2 | 0)) if ((i14 | 0) == 34) {
   i15 = -1;
   i16 = -1;
   i5 = 8;
  } else {
   i17 = i10;
   i18 = i12;
  } else {
   i15 = 0;
   i16 = 0;
   i5 = 8;
  }
  if ((i5 | 0) == 8) {
   HEAP32[i3 >> 2] = 4;
   i17 = i15;
   i18 = i16;
  }
  i8 = i18;
  i9 = i17;
 } while (0);
 tempRet0 = i8;
 STACKTOP = i6;
 return i9 | 0;
}

function __ZN5ImGui20ColorConvertHSVtoRGBEfffRfS0_S0_(f1, f2, f3, i4, i5, i6) {
 f1 = Math_fround(f1);
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var f7 = f0, i8 = 0, f9 = f0, f10 = f0, f11 = f0, f12 = f0, f13 = f0;
 if (f2 == Math_fround(0.0)) {
  HEAPF32[i6 >> 2] = f3;
  HEAPF32[i5 >> 2] = f3;
  HEAPF32[i4 >> 2] = f3;
  return;
 }
 f7 = Math_fround(Math_fround(_fmodf(f1, Math_fround(1.0))) / Math_fround(.166666672));
 i8 = ~~f7;
 f1 = Math_fround(f7 - Math_fround(i8 | 0));
 f7 = Math_fround(Math_fround(Math_fround(1.0) - f2) * f3);
 f9 = Math_fround(Math_fround(Math_fround(1.0) - Math_fround(f1 * f2)) * f3);
 f10 = Math_fround(Math_fround(Math_fround(1.0) - Math_fround(Math_fround(Math_fround(1.0) - f1) * f2)) * f3);
 switch (i8 | 0) {
 case 0:
  {
   f11 = f7;
   f12 = f10;
   f13 = f3;
   break;
  }
 case 1:
  {
   f11 = f7;
   f12 = f3;
   f13 = f9;
   break;
  }
 case 2:
  {
   f11 = f10;
   f12 = f3;
   f13 = f7;
   break;
  }
 case 3:
  {
   f11 = f3;
   f12 = f9;
   f13 = f7;
   break;
  }
 case 4:
  {
   f11 = f3;
   f12 = f7;
   f13 = f10;
   break;
  }
 default:
  {
   f11 = f9;
   f12 = f7;
   f13 = f3;
  }
 }
 HEAPF32[i4 >> 2] = f13;
 HEAPF32[i5 >> 2] = f12;
 HEAPF32[i6 >> 2] = f11;
 return;
}

function _png_warning(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i3;
 if (!i1) i5 = 0; else {
  if ((HEAP8[i2 >> 0] | 0) == 35) if ((HEAP8[i2 + 1 >> 0] | 0) == 32) i6 = 1; else if ((HEAP8[i2 + 2 >> 0] | 0) == 32) i6 = 2; else if ((HEAP8[i2 + 3 >> 0] | 0) == 32) i6 = 3; else if ((HEAP8[i2 + 4 >> 0] | 0) == 32) i6 = 4; else if ((HEAP8[i2 + 5 >> 0] | 0) == 32) i6 = 5; else if ((HEAP8[i2 + 6 >> 0] | 0) == 32) i6 = 6; else if ((HEAP8[i2 + 7 >> 0] | 0) == 32) i6 = 7; else if ((HEAP8[i2 + 8 >> 0] | 0) == 32) i6 = 8; else if ((HEAP8[i2 + 9 >> 0] | 0) == 32) i6 = 9; else if ((HEAP8[i2 + 10 >> 0] | 0) == 32) i6 = 10; else if ((HEAP8[i2 + 11 >> 0] | 0) == 32) i6 = 11; else if ((HEAP8[i2 + 12 >> 0] | 0) == 32) i6 = 12; else if ((HEAP8[i2 + 13 >> 0] | 0) == 32) i6 = 13; else i6 = (HEAP8[i2 + 14 >> 0] | 0) == 32 ? 14 : 15; else i6 = 0;
  i7 = HEAP32[i1 + 172 >> 2] | 0;
  if (!i7) i5 = i6; else {
   FUNCTION_TABLE_vii[i7 & 63](i1, i2 + i6 | 0);
   STACKTOP = i3;
   return;
  }
 }
 i6 = HEAP32[3353] | 0;
 HEAP32[i4 >> 2] = i2 + i5;
 _fprintf(i6, 58847, i4) | 0;
 _fputc(10, i6) | 0;
 STACKTOP = i3;
 return;
}

function __ZN11MenuManager4initER13WindowManager(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 __ZN5ImGui30DebugCheckVersionAndDataLayoutEPKcjjjjj(34412, 5352, 824, 8, 16, 20) | 0;
 __ZN5ImGui13CreateContextEP11ImFontAtlas(0) | 0;
 i3 = __ZN5ImGui5GetIOEv() | 0;
 __Z28ImGui_ImplGlfw_InitForOpenGLP10GLFWwindowb(HEAP32[i2 >> 2] | 0, 1) | 0;
 __Z22ImGui_ImplOpenGL3_InitPKc(0) | 0;
 __ZN5ImGui16StyleColorsLightEP10ImGuiStyle(0);
 i2 = i3 + 140 | 0;
 __ZN11ImFontAtlas18AddFontFromFileTTFEPKcfPK12ImFontConfigPKt(HEAP32[i2 >> 2] | 0, 29678, Math_fround(18.0), 0, 0) | 0;
 __ZN11ImFontAtlas18AddFontFromFileTTFEPKcfPK12ImFontConfigPKt(HEAP32[i2 >> 2] | 0, 29678, Math_fround(26.0), 0, 0) | 0;
 i3 = __ZN11ImFontAtlas18AddFontFromFileTTFEPKcfPK12ImFontConfigPKt(HEAP32[i2 >> 2] | 0, 29678, Math_fround(48.0), 0, 0) | 0;
 HEAP32[i1 + 16 >> 2] = i3;
 __ZN11ImFontAtlas14AddFontDefaultEPK12ImFontConfig(HEAP32[i2 >> 2] | 0, 0) | 0;
 i2 = __ZN5ImGui17GetCurrentContextEv() | 0;
 HEAP32[i1 >> 2] = i2;
 i2 = __ZN5ImGui8GetStyleEv() | 0;
 HEAPF32[i2 + 16 >> 2] = Math_fround(0.0);
 HEAPF32[i2 + 152 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 156 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 160 >> 2] = Math_fround(1.0);
 HEAPF32[i2 + 196 >> 2] = Math_fround(0.0);
 return;
}

function _png_set_sCAL_s(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0;
 if ((i1 | 0) == 0 | (i2 | 0) == 0) return;
 if ((i3 + -1 | 0) >>> 0 > 1) _png_error(i1, 62592);
 if (!i4) _png_error(i1, 62610);
 i6 = _strlen(i4) | 0;
 if (!i6) _png_error(i1, 62610);
 if ((HEAP8[i4 >> 0] | 0) == 45) _png_error(i1, 62610);
 if (!(_png_check_fp_string(i4, i6) | 0)) _png_error(i1, 62610);
 if (!i5) _png_error(i1, 62629);
 i7 = _strlen(i5) | 0;
 if (!i7) _png_error(i1, 62629);
 if ((HEAP8[i5 >> 0] | 0) == 45) _png_error(i1, 62629);
 if (!(_png_check_fp_string(i5, i7) | 0)) _png_error(i1, 62629);
 HEAP8[i2 + 252 >> 0] = i3;
 i3 = i6 + 1 | 0;
 i6 = _png_malloc_warn(i1, i3) | 0;
 i8 = i2 + 256 | 0;
 HEAP32[i8 >> 2] = i6;
 if (!i6) {
  _png_warning(i1, 62649);
  return;
 }
 _memcpy(i6 | 0, i4 | 0, i3 | 0) | 0;
 i3 = i7 + 1 | 0;
 i7 = _png_malloc_warn(i1, i3) | 0;
 HEAP32[i2 + 260 >> 2] = i7;
 if (!i7) {
  _png_free(i1, HEAP32[i8 >> 2] | 0);
  HEAP32[i8 >> 2] = 0;
  _png_warning(i1, 62649);
  return;
 } else {
  _memcpy(i7 | 0, i5 | 0, i3 | 0) | 0;
  i3 = i2 + 8 | 0;
  HEAP32[i3 >> 2] = HEAP32[i3 >> 2] | 16384;
  i3 = i2 + 232 | 0;
  HEAP32[i3 >> 2] = HEAP32[i3 >> 2] | 256;
  return;
 }
}

function __ZNSt3__26vectorIN3glm3vecILi2EfLNS1_9qualifierE0EEENS_9allocatorIS4_EEE21__push_back_slow_pathIRKS4_EEvOT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i3 = i1 + 4 | 0;
 i4 = HEAP32[i1 >> 2] | 0;
 i5 = (HEAP32[i3 >> 2] | 0) - i4 | 0;
 i6 = i5 >> 3;
 i7 = i6 + 1 | 0;
 if (i7 >>> 0 > 536870911) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv(i1);
 i8 = i1 + 8 | 0;
 i9 = (HEAP32[i8 >> 2] | 0) - i4 | 0;
 i10 = i9 >> 2;
 i11 = i9 >> 3 >>> 0 < 268435455 ? (i10 >>> 0 < i7 >>> 0 ? i7 : i10) : 536870911;
 do if (!i11) {
  i12 = 0;
  i13 = 0;
 } else if (i11 >>> 0 > 536870911) {
  i10 = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc(i10, 29699);
  HEAP32[i10 >> 2] = 21232;
  ___cxa_throw(i10 | 0, 3136, 120);
 } else {
  i10 = __Znwj(i11 << 3) | 0;
  i12 = i10;
  i13 = i10;
  break;
 } while (0);
 i10 = i12 + (i6 << 3) | 0;
 i6 = i2;
 i2 = HEAP32[i6 + 4 >> 2] | 0;
 i7 = i10;
 HEAP32[i7 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i7 + 4 >> 2] = i2;
 if ((i5 | 0) > 0) _memcpy(i13 | 0, i4 | 0, i5 | 0) | 0;
 HEAP32[i1 >> 2] = i12;
 HEAP32[i3 >> 2] = i10 + 8;
 HEAP32[i8 >> 2] = i12 + (i11 << 3);
 if (!i4) return;
 __ZdlPv(i4);
 return;
}

function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i3;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_(i4, i1);
 do if (HEAP8[i4 >> 0] | 0) {
  i5 = HEAP32[i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
  i6 = i5;
  if (i5 | 0) {
   i7 = i6 + 24 | 0;
   i8 = HEAP32[i7 >> 2] | 0;
   if ((i8 | 0) == (HEAP32[i6 + 28 >> 2] | 0)) {
    i9 = HEAP32[(HEAP32[i5 >> 2] | 0) + 52 >> 2] | 0;
    i5 = __ZNSt3__211char_traitsIcE11to_int_typeEc(i2) | 0;
    i10 = FUNCTION_TABLE_iii[i9 & 31](i6, i5) | 0;
   } else {
    HEAP32[i7 >> 2] = i8 + 1;
    HEAP8[i8 >> 0] = i2;
    i10 = __ZNSt3__211char_traitsIcE11to_int_typeEc(i2) | 0;
   }
   if (!(__ZNSt3__211char_traitsIcE11eq_int_typeEii(i10, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0)) break;
  }
  i8 = i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0;
  __ZNSt3__28ios_base5clearEj(i8, HEAP32[i8 + 16 >> 2] | 1);
 } while (0);
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(i4);
 STACKTOP = i3;
 return i1 | 0;
}

function ___strchrnul(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i3 = i2 & 255;
 L1 : do if (!i3) i4 = i1 + (_strlen(i1) | 0) | 0; else {
  if (!(i1 & 3)) i5 = i1; else {
   i6 = i2 & 255;
   i7 = i1;
   while (1) {
    i8 = HEAP8[i7 >> 0] | 0;
    if (i8 << 24 >> 24 == 0 ? 1 : i8 << 24 >> 24 == i6 << 24 >> 24) {
     i4 = i7;
     break L1;
    }
    i8 = i7 + 1 | 0;
    if (!(i8 & 3)) {
     i5 = i8;
     break;
    } else i7 = i8;
   }
  }
  i7 = Math_imul(i3, 16843009) | 0;
  i6 = HEAP32[i5 >> 2] | 0;
  L10 : do if (!((i6 & -2139062144 ^ -2139062144) & i6 + -16843009)) {
   i8 = i5;
   i9 = i6;
   while (1) {
    i10 = i9 ^ i7;
    if ((i10 & -2139062144 ^ -2139062144) & i10 + -16843009 | 0) {
     i11 = i8;
     break L10;
    }
    i10 = i8 + 4 | 0;
    i9 = HEAP32[i10 >> 2] | 0;
    if ((i9 & -2139062144 ^ -2139062144) & i9 + -16843009 | 0) {
     i11 = i10;
     break;
    } else i8 = i10;
   }
  } else i11 = i5; while (0);
  i7 = i2 & 255;
  i6 = i11;
  while (1) {
   i8 = HEAP8[i6 >> 0] | 0;
   if (i8 << 24 >> 24 == 0 ? 1 : i8 << 24 >> 24 == i7 << 24 >> 24) {
    i4 = i6;
    break;
   } else i6 = i6 + 1 | 0;
  }
 } while (0);
 return i4 | 0;
}

function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERf(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i4 = i3 + 20 | 0;
 i5 = i3 + 16 | 0;
 i6 = i3 + 12 | 0;
 i7 = i3 + 8 | 0;
 i8 = i3 + 24 | 0;
 i9 = i3 + 4 | 0;
 i10 = i3;
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b(i8, i1, 0);
 if (HEAP8[i8 >> 0] | 0) {
  HEAP32[i9 >> 2] = 0;
  __ZNKSt3__28ios_base6getlocEv(i10, i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0);
  i8 = __ZNKSt3__26locale9use_facetERNS0_2idE(i10, 5845212) | 0;
  i11 = i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0;
  i12 = HEAP32[(HEAP32[i8 >> 2] | 0) + 40 >> 2] | 0;
  HEAP32[i6 >> 2] = HEAP32[i11 + 24 >> 2];
  HEAP32[i7 >> 2] = 0;
  HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i4 >> 2] = HEAP32[i7 >> 2];
  FUNCTION_TABLE_iiiiiii[i12 & 63](i8, i5, i4, i11, i9, i2) | 0;
  __ZNSt3__26localeD2Ev(i10);
  i10 = i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0;
  __ZNSt3__28ios_base5clearEj(i10, HEAP32[i10 + 16 >> 2] | HEAP32[i9 >> 2]);
 }
 STACKTOP = i3;
 return i1 | 0;
}

function _png_read_chunk_header(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i2;
 i4 = i1 + 800 | 0;
 HEAP32[i4 >> 2] = 33;
 _png_read_data(i1, i3, 8);
 i5 = (HEAPU8[i3 + 1 >> 0] | 0) << 16 | (HEAPU8[i3 >> 0] | 0) << 24 | (HEAPU8[i3 + 2 >> 0] | 0) << 8 | (HEAPU8[i3 + 3 >> 0] | 0);
 if ((i5 | 0) < 0) _png_error(i1, 63728);
 i6 = i3 + 4 | 0;
 i7 = i1 + 376 | 0;
 HEAP32[i7 >> 2] = (HEAPU8[i3 + 5 >> 0] | 0) << 16 | (HEAPU8[i6 >> 0] | 0) << 24 | (HEAPU8[i3 + 6 >> 0] | 0) << 8 | (HEAPU8[i3 + 7 >> 0] | 0);
 _png_reset_crc(i1);
 _png_calculate_crc(i1, i6, 4);
 i6 = HEAP32[i7 >> 2] | 0;
 i7 = i6 & 255;
 if ((i7 + -65 | 0) >>> 0 > 57 | (i7 + -91 | 0) >>> 0 < 6) _png_chunk_error(i1, 64299);
 i7 = i6 >>> 8 & 255;
 if ((i7 + -65 | 0) >>> 0 > 57 | (i7 + -91 | 0) >>> 0 < 6) _png_chunk_error(i1, 64299);
 i7 = i6 >>> 16 & 255;
 if ((i7 + -65 | 0) >>> 0 > 57 | (i7 + -91 | 0) >>> 0 < 6) _png_chunk_error(i1, 64299);
 i7 = i6 >>> 24;
 if ((i7 + -65 | 0) >>> 0 > 57 | (i7 + -91 | 0) >>> 0 < 6) _png_chunk_error(i1, 64299); else {
  HEAP32[i4 >> 2] = 65;
  STACKTOP = i2;
  return i5 | 0;
 }
 return 0;
}

function _png_image_read_header(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i2 = HEAP32[i1 >> 2] | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 i4 = HEAP32[i2 + 4 >> 2] | 0;
 _png_set_benign_errors(i3, 1);
 _png_read_info(i3, i4);
 HEAP32[i1 + 8 >> 2] = HEAP32[i3 + 348 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i3 + 352 >> 2];
 i4 = HEAP8[i3 + 435 >> 0] | 0;
 i2 = i4 & 2;
 if (!(i4 & 4)) i5 = (HEAP16[i3 + 428 >> 1] | 0) != 0 | i2; else i5 = i2 | 1;
 i2 = i3 + 436 | 0;
 i6 = (HEAP8[i2 >> 0] | 0) == 16 ? i5 | 4 : i5;
 HEAP32[i1 + 16 >> 2] = i6 | i4 << 3 & 8;
 if (i6 & 2 | 0) if ((HEAP16[i3 + 898 >> 1] & -32702) << 16 >> 16 == 2) {
  i6 = i1 + 20 | 0;
  HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 1;
 }
 switch (i4 << 24 >> 24) {
 case 0:
  {
   i7 = 1 << HEAPU8[i2 >> 0];
   i8 = i7 >>> 0 < 256;
   i9 = i8 ? i7 : 256;
   i10 = i1 + 24 | 0;
   HEAP32[i10 >> 2] = i9;
   return 1;
  }
 case 3:
  {
   i7 = HEAPU16[i3 + 420 >> 1] | 0;
   i8 = i7 >>> 0 < 256;
   i9 = i8 ? i7 : 256;
   i10 = i1 + 24 | 0;
   HEAP32[i10 >> 2] = i9;
   return 1;
  }
 default:
  {
   i7 = 256;
   i8 = i7 >>> 0 < 256;
   i9 = i8 ? i7 : 256;
   i10 = i1 + 24 | 0;
   HEAP32[i10 >> 2] = i9;
   return 1;
  }
 }
 return 0;
}

function _png_icc_check_tag_table(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i6 = 0;
 i7 = (HEAPU8[i5 + 129 >> 0] | 0) << 16 | (HEAPU8[i5 + 128 >> 0] | 0) << 24 | (HEAPU8[i5 + 130 >> 0] | 0) << 8 | (HEAPU8[i5 + 131 >> 0] | 0);
 if (!i7) {
  i8 = 1;
  return i8 | 0;
 }
 i9 = 0;
 i10 = i5 + 132 | 0;
 while (1) {
  i11 = (HEAPU8[i10 + 1 >> 0] | 0) << 16 | (HEAPU8[i10 >> 0] | 0) << 24 | (HEAPU8[i10 + 2 >> 0] | 0) << 8 | (HEAPU8[i10 + 3 >> 0] | 0);
  i5 = HEAPU8[i10 + 7 >> 0] | 0;
  i12 = (HEAPU8[i10 + 5 >> 0] | 0) << 16 | (HEAPU8[i10 + 4 >> 0] | 0) << 24 | (HEAPU8[i10 + 6 >> 0] | 0) << 8 | i5;
  i13 = (HEAPU8[i10 + 9 >> 0] | 0) << 16 | (HEAPU8[i10 + 8 >> 0] | 0) << 24 | (HEAPU8[i10 + 10 >> 0] | 0) << 8 | (HEAPU8[i10 + 11 >> 0] | 0);
  if (i5 & 3 | 0) _png_icc_profile_error(i1, 0, i3, i11, 61948);
  if (i12 >>> 0 > i4 >>> 0 | i13 >>> 0 > (i4 - i12 | 0) >>> 0) break;
  i9 = i9 + 1 | 0;
  if (i9 >>> 0 >= i7 >>> 0) {
   i8 = 1;
   i6 = 8;
   break;
  } else i10 = i10 + 12 | 0;
 }
 if ((i6 | 0) == 8) return i8 | 0;
 _png_icc_profile_error(i1, i2, i3, i11, 61990);
 i8 = 0;
 return i8 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i5;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 i7 = HEAP8[i2 + 11 >> 0] | 0;
 i8 = i7 << 24 >> 24 < 0;
 i9 = i8 ? HEAP32[i2 + 4 >> 2] | 0 : i7 & 255;
 if (i9 >>> 0 < i3 >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv(i1);
 i7 = (i8 ? HEAP32[i2 >> 2] | 0 : i2) + i3 | 0;
 i2 = i9 - i3 | 0;
 i3 = i2 >>> 0 < i4 >>> 0 ? i2 : i4;
 if (i3 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i1);
 if (i3 >>> 0 < 11) {
  HEAP8[i1 + 11 >> 0] = i3;
  i10 = i1;
 } else {
  i4 = i3 + 16 & -16;
  i2 = __Znwj(i4) | 0;
  HEAP32[i1 >> 2] = i2;
  HEAP32[i1 + 8 >> 2] = i4 | -2147483648;
  HEAP32[i1 + 4 >> 2] = i3;
  i10 = i2;
 }
 __ZNSt3__211char_traitsIcE4copyEPcPKcj(i10, i7, i3) | 0;
 HEAP8[i6 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc(i10 + i3 | 0, i6);
 STACKTOP = i5;
 return;
}

function _vsnprintf(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i5 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 i7 = i6 + 124 | 0;
 i8 = i6;
 i9 = i8;
 i10 = 14116;
 i11 = i9 + 124 | 0;
 do {
  HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
  i9 = i9 + 4 | 0;
  i10 = i10 + 4 | 0;
 } while ((i9 | 0) < (i11 | 0));
 if ((i2 + -1 | 0) >>> 0 > 2147483646) if (!i2) {
  i12 = i7;
  i13 = 1;
  i5 = 4;
 } else {
  i7 = ___errno_location() | 0;
  HEAP32[i7 >> 2] = 75;
  i14 = -1;
 } else {
  i12 = i1;
  i13 = i2;
  i5 = 4;
 }
 if ((i5 | 0) == 4) {
  i5 = -2 - i12 | 0;
  i2 = i13 >>> 0 > i5 >>> 0 ? i5 : i13;
  HEAP32[i8 + 48 >> 2] = i2;
  i13 = i8 + 20 | 0;
  HEAP32[i13 >> 2] = i12;
  HEAP32[i8 + 44 >> 2] = i12;
  i5 = i12 + i2 | 0;
  i12 = i8 + 16 | 0;
  HEAP32[i12 >> 2] = i5;
  HEAP32[i8 + 28 >> 2] = i5;
  i5 = _vfprintf(i8, i3, i4) | 0;
  if (!i2) i14 = i5; else {
   i2 = HEAP32[i13 >> 2] | 0;
   HEAP8[i2 + (((i2 | 0) == (HEAP32[i12 >> 2] | 0)) << 31 >> 31) >> 0] = 0;
   i14 = i5;
  }
 }
 STACKTOP = i6;
 return i14 | 0;
}

function _sift(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 i7 = i6;
 HEAP32[i7 >> 2] = i1;
 L1 : do if ((i4 | 0) > 1) {
  i8 = 0 - i2 | 0;
  i9 = i1;
  i10 = i4;
  i11 = 1;
  i12 = i1;
  while (1) {
   i13 = i9 + i8 | 0;
   i14 = i10 + -2 | 0;
   i15 = i13 + (0 - (HEAP32[i5 + (i14 << 2) >> 2] | 0)) | 0;
   if ((FUNCTION_TABLE_iii[i3 & 31](i12, i15) | 0) > -1) if ((FUNCTION_TABLE_iii[i3 & 31](i12, i13) | 0) > -1) {
    i16 = i11;
    break L1;
   }
   i17 = i11 + 1 | 0;
   i18 = i7 + (i11 << 2) | 0;
   if ((FUNCTION_TABLE_iii[i3 & 31](i15, i13) | 0) > -1) {
    HEAP32[i18 >> 2] = i15;
    i19 = i15;
    i20 = i10 + -1 | 0;
   } else {
    HEAP32[i18 >> 2] = i13;
    i19 = i13;
    i20 = i14;
   }
   if ((i20 | 0) <= 1) {
    i16 = i17;
    break L1;
   }
   i9 = i19;
   i10 = i20;
   i11 = i17;
   i12 = HEAP32[i7 >> 2] | 0;
  }
 } else i16 = 1; while (0);
 _cycle(i2, i7, i16);
 STACKTOP = i6;
 return;
}

function __ZNSt3__24stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4 + 12 | 0;
 i6 = i4;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i6 + 4 >> 2] = 0;
 HEAP32[i6 + 8 >> 2] = 0;
 i7 = __ZNSt3__211char_traitsIcE6lengthEPKc(72634) | 0;
 if (i7 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i6);
 if (i7 >>> 0 < 11) {
  HEAP8[i6 + 11 >> 0] = i7;
  i8 = i6;
 } else {
  i9 = i7 + 16 & -16;
  i10 = __Znwj(i9) | 0;
  HEAP32[i6 >> 2] = i10;
  HEAP32[i6 + 8 >> 2] = i9 | -2147483648;
  HEAP32[i6 + 4 >> 2] = i7;
  i8 = i10;
 }
 __ZNSt3__211char_traitsIcE4copyEPcPKcj(i8, 72634, i7) | 0;
 HEAP8[i5 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc(i8 + i7 | 0, i5);
 i5 = __ZNSt3__212_GLOBAL__N_110as_integerIiNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEET_RKS7_RKT0_Pji(i6, i1, i2, i3) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i6);
 STACKTOP = i4;
 return i5 | 0;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4;
 i6 = i4 + 4 | 0;
 HEAP32[i5 >> 2] = i2;
 i2 = i1 + 8 | 0;
 i7 = i2 + 3 | 0;
 i8 = HEAP8[i7 >> 0] | 0;
 i9 = i8 << 24 >> 24 < 0;
 if (i9) {
  i10 = HEAP32[i1 + 4 >> 2] | 0;
  i11 = (HEAP32[i2 >> 2] & 2147483647) + -1 | 0;
 } else {
  i10 = i8 & 255;
  i11 = 1;
 }
 if ((i10 | 0) == (i11 | 0)) {
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj(i1, i11, 1, i11, i11, 0, 0);
  if ((HEAP8[i7 >> 0] | 0) < 0) i3 = 8; else i3 = 7;
 } else if (i9) i3 = 8; else i3 = 7;
 if ((i3 | 0) == 7) {
  HEAP8[i7 >> 0] = i10 + 1;
  i12 = i1;
 } else if ((i3 | 0) == 8) {
  i3 = HEAP32[i1 >> 2] | 0;
  HEAP32[i1 + 4 >> 2] = i10 + 1;
  i12 = i3;
 }
 i3 = i12 + (i10 << 2) | 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw(i3, i5);
 HEAP32[i6 >> 2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw(i3 + 4 | 0, i6);
 STACKTOP = i4;
 return;
}

function _png_colorspace_endpoints_match(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = HEAP32[i1 + 24 >> 2] | 0;
 i5 = HEAP32[i2 + 24 >> 2] | 0;
 if ((i4 | 0) < (i5 - i3 | 0) | (i4 | 0) > (i5 + i3 | 0)) return 0;
 i5 = HEAP32[i1 + 28 >> 2] | 0;
 i4 = HEAP32[i2 + 28 >> 2] | 0;
 if ((i5 | 0) < (i4 - i3 | 0) | (i5 | 0) > (i4 + i3 | 0)) return 0;
 i4 = HEAP32[i1 >> 2] | 0;
 i5 = HEAP32[i2 >> 2] | 0;
 if ((i4 | 0) < (i5 - i3 | 0) | (i4 | 0) > (i5 + i3 | 0)) return 0;
 i5 = HEAP32[i1 + 4 >> 2] | 0;
 i4 = HEAP32[i2 + 4 >> 2] | 0;
 if ((i5 | 0) < (i4 - i3 | 0) | (i5 | 0) > (i4 + i3 | 0)) return 0;
 i4 = HEAP32[i1 + 8 >> 2] | 0;
 i5 = HEAP32[i2 + 8 >> 2] | 0;
 if ((i4 | 0) < (i5 - i3 | 0) | (i4 | 0) > (i5 + i3 | 0)) return 0;
 i5 = HEAP32[i1 + 12 >> 2] | 0;
 i4 = HEAP32[i2 + 12 >> 2] | 0;
 if ((i5 | 0) < (i4 - i3 | 0) | (i5 | 0) > (i4 + i3 | 0)) return 0;
 i4 = HEAP32[i1 + 16 >> 2] | 0;
 i5 = HEAP32[i2 + 16 >> 2] | 0;
 if ((i4 | 0) < (i5 - i3 | 0) | (i4 | 0) > (i5 + i3 | 0)) return 0; else {
  i5 = HEAP32[i1 + 20 >> 2] | 0;
  i1 = HEAP32[i2 + 20 >> 2] | 0;
  return (i5 | 0) <= (i1 + i3 | 0) & (i5 | 0) >= (i1 - i3 | 0) & 1 | 0;
 }
 return 0;
}

function __Z19cursor_pos_callbackP10GLFWwindowdd(i1, d2, d3) {
 i1 = i1 | 0;
 d2 = +d2;
 d3 = +d3;
 var f4 = f0, f5 = f0, f6 = f0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, f11 = f0, i12 = 0;
 i1 = (__ZN5ImGui5GetIOEv() | 0) + 868 | 0;
 if (HEAP8[i1 >> 0] | 0) return;
 if (!(HEAP8[5842132] | 0)) {
  f4 = Math_fround(HEAPF32[1460537]);
  f5 = f4;
  f6 = Math_fround(HEAPF32[1460538]);
 } else {
  d7 = d2 - +HEAPF64[9172];
  d8 = d3 - +HEAPF64[9173];
  f4 = Math_fround(HEAPF32[1460534]);
  d9 = +Math_fround(_cosf(f4));
  d10 = +Math_fround(_sinf(f4));
  f4 = Math_fround(+Math_fround(HEAPF32[1460537]) - (d8 * d10 - d7 * d9) * .01);
  HEAPF32[1460537] = f4;
  f11 = Math_fround(+Math_fround(HEAPF32[1460538]) - (d8 * d9 + d7 * d10) * .01);
  HEAPF32[1460538] = f11;
  f5 = f4;
  f6 = f11;
 }
 HEAPF64[9172] = d2;
 HEAPF64[9173] = d3;
 __ZN12RenderSystem9setCursorEii(HEAP32[18562] | 0, ~~Math_fround(f5 * Math_fround(2.0)), ~~Math_fround(f6 * Math_fround(2.0)));
 i1 = HEAP32[18562] | 0;
 i12 = ~~Math_fround(Math_fround(HEAPF32[i1 >> 2]) + Math_fround(.5));
 __ZN13ActionManager9cursorPosEii(5841552, i12, ~~Math_fround(Math_fround(HEAPF32[i1 + 4 >> 2]) + Math_fround(.5)));
 return;
}

function ___shgetc(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = 0;
 i3 = i1 + 104 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 if (!i4) i2 = 3; else if ((HEAP32[i1 + 108 >> 2] | 0) < (i4 | 0)) i2 = 3; else i2 = 4;
 if ((i2 | 0) == 3) {
  i4 = ___uflow(i1) | 0;
  if ((i4 | 0) < 0) i2 = 4; else {
   i5 = HEAP32[i3 >> 2] | 0;
   i3 = i1 + 8 | 0;
   if (!i5) {
    i6 = HEAP32[i3 >> 2] | 0;
    i7 = i6;
    i8 = i6;
   } else {
    i6 = HEAP32[i3 >> 2] | 0;
    i3 = HEAP32[i1 + 4 >> 2] | 0;
    i9 = i5 - (HEAP32[i1 + 108 >> 2] | 0) | 0;
    i5 = i6;
    if ((i6 - i3 | 0) < (i9 | 0)) {
     i7 = i5;
     i8 = i5;
    } else {
     i7 = i3 + (i9 + -1) | 0;
     i8 = i5;
    }
   }
   HEAP32[i1 + 100 >> 2] = i7;
   i7 = i1 + 4 | 0;
   if (!i8) i10 = HEAP32[i7 >> 2] | 0; else {
    i5 = HEAP32[i7 >> 2] | 0;
    i7 = i1 + 108 | 0;
    HEAP32[i7 >> 2] = i8 + 1 - i5 + (HEAP32[i7 >> 2] | 0);
    i10 = i5;
   }
   i5 = i10 + -1 | 0;
   if ((i4 | 0) == (HEAPU8[i5 >> 0] | 0 | 0)) i11 = i4; else {
    HEAP8[i5 >> 0] = i4;
    i11 = i4;
   }
  }
 }
 if ((i2 | 0) == 4) {
  HEAP32[i1 + 100 >> 2] = 0;
  i11 = -1;
 }
 return i11 | 0;
}

function _png_handle_hIST(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 528 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(528);
 i5 = i4;
 i6 = i4 + 512 | 0;
 i7 = HEAP32[i1 + 208 >> 2] | 0;
 if (!(i7 & 1)) _png_chunk_error(i1, 60665);
 if ((i7 & 6 | 0) != 2) {
  _png_crc_finish(i1, i3) | 0;
  _png_chunk_benign_error(i1, 61181);
  STACKTOP = i4;
  return;
 }
 if (i2 | 0) if (HEAP32[i2 + 8 >> 2] & 64 | 0) {
  _png_crc_finish(i1, i3) | 0;
  _png_chunk_benign_error(i1, 63151);
  STACKTOP = i4;
  return;
 }
 i7 = i3 >>> 1;
 if (i3 >>> 0 > 513 ? 1 : (i7 | 0) != (HEAPU16[i1 + 420 >> 1] | 0 | 0)) {
  _png_crc_finish(i1, i3) | 0;
  _png_chunk_benign_error(i1, 61194);
  STACKTOP = i4;
  return;
 }
 if (i7 | 0) {
  i3 = i6 + 1 | 0;
  i8 = 0;
  do {
   _png_read_data(i1, i6, 2);
   _png_calculate_crc(i1, i6, 2);
   HEAP16[i5 + (i8 << 1) >> 1] = (HEAPU8[i6 >> 0] | 0) << 8 | (HEAPU8[i3 >> 0] | 0);
   i8 = i8 + 1 | 0;
  } while ((i8 | 0) != (i7 | 0));
 }
 if (_png_crc_finish(i1, 0) | 0) {
  STACKTOP = i4;
  return;
 }
 _png_set_hIST(i1, i2, i5);
 STACKTOP = i4;
 return;
}

function __ZN5ImGui15BeginChildFrameEjRK6ImVec2i(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i4 = HEAP32[1460598] | 0;
 __ZN5ImGui14PushStyleColorEiRK6ImVec4(3, i4 + 5620 | 0);
 __ZN5ImGui12PushStyleVarEif(6, Math_fround(HEAPF32[i4 + 5416 >> 2]));
 __ZN5ImGui12PushStyleVarEif(7, Math_fround(HEAPF32[i4 + 5420 >> 2]));
 __ZN5ImGui12PushStyleVarEiRK6ImVec2(1, i4 + 5408 | 0);
 if (!i1) ___assert_fail(32302, 31803, 5481, 33549);
 i4 = __ZL12BeginChildExPKcjRK6ImVec2bi(0, i1, i2, 1, i3 | 65540) | 0;
 __ZN5ImGui11PopStyleVarEi(3);
 i3 = HEAP32[1460598] | 0;
 i2 = i3 + 6476 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if ((i1 | 0) <= 0) ___assert_fail(38278, 56850, 1245, 38287);
 i5 = HEAP32[i3 + 6484 >> 2] | 0;
 i6 = i1 + -1 | 0;
 i1 = i5 + (i6 * 20 | 0) | 0;
 i6 = i1 + 4 | 0;
 i5 = i3 + 5508 + (HEAP32[i1 >> 2] << 4) | 0;
 HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 i6 = HEAP32[i2 >> 2] | 0;
 if ((i6 | 0) > 0) {
  HEAP32[i2 >> 2] = i6 + -1;
  return i4 | 0;
 } else ___assert_fail(38278, 56850, 1268, 31920);
 return 0;
}

function _png_read_filter_row_paeth_multibyte_pixel(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i4 = ((HEAPU8[i1 + 11 >> 0] | 0) + 7 | 0) >>> 3;
 i5 = i2 + i4 | 0;
 if (!i4) {
  i6 = i2;
  i7 = i3;
 } else {
  i8 = i3;
  i3 = i2;
  while (1) {
   i9 = i8 + 1 | 0;
   i10 = i3 + 1 | 0;
   HEAP8[i3 >> 0] = (HEAPU8[i8 >> 0] | 0) + (HEAPU8[i3 >> 0] | 0);
   if (i10 >>> 0 < i5 >>> 0) {
    i8 = i9;
    i3 = i10;
   } else {
    i6 = i10;
    i7 = i9;
    break;
   }
  }
 }
 i3 = i2 + (HEAP32[i1 + 4 >> 2] | 0) | 0;
 if (i6 >>> 0 >= i3 >>> 0) return;
 i1 = 0 - i4 | 0;
 i4 = i7;
 i7 = i6;
 while (1) {
  i6 = HEAPU8[i4 + i1 >> 0] | 0;
  i2 = HEAPU8[i7 + i1 >> 0] | 0;
  i8 = HEAPU8[i4 >> 0] | 0;
  i5 = i8 - i6 | 0;
  i9 = i2 - i6 | 0;
  i10 = (i5 | 0) < 0 ? 0 - i5 | 0 : i5;
  i11 = (i9 | 0) < 0 ? 0 - i9 | 0 : i9;
  i12 = i5 + i9 | 0;
  i9 = (i11 | 0) < (i10 | 0);
  HEAP8[i7 >> 0] = ((((i12 | 0) < 0 ? 0 - i12 | 0 : i12) | 0) < ((i9 ? i11 : i10) | 0) ? i6 : i9 ? i8 : i2) + (HEAPU8[i7 >> 0] | 0);
  i7 = i7 + 1 | 0;
  if ((i7 | 0) == (i3 | 0)) break; else i4 = i4 + 1 | 0;
 }
 return;
}

function _png_inflate_claim(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i5 = i4;
 i6 = i1 + 220 | 0;
 i7 = HEAP32[i6 >> 2] | 0;
 if (i7 | 0) {
  HEAP8[i5 >> 0] = i7 >>> 24;
  HEAP8[i5 + 1 >> 0] = i7 >>> 16;
  HEAP8[i5 + 2 >> 0] = i7 >>> 8;
  HEAP8[i5 + 3 >> 0] = i7;
  _png_safecat(i5, 64, 4, 61125) | 0;
  _png_chunk_warning(i1, i5);
  HEAP32[i6 >> 2] = 0;
 }
 i5 = i1 + 224 | 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i1 + 228 >> 2] = 0;
 HEAP32[i1 + 236 >> 2] = 0;
 HEAP32[i1 + 240 >> 2] = 0;
 i7 = i1 + 212 | 0;
 if (!(HEAP32[i7 >> 2] & 2)) {
  i8 = _inflateInit_(i5, 61140, 56) | 0;
  if (!i8) {
   HEAP32[i7 >> 2] = HEAP32[i7 >> 2] | 2;
   i3 = 7;
  } else {
   i9 = i8;
   i3 = 8;
  }
 } else {
  i8 = _inflateReset(i5) | 0;
  if (!i8) i3 = 7; else {
   i9 = i8;
   i3 = 8;
  }
 }
 if ((i3 | 0) == 7) {
  HEAP32[i6 >> 2] = i2;
  i10 = 0;
  STACKTOP = i4;
  return i10 | 0;
 } else if ((i3 | 0) == 8) {
  _png_zstream_error(i1, i9);
  i10 = i9;
  STACKTOP = i4;
  return i10 | 0;
 }
 return 0;
}

function __ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i5;
 do if ((i1 | 0) == (i2 | 0)) {
  HEAP32[i3 >> 2] = 4;
  i7 = 0;
 } else {
  if ((HEAP8[i1 >> 0] | 0) == 45) {
   HEAP32[i3 >> 2] = 4;
   i7 = 0;
   break;
  }
  i8 = ___errno_location() | 0;
  i9 = HEAP32[i8 >> 2] | 0;
  i8 = ___errno_location() | 0;
  HEAP32[i8 >> 2] = 0;
  i8 = _strtoull_l(i1, i6, i4, __ZNSt3__26__clocEv() | 0) | 0;
  i10 = tempRet0;
  i11 = ___errno_location() | 0;
  i12 = HEAP32[i11 >> 2] | 0;
  if (!i12) {
   i11 = ___errno_location() | 0;
   HEAP32[i11 >> 2] = i9;
  }
  do if ((HEAP32[i6 >> 2] | 0) == (i2 | 0)) if (i10 >>> 0 > 0 | (i10 | 0) == 0 & i8 >>> 0 > 65535 | (i12 | 0) == 34) {
   HEAP32[i3 >> 2] = 4;
   i13 = -1;
   break;
  } else {
   i13 = i8 & 65535;
   break;
  } else {
   HEAP32[i3 >> 2] = 4;
   i13 = 0;
  } while (0);
  i7 = i13;
 } while (0);
 STACKTOP = i5;
 return i7 | 0;
}

function _png_do_invert(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 switch (HEAP8[i1 + 8 >> 0] | 0) {
 case 0:
  {
   i3 = HEAP32[i1 + 4 >> 2] | 0;
   if (!i3) return; else {
    i4 = 0;
    i5 = i2;
   }
   while (1) {
    HEAP8[i5 >> 0] = ~HEAP8[i5 >> 0];
    i4 = i4 + 1 | 0;
    if ((i4 | 0) == (i3 | 0)) break; else i5 = i5 + 1 | 0;
   }
   return;
  }
 case 4:
  {
   switch (HEAP8[i1 + 9 >> 0] | 0) {
   case 8:
    {
     i5 = HEAP32[i1 + 4 >> 2] | 0;
     if (!i5) return; else {
      i6 = 0;
      i7 = i2;
     }
     while (1) {
      HEAP8[i7 >> 0] = ~HEAP8[i7 >> 0];
      i6 = i6 + 2 | 0;
      if (i6 >>> 0 >= i5 >>> 0) break; else i7 = i7 + 2 | 0;
     }
     return;
    }
   case 16:
    {
     i7 = HEAP32[i1 + 4 >> 2] | 0;
     if (!i7) return; else {
      i8 = 0;
      i9 = i2;
     }
     while (1) {
      HEAP8[i9 >> 0] = ~HEAP8[i9 >> 0];
      i2 = i9 + 1 | 0;
      HEAP8[i2 >> 0] = ~HEAP8[i2 >> 0];
      i8 = i8 + 4 | 0;
      if (i8 >>> 0 >= i7 >>> 0) break; else i9 = i9 + 4 | 0;
     }
     return;
    }
   default:
    return;
   }
   break;
  }
 default:
  return;
 }
}

function __ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i5;
 do if ((i1 | 0) == (i2 | 0)) {
  HEAP32[i3 >> 2] = 4;
  i7 = 0;
 } else {
  if ((HEAP8[i1 >> 0] | 0) == 45) {
   HEAP32[i3 >> 2] = 4;
   i7 = 0;
   break;
  }
  i8 = ___errno_location() | 0;
  i9 = HEAP32[i8 >> 2] | 0;
  i8 = ___errno_location() | 0;
  HEAP32[i8 >> 2] = 0;
  i8 = _strtoull_l(i1, i6, i4, __ZNSt3__26__clocEv() | 0) | 0;
  i10 = tempRet0;
  i11 = ___errno_location() | 0;
  i12 = HEAP32[i11 >> 2] | 0;
  if (!i12) {
   i11 = ___errno_location() | 0;
   HEAP32[i11 >> 2] = i9;
  }
  do if ((HEAP32[i6 >> 2] | 0) == (i2 | 0)) if (i10 >>> 0 > 0 | (i10 | 0) == 0 & i8 >>> 0 > 4294967295 | (i12 | 0) == 34) {
   HEAP32[i3 >> 2] = 4;
   i13 = -1;
   break;
  } else {
   i13 = i8;
   break;
  } else {
   HEAP32[i3 >> 2] = 4;
   i13 = 0;
  } while (0);
  i7 = i13;
 } while (0);
 STACKTOP = i5;
 return i7 | 0;
}

function __ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i5;
 do if ((i1 | 0) == (i2 | 0)) {
  HEAP32[i3 >> 2] = 4;
  i7 = 0;
 } else {
  if ((HEAP8[i1 >> 0] | 0) == 45) {
   HEAP32[i3 >> 2] = 4;
   i7 = 0;
   break;
  }
  i8 = ___errno_location() | 0;
  i9 = HEAP32[i8 >> 2] | 0;
  i8 = ___errno_location() | 0;
  HEAP32[i8 >> 2] = 0;
  i8 = _strtoull_l(i1, i6, i4, __ZNSt3__26__clocEv() | 0) | 0;
  i10 = tempRet0;
  i11 = ___errno_location() | 0;
  i12 = HEAP32[i11 >> 2] | 0;
  if (!i12) {
   i11 = ___errno_location() | 0;
   HEAP32[i11 >> 2] = i9;
  }
  do if ((HEAP32[i6 >> 2] | 0) == (i2 | 0)) if (i10 >>> 0 > 0 | (i10 | 0) == 0 & i8 >>> 0 > 4294967295 | (i12 | 0) == 34) {
   HEAP32[i3 >> 2] = 4;
   i13 = -1;
   break;
  } else {
   i13 = i8;
   break;
  } else {
   HEAP32[i3 >> 2] = 4;
   i13 = 0;
  } while (0);
  i7 = i13;
 } while (0);
 STACKTOP = i5;
 return i7 | 0;
}

function __ZN10ImDrawList15UpdateTextureIDEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i2 = HEAP32[i1 + 72 >> 2] | 0;
 if (!i2) i3 = 0; else i3 = HEAP32[(HEAP32[i1 + 80 >> 2] | 0) + (i2 + -1 << 2) >> 2] | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 do if (i2 | 0) {
  if ((i2 | 0) <= 0) ___assert_fail(38278, 56850, 1245, 38287);
  i4 = HEAP32[i1 + 8 >> 2] | 0;
  i5 = i2 + -1 | 0;
  i6 = i4 + (i5 << 5) | 0;
  if (i6 | 0) {
   i7 = (HEAP32[i6 >> 2] | 0) == 0;
   if (!i7) if ((HEAP32[i4 + (i5 << 5) + 20 >> 2] | 0) != (i3 | 0)) break;
   if (!(HEAP32[i4 + (i5 << 5) + 24 >> 2] | 0)) {
    i8 = (i2 | 0) > 1;
    i9 = i8 ? i6 + -32 | 0 : 0;
    if (i8 & i7) if ((HEAP32[i9 + 20 >> 2] | 0) == (i3 | 0)) {
     i7 = HEAP32[i1 + 60 >> 2] | 0;
     if (!i7) i10 = (HEAP32[i1 + 40 >> 2] | 0) + 20 | 0; else i10 = (HEAP32[i1 + 68 >> 2] | 0) + (i7 + -1 << 4) | 0;
     if (!(_memcmp(i9 + 4 | 0, i10, 16) | 0)) if (!(HEAP32[i9 + 24 >> 2] | 0)) {
      HEAP32[i1 >> 2] = i5;
      return;
     }
    }
    HEAP32[i4 + (i5 << 5) + 20 >> 2] = i3;
    return;
   }
  }
 } while (0);
 __ZN10ImDrawList10AddDrawCmdEv(i1);
 return;
}

function ___rem_pio2f(f1, i2) {
 f1 = Math_fround(f1);
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, d8 = 0.0, d9 = 0.0, i10 = 0, i11 = 0, i12 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i3 + 8 | 0;
 i5 = i3;
 i6 = (HEAPF32[tempDoublePtr >> 2] = f1, HEAP32[tempDoublePtr >> 2] | 0);
 i7 = i6 & 2147483647;
 do if (i7 >>> 0 < 1305022427) {
  d8 = +f1;
  d9 = d8 * .6366197723675814 + 6755399441055744.0 + -6755399441055744.0;
  HEAPF64[i2 >> 3] = d8 - d9 * 1.5707963109016418 - d9 * 1.5893254773528196e-08;
  i10 = ~~d9;
 } else {
  if (i7 >>> 0 > 2139095039) {
   d9 = +Math_fround(f1 - f1);
   HEAPF64[i2 >> 3] = d9;
   i10 = 0;
   break;
  }
  i11 = (i7 >>> 23) + -150 | 0;
  d9 = +(HEAP32[tempDoublePtr >> 2] = i7 - (i11 << 23), Math_fround(HEAPF32[tempDoublePtr >> 2]));
  HEAPF64[i4 >> 3] = d9;
  i12 = ___rem_pio2_large(i4, i5, i11, 1, 0) | 0;
  d9 = +HEAPF64[i5 >> 3];
  if ((i6 | 0) < 0) {
   HEAPF64[i2 >> 3] = -d9;
   i10 = 0 - i12 | 0;
   break;
  } else {
   HEAPF64[i2 >> 3] = d9;
   i10 = i12;
   break;
  }
 } while (0);
 STACKTOP = i3;
 return i10 | 0;
}

function __ZNSt3__26vectorIP4MeshNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i3 = i1 + 4 | 0;
 i4 = HEAP32[i1 >> 2] | 0;
 i5 = (HEAP32[i3 >> 2] | 0) - i4 | 0;
 i6 = i5 >> 2;
 i7 = i6 + 1 | 0;
 if (i7 >>> 0 > 1073741823) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv(i1);
 i8 = i1 + 8 | 0;
 i9 = (HEAP32[i8 >> 2] | 0) - i4 | 0;
 i10 = i9 >> 1;
 i11 = i9 >> 2 >>> 0 < 536870911 ? (i10 >>> 0 < i7 >>> 0 ? i7 : i10) : 1073741823;
 do if (!i11) {
  i12 = 0;
  i13 = 0;
 } else if (i11 >>> 0 > 1073741823) {
  i10 = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc(i10, 29699);
  HEAP32[i10 >> 2] = 21232;
  ___cxa_throw(i10 | 0, 3136, 120);
 } else {
  i10 = __Znwj(i11 << 2) | 0;
  i12 = i10;
  i13 = i10;
  break;
 } while (0);
 i10 = i12 + (i6 << 2) | 0;
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 if ((i5 | 0) > 0) _memcpy(i13 | 0, i4 | 0, i5 | 0) | 0;
 HEAP32[i1 >> 2] = i12;
 HEAP32[i3 >> 2] = i10 + 4;
 HEAP32[i8 >> 2] = i12 + (i11 << 2);
 if (!i4) return;
 __ZdlPv(i4);
 return;
}

function _png_handle_tIME(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4 + 8 | 0;
 i6 = i4;
 i7 = i1 + 208 | 0;
 i8 = HEAP32[i7 >> 2] | 0;
 if (!(i8 & 1)) _png_chunk_error(i1, 60665);
 if (i2 | 0) if (HEAP32[i2 + 8 >> 2] & 512 | 0) {
  _png_crc_finish(i1, i3) | 0;
  _png_chunk_benign_error(i1, 63151);
  STACKTOP = i4;
  return;
 }
 if (i8 & 4 | 0) HEAP32[i7 >> 2] = i8 | 8;
 if ((i3 | 0) != 7) {
  _png_crc_finish(i1, i3) | 0;
  _png_chunk_benign_error(i1, 61194);
  STACKTOP = i4;
  return;
 }
 _png_read_data(i1, i5, 7);
 _png_calculate_crc(i1, i5, 7);
 if (_png_crc_finish(i1, 0) | 0) {
  STACKTOP = i4;
  return;
 }
 HEAP8[i6 + 6 >> 0] = HEAP8[i5 + 6 >> 0] | 0;
 HEAP8[i6 + 5 >> 0] = HEAP8[i5 + 5 >> 0] | 0;
 HEAP8[i6 + 4 >> 0] = HEAP8[i5 + 4 >> 0] | 0;
 HEAP8[i6 + 3 >> 0] = HEAP8[i5 + 3 >> 0] | 0;
 HEAP8[i6 + 2 >> 0] = HEAP8[i5 + 2 >> 0] | 0;
 HEAP16[i6 >> 1] = (HEAPU8[i5 >> 0] | 0) << 8 | (HEAPU8[i5 + 1 >> 0] | 0);
 _png_set_tIME(i1, i2, i6);
 STACKTOP = i4;
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4;
 i6 = i4 + 1 | 0;
 HEAP8[i5 >> 0] = i2;
 i2 = i1 + 11 | 0;
 i7 = HEAP8[i2 >> 0] | 0;
 i8 = i7 << 24 >> 24 < 0;
 if (i8) {
  i9 = HEAP32[i1 + 4 >> 2] | 0;
  i10 = (HEAP32[i1 + 8 >> 2] & 2147483647) + -1 | 0;
 } else {
  i9 = i7 & 255;
  i10 = 10;
 }
 if ((i9 | 0) == (i10 | 0)) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj(i1, i10, 1, i10, i10, 0, 0);
  if ((HEAP8[i2 >> 0] | 0) < 0) i3 = 8; else i3 = 7;
 } else if (i8) i3 = 8; else i3 = 7;
 if ((i3 | 0) == 7) {
  HEAP8[i2 >> 0] = i9 + 1;
  i11 = i1;
 } else if ((i3 | 0) == 8) {
  i3 = HEAP32[i1 >> 2] | 0;
  HEAP32[i1 + 4 >> 2] = i9 + 1;
  i11 = i3;
 }
 i3 = i11 + i9 | 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc(i3, i5);
 HEAP8[i6 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc(i3 + 1 | 0, i6);
 STACKTOP = i4;
 return;
}

function ___stdio_read(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i5 = i4;
 i6 = i4 + 16 | 0;
 HEAP32[i6 >> 2] = i2;
 i7 = i6 + 4 | 0;
 i8 = i1 + 48 | 0;
 i9 = HEAP32[i8 >> 2] | 0;
 HEAP32[i7 >> 2] = i3 - ((i9 | 0) != 0 & 1);
 i10 = i1 + 44 | 0;
 HEAP32[i6 + 8 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i6 + 12 >> 2] = i9;
 HEAP32[i5 >> 2] = HEAP32[i1 + 60 >> 2];
 HEAP32[i5 + 4 >> 2] = i6;
 HEAP32[i5 + 8 >> 2] = 2;
 i6 = ___syscall_ret(___syscall145(145, i5 | 0) | 0) | 0;
 if ((i6 | 0) < 1) {
  HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | i6 & 48 ^ 16;
  i11 = i6;
 } else {
  i5 = HEAP32[i7 >> 2] | 0;
  if (i6 >>> 0 > i5 >>> 0) {
   i7 = HEAP32[i10 >> 2] | 0;
   i10 = i1 + 4 | 0;
   HEAP32[i10 >> 2] = i7;
   i9 = i7;
   HEAP32[i1 + 8 >> 2] = i9 + (i6 - i5);
   if (!(HEAP32[i8 >> 2] | 0)) i11 = i3; else {
    HEAP32[i10 >> 2] = i9 + 1;
    HEAP8[i2 + (i3 + -1) >> 0] = HEAP8[i9 >> 0] | 0;
    i11 = i3;
   }
  } else i11 = i6;
 }
 STACKTOP = i4;
 return i11 | 0;
}

function __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i3 = i1 + 4 | 0;
 i4 = HEAP32[i1 >> 2] | 0;
 i5 = (HEAP32[i3 >> 2] | 0) - i4 | 0;
 i6 = i5 >> 2;
 i7 = i6 + 1 | 0;
 if (i7 >>> 0 > 1073741823) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv(i1);
 i8 = i1 + 8 | 0;
 i9 = (HEAP32[i8 >> 2] | 0) - i4 | 0;
 i10 = i9 >> 1;
 i11 = i9 >> 2 >>> 0 < 536870911 ? (i10 >>> 0 < i7 >>> 0 ? i7 : i10) : 1073741823;
 do if (!i11) {
  i12 = 0;
  i13 = 0;
 } else if (i11 >>> 0 > 1073741823) {
  i10 = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc(i10, 29699);
  HEAP32[i10 >> 2] = 21232;
  ___cxa_throw(i10 | 0, 3136, 120);
 } else {
  i10 = __Znwj(i11 << 2) | 0;
  i12 = i10;
  i13 = i10;
  break;
 } while (0);
 i10 = i12 + (i6 << 2) | 0;
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 if ((i5 | 0) > 0) _memcpy(i13 | 0, i4 | 0, i5 | 0) | 0;
 HEAP32[i1 >> 2] = i12;
 HEAP32[i3 >> 2] = i10 + 4;
 HEAP32[i8 >> 2] = i12 + (i11 << 2);
 if (!i4) return;
 __ZdlPv(i4);
 return;
}

function _png_handle_pHYs(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4;
 i6 = HEAP32[i1 + 208 >> 2] | 0;
 if (!(i6 & 1)) _png_chunk_error(i1, 60665);
 if (i6 & 4 | 0) {
  _png_crc_finish(i1, i3) | 0;
  _png_chunk_benign_error(i1, 61181);
  STACKTOP = i4;
  return;
 }
 if (i2 | 0) if (HEAP32[i2 + 8 >> 2] & 128 | 0) {
  _png_crc_finish(i1, i3) | 0;
  _png_chunk_benign_error(i1, 63151);
  STACKTOP = i4;
  return;
 }
 if ((i3 | 0) != 9) {
  _png_crc_finish(i1, i3) | 0;
  _png_chunk_benign_error(i1, 61194);
  STACKTOP = i4;
  return;
 }
 _png_read_data(i1, i5, 9);
 _png_calculate_crc(i1, i5, 9);
 if (_png_crc_finish(i1, 0) | 0) {
  STACKTOP = i4;
  return;
 }
 _png_set_pHYs(i1, i2, (HEAPU8[i5 + 1 >> 0] | 0) << 16 | (HEAPU8[i5 >> 0] | 0) << 24 | (HEAPU8[i5 + 2 >> 0] | 0) << 8 | (HEAPU8[i5 + 3 >> 0] | 0), (HEAPU8[i5 + 5 >> 0] | 0) << 16 | (HEAPU8[i5 + 4 >> 0] | 0) << 24 | (HEAPU8[i5 + 6 >> 0] | 0) << 8 | (HEAPU8[i5 + 7 >> 0] | 0), HEAPU8[i5 + 8 >> 0] | 0);
 STACKTOP = i4;
 return;
}

function _png_handle_oFFs(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4;
 i6 = HEAP32[i1 + 208 >> 2] | 0;
 if (!(i6 & 1)) _png_chunk_error(i1, 60665);
 if (i6 & 4 | 0) {
  _png_crc_finish(i1, i3) | 0;
  _png_chunk_benign_error(i1, 61181);
  STACKTOP = i4;
  return;
 }
 if (i2 | 0) if (HEAP32[i2 + 8 >> 2] & 256 | 0) {
  _png_crc_finish(i1, i3) | 0;
  _png_chunk_benign_error(i1, 63151);
  STACKTOP = i4;
  return;
 }
 if ((i3 | 0) != 9) {
  _png_crc_finish(i1, i3) | 0;
  _png_chunk_benign_error(i1, 61194);
  STACKTOP = i4;
  return;
 }
 _png_read_data(i1, i5, 9);
 _png_calculate_crc(i1, i5, 9);
 if (_png_crc_finish(i1, 0) | 0) {
  STACKTOP = i4;
  return;
 }
 _png_set_oFFs(i1, i2, (HEAPU8[i5 + 1 >> 0] | 0) << 16 | (HEAPU8[i5 >> 0] | 0) << 24 | (HEAPU8[i5 + 2 >> 0] | 0) << 8 | (HEAPU8[i5 + 3 >> 0] | 0), (HEAPU8[i5 + 5 >> 0] | 0) << 16 | (HEAPU8[i5 + 4 >> 0] | 0) << 24 | (HEAPU8[i5 + 6 >> 0] | 0) << 8 | (HEAPU8[i5 + 7 >> 0] | 0), HEAPU8[i5 + 8 >> 0] | 0);
 STACKTOP = i4;
 return;
}

function __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i3 = i1 + 4 | 0;
 i4 = HEAP32[i1 >> 2] | 0;
 i5 = (HEAP32[i3 >> 2] | 0) - i4 | 0;
 i6 = i5 >> 2;
 i7 = i6 + 1 | 0;
 if (i7 >>> 0 > 1073741823) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv(i1);
 i8 = i1 + 8 | 0;
 i9 = (HEAP32[i8 >> 2] | 0) - i4 | 0;
 i10 = i9 >> 1;
 i11 = i9 >> 2 >>> 0 < 536870911 ? (i10 >>> 0 < i7 >>> 0 ? i7 : i10) : 1073741823;
 do if (!i11) {
  i12 = 0;
  i13 = 0;
 } else if (i11 >>> 0 > 1073741823) {
  i10 = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc(i10, 29699);
  HEAP32[i10 >> 2] = 21232;
  ___cxa_throw(i10 | 0, 3136, 120);
 } else {
  i10 = __Znwj(i11 << 2) | 0;
  i12 = i10;
  i13 = i10;
  break;
 } while (0);
 i10 = i12 + (i6 << 2) | 0;
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 if ((i5 | 0) > 0) _memcpy(i13 | 0, i4 | 0, i5 | 0) | 0;
 HEAP32[i1 >> 2] = i12;
 HEAP32[i3 >> 2] = i10 + 4;
 HEAP32[i8 >> 2] = i12 + (i11 << 2);
 if (!i4) return;
 __ZdlPv(i4);
 return;
}

function __ZN5ImGui11FocusWindowEP11ImGuiWindow(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = HEAP32[1460598] | 0;
 i3 = i2 + 6644 | 0;
 if ((HEAP32[i3 >> 2] | 0) != (i1 | 0)) {
  HEAP32[i3 >> 2] = i1;
  if (!i1) {
   HEAP8[i2 + 6733 >> 0] = 0;
   i4 = 0;
  } else {
   if (HEAP8[i2 + 6731 >> 0] | 0) HEAP8[i2 + 6729 >> 0] = 1;
   HEAP8[i2 + 6733 >> 0] = 0;
   i4 = HEAP32[i1 + 776 >> 2] | 0;
  }
  HEAP32[i2 + 6648 >> 2] = i4;
  HEAP8[i2 + 6728 >> 0] = 0;
  HEAP32[i2 + 6720 >> 2] = 0;
 }
 if (!i1) return;
 i4 = HEAP32[i1 + 756 >> 2] | 0;
 i3 = (i4 | 0) == 0 ? i1 : i4;
 i4 = HEAP32[i3 + 8 >> 2] | 0;
 if (i4 & 67108864 | 0) {
  i1 = i2 + 6420 | 0;
  if (HEAP32[i1 >> 2] | 0) {
   i5 = i2 + 6452 | 0;
   i6 = HEAP32[i5 >> 2] | 0;
   if (i6 | 0) if ((HEAP32[i6 + 756 >> 2] | 0) != (i3 | 0)) {
    HEAP8[i2 + 6433 >> 0] = 1;
    HEAPF32[i2 + 6428 >> 2] = Math_fround(0.0);
    HEAP8[i2 + 6435 >> 0] = 0;
    HEAP32[i1 >> 2] = 0;
    HEAP32[i2 + 6440 >> 2] = 0;
    HEAP8[i2 + 6434 >> 0] = 0;
    HEAP32[i5 >> 2] = 0;
   }
  }
 }
 if (i4 & 8192 | 0) return;
 __ZN5ImGui18BringWindowToFrontEP11ImGuiWindow(i3);
 return;
}

function __ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i5;
 if ((i1 | 0) == (i2 | 0)) {
  HEAP32[i3 >> 2] = 4;
  i7 = 0;
  i8 = 0;
 } else {
  i9 = ___errno_location() | 0;
  i10 = HEAP32[i9 >> 2] | 0;
  i9 = ___errno_location() | 0;
  HEAP32[i9 >> 2] = 0;
  i9 = _strtoll_l(i1, i6, i4, __ZNSt3__26__clocEv() | 0) | 0;
  i4 = tempRet0;
  i1 = ___errno_location() | 0;
  i11 = HEAP32[i1 >> 2] | 0;
  if (!i11) {
   i1 = ___errno_location() | 0;
   HEAP32[i1 >> 2] = i10;
  }
  if ((HEAP32[i6 >> 2] | 0) == (i2 | 0)) if ((i11 | 0) == 34) {
   HEAP32[i3 >> 2] = 4;
   i11 = (i4 | 0) > 0 | (i4 | 0) == 0 & i9 >>> 0 > 0;
   i12 = i11 ? -1 : 0;
   i13 = i11 ? 2147483647 : -2147483648;
  } else {
   i12 = i9;
   i13 = i4;
  } else {
   HEAP32[i3 >> 2] = 4;
   i12 = 0;
   i13 = 0;
  }
  i7 = i13;
  i8 = i12;
 }
 tempRet0 = i7;
 STACKTOP = i5;
 return i8 | 0;
}

function __ZN5ImGui15PushTextWrapPosEf(f1) {
 f1 = Math_fround(f1);
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = HEAP32[(HEAP32[1460598] | 0) + 6392 >> 2] | 0;
 HEAP8[i2 + 120 >> 0] = 1;
 HEAPF32[i2 + 360 >> 2] = f1;
 i3 = i2 + 388 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 i5 = i2 + 392 | 0;
 if ((i4 | 0) == (HEAP32[i5 >> 2] | 0)) {
  i6 = i4 + 1 | 0;
  if (!i4) i7 = 8; else i7 = ((i4 | 0) / 2 | 0) + i4 | 0;
  i8 = (i7 | 0) > (i6 | 0) ? i7 : i6;
  if ((i4 | 0) < (i8 | 0)) {
   HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
   i6 = __ZL13MallocWrapperjPv(i8 << 2, 0) | 0;
   i7 = i2 + 396 | 0;
   i9 = HEAP32[i7 >> 2] | 0;
   if (!i9) i10 = i7; else {
    _memcpy(i6 | 0, i9 | 0, HEAP32[i3 >> 2] << 2 | 0) | 0;
    i9 = HEAP32[i7 >> 2] | 0;
    if (i9 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
    __ZL11FreeWrapperPvS_(i9, 0);
    i10 = i7;
   }
   HEAP32[i10 >> 2] = i6;
   HEAP32[i5 >> 2] = i8;
   i11 = HEAP32[i3 >> 2] | 0;
  } else i11 = i4;
 } else i11 = i4;
 HEAPF32[(HEAP32[i2 + 396 >> 2] | 0) + (i11 << 2) >> 2] = f1;
 HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
 return;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEPKwj(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4;
 i6 = i1 + 8 | 0;
 i7 = i6 + 3 | 0;
 i8 = HEAP8[i7 >> 0] | 0;
 i9 = i8 << 24 >> 24 < 0;
 if (i9) {
  i10 = HEAP32[i1 + 4 >> 2] | 0;
  i11 = (HEAP32[i6 >> 2] & 2147483647) + -1 | 0;
 } else {
  i10 = i8 & 255;
  i11 = 1;
 }
 if ((i11 - i10 | 0) >>> 0 < i3 >>> 0) __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw(i1, i11, i3 - i11 + i10 | 0, i10, i10, 0, i3, i2); else if (i3 | 0) {
  if (i9) i12 = HEAP32[i1 >> 2] | 0; else i12 = i1;
  __ZNSt3__211char_traitsIwE4copyEPwPKwj(i12 + (i10 << 2) | 0, i2, i3) | 0;
  i2 = i10 + i3 | 0;
  if ((HEAP8[i7 >> 0] | 0) < 0) HEAP32[i1 + 4 >> 2] = i2; else HEAP8[i7 >> 0] = i2;
  HEAP32[i5 >> 2] = 0;
  __ZNSt3__211char_traitsIwE6assignERwRKw(i12 + (i2 << 2) | 0, i5);
 }
 STACKTOP = i4;
 return i1 | 0;
}

function _wcrtomb(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 do if (!i1) i4 = 1; else {
  if (i2 >>> 0 < 128) {
   HEAP8[i1 >> 0] = i2;
   i4 = 1;
   break;
  }
  i3 = (___pthread_self_68() | 0) + 188 | 0;
  if (!(HEAP32[HEAP32[i3 >> 2] >> 2] | 0)) if ((i2 & -128 | 0) == 57216) {
   HEAP8[i1 >> 0] = i2;
   i4 = 1;
   break;
  } else {
   i3 = ___errno_location() | 0;
   HEAP32[i3 >> 2] = 84;
   i4 = -1;
   break;
  }
  if (i2 >>> 0 < 2048) {
   HEAP8[i1 >> 0] = i2 >>> 6 | 192;
   HEAP8[i1 + 1 >> 0] = i2 & 63 | 128;
   i4 = 2;
   break;
  }
  if (i2 >>> 0 < 55296 | (i2 & -8192 | 0) == 57344) {
   HEAP8[i1 >> 0] = i2 >>> 12 | 224;
   HEAP8[i1 + 1 >> 0] = i2 >>> 6 & 63 | 128;
   HEAP8[i1 + 2 >> 0] = i2 & 63 | 128;
   i4 = 3;
   break;
  }
  if ((i2 + -65536 | 0) >>> 0 < 1048576) {
   HEAP8[i1 >> 0] = i2 >>> 18 | 240;
   HEAP8[i1 + 1 >> 0] = i2 >>> 12 & 63 | 128;
   HEAP8[i1 + 2 >> 0] = i2 >>> 6 & 63 | 128;
   HEAP8[i1 + 3 >> 0] = i2 & 63 | 128;
   i4 = 4;
   break;
  } else {
   i3 = ___errno_location() | 0;
   HEAP32[i3 >> 2] = 84;
   i4 = -1;
   break;
  }
 } while (0);
 return i4 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4;
 if (i2 | 0) {
  i6 = i1 + 11 | 0;
  i7 = HEAP8[i6 >> 0] | 0;
  if (i7 << 24 >> 24 < 0) {
   i8 = HEAP32[i1 + 4 >> 2] | 0;
   i9 = (HEAP32[i1 + 8 >> 2] & 2147483647) + -1 | 0;
  } else {
   i8 = i7 & 255;
   i9 = 10;
  }
  if ((i9 - i8 | 0) >>> 0 < i2 >>> 0) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj(i1, i9, i2 - i9 + i8 | 0, i8, i8, 0, 0);
   i10 = HEAP8[i6 >> 0] | 0;
  } else i10 = i7;
  if (i10 << 24 >> 24 < 0) i11 = HEAP32[i1 >> 2] | 0; else i11 = i1;
  __ZNSt3__211char_traitsIcE6assignEPcjc(i11 + i8 | 0, i2, i3) | 0;
  i3 = i8 + i2 | 0;
  if ((HEAP8[i6 >> 0] | 0) < 0) HEAP32[i1 + 4 >> 2] = i3; else HEAP8[i6 >> 0] = i3;
  HEAP8[i5 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc(i11 + i3 | 0, i5);
 }
 STACKTOP = i4;
 return i1 | 0;
}

function _png_image_free_function(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i3 = i2;
 i4 = HEAP32[i1 >> 2] | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 if (!i5) {
  i6 = 0;
  STACKTOP = i2;
  return i6 | 0;
 }
 i7 = i4 + 20 | 0;
 i8 = HEAP8[i7 >> 0] | 0;
 if (i8 & 2) {
  i9 = i5 + 188 | 0;
  i5 = HEAP32[i9 >> 2] | 0;
  HEAP8[i7 >> 0] = i8 & -3;
  if (i5 | 0) {
   HEAP32[i9 >> 2] = 0;
   _fclose(i5) | 0;
  }
 };
 HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
 HEAP32[i3 + 16 >> 2] = HEAP32[i4 + 16 >> 2];
 HEAP32[i3 + 20 >> 2] = HEAP32[i4 + 20 >> 2];
 HEAP32[i1 >> 2] = i3;
 _png_free(HEAP32[i3 >> 2] | 0, i4);
 i4 = i3 + 4 | 0;
 if (!(HEAP8[i3 + 20 >> 0] & 1)) {
  _png_destroy_read_struct(i3, i4, 0);
  i6 = 1;
  STACKTOP = i2;
  return i6 | 0;
 } else {
  _png_destroy_write_struct(i3, i4);
  i6 = 1;
  STACKTOP = i2;
  return i6 | 0;
 }
 return 0;
}

function __ZN5ImGui26GetContentRegionAvailWidthEv() {
 var i1 = 0, f2 = f0, f3 = f0, f4 = f0, i5 = 0, f6 = f0, i7 = 0, f8 = f0, f9 = f0, f10 = f0, i11 = 0, i12 = 0, f13 = f0;
 i1 = HEAP32[(HEAP32[1460598] | 0) + 6392 >> 2] | 0;
 f2 = Math_fround(HEAPF32[i1 + 536 >> 2]);
 f3 = Math_fround(HEAPF32[i1 + 12 >> 2]);
 f4 = Math_fround(f2 - f3);
 i5 = HEAP32[i1 + 448 >> 2] | 0;
 if (!i5) {
  f6 = f4;
  i7 = i1 + 196 | 0;
  f8 = Math_fround(HEAPF32[i7 >> 2]);
  f9 = Math_fround(f8 - f3);
  f10 = Math_fround(f6 - f9);
  return Math_fround(f10);
 }
 i11 = HEAP32[i5 + 12 >> 2] | 0;
 i12 = i11 + ((i11 | 0) > -2 & 1) | 0;
 if ((i12 | 0) >= (HEAP32[i5 + 44 >> 2] | 0)) ___assert_fail(32132, 31803, 13059, 32169);
 f4 = Math_fround(HEAPF32[(HEAP32[i5 + 52 >> 2] | 0) + (i12 * 28 | 0) >> 2]);
 f2 = Math_fround(HEAPF32[i5 + 20 >> 2]);
 f13 = Math_fround(f2 + Math_fround(f4 * Math_fround(Math_fround(HEAPF32[i5 + 24 >> 2]) - f2)));
 f6 = Math_fround(f13 - Math_fround(HEAPF32[i1 + 60 >> 2]));
 i7 = i1 + 196 | 0;
 f8 = Math_fround(HEAPF32[i7 >> 2]);
 f9 = Math_fround(f8 - f3);
 f10 = Math_fround(f6 - f9);
 return Math_fround(f10);
}

function __ZN5ImGui7EndMenuEv() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i1 = HEAP32[1460598] | 0;
 i2 = HEAP32[i1 + 6392 >> 2] | 0;
 i3 = HEAP32[i1 + 6644 >> 2] | 0;
 if (!i3) i4 = i1; else if ((HEAP32[i3 + 752 >> 2] | 0) == (i2 | 0)) if (!(HEAP32[i1 + 6768 >> 2] | 0)) if (!(HEAP8[i1 + 6757 >> 0] | 0)) i4 = i1; else if (!(HEAP32[i1 + 6780 >> 2] | 0)) if (!(HEAP32[i1 + 6852 >> 2] | 0)) if (!(HEAP32[i2 + 344 >> 2] | 0)) {
  __ZL17ClosePopupToLeveli((HEAP32[i1 + 6512 >> 2] | 0) + -1 | 0);
  i2 = HEAP32[1460598] | 0;
  HEAP8[i2 + 6757 >> 0] = 0;
  i3 = HEAP8[i2 + 6733 >> 0] | 0;
  HEAP8[i2 + 6732 >> 0] = i3;
  if (!(i3 << 24 >> 24)) i4 = i2; else if (!(HEAP32[i2 + 6644 >> 2] | 0)) ___assert_fail(34237, 31803, 2509, 34255); else i4 = i2;
 } else i4 = i1; else i4 = i1; else i4 = i1; else i4 = i1; else i4 = i1;
 i1 = HEAP32[i4 + 6392 >> 2] | 0;
 if (!(HEAP32[i1 + 8 >> 2] & 67108864)) ___assert_fail(37694, 31803, 5372, 37742);
 if ((HEAP32[i4 + 6524 >> 2] | 0) > 0) {
  __ZN5ImGui25NavMoveRequestTryWrappingEP11ImGuiWindowi(i1, 2);
  __ZN5ImGui3EndEv();
  return;
 } else ___assert_fail(37751, 31803, 5373, 37742);
}

function _png_set_rgb_to_gray_fixed(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0;
 if (!i1) return;
 i5 = i1 + 212 | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 if (i6 & 64 | 0) {
  _png_app_error(i1, 58866);
  return;
 }
 if (!(HEAP32[i1 + 208 >> 2] & 1)) {
  _png_app_error(i1, 59120);
  return;
 }
 HEAP32[i5 >> 2] = i6 | 16384;
 switch (i2 | 0) {
 case 1:
  {
   i7 = 6291456;
   break;
  }
 case 2:
  {
   i7 = 4194304;
   break;
  }
 case 3:
  {
   i7 = 2097152;
   break;
  }
 default:
  _png_error(i1, 59164);
 }
 i2 = i1 + 216 | 0;
 i6 = HEAP32[i2 >> 2] | i7;
 HEAP32[i2 >> 2] = i6;
 if ((HEAP8[i1 + 435 >> 0] | 0) == 3) HEAP32[i2 >> 2] = i6 | 4096;
 i6 = (i4 | i3 | 0) > -1;
 if (i6 & (i4 + i3 | 0) < 100001) {
  HEAP16[i1 + 702 >> 1] = (i3 << 15 >>> 0) / 1e5 | 0;
  HEAP16[i1 + 704 >> 1] = (i4 << 15 >>> 0) / 1e5 | 0;
  HEAP8[i1 + 701 >> 0] = 1;
  return;
 }
 if (i6) _png_app_warning(i1, 59200);
 i6 = i1 + 702 | 0;
 if (HEAP16[i6 >> 1] | 0) return;
 i4 = i1 + 704 | 0;
 if (HEAP16[i4 >> 1] | 0) return;
 HEAP16[i6 >> 1] = 6968;
 HEAP16[i4 >> 1] = 23434;
 return;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4;
 i6 = i1 + 8 | 0;
 i7 = i6 + 3 | 0;
 i8 = HEAP8[i7 >> 0] | 0;
 i9 = i8 << 24 >> 24 < 0;
 if (i9) i10 = (HEAP32[i6 >> 2] & 2147483647) + -1 | 0; else i10 = 1;
 do if (i10 >>> 0 < i3 >>> 0) {
  if (i9) i11 = HEAP32[i1 + 4 >> 2] | 0; else i11 = i8 & 255;
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw(i1, i10, i3 - i10 | 0, i11, 0, i11, i3, i2);
 } else {
  if (i9) i12 = HEAP32[i1 >> 2] | 0; else i12 = i1;
  __ZNSt3__211char_traitsIwE4moveEPwPKwj(i12, i2, i3) | 0;
  HEAP32[i5 >> 2] = 0;
  __ZNSt3__211char_traitsIwE6assignERwRKw(i12 + (i3 << 2) | 0, i5);
  if ((HEAP8[i7 >> 0] | 0) < 0) {
   HEAP32[i1 + 4 >> 2] = i3;
   break;
  } else {
   HEAP8[i7 >> 0] = i3;
   break;
  }
 } while (0);
 STACKTOP = i4;
 return i1 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i3;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 if ((HEAP8[i2 + 11 >> 0] | 0) < 0) {
  i5 = HEAP32[i2 >> 2] | 0;
  i6 = HEAP32[i2 + 4 >> 2] | 0;
  if (i6 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i1);
  if (i6 >>> 0 < 11) {
   HEAP8[i1 + 11 >> 0] = i6;
   i7 = i1;
  } else {
   i8 = i6 + 16 & -16;
   i9 = __Znwj(i8) | 0;
   HEAP32[i1 >> 2] = i9;
   HEAP32[i1 + 8 >> 2] = i8 | -2147483648;
   HEAP32[i1 + 4 >> 2] = i6;
   i7 = i9;
  }
  __ZNSt3__211char_traitsIcE4copyEPcPKcj(i7, i5, i6) | 0;
  HEAP8[i4 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc(i7 + i6 | 0, i4);
 } else {
  HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 }
 STACKTOP = i3;
 return;
}

function __ZNSt3__26__treeINS_12__value_typeIiNS_3mapIP4MeshNS_4listIN11RenderQueue9TransformENS_9allocatorIS7_EEEENS_4lessIS4_EENS8_INS_4pairIKS4_SA_EEEEEEEENS_19__map_value_compareIiSI_NSB_IiEELb1EEENS8_ISI_EEE7destroyEPNS_11__tree_nodeISI_PvEE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (!i2) return; else {
  __ZNSt3__26__treeINS_12__value_typeIiNS_3mapIP4MeshNS_4listIN11RenderQueue9TransformENS_9allocatorIS7_EEEENS_4lessIS4_EENS8_INS_4pairIKS4_SA_EEEEEEEENS_19__map_value_compareIiSI_NSB_IiEELb1EEENS8_ISI_EEE7destroyEPNS_11__tree_nodeISI_PvEE(i1, HEAP32[i2 >> 2] | 0);
  __ZNSt3__26__treeINS_12__value_typeIiNS_3mapIP4MeshNS_4listIN11RenderQueue9TransformENS_9allocatorIS7_EEEENS_4lessIS4_EENS8_INS_4pairIKS4_SA_EEEEEEEENS_19__map_value_compareIiSI_NSB_IiEELb1EEENS8_ISI_EEE7destroyEPNS_11__tree_nodeISI_PvEE(i1, HEAP32[i2 + 4 >> 2] | 0);
  __ZNSt3__26__treeINS_12__value_typeIP4MeshNS_4listIN11RenderQueue9TransformENS_9allocatorIS6_EEEEEENS_19__map_value_compareIS3_SA_NS_4lessIS3_EELb1EEENS7_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE(i2 + 20 | 0, HEAP32[i2 + 24 >> 2] | 0);
  __ZdlPv(i2);
  return;
 }
}

function __ZN10ImDrawList9AddCircleERK6ImVec2fjif(i1, i2, f3, i4, i5, f6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 f3 = Math_fround(f3);
 i4 = i4 | 0;
 i5 = i5 | 0;
 f6 = Math_fround(f6);
 var f7 = f0, i8 = 0, i9 = 0, i10 = 0;
 if (i4 >>> 0 < 16777216) return;
 f7 = Math_fround(i5 | 0);
 __ZN10ImDrawList9PathArcToERK6ImVec2fffi(i1, i2, Math_fround(f3 + Math_fround(-.5)), Math_fround(0.0), Math_fround(Math_fround(Math_fround(f7 + Math_fround(-1.0)) * Math_fround(6.28318548)) / f7), i5);
 i5 = i1 + 92 | 0;
 __ZN10ImDrawList11AddPolylineEPK6ImVec2ijbf(i1, HEAP32[i5 >> 2] | 0, HEAP32[i1 + 84 >> 2] | 0, i4, 1, f6);
 i4 = i1 + 84 | 0;
 i2 = i1 + 88 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if ((i1 | 0) < 0) {
  i8 = ((i1 | 0) / 2 | 0) + i1 | 0;
  i9 = (i8 | 0) > 0 ? i8 : 0;
  if ((i1 | 0) < (i9 | 0)) {
   i1 = __ZN5ImGui8MemAllocEj(i9 << 3) | 0;
   i8 = HEAP32[i5 >> 2] | 0;
   if (!i8) i10 = i5; else {
    _memcpy(i1 | 0, i8 | 0, HEAP32[i4 >> 2] << 3 | 0) | 0;
    __ZN5ImGui7MemFreeEPv(HEAP32[i5 >> 2] | 0);
    i10 = i5;
   }
   HEAP32[i10 >> 2] = i1;
   HEAP32[i2 >> 2] = i9;
  }
 }
 HEAP32[i4 >> 2] = 0;
 return;
}

function ___newlocale(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i5 = i4;
 L1 : do if (!(___loc_is_allocated(i3) | 0)) {
  i6 = (i3 | 0) != 0;
  i7 = 0;
  i8 = 0;
  do {
   i9 = 1 << i8 & i1;
   if (i6 & (i9 | 0) == 0) i10 = HEAP32[i3 + (i8 << 2) >> 2] | 0; else i10 = ___get_locale(i8, i9 | 0 ? i2 : 5849359) | 0;
   i7 = i7 + ((i10 | 0) != 0 & 1) | 0;
   HEAP32[i5 + (i8 << 2) >> 2] = i10;
   i8 = i8 + 1 | 0;
  } while ((i8 | 0) != 6);
  switch (i7 | 0) {
  case 0:
   {
    i11 = 5844084;
    break L1;
    break;
   }
  case 1:
   {
    if ((HEAP32[i5 >> 2] | 0) == 13800) {
     i11 = 13848;
     break L1;
    }
    break;
   }
  default:
   {}
  }
  i11 = i3;
 } else {
  i8 = 0;
  do {
   if (1 << i8 & i1 | 0) {
    i6 = ___get_locale(i8, i2) | 0;
    HEAP32[i3 + (i8 << 2) >> 2] = i6;
   }
   i8 = i8 + 1 | 0;
  } while ((i8 | 0) != 6);
  i11 = i3;
 } while (0);
 STACKTOP = i4;
 return i11 | 0;
}

function __ZNSt3__26vectorItNS_9allocatorItEEE21__push_back_slow_pathItEEvOT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i3 = i1 + 4 | 0;
 i4 = HEAP32[i1 >> 2] | 0;
 i5 = (HEAP32[i3 >> 2] | 0) - i4 | 0;
 i6 = i5 >> 1;
 i7 = i6 + 1 | 0;
 if ((i5 | 0) < -2) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv(i1);
 i8 = i1 + 8 | 0;
 i9 = (HEAP32[i8 >> 2] | 0) - i4 | 0;
 i10 = i9 >> 1 >>> 0 < 1073741823 ? (i9 >>> 0 < i7 >>> 0 ? i7 : i9) : 2147483647;
 do if (!i10) {
  i11 = 0;
  i12 = 0;
 } else if ((i10 | 0) < 0) {
  i9 = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc(i9, 29699);
  HEAP32[i9 >> 2] = 21232;
  ___cxa_throw(i9 | 0, 3136, 120);
 } else {
  i9 = __Znwj(i10 << 1) | 0;
  i11 = i9;
  i12 = i9;
  break;
 } while (0);
 i9 = i11 + (i6 << 1) | 0;
 HEAP16[i9 >> 1] = HEAP16[i2 >> 1] | 0;
 if ((i5 | 0) > 0) _memcpy(i12 | 0, i4 | 0, i5 | 0) | 0;
 HEAP32[i1 >> 2] = i11;
 HEAP32[i3 >> 2] = i9 + 2;
 HEAP32[i8 >> 2] = i11 + (i10 << 1);
 if (!i4) return;
 __ZdlPv(i4);
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i10 = i7 + 4 | 0;
 i11 = i7;
 i12 = i1 + 8 | 0;
 i13 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i12 >> 2] | 0) + 20 >> 2] & 127](i12) | 0;
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i3 >> 2];
 i3 = HEAP8[i13 + 8 + 3 >> 0] | 0;
 i2 = i3 << 24 >> 24 < 0;
 i12 = i2 ? HEAP32[i13 >> 2] | 0 : i13;
 i14 = i12 + ((i2 ? HEAP32[i13 + 4 >> 2] | 0 : i3 & 255) << 2) | 0;
 HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i11 >> 2];
 i11 = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i1, i9, i8, i4, i5, i6, i12, i14) | 0;
 STACKTOP = i7;
 return i11 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4;
 i6 = i1 + 11 | 0;
 i7 = HEAP8[i6 >> 0] | 0;
 i8 = i7 << 24 >> 24 < 0;
 if (i8) {
  i9 = HEAP32[i1 + 4 >> 2] | 0;
  i10 = (HEAP32[i1 + 8 >> 2] & 2147483647) + -1 | 0;
 } else {
  i9 = i7 & 255;
  i10 = 10;
 }
 if ((i10 - i9 | 0) >>> 0 < i3 >>> 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc(i1, i10, i3 - i10 + i9 | 0, i9, i9, 0, i3, i2); else if (i3 | 0) {
  if (i8) i11 = HEAP32[i1 >> 2] | 0; else i11 = i1;
  __ZNSt3__211char_traitsIcE4copyEPcPKcj(i11 + i9 | 0, i2, i3) | 0;
  i2 = i9 + i3 | 0;
  if ((HEAP8[i6 >> 0] | 0) < 0) HEAP32[i1 + 4 >> 2] = i2; else HEAP8[i6 >> 0] = i2;
  HEAP8[i5 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc(i11 + i2 | 0, i5);
 }
 STACKTOP = i4;
 return i1 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4;
 i6 = i1 + 11 | 0;
 i7 = HEAP8[i6 >> 0] | 0;
 i8 = i7 << 24 >> 24 < 0;
 if (i8) i9 = (HEAP32[i1 + 8 >> 2] & 2147483647) + -1 | 0; else i9 = 10;
 do if (i9 >>> 0 < i3 >>> 0) {
  if (i8) i10 = HEAP32[i1 + 4 >> 2] | 0; else i10 = i7 & 255;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc(i1, i9, i3 - i9 | 0, i10, 0, i10, i3, i2);
 } else {
  if (i8) i11 = HEAP32[i1 >> 2] | 0; else i11 = i1;
  __ZNSt3__211char_traitsIcE4moveEPcPKcj(i11, i2, i3) | 0;
  HEAP8[i5 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc(i11 + i3 | 0, i5);
  if ((HEAP8[i6 >> 0] | 0) < 0) {
   HEAP32[i1 + 4 >> 2] = i3;
   break;
  } else {
   HEAP8[i6 >> 0] = i3;
   break;
  }
 } while (0);
 STACKTOP = i4;
 return i1 | 0;
}

function __ZNSt3__212_GLOBAL__N_117as_integer_helperIlNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFlPKcPPciEEET_RKS7_RKT0_PjiT1_(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i5;
 HEAP32[i6 >> 2] = 0;
 i7 = (HEAP8[i2 + 11 >> 0] | 0) < 0 ? HEAP32[i2 >> 2] | 0 : i2;
 i2 = ___errno_location() | 0;
 i8 = HEAP32[i2 >> 2] | 0;
 i2 = ___errno_location() | 0;
 HEAP32[i2 >> 2] = 0;
 i2 = _strtol(i7, i6, i4) | 0;
 i4 = ___errno_location() | 0;
 i9 = HEAP32[i4 >> 2] | 0;
 HEAP32[i4 >> 2] = i8;
 if ((i9 | 0) == 34) __ZNSt3__212_GLOBAL__N_130throw_from_string_out_of_rangeERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(i1);
 i9 = HEAP32[i6 >> 2] | 0;
 if ((i9 | 0) == (i7 | 0)) __ZNSt3__212_GLOBAL__N_129throw_from_string_invalid_argERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(i1);
 if (i3 | 0) HEAP32[i3 >> 2] = i9 - i7;
 STACKTOP = i5;
 return i2 | 0;
}

function __ZNSt3__24listIN11RenderQueue9TransformENS_9allocatorIS2_EEEC2ERKS5_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 HEAP32[i1 >> 2] = i1;
 HEAP32[i1 + 4 >> 2] = i1;
 i3 = i1 + 8 | 0;
 HEAP32[i3 >> 2] = 0;
 i4 = HEAP32[i2 + 4 >> 2] | 0;
 i5 = i4;
 if ((i2 | 0) == (i5 | 0)) return;
 i6 = i4;
 i4 = i5;
 do {
  i5 = i6;
  i7 = __Znwj(104) | 0;
  i8 = i5 + 8 | 0;
  i9 = i7 + 8 | 0;
  i10 = i9;
  i11 = i8;
  i12 = i10 + 76 | 0;
  do {
   HEAP32[i10 >> 2] = HEAP32[i11 >> 2];
   i10 = i10 + 4 | 0;
   i11 = i11 + 4 | 0;
  } while ((i10 | 0) < (i12 | 0));
  HEAP8[i9 + 76 >> 0] = HEAP8[i8 + 76 >> 0] | 0;
  __ZNSt3__26vectorIiNS_9allocatorIiEEEC2ERKS3_(i7 + 88 | 0, i5 + 88 | 0);
  HEAP8[i7 + 100 >> 0] = HEAP8[i5 + 100 >> 0] | 0;
  HEAP32[i7 + 4 >> 2] = i1;
  i11 = HEAP32[i1 >> 2] | 0;
  HEAP32[i7 >> 2] = i11;
  HEAP32[i11 + 4 >> 2] = i7;
  HEAP32[i1 >> 2] = i7;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
  i6 = HEAP32[i4 + 4 >> 2] | 0;
  i4 = i6;
 } while ((i2 | 0) != (i4 | 0));
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i10 = i7 + 4 | 0;
 i11 = i7;
 i12 = i1 + 8 | 0;
 i13 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i12 >> 2] | 0) + 20 >> 2] & 127](i12) | 0;
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i3 >> 2];
 i3 = HEAP8[i13 + 11 >> 0] | 0;
 i2 = i3 << 24 >> 24 < 0;
 i12 = i2 ? HEAP32[i13 >> 2] | 0 : i13;
 i14 = i12 + (i2 ? HEAP32[i13 + 4 >> 2] | 0 : i3 & 255) | 0;
 HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i11 >> 2];
 i11 = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i1, i9, i8, i4, i5, i6, i12, i14) | 0;
 STACKTOP = i7;
 return i11 | 0;
}

function _png_cache_unknown_chunk(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = 0;
 i4 = i1 + 772 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 if (i5 | 0) {
  _png_free(i1, i5);
  HEAP32[i4 >> 2] = 0;
 }
 i5 = HEAP32[i1 + 760 >> 2] | 0;
 switch (i5 | 0) {
 case -1:
 case 0:
  {
   i3 = 5;
   break;
  }
 default:
  if (i5 >>> 0 < i2 >>> 0) i6 = 0; else i3 = 5;
 }
 if ((i3 | 0) == 5) {
  i3 = HEAP32[i1 + 376 >> 2] | 0;
  HEAP8[i1 + 764 >> 0] = i3 >>> 24;
  HEAP8[i1 + 765 >> 0] = i3 >>> 16;
  HEAP8[i1 + 766 >> 0] = i3 >>> 8;
  HEAP8[i1 + 767 >> 0] = i3;
  HEAP8[i1 + 768 >> 0] = 0;
  HEAP32[i1 + 776 >> 2] = i2;
  HEAP8[i1 + 780 >> 0] = HEAP32[i1 + 208 >> 2];
  if (!i2) i7 = 0; else i7 = _png_malloc_warn(i1, i2) | 0;
  HEAP32[i4 >> 2] = i7;
  i6 = i7;
 }
 i7 = (i2 | 0) != 0;
 if (i7 & (i6 | 0) == 0) {
  _png_crc_finish(i1, i2) | 0;
  _png_chunk_benign_error(i1, 63692);
  i8 = 0;
  return i8 | 0;
 }
 if (i7) {
  _png_read_data(i1, i6, i2);
  _png_calculate_crc(i1, i6, i2);
 }
 _png_crc_finish(i1, 0) | 0;
 i8 = 1;
 return i8 | 0;
}

function __ZL20stbtt__GetGlyfOffsetPK14stbtt_fontinfoi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 if (HEAP32[i1 + 60 >> 2] | 0) ___assert_fail(55022, 50789, 1556, 55038);
 if ((HEAP32[i1 + 12 >> 2] | 0) <= (i2 | 0)) {
  i3 = -1;
  return i3 | 0;
 }
 i4 = HEAP32[i1 + 48 >> 2] | 0;
 if ((i4 | 0) > 1) {
  i3 = -1;
  return i3 | 0;
 }
 i5 = HEAP32[i1 + 24 >> 2] | 0;
 i6 = (HEAP32[i1 + 4 >> 2] | 0) + (HEAP32[i1 + 16 >> 2] | 0) | 0;
 if (!i4) {
  i4 = i6 + (i2 << 1) | 0;
  i1 = i4 + 2 | 0;
  i7 = ((HEAPU8[i4 >> 0] | 0) << 8 | (HEAPU8[i4 + 1 >> 0] | 0)) << 1;
  i8 = ((HEAPU8[i1 >> 0] | 0) << 8 | (HEAPU8[i1 + 1 >> 0] | 0)) << 1;
 } else {
  i1 = i6 + (i2 << 2) | 0;
  i2 = i1 + 4 | 0;
  i7 = (HEAPU8[i1 + 1 >> 0] | 0) << 16 | (HEAPU8[i1 >> 0] | 0) << 24 | (HEAPU8[i1 + 2 >> 0] | 0) << 8 | (HEAPU8[i1 + 3 >> 0] | 0);
  i8 = (HEAPU8[i2 + 1 >> 0] | 0) << 16 | (HEAPU8[i2 >> 0] | 0) << 24 | (HEAPU8[i2 + 2 >> 0] | 0) << 8 | (HEAPU8[i2 + 3 >> 0] | 0);
 }
 i2 = i7 + i5 | 0;
 i3 = (i2 | 0) == (i8 + i5 | 0) ? -1 : i2;
 return i3 | 0;
}

function _png_handle_sRGB(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4;
 i6 = HEAP32[i1 + 208 >> 2] | 0;
 if (!(i6 & 1)) _png_chunk_error(i1, 60665);
 if (i6 & 6 | 0) {
  _png_crc_finish(i1, i3) | 0;
  _png_chunk_benign_error(i1, 61181);
  STACKTOP = i4;
  return;
 }
 if ((i3 | 0) != 1) {
  _png_crc_finish(i1, i3) | 0;
  _png_chunk_benign_error(i1, 61194);
  STACKTOP = i4;
  return;
 }
 _png_read_data(i1, i5, 1);
 _png_calculate_crc(i1, i5, 1);
 if (_png_crc_finish(i1, 0) | 0) {
  STACKTOP = i4;
  return;
 }
 i3 = i1 + 898 | 0;
 i6 = HEAPU16[i3 >> 1] | 0;
 if (i6 & 32768 | 0) {
  STACKTOP = i4;
  return;
 }
 if (!(i6 & 4)) {
  _png_colorspace_set_sRGB(i1, i1 + 824 | 0, HEAPU8[i5 >> 0] | 0) | 0;
  _png_colorspace_sync(i1, i2);
  STACKTOP = i4;
  return;
 } else {
  HEAP16[i3 >> 1] = i6 | 32768;
  _png_colorspace_sync(i1, i2);
  _png_chunk_benign_error(i1, 61603);
  STACKTOP = i4;
  return;
 }
}

function __ZNKSt3__27collateIwE12do_transformEPKwS3_(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i2;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 i6 = i4 - i3 >> 2;
 if (i6 >>> 0 > 1073741807) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i1);
 do if (i6 >>> 0 < 2) {
  HEAP8[i1 + 8 + 3 >> 0] = i6;
  i7 = i3;
  i8 = i1;
 } else {
  i9 = i6 + 4 & -4;
  if (i9 >>> 0 > 1073741823) _abort(); else {
   i10 = __Znwj(i9 << 2) | 0;
   HEAP32[i1 >> 2] = i10;
   HEAP32[i1 + 8 >> 2] = i9 | -2147483648;
   HEAP32[i1 + 4 >> 2] = i6;
   i7 = i3;
   i8 = i10;
   break;
  }
 } while (0);
 while (1) {
  if ((i7 | 0) == (i4 | 0)) break;
  __ZNSt3__211char_traitsIwE6assignERwRKw(i8, i7);
  i7 = i7 + 4 | 0;
  i8 = i8 + 4 | 0;
 }
 HEAP32[i5 >> 2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw(i8, i5);
 STACKTOP = i2;
 return;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 if ((1073741807 - i2 | 0) >>> 0 < i3 >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i1);
 i8 = i1 + 8 | 0;
 if ((HEAP8[i8 + 3 >> 0] | 0) < 0) i9 = HEAP32[i1 >> 2] | 0; else i9 = i1;
 if (i2 >>> 0 < 536870887) {
  i10 = i3 + i2 | 0;
  i3 = i2 << 1;
  i11 = i10 >>> 0 < i3 >>> 0 ? i3 : i10;
  i10 = i11 >>> 0 < 2 ? 2 : i11 + 4 & -4;
  if (i10 >>> 0 > 1073741823) _abort(); else i12 = i10;
 } else i12 = 1073741807;
 i10 = __Znwj(i12 << 2) | 0;
 if (i5 | 0) __ZNSt3__211char_traitsIwE4copyEPwPKwj(i10, i9, i5) | 0;
 i11 = i4 - i6 - i5 | 0;
 if (i11 | 0) __ZNSt3__211char_traitsIwE4copyEPwPKwj(i10 + (i5 << 2) + (i7 << 2) | 0, i9 + (i5 << 2) + (i6 << 2) | 0, i11) | 0;
 if ((i2 | 0) != 1) __ZdlPv(i9);
 HEAP32[i1 >> 2] = i10;
 HEAP32[i8 >> 2] = i12 | -2147483648;
 return;
}

function _png_set_IHDR(i1, i2, i3, i4, i5, i6, i7, i8, i9) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 var i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 if ((i1 | 0) == 0 | (i2 | 0) == 0) return;
 HEAP32[i2 >> 2] = i3;
 HEAP32[i2 + 4 >> 2] = i4;
 i10 = i2 + 24 | 0;
 HEAP8[i10 >> 0] = i5;
 i11 = i2 + 25 | 0;
 HEAP8[i11 >> 0] = i6;
 HEAP8[i2 + 26 >> 0] = i8;
 HEAP8[i2 + 27 >> 0] = i9;
 HEAP8[i2 + 28 >> 0] = i7;
 _png_check_IHDR(i1, i3, i4, i5 & 255, i6 & 255, i7 & 255, i8 & 255, i9 & 255);
 i9 = HEAP8[i11 >> 0] | 0;
 if (i9 << 24 >> 24 == 3) {
  i12 = 1;
  i13 = 1;
 } else {
  i11 = i9 & 2 | 1;
  i8 = (i9 & 4) == 0;
  i9 = i11 + 1 << 24 >> 24;
  i12 = i8 ? i11 : i9;
  i13 = i8 ? i11 : i9;
 }
 HEAP8[i2 + 29 >> 0] = i13;
 i13 = Math_imul(HEAPU8[i10 >> 0] | 0, i12 & 255) | 0;
 HEAP8[i2 + 30 >> 0] = i13;
 i12 = i13 & 255;
 if (i12 >>> 0 > 7) i14 = Math_imul(i12 >>> 3, i3) | 0; else i14 = ((Math_imul(i12, i3) | 0) + 7 | 0) >>> 3;
 HEAP32[i2 + 12 >> 2] = i14;
 return;
}

function __Z18ImFileLoadToMemoryPKcS0_Pji(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0;
 if (!((i1 | 0) != 0 & (i2 | 0) != 0)) ___assert_fail(31776, 31803, 1582, 31864);
 i5 = (i3 | 0) != 0;
 if (i5) HEAP32[i3 >> 2] = 0;
 i6 = _fopen(i1, i2) | 0;
 if (!i6) {
  i7 = 0;
  return i7 | 0;
 }
 if (!(_fseek(i6, 0, 2) | 0)) {
  i2 = _ftell(i6) | 0;
  if ((i2 | 0) != -1) if (!(_fseek(i6, 0, 0) | 0)) {
   HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
   i1 = __ZL13MallocWrapperjPv(i2 + i4 | 0, 0) | 0;
   if (!i1) {
    _fclose(i6) | 0;
    i7 = 0;
    return i7 | 0;
   }
   if ((_fread(i1, 1, i2, i6) | 0) != (i2 | 0)) {
    _fclose(i6) | 0;
    HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
    __ZL11FreeWrapperPvS_(i1, 0);
    i7 = 0;
    return i7 | 0;
   }
   if ((i4 | 0) > 0) _memset(i1 + i2 | 0, 0, i4 | 0) | 0;
   _fclose(i6) | 0;
   if (!i5) {
    i7 = i1;
    return i7 | 0;
   }
   HEAP32[i3 >> 2] = i2;
   i7 = i1;
   return i7 | 0;
  }
 }
 _fclose(i6) | 0;
 i7 = 0;
 return i7 | 0;
}

function __ZN6ImFontD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 HEAPF32[i1 >> 2] = Math_fround(0.0);
 i2 = i1 + 24 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if (i3 | 0) {
  HEAP32[i1 + 20 >> 2] = 0;
  HEAP32[i1 + 16 >> 2] = 0;
  __ZN5ImGui7MemFreeEPv(i3);
  HEAP32[i2 >> 2] = 0;
 }
 i3 = i1 + 36 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 if (i4 | 0) {
  HEAP32[i1 + 32 >> 2] = 0;
  HEAP32[i1 + 28 >> 2] = 0;
  __ZN5ImGui7MemFreeEPv(i4);
  HEAP32[i3 >> 2] = 0;
 }
 i4 = i1 + 48 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 if (i5 | 0) {
  HEAP32[i1 + 44 >> 2] = 0;
  HEAP32[i1 + 40 >> 2] = 0;
  __ZN5ImGui7MemFreeEPv(i5);
  HEAP32[i4 >> 2] = 0;
 }
 HEAP32[i1 + 52 >> 2] = 0;
 HEAPF32[i1 + 56 >> 2] = Math_fround(0.0);
 i4 = i1 + 80 | 0;
 i5 = i1 + 62 | 0;
 i6 = i5 + 18 | 0;
 do {
  HEAP16[i5 >> 1] = 0;
  i5 = i5 + 2 | 0;
 } while ((i5 | 0) < (i6 | 0));
 HEAP8[i4 >> 0] = 1;
 HEAP32[i1 + 84 >> 2] = 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if (i1 | 0) __ZN5ImGui7MemFreeEPv(i1);
 i1 = HEAP32[i2 >> 2] | 0;
 if (!i1) return;
 __ZN5ImGui7MemFreeEPv(i1);
 return;
}

function __ZN10ImDrawList15AddCircleFilledERK6ImVec2fji(i1, i2, f3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 f3 = Math_fround(f3);
 i4 = i4 | 0;
 i5 = i5 | 0;
 var f6 = f0, i7 = 0, i8 = 0, i9 = 0;
 if (i4 >>> 0 < 16777216) return;
 f6 = Math_fround(i5 | 0);
 __ZN10ImDrawList9PathArcToERK6ImVec2fffi(i1, i2, f3, Math_fround(0.0), Math_fround(Math_fround(Math_fround(f6 + Math_fround(-1.0)) * Math_fround(6.28318548)) / f6), i5);
 i5 = i1 + 92 | 0;
 __ZN10ImDrawList19AddConvexPolyFilledEPK6ImVec2ij(i1, HEAP32[i5 >> 2] | 0, HEAP32[i1 + 84 >> 2] | 0, i4);
 i4 = i1 + 84 | 0;
 i2 = i1 + 88 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if ((i1 | 0) < 0) {
  i7 = ((i1 | 0) / 2 | 0) + i1 | 0;
  i8 = (i7 | 0) > 0 ? i7 : 0;
  if ((i1 | 0) < (i8 | 0)) {
   i1 = __ZN5ImGui8MemAllocEj(i8 << 3) | 0;
   i7 = HEAP32[i5 >> 2] | 0;
   if (!i7) i9 = i5; else {
    _memcpy(i1 | 0, i7 | 0, HEAP32[i4 >> 2] << 3 | 0) | 0;
    __ZN5ImGui7MemFreeEPv(HEAP32[i5 >> 2] | 0);
    i9 = i5;
   }
   HEAP32[i9 >> 2] = i1;
   HEAP32[i2 >> 2] = i8;
  }
 }
 HEAP32[i4 >> 2] = 0;
 return;
}

function __Z5inputv() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i1 = HEAP32[1460542] | 0;
 HEAP32[1460542] = i1 + 1;
 if ((i1 | 0) < 59) return;
 HEAP32[1460542] = 0;
 if (!(HEAP8[74288] | 0)) return;
 __ZN7CityMap6updateEv(74252);
 i1 = HEAP32[18565] | 0;
 HEAP32[1460410] = i1;
 i2 = HEAP32[1460409] | 0;
 if ((i2 | 0) == 1 & (HEAP32[18566] | 0) > 1) {
  HEAP32[1460409] = 2;
  i3 = 2;
 } else i3 = i2;
 if ((i3 | 0) == 2 & (HEAP32[18567] | 0) > 1) {
  HEAP32[1460409] = 3;
  i4 = 3;
 } else i4 = i3;
 if ((i4 | 0) == 3 & (HEAP32[18568] | 0) > 1) {
  HEAP32[1460409] = 4;
  i5 = 4;
 } else i5 = i4;
 if ((i5 | 0) == 4 & (HEAP32[18569] | 0) != 0) {
  HEAP32[1460409] = 5;
  i6 = 5;
 } else i6 = i5;
 if ((i6 | 0) == 5 & (HEAP32[18571] | 0) != 0) {
  HEAP32[1460409] = 6;
  i7 = 6;
 } else i7 = i6;
 i6 = (i7 | 0) == 6;
 i5 = (HEAP32[18570] | 0) != 0;
 i4 = i6 & i5 ? 7 : i7;
 i7 = (i4 | 0) == 7 & (i1 | 0) > 4999;
 if (i6 & i5 | i7) HEAP32[1460409] = i7 ? 0 : i4;
 __ZN10Simulation9doSkyStepEP7CityMap(74252);
 return;
}

function _readdir(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i3;
 i5 = i1 + 8 | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 i7 = i1 + 12 | 0;
 L1 : do if ((i6 | 0) < (HEAP32[i7 >> 2] | 0)) {
  i8 = i6;
  i2 = 6;
 } else {
  HEAP32[i4 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i4 + 4 >> 2] = i1 + 24;
  HEAP32[i4 + 8 >> 2] = 2048;
  i9 = ___syscall220(220, i4 | 0) | 0;
  if ((i9 | 0) >= 1) {
   HEAP32[i7 >> 2] = i9;
   HEAP32[i5 >> 2] = 0;
   i8 = 0;
   i2 = 6;
   break;
  }
  switch (i9 | 0) {
  case 0:
  case -2:
   {
    i10 = 0;
    break L1;
    break;
   }
  default:
   {}
  }
  i11 = ___errno_location() | 0;
  HEAP32[i11 >> 2] = 0 - i9;
  i10 = 0;
 } while (0);
 if ((i2 | 0) == 6) {
  i2 = i1 + 24 + i8 | 0;
  HEAP32[i5 >> 2] = i8 + (HEAPU16[i2 + 8 >> 1] | 0);
  HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
  i10 = i2;
 }
 STACKTOP = i3;
 return i10 | 0;
}

function __ZNKSt3__220__time_get_c_storageIwE3__xEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i1;
 if (!(HEAP8[73688] | 0)) if (___cxa_guard_acquire(73688) | 0) {
  HEAP32[1461521] = 0;
  HEAP32[1461522] = 0;
  HEAP32[1461523] = 0;
  i3 = __ZNSt3__211char_traitsIwE6lengthEPKw(18784) | 0;
  if (i3 >>> 0 > 1073741807) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(5846084);
  do if (i3 >>> 0 < 2) {
   HEAP8[5846095] = i3;
   i4 = 5846084;
  } else {
   i5 = i3 + 4 & -4;
   if (i5 >>> 0 > 1073741823) _abort(); else {
    i6 = __Znwj(i5 << 2) | 0;
    HEAP32[1461521] = i6;
    HEAP32[1461523] = i5 | -2147483648;
    HEAP32[1461522] = i3;
    i4 = i6;
    break;
   }
  } while (0);
  __ZNSt3__211char_traitsIwE4copyEPwPKwj(i4, 18784, i3) | 0;
  HEAP32[i2 >> 2] = 0;
  __ZNSt3__211char_traitsIwE6assignERwRKw(i4 + (i3 << 2) | 0, i2);
 }
 STACKTOP = i1;
 return 5846084;
}

function __ZNKSt3__220__time_get_c_storageIwE3__rEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i1;
 if (!(HEAP8[73696] | 0)) if (___cxa_guard_acquire(73696) | 0) {
  HEAP32[1461524] = 0;
  HEAP32[1461525] = 0;
  HEAP32[1461526] = 0;
  i3 = __ZNSt3__211char_traitsIwE6lengthEPKw(18820) | 0;
  if (i3 >>> 0 > 1073741807) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(5846096);
  do if (i3 >>> 0 < 2) {
   HEAP8[5846107] = i3;
   i4 = 5846096;
  } else {
   i5 = i3 + 4 & -4;
   if (i5 >>> 0 > 1073741823) _abort(); else {
    i6 = __Znwj(i5 << 2) | 0;
    HEAP32[1461524] = i6;
    HEAP32[1461526] = i5 | -2147483648;
    HEAP32[1461525] = i3;
    i4 = i6;
    break;
   }
  } while (0);
  __ZNSt3__211char_traitsIwE4copyEPwPKwj(i4, 18820, i3) | 0;
  HEAP32[i2 >> 2] = 0;
  __ZNSt3__211char_traitsIwE6assignERwRKw(i4 + (i3 << 2) | 0, i2);
 }
 STACKTOP = i1;
 return 5846096;
}

function __ZNKSt3__220__time_get_c_storageIwE3__cEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i1;
 if (!(HEAP8[73704] | 0)) if (___cxa_guard_acquire(73704) | 0) {
  HEAP32[1461527] = 0;
  HEAP32[1461528] = 0;
  HEAP32[1461529] = 0;
  i3 = __ZNSt3__211char_traitsIwE6lengthEPKw(18868) | 0;
  if (i3 >>> 0 > 1073741807) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(5846108);
  do if (i3 >>> 0 < 2) {
   HEAP8[5846119] = i3;
   i4 = 5846108;
  } else {
   i5 = i3 + 4 & -4;
   if (i5 >>> 0 > 1073741823) _abort(); else {
    i6 = __Znwj(i5 << 2) | 0;
    HEAP32[1461527] = i6;
    HEAP32[1461529] = i5 | -2147483648;
    HEAP32[1461528] = i3;
    i4 = i6;
    break;
   }
  } while (0);
  __ZNSt3__211char_traitsIwE4copyEPwPKwj(i4, 18868, i3) | 0;
  HEAP32[i2 >> 2] = 0;
  __ZNSt3__211char_traitsIwE6assignERwRKw(i4 + (i3 << 2) | 0, i2);
 }
 STACKTOP = i1;
 return 5846108;
}

function __ZNKSt3__220__time_get_c_storageIwE3__XEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i1;
 if (!(HEAP8[73680] | 0)) if (___cxa_guard_acquire(73680) | 0) {
  HEAP32[1461518] = 0;
  HEAP32[1461519] = 0;
  HEAP32[1461520] = 0;
  i3 = __ZNSt3__211char_traitsIwE6lengthEPKw(18748) | 0;
  if (i3 >>> 0 > 1073741807) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(5846072);
  do if (i3 >>> 0 < 2) {
   HEAP8[5846083] = i3;
   i4 = 5846072;
  } else {
   i5 = i3 + 4 & -4;
   if (i5 >>> 0 > 1073741823) _abort(); else {
    i6 = __Znwj(i5 << 2) | 0;
    HEAP32[1461518] = i6;
    HEAP32[1461520] = i5 | -2147483648;
    HEAP32[1461519] = i3;
    i4 = i6;
    break;
   }
  } while (0);
  __ZNSt3__211char_traitsIwE4copyEPwPKwj(i4, 18748, i3) | 0;
  HEAP32[i2 >> 2] = 0;
  __ZNSt3__211char_traitsIwE6assignERwRKw(i4 + (i3 << 2) | 0, i2);
 }
 STACKTOP = i1;
 return 5846072;
}

function _memset(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = i1 + i3 | 0;
 i2 = i2 & 255;
 if ((i3 | 0) >= 67) {
  while (i1 & 3) {
   HEAP8[i1 >> 0] = i2;
   i1 = i1 + 1 | 0;
  }
  i5 = i4 & -4 | 0;
  i6 = i5 - 64 | 0;
  i7 = i2 | i2 << 8 | i2 << 16 | i2 << 24;
  while ((i1 | 0) <= (i6 | 0)) {
   HEAP32[i1 >> 2] = i7;
   HEAP32[i1 + 4 >> 2] = i7;
   HEAP32[i1 + 8 >> 2] = i7;
   HEAP32[i1 + 12 >> 2] = i7;
   HEAP32[i1 + 16 >> 2] = i7;
   HEAP32[i1 + 20 >> 2] = i7;
   HEAP32[i1 + 24 >> 2] = i7;
   HEAP32[i1 + 28 >> 2] = i7;
   HEAP32[i1 + 32 >> 2] = i7;
   HEAP32[i1 + 36 >> 2] = i7;
   HEAP32[i1 + 40 >> 2] = i7;
   HEAP32[i1 + 44 >> 2] = i7;
   HEAP32[i1 + 48 >> 2] = i7;
   HEAP32[i1 + 52 >> 2] = i7;
   HEAP32[i1 + 56 >> 2] = i7;
   HEAP32[i1 + 60 >> 2] = i7;
   i1 = i1 + 64 | 0;
  }
  while ((i1 | 0) < (i5 | 0)) {
   HEAP32[i1 >> 2] = i7;
   i1 = i1 + 4 | 0;
  }
 }
 while ((i1 | 0) < (i4 | 0)) {
  HEAP8[i1 >> 0] = i2;
  i1 = i1 + 1 | 0;
 }
 return i4 - i3 | 0;
}

function __ZN10ImDrawListD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 __ZN10ImDrawList15ClearFreeMemoryEv(i1);
 i2 = HEAP32[i1 + 112 >> 2] | 0;
 if (i2 | 0) {
  HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
  __ZL11FreeWrapperPvS_(i2, 0);
 }
 i2 = HEAP32[i1 + 92 >> 2] | 0;
 if (i2 | 0) {
  HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
  __ZL11FreeWrapperPvS_(i2, 0);
 }
 i2 = HEAP32[i1 + 80 >> 2] | 0;
 if (i2 | 0) {
  HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
  __ZL11FreeWrapperPvS_(i2, 0);
 }
 i2 = HEAP32[i1 + 68 >> 2] | 0;
 if (i2 | 0) {
  HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
  __ZL11FreeWrapperPvS_(i2, 0);
 }
 i2 = HEAP32[i1 + 32 >> 2] | 0;
 if (i2 | 0) {
  HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
  __ZL11FreeWrapperPvS_(i2, 0);
 }
 i2 = HEAP32[i1 + 20 >> 2] | 0;
 if (i2 | 0) {
  HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
  __ZL11FreeWrapperPvS_(i2, 0);
 }
 i2 = HEAP32[i1 + 8 >> 2] | 0;
 if (!i2) return;
 HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
 __ZL11FreeWrapperPvS_(i2, 0);
 return;
}

function __ZN5ImGui8SameLineEff(f1, f2) {
 f1 = Math_fround(f1);
 f2 = Math_fround(f2);
 var i3 = 0, i4 = 0, i5 = 0, f6 = f0, f7 = f0, f8 = f0, f9 = f0, f10 = f0, f11 = f0;
 i3 = HEAP32[1460598] | 0;
 i4 = HEAP32[i3 + 6392 >> 2] | 0;
 HEAP8[i4 + 120 >> 0] = 1;
 if (HEAP8[i4 + 123 >> 0] | 0) return;
 i5 = f2 < Math_fround(0.0);
 if (f1 != Math_fround(0.0)) {
  f6 = i5 ? Math_fround(0.0) : f2;
  f7 = Math_fround(HEAPF32[i4 + 12 >> 2]);
  f8 = Math_fround(f6 + Math_fround(Math_fround(f7 - Math_fround(HEAPF32[i4 + 84 >> 2])) + f1));
  f1 = Math_fround(Math_fround(HEAPF32[i4 + 440 >> 2]) + f8);
  f9 = Math_fround(HEAPF32[i4 + 444 >> 2]);
  f10 = f1;
 } else {
  if (i5) f11 = Math_fround(HEAPF32[i3 + 5424 >> 2]); else f11 = f2;
  f9 = f11;
  f10 = Math_fround(HEAPF32[i4 + 204 >> 2]);
 }
 f11 = Math_fround(f9 + f10);
 HEAPF32[i4 + 196 >> 2] = f11;
 HEAP32[i4 + 200 >> 2] = HEAP32[i4 + 208 >> 2];
 HEAP32[i4 + 228 >> 2] = HEAP32[i4 + 236 >> 2];
 HEAP32[i4 + 232 >> 2] = HEAP32[i4 + 240 >> 2];
 return;
}

function _png_colorspace_set_gamma(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, d10 = 0.0;
 if ((i3 + -16 | 0) >>> 0 > 624999984) {
  i4 = i2 + 74 | 0;
  i5 = 63126;
  i6 = i4;
  i7 = HEAP16[i4 >> 1] | 0;
 } else {
  i4 = i2 + 74 | 0;
  i8 = HEAP16[i4 >> 1] | 0;
  if ((i8 & 8) == 0 ? 1 : (HEAP32[i1 + 208 >> 2] & 32768 | 0) == 0) {
   if (i8 << 16 >> 16 < 0) return;
   do if (i8 & 1) {
    i9 = HEAP32[i2 >> 2] | 0;
    if (i9 | 0) {
     d10 = +Math_floor(+(+(i9 | 0) * 1.0e5 / +(i3 | 0) + .5));
     if (d10 <= 2147483647.0 & d10 >= -2147483648.0) if ((~~d10 + -95e3 | 0) >>> 0 < 10001) break;
    }
    if (!(i8 & 32)) {
     _png_chunk_report(i1, 63083, 0);
     break;
    }
    _png_chunk_report(i1, 61881, 2);
    return;
   } while (0);
   HEAP32[i2 >> 2] = i3;
   HEAP16[i4 >> 1] = i8 | 9;
   return;
  } else {
   i5 = 63151;
   i6 = i4;
   i7 = i8;
  }
 }
 HEAP16[i6 >> 1] = i7 | -32768;
 _png_chunk_report(i1, i5, 1);
 return;
}

function __ZN5ImGui13PopStyleColorEi(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i2 = 0;
 i3 = HEAP32[1460598] | 0;
 if ((i1 | 0) <= 0) return;
 i4 = i3 + 6476 | 0;
 i5 = i3 + 6484 | 0;
 i6 = i1;
 i1 = HEAP32[i4 >> 2] | 0;
 while (1) {
  if ((i1 | 0) <= 0) {
   i2 = 4;
   break;
  }
  i7 = HEAP32[i5 >> 2] | 0;
  i8 = i1 + -1 | 0;
  i9 = i7 + (i8 * 20 | 0) | 0;
  i8 = i9 + 4 | 0;
  i7 = i3 + 5508 + (HEAP32[i9 >> 2] << 4) | 0;
  HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i7 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
  HEAP32[i7 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
  HEAP32[i7 + 12 >> 2] = HEAP32[i8 + 12 >> 2];
  i8 = HEAP32[i4 >> 2] | 0;
  if ((i8 | 0) <= 0) {
   i2 = 6;
   break;
  }
  i1 = i8 + -1 | 0;
  HEAP32[i4 >> 2] = i1;
  if ((i6 | 0) <= 1) {
   i2 = 8;
   break;
  } else i6 = i6 + -1 | 0;
 }
 if ((i2 | 0) == 4) ___assert_fail(38278, 56850, 1245, 38287); else if ((i2 | 0) == 6) ___assert_fail(38278, 56850, 1268, 31920); else if ((i2 | 0) == 8) return;
}

function __ZNSt3__215__num_get_floatIfEET_PKcS3_Rj(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, f7 = f0, i8 = 0, i9 = 0, f10 = f0, f11 = f0, f12 = f0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i5;
 if ((i1 | 0) == (i2 | 0)) {
  HEAP32[i3 >> 2] = 4;
  f7 = Math_fround(0.0);
 } else {
  i8 = ___errno_location() | 0;
  i9 = HEAP32[i8 >> 2] | 0;
  i8 = ___errno_location() | 0;
  HEAP32[i8 >> 2] = 0;
  f10 = Math_fround(_strtof_l(i1, i6, __ZNSt3__26__clocEv() | 0));
  i1 = ___errno_location() | 0;
  i8 = HEAP32[i1 >> 2] | 0;
  if (!i8) {
   i1 = ___errno_location() | 0;
   HEAP32[i1 >> 2] = i9;
  }
  if ((HEAP32[i6 >> 2] | 0) == (i2 | 0)) if ((i8 | 0) == 34) {
   f11 = f10;
   i4 = 6;
  } else f12 = f10; else {
   f11 = Math_fround(0.0);
   i4 = 6;
  }
  if ((i4 | 0) == 6) {
   HEAP32[i3 >> 2] = 4;
   f12 = f11;
  }
  f7 = f12;
 }
 STACKTOP = i5;
 return Math_fround(f7);
}

function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i5 = i4;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b(i1, i2, 0) | 0) i6 = 1; else if (!i2) i6 = 0; else {
  i7 = ___dynamic_cast(i2, 3080, 3064, 0) | 0;
  if (!i7) i6 = 0; else {
   i2 = i5 + 4 | 0;
   i8 = i2 + 52 | 0;
   do {
    HEAP32[i2 >> 2] = 0;
    i2 = i2 + 4 | 0;
   } while ((i2 | 0) < (i8 | 0));
   HEAP32[i5 >> 2] = i7;
   HEAP32[i5 + 8 >> 2] = i1;
   HEAP32[i5 + 12 >> 2] = -1;
   HEAP32[i5 + 48 >> 2] = 1;
   FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i7 >> 2] | 0) + 28 >> 2] & 15](i7, i5, HEAP32[i3 >> 2] | 0, 1);
   if ((HEAP32[i5 + 24 >> 2] | 0) == 1) {
    HEAP32[i3 >> 2] = HEAP32[i5 + 16 >> 2];
    i9 = 1;
   } else i9 = 0;
   i6 = i9;
  }
 }
 STACKTOP = i4;
 return i6 | 0;
}

function _png_set_add_alpha(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = 0;
 if (!i1) return;
 L4 : do if (!(HEAP32[i1 + 208 >> 2] & 32768)) {
  switch (HEAP8[i1 + 435 >> 0] | 0) {
  case 2:
   {
    i5 = 4;
    break;
   }
  case 0:
   {
    i4 = 5;
    break;
   }
  default:
   {
    _png_app_error(i1, 65740);
    break L4;
   }
  }
  if ((i4 | 0) == 5) if ((HEAPU8[i1 + 436 >> 0] | 0) > 7) i5 = 2; else {
   _png_app_error(i1, 65684);
   break;
  }
  HEAP8[i1 + 440 >> 0] = i5;
  i4 = 9;
 } else {
  HEAP16[i1 + 444 >> 1] = i2;
  i4 = 9;
 } while (0);
 do if ((i4 | 0) == 9) {
  i2 = i1 + 216 | 0;
  HEAP32[i2 >> 2] = HEAP32[i2 >> 2] | 32768;
  i2 = i1 + 212 | 0;
  i5 = HEAP32[i2 >> 2] | 0;
  if ((i3 | 0) == 1) {
   HEAP32[i2 >> 2] = i5 | 128;
   break;
  } else {
   HEAP32[i2 >> 2] = i5 & -129;
   break;
  }
 } while (0);
 i3 = i1 + 216 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if (!(i1 & 32768)) return;
 HEAP32[i3 >> 2] = i1 | 16777216;
 return;
}

function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i4 = i2 + 64 | 0;
 if (HEAP32[i4 >> 2] | 0) if (!(FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 127](i2) | 0)) if (!(___fseeko(HEAP32[i4 >> 2] | 0, HEAP32[i3 + 8 >> 2] | 0, 0) | 0)) {
  i4 = i3;
  i5 = HEAP32[i4 + 4 >> 2] | 0;
  i6 = i2 + 72 | 0;
  HEAP32[i6 >> 2] = HEAP32[i4 >> 2];
  HEAP32[i6 + 4 >> 2] = i5;
  HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
  HEAP32[i1 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
  return;
 } else {
  i3 = i1;
  HEAP32[i3 >> 2] = 0;
  HEAP32[i3 + 4 >> 2] = 0;
  i3 = i1 + 8 | 0;
  HEAP32[i3 >> 2] = -1;
  HEAP32[i3 + 4 >> 2] = -1;
  return;
 }
 i3 = i1;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 i3 = i1 + 8 | 0;
 HEAP32[i3 >> 2] = -1;
 HEAP32[i3 + 4 >> 2] = -1;
 return;
}

function _png_user_version_check(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 i4 = i3;
 i5 = i1 + 212 | 0;
 if (!i2) {
  i6 = HEAP32[i5 >> 2] | 131072;
  HEAP32[i5 >> 2] = i6;
  i7 = i6;
 } else {
  i6 = 0;
  i8 = -1;
  do {
   i8 = i8 + 1 | 0;
   i9 = HEAP8[i2 + i8 >> 0] | 0;
   if (i9 << 24 >> 24 != (HEAP8[64826 + i8 >> 0] | 0)) HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 131072;
   i6 = i6 + (i9 << 24 >> 24 == 46 & 1) | 0;
   if ((i6 | 0) >= 2) break;
  } while (!((i8 | 0) == 6 | i9 << 24 >> 24 == 0));
  i7 = HEAP32[i5 >> 2] | 0;
 }
 if (!(i7 & 131072)) {
  i10 = 1;
  STACKTOP = i3;
  return i10 | 0;
 }
 _png_safecat(i4, 128, _png_safecat(i4, 128, _png_safecat(i4, 128, _png_safecat(i4, 128, 0, 60520) | 0, i2) | 0, 60551) | 0, 64826) | 0;
 _png_warning(i1, i4);
 i10 = 0;
 STACKTOP = i3;
 return i10 | 0;
}

function __ZNKSt3__27collateIcE12do_transformEPKcS3_(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i2;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 i6 = i4 - i3 | 0;
 if (i6 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i1);
 if (i6 >>> 0 < 11) {
  HEAP8[i1 + 11 >> 0] = i6;
  i7 = i1;
 } else {
  i8 = i6 + 16 & -16;
  i9 = __Znwj(i8) | 0;
  HEAP32[i1 >> 2] = i9;
  HEAP32[i1 + 8 >> 2] = i8 | -2147483648;
  HEAP32[i1 + 4 >> 2] = i6;
  i7 = i9;
 }
 i9 = i3;
 i3 = i7;
 while (1) {
  if ((i9 | 0) == (i4 | 0)) break;
  __ZNSt3__211char_traitsIcE6assignERcRKc(i3, i9);
  i9 = i9 + 1 | 0;
  i3 = i3 + 1 | 0;
 }
 HEAP8[i5 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc(i7 + i6 | 0, i5);
 STACKTOP = i2;
 return;
}

function _png_set_background_fixed(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 if (!i1) return;
 i6 = i1 + 212 | 0;
 i7 = HEAP32[i6 >> 2] | 0;
 if (i7 & 64 | 0) {
  _png_app_error(i1, 58866);
  return;
 }
 i8 = i7 | 16384;
 HEAP32[i6 >> 2] = i8;
 if (!i2) return;
 if (!i3) {
  _png_warning(i1, 58925);
  return;
 }
 i7 = i1 + 216 | 0;
 i9 = HEAP32[i7 >> 2] & -8650881;
 i10 = i9 | 262272;
 HEAP32[i7 >> 2] = i10;
 HEAP32[i6 >> 2] = i8 & -8193;
 i8 = i1 + 452 | 0;
 HEAP16[i8 >> 1] = HEAP16[i2 >> 1] | 0;
 HEAP16[i8 + 2 >> 1] = HEAP16[i2 + 2 >> 1] | 0;
 HEAP16[i8 + 4 >> 1] = HEAP16[i2 + 4 >> 1] | 0;
 HEAP16[i8 + 6 >> 1] = HEAP16[i2 + 6 >> 1] | 0;
 HEAP16[i8 + 8 >> 1] = HEAP16[i2 + 8 >> 1] | 0;
 HEAP32[i1 + 448 >> 2] = i5;
 HEAP8[i1 + 446 >> 0] = i3;
 if (!i4) {
  HEAP32[i7 >> 2] = i10 & -8388865;
  return;
 } else {
  HEAP32[i7 >> 2] = i9 | 262528;
  return;
 }
}

function __ZNSt3__214__num_put_base14__format_floatEPcPKcj(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 if (!(i3 & 2048)) i4 = i1; else {
  HEAP8[i1 >> 0] = 43;
  i4 = i1 + 1 | 0;
 }
 if (!(i3 & 1024)) i5 = i4; else {
  HEAP8[i4 >> 0] = 35;
  i5 = i4 + 1 | 0;
 }
 i4 = i3 & 260;
 i1 = (i3 & 16384 | 0) != 0;
 i3 = (i4 | 0) == 260;
 if (i3) {
  i6 = 0;
  i7 = i5;
 } else {
  HEAP8[i5 >> 0] = 46;
  HEAP8[i5 + 1 >> 0] = 42;
  i6 = 1;
  i7 = i5 + 2 | 0;
 }
 i5 = i2;
 i2 = i7;
 while (1) {
  i7 = HEAP8[i5 >> 0] | 0;
  if (!(i7 << 24 >> 24)) break;
  HEAP8[i2 >> 0] = i7;
  i5 = i5 + 1 | 0;
  i2 = i2 + 1 | 0;
 }
 L14 : do switch (i4 & 511) {
 case 4:
  {
   i8 = i1 ? 70 : 102;
   break;
  }
 case 256:
  {
   i8 = i1 ? 69 : 101;
   break;
  }
 default:
  if (i3) {
   i8 = i1 ? 65 : 97;
   break L14;
  } else {
   i8 = i1 ? 71 : 103;
   break L14;
  }
 } while (0);
 HEAP8[i2 >> 0] = i8;
 return i6 | 0;
}

function __ZNKSt3__28numpunctIwE12do_falsenameEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i2;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 i4 = __ZNSt3__211char_traitsIwE6lengthEPKw(20772) | 0;
 if (i4 >>> 0 > 1073741807) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i1);
 do if (i4 >>> 0 < 2) {
  HEAP8[i1 + 8 + 3 >> 0] = i4;
  i5 = i1;
 } else {
  i6 = i4 + 4 & -4;
  if (i6 >>> 0 > 1073741823) _abort(); else {
   i7 = __Znwj(i6 << 2) | 0;
   HEAP32[i1 >> 2] = i7;
   HEAP32[i1 + 8 >> 2] = i6 | -2147483648;
   HEAP32[i1 + 4 >> 2] = i4;
   i5 = i7;
   break;
  }
 } while (0);
 __ZNSt3__211char_traitsIwE4copyEPwPKwj(i5, 20772, i4) | 0;
 HEAP32[i3 >> 2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw(i5 + (i4 << 2) | 0, i3);
 STACKTOP = i2;
 return;
}

function __ZNKSt3__28numpunctIwE11do_truenameEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i2;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 i4 = __ZNSt3__211char_traitsIwE6lengthEPKw(20796) | 0;
 if (i4 >>> 0 > 1073741807) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i1);
 do if (i4 >>> 0 < 2) {
  HEAP8[i1 + 8 + 3 >> 0] = i4;
  i5 = i1;
 } else {
  i6 = i4 + 4 & -4;
  if (i6 >>> 0 > 1073741823) _abort(); else {
   i7 = __Znwj(i6 << 2) | 0;
   HEAP32[i1 >> 2] = i7;
   HEAP32[i1 + 8 >> 2] = i6 | -2147483648;
   HEAP32[i1 + 4 >> 2] = i4;
   i5 = i7;
   break;
  }
 } while (0);
 __ZNSt3__211char_traitsIwE4copyEPwPKwj(i5, 20796, i4) | 0;
 HEAP32[i3 >> 2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw(i5 + (i4 << 2) | 0, i3);
 STACKTOP = i2;
 return;
}

function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0;
 do if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b(i1, HEAP32[i2 + 8 >> 2] | 0, i5) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, i2, i3, i4); else if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b(i1, HEAP32[i2 >> 2] | 0, i5) | 0) {
  if ((HEAP32[i2 + 16 >> 2] | 0) != (i3 | 0)) {
   i6 = i2 + 20 | 0;
   if ((HEAP32[i6 >> 2] | 0) != (i3 | 0)) {
    HEAP32[i2 + 32 >> 2] = i4;
    HEAP32[i6 >> 2] = i3;
    i6 = i2 + 40 | 0;
    HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
    if ((HEAP32[i2 + 36 >> 2] | 0) == 1) if ((HEAP32[i2 + 24 >> 2] | 0) == 2) HEAP8[i2 + 54 >> 0] = 1;
    HEAP32[i2 + 44 >> 2] = 4;
    break;
   }
  }
  if ((i4 | 0) == 1) HEAP32[i2 + 32 >> 2] = 1;
 } while (0);
 return;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i4 = __ZNSt3__211char_traitsIwE3eofEv() | 0;
 i5 = i1 + 24 | 0;
 i6 = i1 + 28 | 0;
 i7 = i2;
 i2 = 0;
 while (1) {
  if ((i2 | 0) >= (i3 | 0)) break;
  i8 = HEAP32[i5 >> 2] | 0;
  i9 = HEAP32[i6 >> 2] | 0;
  if (i8 >>> 0 < i9 >>> 0) {
   i10 = i9 - i8 >> 2;
   i9 = i3 - i2 | 0;
   i11 = (i9 | 0) < (i10 | 0) ? i9 : i10;
   __ZNSt3__211char_traitsIwE4copyEPwPKwj(i8, i7, i11) | 0;
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + (i11 << 2);
   i7 = i7 + (i11 << 2) | 0;
   i2 = i11 + i2 | 0;
   continue;
  }
  i11 = HEAP32[(HEAP32[i1 >> 2] | 0) + 52 >> 2] | 0;
  i8 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i7 >> 2] | 0) | 0;
  if ((FUNCTION_TABLE_iii[i11 & 31](i1, i8) | 0) == (i4 | 0)) break;
  i7 = i7 + 4 | 0;
  i2 = i2 + 1 | 0;
 }
 return i2 | 0;
}

function __ZNSt3__211__stdoutbufIwE4syncEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i3 + 8 | 0;
 i5 = i3;
 i6 = i1 + 36 | 0;
 i7 = i1 + 40 | 0;
 i8 = i4 + 8 | 0;
 i9 = i4;
 i10 = i1 + 32 | 0;
 L1 : while (1) {
  i1 = HEAP32[i6 >> 2] | 0;
  i11 = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 31](i1, HEAP32[i7 >> 2] | 0, i4, i8, i5) | 0;
  i1 = (HEAP32[i5 >> 2] | 0) - i9 | 0;
  if ((_fwrite(i4, 1, i1, HEAP32[i10 >> 2] | 0) | 0) != (i1 | 0)) {
   i12 = -1;
   break;
  }
  switch (i11 | 0) {
  case 1:
   break;
  case 2:
   {
    i12 = -1;
    break L1;
    break;
   }
  default:
   {
    i2 = 4;
    break L1;
   }
  }
 }
 if ((i2 | 0) == 4) i12 = ((_fflush(HEAP32[i10 >> 2] | 0) | 0) != 0) << 31 >> 31;
 STACKTOP = i3;
 return i12 | 0;
}

function __ZNSt3__211__stdoutbufIcE4syncEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i3 + 8 | 0;
 i5 = i3;
 i6 = i1 + 36 | 0;
 i7 = i1 + 40 | 0;
 i8 = i4 + 8 | 0;
 i9 = i4;
 i10 = i1 + 32 | 0;
 L1 : while (1) {
  i1 = HEAP32[i6 >> 2] | 0;
  i11 = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 31](i1, HEAP32[i7 >> 2] | 0, i4, i8, i5) | 0;
  i1 = (HEAP32[i5 >> 2] | 0) - i9 | 0;
  if ((_fwrite(i4, 1, i1, HEAP32[i10 >> 2] | 0) | 0) != (i1 | 0)) {
   i12 = -1;
   break;
  }
  switch (i11 | 0) {
  case 1:
   break;
  case 2:
   {
    i12 = -1;
    break L1;
    break;
   }
  default:
   {
    i2 = 4;
    break L1;
   }
  }
 }
 if ((i2 | 0) == 4) i12 = ((_fflush(HEAP32[i10 >> 2] | 0) | 0) != 0) << 31 >> 31;
 STACKTOP = i3;
 return i12 | 0;
}

function _png_realloc_array(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i6 = 0;
 if ((i3 | 0) < 0 | ((i4 | 0) < 1 | (i5 | 0) == 0)) _png_error(i1, 60844);
 i7 = (i3 | 0) > 0;
 if ((i2 | 0) == 0 & i7) _png_error(i1, 60844);
 if ((2147483647 - i3 | 0) < (i4 | 0)) {
  i8 = 0;
  return i8 | 0;
 }
 i9 = i4 + i3 | 0;
 if ((4294967295 / (i5 >>> 0) | 0) >>> 0 < i9 >>> 0) {
  i8 = 0;
  return i8 | 0;
 }
 i10 = Math_imul(i9, i5) | 0;
 if (!i10) {
  i8 = 0;
  return i8 | 0;
 }
 if (!i1) i6 = 10; else {
  i9 = HEAP32[i1 + 720 >> 2] | 0;
  if (!i9) i6 = 10; else i11 = FUNCTION_TABLE_iii[i9 & 31](i1, i10) | 0;
 }
 if ((i6 | 0) == 10) i11 = _malloc(i10) | 0;
 if (!i11) {
  i8 = 0;
  return i8 | 0;
 }
 i10 = Math_imul(i5, i3) | 0;
 if (i7) _memcpy(i11 | 0, i2 | 0, i10 | 0) | 0;
 _memset(i11 + i10 | 0, 0, Math_imul(i5, i4) | 0) | 0;
 i8 = i11;
 return i8 | 0;
}

function __ZNSt3__215__num_get_floatIeEET_PKcS3_Rj(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, d7 = 0.0, i8 = 0, i9 = 0, d10 = 0.0, d11 = 0.0, d12 = 0.0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i5;
 if ((i1 | 0) == (i2 | 0)) {
  HEAP32[i3 >> 2] = 4;
  d7 = 0.0;
 } else {
  i8 = ___errno_location() | 0;
  i9 = HEAP32[i8 >> 2] | 0;
  i8 = ___errno_location() | 0;
  HEAP32[i8 >> 2] = 0;
  d10 = +_strtold_l(i1, i6, __ZNSt3__26__clocEv() | 0);
  i1 = ___errno_location() | 0;
  i8 = HEAP32[i1 >> 2] | 0;
  if (!i8) {
   i1 = ___errno_location() | 0;
   HEAP32[i1 >> 2] = i9;
  }
  if ((HEAP32[i6 >> 2] | 0) == (i2 | 0)) if ((i8 | 0) == 34) {
   d11 = d10;
   i4 = 6;
  } else d12 = d10; else {
   d11 = 0.0;
   i4 = 6;
  }
  if ((i4 | 0) == 6) {
   HEAP32[i3 >> 2] = 4;
   d12 = d11;
  }
  d7 = d12;
 }
 STACKTOP = i5;
 return +d7;
}

function __ZNSt3__215__num_get_floatIdEET_PKcS3_Rj(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, d7 = 0.0, i8 = 0, i9 = 0, d10 = 0.0, d11 = 0.0, d12 = 0.0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i5;
 if ((i1 | 0) == (i2 | 0)) {
  HEAP32[i3 >> 2] = 4;
  d7 = 0.0;
 } else {
  i8 = ___errno_location() | 0;
  i9 = HEAP32[i8 >> 2] | 0;
  i8 = ___errno_location() | 0;
  HEAP32[i8 >> 2] = 0;
  d10 = +_strtod_l(i1, i6, __ZNSt3__26__clocEv() | 0);
  i1 = ___errno_location() | 0;
  i8 = HEAP32[i1 >> 2] | 0;
  if (!i8) {
   i1 = ___errno_location() | 0;
   HEAP32[i1 >> 2] = i9;
  }
  if ((HEAP32[i6 >> 2] | 0) == (i2 | 0)) if ((i8 | 0) == 34) {
   d11 = d10;
   i4 = 6;
  } else d12 = d10; else {
   d11 = 0.0;
   i4 = 6;
  }
  if ((i4 | 0) == 6) {
   HEAP32[i3 >> 2] = 4;
   d12 = d11;
  }
  d7 = d12;
 }
 STACKTOP = i5;
 return +d7;
}

function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0;
 HEAP8[i2 + 53 >> 0] = 1;
 do if ((HEAP32[i2 + 4 >> 2] | 0) == (i4 | 0)) {
  HEAP8[i2 + 52 >> 0] = 1;
  i1 = i2 + 16 | 0;
  i6 = HEAP32[i1 >> 2] | 0;
  if (!i6) {
   HEAP32[i1 >> 2] = i3;
   HEAP32[i2 + 24 >> 2] = i5;
   HEAP32[i2 + 36 >> 2] = 1;
   if (!((i5 | 0) == 1 ? (HEAP32[i2 + 48 >> 2] | 0) == 1 : 0)) break;
   HEAP8[i2 + 54 >> 0] = 1;
   break;
  }
  if ((i6 | 0) != (i3 | 0)) {
   i6 = i2 + 36 | 0;
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
   HEAP8[i2 + 54 >> 0] = 1;
   break;
  }
  i6 = i2 + 24 | 0;
  i1 = HEAP32[i6 >> 2] | 0;
  if ((i1 | 0) == 2) {
   HEAP32[i6 >> 2] = i5;
   i7 = i5;
  } else i7 = i1;
  if ((i7 | 0) == 1 ? (HEAP32[i2 + 48 >> 2] | 0) == 1 : 0) HEAP8[i2 + 54 >> 0] = 1;
 } while (0);
 return;
}

function _fputc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = 0;
 if ((HEAP32[i2 + 76 >> 2] | 0) < 0) i3 = 3; else if (!(___lockfile(i2) | 0)) i3 = 3; else {
  i4 = i1 & 255;
  i5 = i1 & 255;
  if ((i5 | 0) == (HEAP8[i2 + 75 >> 0] | 0)) i3 = 10; else {
   i6 = i2 + 20 | 0;
   i7 = HEAP32[i6 >> 2] | 0;
   if (i7 >>> 0 < (HEAP32[i2 + 16 >> 2] | 0) >>> 0) {
    HEAP32[i6 >> 2] = i7 + 1;
    HEAP8[i7 >> 0] = i4;
    i8 = i5;
   } else i3 = 10;
  }
  if ((i3 | 0) == 10) i8 = ___overflow(i2, i1) | 0;
  ___unlockfile(i2);
  i9 = i8;
 }
 do if ((i3 | 0) == 3) {
  i8 = i1 & 255;
  i5 = i1 & 255;
  if ((i5 | 0) != (HEAP8[i2 + 75 >> 0] | 0)) {
   i4 = i2 + 20 | 0;
   i7 = HEAP32[i4 >> 2] | 0;
   if (i7 >>> 0 < (HEAP32[i2 + 16 >> 2] | 0) >>> 0) {
    HEAP32[i4 >> 2] = i7 + 1;
    HEAP8[i7 >> 0] = i8;
    i9 = i5;
    break;
   }
  }
  i9 = ___overflow(i2, i1) | 0;
 } while (0);
 return i9 | 0;
}

function _fflush(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 do if (!i1) {
  if (!(HEAP32[3417] | 0)) i2 = 0; else i2 = _fflush(HEAP32[3417] | 0) | 0;
  i3 = ___ofl_lock() | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  if (!i4) i5 = i2; else {
   i3 = i4;
   i4 = i2;
   while (1) {
    if ((HEAP32[i3 + 76 >> 2] | 0) > -1) i6 = ___lockfile(i3) | 0; else i6 = 0;
    if ((HEAP32[i3 + 20 >> 2] | 0) >>> 0 > (HEAP32[i3 + 28 >> 2] | 0) >>> 0) i7 = ___fflush_unlocked(i3) | 0 | i4; else i7 = i4;
    if (i6 | 0) ___unlockfile(i3);
    i3 = HEAP32[i3 + 56 >> 2] | 0;
    if (!i3) {
     i5 = i7;
     break;
    } else i4 = i7;
   }
  }
  ___ofl_unlock();
  i8 = i5;
 } else {
  if ((HEAP32[i1 + 76 >> 2] | 0) <= -1) {
   i8 = ___fflush_unlocked(i1) | 0;
   break;
  }
  i4 = (___lockfile(i1) | 0) == 0;
  i3 = ___fflush_unlocked(i1) | 0;
  if (i4) i8 = i3; else {
   ___unlockfile(i1);
   i8 = i3;
  }
 } while (0);
 return i8 | 0;
}

function __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i3 = i1 + 44 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 i5 = HEAP32[i1 + 24 >> 2] | 0;
 if (i4 >>> 0 < i5 >>> 0) {
  HEAP32[i3 >> 2] = i5;
  i6 = i5;
 } else i6 = i4;
 i4 = i6;
 i6 = i1 + 12 | 0;
 i5 = HEAP32[i6 >> 2] | 0;
 if ((HEAP32[i1 + 8 >> 2] | 0) >>> 0 >= i5 >>> 0) {
  i7 = -1;
  return i7 | 0;
 }
 if ((i2 | 0) == -1) {
  HEAP32[i6 >> 2] = i5 + -1;
  HEAP32[i1 + 16 >> 2] = i4;
  i7 = 0;
  return i7 | 0;
 }
 if (!(HEAP32[i1 + 48 >> 2] & 16)) {
  i3 = i2 & 255;
  i8 = i5 + -1 | 0;
  if ((HEAP8[i8 >> 0] | 0) == i3 << 24 >> 24) {
   i9 = i3;
   i10 = i8;
  } else {
   i7 = -1;
   return i7 | 0;
  }
 } else {
  i9 = i2 & 255;
  i10 = i5 + -1 | 0;
 }
 HEAP32[i6 >> 2] = i10;
 HEAP32[i1 + 16 >> 2] = i4;
 HEAP8[i10 >> 0] = i9;
 i7 = i2;
 return i7 | 0;
}

function __ZN10ImDrawList13PushTextureIDEPv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i3 = i2;
 i2 = i1 + 72 | 0;
 i4 = HEAP32[i2 >> 2] | 0;
 i5 = i1 + 76 | 0;
 if ((i4 | 0) == (HEAP32[i5 >> 2] | 0)) {
  i6 = i4 + 1 | 0;
  if (!i4) i7 = 8; else i7 = ((i4 | 0) / 2 | 0) + i4 | 0;
  i8 = (i7 | 0) > (i6 | 0) ? i7 : i6;
  if ((i4 | 0) < (i8 | 0)) {
   i6 = __ZN5ImGui8MemAllocEj(i8 << 2) | 0;
   i7 = i1 + 80 | 0;
   i9 = HEAP32[i7 >> 2] | 0;
   if (!i9) i10 = i7; else {
    _memcpy(i6 | 0, i9 | 0, HEAP32[i2 >> 2] << 2 | 0) | 0;
    __ZN5ImGui7MemFreeEPv(HEAP32[i7 >> 2] | 0);
    i10 = i7;
   }
   HEAP32[i10 >> 2] = i6;
   HEAP32[i5 >> 2] = i8;
   i11 = HEAP32[i2 >> 2] | 0;
  } else i11 = i4;
 } else i11 = i4;
 HEAP32[(HEAP32[i1 + 80 >> 2] | 0) + (i11 << 2) >> 2] = i3;
 HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
 __ZN10ImDrawList15UpdateTextureIDEv(i1);
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i4 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
 i5 = i1 + 24 | 0;
 i6 = i1 + 28 | 0;
 i7 = i2;
 i2 = 0;
 while (1) {
  if ((i2 | 0) >= (i3 | 0)) break;
  i8 = HEAP32[i5 >> 2] | 0;
  i9 = HEAP32[i6 >> 2] | 0;
  if (i8 >>> 0 < i9 >>> 0) {
   i10 = i9 - i8 | 0;
   i9 = i3 - i2 | 0;
   i11 = (i9 | 0) < (i10 | 0) ? i9 : i10;
   __ZNSt3__211char_traitsIcE4copyEPcPKcj(i8, i7, i11) | 0;
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + i11;
   i7 = i7 + i11 | 0;
   i2 = i11 + i2 | 0;
   continue;
  }
  i11 = HEAP32[(HEAP32[i1 >> 2] | 0) + 52 >> 2] | 0;
  i8 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i7 >> 0] | 0) | 0;
  if ((FUNCTION_TABLE_iii[i11 & 31](i1, i8) | 0) == (i4 | 0)) break;
  i7 = i7 + 1 | 0;
  i2 = i2 + 1 | 0;
 }
 return i2 | 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 __ZNSt3__211char_traitsIwE3eofEv() | 0;
 i4 = i1 + 12 | 0;
 i5 = i1 + 16 | 0;
 i6 = i2;
 i2 = 0;
 while (1) {
  if ((i2 | 0) >= (i3 | 0)) break;
  i7 = HEAP32[i4 >> 2] | 0;
  i8 = HEAP32[i5 >> 2] | 0;
  if (i7 >>> 0 < i8 >>> 0) {
   i9 = i8 - i7 >> 2;
   i8 = i3 - i2 | 0;
   i10 = (i8 | 0) < (i9 | 0) ? i8 : i9;
   __ZNSt3__211char_traitsIwE4copyEPwPKwj(i6, i7, i10) | 0;
   HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + (i10 << 2);
   i6 = i6 + (i10 << 2) | 0;
   i2 = i10 + i2 | 0;
   continue;
  }
  i10 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0;
  if ((i10 | 0) == -1) break;
  i7 = __ZNSt3__211char_traitsIwE12to_char_typeEj(i10) | 0;
  HEAP32[i6 >> 2] = i7;
  i6 = i6 + 4 | 0;
  i2 = i2 + 1 | 0;
 }
 return i2 | 0;
}

function __ZNKSt3__220__time_get_c_storageIcE3__xEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i1;
 if (!(HEAP8[73608] | 0)) if (___cxa_guard_acquire(73608) | 0) {
  HEAP32[1461318] = 0;
  HEAP32[1461319] = 0;
  HEAP32[1461320] = 0;
  i3 = __ZNSt3__211char_traitsIcE6lengthEPKc(70939) | 0;
  if (i3 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(5845272);
  if (i3 >>> 0 < 11) {
   HEAP8[5845283] = i3;
   i4 = 5845272;
  } else {
   i5 = i3 + 16 & -16;
   i6 = __Znwj(i5) | 0;
   HEAP32[1461318] = i6;
   HEAP32[1461320] = i5 | -2147483648;
   HEAP32[1461319] = i3;
   i4 = i6;
  }
  __ZNSt3__211char_traitsIcE4copyEPcPKcj(i4, 70939, i3) | 0;
  HEAP8[i2 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc(i4 + i3 | 0, i2);
 }
 STACKTOP = i1;
 return 5845272;
}

function __ZNKSt3__220__time_get_c_storageIcE3__rEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i1;
 if (!(HEAP8[73616] | 0)) if (___cxa_guard_acquire(73616) | 0) {
  HEAP32[1461321] = 0;
  HEAP32[1461322] = 0;
  HEAP32[1461323] = 0;
  i3 = __ZNSt3__211char_traitsIcE6lengthEPKc(70948) | 0;
  if (i3 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(5845284);
  if (i3 >>> 0 < 11) {
   HEAP8[5845295] = i3;
   i4 = 5845284;
  } else {
   i5 = i3 + 16 & -16;
   i6 = __Znwj(i5) | 0;
   HEAP32[1461321] = i6;
   HEAP32[1461323] = i5 | -2147483648;
   HEAP32[1461322] = i3;
   i4 = i6;
  }
  __ZNSt3__211char_traitsIcE4copyEPcPKcj(i4, 70948, i3) | 0;
  HEAP8[i2 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc(i4 + i3 | 0, i2);
 }
 STACKTOP = i1;
 return 5845284;
}

function __ZNKSt3__220__time_get_c_storageIcE3__cEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i1;
 if (!(HEAP8[73624] | 0)) if (___cxa_guard_acquire(73624) | 0) {
  HEAP32[1461324] = 0;
  HEAP32[1461325] = 0;
  HEAP32[1461326] = 0;
  i3 = __ZNSt3__211char_traitsIcE6lengthEPKc(70960) | 0;
  if (i3 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(5845296);
  if (i3 >>> 0 < 11) {
   HEAP8[5845307] = i3;
   i4 = 5845296;
  } else {
   i5 = i3 + 16 & -16;
   i6 = __Znwj(i5) | 0;
   HEAP32[1461324] = i6;
   HEAP32[1461326] = i5 | -2147483648;
   HEAP32[1461325] = i3;
   i4 = i6;
  }
  __ZNSt3__211char_traitsIcE4copyEPcPKcj(i4, 70960, i3) | 0;
  HEAP8[i2 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc(i4 + i3 | 0, i2);
 }
 STACKTOP = i1;
 return 5845296;
}

function __ZNKSt3__220__time_get_c_storageIcE3__XEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i1;
 if (!(HEAP8[73600] | 0)) if (___cxa_guard_acquire(73600) | 0) {
  HEAP32[1461315] = 0;
  HEAP32[1461316] = 0;
  HEAP32[1461317] = 0;
  i3 = __ZNSt3__211char_traitsIcE6lengthEPKc(70930) | 0;
  if (i3 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(5845260);
  if (i3 >>> 0 < 11) {
   HEAP8[5845271] = i3;
   i4 = 5845260;
  } else {
   i5 = i3 + 16 & -16;
   i6 = __Znwj(i5) | 0;
   HEAP32[1461315] = i6;
   HEAP32[1461317] = i5 | -2147483648;
   HEAP32[1461316] = i3;
   i4 = i6;
  }
  __ZNSt3__211char_traitsIcE4copyEPcPKcj(i4, 70930, i3) | 0;
  HEAP8[i2 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc(i4 + i3 | 0, i2);
 }
 STACKTOP = i1;
 return 5845260;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 if ((-17 - i2 | 0) >>> 0 < i3 >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i1);
 if ((HEAP8[i1 + 11 >> 0] | 0) < 0) i8 = HEAP32[i1 >> 2] | 0; else i8 = i1;
 if (i2 >>> 0 < 2147483623) {
  i9 = i3 + i2 | 0;
  i3 = i2 << 1;
  i10 = i9 >>> 0 < i3 >>> 0 ? i3 : i9;
  i11 = i10 >>> 0 < 11 ? 11 : i10 + 16 & -16;
 } else i11 = -17;
 i10 = __Znwj(i11) | 0;
 if (i5 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcj(i10, i8, i5) | 0;
 i9 = i4 - i6 - i5 | 0;
 if (i9 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcj(i10 + i5 + i7 | 0, i8 + i5 + i6 | 0, i9) | 0;
 if ((i2 | 0) != 10) __ZdlPv(i8);
 HEAP32[i1 >> 2] = i10;
 HEAP32[i1 + 8 >> 2] = i11 | -2147483648;
 return;
}

function _png_handle_gAMA(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4;
 i6 = HEAP32[i1 + 208 >> 2] | 0;
 if (!(i6 & 1)) _png_chunk_error(i1, 60665);
 if (i6 & 6 | 0) {
  _png_crc_finish(i1, i3) | 0;
  _png_chunk_benign_error(i1, 61181);
  STACKTOP = i4;
  return;
 }
 if ((i3 | 0) != 4) {
  _png_crc_finish(i1, i3) | 0;
  _png_chunk_benign_error(i1, 61194);
  STACKTOP = i4;
  return;
 }
 _png_read_data(i1, i5, 4);
 _png_calculate_crc(i1, i5, 4);
 if (_png_crc_finish(i1, 0) | 0) {
  STACKTOP = i4;
  return;
 }
 i3 = (HEAPU8[i5 + 1 >> 0] | 0) << 16 | (HEAPU8[i5 >> 0] | 0) << 24 | (HEAPU8[i5 + 2 >> 0] | 0) << 8 | (HEAPU8[i5 + 3 >> 0] | 0);
 _png_colorspace_set_gamma(i1, i1 + 824 | 0, (i3 | 0) > -1 ? i3 : -1);
 _png_colorspace_sync(i1, i2);
 STACKTOP = i4;
 return;
}

function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0;
 L1 : do if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b(i1, HEAP32[i2 + 8 >> 2] | 0, 0) | 0) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, i2, i3, i4); else {
  i5 = HEAP32[i1 + 12 >> 2] | 0;
  i6 = i1 + 16 + (i5 << 3) | 0;
  __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(i1 + 16 | 0, i2, i3, i4);
  if ((i5 | 0) > 1) {
   i5 = i2 + 54 | 0;
   i7 = i1 + 24 | 0;
   do {
    __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(i7, i2, i3, i4);
    if (HEAP8[i5 >> 0] | 0) break L1;
    i7 = i7 + 8 | 0;
   } while (i7 >>> 0 < i6 >>> 0);
  }
 } while (0);
 return;
}

function _fopen(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i4 = i3 + 32 | 0;
 i5 = i3 + 16 | 0;
 i6 = i3;
 if (!(_strchr(69714, HEAP8[i2 >> 0] | 0) | 0)) {
  i7 = ___errno_location() | 0;
  HEAP32[i7 >> 2] = 22;
  i8 = 0;
 } else {
  i7 = ___fmodeflags(i2) | 0;
  HEAP32[i6 >> 2] = i1;
  HEAP32[i6 + 4 >> 2] = i7 | 32768;
  HEAP32[i6 + 8 >> 2] = 438;
  i1 = ___syscall_ret(___syscall5(5, i6 | 0) | 0) | 0;
  if ((i1 | 0) < 0) i8 = 0; else {
   if (i7 & 524288 | 0) {
    HEAP32[i5 >> 2] = i1;
    HEAP32[i5 + 4 >> 2] = 2;
    HEAP32[i5 + 8 >> 2] = 1;
    ___syscall221(221, i5 | 0) | 0;
   }
   i5 = ___fdopen(i1, i2) | 0;
   if (!i5) {
    HEAP32[i4 >> 2] = i1;
    ___syscall6(6, i4 | 0) | 0;
    i8 = 0;
   } else i8 = i5;
  }
 }
 STACKTOP = i3;
 return i8 | 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 __ZNSt3__211char_traitsIcE3eofEv() | 0;
 i4 = i1 + 12 | 0;
 i5 = i1 + 16 | 0;
 i6 = i2;
 i2 = 0;
 while (1) {
  if ((i2 | 0) >= (i3 | 0)) break;
  i7 = HEAP32[i4 >> 2] | 0;
  i8 = HEAP32[i5 >> 2] | 0;
  if (i7 >>> 0 < i8 >>> 0) {
   i9 = i8 - i7 | 0;
   i8 = i3 - i2 | 0;
   i10 = (i8 | 0) < (i9 | 0) ? i8 : i9;
   __ZNSt3__211char_traitsIcE4copyEPcPKcj(i6, i7, i10) | 0;
   HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + i10;
   i6 = i6 + i10 | 0;
   i2 = i10 + i2 | 0;
   continue;
  }
  i10 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0;
  if ((i10 | 0) == -1) break;
  i7 = __ZNSt3__211char_traitsIcE12to_char_typeEi(i10) | 0;
  HEAP8[i6 >> 0] = i7;
  i6 = i6 + 1 | 0;
  i2 = i2 + 1 | 0;
 }
 return i2 | 0;
}

function __Z4initv() {
 var i1 = 0;
 HEAP32[1460401] = 640;
 HEAP32[1460402] = 480;
 __ZN13WindowManager4initEPKc(5841600, 26108) | 0;
 __ZN11MenuManager4initER13WindowManager(5841612, 5841600);
 i1 = __Znwj(240) | 0;
 __ZN12RenderSystemC2Ev(i1);
 HEAP32[18562] = i1;
 HEAPF64[i1 + 48 >> 3] = 128.0;
 HEAPF64[i1 + 56 >> 3] = 128.0;
 __ZN12RenderSystem4initER13WindowManager(i1, 5841600);
 __ZN12RenderSystem15setViewSettingsEddd(HEAP32[18562] | 0, .16, 1.0, 1.0e6);
 HEAPF32[1460537] = Math_fround(100.0);
 HEAPF32[1460538] = Math_fround(100.0);
 HEAP32[1460485] = 74252;
 HEAP32[1460486] = HEAP32[18562];
 __ZN11MeshManager4initEv(5842084);
 _glfwSetCursorPosCallback(HEAP32[1460400] | 0, 1) | 0;
 _glfwSetMouseButtonCallback(HEAP32[1460400] | 0, 10) | 0;
 _glfwSetScrollCallback(HEAP32[1460400] | 0, 2) | 0;
 _glfwSetKeyCallback(HEAP32[1460400] | 0, 4) | 0;
 _glfwSetCharCallback(HEAP32[1460400] | 0, 41) | 0;
 return 0;
}

function __ZNKSt3__27codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i6;
 HEAP32[i5 >> 2] = i3;
 i3 = ___uselocale(HEAP32[i1 + 8 >> 2] | 0) | 0;
 i1 = _wcrtomb(i7, 0, i2) | 0;
 if (i3 | 0) ___uselocale(i3) | 0;
 L4 : do if ((i1 + 1 | 0) >>> 0 < 2) i8 = 2; else {
  i3 = i1 + -1 | 0;
  if (i3 >>> 0 > (i4 - (HEAP32[i5 >> 2] | 0) | 0) >>> 0) i8 = 1; else {
   i2 = i7;
   i9 = i3;
   while (1) {
    if (!i9) {
     i8 = 0;
     break L4;
    }
    i3 = HEAP8[i2 >> 0] | 0;
    i10 = HEAP32[i5 >> 2] | 0;
    HEAP32[i5 >> 2] = i10 + 1;
    HEAP8[i10 >> 0] = i3;
    i2 = i2 + 1 | 0;
    i9 = i9 + -1 | 0;
   }
  }
 } while (0);
 STACKTOP = i6;
 return i8 | 0;
}

function __ZNKSt3__210__time_put8__do_putEPwRS1_PK2tmcc(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 i8 = i7 + 16 | 0;
 i9 = i7 + 12 | 0;
 i10 = i7;
 i11 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = i8 + 100;
 __ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc(i1, i8, i9, i4, i5, i6);
 i6 = i10;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i6 + 4 >> 2] = 0;
 HEAP32[i11 >> 2] = i8;
 i8 = __ZNSt3__212_GLOBAL__N_17countofIwEEjPKT_S4_(i2, HEAP32[i3 >> 2] | 0) | 0;
 i6 = ___uselocale(HEAP32[i1 >> 2] | 0) | 0;
 i1 = _mbsrtowcs(i2, i11, i8, i10) | 0;
 if (i6 | 0) ___uselocale(i6) | 0;
 if ((i1 | 0) == -1) __ZNSt3__221__throw_runtime_errorEPKc(0); else {
  HEAP32[i3 >> 2] = i2 + (i1 << 2);
  STACKTOP = i7;
  return;
 }
}

function __ZN10Simulation7connectEP7CityMapiii(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i5 = 0;
 i6 = __ZN7CityMap7getTileEjj(i1, i2, i3) | 0;
 i7 = i6 + 76 | 0;
 i8 = HEAP32[i7 >> 2] | 0;
 i9 = 1 << i4;
 if (i8 & i9 | 0) return;
 i10 = i2 + 1 | 0;
 i11 = i2 + -1 | 0;
 i12 = i3;
 i3 = i6;
 i6 = i8;
 i8 = i7;
 while (1) {
  if ((HEAP32[i3 + 44 >> 2] | 0) != (i4 | 0)) {
   i5 = 5;
   break;
  }
  HEAP32[i8 >> 2] = i6 | i9;
  __ZN10Simulation7connectEP7CityMapiii(i1, i10, i12, i4);
  __ZN10Simulation7connectEP7CityMapiii(i1, i11, i12, i4);
  __ZN10Simulation7connectEP7CityMapiii(i1, i2, i12 + -1 | 0, i4);
  i12 = i12 + 1 | 0;
  i3 = __ZN7CityMap7getTileEjj(i1, i2, i12) | 0;
  i8 = i3 + 76 | 0;
  i6 = HEAP32[i8 >> 2] | 0;
  if (i6 & i9 | 0) {
   i5 = 5;
   break;
  }
 }
 if ((i5 | 0) == 5) return;
}

function __ZN7CityMap14checkPipeTilesEii(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 __ZN7CityMap13checkPipeTileEii(i1, i2, i3);
 i4 = i2 + 1 | 0;
 __ZN7CityMap13checkPipeTileEii(i1, i4, i3);
 i5 = i2 + -1 | 0;
 __ZN7CityMap13checkPipeTileEii(i1, i5, i3);
 i6 = i3 + 1 | 0;
 __ZN7CityMap13checkPipeTileEii(i1, i2, i6);
 i7 = i3 + -1 | 0;
 __ZN7CityMap13checkPipeTileEii(i1, i2, i7);
 __ZN7CityMap20checkUndergroundTileEii(i1, i2, i3);
 __ZN7CityMap20checkUndergroundTileEii(i1, i4, i3);
 __ZN7CityMap20checkUndergroundTileEii(i1, i5, i3);
 __ZN7CityMap20checkUndergroundTileEii(i1, i2, i6);
 __ZN7CityMap20checkUndergroundTileEii(i1, i2, i7);
 __ZN7CityMap20checkUndergroundTileEii(i1, i4, i6);
 __ZN7CityMap20checkUndergroundTileEii(i1, i5, i6);
 __ZN7CityMap20checkUndergroundTileEii(i1, i4, i7);
 __ZN7CityMap20checkUndergroundTileEii(i1, i5, i7);
 return;
}

function __ZN5ImGui14EndMainMenuBarEv() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i1 = 0;
 __ZN5ImGui10EndMenuBarEv();
 i2 = HEAP32[1460598] | 0;
 i3 = HEAP32[i2 + 6392 >> 2] | 0;
 if ((i3 | 0) != (HEAP32[i2 + 6644 >> 2] | 0)) {
  __ZN5ImGui3EndEv();
  return;
 }
 if (HEAP32[i2 + 6720 >> 2] | 0) {
  __ZN5ImGui3EndEv();
  return;
 }
 i4 = HEAP32[i2 + 6340 >> 2] | 0;
 if ((i4 | 0) <= 0) {
  __ZN5ImGui3EndEv();
  return;
 }
 i5 = HEAP32[i2 + 6348 >> 2] | 0;
 i2 = i4;
 while (1) {
  i4 = i2;
  i2 = i2 + -1 | 0;
  i6 = HEAP32[i5 + (i2 << 2) >> 2] | 0;
  if ((i6 | 0) != (i3 | 0)) if (HEAP8[i6 + 119 >> 0] | 0) if (!(HEAP32[i6 + 8 >> 2] & 16777216)) break;
  if ((i4 | 0) <= 1) {
   i1 = 10;
   break;
  }
 }
 if ((i1 | 0) == 10) {
  __ZN5ImGui3EndEv();
  return;
 }
 i1 = HEAP32[i6 + 772 >> 2] | 0;
 __ZN5ImGui11FocusWindowEP11ImGuiWindow((i1 | 0) == 0 ? i6 : i1);
 __ZN5ImGui3EndEv();
 return;
}

function __ZN11RenderQueue6setMVPEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = i1;
 i4 = i2;
 i2 = i3 + 64 | 0;
 do {
  HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
  i3 = i3 + 4 | 0;
  i4 = i4 + 4 | 0;
 } while ((i3 | 0) < (i2 | 0));
 i5 = HEAP32[i1 + 120 >> 2] | 0;
 i6 = __Znwj(104) | 0;
 i7 = i6 + 8 | 0;
 i3 = i7;
 i4 = i1;
 i2 = i3 + 76 | 0;
 do {
  HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
  i3 = i3 + 4 | 0;
  i4 = i4 + 4 | 0;
 } while ((i3 | 0) < (i2 | 0));
 HEAP8[i7 + 76 >> 0] = HEAP8[i1 + 76 >> 0] | 0;
 __ZNSt3__26vectorIiNS_9allocatorIiEEEC2ERKS3_(i6 + 88 | 0, i1 + 80 | 0);
 HEAP8[i6 + 100 >> 0] = HEAP8[i1 + 92 >> 0] | 0;
 HEAP32[i6 + 4 >> 2] = i5;
 i1 = HEAP32[i5 >> 2] | 0;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i1 + 4 >> 2] = i6;
 HEAP32[i5 >> 2] = i6;
 i6 = i5 + 8 | 0;
 HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 return;
}

function __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i6;
 __ZNKSt3__28ios_base6getlocEv(i7, i2);
 i2 = __ZNKSt3__26locale9use_facetERNS0_2idE(i7, 5845220) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 48 >> 2] & 7](i2, 70463, 70495, i3) | 0;
 i3 = __ZNKSt3__26locale9use_facetERNS0_2idE(i7, 5845228) | 0;
 i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] & 127](i3) | 0;
 HEAP32[i4 >> 2] = i2;
 i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] & 127](i3) | 0;
 HEAP32[i5 >> 2] = i2;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2] & 63](i1, i3);
 __ZNSt3__26localeD2Ev(i7);
 STACKTOP = i6;
 return;
}

function ___overflow(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4;
 i6 = i2 & 255;
 HEAP8[i5 >> 0] = i6;
 i7 = i1 + 16 | 0;
 i8 = HEAP32[i7 >> 2] | 0;
 if (!i8) if (!(___towrite(i1) | 0)) {
  i9 = HEAP32[i7 >> 2] | 0;
  i3 = 4;
 } else i10 = -1; else {
  i9 = i8;
  i3 = 4;
 }
 do if ((i3 | 0) == 4) {
  i8 = i1 + 20 | 0;
  i7 = HEAP32[i8 >> 2] | 0;
  if (i7 >>> 0 < i9 >>> 0) {
   i11 = i2 & 255;
   if ((i11 | 0) != (HEAP8[i1 + 75 >> 0] | 0)) {
    HEAP32[i8 >> 2] = i7 + 1;
    HEAP8[i7 >> 0] = i6;
    i10 = i11;
    break;
   }
  }
  if ((FUNCTION_TABLE_iiii[HEAP32[i1 + 36 >> 2] & 31](i1, i5, 1) | 0) == 1) i10 = HEAPU8[i5 >> 0] | 0; else i10 = -1;
 } while (0);
 STACKTOP = i4;
 return i10 | 0;
}

function __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i6;
 __ZNKSt3__28ios_base6getlocEv(i7, i2);
 i2 = __ZNKSt3__26locale9use_facetERNS0_2idE(i7, 5845188) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 32 >> 2] & 7](i2, 70463, 70495, i3) | 0;
 i3 = __ZNKSt3__26locale9use_facetERNS0_2idE(i7, 5845204) | 0;
 i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] & 127](i3) | 0;
 HEAP8[i4 >> 0] = i2;
 i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] & 127](i3) | 0;
 HEAP8[i5 >> 0] = i2;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2] & 63](i1, i3);
 __ZNSt3__26localeD2Ev(i7);
 STACKTOP = i6;
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4;
 i6 = i1 + 11 | 0;
 i7 = HEAP8[i6 >> 0] | 0;
 i8 = i7 << 24 >> 24 < 0;
 if (i8) i9 = HEAP32[i1 + 4 >> 2] | 0; else i9 = i7 & 255;
 do if (i9 >>> 0 < i2 >>> 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc(i1, i2 - i9 | 0, i3) | 0; else if (i8) {
  i7 = (HEAP32[i1 >> 2] | 0) + i2 | 0;
  HEAP8[i5 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc(i7, i5);
  HEAP32[i1 + 4 >> 2] = i2;
  break;
 } else {
  HEAP8[i5 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc(i1 + i2 | 0, i5);
  HEAP8[i6 >> 0] = i2;
  break;
 } while (0);
 STACKTOP = i4;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 4 | 0;
 i9 = i7;
 i10 = i1 + 8 | 0;
 i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] & 127](i10) | 0;
 HEAP32[i9 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 i9 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb(i3, i8, i1, i1 + 288 | 0, i6, i5, 0) | 0) - i1 | 0;
 if ((i9 | 0) < 288) HEAP32[i2 >> 2] = ((i9 | 0) / 12 | 0 | 0) % 12 | 0;
 STACKTOP = i7;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 4 | 0;
 i9 = i7;
 i10 = i1 + 8 | 0;
 i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] & 127](i10) | 0;
 HEAP32[i9 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 i9 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb(i3, i8, i1, i1 + 288 | 0, i6, i5, 0) | 0) - i1 | 0;
 if ((i9 | 0) < 288) HEAP32[i2 >> 2] = ((i9 | 0) / 12 | 0 | 0) % 12 | 0;
 STACKTOP = i7;
 return;
}

function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = HEAP32[i1 >> 2] | 0;
 i4 = i1 + 4 | 0;
 i5 = i2 + 4 | 0;
 i6 = (HEAP32[i4 >> 2] | 0) - i3 | 0;
 i7 = (HEAP32[i5 >> 2] | 0) + (0 - (i6 >> 2) << 2) | 0;
 HEAP32[i5 >> 2] = i7;
 if ((i6 | 0) > 0) {
  _memcpy(i7 | 0, i3 | 0, i6 | 0) | 0;
  i8 = i5;
  i9 = HEAP32[i5 >> 2] | 0;
 } else {
  i8 = i5;
  i9 = i7;
 }
 i7 = HEAP32[i1 >> 2] | 0;
 HEAP32[i1 >> 2] = i9;
 HEAP32[i8 >> 2] = i7;
 i7 = i2 + 8 | 0;
 i9 = HEAP32[i4 >> 2] | 0;
 HEAP32[i4 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i7 >> 2] = i9;
 i9 = i1 + 8 | 0;
 i1 = i2 + 12 | 0;
 i7 = HEAP32[i9 >> 2] | 0;
 HEAP32[i9 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i1 >> 2] = i7;
 HEAP32[i2 >> 2] = HEAP32[i8 >> 2];
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 4 | 0;
 i9 = i7;
 i10 = i1 + 8 | 0;
 i1 = FUNCTION_TABLE_ii[HEAP32[HEAP32[i10 >> 2] >> 2] & 127](i10) | 0;
 HEAP32[i9 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 i9 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb(i3, i8, i1, i1 + 168 | 0, i6, i5, 0) | 0) - i1 | 0;
 if ((i9 | 0) < 168) HEAP32[i2 >> 2] = ((i9 | 0) / 12 | 0 | 0) % 7 | 0;
 STACKTOP = i7;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 4 | 0;
 i9 = i7;
 i10 = i1 + 8 | 0;
 i1 = FUNCTION_TABLE_ii[HEAP32[HEAP32[i10 >> 2] >> 2] & 127](i10) | 0;
 HEAP32[i9 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 i9 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb(i3, i8, i1, i1 + 168 | 0, i6, i5, 0) | 0) - i1 | 0;
 if ((i9 | 0) < 168) HEAP32[i2 >> 2] = ((i9 | 0) / 12 | 0 | 0) % 7 | 0;
 STACKTOP = i7;
 return;
}

function _png_chunk_unknown_handling(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4;
 HEAP8[i5 >> 0] = i2 >>> 24;
 HEAP8[i5 + 1 >> 0] = i2 >>> 16;
 HEAP8[i5 + 2 >> 0] = i2 >>> 8;
 HEAP8[i5 + 3 >> 0] = i2;
 HEAP8[i5 + 4 >> 0] = 0;
 if (!i1) {
  i6 = 0;
  STACKTOP = i4;
  return i6 | 0;
 }
 i2 = HEAP32[i1 + 692 >> 2] | 0;
 if (!i2) {
  i6 = 0;
  STACKTOP = i4;
  return i6 | 0;
 }
 i7 = HEAP32[i1 + 696 >> 2] | 0;
 i1 = i7 + (i2 * 5 | 0) | 0;
 while (1) {
  i2 = i1 + -5 | 0;
  if (!(_memcmp(i5, i2, 4) | 0)) break;
  if (i2 >>> 0 > i7 >>> 0) i1 = i2; else {
   i6 = 0;
   i3 = 7;
   break;
  }
 }
 if ((i3 | 0) == 7) {
  STACKTOP = i4;
  return i6 | 0;
 }
 i6 = HEAPU8[i1 + -1 >> 0] | 0;
 STACKTOP = i4;
 return i6 | 0;
}

function _cycle(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256);
 i5 = i4;
 L1 : do if ((i3 | 0) >= 2) {
  i6 = i2 + (i3 << 2) | 0;
  HEAP32[i6 >> 2] = i5;
  if (i1 | 0) {
   i7 = i1;
   i8 = i5;
   while (1) {
    i9 = i7 >>> 0 < 256 ? i7 : 256;
    _memcpy(i8 | 0, HEAP32[i2 >> 2] | 0, i9 | 0) | 0;
    i10 = 0;
    do {
     i11 = i2 + (i10 << 2) | 0;
     i10 = i10 + 1 | 0;
     _memcpy(HEAP32[i11 >> 2] | 0, HEAP32[i2 + (i10 << 2) >> 2] | 0, i9 | 0) | 0;
     HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + i9;
    } while ((i10 | 0) != (i3 | 0));
    i10 = i7 - i9 | 0;
    if (!i10) break L1;
    i7 = i10;
    i8 = HEAP32[i6 >> 2] | 0;
   }
  }
 } while (0);
 STACKTOP = i4;
 return;
}

function _png_read_filter_row_avg(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i4 = ((HEAPU8[i1 + 11 >> 0] | 0) + 7 | 0) >>> 3;
 i5 = (HEAP32[i1 + 4 >> 2] | 0) - i4 | 0;
 if (!i4) {
  i6 = i2;
  i7 = i3;
 } else {
  i1 = i3 + i4 | 0;
  i8 = i2;
  i9 = i3;
  i3 = 0;
  while (1) {
   HEAP8[i8 >> 0] = ((HEAPU8[i9 >> 0] | 0) >>> 1 & 255) + (HEAPU8[i8 >> 0] | 0);
   i3 = i3 + 1 | 0;
   if ((i3 | 0) == (i4 | 0)) break; else {
    i8 = i8 + 1 | 0;
    i9 = i9 + 1 | 0;
   }
  }
  i6 = i2 + i4 | 0;
  i7 = i1;
 }
 if (!i5) return;
 i1 = 0 - i4 | 0;
 i4 = i6;
 i6 = i7;
 i7 = 0;
 while (1) {
  HEAP8[i4 >> 0] = (((HEAPU8[i4 + i1 >> 0] | 0) + (HEAPU8[i6 >> 0] | 0) | 0) >>> 1) + (HEAPU8[i4 >> 0] | 0);
  i7 = i7 + 1 | 0;
  if ((i7 | 0) == (i5 | 0)) break; else {
   i4 = i4 + 1 | 0;
   i6 = i6 + 1 | 0;
  }
 }
 return;
}

function __ZN8LineTool8setPointEii(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i4 = i1 + 4 | 0;
 if (!(HEAP8[i1 >> 0] | 0)) {
  HEAP32[i4 >> 2] = i2;
  i5 = i1 + 8 | 0;
  HEAP32[i5 >> 2] = i3;
  HEAP8[i1 >> 0] = 1;
  i6 = i5;
  i7 = i3;
  i8 = i2;
 } else {
  i5 = i1 + 8 | 0;
  i6 = i5;
  i7 = HEAP32[i5 >> 2] | 0;
  i8 = HEAP32[i4 >> 2] | 0;
 }
 i4 = i2 - i8 | 0;
 i5 = i3 - i7 | 0;
 i7 = i1 + 16 | 0;
 if ((((i4 | 0) > -1 ? i4 : 0 - i4 | 0) | 0) < (((i5 | 0) > -1 ? i5 : 0 - i5 | 0) | 0)) {
  HEAP32[i7 >> 2] = i8;
  i9 = i3;
  i10 = i1 + 20 | 0;
  HEAP32[i10 >> 2] = i9;
  i11 = i1 + 12 | 0;
  HEAP8[i11 >> 0] = 1;
  return;
 } else {
  HEAP32[i7 >> 2] = i2;
  i9 = HEAP32[i6 >> 2] | 0;
  i10 = i1 + 20 | 0;
  HEAP32[i10 >> 2] = i9;
  i11 = i1 + 12 | 0;
  HEAP8[i11 >> 0] = 1;
  return;
 }
}

function __ZNKSt3__28numpunctIcE12do_falsenameEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i2;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 i4 = __ZNSt3__211char_traitsIcE6lengthEPKc(72554) | 0;
 if (i4 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i1);
 if (i4 >>> 0 < 11) {
  HEAP8[i1 + 11 >> 0] = i4;
  i5 = i1;
 } else {
  i6 = i4 + 16 & -16;
  i7 = __Znwj(i6) | 0;
  HEAP32[i1 >> 2] = i7;
  HEAP32[i1 + 8 >> 2] = i6 | -2147483648;
  HEAP32[i1 + 4 >> 2] = i4;
  i5 = i7;
 }
 __ZNSt3__211char_traitsIcE4copyEPcPKcj(i5, 72554, i4) | 0;
 HEAP8[i3 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc(i5 + i4 | 0, i3);
 STACKTOP = i2;
 return;
}

function __ZNKSt3__28numpunctIcE11do_truenameEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i2;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 i4 = __ZNSt3__211char_traitsIcE6lengthEPKc(72560) | 0;
 if (i4 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i1);
 if (i4 >>> 0 < 11) {
  HEAP8[i1 + 11 >> 0] = i4;
  i5 = i1;
 } else {
  i6 = i4 + 16 & -16;
  i7 = __Znwj(i6) | 0;
  HEAP32[i1 >> 2] = i7;
  HEAP32[i1 + 8 >> 2] = i6 | -2147483648;
  HEAP32[i1 + 4 >> 2] = i4;
  i5 = i7;
 }
 __ZNSt3__211char_traitsIcE4copyEPcPKcj(i5, 72560, i4) | 0;
 HEAP8[i3 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc(i5 + i4 | 0, i3);
 STACKTOP = i2;
 return;
}

function __Z36ImGui_ImplOpenGL3_CreateFontsTexturev() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i1 + 12 | 0;
 i3 = i1 + 8 | 0;
 i4 = i1 + 4 | 0;
 i5 = i1;
 i6 = (__ZN5ImGui5GetIOEv() | 0) + 140 | 0;
 __ZN11ImFontAtlas18GetTexDataAsRGBA32EPPhPiS2_S2_(HEAP32[i6 >> 2] | 0, i2, i3, i4, 0);
 _glGetIntegerv(32873, i5 | 0);
 _glGenTextures(1, 5843496);
 _glBindTexture(3553, HEAP32[1460874] | 0);
 _glTexParameteri(3553, 10241, 9729);
 _glTexParameteri(3553, 10240, 9729);
 _glPixelStorei(3314, 0);
 _glTexImage2D(3553, 0, 6408, HEAP32[i3 >> 2] | 0, HEAP32[i4 >> 2] | 0, 0, 6408, 5121, HEAP32[i2 >> 2] | 0);
 HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] = HEAP32[1460874];
 _glBindTexture(3553, HEAP32[i5 >> 2] | 0);
 STACKTOP = i1;
 return 1;
}

function __ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i4 = i1 + 4 | 0;
 i5 = (HEAP32[i4 >> 2] | 0) != 130;
 i6 = HEAP32[i1 >> 2] | 0;
 i7 = (HEAP32[i3 >> 2] | 0) - i6 | 0;
 i8 = i7 >>> 0 < 2147483647 ? i7 << 1 : -1;
 i7 = (i8 | 0) == 0 ? 4 : i8;
 i8 = (HEAP32[i2 >> 2] | 0) - i6 >> 2;
 i9 = _realloc(i5 ? i6 : 0, i7) | 0;
 if (!i9) __ZSt17__throw_bad_allocv();
 if (i5) {
  HEAP32[i1 >> 2] = i9;
  i10 = i9;
 } else {
  i5 = HEAP32[i1 >> 2] | 0;
  HEAP32[i1 >> 2] = i9;
  if (!i5) i10 = i9; else {
   FUNCTION_TABLE_vi[HEAP32[i4 >> 2] & 255](i5);
   i10 = HEAP32[i1 >> 2] | 0;
  }
 }
 HEAP32[i4 >> 2] = 131;
 HEAP32[i2 >> 2] = i10 + (i8 << 2);
 HEAP32[i3 >> 2] = (HEAP32[i1 >> 2] | 0) + (i7 >>> 2 << 2);
 return;
}

function __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i4 = i1 + 4 | 0;
 i5 = (HEAP32[i4 >> 2] | 0) != 130;
 i6 = HEAP32[i1 >> 2] | 0;
 i7 = (HEAP32[i3 >> 2] | 0) - i6 | 0;
 i8 = i7 >>> 0 < 2147483647 ? i7 << 1 : -1;
 i7 = (i8 | 0) == 0 ? 4 : i8;
 i8 = (HEAP32[i2 >> 2] | 0) - i6 >> 2;
 i9 = _realloc(i5 ? i6 : 0, i7) | 0;
 if (!i9) __ZSt17__throw_bad_allocv();
 if (i5) {
  HEAP32[i1 >> 2] = i9;
  i10 = i9;
 } else {
  i5 = HEAP32[i1 >> 2] | 0;
  HEAP32[i1 >> 2] = i9;
  if (!i5) i10 = i9; else {
   FUNCTION_TABLE_vi[HEAP32[i4 >> 2] & 255](i5);
   i10 = HEAP32[i1 >> 2] | 0;
  }
 }
 HEAP32[i4 >> 2] = 131;
 HEAP32[i2 >> 2] = i10 + (i8 << 2);
 HEAP32[i3 >> 2] = (HEAP32[i1 >> 2] | 0) + (i7 >>> 2 << 2);
 return;
}

function _png_read_filter_row_paeth_1byte_pixel(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i4 = HEAP32[i1 + 4 >> 2] | 0;
 i1 = i2 + i4 | 0;
 i5 = HEAPU8[i3 >> 0] | 0;
 i6 = (HEAPU8[i2 >> 0] | 0) + i5 | 0;
 HEAP8[i2 >> 0] = i6;
 if ((i4 | 0) <= 1) return;
 i4 = i3;
 i3 = i5;
 i5 = i2 + 1 | 0;
 i2 = i6;
 do {
  i4 = i4 + 1 | 0;
  i6 = i2 & 255;
  i7 = i3;
  i3 = HEAPU8[i4 >> 0] | 0;
  i8 = i3 - i7 | 0;
  i9 = i6 - i7 | 0;
  i10 = (i8 | 0) < 0 ? 0 - i8 | 0 : i8;
  i11 = (i9 | 0) < 0 ? 0 - i9 | 0 : i9;
  i12 = i8 + i9 | 0;
  i9 = (i11 | 0) < (i10 | 0);
  i2 = ((((i12 | 0) < 0 ? 0 - i12 | 0 : i12) | 0) < ((i9 ? i11 : i10) | 0) ? i7 : i9 ? i3 : i6) + (HEAPU8[i5 >> 0] | 0) | 0;
  HEAP8[i5 >> 0] = i2;
  i5 = i5 + 1 | 0;
 } while (i5 >>> 0 < i1 >>> 0);
 return;
}

function __ZN7CityMapC2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 HEAP32[i1 >> 2] = 256;
 HEAP32[i1 + 4 >> 2] = 256;
 i2 = i1 + 8 | 0;
 i3 = i1 + 40 | 0;
 i4 = i3;
 i5 = i4 + 84 | 0;
 do {
  HEAP32[i4 >> 2] = 0;
  i4 = i4 + 4 | 0;
 } while ((i4 | 0) < (i5 | 0));
 HEAP8[i3 + 84 >> 0] = 0;
 i6 = i1 + 5767296 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 HEAP32[i2 + 12 >> 2] = 0;
 HEAP32[i2 + 16 >> 2] = 0;
 HEAP32[i2 + 20 >> 2] = 0;
 HEAP32[i2 + 24 >> 2] = 0;
 HEAP8[i2 + 28 >> 0] = 0;
 i2 = i1 + 128 | 0;
 do {
  i4 = i2;
  i5 = i4 + 84 | 0;
  do {
   HEAP32[i4 >> 2] = 0;
   i4 = i4 + 4 | 0;
  } while ((i4 | 0) < (i5 | 0));
  HEAP8[i2 + 84 >> 0] = 0;
  i2 = i2 + 88 | 0;
 } while ((i2 | 0) != (i6 | 0));
 HEAP8[i1 + 5767296 >> 0] = 0;
 HEAP32[i1 + 56 >> 2] = 1;
 HEAP32[i3 >> 2] = 1;
 return;
}

function _png_set_tIME(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 if ((i1 | 0) == 0 | (i2 | 0) == 0 | (i3 | 0) == 0) return;
 if (HEAP32[i1 + 208 >> 2] & 512 | 0) return;
 if (((HEAP8[i3 + 2 >> 0] | 0) + -1 & 255) <= 11) if (((HEAP8[i3 + 3 >> 0] | 0) + -1 & 255) <= 30) if ((HEAPU8[i3 + 4 >> 0] | 0) <= 23) if ((HEAPU8[i3 + 5 >> 0] | 0) <= 59) if ((HEAPU8[i3 + 6 >> 0] | 0) <= 60) {
  i4 = i3;
  i3 = i4;
  i5 = HEAPU16[i3 >> 1] | HEAPU16[i3 + 2 >> 1] << 16;
  i3 = i4 + 4 | 0;
  i4 = HEAPU16[i3 >> 1] | HEAPU16[i3 + 2 >> 1] << 16;
  i3 = i2 + 140 | 0;
  i6 = i3;
  HEAP16[i6 >> 1] = i5;
  HEAP16[i6 + 2 >> 1] = i5 >>> 16;
  i5 = i3 + 4 | 0;
  HEAP16[i5 >> 1] = i4;
  HEAP16[i5 + 2 >> 1] = i4 >>> 16;
  i4 = i2 + 8 | 0;
  HEAP32[i4 >> 2] = HEAP32[i4 >> 2] | 512;
  return;
 }
 _png_warning(i1, 61279);
 return;
}

function __Z10loadShaderjPKc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 1040 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1040);
 i4 = i3 + 4 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3;
 i7 = i3 + 16 | 0;
 HEAP32[i4 >> 2] = i2;
 i2 = _glCreateShader(i1 | 0) | 0;
 if (!i2) {
  i8 = 0;
  STACKTOP = i3;
  return i8 | 0;
 }
 _glShaderSource(i2 | 0, 1, i4 | 0, 0);
 _glCompileShader(i2 | 0);
 HEAP32[i6 >> 2] = 0;
 _glGetShaderiv(i2 | 0, 35713, i5 | 0);
 if (!(HEAP32[i5 >> 2] | 0)) {
  _glGetShaderiv(i2 | 0, 35716, i6 | 0);
  if ((HEAP32[i6 >> 2] | 0) > 0) {
   _memset(i7 | 0, 0, 1024) | 0;
   _glGetShaderInfoLog(i2 | 0, 1024, 0, i7 | 0);
  }
  _glDeleteShader(i2 | 0);
  i9 = 0;
 } else i9 = i2;
 i8 = i9;
 STACKTOP = i3;
 return i8 | 0;
}

function _png_chunk_report(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224);
 i5 = i4;
 if (HEAP32[i1 + 208 >> 2] & 32768 | 0) {
  if ((i3 | 0) < 2) {
   _png_format_buffer(HEAP32[i1 + 376 >> 2] | 0, i5, i2);
   _png_warning(i1, i5);
   STACKTOP = i4;
   return;
  }
  if (!(HEAP32[i1 + 212 >> 2] & 1048576)) _png_chunk_error(i1, i2);
  _png_format_buffer(HEAP32[i1 + 376 >> 2] | 0, i5, i2);
  _png_warning(i1, i5);
  STACKTOP = i4;
  return;
 }
 i5 = HEAP32[i1 + 212 >> 2] | 0;
 if ((i3 | 0) < 1) {
  if (!(i5 & 2097152)) _png_error(i1, i2);
  _png_warning(i1, i2);
  STACKTOP = i4;
  return;
 } else {
  if (!(i5 & 4194304)) _png_error(i1, i2);
  _png_warning(i1, i2);
  STACKTOP = i4;
  return;
 }
}

function __ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i4 = i1 + 4 | 0;
 i5 = (HEAP32[i4 >> 2] | 0) != 130;
 i6 = HEAP32[i1 >> 2] | 0;
 i7 = (HEAP32[i3 >> 2] | 0) - i6 | 0;
 i8 = i7 >>> 0 < 2147483647 ? i7 << 1 : -1;
 i7 = (i8 | 0) == 0 ? 1 : i8;
 i8 = (HEAP32[i2 >> 2] | 0) - i6 | 0;
 i9 = _realloc(i5 ? i6 : 0, i7) | 0;
 if (!i9) __ZSt17__throw_bad_allocv();
 if (i5) {
  HEAP32[i1 >> 2] = i9;
  i10 = i9;
 } else {
  i5 = HEAP32[i1 >> 2] | 0;
  HEAP32[i1 >> 2] = i9;
  if (!i5) i10 = i9; else {
   FUNCTION_TABLE_vi[HEAP32[i4 >> 2] & 255](i5);
   i10 = HEAP32[i1 >> 2] | 0;
  }
 }
 HEAP32[i4 >> 2] = 131;
 HEAP32[i2 >> 2] = i10 + i8;
 HEAP32[i3 >> 2] = (HEAP32[i1 >> 2] | 0) + i7;
 return;
}

function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i2;
 if (HEAP32[i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0) {
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_(i3, i1);
  if (HEAP8[i3 >> 0] | 0) {
   i4 = HEAP32[i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] & 127](i4) | 0) == -1) {
    i4 = i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0;
    __ZNSt3__28ios_base5clearEj(i4, HEAP32[i4 + 16 >> 2] | 1);
   }
  }
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(i3);
 }
 STACKTOP = i2;
 return i1 | 0;
}

function _inflateReset(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 if (!i1) {
  i2 = -2;
  return i2 | 0;
 }
 i3 = HEAP32[i1 + 28 >> 2] | 0;
 if (!i3) {
  i2 = -2;
  return i2 | 0;
 }
 HEAP32[i3 + 40 >> 2] = 0;
 HEAP32[i3 + 44 >> 2] = 0;
 HEAP32[i3 + 48 >> 2] = 0;
 HEAP32[i3 + 28 >> 2] = 0;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 24 >> 2] = 0;
 i4 = HEAP32[i3 + 8 >> 2] | 0;
 if (i4 | 0) HEAP32[i1 + 48 >> 2] = i4 & 1;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 HEAP32[i3 + 20 >> 2] = 32768;
 HEAP32[i3 + 32 >> 2] = 0;
 HEAP32[i3 + 56 >> 2] = 0;
 HEAP32[i3 + 60 >> 2] = 0;
 i4 = i3 + 1328 | 0;
 HEAP32[i3 + 108 >> 2] = i4;
 HEAP32[i3 + 80 >> 2] = i4;
 HEAP32[i3 + 76 >> 2] = i4;
 HEAP32[i3 + 7104 >> 2] = 1;
 HEAP32[i3 + 7108 >> 2] = -1;
 i2 = 0;
 return i2 | 0;
}

function _ungetc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = 0;
 do if ((i1 | 0) == -1) i4 = -1; else {
  if ((HEAP32[i2 + 76 >> 2] | 0) > -1) i5 = ___lockfile(i2) | 0; else i5 = 0;
  i6 = i2 + 4 | 0;
  i7 = HEAP32[i6 >> 2] | 0;
  if (!i7) {
   ___toread(i2) | 0;
   i8 = HEAP32[i6 >> 2] | 0;
   if (i8 | 0) {
    i9 = i8;
    i3 = 6;
   }
  } else {
   i9 = i7;
   i3 = 6;
  }
  if ((i3 | 0) == 6) if (i9 >>> 0 > ((HEAP32[i2 + 44 >> 2] | 0) + -8 | 0) >>> 0) {
   i7 = i9 + -1 | 0;
   HEAP32[i6 >> 2] = i7;
   HEAP8[i7 >> 0] = i1;
   HEAP32[i2 >> 2] = HEAP32[i2 >> 2] & -17;
   if (!i5) {
    i4 = i1;
    break;
   }
   ___unlockfile(i2);
   i4 = i1;
   break;
  }
  if (!i5) i4 = -1; else {
   ___unlockfile(i2);
   i4 = -1;
  }
 } while (0);
 return i4 | 0;
}

function _open(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i5 = i4 + 16 | 0;
 i6 = i4;
 i7 = i4 + 32 | 0;
 if (!(i2 & 4194368)) i8 = 0; else {
  HEAP32[i7 >> 2] = i3;
  i3 = (HEAP32[i7 >> 2] | 0) + (4 - 1) & ~(4 - 1);
  i9 = HEAP32[i3 >> 2] | 0;
  HEAP32[i7 >> 2] = i3 + 4;
  i8 = i9;
 }
 HEAP32[i6 >> 2] = i1;
 HEAP32[i6 + 4 >> 2] = i2 | 32768;
 HEAP32[i6 + 8 >> 2] = i8;
 i8 = ___syscall5(5, i6 | 0) | 0;
 if (!((i2 & 524288 | 0) == 0 | (i8 | 0) < 0)) {
  HEAP32[i5 >> 2] = i8;
  HEAP32[i5 + 4 >> 2] = 2;
  HEAP32[i5 + 8 >> 2] = 1;
  ___syscall221(221, i5 | 0) | 0;
 }
 i5 = ___syscall_ret(i8) | 0;
 STACKTOP = i4;
 return i5 | 0;
}

function _strlen(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i2 = 0;
 i3 = i1;
 L1 : do if (!(i3 & 3)) {
  i4 = i1;
  i2 = 4;
 } else {
  i5 = i1;
  i6 = i3;
  while (1) {
   if (!(HEAP8[i5 >> 0] | 0)) {
    i7 = i6;
    break L1;
   }
   i8 = i5 + 1 | 0;
   i6 = i8;
   if (!(i6 & 3)) {
    i4 = i8;
    i2 = 4;
    break;
   } else i5 = i8;
  }
 } while (0);
 if ((i2 | 0) == 4) {
  i2 = i4;
  while (1) {
   i9 = HEAP32[i2 >> 2] | 0;
   if (!((i9 & -2139062144 ^ -2139062144) & i9 + -16843009)) i2 = i2 + 4 | 0; else break;
  }
  if (!((i9 & 255) << 24 >> 24)) i10 = i2; else {
   i9 = i2;
   while (1) {
    i2 = i9 + 1 | 0;
    if (!(HEAP8[i2 >> 0] | 0)) {
     i10 = i2;
     break;
    } else i9 = i2;
   }
  }
  i7 = i10;
 }
 return i7 - i3 | 0;
}

function _fmt_u(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 if (i2 >>> 0 > 0 | (i2 | 0) == 0 & i1 >>> 0 > 4294967295) {
  i4 = i3;
  i5 = i1;
  i6 = i2;
  while (1) {
   i2 = ___uremdi3(i5 | 0, i6 | 0, 10, 0) | 0;
   i4 = i4 + -1 | 0;
   HEAP8[i4 >> 0] = i2 & 255 | 48;
   i2 = i5;
   i5 = ___udivdi3(i5 | 0, i6 | 0, 10, 0) | 0;
   if (!(i6 >>> 0 > 9 | (i6 | 0) == 9 & i2 >>> 0 > 4294967295)) break; else i6 = tempRet0;
  }
  i7 = i5;
  i8 = i4;
 } else {
  i7 = i1;
  i8 = i3;
 }
 if (!i7) i9 = i8; else {
  i3 = i7;
  i7 = i8;
  while (1) {
   i8 = i7 + -1 | 0;
   HEAP8[i8 >> 0] = (i3 >>> 0) % 10 | 0 | 48;
   if (i3 >>> 0 < 10) {
    i9 = i8;
    break;
   } else {
    i3 = (i3 >>> 0) / 10 | 0;
    i7 = i8;
   }
  }
 }
 return i9 | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 4 | 0;
 i9 = i7;
 __ZNKSt3__28ios_base6getlocEv(i8, i4);
 i4 = __ZNKSt3__26locale9use_facetERNS0_2idE(i8, 5845220) | 0;
 __ZNSt3__26localeD2Ev(i8);
 HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i6 + 16 | 0, i2, i8, i5, i4);
 STACKTOP = i7;
 return HEAP32[i2 >> 2] | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 4 | 0;
 i9 = i7;
 __ZNKSt3__28ios_base6getlocEv(i8, i4);
 i4 = __ZNKSt3__26locale9use_facetERNS0_2idE(i8, 5845220) | 0;
 __ZNSt3__26localeD2Ev(i8);
 HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i6 + 24 | 0, i2, i8, i5, i4);
 STACKTOP = i7;
 return HEAP32[i2 >> 2] | 0;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 4 | 0;
 i9 = i7;
 __ZNKSt3__28ios_base6getlocEv(i8, i4);
 i4 = __ZNKSt3__26locale9use_facetERNS0_2idE(i8, 5845188) | 0;
 __ZNSt3__26localeD2Ev(i8);
 HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i6 + 16 | 0, i2, i8, i5, i4);
 STACKTOP = i7;
 return HEAP32[i2 >> 2] | 0;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 4 | 0;
 i9 = i7;
 __ZNKSt3__28ios_base6getlocEv(i8, i4);
 i4 = __ZNKSt3__26locale9use_facetERNS0_2idE(i8, 5845188) | 0;
 __ZNSt3__26localeD2Ev(i8);
 HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i6 + 24 | 0, i2, i8, i5, i4);
 STACKTOP = i7;
 return HEAP32[i2 >> 2] | 0;
}

function _png_set_PLTE(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 if ((i1 | 0) == 0 | (i2 | 0) == 0) return;
 if (i4 >>> 0 > 256) {
  if ((HEAP8[i2 + 25 >> 0] | 0) == 3) _png_error(i1, 63362);
  _png_warning(i1, 63362);
  return;
 }
 i5 = (i4 | 0) != 0;
 if ((i3 | 0) == 0 & i5) _png_error(i1, 63385);
 if (!i4) if (!(HEAP32[i1 + 708 >> 2] & 1)) _png_error(i1, 63385);
 _png_free_data(i1, i2, 4096, 0);
 i6 = _png_calloc(i1, 768) | 0;
 HEAP32[i1 + 416 >> 2] = i6;
 if (i5) _memcpy(i6 | 0, i3 | 0, i4 * 3 | 0) | 0;
 HEAP32[i2 + 16 >> 2] = i6;
 i6 = i4 & 65535;
 HEAP16[i1 + 420 >> 1] = i6;
 HEAP16[i2 + 20 >> 1] = i6;
 i6 = i2 + 232 | 0;
 HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 4096;
 i6 = i2 + 8 | 0;
 HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 8;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i10 = i7 + 4 | 0;
 i11 = i7;
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i11 >> 2];
 i11 = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i1, i9, i8, i4, i5, i6, 19996, 20028) | 0;
 STACKTOP = i7;
 return i11 | 0;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i10 = i7 + 4 | 0;
 i11 = i7;
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i11 >> 2];
 i11 = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i1, i9, i8, i4, i5, i6, 71242, 71250) | 0;
 STACKTOP = i7;
 return i11 | 0;
}

function _frexp(d1, i2) {
 d1 = +d1;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, d6 = 0.0, d7 = 0.0, i8 = 0, d9 = 0.0;
 HEAPF64[tempDoublePtr >> 3] = d1;
 i3 = HEAP32[tempDoublePtr >> 2] | 0;
 i4 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 i5 = _bitshift64Lshr(i3 | 0, i4 | 0, 52) | 0;
 switch (i5 & 2047) {
 case 0:
  {
   if (d1 != 0.0) {
    d6 = +_frexp(d1 * 18446744073709551616.0, i2);
    d7 = d6;
    i8 = (HEAP32[i2 >> 2] | 0) + -64 | 0;
   } else {
    d7 = d1;
    i8 = 0;
   }
   HEAP32[i2 >> 2] = i8;
   d9 = d7;
   break;
  }
 case 2047:
  {
   d9 = d1;
   break;
  }
 default:
  {
   HEAP32[i2 >> 2] = (i5 & 2047) + -1022;
   HEAP32[tempDoublePtr >> 2] = i3;
   HEAP32[tempDoublePtr + 4 >> 2] = i4 & -2146435073 | 1071644672;
   d9 = +HEAPF64[tempDoublePtr >> 3];
  }
 }
 return +d9;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 4 | 0;
 i9 = i7;
 __ZNKSt3__28ios_base6getlocEv(i8, i4);
 i4 = __ZNKSt3__26locale9use_facetERNS0_2idE(i8, 5845220) | 0;
 __ZNSt3__26localeD2Ev(i8);
 HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i6 + 20 | 0, i2, i8, i5, i4);
 STACKTOP = i7;
 return HEAP32[i2 >> 2] | 0;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 4 | 0;
 i9 = i7;
 __ZNKSt3__28ios_base6getlocEv(i8, i4);
 i4 = __ZNKSt3__26locale9use_facetERNS0_2idE(i8, 5845188) | 0;
 __ZNSt3__26localeD2Ev(i8);
 HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i6 + 20 | 0, i2, i8, i5, i4);
 STACKTOP = i7;
 return HEAP32[i2 >> 2] | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i10 = i7 + 4 | 0;
 i11 = i7;
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i11 >> 2];
 i11 = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i9, i8, i4, i5, i6) | 0;
 STACKTOP = i7;
 return i11 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i10 = i7 + 4 | 0;
 i11 = i7;
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i11 >> 2];
 i11 = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i9, i8, i4, i5, i6) | 0;
 STACKTOP = i7;
 return i11 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i10 = i7 + 4 | 0;
 i11 = i7;
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i11 >> 2];
 i11 = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i9, i8, i4, i5, i6) | 0;
 STACKTOP = i7;
 return i11 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i10 = i7 + 4 | 0;
 i11 = i7;
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i11 >> 2];
 i11 = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i9, i8, i4, i5, i6) | 0;
 STACKTOP = i7;
 return i11 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i10 = i7 + 4 | 0;
 i11 = i7;
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i11 >> 2];
 i11 = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i9, i8, i4, i5, i6) | 0;
 STACKTOP = i7;
 return i11 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i10 = i7 + 4 | 0;
 i11 = i7;
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i11 >> 2];
 i11 = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i9, i8, i4, i5, i6) | 0;
 STACKTOP = i7;
 return i11 | 0;
}

function ___fseeko_unlocked(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = 0;
 if ((i3 | 0) == 1) i5 = i2 - (HEAP32[i1 + 8 >> 2] | 0) + (HEAP32[i1 + 4 >> 2] | 0) | 0; else i5 = i2;
 i2 = i1 + 20 | 0;
 i6 = i1 + 28 | 0;
 if ((HEAP32[i2 >> 2] | 0) >>> 0 > (HEAP32[i6 >> 2] | 0) >>> 0) {
  FUNCTION_TABLE_iiii[HEAP32[i1 + 36 >> 2] & 31](i1, 0, 0) | 0;
  if (!(HEAP32[i2 >> 2] | 0)) i7 = -1; else i4 = 5;
 } else i4 = 5;
 if ((i4 | 0) == 5) {
  HEAP32[i1 + 16 >> 2] = 0;
  HEAP32[i6 >> 2] = 0;
  HEAP32[i2 >> 2] = 0;
  if ((FUNCTION_TABLE_iiii[HEAP32[i1 + 40 >> 2] & 31](i1, i5, i3) | 0) < 0) i7 = -1; else {
   HEAP32[i1 + 8 >> 2] = 0;
   HEAP32[i1 + 4 >> 2] = 0;
   HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & -17;
   i7 = 0;
  }
 }
 return i7 | 0;
}

function __ZN9PngLoader4loadEPKc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i3;
 if (_png_image_begin_read_from_file(i1, i2) | 0) {
  HEAP32[i1 + 16 >> 2] = 3;
  i2 = Math_imul(HEAP32[i1 + 8 >> 2] << 2, HEAP32[i1 + 12 >> 2] | 0) | 0;
  HEAP32[i1 + 100 >> 2] = i2;
  i5 = _malloc(i2) | 0;
  i2 = i1 + 96 | 0;
  HEAP32[i2 >> 2] = i5;
  if (i5 | 0) {
   if (_png_image_finish_read(i1, 0, i5, 0, 0) | 0) {
    i6 = 1;
    STACKTOP = i3;
    return i6 | 0;
   }
   i5 = HEAP32[i2 >> 2] | 0;
   if (i5 | 0) _free(i5);
  }
 }
 i5 = HEAP32[3353] | 0;
 HEAP32[i4 >> 2] = i1 + 32;
 _fprintf(i5, 30027, i4) | 0;
 i6 = 0;
 STACKTOP = i3;
 return i6 | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i1 + 4 | 0;
 i8 = i1;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
 i8 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i3, i7, i5, i6, 4) | 0;
 if (!(HEAP32[i5 >> 2] & 4)) {
  if ((i8 | 0) < 69) i9 = i8 + 2e3 | 0; else i9 = (i8 | 0) < 100 ? i8 + 1900 | 0 : i8;
  HEAP32[i2 >> 2] = i9 + -1900;
 }
 STACKTOP = i1;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i1 + 4 | 0;
 i8 = i1;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
 i8 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i3, i7, i5, i6, 4) | 0;
 if (!(HEAP32[i5 >> 2] & 4)) {
  if ((i8 | 0) < 69) i9 = i8 + 2e3 | 0; else i9 = (i8 | 0) < 100 ? i8 + 1900 | 0 : i8;
  HEAP32[i2 >> 2] = i9 + -1900;
 }
 STACKTOP = i1;
 return;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i10 = i7 + 4 | 0;
 i11 = i7;
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i11 >> 2];
 i11 = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i9, i8, i4, i5, i6) | 0;
 STACKTOP = i7;
 return i11 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i10 = i7 + 4 | 0;
 i11 = i7;
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i11 >> 2];
 i11 = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i9, i8, i4, i5, i6) | 0;
 STACKTOP = i7;
 return i11 | 0;
}

function __ZN10ImDrawList22PushClipRectFullScreenEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i3 = i2 + 24 | 0;
 i4 = i2 + 16 | 0;
 i5 = i2 + 8 | 0;
 i6 = i2;
 i7 = HEAP32[i1 + 40 >> 2] | 0;
 i8 = HEAP32[i7 + 24 >> 2] | 0;
 HEAP32[i5 >> 2] = HEAP32[i7 + 20 >> 2];
 HEAP32[i5 + 4 >> 2] = i8;
 i8 = HEAP32[i7 + 32 >> 2] | 0;
 HEAP32[i6 >> 2] = HEAP32[i7 + 28 >> 2];
 HEAP32[i6 + 4 >> 2] = i8;
 HEAP32[i4 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i3 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 __ZN10ImDrawList12PushClipRectE6ImVec2S0_b(i1, i4, i3, 0);
 STACKTOP = i2;
 return;
}

function _strncmp(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 if (!i3) i4 = 0; else {
  i5 = HEAP8[i1 >> 0] | 0;
  L3 : do if (!(i5 << 24 >> 24)) {
   i6 = i2;
   i7 = 0;
  } else {
   i8 = i1;
   i9 = i3;
   i10 = i2;
   i11 = i5;
   while (1) {
    i9 = i9 + -1 | 0;
    i12 = HEAP8[i10 >> 0] | 0;
    if (!(i11 << 24 >> 24 == i12 << 24 >> 24 & ((i9 | 0) != 0 & i12 << 24 >> 24 != 0))) {
     i6 = i10;
     i7 = i11;
     break L3;
    }
    i8 = i8 + 1 | 0;
    i12 = i10 + 1 | 0;
    i11 = HEAP8[i8 >> 0] | 0;
    if (!(i11 << 24 >> 24)) {
     i6 = i12;
     i7 = 0;
     break;
    } else i10 = i12;
   }
  } while (0);
  i4 = (i7 & 255) - (HEAPU8[i6 >> 0] | 0) | 0;
 }
 return i4 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i10 = i7 + 4 | 0;
 i11 = i7;
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i11 >> 2];
 i11 = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i9, i8, i4, i5, i6) | 0;
 STACKTOP = i7;
 return i11 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i10 = i7 + 4 | 0;
 i11 = i7;
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i11 >> 2];
 i11 = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i9, i8, i4, i5, i6) | 0;
 STACKTOP = i7;
 return i11 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i10 = i7 + 4 | 0;
 i11 = i7;
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i11 >> 2];
 i11 = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i9, i8, i4, i5, i6) | 0;
 STACKTOP = i7;
 return i11 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i10 = i7 + 4 | 0;
 i11 = i7;
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i11 >> 2];
 i11 = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i9, i8, i4, i5, i6) | 0;
 STACKTOP = i7;
 return i11 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i10 = i7 + 4 | 0;
 i11 = i7;
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i11 >> 2];
 i11 = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i9, i8, i4, i5, i6) | 0;
 STACKTOP = i7;
 return i11 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i10 = i7 + 4 | 0;
 i11 = i7;
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i11 >> 2];
 i11 = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i9, i8, i4, i5, i6) | 0;
 STACKTOP = i7;
 return i11 | 0;
}

function _strstr(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = HEAP8[i2 >> 0] | 0;
 do if (!(i3 << 24 >> 24)) i4 = i1; else {
  i5 = _strchr(i1, i3 << 24 >> 24) | 0;
  if (!i5) i4 = 0; else if (!(HEAP8[i2 + 1 >> 0] | 0)) i4 = i5; else if (!(HEAP8[i5 + 1 >> 0] | 0)) i4 = 0; else {
   if (!(HEAP8[i2 + 2 >> 0] | 0)) {
    i4 = _twobyte_strstr(i5, i2) | 0;
    break;
   }
   if (!(HEAP8[i5 + 2 >> 0] | 0)) i4 = 0; else {
    if (!(HEAP8[i2 + 3 >> 0] | 0)) {
     i4 = _threebyte_strstr(i5, i2) | 0;
     break;
    }
    if (!(HEAP8[i5 + 3 >> 0] | 0)) i4 = 0; else if (!(HEAP8[i2 + 4 >> 0] | 0)) {
     i4 = _fourbyte_strstr(i5, i2) | 0;
     break;
    } else {
     i4 = _twoway_strstr(i5, i2) | 0;
     break;
    }
   }
  }
 } while (0);
 return i4 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i10 = i7 + 4 | 0;
 i11 = i7;
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i11 >> 2];
 i11 = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i9, i8, i4, i5, i6) | 0;
 STACKTOP = i7;
 return i11 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i10 = i7 + 4 | 0;
 i11 = i7;
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i11 >> 2];
 i11 = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i9, i8, i4, i5, i6) | 0;
 STACKTOP = i7;
 return i11 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i10 = i7 + 4 | 0;
 i11 = i7;
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i11 >> 2];
 i11 = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i9, i8, i4, i5, i6) | 0;
 STACKTOP = i7;
 return i11 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i10 = i7 + 4 | 0;
 i11 = i7;
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i11 >> 2];
 i11 = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i9, i8, i4, i5, i6) | 0;
 STACKTOP = i7;
 return i11 | 0;
}

function _make_rgb_colormap(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = 0;
 i3 = 0;
 while (1) {
  i4 = i2 * 51 | 0;
  i5 = 0;
  i6 = i3;
  while (1) {
   i7 = i5 * 51 | 0;
   i8 = i6 | 1;
   _png_create_colormap_entry(i1, i6, i4, i7, 0, 255, 1);
   _png_create_colormap_entry(i1, i8, i4, i7, 51, 255, 1);
   _png_create_colormap_entry(i1, i8 + 1 | 0, i4, i7, 102, 255, 1);
   _png_create_colormap_entry(i1, i8 + 2 | 0, i4, i7, 153, 255, 1);
   _png_create_colormap_entry(i1, i8 + 3 | 0, i4, i7, 204, 255, 1);
   _png_create_colormap_entry(i1, i8 + 4 | 0, i4, i7, 255, 255, 1);
   i5 = i5 + 1 | 0;
   if ((i5 | 0) == 6) break; else i6 = i6 + 6 | 0;
  }
  i2 = i2 + 1 | 0;
  if ((i2 | 0) == 6) break; else i3 = i3 + 36 | 0;
 }
 return 216;
}

function _png_image_begin_read_from_file(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 if (!i1) {
  i3 = 0;
  return i3 | 0;
 }
 if ((HEAP32[i1 + 4 >> 2] | 0) != 1) {
  i3 = _png_image_error(i1, 64955) | 0;
  return i3 | 0;
 }
 if (!i2) {
  i3 = _png_image_error(i1, 64906) | 0;
  return i3 | 0;
 }
 i4 = _fopen(i2, 64903) | 0;
 if (!i4) {
  i2 = ___errno_location() | 0;
  i3 = _png_image_error(i1, _strerror(HEAP32[i2 >> 2] | 0) | 0) | 0;
  return i3 | 0;
 }
 if (!(_png_image_read_init(i1) | 0)) {
  _fclose(i4) | 0;
  i3 = 0;
  return i3 | 0;
 } else {
  i2 = HEAP32[i1 >> 2] | 0;
  HEAP32[(HEAP32[i2 >> 2] | 0) + 188 >> 2] = i4;
  i4 = i2 + 20 | 0;
  HEAP8[i4 >> 0] = HEAP8[i4 >> 0] | 2;
  i3 = _png_safe_execute(i1, 69, i1) | 0;
  return i3 | 0;
 }
 return 0;
}

function __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i5;
 __ZNKSt3__28ios_base6getlocEv(i6, i2);
 i2 = __ZNKSt3__26locale9use_facetERNS0_2idE(i6, 5845220) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 48 >> 2] & 7](i2, 70463, 70489, i3) | 0;
 i3 = __ZNKSt3__26locale9use_facetERNS0_2idE(i6, 5845228) | 0;
 i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] & 127](i3) | 0;
 HEAP32[i4 >> 2] = i2;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2] & 63](i1, i3);
 __ZNSt3__26localeD2Ev(i6);
 STACKTOP = i5;
 return;
}

function __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i5;
 __ZNKSt3__28ios_base6getlocEv(i6, i2);
 i2 = __ZNKSt3__26locale9use_facetERNS0_2idE(i6, 5845188) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 32 >> 2] & 7](i2, 70463, 70489, i3) | 0;
 i3 = __ZNKSt3__26locale9use_facetERNS0_2idE(i6, 5845204) | 0;
 i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] & 127](i3) | 0;
 HEAP8[i4 >> 0] = i2;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2] & 63](i1, i3);
 __ZNSt3__26localeD2Ev(i6);
 STACKTOP = i5;
 return;
}

function __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i4 = 0;
 L1 : do switch ((HEAP32[i3 + 4 >> 2] & 176) << 24 >> 24) {
 case 16:
  {
   i5 = HEAP8[i1 >> 0] | 0;
   switch (i5 << 24 >> 24) {
   case 43:
   case 45:
    {
     i6 = i1 + 1 | 0;
     break L1;
     break;
    }
   default:
    {}
   }
   if ((i2 - i1 | 0) > 1 & i5 << 24 >> 24 == 48) {
    switch (HEAP8[i1 + 1 >> 0] | 0) {
    case 88:
    case 120:
     break;
    default:
     {
      i4 = 7;
      break L1;
     }
    }
    i6 = i1 + 2 | 0;
   } else i4 = 7;
   break;
  }
 case 32:
  {
   i6 = i2;
   break;
  }
 default:
  i4 = 7;
 } while (0);
 if ((i4 | 0) == 7) i6 = i1;
 return i6 | 0;
}

function _scalbn(d1, i2) {
 d1 = +d1;
 i2 = i2 | 0;
 var d3 = 0.0, i4 = 0, i5 = 0, d6 = 0.0, i7 = 0;
 if ((i2 | 0) > 1023) {
  d3 = d1 * 8988465674311579538646525.0e283;
  i4 = (i2 | 0) > 2046;
  i5 = i2 + -2046 | 0;
  d6 = i4 ? d3 * 8988465674311579538646525.0e283 : d3;
  i7 = i4 ? ((i5 | 0) < 1023 ? i5 : 1023) : i2 + -1023 | 0;
 } else if ((i2 | 0) < -1022) {
  d3 = d1 * 2.2250738585072014e-308;
  i5 = (i2 | 0) < -2044;
  i4 = i2 + 2044 | 0;
  d6 = i5 ? d3 * 2.2250738585072014e-308 : d3;
  i7 = i5 ? ((i4 | 0) > -1022 ? i4 : -1022) : i2 + 1022 | 0;
 } else {
  d6 = d1;
  i7 = i2;
 }
 i2 = _bitshift64Shl(i7 + 1023 | 0, 0, 52) | 0;
 i7 = tempRet0;
 HEAP32[tempDoublePtr >> 2] = i2;
 HEAP32[tempDoublePtr + 4 >> 2] = i7;
 return +(d6 * +HEAPF64[tempDoublePtr >> 3]);
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i1 + 4 | 0;
 i8 = i1;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
 i8 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i3, i7, i5, i6, 2) | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 if ((i8 + -1 | 0) >>> 0 < 12 & (i6 & 4 | 0) == 0) HEAP32[i2 >> 2] = i8; else HEAP32[i5 >> 2] = i6 | 4;
 STACKTOP = i1;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i1 + 4 | 0;
 i8 = i1;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
 i8 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i3, i7, i5, i6, 2) | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 if ((i8 + -1 | 0) >>> 0 < 12 & (i6 & 4 | 0) == 0) HEAP32[i2 >> 2] = i8; else HEAP32[i5 >> 2] = i6 | 4;
 STACKTOP = i1;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i1 + 4 | 0;
 i8 = i1;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
 i8 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i3, i7, i5, i6, 2) | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 if ((i8 + -1 | 0) >>> 0 < 31 & (i6 & 4 | 0) == 0) HEAP32[i2 >> 2] = i8; else HEAP32[i5 >> 2] = i6 | 4;
 STACKTOP = i1;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i1 + 4 | 0;
 i8 = i1;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
 i8 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i3, i7, i5, i6, 3) | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 if ((i8 | 0) < 366 & (i6 & 4 | 0) == 0) HEAP32[i2 >> 2] = i8; else HEAP32[i5 >> 2] = i6 | 4;
 STACKTOP = i1;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i1 + 4 | 0;
 i8 = i1;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
 i8 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i3, i7, i5, i6, 2) | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 if ((i8 + -1 | 0) >>> 0 < 31 & (i6 & 4 | 0) == 0) HEAP32[i2 >> 2] = i8; else HEAP32[i5 >> 2] = i6 | 4;
 STACKTOP = i1;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i1 + 4 | 0;
 i8 = i1;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
 i8 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i3, i7, i5, i6, 3) | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 if ((i8 | 0) < 366 & (i6 & 4 | 0) == 0) HEAP32[i2 >> 2] = i8; else HEAP32[i5 >> 2] = i6 | 4;
 STACKTOP = i1;
 return;
}

function _fclose(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 if ((HEAP32[i1 + 76 >> 2] | 0) > -1) i2 = ___lockfile(i1) | 0; else i2 = 0;
 ___unlist_locked_file(i1);
 i3 = (HEAP32[i1 >> 2] & 1 | 0) != 0;
 if (!i3) {
  i4 = ___ofl_lock() | 0;
  i5 = HEAP32[i1 + 52 >> 2] | 0;
  i6 = i1 + 56 | 0;
  if (i5 | 0) HEAP32[i5 + 56 >> 2] = HEAP32[i6 >> 2];
  i7 = HEAP32[i6 >> 2] | 0;
  if (i7 | 0) HEAP32[i7 + 52 >> 2] = i5;
  if ((HEAP32[i4 >> 2] | 0) == (i1 | 0)) HEAP32[i4 >> 2] = i7;
  ___ofl_unlock();
 }
 i7 = _fflush(i1) | 0;
 i4 = FUNCTION_TABLE_ii[HEAP32[i1 + 12 >> 2] & 127](i1) | 0 | i7;
 i7 = HEAP32[i1 + 92 >> 2] | 0;
 if (i7 | 0) _free(i7);
 if (i3) {
  if (i2 | 0) ___unlockfile(i1);
 } else _free(i1);
 return i4 | 0;
}

function _fourbyte_strstr(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = (HEAPU8[i2 + 1 >> 0] | 0) << 16 | (HEAPU8[i2 >> 0] | 0) << 24 | (HEAPU8[i2 + 2 >> 0] | 0) << 8 | (HEAPU8[i2 + 3 >> 0] | 0);
 i2 = i1 + 3 | 0;
 i4 = HEAP8[i2 >> 0] | 0;
 i5 = (HEAPU8[i1 + 1 >> 0] | 0) << 16 | (HEAPU8[i1 >> 0] | 0) << 24 | (HEAPU8[i1 + 2 >> 0] | 0) << 8 | i4 & 255;
 if (i4 << 24 >> 24 == 0 | (i5 | 0) == (i3 | 0)) {
  i6 = i4;
  i7 = i2;
 } else {
  i4 = i2;
  i2 = i5;
  while (1) {
   i5 = i4 + 1 | 0;
   i1 = HEAP8[i5 >> 0] | 0;
   i2 = i2 << 8 | i1 & 255;
   if (i1 << 24 >> 24 == 0 | (i2 | 0) == (i3 | 0)) {
    i6 = i1;
    i7 = i5;
    break;
   } else i4 = i5;
  }
 }
 return (i6 << 24 >> 24 ? i7 + -3 | 0 : 0) | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i1 + 4 | 0;
 i8 = i1;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
 i8 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i3, i7, i5, i6, 2) | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 if ((i8 | 0) < 13 & (i6 & 4 | 0) == 0) HEAP32[i2 >> 2] = i8 + -1; else HEAP32[i5 >> 2] = i6 | 4;
 STACKTOP = i1;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i1 + 4 | 0;
 i8 = i1;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
 i8 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i3, i7, i5, i6, 2) | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 if ((i8 | 0) < 13 & (i6 & 4 | 0) == 0) HEAP32[i2 >> 2] = i8 + -1; else HEAP32[i5 >> 2] = i6 | 4;
 STACKTOP = i1;
 return;
}

function __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKcj(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i6 = HEAP8[i1 + 11 >> 0] | 0;
 i7 = i6 << 24 >> 24 < 0;
 if (i7) i8 = HEAP32[i1 + 4 >> 2] | 0; else i8 = i6 & 255;
 if ((i5 | 0) == -1 | i8 >>> 0 < i2 >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv(i1);
 i6 = i8 - i2 | 0;
 i8 = i6 >>> 0 < i3 >>> 0 ? i6 : i3;
 if (i7) i9 = HEAP32[i1 >> 2] | 0; else i9 = i1;
 i1 = i8 >>> 0 > i5 >>> 0;
 i7 = __ZNSt3__211char_traitsIcE7compareEPKcS3_j(i9 + i2 | 0, i4, i1 ? i5 : i8) | 0;
 if (!i7) return (i8 >>> 0 < i5 >>> 0 ? -1 : i1 & 1) | 0; else return i7 | 0;
 return 0;
}

function __Z26ImGui_ImplGlfw_KeyCallbackP10GLFWwindowiiii(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0;
 i5 = 0;
 i3 = __ZN5ImGui5GetIOEv() | 0;
 switch (i4 | 0) {
 case 1:
  {
   i6 = 1;
   i5 = 3;
   break;
  }
 case 0:
  {
   i6 = 0;
   i5 = 3;
   break;
  }
 default:
  {}
 }
 if ((i5 | 0) == 3) HEAP8[i3 + 237 + i2 >> 0] = i6;
 HEAP8[i3 + 233 >> 0] = (HEAP8[i3 + 578 >> 0] | 0) == 0 ? HEAP8[i3 + 582 >> 0] | 0 : 1;
 HEAP8[i3 + 234 >> 0] = (HEAP8[i3 + 577 >> 0] | 0) == 0 ? HEAP8[i3 + 581 >> 0] | 0 : 1;
 HEAP8[i3 + 235 >> 0] = (HEAP8[i3 + 579 >> 0] | 0) == 0 ? HEAP8[i3 + 583 >> 0] | 0 : 1;
 HEAP8[i3 + 236 >> 0] = (HEAP8[i3 + 580 >> 0] | 0) == 0 ? HEAP8[i3 + 584 >> 0] | 0 : 1;
 return;
}

function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 if (!(HEAP32[i1 + 64 >> 2] | 0)) {
  i3 = -1;
  return i3 | 0;
 }
 i4 = i1 + 12 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 if ((HEAP32[i1 + 8 >> 2] | 0) >>> 0 >= i5 >>> 0) {
  i3 = -1;
  return i3 | 0;
 }
 if ((i2 | 0) == -1) {
  HEAP32[i4 >> 2] = i5 + -1;
  i3 = 0;
  return i3 | 0;
 }
 if (!(HEAP32[i1 + 88 >> 2] & 16)) {
  i1 = i2 & 255;
  i6 = i5 + -1 | 0;
  if ((HEAP8[i6 >> 0] | 0) == i1 << 24 >> 24) {
   i7 = i1;
   i8 = i6;
  } else {
   i3 = -1;
   return i3 | 0;
  }
 } else {
  i7 = i2 & 255;
  i8 = i5 + -1 | 0;
 }
 HEAP32[i4 >> 2] = i8;
 HEAP8[i8 >> 0] = i7;
 i3 = i2;
 return i3 | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i1 + 4 | 0;
 i8 = i1;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
 i8 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i3, i7, i5, i6, 1) | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 if ((i8 | 0) < 7 & (i6 & 4 | 0) == 0) HEAP32[i2 >> 2] = i8; else HEAP32[i5 >> 2] = i6 | 4;
 STACKTOP = i1;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i1 + 4 | 0;
 i8 = i1;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
 i8 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i3, i7, i5, i6, 2) | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 if ((i8 | 0) < 61 & (i6 & 4 | 0) == 0) HEAP32[i2 >> 2] = i8; else HEAP32[i5 >> 2] = i6 | 4;
 STACKTOP = i1;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i1 + 4 | 0;
 i8 = i1;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
 i8 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i3, i7, i5, i6, 2) | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 if ((i8 | 0) < 60 & (i6 & 4 | 0) == 0) HEAP32[i2 >> 2] = i8; else HEAP32[i5 >> 2] = i6 | 4;
 STACKTOP = i1;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i1 + 4 | 0;
 i8 = i1;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
 i8 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i3, i7, i5, i6, 1) | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 if ((i8 | 0) < 7 & (i6 & 4 | 0) == 0) HEAP32[i2 >> 2] = i8; else HEAP32[i5 >> 2] = i6 | 4;
 STACKTOP = i1;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i1 + 4 | 0;
 i8 = i1;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
 i8 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i3, i7, i5, i6, 2) | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 if ((i8 | 0) < 61 & (i6 & 4 | 0) == 0) HEAP32[i2 >> 2] = i8; else HEAP32[i5 >> 2] = i6 | 4;
 STACKTOP = i1;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i1 + 4 | 0;
 i8 = i1;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
 i8 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i3, i7, i5, i6, 2) | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 if ((i8 | 0) < 60 & (i6 & 4 | 0) == 0) HEAP32[i2 >> 2] = i8; else HEAP32[i5 >> 2] = i6 | 4;
 STACKTOP = i1;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i1 + 4 | 0;
 i8 = i1;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
 i8 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i3, i7, i5, i6, 2) | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 if ((i8 | 0) < 24 & (i6 & 4 | 0) == 0) HEAP32[i2 >> 2] = i8; else HEAP32[i5 >> 2] = i6 | 4;
 STACKTOP = i1;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i1 + 4 | 0;
 i8 = i1;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
 i8 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i3, i7, i5, i6, 2) | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 if ((i8 | 0) < 24 & (i6 & 4 | 0) == 0) HEAP32[i2 >> 2] = i8; else HEAP32[i5 >> 2] = i6 | 4;
 STACKTOP = i1;
 return;
}

function __ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7;
 HEAP8[i8 >> 0] = 37;
 i9 = i8 + 1 | 0;
 HEAP8[i9 >> 0] = i5;
 i10 = i8 + 2 | 0;
 HEAP8[i10 >> 0] = i6;
 HEAP8[i8 + 3 >> 0] = 0;
 if (i6 << 24 >> 24) {
  HEAP8[i9 >> 0] = i6;
  HEAP8[i10 >> 0] = i5;
 }
 i5 = __ZNSt3__212_GLOBAL__N_17countofIcEEjPKT_S4_(i2, HEAP32[i3 >> 2] | 0) | 0;
 i10 = i2 + (_strftime_l(i2 | 0, i5 | 0, i8 | 0, i4 | 0, HEAP32[i1 >> 2] | 0) | 0) | 0;
 HEAP32[i3 >> 2] = i10;
 STACKTOP = i7;
 return;
}

function _png_set_hIST(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 if ((i1 | 0) == 0 | (i2 | 0) == 0) return;
 i4 = i2 + 20 | 0;
 if (((HEAP16[i4 >> 1] | 0) + -1 & 65535) > 255) {
  _png_warning(i1, 62997);
  return;
 }
 _png_free_data(i1, i2, 8, 0);
 i5 = _png_malloc_warn(i1, 512) | 0;
 HEAP32[i2 + 204 >> 2] = i5;
 if (!i5) {
  _png_warning(i1, 63043);
  return;
 }
 i1 = i2 + 232 | 0;
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 8;
 i1 = HEAP16[i4 >> 1] | 0;
 if (i1 << 16 >> 16) {
  i4 = i1 & 65535;
  i1 = 0;
  do {
   HEAP16[i5 + (i1 << 1) >> 1] = HEAP16[i3 + (i1 << 1) >> 1] | 0;
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) < (i4 | 0));
 }
 i4 = i2 + 8 | 0;
 HEAP32[i4 >> 2] = HEAP32[i4 >> 2] | 64;
 return;
}

function __ZN19ImGuiWindowTempDataD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[i1 + 212 >> 2] | 0;
 if (i2 | 0) {
  HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
  __ZL11FreeWrapperPvS_(i2, 0);
 }
 i2 = HEAP32[i1 + 200 >> 2] | 0;
 if (i2 | 0) {
  HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
  __ZL11FreeWrapperPvS_(i2, 0);
 }
 i2 = HEAP32[i1 + 188 >> 2] | 0;
 if (i2 | 0) {
  HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
  __ZL11FreeWrapperPvS_(i2, 0);
 }
 i2 = HEAP32[i1 + 176 >> 2] | 0;
 if (i2 | 0) {
  HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
  __ZL11FreeWrapperPvS_(i2, 0);
 }
 i2 = HEAP32[i1 + 140 >> 2] | 0;
 if (!i2) return;
 HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
 __ZL11FreeWrapperPvS_(i2, 0);
 return;
}

function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = i1 + 4 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 i3 = i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0;
 if (HEAP32[i3 + 24 >> 2] | 0) if (!(HEAP32[i3 + 16 >> 2] | 0)) if (HEAP32[i3 + 4 >> 2] & 8192 | 0) if (!(__ZSt18uncaught_exceptionv() | 0)) {
  i3 = HEAP32[i2 >> 2] | 0;
  i1 = HEAP32[i3 + (HEAP32[(HEAP32[i3 >> 2] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
  if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 127](i1) | 0) == -1) {
   i1 = HEAP32[i2 >> 2] | 0;
   i2 = i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0;
   __ZNSt3__28ios_base5clearEj(i2, HEAP32[i2 + 16 >> 2] | 1);
  }
 }
 return;
}

function __ZL19AddWindowToDrawDataP8ImVectorIP10ImDrawListEP11ImGuiWindow(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 __ZL21AddDrawListToDrawDataP8ImVectorIP10ImDrawListES1_(i1, HEAP32[i2 + 632 >> 2] | 0);
 i3 = i2 + 328 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 if ((i4 | 0) <= 0) return;
 i5 = i2 + 336 | 0;
 i2 = 0;
 i6 = i4;
 while (1) {
  i4 = HEAP32[(HEAP32[i5 >> 2] | 0) + (i2 << 2) >> 2] | 0;
  if (!(HEAP8[i4 + 118 >> 0] | 0)) i7 = i6; else if (!(HEAP32[i4 + 164 >> 2] | 0)) {
   __ZL19AddWindowToDrawDataP8ImVectorIP10ImDrawListEP11ImGuiWindow(i1, i4);
   i7 = HEAP32[i3 >> 2] | 0;
  } else i7 = i6;
  i2 = i2 + 1 | 0;
  if ((i2 | 0) >= (i7 | 0)) break; else i6 = i7;
 }
 return;
}

function __ZNSt3__26vectorIiNS_9allocatorIiEEEC2ERKS3_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 HEAP32[i1 >> 2] = 0;
 i3 = i1 + 4 | 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 i4 = i2 + 4 | 0;
 i5 = (HEAP32[i4 >> 2] | 0) - (HEAP32[i2 >> 2] | 0) | 0;
 i6 = i5 >> 2;
 if (!i6) return;
 if (i6 >>> 0 > 1073741823) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv(i1);
 i7 = __Znwj(i5) | 0;
 HEAP32[i3 >> 2] = i7;
 HEAP32[i1 >> 2] = i7;
 HEAP32[i1 + 8 >> 2] = i7 + (i6 << 2);
 i6 = HEAP32[i2 >> 2] | 0;
 i2 = (HEAP32[i4 >> 2] | 0) - i6 | 0;
 if ((i2 | 0) <= 0) return;
 _memcpy(i7 | 0, i6 | 0, i2 | 0) | 0;
 HEAP32[i3 >> 2] = i7 + (i2 >>> 2 << 2);
 return;
}

function _strtox_78(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, d8 = 0.0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 i5 = i4;
 i6 = i5;
 i7 = i6 + 124 | 0;
 do {
  HEAP32[i6 >> 2] = 0;
  i6 = i6 + 4 | 0;
 } while ((i6 | 0) < (i7 | 0));
 i6 = i5 + 4 | 0;
 HEAP32[i6 >> 2] = i1;
 i7 = i5 + 8 | 0;
 HEAP32[i7 >> 2] = -1;
 HEAP32[i5 + 44 >> 2] = i1;
 HEAP32[i5 + 76 >> 2] = -1;
 ___shlim(i5, 0);
 d8 = +___floatscan(i5, i3, 1);
 i3 = (HEAP32[i6 >> 2] | 0) - (HEAP32[i7 >> 2] | 0) + (HEAP32[i5 + 108 >> 2] | 0) | 0;
 if (i2 | 0) HEAP32[i2 >> 2] = i3 | 0 ? i1 + i3 | 0 : i1;
 STACKTOP = i4;
 return +d8;
}

function ___fflush_unlocked(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = 0;
 i3 = i1 + 20 | 0;
 i4 = i1 + 28 | 0;
 if ((HEAP32[i3 >> 2] | 0) >>> 0 > (HEAP32[i4 >> 2] | 0) >>> 0) {
  FUNCTION_TABLE_iiii[HEAP32[i1 + 36 >> 2] & 31](i1, 0, 0) | 0;
  if (!(HEAP32[i3 >> 2] | 0)) i5 = -1; else i2 = 3;
 } else i2 = 3;
 if ((i2 | 0) == 3) {
  i2 = i1 + 4 | 0;
  i6 = HEAP32[i2 >> 2] | 0;
  i7 = i1 + 8 | 0;
  i8 = HEAP32[i7 >> 2] | 0;
  if (i6 >>> 0 < i8 >>> 0) FUNCTION_TABLE_iiii[HEAP32[i1 + 40 >> 2] & 31](i1, i6 - i8 | 0, 1) | 0;
  HEAP32[i1 + 16 >> 2] = 0;
  HEAP32[i4 >> 2] = 0;
  HEAP32[i3 >> 2] = 0;
  HEAP32[i7 >> 2] = 0;
  HEAP32[i2 >> 2] = 0;
  i5 = 0;
 }
 return i5 | 0;
}

function __ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev(i1);
 HEAP32[i1 >> 2] = 18036;
 HEAP32[i1 + 32 >> 2] = i2;
 __ZNSt3__26localeC2ERKS0_(i5, i1 + 4 | 0);
 i2 = __ZNKSt3__26locale9use_facetERNS0_2idE(i5, 5846988) | 0;
 __ZNSt3__26localeD2Ev(i5);
 HEAP32[i1 + 36 >> 2] = i2;
 HEAP32[i1 + 40 >> 2] = i3;
 i3 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 28 >> 2] & 127](i2) | 0) & 1;
 HEAP8[i1 + 44 >> 0] = i3;
 STACKTOP = i4;
 return;
}

function __ZNSt3__211__stdoutbufIwE6xsputnEPKwi(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 L1 : do if (!(HEAP8[i1 + 44 >> 0] | 0)) {
  i4 = 0;
  i5 = i2;
  while (1) {
   if ((i4 | 0) >= (i3 | 0)) {
    i6 = i4;
    break L1;
   }
   i7 = HEAP32[(HEAP32[i1 >> 2] | 0) + 52 >> 2] | 0;
   i8 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i5 >> 2] | 0) | 0;
   i9 = FUNCTION_TABLE_iii[i7 & 31](i1, i8) | 0;
   if ((i9 | 0) == (__ZNSt3__211char_traitsIwE3eofEv() | 0)) {
    i6 = i4;
    break L1;
   }
   i4 = i4 + 1 | 0;
   i5 = i5 + 4 | 0;
  }
 } else i6 = _fwrite(i2, 4, i3, HEAP32[i1 + 32 >> 2] | 0) | 0; while (0);
 return i6 | 0;
}

function __ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev(i1);
 HEAP32[i1 >> 2] = 18100;
 HEAP32[i1 + 32 >> 2] = i2;
 __ZNSt3__26localeC2ERKS0_(i5, i1 + 4 | 0);
 i2 = __ZNKSt3__26locale9use_facetERNS0_2idE(i5, 5846980) | 0;
 __ZNSt3__26localeD2Ev(i5);
 HEAP32[i1 + 36 >> 2] = i2;
 HEAP32[i1 + 40 >> 2] = i3;
 i3 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 28 >> 2] & 127](i2) | 0) & 1;
 HEAP8[i1 + 44 >> 0] = i3;
 STACKTOP = i4;
 return;
}

function _threebyte_strstr(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = (HEAPU8[i2 + 1 >> 0] | 0) << 16 | (HEAPU8[i2 >> 0] | 0) << 24 | (HEAPU8[i2 + 2 >> 0] | 0) << 8;
 i2 = i1 + 2 | 0;
 i4 = HEAP8[i2 >> 0] | 0;
 i5 = (HEAPU8[i1 + 1 >> 0] | 0) << 16 | (HEAPU8[i1 >> 0] | 0) << 24 | (i4 & 255) << 8;
 if ((i5 | 0) == (i3 | 0) | i4 << 24 >> 24 == 0) {
  i6 = i2;
  i7 = i4;
 } else {
  i4 = i2;
  i2 = i5;
  while (1) {
   i5 = i4 + 1 | 0;
   i1 = HEAP8[i5 >> 0] | 0;
   i2 = (i2 | i1 & 255) << 8;
   if ((i2 | 0) == (i3 | 0) | i1 << 24 >> 24 == 0) {
    i6 = i5;
    i7 = i1;
    break;
   } else i4 = i5;
  }
 }
 return (i7 << 24 >> 24 ? i6 + -2 | 0 : 0) | 0;
}

function __ZNSt3__211__stdoutbufIcE6xsputnEPKci(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 L1 : do if (!(HEAP8[i1 + 44 >> 0] | 0)) {
  i4 = 0;
  i5 = i2;
  while (1) {
   if ((i4 | 0) >= (i3 | 0)) {
    i6 = i4;
    break L1;
   }
   i7 = HEAP32[(HEAP32[i1 >> 2] | 0) + 52 >> 2] | 0;
   i8 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i5 >> 0] | 0) | 0;
   i9 = FUNCTION_TABLE_iii[i7 & 31](i1, i8) | 0;
   if ((i9 | 0) == (__ZNSt3__211char_traitsIcE3eofEv() | 0)) {
    i6 = i4;
    break L1;
   }
   i4 = i4 + 1 | 0;
   i5 = i5 + 1 | 0;
  }
 } else i6 = _fwrite(i2, 1, i3, HEAP32[i1 + 32 >> 2] | 0) | 0; while (0);
 return i6 | 0;
}

function __ZNKSt3__27codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i6 = i4;
 i7 = i1 + 8 | 0;
 i1 = 0;
 i8 = 0;
 i9 = i3;
 L1 : while (1) {
  if ((i9 | 0) == (i4 | 0) | i1 >>> 0 >= i5 >>> 0) break;
  i3 = ___uselocale(HEAP32[i7 >> 2] | 0) | 0;
  i10 = _mbrlen(i9, i6 - i9 | 0, i2) | 0;
  if (i3 | 0) ___uselocale(i3) | 0;
  switch (i10 | 0) {
  case -2:
  case -1:
   {
    break L1;
    break;
   }
  case 0:
   {
    i11 = 1;
    break;
   }
  default:
   i11 = i10;
  }
  i1 = i1 + 1 | 0;
  i8 = i11 + i8 | 0;
  i9 = i9 + i11 | 0;
 }
 return i8 | 0;
}

function ___strerror_l(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = 0;
 i4 = 0;
 while (1) {
  if ((HEAPU8[67543 + i4 >> 0] | 0) == (i1 | 0)) {
   i3 = 2;
   break;
  }
  i5 = i4 + 1 | 0;
  if ((i5 | 0) == 87) {
   i6 = 67631;
   i7 = 87;
   i3 = 5;
   break;
  } else i4 = i5;
 }
 if ((i3 | 0) == 2) if (!i4) i8 = 67631; else {
  i6 = 67631;
  i7 = i4;
  i3 = 5;
 }
 if ((i3 | 0) == 5) while (1) {
  i3 = 0;
  i4 = i6;
  do {
   i1 = i4;
   i4 = i4 + 1 | 0;
  } while ((HEAP8[i1 >> 0] | 0) != 0);
  i7 = i7 + -1 | 0;
  if (!i7) {
   i8 = i4;
   break;
  } else {
   i6 = i4;
   i3 = 5;
  }
 }
 return ___lctrans(i8, HEAP32[i2 + 20 >> 2] | 0) | 0;
}

function __ZN15CityMapRenderer13generateQueueEi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 switch (i2 | 0) {
 case 0:
  {
   __ZN15CityMapRenderer14generateQueue0Ev(i1);
   return;
  }
 case 1:
  {
   __ZN15CityMapRenderer14generateQueue1Ev(i1);
   return;
  }
 case 2:
  {
   __ZN15CityMapRenderer22generateQueue_overlay1Ev(i1);
   return;
  }
 case 3:
  {
   __ZN15CityMapRenderer22generateQueue_overlay2Ev(i1);
   return;
  }
 case 4:
  {
   __ZN15CityMapRenderer22generateQueue_overlay3Ev(i1);
   return;
  }
 case 5:
  {
   __ZN15CityMapRenderer22generateQueue_overlay4Ev(i1);
   return;
  }
 case 6:
  {
   __ZN15CityMapRenderer22generateQueue_overlay5Ev(i1);
   return;
  }
 default:
  return;
 }
}

function __ZNSt3__26locale2id5__getEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i3 = i2 + 32 | 0;
 i4 = i2 + 24 | 0;
 i5 = i2;
 i6 = i2 + 16 | 0;
 HEAP32[i6 >> 2] = 128;
 HEAP32[i6 + 4 >> 2] = 0;
 HEAP32[i3 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 __ZNSt3__212_GLOBAL__N_111__fake_bindC2EMNS_6locale2idEFvvEPS3_(i5, i3, i1);
 if ((HEAP32[i1 >> 2] | 0) != -1) {
  HEAP32[i3 >> 2] = i5;
  HEAP32[i4 >> 2] = i3;
  __ZNSt3__211__call_onceERVmPvPFvS2_E(i1, i4, 129);
 }
 STACKTOP = i2;
 return (HEAP32[i1 + 4 >> 2] | 0) + -1 | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i1 + 4 | 0;
 i8 = i1;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
 i8 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i3, i7, i5, i6, 4) | 0;
 if (!(HEAP32[i5 >> 2] & 4)) HEAP32[i2 >> 2] = i8 + -1900;
 STACKTOP = i1;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i1 + 4 | 0;
 i8 = i1;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
 i8 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i3, i7, i5, i6, 4) | 0;
 if (!(HEAP32[i5 >> 2] & 4)) HEAP32[i2 >> 2] = i8 + -1900;
 STACKTOP = i1;
 return;
}

function __ZNSt3__210__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev(i1);
 HEAP32[i1 >> 2] = 18164;
 HEAP32[i1 + 32 >> 2] = i2;
 HEAP32[i1 + 40 >> 2] = i3;
 i3 = __ZNSt3__211char_traitsIwE3eofEv() | 0;
 HEAP32[i1 + 48 >> 2] = i3;
 HEAP8[i1 + 52 >> 0] = 0;
 i3 = HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] | 0;
 __ZNSt3__26localeC2ERKS0_(i5, i1 + 4 | 0);
 FUNCTION_TABLE_vii[i3 & 63](i1, i5);
 __ZNSt3__26localeD2Ev(i5);
 STACKTOP = i4;
 return;
}

function __ZNSt3__210__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev(i1);
 HEAP32[i1 >> 2] = 18228;
 HEAP32[i1 + 32 >> 2] = i2;
 HEAP32[i1 + 40 >> 2] = i3;
 i3 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
 HEAP32[i1 + 48 >> 2] = i3;
 HEAP8[i1 + 52 >> 0] = 0;
 i3 = HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] | 0;
 __ZNSt3__26localeC2ERKS0_(i5, i1 + 4 | 0);
 FUNCTION_TABLE_vii[i3 & 63](i1, i5);
 __ZNSt3__26localeD2Ev(i5);
 STACKTOP = i4;
 return;
}

function __ZN5ImGui11SetTooltipVEPKcPi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 __ZN5ImGui14BeginTooltipExEib(0, 1);
 i3 = HEAP32[1460598] | 0;
 i4 = HEAP32[i3 + 6392 >> 2] | 0;
 HEAP8[i4 + 120 >> 0] = 1;
 if (!(HEAP8[i4 + 123 >> 0] | 0)) {
  i5 = i3 + 11620 | 0;
  i6 = _vsnprintf(i5, 3073, i1, i2) | 0;
  i2 = ((i6 | 0) != -1 & (i6 | 0) < 3073 ? i6 : 3072) + (i3 + 11620) | 0;
  HEAP8[i2 >> 0] = 0;
  __ZN5ImGui15TextUnformattedEPKcS1_(i5, i2);
  i7 = HEAP32[(HEAP32[1460598] | 0) + 6392 >> 2] | 0;
 } else i7 = i4;
 if (!(HEAP32[i7 + 8 >> 2] & 33554432)) ___assert_fail(37574, 31803, 5119, 37631); else {
  __ZN5ImGui3EndEv();
  return;
 }
}

function _strtox(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 i7 = i6;
 HEAP32[i7 >> 2] = 0;
 i8 = i7 + 4 | 0;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i7 + 44 >> 2] = i1;
 i9 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = (i1 | 0) < 0 ? -1 : i1 + 2147483647 | 0;
 HEAP32[i7 + 76 >> 2] = -1;
 ___shlim(i7, 0);
 i10 = ___intscan(i7, i3, 1, i4, i5) | 0;
 if (i2 | 0) HEAP32[i2 >> 2] = i1 + ((HEAP32[i8 >> 2] | 0) + (HEAP32[i7 + 108 >> 2] | 0) - (HEAP32[i9 >> 2] | 0));
 STACKTOP = i6;
 return i10 | 0;
}

function __ZNSt3__214__num_put_base12__format_intEPcPKcbj(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 if (!(i4 & 2048)) i5 = i1; else {
  HEAP8[i1 >> 0] = 43;
  i5 = i1 + 1 | 0;
 }
 if (!(i4 & 512)) {
  i6 = i2;
  i7 = i5;
 } else {
  HEAP8[i5 >> 0] = 35;
  i6 = i2;
  i7 = i5 + 1 | 0;
 }
 while (1) {
  i5 = HEAP8[i6 >> 0] | 0;
  if (!(i5 << 24 >> 24)) break;
  HEAP8[i7 >> 0] = i5;
  i6 = i6 + 1 | 0;
  i7 = i7 + 1 | 0;
 }
 switch (i4 & 74) {
 case 64:
  {
   i8 = 111;
   break;
  }
 case 8:
  {
   i8 = i4 & 16384 | 0 ? 88 : 120;
   break;
  }
 default:
  i8 = i3 ? 100 : 117;
 }
 HEAP8[i7 >> 0] = i8;
 return;
}

function _png_colorspace_sync(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 if (!i2) return;
 i3 = i2 + 40 | 0;
 i4 = i1 + 824 | 0;
 i5 = i3 + 76 | 0;
 do {
  HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
  i3 = i3 + 4 | 0;
  i4 = i4 + 4 | 0;
 } while ((i3 | 0) < (i5 | 0));
 i4 = HEAP16[i2 + 114 >> 1] | 0;
 i3 = i4 & 65535;
 if (!(i3 & 32768)) {
  i5 = i2 + 8 | 0;
  i6 = HEAP32[i5 >> 2] | 0;
  i7 = i3 & 128 | 0 ? i6 | 2048 : i6 & -2049;
  i6 = i4 & 2 ? i7 | 4 : i7 & -5;
  HEAP32[i5 >> 2] = i4 & 1 ? i6 | 1 : i6 & -2;
  return;
 } else {
  i6 = i2 + 8 | 0;
  HEAP32[i6 >> 2] = HEAP32[i6 >> 2] & -6150;
  _png_free_data(i1, i2, 16, -1);
  return;
 }
}

function _png_safecat(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 if (!((i1 | 0) != 0 & i3 >>> 0 < i2 >>> 0)) {
  i5 = i3;
  return i5 | 0;
 }
 if (!i4) i6 = i3; else {
  i7 = HEAP8[i4 >> 0] | 0;
  i8 = i2 + -1 | 0;
  if (i8 >>> 0 > i3 >>> 0 & i7 << 24 >> 24 != 0) {
   i2 = i3;
   i9 = i4;
   i4 = i7;
   while (1) {
    i9 = i9 + 1 | 0;
    i7 = i2 + 1 | 0;
    HEAP8[i1 + i2 >> 0] = i4;
    i4 = HEAP8[i9 >> 0] | 0;
    if (!(i7 >>> 0 < i8 >>> 0 & i4 << 24 >> 24 != 0)) {
     i6 = i7;
     break;
    } else i2 = i7;
   }
  } else i6 = i3;
 }
 HEAP8[i1 + i6 >> 0] = 0;
 i5 = i6;
 return i5 | 0;
}

function __ZN6ImFontC2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = i1 + 8 | 0;
 i3 = i1 + 12 | 0;
 i4 = i1 + 4 | 0;
 i5 = i2 + 8 | 0;
 i6 = i5 + 36 | 0;
 do {
  HEAP32[i5 >> 2] = 0;
  i5 = i5 + 4 | 0;
 } while ((i5 | 0) < (i6 | 0));
 HEAPF32[i4 >> 2] = Math_fround(1.0);
 HEAP16[i1 + 60 >> 1] = 63;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i3 >> 2] = 0;
 HEAPF32[i1 >> 2] = Math_fround(0.0);
 HEAP32[i1 + 52 >> 2] = 0;
 HEAPF32[i1 + 56 >> 2] = Math_fround(0.0);
 i3 = i1 + 80 | 0;
 i5 = i1 + 62 | 0;
 i6 = i5 + 18 | 0;
 do {
  HEAP16[i5 >> 1] = 0;
  i5 = i5 + 2 | 0;
 } while ((i5 | 0) < (i6 | 0));
 HEAP8[i3 >> 0] = 1;
 HEAP32[i1 + 84 >> 2] = 0;
 return;
}

function __ZN20ImDrawListSharedDataC2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, f3 = f0, f4 = f0, f5 = f0, i6 = 0;
 _memset(i1 | 0, 0, 132) | 0;
 HEAPF32[i1 + 20 >> 2] = Math_fround(-8192.0);
 HEAPF32[i1 + 24 >> 2] = Math_fround(-8192.0);
 HEAPF32[i1 + 28 >> 2] = Math_fround(8192.0);
 HEAPF32[i1 + 32 >> 2] = Math_fround(8192.0);
 i2 = 0;
 do {
  f3 = Math_fround(Math_fround(Math_fround(Math_fround(i2 | 0) * Math_fround(2.0)) * Math_fround(3.14159274)) / Math_fround(12.0));
  f4 = Math_fround(_cosf(f3));
  f5 = Math_fround(_sinf(f3));
  i6 = i1 + 36 + (i2 << 3) | 0;
  HEAPF32[i6 >> 2] = f4;
  HEAPF32[i6 + 4 >> 2] = f5;
  i2 = i2 + 1 | 0;
 } while ((i2 | 0) != 12);
 return;
}

function __Z12buildProgramjjPKcS0_(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i5;
 i7 = _glCreateProgram() | 0;
 _glAttachShader(i7 | 0, i1 | 0);
 _glAttachShader(i7 | 0, i2 | 0);
 _glBindAttribLocation(i7 | 0, 0, i3 | 0);
 if (i4 | 0) _glBindAttribLocation(i7 | 0, 1, i4 | 0);
 _glLinkProgram(i7 | 0);
 _glGetProgramiv(i7 | 0, 35714, i6 | 0);
 if (HEAP32[i6 >> 2] | 0) {
  i8 = i7;
  STACKTOP = i5;
  return i8 | 0;
 }
 _glDeleteProgram(i7 | 0);
 i8 = 0;
 STACKTOP = i5;
 return i8 | 0;
}

function __ZN8LineTool7getLineERiS0_S0_S0_(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 do if (!(HEAP8[i1 + 12 >> 0] | 0)) if (!(HEAP8[i1 >> 0] | 0)) {
  i6 = 0;
  return i6 | 0;
 } else {
  i7 = i1 + 4 | 0;
  HEAP32[i2 >> 2] = HEAP32[i7 >> 2];
  i8 = i1 + 8 | 0;
  HEAP32[i3 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i4 >> 2] = HEAP32[i7 >> 2];
  i9 = i8;
  break;
 } else {
  HEAP32[i2 >> 2] = HEAP32[i1 + 4 >> 2];
  HEAP32[i3 >> 2] = HEAP32[i1 + 8 >> 2];
  HEAP32[i4 >> 2] = HEAP32[i1 + 16 >> 2];
  i9 = i1 + 20 | 0;
 } while (0);
 HEAP32[i5 >> 2] = HEAP32[i9 >> 2];
 i6 = 1;
 return i6 | 0;
}

function __ZN7Texture7loadPngEPKc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 i4 = i3;
 __ZN9PngLoaderC2Ev(i4);
 __ZN9PngLoader4loadEPKc(i4, i2) | 0;
 _glActiveTexture(33985);
 _glGenTextures(1, i1 | 0);
 _glBindTexture(3553, HEAP32[i1 >> 2] | 0);
 _glTexImage2D(3553, 0, 6408, HEAP32[i4 + 8 >> 2] | 0, HEAP32[i4 + 12 >> 2] | 0, 0, 6408, 5121, HEAP32[i4 + 96 >> 2] | 0);
 _glTexParameteri(3553, 10240, 9728);
 _glTexParameteri(3553, 10241, 9728);
 _glGenerateMipmap(3553);
 _glBindTexture(3553, HEAP32[i1 >> 2] | 0);
 STACKTOP = i3;
 return;
}

function __ZN13WindowManager4initEPKc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 if (!(_glfwInit() | 0)) {
  _fwrite(31696, 26, 1, HEAP32[3385] | 0) | 0;
  i3 = 1;
  return i3 | 0;
 }
 _glfwWindowHint(139272, 204801);
 i4 = _glfwCreateWindow(HEAP32[i1 + 4 >> 2] | 0, HEAP32[i1 + 8 >> 2] | 0, i2 | 0, 0, 0) | 0;
 HEAP32[i1 >> 2] = i4;
 if (!i4) {
  _fwrite(31723, 28, 1, HEAP32[3385] | 0) | 0;
  _glfwTerminate();
  i3 = -1;
  return i3 | 0;
 } else {
  _glfwMakeContextCurrent(i4 | 0);
  _glfwSetWindowSizeCallback(HEAP32[i1 >> 2] | 0, 1) | 0;
  _glfwSetFramebufferSizeCallback(HEAP32[i1 >> 2] | 0, 1) | 0;
  i3 = 0;
  return i3 | 0;
 }
 return 0;
}

function _getc(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = 0;
 if ((HEAP32[i1 + 76 >> 2] | 0) < 0) i2 = 3; else if (!(___lockfile(i1) | 0)) i2 = 3; else {
  i3 = i1 + 4 | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  if (i4 >>> 0 < (HEAP32[i1 + 8 >> 2] | 0) >>> 0) {
   HEAP32[i3 >> 2] = i4 + 1;
   i5 = HEAPU8[i4 >> 0] | 0;
  } else i5 = ___uflow(i1) | 0;
  i6 = i5;
 }
 do if ((i2 | 0) == 3) {
  i5 = i1 + 4 | 0;
  i4 = HEAP32[i5 >> 2] | 0;
  if (i4 >>> 0 < (HEAP32[i1 + 8 >> 2] | 0) >>> 0) {
   HEAP32[i5 >> 2] = i4 + 1;
   i6 = HEAPU8[i4 >> 0] | 0;
   break;
  } else {
   i6 = ___uflow(i1) | 0;
   break;
  }
 } while (0);
 return i6 | 0;
}

function __ZN9MenuBuild4drawERNSt3__26vectorINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS5_IS7_EEEE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (HEAP32[i1 + 44 >> 2] | 0) {
  __ZN9MenuBuild9drawIntroERNSt3__26vectorINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS5_IS7_EEEE(i1, i2);
  return;
 }
 if (HEAP8[i1 + 17 >> 0] | 0) {
  __ZN9MenuBuild12drawMenuLoadERNSt3__26vectorINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS5_IS7_EEEE(i1, i2);
  return;
 }
 __ZN9MenuBuild9drawBuildEv(i1);
 __ZN9MenuBuild10drawHeaderEv(i1);
 if (!(HEAP32[i1 + 4 >> 2] | 0)) return;
 __ZN9MenuBuild11drawMessageEv(i1);
 return;
}

function __ZN7CityMap4diceEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 if (!(HEAP8[73392] | 0)) if (___cxa_guard_acquire(73392) | 0) HEAP32[1461779] = 1;
 if (!(HEAP8[73400] | 0)) if (___cxa_guard_acquire(73400) | 0) {
  HEAP32[18352] = 1;
  HEAP32[18353] = 1e3;
 }
 if (!(HEAP8[73416] | 0)) if (___cxa_guard_acquire(73416) | 0) {
  i1 = 73408;
  i2 = HEAP32[i1 + 4 >> 2] | 0;
  i3 = 73424;
  HEAP32[i3 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i3 + 4 >> 2] = i2;
  HEAP32[18358] = HEAP32[1461779];
 }
 return __ZNSt3__224uniform_int_distributionIiEclINS_26linear_congruential_engineIjLj48271ELj0ELj2147483647EEEEEiRT_RKNS1_10param_typeE(73424, 73432, 73424) | 0;
}

function _inflateEnd(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 if (!i1) {
  i2 = -2;
  return i2 | 0;
 }
 i3 = i1 + 28 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 if (!i4) {
  i2 = -2;
  return i2 | 0;
 }
 i5 = i1 + 36 | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 if (!i6) {
  i2 = -2;
  return i2 | 0;
 }
 i7 = HEAP32[i4 + 52 >> 2] | 0;
 i8 = i1 + 40 | 0;
 if (!i7) {
  i9 = i6;
  i10 = i4;
 } else {
  FUNCTION_TABLE_vii[i6 & 63](HEAP32[i8 >> 2] | 0, i7);
  i9 = HEAP32[i5 >> 2] | 0;
  i10 = HEAP32[i3 >> 2] | 0;
 }
 FUNCTION_TABLE_vii[i9 & 63](HEAP32[i8 >> 2] | 0, i10);
 HEAP32[i3 >> 2] = 0;
 i2 = 0;
 return i2 | 0;
}

function __ZNKSt3__27codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0, i10 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = i2 + 4 | 0;
 i9 = i2;
 HEAP32[i1 >> 2] = i3;
 HEAP32[i9 >> 2] = i6;
 i10 = __ZNSt3__2L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE(i3, i4, i1, i6, i7, i9, 1114111, 0) | 0;
 HEAP32[i5 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 STACKTOP = i2;
 return i10 | 0;
}

function _realloc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 if (!i1) {
  i3 = _malloc(i2) | 0;
  return i3 | 0;
 }
 if (i2 >>> 0 > 4294967231) {
  i4 = ___errno_location() | 0;
  HEAP32[i4 >> 2] = 12;
  i3 = 0;
  return i3 | 0;
 }
 i4 = _try_realloc_chunk(i1 + -8 | 0, i2 >>> 0 < 11 ? 16 : i2 + 11 & -8) | 0;
 if (i4 | 0) {
  i3 = i4 + 8 | 0;
  return i3 | 0;
 }
 i4 = _malloc(i2) | 0;
 if (!i4) {
  i3 = 0;
  return i3 | 0;
 }
 i5 = HEAP32[i1 + -4 >> 2] | 0;
 i6 = (i5 & -8) - ((i5 & 3 | 0) == 0 ? 8 : 4) | 0;
 _memcpy(i4 | 0, i1 | 0, (i6 >>> 0 < i2 >>> 0 ? i6 : i2) | 0) | 0;
 _free(i1);
 i3 = i4;
 return i3 | 0;
}

function __ZNKSt3__27codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0, i10 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = i2 + 4 | 0;
 i9 = i2;
 HEAP32[i1 >> 2] = i3;
 HEAP32[i9 >> 2] = i6;
 i10 = __ZNSt3__2L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE(i3, i4, i1, i6, i7, i9, 1114111, 0) | 0;
 HEAP32[i5 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 STACKTOP = i2;
 return i10 | 0;
}

function __ZNKSt3__27codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0, i10 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = i2 + 4 | 0;
 i9 = i2;
 HEAP32[i1 >> 2] = i3;
 HEAP32[i9 >> 2] = i6;
 i10 = __ZNSt3__2L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE(i3, i4, i1, i6, i7, i9, 1114111, 0) | 0;
 HEAP32[i5 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 STACKTOP = i2;
 return i10 | 0;
}

function __ZN5ImGui9InputTextEPKcPcjiPFiP25ImGuiTextEditCallbackDataEPv(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7;
 if (!(i4 & 1048576)) {
  HEAPF32[i8 >> 2] = Math_fround(0.0);
  HEAPF32[i8 + 4 >> 2] = Math_fround(0.0);
  i9 = __ZN5ImGui11InputTextExEPKcPciRK6ImVec2iPFiP25ImGuiTextEditCallbackDataEPv(i1, i2, i3, i8, i4, i5, i6) | 0;
  STACKTOP = i7;
  return i9 | 0;
 } else ___assert_fail(34361, 31803, 11036, 34402);
 return 0;
}

function __ZNKSt3__27codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0, i10 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = i2 + 4 | 0;
 i9 = i2;
 HEAP32[i1 >> 2] = i3;
 HEAP32[i9 >> 2] = i6;
 i10 = __ZNSt3__2L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE(i3, i4, i1, i6, i7, i9, 1114111, 0) | 0;
 HEAP32[i5 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 STACKTOP = i2;
 return i10 | 0;
}

function __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = i1 + 44 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 i4 = HEAP32[i1 + 24 >> 2] | 0;
 if (i3 >>> 0 < i4 >>> 0) {
  HEAP32[i2 >> 2] = i4;
  i5 = i4;
 } else i5 = i3;
 if (!(HEAP32[i1 + 48 >> 2] & 8)) {
  i6 = -1;
  return i6 | 0;
 }
 i3 = i1 + 16 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 if (i4 >>> 0 < i5 >>> 0) {
  HEAP32[i3 >> 2] = i5;
  i7 = i5;
 } else i7 = i4;
 i4 = HEAP32[i1 + 12 >> 2] | 0;
 if (i4 >>> 0 >= i7 >>> 0) {
  i6 = -1;
  return i6 | 0;
 }
 i6 = HEAPU8[i4 >> 0] | 0;
 return i6 | 0;
}

function __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 __ZNSt3__214__shared_count12__add_sharedEv(i2);
 i4 = i1 + 8 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 if ((HEAP32[i1 + 12 >> 2] | 0) - i5 >> 2 >>> 0 > i3 >>> 0) {
  i6 = i4;
  i7 = i5;
 } else {
  __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj(i4, i3 + 1 | 0);
  i6 = i4;
  i7 = HEAP32[i4 >> 2] | 0;
 }
 i4 = HEAP32[i7 + (i3 << 2) >> 2] | 0;
 if (i4 | 0) __ZNSt3__214__shared_count16__release_sharedEv(i4) | 0;
 HEAP32[(HEAP32[i6 >> 2] | 0) + (i3 << 2) >> 2] = i2;
 return;
}

function ___toread(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = i1 + 74 | 0;
 i3 = HEAP8[i2 >> 0] | 0;
 HEAP8[i2 >> 0] = i3 + 255 | i3;
 i3 = i1 + 20 | 0;
 i2 = i1 + 28 | 0;
 if ((HEAP32[i3 >> 2] | 0) >>> 0 > (HEAP32[i2 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[i1 + 36 >> 2] & 31](i1, 0, 0) | 0;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i3 >> 2] = 0;
 i3 = HEAP32[i1 >> 2] | 0;
 if (!(i3 & 4)) {
  i2 = (HEAP32[i1 + 44 >> 2] | 0) + (HEAP32[i1 + 48 >> 2] | 0) | 0;
  HEAP32[i1 + 8 >> 2] = i2;
  HEAP32[i1 + 4 >> 2] = i2;
  i4 = i3 << 27 >> 31;
 } else {
  HEAP32[i1 >> 2] = i3 | 32;
  i4 = -1;
 }
 return i4 | 0;
}

function __ZN15ImGuiTextBufferC2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = i1 + 4 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i1 >> 2] = 0;
 i3 = i1 + 8 | 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
 i4 = __ZL13MallocWrapperjPv(8, 0) | 0;
 i5 = HEAP32[i3 >> 2] | 0;
 if (i5 | 0) {
  _memcpy(i4 | 0, i5 | 0, HEAP32[i1 >> 2] | 0) | 0;
  i5 = HEAP32[i3 >> 2] | 0;
  if (i5 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
  __ZL11FreeWrapperPvS_(i5, 0);
 }
 HEAP32[i3 >> 2] = i4;
 HEAP32[i2 >> 2] = 8;
 HEAP8[i4 + (HEAP32[i1 >> 2] | 0) >> 0] = 0;
 HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 return;
}

function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = i1 + 4 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 i5 = HEAP32[i1 >> 2] | 0;
 i6 = i4 - i5 >> 2;
 i7 = i5;
 i5 = i4;
 L1 : do if (i6 >>> 0 < i2 >>> 0) __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj(i1, i2 - i6 | 0); else if (i6 >>> 0 > i2 >>> 0) {
  i4 = i7 + (i2 << 2) | 0;
  i8 = i5;
  while (1) {
   if ((i8 | 0) == (i4 | 0)) break L1;
   i9 = i8 + -4 | 0;
   HEAP32[i3 >> 2] = i9;
   i8 = i9;
  }
 } while (0);
 return;
}

function __ZN4MeshC2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 HEAP32[i1 + 100 >> 2] = 0;
 HEAP32[i1 + 104 >> 2] = 0;
 i2 = i1 + 100 | 0;
 i3 = i1 + 96 | 0;
 i4 = i1;
 i5 = i4 + 96 | 0;
 do {
  HEAP32[i4 >> 2] = 0;
  i4 = i4 + 4 | 0;
 } while ((i4 | 0) < (i5 | 0));
 HEAP32[i3 >> 2] = i2;
 i2 = i1 + 108 | 0;
 HEAP32[i1 + 136 >> 2] = 0;
 HEAP32[i1 + 140 >> 2] = 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 HEAP32[i2 + 12 >> 2] = 0;
 HEAP32[i2 + 16 >> 2] = 0;
 HEAP32[i2 + 20 >> 2] = 0;
 HEAP32[i1 + 132 >> 2] = i1 + 136;
 HEAP32[i1 + 144 >> 2] = 0;
 HEAP32[i1 + 148 >> 2] = 0;
 return;
}

function __Z15scroll_callbackP10GLFWwindowdd(i1, d2, d3) {
 i1 = i1 | 0;
 d2 = +d2;
 d3 = +d3;
 var i4 = 0, f5 = f0;
 if (d3 > 0.0) {
  i1 = (HEAP32[1460541] | 0) + -1 | 0;
  i4 = (i1 | 0) > 1 ? i1 : 1;
  i1 = (i4 | 0) < 10 ? i4 : 10;
  HEAP32[1460541] = i1;
  f5 = Math_fround(Math_fround(i1 | 0) * Math_fround(10.0));
  HEAPF32[1460540] = f5;
  HEAPF32[1460536] = f5;
 }
 if (!(d3 < 0.0)) return;
 i1 = (HEAP32[1460541] | 0) + 1 | 0;
 i4 = (i1 | 0) > 1 ? i1 : 1;
 i1 = (i4 | 0) < 10 ? i4 : 10;
 HEAP32[1460541] = i1;
 f5 = Math_fround(Math_fround(i1 | 0) * Math_fround(10.0));
 HEAPF32[1460540] = f5;
 HEAPF32[1460536] = f5;
 return;
}

function _pad_560(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256);
 i7 = i6;
 if ((i3 | 0) > (i4 | 0) & (i5 & 73728 | 0) == 0) {
  i5 = i3 - i4 | 0;
  _memset(i7 | 0, i2 << 24 >> 24 | 0, (i5 >>> 0 < 256 ? i5 : 256) | 0) | 0;
  if (i5 >>> 0 > 255) {
   i2 = i3 - i4 | 0;
   i4 = i5;
   do {
    _out(i1, i7, 256);
    i4 = i4 + -256 | 0;
   } while (i4 >>> 0 > 255);
   i8 = i2 & 255;
  } else i8 = i5;
  _out(i1, i7, i8);
 }
 STACKTOP = i6;
 return;
}

function __ZTv0_n12_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0;
 HEAP32[i2 >> 2] = 3436;
 i1 = i2 + 64 | 0;
 HEAP32[i1 >> 2] = 3476;
 HEAP32[i2 + 8 >> 2] = 3456;
 i3 = i2 + 12 | 0;
 HEAP32[i3 >> 2] = 3492;
 i4 = i2 + 44 | 0;
 if ((HEAP8[i4 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[i4 >> 2] | 0);
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev(i3);
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev(i2, 3552);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev(i1);
 __ZdlPv(i2);
 return;
}

function _png_benign_error(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224);
 i4 = i3;
 i5 = (HEAP32[i1 + 208 >> 2] & 32768 | 0) != 0;
 if (!(HEAP32[i1 + 212 >> 2] & 1048576)) {
  if (!i5) _png_error(i1, i2);
  if (!(HEAP32[i1 + 376 >> 2] | 0)) _png_error(i1, i2); else _png_chunk_error(i1, i2);
 }
 if (i5) {
  i5 = HEAP32[i1 + 376 >> 2] | 0;
  if (i5 | 0) {
   _png_format_buffer(i5, i4, i2);
   _png_warning(i1, i4);
   STACKTOP = i3;
   return;
  }
 }
 _png_warning(i1, i2);
 STACKTOP = i3;
 return;
}

function _png_safe_warning(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = HEAP32[i1 + 176 >> 2] | 0;
 i1 = i3 + 28 | 0;
 if (HEAP32[i1 >> 2] | 0) return;
 if (!i2) i4 = 0; else {
  i5 = HEAP8[i2 >> 0] | 0;
  if (!(i5 << 24 >> 24)) i4 = 0; else {
   i6 = 0;
   i7 = i2;
   i2 = i5;
   while (1) {
    i7 = i7 + 1 | 0;
    i5 = i6 + 1 | 0;
    HEAP8[i3 + 32 + i6 >> 0] = i2;
    i2 = HEAP8[i7 >> 0] | 0;
    if (!(i5 >>> 0 < 63 & i2 << 24 >> 24 != 0)) {
     i4 = i5;
     break;
    } else i6 = i5;
   }
  }
 }
 HEAP8[i3 + 32 + i4 >> 0] = 0;
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 1;
 return;
}

function __ZNSt3__26locale5__impD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 HEAP32[i1 >> 2] = 20628;
 i2 = i1 + 8 | 0;
 i3 = i1 + 12 | 0;
 i4 = 0;
 while (1) {
  i5 = HEAP32[i2 >> 2] | 0;
  if (i4 >>> 0 >= (HEAP32[i3 >> 2] | 0) - i5 >> 2 >>> 0) break;
  i6 = HEAP32[i5 + (i4 << 2) >> 2] | 0;
  if (i6 | 0) __ZNSt3__214__shared_count16__release_sharedEv(i6) | 0;
  i4 = i4 + 1 | 0;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 144 | 0);
 __ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev(i2);
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNKSt3__27collateIcE10do_compareEPKcS3_S3_S3_(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0;
 i1 = 0;
 i6 = i4;
 i4 = i2;
 while (1) {
  if ((i6 | 0) == (i5 | 0)) {
   i1 = 7;
   break;
  }
  if ((i4 | 0) == (i3 | 0)) {
   i7 = -1;
   break;
  }
  i2 = HEAP8[i4 >> 0] | 0;
  i8 = HEAP8[i6 >> 0] | 0;
  if (i2 << 24 >> 24 < i8 << 24 >> 24) {
   i7 = -1;
   break;
  }
  if (i8 << 24 >> 24 < i2 << 24 >> 24) {
   i7 = 1;
   break;
  }
  i6 = i6 + 1 | 0;
  i4 = i4 + 1 | 0;
 }
 if ((i1 | 0) == 7) i7 = (i4 | 0) != (i3 | 0) & 1;
 return i7 | 0;
}

function __ZN5ImGui4TextEPKcz(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i3;
 HEAP32[i4 >> 2] = i2;
 i2 = HEAP32[1460598] | 0;
 i5 = HEAP32[i2 + 6392 >> 2] | 0;
 HEAP8[i5 + 120 >> 0] = 1;
 if (HEAP8[i5 + 123 >> 0] | 0) {
  STACKTOP = i3;
  return;
 }
 i5 = i2 + 11620 | 0;
 i6 = _vsnprintf(i5, 3073, i1, i4) | 0;
 i4 = ((i6 | 0) != -1 & (i6 | 0) < 3073 ? i6 : 3072) + (i2 + 11620) | 0;
 HEAP8[i4 >> 0] = 0;
 __ZN5ImGui15TextUnformattedEPKcS1_(i5, i4);
 STACKTOP = i3;
 return;
}

function __ZTv0_n12_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0;
 HEAP32[i2 >> 2] = 3436;
 i1 = i2 + 64 | 0;
 HEAP32[i1 >> 2] = 3476;
 HEAP32[i2 + 8 >> 2] = 3456;
 i3 = i2 + 12 | 0;
 HEAP32[i3 >> 2] = 3492;
 i4 = i2 + 44 | 0;
 if ((HEAP8[i4 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[i4 >> 2] | 0);
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev(i3);
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev(i2, 3552);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev(i1);
 return;
}

function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i1 = i2 + 16 | 0;
 i5 = HEAP32[i1 >> 2] | 0;
 do if (!i5) {
  HEAP32[i1 >> 2] = i3;
  HEAP32[i2 + 24 >> 2] = i4;
  HEAP32[i2 + 36 >> 2] = 1;
 } else {
  if ((i5 | 0) != (i3 | 0)) {
   i6 = i2 + 36 | 0;
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
   HEAP32[i2 + 24 >> 2] = 2;
   HEAP8[i2 + 54 >> 0] = 1;
   break;
  }
  i6 = i2 + 24 | 0;
  if ((HEAP32[i6 >> 2] | 0) == 2) HEAP32[i6 >> 2] = i4;
 } while (0);
 return;
}

function _png_read_sig(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = i1 + 441 | 0;
 i4 = HEAP8[i3 >> 0] | 0;
 i5 = i4 & 255;
 if ((i4 & 255) > 7) return;
 i6 = 8 - i5 | 0;
 HEAP32[i1 + 800 >> 2] = 17;
 _png_read_data(i1, i2 + 32 + i5 | 0, i6);
 HEAP8[i3 >> 0] = 8;
 i3 = i2 + 32 | 0;
 if (!(_png_sig_cmp(i3, i5, i6) | 0)) {
  if ((i4 & 255) >= 3) return;
  i2 = i1 + 208 | 0;
  HEAP32[i2 >> 2] = HEAP32[i2 >> 2] | 4096;
  return;
 }
 if ((i4 & 255) >= 4) _png_error(i1, 64333);
 if (!(_png_sig_cmp(i3, i5, i6 + -4 | 0) | 0)) _png_error(i1, 64333); else _png_error(i1, 64318);
}

function __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = i4;
 do if (!i2) i5 = 0; else {
  i6 = i4 + 112 | 0;
  if (i2 >>> 0 < 29 & (HEAP8[i6 >> 0] | 0) == 0) {
   HEAP8[i6 >> 0] = 1;
   i5 = i4;
   break;
  } else {
   i5 = __Znwj(i2 << 2) | 0;
   break;
  }
 } while (0);
 HEAP32[i1 >> 2] = i5;
 i4 = i5 + (i3 << 2) | 0;
 HEAP32[i1 + 8 >> 2] = i4;
 HEAP32[i1 + 4 >> 2] = i4;
 HEAP32[i1 + 12 >> 2] = i5 + (i2 << 2);
 return;
}

function __ZNSt3__2L11init_wam_pmEv() {
 var i1 = 0, i2 = 0;
 if (!(HEAP8[73720] | 0)) if (___cxa_guard_acquire(73720) | 0) {
  i1 = 5846120;
  do {
   HEAP32[i1 >> 2] = 0;
   HEAP32[i1 + 4 >> 2] = 0;
   HEAP32[i1 + 8 >> 2] = 0;
   i2 = 0;
   while (1) {
    if ((i2 | 0) == 3) break;
    HEAP32[i1 + (i2 << 2) >> 2] = 0;
    i2 = i2 + 1 | 0;
   }
   i1 = i1 + 12 | 0;
  } while ((i1 | 0) != 5846408);
 }
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(5846120, 18952) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(5846132, 18964) | 0;
 return;
}

function __ZNSt3__2L10init_am_pmEv() {
 var i1 = 0, i2 = 0;
 if (!(HEAP8[73640] | 0)) if (___cxa_guard_acquire(73640) | 0) {
  i1 = 5845308;
  do {
   HEAP32[i1 >> 2] = 0;
   HEAP32[i1 + 4 >> 2] = 0;
   HEAP32[i1 + 8 >> 2] = 0;
   i2 = 0;
   while (1) {
    if ((i2 | 0) == 3) break;
    HEAP32[i1 + (i2 << 2) >> 2] = 0;
    i2 = i2 + 1 | 0;
   }
   i1 = i1 + 12 | 0;
  } while ((i1 | 0) != 5845596);
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(5845308, 70981) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(5845320, 70984) | 0;
 return;
}

function __ZTv0_n12_NSt3__219basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0;
 HEAP32[i2 >> 2] = 3788;
 i1 = i2 + 60 | 0;
 HEAP32[i1 >> 2] = 3808;
 i3 = i2 + 8 | 0;
 HEAP32[i3 >> 2] = 3492;
 i4 = i2 + 40 | 0;
 if ((HEAP8[i4 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[i4 >> 2] | 0);
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev(i3);
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev(i2, 3820);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev(i1);
 __ZdlPv(i2);
 return;
}

function _png_zstream_error(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = i1 + 248 | 0;
 if (HEAP32[i3 >> 2] | 0) return;
 switch (i2 | 0) {
 case -7:
  {
   i4 = 60896;
   break;
  }
 case 1:
  {
   i4 = 61051;
   break;
  }
 case 2:
  {
   i4 = 61029;
   break;
  }
 case -1:
  {
   i4 = 61015;
   break;
  }
 case -2:
  {
   i4 = 60992;
   break;
  }
 case -3:
  {
   i4 = 60974;
   break;
  }
 case -4:
  {
   i4 = 60954;
   break;
  }
 case -5:
  {
   i4 = 60944;
   break;
  }
 case -6:
  {
   i4 = 60919;
   break;
  }
 default:
  i4 = 61079;
 }
 HEAP32[i3 >> 2] = i4;
 return;
}

function __ZNKSt3__27collateIwE10do_compareEPKwS3_S3_S3_(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0;
 i1 = 0;
 i6 = i4;
 i4 = i2;
 while (1) {
  if ((i6 | 0) == (i5 | 0)) {
   i1 = 7;
   break;
  }
  if ((i4 | 0) == (i3 | 0)) {
   i7 = -1;
   break;
  }
  i2 = HEAP32[i4 >> 2] | 0;
  i8 = HEAP32[i6 >> 2] | 0;
  if ((i2 | 0) < (i8 | 0)) {
   i7 = -1;
   break;
  }
  if ((i8 | 0) < (i2 | 0)) {
   i7 = 1;
   break;
  }
  i6 = i6 + 4 | 0;
  i4 = i4 + 4 | 0;
 }
 if ((i1 | 0) == 7) i7 = (i4 | 0) != (i3 | 0) & 1;
 return i7 | 0;
}

function __ZN5ImGui12PopItemWidthEv() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i1 = HEAP32[(HEAP32[1460598] | 0) + 6392 >> 2] | 0;
 HEAP8[i1 + 120 >> 0] = 1;
 i2 = i1 + 376 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if ((i3 | 0) <= 0) ___assert_fail(38278, 56850, 1268, 31920);
 i4 = i3 + -1 | 0;
 HEAP32[i2 >> 2] = i4;
 if (!i4) {
  i5 = i1 + 548 | 0;
  i6 = HEAP32[i5 >> 2] | 0;
  i7 = i1 + 356 | 0;
  HEAP32[i7 >> 2] = i6;
  return;
 } else {
  i5 = (HEAP32[i1 + 384 >> 2] | 0) + (i3 + -2 << 2) | 0;
  i6 = HEAP32[i5 >> 2] | 0;
  i7 = i1 + 356 | 0;
  HEAP32[i7 >> 2] = i6;
  return;
 }
}

function __ZTv0_n12_NSt3__219basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0;
 HEAP32[i2 >> 2] = 3788;
 i1 = i2 + 60 | 0;
 HEAP32[i1 >> 2] = 3808;
 i3 = i2 + 8 | 0;
 HEAP32[i3 >> 2] = 3492;
 i4 = i2 + 40 | 0;
 if ((HEAP8[i4 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[i4 >> 2] | 0);
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev(i3);
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev(i2, 3820);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev(i1);
 return;
}

function __ZN5ImGui30DebugCheckVersionAndDataLayoutEPKcjjjjj(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 if (_strcmp(i1, 34412) | 0) ___assert_fail(34421, 31803, 2817, 34481);
 if ((i2 | 0) != 5352) ___assert_fail(34512, 31803, 2818, 34481);
 if ((i3 | 0) != 824) ___assert_fail(34568, 31803, 2819, 34481);
 if ((i4 | 0) != 8) ___assert_fail(34630, 31803, 2820, 34481);
 if ((i5 | 0) != 16) ___assert_fail(34687, 31803, 2821, 34481);
 if ((i6 | 0) == 20) return 1; else ___assert_fail(34744, 31803, 2822, 34481);
 return 0;
}

function __ZThn8_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = i1 + -8 | 0;
 HEAP32[i2 >> 2] = 3436;
 i1 = i2 + 64 | 0;
 HEAP32[i1 >> 2] = 3476;
 HEAP32[i2 + 8 >> 2] = 3456;
 i3 = i2 + 12 | 0;
 HEAP32[i3 >> 2] = 3492;
 i4 = i2 + 44 | 0;
 if ((HEAP8[i4 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[i4 >> 2] | 0);
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev(i3);
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev(i2, 3552);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev(i1);
 __ZdlPv(i2);
 return;
}

function _saveSetjmp(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0;
 setjmpId = setjmpId + 1 | 0;
 HEAP32[i1 >> 2] = setjmpId;
 while ((i5 | 0) < (i4 | 0)) {
  if (!(HEAP32[i3 + (i5 << 3) >> 2] | 0)) {
   HEAP32[i3 + (i5 << 3) >> 2] = setjmpId;
   HEAP32[i3 + ((i5 << 3) + 4) >> 2] = i2;
   HEAP32[i3 + ((i5 << 3) + 8) >> 2] = 0;
   tempRet0 = i4;
   return i3 | 0;
  }
  i5 = i5 + 1 | 0;
 }
 i4 = i4 * 2 | 0;
 i3 = _realloc(i3 | 0, 8 * (i4 + 1 | 0) | 0) | 0;
 i3 = _saveSetjmp(i1 | 0, i2 | 0, i3 | 0, i4 | 0) | 0;
 tempRet0 = i4;
 return i3 | 0;
}

function __ZN11ImFontAtlasC2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 i2 = i1 + 12 | 0;
 i3 = i1 + 32 + 16 | 0;
 i4 = i3 + 36 | 0;
 do {
  HEAP32[i3 >> 2] = 0;
  i3 = i3 + 4 | 0;
 } while ((i3 | 0) < (i4 | 0));
 HEAP32[i2 >> 2] = 1;
 i2 = i1 + 16 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 HEAP32[i2 + 12 >> 2] = 0;
 HEAP32[i2 + 16 >> 2] = 0;
 HEAP32[i2 + 20 >> 2] = 0;
 HEAP32[i2 + 24 >> 2] = 0;
 HEAP32[i2 + 28 >> 2] = 0;
 HEAP32[i1 + 84 >> 2] = -1;
 return;
}

function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b(i1, HEAP32[i2 + 8 >> 2] | 0, i6) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, i2, i3, i4, i5); else {
  i7 = HEAP32[i1 + 8 >> 2] | 0;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[i7 >> 2] | 0) + 20 >> 2] & 15](i7, i2, i3, i4, i5, i6);
 }
 return;
}

function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 if ((__ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8max_sizeEv(i1) | 0) >>> 0 < i2 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv(i1);
 i3 = i1 + 128 | 0;
 if (i2 >>> 0 < 29 & (HEAP8[i3 >> 0] | 0) == 0) {
  HEAP8[i3 >> 0] = 1;
  i4 = i1 + 16 | 0;
 } else i4 = __Znwj(i2 << 2) | 0;
 HEAP32[i1 + 4 >> 2] = i4;
 HEAP32[i1 >> 2] = i4;
 HEAP32[i1 + 8 >> 2] = i4 + (i2 << 2);
 return;
}

function __ZThn8_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = i1 + -8 | 0;
 HEAP32[i2 >> 2] = 3436;
 i1 = i2 + 64 | 0;
 HEAP32[i1 >> 2] = 3476;
 HEAP32[i2 + 8 >> 2] = 3456;
 i3 = i2 + 12 | 0;
 HEAP32[i3 >> 2] = 3492;
 i4 = i2 + 44 | 0;
 if ((HEAP8[i4 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[i4 >> 2] | 0);
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev(i3);
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev(i2, 3552);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev(i1);
 return;
}

function ___stdio_seek(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i5 = i4;
 i6 = i4 + 20 | 0;
 HEAP32[i5 >> 2] = HEAP32[i1 + 60 >> 2];
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 + 8 >> 2] = i2;
 HEAP32[i5 + 12 >> 2] = i6;
 HEAP32[i5 + 16 >> 2] = i3;
 if ((___syscall_ret(___syscall140(140, i5 | 0) | 0) | 0) < 0) {
  HEAP32[i6 >> 2] = -1;
  i7 = -1;
 } else i7 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i4;
 return i7 | 0;
}

function __ZNSt3__210__stdinbufIwE5imbueERKNS_6localeE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = __ZNKSt3__26locale9use_facetERNS0_2idE(i2, 5846988) | 0;
 i2 = i1 + 36 | 0;
 HEAP32[i2 >> 2] = i3;
 i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] & 127](i3) | 0;
 i3 = i1 + 44 | 0;
 HEAP32[i3 >> 2] = i4;
 i4 = HEAP32[i2 >> 2] | 0;
 i2 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] & 127](i4) | 0) & 1;
 HEAP8[i1 + 53 >> 0] = i2;
 if ((HEAP32[i3 >> 2] | 0) > 8) __ZNSt3__221__throw_runtime_errorEPKc(70315); else return;
}

function __ZNSt3__210__stdinbufIcE5imbueERKNS_6localeE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = __ZNKSt3__26locale9use_facetERNS0_2idE(i2, 5846980) | 0;
 i2 = i1 + 36 | 0;
 HEAP32[i2 >> 2] = i3;
 i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] & 127](i3) | 0;
 i3 = i1 + 44 | 0;
 HEAP32[i3 >> 2] = i4;
 i4 = HEAP32[i2 >> 2] | 0;
 i2 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] & 127](i4) | 0) & 1;
 HEAP8[i1 + 53 >> 0] = i2;
 if ((HEAP32[i3 >> 2] | 0) > 8) __ZNSt3__221__throw_runtime_errorEPKc(70315); else return;
}

function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 HEAP32[i1 >> 2] = 3840;
 i2 = i1 + 64 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if (i3 | 0) {
  __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE4syncEv(i1) | 0;
  if (!(_fclose(i3) | 0)) HEAP32[i2 >> 2] = 0;
 }
 if (HEAP8[i1 + 96 >> 0] | 0) {
  i2 = HEAP32[i1 + 32 >> 2] | 0;
  if (i2 | 0) __ZdaPv(i2);
 }
 if (HEAP8[i1 + 97 >> 0] | 0) {
  i2 = HEAP32[i1 + 56 >> 2] | 0;
  if (i2 | 0) __ZdaPv(i2);
 }
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev(i1);
 return;
}

function _puts(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = HEAP32[3385] | 0;
 if ((HEAP32[i2 + 76 >> 2] | 0) > -1) i3 = ___lockfile(i2) | 0; else i3 = 0;
 do if ((_fputs(i1, i2) | 0) < 0) i4 = -1; else {
  if ((HEAP8[i2 + 75 >> 0] | 0) != 10) {
   i5 = i2 + 20 | 0;
   i6 = HEAP32[i5 >> 2] | 0;
   if (i6 >>> 0 < (HEAP32[i2 + 16 >> 2] | 0) >>> 0) {
    HEAP32[i5 >> 2] = i6 + 1;
    HEAP8[i6 >> 0] = 10;
    i4 = 0;
    break;
   }
  }
  i4 = (___overflow(i2, 10) | 0) >> 31;
 } while (0);
 if (i3 | 0) ___unlockfile(i2);
 return i4 | 0;
}

function __ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 HEAP32[i1 >> 2] = 3436;
 i2 = i1 + 64 | 0;
 HEAP32[i2 >> 2] = 3476;
 HEAP32[i1 + 8 >> 2] = 3456;
 i3 = i1 + 12 | 0;
 HEAP32[i3 >> 2] = 3492;
 i4 = i1 + 44 | 0;
 if ((HEAP8[i4 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[i4 >> 2] | 0);
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev(i3);
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev(i1, 3552);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev(i2);
 __ZdlPv(i1);
 return;
}

function _png_gamma_correct(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i4 = i2 + -1 | 0;
 if ((HEAP8[i1 + 436 >> 0] | 0) == 8) {
  if (i4 >>> 0 < 254) i5 = ~~+Math_floor(+(+Math_pow(+(+(i2 | 0) / 255.0), +(+(i3 | 0) * 1.0e-05)) * 255.0 + .5)) & 255; else i5 = i2 & 255;
  i6 = i5 & 255;
  return i6 | 0;
 } else if (i4 >>> 0 < 65534) {
  i6 = ~~+Math_floor(+(+Math_pow(+(+(i2 | 0) / 65535.0), +(+(i3 | 0) * 1.0e-05)) * 65535.0 + .5)) & 65535;
  return i6 | 0;
 } else {
  i6 = i2 & 65535;
  return i6 | 0;
 }
 return 0;
}

function _store_int(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0;
 L1 : do if (i1 | 0) switch (i2 | 0) {
 case -2:
  {
   HEAP8[i1 >> 0] = i3;
   break L1;
   break;
  }
 case -1:
  {
   HEAP16[i1 >> 1] = i3;
   break L1;
   break;
  }
 case 0:
  {
   HEAP32[i1 >> 2] = i3;
   break L1;
   break;
  }
 case 1:
  {
   HEAP32[i1 >> 2] = i3;
   break L1;
   break;
  }
 case 3:
  {
   i5 = i1;
   HEAP32[i5 >> 2] = i3;
   HEAP32[i5 + 4 >> 2] = i4;
   break L1;
   break;
  }
 default:
  break L1;
 } while (0);
 return;
}

function __ZN10ImDrawListC2EPK20ImDrawListSharedData(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = i1 + 60 | 0;
 HEAP32[i1 + 108 >> 2] = 0;
 HEAP32[i1 + 104 >> 2] = 0;
 HEAP32[i1 + 112 >> 2] = 0;
 i4 = i1 + 40 | 0;
 i5 = i1;
 i6 = i5 + 36 | 0;
 do {
  HEAP32[i5 >> 2] = 0;
  i5 = i5 + 4 | 0;
 } while ((i5 | 0) < (i6 | 0));
 i5 = i3;
 i6 = i5 + 36 | 0;
 do {
  HEAP32[i5 >> 2] = 0;
  i5 = i5 + 4 | 0;
 } while ((i5 | 0) < (i6 | 0));
 HEAP32[i4 >> 2] = i2;
 HEAP32[i1 + 44 >> 2] = 0;
 __ZN10ImDrawList5ClearEv(i1);
 return;
}

function _png_do_packswap(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = HEAP8[i1 + 9 >> 0] | 0;
 if ((i3 & 255) >= 8) return;
 i4 = HEAP32[i1 + 4 >> 2] | 0;
 i1 = i2 + i4 | 0;
 switch (i3 << 24 >> 24) {
 case 1:
  {
   i5 = 60123;
   break;
  }
 case 2:
  {
   i5 = 59611;
   break;
  }
 case 4:
  {
   i5 = 59867;
   break;
  }
 default:
  return;
 }
 if ((i4 | 0) > 0) i6 = i2; else return;
 do {
  HEAP8[i6 >> 0] = HEAP8[i5 + (HEAPU8[i6 >> 0] | 0) >> 0] | 0;
  i6 = i6 + 1 | 0;
 } while (i6 >>> 0 < i1 >>> 0);
 return;
}

function __ZN11RenderQueueD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 __ZNSt3__26__treeINS_12__value_typeIiNS_3mapIP4MeshNS_4listIN11RenderQueue9TransformENS_9allocatorIS7_EEEENS_4lessIS4_EENS8_INS_4pairIKS4_SA_EEEEEEEENS_19__map_value_compareIiSI_NSB_IiEELb1EEENS8_ISI_EEE7destroyEPNS_11__tree_nodeISI_PvEE(i1 + 96 | 0, HEAP32[i1 + 100 >> 2] | 0);
 i2 = HEAP32[i1 + 80 >> 2] | 0;
 if (!i2) return;
 i3 = i1 + 84 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if ((i1 | 0) != (i2 | 0)) HEAP32[i3 >> 2] = i1 + (~((i1 + -4 - i2 | 0) >>> 2) << 2);
 __ZdlPv(i2);
 return;
}

function __ZNSt3__211__call_onceERVmPvPFvS2_E(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 _pthread_mutex_lock(5847028) | 0;
 while (1) {
  if ((HEAP32[i1 >> 2] | 0) != 1) break;
  _pthread_cond_wait(5847056, 5847028) | 0;
 }
 if (!(HEAP32[i1 >> 2] | 0)) {
  HEAP32[i1 >> 2] = 1;
  _pthread_mutex_unlock(5847028) | 0;
  FUNCTION_TABLE_vi[i3 & 255](i2);
  _pthread_mutex_lock(5847028) | 0;
  HEAP32[i1 >> 2] = -1;
  _pthread_mutex_unlock(5847028) | 0;
  _pthread_cond_broadcast(5847056) | 0;
 } else _pthread_mutex_unlock(5847028) | 0;
 return;
}

function _png_check_fp_string(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i5 >> 2] = 0;
 do if (!(_png_check_fp_number(i1, i2, i4, i5) | 0)) i6 = 0; else {
  i7 = HEAP32[i5 >> 2] | 0;
  if ((i7 | 0) != (i2 | 0)) if (HEAP8[i1 + i7 >> 0] | 0) {
   i6 = 0;
   break;
  }
  i6 = HEAP32[i4 >> 2] | 0;
 } while (0);
 STACKTOP = i3;
 return i6 | 0;
}

function __ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 HEAP32[i1 >> 2] = 3436;
 i2 = i1 + 64 | 0;
 HEAP32[i2 >> 2] = 3476;
 HEAP32[i1 + 8 >> 2] = 3456;
 i3 = i1 + 12 | 0;
 HEAP32[i3 >> 2] = 3492;
 i4 = i1 + 44 | 0;
 if ((HEAP8[i4 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[i4 >> 2] | 0);
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev(i3);
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev(i1, 3552);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev(i2);
 return;
}

function __ZN5ImGui16SetNextWindowPosERK6ImVec2iS2_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i4 = HEAP32[1460598] | 0;
 if (i2 | 0) if (i2 + -1 & i2 | 0) ___assert_fail(33890, 31803, 7366, 37892);
 i5 = i1;
 i1 = HEAP32[i5 + 4 >> 2] | 0;
 i6 = i4 + 6564 | 0;
 HEAP32[i6 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i6 + 4 >> 2] = i1;
 i1 = i3;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 i6 = i4 + 6572 | 0;
 HEAP32[i6 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i6 + 4 >> 2] = i3;
 HEAP32[i4 + 6536 >> 2] = i2 | 0 ? i2 : 1;
 return;
}

function __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = HEAP32[i1 + 4 >> 2] | 0;
 i3 = i1 + 8 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 while (1) {
  if ((i4 | 0) == (i2 | 0)) break;
  i5 = i4 + -4 | 0;
  HEAP32[i3 >> 2] = i5;
  i4 = i5;
 }
 i4 = HEAP32[i1 >> 2] | 0;
 do if (i4 | 0) {
  i3 = HEAP32[i1 + 16 >> 2] | 0;
  if ((i4 | 0) == (i3 | 0)) {
   HEAP8[i3 + 112 >> 0] = 0;
   break;
  } else {
   __ZdlPv(i4);
   break;
  }
 } while (0);
 return;
}

function __ZNSt3__219basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 HEAP32[i1 >> 2] = 3788;
 i2 = i1 + 60 | 0;
 HEAP32[i2 >> 2] = 3808;
 i3 = i1 + 8 | 0;
 HEAP32[i3 >> 2] = 3492;
 i4 = i1 + 40 | 0;
 if ((HEAP8[i4 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[i4 >> 2] | 0);
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev(i3);
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev(i1, 3820);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev(i2);
 __ZdlPv(i1);
 return;
}

function __ZN9MenuBuildC2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = -1;
 HEAP8[i1 + 16 >> 0] = 0;
 HEAP8[i1 + 17 >> 0] = 0;
 HEAP8[i1 + 18 >> 0] = 0;
 i2 = i1 + 20 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 HEAP32[i2 + 12 >> 2] = 0;
 HEAP32[i2 + 16 >> 2] = 0;
 HEAP32[i2 + 20 >> 2] = 0;
 HEAP32[i1 + 44 >> 2] = 1;
 HEAP32[i1 + 48 >> 2] = 0;
 HEAP32[i1 + 52 >> 2] = 0;
 HEAP32[i1 + 56 >> 2] = 0;
 return;
}

function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b(i1, HEAP32[i2 + 8 >> 2] | 0, 0) | 0) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, i2, i3, i4); else {
  i5 = HEAP32[i1 + 8 >> 2] | 0;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2] & 15](i5, i2, i3, i4);
 }
 return;
}

function __ZNSt3__212_GLOBAL__N_129throw_from_string_invalid_argERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i2;
 __ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_PKS6_(i3, i1, 72639);
 __ZNSt3__212_GLOBAL__N_112throw_helperISt16invalid_argumentEEvRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(i3);
}

function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0;
 i7 = HEAP32[i1 + 4 >> 2] | 0;
 i8 = i7 >> 8;
 if (!(i7 & 1)) i9 = i8; else i9 = HEAP32[(HEAP32[i4 >> 2] | 0) + i8 >> 2] | 0;
 i8 = HEAP32[i1 >> 2] | 0;
 FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2] & 15](i8, i2, i3, i4 + i9 | 0, i7 & 2 | 0 ? i5 : 2, i6);
 return;
}

function ___stdout_write(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i5 = i4;
 HEAP32[i1 + 36 >> 2] = 5;
 if (!(HEAP32[i1 >> 2] & 64)) {
  HEAP32[i5 >> 2] = HEAP32[i1 + 60 >> 2];
  HEAP32[i5 + 4 >> 2] = 21523;
  HEAP32[i5 + 8 >> 2] = i4 + 16;
  if (___syscall54(54, i5 | 0) | 0) HEAP8[i1 + 75 >> 0] = -1;
 }
 i5 = ___stdio_write(i1, i2, i3) | 0;
 STACKTOP = i4;
 return i5 | 0;
}

function __ZNSt3__212_GLOBAL__N_130throw_from_string_out_of_rangeERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i2;
 __ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_PKS6_(i3, i1, 72659);
 __ZNSt3__212_GLOBAL__N_112throw_helperISt12out_of_rangeEEvRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(i3);
}

function __ZN11MenuManagerC2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 i2 = __Znwj(16) | 0;
 HEAP32[i1 + 4 >> 2] = i2;
 HEAP32[i1 + 12 >> 2] = -2147483632;
 HEAP32[i1 + 8 >> 2] = 13;
 i3 = i2;
 i4 = 29664;
 i5 = i3 + 13 | 0;
 do {
  HEAP8[i3 >> 0] = HEAP8[i4 >> 0] | 0;
  i3 = i3 + 1 | 0;
  i4 = i4 + 1 | 0;
 } while ((i3 | 0) < (i5 | 0));
 HEAP8[i2 + 13 >> 0] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 return;
}

function _vsscanf(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 i5 = i4;
 i6 = i5;
 i7 = i6 + 124 | 0;
 do {
  HEAP32[i6 >> 2] = 0;
  i6 = i6 + 4 | 0;
 } while ((i6 | 0) < (i7 | 0));
 HEAP32[i5 + 32 >> 2] = 31;
 HEAP32[i5 + 44 >> 2] = i1;
 HEAP32[i5 + 76 >> 2] = -1;
 HEAP32[i5 + 84 >> 2] = i1;
 i1 = _vfscanf(i5, i2, i3) | 0;
 STACKTOP = i4;
 return i1 | 0;
}

function __ZNSt3__219basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 HEAP32[i1 >> 2] = 3788;
 i2 = i1 + 60 | 0;
 HEAP32[i2 >> 2] = 3808;
 i3 = i1 + 8 | 0;
 HEAP32[i3 >> 2] = 3492;
 i4 = i1 + 40 | 0;
 if ((HEAP8[i4 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[i4 >> 2] | 0);
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev(i3);
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev(i1, 3820);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev(i2);
 return;
}

function __ZN7ImGuiIO17AddInputCharacterEt(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = i1 + 750 | 0;
 if (!(HEAP16[i3 >> 1] | 0)) {
  i4 = i3;
  i5 = i1 + 752 | 0;
 } else {
  i6 = i3;
  i3 = 0;
  while (1) {
   i6 = i6 + 2 | 0;
   i7 = i3 + 1 | 0;
   if (!(HEAP16[i6 >> 1] | 0)) break; else i3 = i7;
  }
  if ((i3 | 0) < 15) {
   i4 = i1 + 750 + (i7 << 1) | 0;
   i5 = i1 + 750 + (i3 + 2 << 1) | 0;
  } else return;
 }
 HEAP16[i4 >> 1] = i2;
 HEAP16[i5 >> 1] = 0;
 return;
}

function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE10deallocateEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i2 | 0) {
  i3 = i1 + 4 | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  while (1) {
   if ((i4 | 0) == (i2 | 0)) break;
   i5 = i4 + -4 | 0;
   HEAP32[i3 >> 2] = i5;
   i4 = i5;
  }
  if ((i2 | 0) == (i1 + 16 | 0)) HEAP8[i1 + 128 >> 0] = 0; else __ZdlPv(i2);
  HEAP32[i1 + 8 >> 2] = 0;
  HEAP32[i3 >> 2] = 0;
  HEAP32[i1 >> 2] = 0;
 }
 return;
}

function __Z14ImFormatStringPcjPKcz(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i5;
 HEAP32[i6 >> 2] = i4;
 i4 = _vsnprintf(i1, i2, i3, i6) | 0;
 i6 = (i4 | 0) != -1 & (i4 | 0) < (i2 | 0) ? i4 : i2 + -1 | 0;
 if (!i1) {
  i7 = i4;
  STACKTOP = i5;
  return i7 | 0;
 }
 HEAP8[i1 + i6 >> 0] = 0;
 i7 = i6;
 STACKTOP = i5;
 return i7 | 0;
}

function __ZN12RenderSystem15enableVertexPosEi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 if ((HEAP32[i1 + 40 >> 2] | 0) == (i2 | 0)) {
  i3 = i1 + 96 | 0;
  _glEnableVertexAttribArray(HEAP32[i3 >> 2] | 0);
  i4 = 1;
  i5 = HEAP32[i3 >> 2] | 0;
 } else if ((HEAP32[i1 + 44 >> 2] | 0) == (i2 | 0)) {
  i2 = i1 + 100 | 0;
  _glEnableVertexAttribArray(HEAP32[i2 >> 2] | 0);
  i4 = 1;
  i5 = HEAP32[i2 >> 2] | 0;
 } else {
  i4 = 0;
  i5 = 0;
 }
 HEAP32[i1 + 76 >> 2] = i5;
 return i4 | 0;
}

function __Z21mouse_button_callbackP10GLFWwindowiii(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i4 = (__ZN5ImGui5GetIOEv() | 0) + 868 | 0;
 if (HEAP8[i4 >> 0] | 0) return;
 i4 = (i3 | 0) == 1;
 if ((i2 | 0) == 0 & i4) __ZN13ActionManager18beginActionCommandEv(5841552);
 if (!(i3 | i2)) __ZN13ActionManager20releaseActionCommandEv(5841552);
 if ((i2 | 0) != 1) return;
 HEAP32[1460420] = 0;
 __ZN13ActionManager19cancelActionCommandEv(5841552);
 HEAP8[5842132] = i4 & 1;
 return;
}

function _png_read_filter_row(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0;
 i6 = i5 + -1 | 0;
 if (i6 >>> 0 >= 4) return;
 i5 = i1 + 808 | 0;
 if (!(HEAP32[i5 >> 2] | 0)) {
  i7 = (HEAPU8[i1 + 438 >> 0] | 0) + 7 | 0;
  HEAP32[i5 >> 2] = 4;
  HEAP32[i1 + 812 >> 2] = 5;
  HEAP32[i1 + 816 >> 2] = 6;
  HEAP32[i1 + 820 >> 2] = (i7 & 504 | 0) == 8 ? 8 : 7;
 }
 FUNCTION_TABLE_viii[HEAP32[i1 + 808 + (i6 << 2) >> 2] & 15](i2, i3, i4);
 return;
}

function _vasprintf(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4;
 HEAP32[i5 >> 2] = HEAP32[i3 >> 2];
 i6 = _vsnprintf(0, 0, i2, i5) | 0;
 if ((i6 | 0) < 0) i7 = -1; else {
  i5 = i6 + 1 | 0;
  i6 = _malloc(i5) | 0;
  HEAP32[i1 >> 2] = i6;
  if (!i6) i7 = -1; else i7 = _vsnprintf(i6, i5, i2, i3) | 0;
 }
 STACKTOP = i4;
 return i7 | 0;
}

function _strcmp(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = HEAP8[i1 >> 0] | 0;
 i4 = HEAP8[i2 >> 0] | 0;
 if (i3 << 24 >> 24 == 0 ? 1 : i3 << 24 >> 24 != i4 << 24 >> 24) {
  i5 = i4;
  i6 = i3;
 } else {
  i3 = i2;
  i2 = i1;
  do {
   i2 = i2 + 1 | 0;
   i3 = i3 + 1 | 0;
   i1 = HEAP8[i2 >> 0] | 0;
   i4 = HEAP8[i3 >> 0] | 0;
  } while (!(i1 << 24 >> 24 == 0 ? 1 : i1 << 24 >> 24 != i4 << 24 >> 24));
  i5 = i4;
  i6 = i1;
 }
 return (i6 & 255) - (i5 & 255) | 0;
}

function __ZN5ImGui7LogTextEPKcz(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i3;
 i5 = HEAP32[1460598] | 0;
 if (!(HEAP8[i5 + 11092 >> 0] | 0)) {
  STACKTOP = i3;
  return;
 }
 HEAP32[i4 >> 2] = i2;
 i2 = HEAP32[i5 + 11096 >> 2] | 0;
 if (!i2) __ZN15ImGuiTextBuffer8appendfvEPKcPi(i5 + 11100 | 0, i1, i4); else _vfprintf(i2, i1, i4) | 0;
 STACKTOP = i3;
 return;
}

function _png_calculate_crc(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = HEAP32[i1 + 212 >> 2] | 0;
 if (!(i3 | 0 ? ((HEAP32[i1 + 376 >> 2] & 536870912 | 0) == 0 ? (i4 & 2048 | 0) == 0 : (i4 & 768 | 0) != 768) : 0)) return;
 i4 = i1 + 412 | 0;
 i1 = i2;
 i2 = HEAP32[i4 >> 2] | 0;
 i5 = i3;
 while (1) {
  i3 = (i5 | 0) == 0 ? -1 : i5;
  i2 = _crc32(i2, i1, i3) | 0;
  i5 = i5 - i3 | 0;
  if (!i5) break; else i1 = i1 + i3 | 0;
 }
 HEAP32[i4 >> 2] = i2;
 return;
}

function _opendir(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i2 + 8 | 0;
 i4 = _open(i1, 589824, i2) | 0;
 do if ((i4 | 0) < 0) i5 = 0; else {
  i1 = _calloc(1, 2072) | 0;
  if (!i1) {
   HEAP32[i3 >> 2] = i4;
   ___syscall6(6, i3 | 0) | 0;
   i5 = 0;
   break;
  } else {
   HEAP32[i1 >> 2] = i4;
   i5 = i1;
   break;
  }
 } while (0);
 STACKTOP = i2;
 return i5 | 0;
}

function _fwrite(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i5 = Math_imul(i3, i2) | 0;
 i6 = (i2 | 0) == 0 ? 0 : i3;
 if ((HEAP32[i4 + 76 >> 2] | 0) > -1) {
  i3 = (___lockfile(i4) | 0) == 0;
  i7 = ___fwritex(i1, i5, i4) | 0;
  if (i3) i8 = i7; else {
   ___unlockfile(i4);
   i8 = i7;
  }
 } else i8 = ___fwritex(i1, i5, i4) | 0;
 if ((i8 | 0) == (i5 | 0)) i9 = i6; else i9 = (i8 >>> 0) / (i2 >>> 0) | 0;
 return i9 | 0;
}

function _memcmp(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 L1 : do if (!i3) i4 = 0; else {
  i5 = i1;
  i6 = i3;
  i7 = i2;
  while (1) {
   i8 = HEAP8[i5 >> 0] | 0;
   i9 = HEAP8[i7 >> 0] | 0;
   if (i8 << 24 >> 24 != i9 << 24 >> 24) break;
   i6 = i6 + -1 | 0;
   if (!i6) {
    i4 = 0;
    break L1;
   } else {
    i5 = i5 + 1 | 0;
    i7 = i7 + 1 | 0;
   }
  }
  i4 = (i8 & 255) - (i9 & 255) | 0;
 } while (0);
 return i4 | 0;
}

function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0;
 i6 = HEAP32[i1 + 4 >> 2] | 0;
 i7 = i6 >> 8;
 if (!(i6 & 1)) i8 = i7; else i8 = HEAP32[(HEAP32[i3 >> 2] | 0) + i7 >> 2] | 0;
 i7 = HEAP32[i1 >> 2] | 0;
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i7 >> 2] | 0) + 24 >> 2] & 7](i7, i2, i3 + i8 | 0, i6 & 2 | 0 ? i4 : 2, i5);
 return;
}

function __ZN13ActionManager18beginActionCommandEv(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = i1 + 4 | 0;
 __ZN8LineTool5resetEv(i2);
 switch (HEAP32[i1 + 28 >> 2] | 0) {
 case 103:
 case 102:
 case 101:
 case 3:
 case 2:
 case 1:
  {
   HEAP8[i1 + 44 >> 0] = 1;
   __ZN8LineTool5resetEv(i2);
   __ZN8LineTool8setPointEii(i2, HEAP32[i1 + 36 >> 2] | 0, HEAP32[i1 + 40 >> 2] | 0);
   return;
  }
 default:
  {
   HEAP8[i1 + 44 >> 0] = 0;
   __ZN13ActionManager17performTileActionEv(i1);
   return;
  }
 }
}

function __ZL19ChildWindowComparerPKvS0_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = HEAP32[i1 >> 2] | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 i2 = HEAP32[i3 + 8 >> 2] | 0;
 i4 = HEAP32[i1 + 8 >> 2] | 0;
 i5 = (i2 & 67108864) - (i4 & 67108864) | 0;
 if (i5 | 0) {
  i6 = i5;
  return i6 | 0;
 }
 i5 = (i2 & 33554432) - (i4 & 33554432) | 0;
 if (i5 | 0) {
  i6 = i5;
  return i6 | 0;
 }
 i6 = (HEAP32[i3 + 128 >> 2] | 0) - (HEAP32[i1 + 128 >> 2] | 0) | 0;
 return i6 | 0;
}

function _png_malloc_array(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 if ((i2 | 0) < 1 | (i3 | 0) == 0) _png_error(i1, 61552);
 if ((4294967295 / (i3 >>> 0) | 0) >>> 0 < i2 >>> 0) {
  i4 = 0;
  return i4 | 0;
 }
 i5 = Math_imul(i3, i2) | 0;
 if (!i5) {
  i4 = 0;
  return i4 | 0;
 }
 if (i1 | 0) {
  i2 = HEAP32[i1 + 720 >> 2] | 0;
  if (i2 | 0) {
   i4 = FUNCTION_TABLE_iii[i2 & 31](i1, i5) | 0;
   return i4 | 0;
  }
 }
 i4 = _malloc(i5) | 0;
 return i4 | 0;
}

function __ZNKSt3__210moneypunctIwLb1EE16do_negative_signEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i2;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP8[i1 + 8 + 3 >> 0] = 1;
 __ZNSt3__211char_traitsIwE6assignEPwjw(i1, 1, 45) | 0;
 HEAP32[i3 >> 2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw(i1 + 4 | 0, i3);
 STACKTOP = i2;
 return;
}

function __ZNKSt3__210moneypunctIwLb0EE16do_negative_signEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i2;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP8[i1 + 8 + 3 >> 0] = 1;
 __ZNSt3__211char_traitsIwE6assignEPwjw(i1, 1, 45) | 0;
 HEAP32[i3 >> 2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw(i1 + 4 | 0, i3);
 STACKTOP = i2;
 return;
}

function __GLOBAL__sub_I_main_cpp() {
 __ZN7CityMapC2Ev(74252);
 __ZN13ActionManagerC2ER7CityMap(5841552, 74252);
 __ZN13WindowManagerC2Ev(5841600);
 __ZN11MenuManagerC2Ev(5841612);
 __ZN9MenuBuildC2Ev(5841632);
 __ZN15CityMapRendererC2Ev(5841692);
 __ZN11RenderQueueC2Ev(5841960);
 __ZN11MeshManagerC2Ev(5842084);
 HEAP8[5842132] = 0;
 HEAPF32[1460534] = Math_fround(.785398185);
 HEAPF32[1460535] = Math_fround(1.04719806);
 HEAPF32[1460536] = Math_fround(80.0);
 HEAP32[1460541] = 8;
 return;
}

function __ZNKSt3__210moneypunctIcLb1EE16do_negative_signEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i2;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP8[i1 + 11 >> 0] = 1;
 __ZNSt3__211char_traitsIcE6assignEPcjc(i1, 1, 45) | 0;
 HEAP8[i3 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc(i1 + 1 | 0, i3);
 STACKTOP = i2;
 return;
}

function __ZNKSt3__210moneypunctIcLb0EE16do_negative_signEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i2;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP8[i1 + 11 >> 0] = 1;
 __ZNSt3__211char_traitsIcE6assignEPcjc(i1, 1, 45) | 0;
 HEAP8[i3 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc(i1 + 1 | 0, i3);
 STACKTOP = i2;
 return;
}

function __ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = HEAP32[i1 >> 2] | 0;
 do if (i2 | 0) {
  i3 = i1 + 4 | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  while (1) {
   if ((i4 | 0) == (i2 | 0)) break;
   i5 = i4 + -4 | 0;
   HEAP32[i3 >> 2] = i5;
   i4 = i5;
  }
  if ((i2 | 0) == (i1 + 16 | 0)) {
   HEAP8[i1 + 128 >> 0] = 0;
   break;
  } else {
   __ZdlPv(i2);
   break;
  }
 } while (0);
 return;
}

function _wmemmove(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 if (i1 - i2 >> 2 >>> 0 < i3 >>> 0) {
  i4 = i3;
  do {
   i4 = i4 + -1 | 0;
   HEAP32[i1 + (i4 << 2) >> 2] = HEAP32[i2 + (i4 << 2) >> 2];
  } while ((i4 | 0) != 0);
 } else if (i3 | 0) {
  i4 = i2;
  i2 = i1;
  i5 = i3;
  while (1) {
   i5 = i5 + -1 | 0;
   HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
   if (!i5) break; else {
    i4 = i4 + 4 | 0;
    i2 = i2 + 4 | 0;
   }
  }
 }
 return i1 | 0;
}

function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0;
 i5 = HEAP32[i1 + 4 >> 2] | 0;
 i6 = i5 >> 8;
 if (!(i5 & 1)) i7 = i6; else i7 = HEAP32[(HEAP32[i3 >> 2] | 0) + i6 >> 2] | 0;
 i6 = HEAP32[i1 >> 2] | 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 28 >> 2] & 15](i6, i2, i3 + i7 | 0, i5 & 2 | 0 ? i4 : 2);
 return;
}

function ___towrite(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = i1 + 74 | 0;
 i3 = HEAP8[i2 >> 0] | 0;
 HEAP8[i2 >> 0] = i3 + 255 | i3;
 i3 = HEAP32[i1 >> 2] | 0;
 if (!(i3 & 8)) {
  HEAP32[i1 + 8 >> 2] = 0;
  HEAP32[i1 + 4 >> 2] = 0;
  i2 = HEAP32[i1 + 44 >> 2] | 0;
  HEAP32[i1 + 28 >> 2] = i2;
  HEAP32[i1 + 20 >> 2] = i2;
  HEAP32[i1 + 16 >> 2] = i2 + (HEAP32[i1 + 48 >> 2] | 0);
  i4 = 0;
 } else {
  HEAP32[i1 >> 2] = i3 | 32;
  i4 = -1;
 }
 return i4 | 0;
}

function __ZNKSt3__27codecvtIwc11__mbstate_tE11do_encodingEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = i1 + 8 | 0;
 i1 = ___uselocale(HEAP32[i2 >> 2] | 0) | 0;
 i3 = _mbtowc(0, 0, 4) | 0;
 if (i1 | 0) ___uselocale(i1) | 0;
 if (!i3) {
  i3 = HEAP32[i2 >> 2] | 0;
  if (!i3) i4 = 1; else {
   i2 = ___uselocale(i3) | 0;
   i3 = ___ctype_get_mb_cur_max() | 0;
   if (i2 | 0) ___uselocale(i2) | 0;
   return (i3 | 0) == 1 | 0;
  }
 } else i4 = -1;
 return i4 | 0;
}

function __ZNKSt3__25ctypeIwE11do_scan_notEtPKwS3_(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0;
 i1 = i3;
 while (1) {
  if ((i1 | 0) == (i4 | 0)) {
   i5 = i4;
   break;
  }
  if ((HEAP32[i1 >> 2] | 0) >>> 0 >= 128) {
   i5 = i1;
   break;
  }
  i3 = __ZNSt3__25ctypeIcE13classic_tableEv() | 0;
  if (!((HEAP16[i3 + (HEAP32[i1 >> 2] << 1) >> 1] & i2) << 16 >> 16)) {
   i5 = i1;
   break;
  }
  i1 = i1 + 4 | 0;
 }
 return i5 | 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5uflowEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0;
 if ((i2 | 0) == (__ZNSt3__211char_traitsIwE3eofEv() | 0)) i3 = __ZNSt3__211char_traitsIwE3eofEv() | 0; else {
  i2 = i1 + 12 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  HEAP32[i2 >> 2] = i1 + 4;
  i3 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
 }
 return i3 | 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5uflowEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0;
 if ((i2 | 0) == (__ZNSt3__211char_traitsIcE3eofEv() | 0)) i3 = __ZNSt3__211char_traitsIcE3eofEv() | 0; else {
  i2 = i1 + 12 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  HEAP32[i2 >> 2] = i1 + 1;
  i3 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
 }
 return i3 | 0;
}

function _fmt_x(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 if ((i1 | 0) == 0 & (i2 | 0) == 0) i5 = i3; else {
  i6 = i3;
  i3 = i2;
  i2 = i1;
  while (1) {
   i1 = i6 + -1 | 0;
   HEAP8[i1 >> 0] = HEAPU8[67525 + (i2 & 15) >> 0] | 0 | i4;
   i2 = _bitshift64Lshr(i2 | 0, i3 | 0, 4) | 0;
   i3 = tempRet0;
   if ((i2 | 0) == 0 & (i3 | 0) == 0) {
    i5 = i1;
    break;
   } else i6 = i1;
  }
 }
 return i5 | 0;
}

function __ZN11RenderQueue5clearEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = i1 + 96 | 0;
 i3 = i1 + 100 | 0;
 __ZNSt3__26__treeINS_12__value_typeIiNS_3mapIP4MeshNS_4listIN11RenderQueue9TransformENS_9allocatorIS7_EEEENS_4lessIS4_EENS8_INS_4pairIKS4_SA_EEEEEEEENS_19__map_value_compareIiSI_NSB_IiEELb1EEENS8_ISI_EEE7destroyEPNS_11__tree_nodeISI_PvEE(i2, HEAP32[i3 >> 2] | 0);
 HEAP32[i1 + 104 >> 2] = 0;
 HEAP32[i2 >> 2] = i3;
 HEAP32[i3 >> 2] = 0;
 return;
}

function _png_do_swap(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 if ((HEAP8[i1 + 9 >> 0] | 0) != 16) return;
 i3 = Math_imul(HEAP32[i1 >> 2] | 0, HEAPU8[i1 + 10 >> 0] | 0) | 0;
 if (!i3) return; else {
  i4 = 0;
  i5 = i2;
 }
 while (1) {
  i2 = HEAP8[i5 >> 0] | 0;
  i1 = i5 + 1 | 0;
  HEAP8[i5 >> 0] = HEAP8[i1 >> 0] | 0;
  HEAP8[i1 >> 0] = i2;
  i4 = i4 + 1 | 0;
  if ((i4 | 0) == (i3 | 0)) break; else i5 = i5 + 2 | 0;
 }
 return;
}

function _png_set_bKGD(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if ((i1 | 0) == 0 | (i2 | 0) == 0 | (i3 | 0) == 0) return;
 i1 = i2 + 170 | 0;
 HEAP16[i1 >> 1] = HEAP16[i3 >> 1] | 0;
 HEAP16[i1 + 2 >> 1] = HEAP16[i3 + 2 >> 1] | 0;
 HEAP16[i1 + 4 >> 1] = HEAP16[i3 + 4 >> 1] | 0;
 HEAP16[i1 + 6 >> 1] = HEAP16[i3 + 6 >> 1] | 0;
 HEAP16[i1 + 8 >> 1] = HEAP16[i3 + 8 >> 1] | 0;
 i3 = i2 + 8 | 0;
 HEAP32[i3 >> 2] = HEAP32[i3 >> 2] | 32;
 return;
}

function __ZNK6ImFont9FindGlyphEt(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = i2 & 65535;
 if ((HEAP32[i1 + 40 >> 2] | 0) <= (i3 | 0)) {
  i4 = HEAP32[i1 + 52 >> 2] | 0;
  return i4 | 0;
 }
 i2 = HEAP16[(HEAP32[i1 + 48 >> 2] | 0) + (i3 << 1) >> 1] | 0;
 if (i2 << 16 >> 16 == -1) {
  i4 = HEAP32[i1 + 52 >> 2] | 0;
  return i4 | 0;
 } else {
  i4 = (HEAP32[i1 + 24 >> 2] | 0) + ((i2 & 65535) * 40 | 0) | 0;
  return i4 | 0;
 }
 return 0;
}

function __ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i6;
 HEAP32[i7 >> 2] = i5;
 i5 = ___uselocale(i3) | 0;
 i3 = _vsnprintf(i1, i2, i4, i7) | 0;
 if (i5 | 0) ___uselocale(i5) | 0;
 STACKTOP = i6;
 return i3 | 0;
}

function _png_destroy_png_struct(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 912 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(912);
 i3 = i2;
 if (!i1) {
  STACKTOP = i2;
  return;
 }
 _memcpy(i3 | 0, i1 | 0, 900) | 0;
 _memset(i1 | 0, 0, 900) | 0;
 i4 = HEAP32[i3 + 724 >> 2] | 0;
 if (!i4) _free(i1); else FUNCTION_TABLE_vii[i4 & 63](i3, i1);
 _png_free_jmpbuf(i3);
 STACKTOP = i2;
 return;
}

function _arg_n(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i3;
 HEAP32[i4 >> 2] = HEAP32[i1 >> 2];
 i1 = i2;
 while (1) {
  i2 = (HEAP32[i4 >> 2] | 0) + (4 - 1) & ~(4 - 1);
  i5 = HEAP32[i2 >> 2] | 0;
  HEAP32[i4 >> 2] = i2 + 4;
  if (i1 >>> 0 > 1) i1 = i1 + -1 | 0; else break;
 }
 STACKTOP = i3;
 return i5 | 0;
}

function __ZL19rect_height_comparePKvS0_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = HEAP16[i1 + 6 >> 1] | 0;
 i4 = HEAP16[i2 + 6 >> 1] | 0;
 if ((i3 & 65535) > (i4 & 65535)) {
  i5 = -1;
  return i5 | 0;
 }
 if ((i3 & 65535) < (i4 & 65535)) {
  i5 = 1;
  return i5 | 0;
 }
 i4 = HEAP16[i1 + 4 >> 1] | 0;
 i1 = HEAP16[i2 + 4 >> 1] | 0;
 i5 = (i4 & 65535) > (i1 & 65535) ? -1 : (i4 & 65535) < (i1 & 65535) & 1;
 return i5 | 0;
}

function _png_read_filter_row_sub(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 i4 = ((HEAPU8[i1 + 11 >> 0] | 0) + 7 | 0) >>> 3;
 if (i4 >>> 0 >= i3 >>> 0) return;
 i1 = 0 - i4 | 0;
 i5 = i4;
 i6 = i2 + i4 | 0;
 while (1) {
  HEAP8[i6 >> 0] = (HEAPU8[i6 + i1 >> 0] | 0) + (HEAPU8[i6 >> 0] | 0);
  i5 = i5 + 1 | 0;
  if ((i5 | 0) == (i3 | 0)) break; else i6 = i6 + 1 | 0;
 }
 return;
}

function ___string_read(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i4 = i1 + 84 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 i6 = i3 + 256 | 0;
 i7 = _memchr(i5, 0, i6) | 0;
 i8 = (i7 | 0) == 0 ? i6 : i7 - i5 | 0;
 i7 = i8 >>> 0 < i3 >>> 0 ? i8 : i3;
 _memcpy(i2 | 0, i5 | 0, i7 | 0) | 0;
 HEAP32[i1 + 4 >> 2] = i5 + i7;
 i2 = i5 + i8 | 0;
 HEAP32[i1 + 8 >> 2] = i2;
 HEAP32[i4 >> 2] = i2;
 return i7 | 0;
}

function __ZN11RenderQueue11setPalletteENSt3__26vectorIiNS0_9allocatorIiEEEE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 HEAP8[i1 + 92 >> 0] = 1;
 i3 = i1 + 80 | 0;
 if ((i3 | 0) == (i2 | 0)) return;
 __ZNSt3__26vectorIiNS_9allocatorIiEEE6assignIPiEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIiNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_(i3, HEAP32[i2 >> 2] | 0, HEAP32[i2 + 4 >> 2] | 0);
 return;
}

function __ZNKSt3__25ctypeIwE10do_scan_isEtPKwS3_(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0;
 i1 = i3;
 while (1) {
  if ((i1 | 0) == (i4 | 0)) {
   i5 = i4;
   break;
  }
  if ((HEAP32[i1 >> 2] | 0) >>> 0 < 128) {
   i3 = __ZNSt3__25ctypeIcE13classic_tableEv() | 0;
   if ((HEAP16[i3 + (HEAP32[i1 >> 2] << 1) >> 1] & i2) << 16 >> 16) {
    i5 = i1;
    break;
   }
  }
  i1 = i1 + 4 | 0;
 }
 return i5 | 0;
}

function ___fmodeflags(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = (_strchr(i1, 43) | 0) == 0;
 i3 = HEAP8[i1 >> 0] | 0;
 i4 = i3 << 24 >> 24 | 0;
 i3 = i2 ? (i4 | 0) != 114 & 1 : 2;
 i2 = (_strchr(i1, 120) | 0) == 0;
 i5 = i2 ? i3 : i3 | 128;
 i3 = (_strchr(i1, 101) | 0) == 0;
 i1 = i3 ? i5 : i5 | 524288;
 i5 = (i4 | 0) == 114 ? i1 : i1 | 64;
 i1 = (i4 | 0) == 119 ? i5 | 512 : i5;
 return ((i4 | 0) == 97 ? i1 | 1024 : i1) | 0;
}

function _png_set_sBIT(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if ((i1 | 0) == 0 | (i2 | 0) == 0 | (i3 | 0) == 0) return;
 i1 = i2 + 148 | 0;
 HEAP8[i1 >> 0] = HEAP8[i3 >> 0] | 0;
 HEAP8[i1 + 1 >> 0] = HEAP8[i3 + 1 >> 0] | 0;
 HEAP8[i1 + 2 >> 0] = HEAP8[i3 + 2 >> 0] | 0;
 HEAP8[i1 + 3 >> 0] = HEAP8[i3 + 3 >> 0] | 0;
 HEAP8[i1 + 4 >> 0] = HEAP8[i3 + 4 >> 0] | 0;
 i3 = i2 + 8 | 0;
 HEAP32[i3 >> 2] = HEAP32[i3 >> 2] | 2;
 return;
}

function ___ftello_unlocked(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 if (!(HEAP32[i1 >> 2] & 128)) i2 = 1; else i2 = (HEAP32[i1 + 20 >> 2] | 0) >>> 0 > (HEAP32[i1 + 28 >> 2] | 0) >>> 0 ? 2 : 1;
 i3 = FUNCTION_TABLE_iiii[HEAP32[i1 + 40 >> 2] & 31](i1, 0, i2) | 0;
 if ((i3 | 0) < 0) i4 = i3; else i4 = i3 - (HEAP32[i1 + 8 >> 2] | 0) + (HEAP32[i1 + 4 >> 2] | 0) + (HEAP32[i1 + 20 >> 2] | 0) - (HEAP32[i1 + 28 >> 2] | 0) | 0;
 return i4 | 0;
}

function __ZNKSt3__25ctypeIwE5do_isEPKwS3_Pt(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0;
 i1 = i4;
 i4 = i2;
 while (1) {
  if ((i4 | 0) == (i3 | 0)) break;
  if ((HEAP32[i4 >> 2] | 0) >>> 0 < 128) {
   i2 = __ZNSt3__25ctypeIcE13classic_tableEv() | 0;
   i5 = HEAPU16[i2 + (HEAP32[i4 >> 2] << 1) >> 1] | 0;
  } else i5 = 0;
  HEAP16[i1 >> 1] = i5;
  i1 = i1 + 2 | 0;
  i4 = i4 + 4 | 0;
 }
 return i3 | 0;
}

function __ZTv0_n12_NSt3__214basic_ifstreamIcNS_11char_traitsIcEEED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0;
 HEAP32[i2 >> 2] = 3732;
 i1 = i2 + 108 | 0;
 HEAP32[i1 >> 2] = 3752;
 __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev(i2 + 8 | 0);
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev(i2, 3764);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev(i1);
 __ZdlPv(i2);
 return;
}

function _png_muldiv(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, d6 = 0.0;
 if (!i4) {
  i5 = 0;
  return i5 | 0;
 }
 if ((i2 | 0) == 0 | (i3 | 0) == 0) {
  HEAP32[i1 >> 2] = 0;
  i5 = 1;
  return i5 | 0;
 }
 d6 = +Math_floor(+(+(i2 | 0) * +(i3 | 0) / +(i4 | 0) + .5));
 if (!(d6 <= 2147483647.0 & d6 >= -2147483648.0)) {
  i5 = 0;
  return i5 | 0;
 }
 HEAP32[i1 >> 2] = ~~d6;
 i5 = 1;
 return i5 | 0;
}

function __ZNSt3__28ios_base4initEPv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 HEAP32[i1 + 24 >> 2] = i2;
 HEAP32[i1 + 16 >> 2] = (i2 | 0) == 0 & 1;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 4098;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 6;
 i2 = i1 + 28 | 0;
 i3 = i1 + 32 | 0;
 i1 = i3 + 40 | 0;
 do {
  HEAP32[i3 >> 2] = 0;
  i3 = i3 + 4 | 0;
 } while ((i3 | 0) < (i1 | 0));
 __ZNSt3__26localeC2Ev(i2);
 return;
}

function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP8[i1 + 128 >> 0] = 0;
 if (i2 | 0) {
  __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj(i1, i2);
  __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj(i1, i2);
 }
 return;
}

function _png_error(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i3;
 if (i1 | 0) {
  i3 = HEAP32[i1 + 168 >> 2] | 0;
  if (i3 | 0) FUNCTION_TABLE_vii[i3 & 63](i1, i2);
 }
 i3 = HEAP32[3353] | 0;
 HEAP32[i4 >> 2] = i2 | 0 ? i2 : 58974;
 _fprintf(i3, 58984, i4) | 0;
 _fputc(10, i3) | 0;
 _png_longjmp(i1, 1);
}

function __ZN12RenderSystemC2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 HEAPF32[i1 >> 2] = Math_fround(0.0);
 HEAPF32[i1 + 4 >> 2] = Math_fround(0.0);
 i2 = i1 + 48 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 HEAP32[i2 + 12 >> 2] = 0;
 HEAP32[i1 + 64 >> 2] = 3;
 HEAPF32[i1 + 68 >> 2] = Math_fround(4.5);
 HEAP32[i1 + 72 >> 2] = HEAP32[1460597];
 HEAP32[i1 + 76 >> 2] = 0;
 HEAP32[i1 + 80 >> 2] = 0;
 return;
}

function ___cxa_can_catch(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4;
 HEAP32[i5 >> 2] = HEAP32[i3 >> 2];
 i6 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 31](i1, i2, i5) | 0;
 if (i6) HEAP32[i3 >> 2] = HEAP32[i5 >> 2];
 STACKTOP = i4;
 return i6 & 1 | 0;
}

function __ZNSt3__212_GLOBAL__N_112throw_helperISt16invalid_argumentEEvRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i2;
 i2 = HEAP32[3353] | 0;
 HEAP32[i3 >> 2] = (HEAP8[i1 + 11 >> 0] | 0) < 0 ? HEAP32[i1 >> 2] | 0 : i1;
 _fprintf(i2, 72655, i3) | 0;
 _abort();
}

function __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i5;
 HEAP32[i6 >> 2] = i4;
 i4 = ___uselocale(i2) | 0;
 i2 = _vasprintf(i1, i3, i6) | 0;
 if (i4 | 0) ___uselocale(i4) | 0;
 STACKTOP = i5;
 return i2 | 0;
}

function __ZNKSt3__25ctypeIcE10do_toupperEPcPKc(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i1 = i2;
 while (1) {
  if ((i1 | 0) == (i3 | 0)) break;
  i2 = HEAP8[i1 >> 0] | 0;
  if (i2 << 24 >> 24 > -1) {
   i4 = __ZNSt3__25ctypeIcE21__classic_upper_tableEv() | 0;
   i5 = HEAP32[i4 + (HEAP8[i1 >> 0] << 2) >> 2] & 255;
  } else i5 = i2;
  HEAP8[i1 >> 0] = i5;
  i1 = i1 + 1 | 0;
 }
 return i3 | 0;
}

function __ZNKSt3__25ctypeIcE10do_tolowerEPcPKc(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i1 = i2;
 while (1) {
  if ((i1 | 0) == (i3 | 0)) break;
  i2 = HEAP8[i1 >> 0] | 0;
  if (i2 << 24 >> 24 > -1) {
   i4 = __ZNSt3__25ctypeIcE21__classic_lower_tableEv() | 0;
   i5 = HEAP32[i4 + (HEAP8[i1 >> 0] << 2) >> 2] & 255;
  } else i5 = i2;
  HEAP8[i1 >> 0] = i5;
  i1 = i1 + 1 | 0;
 }
 return i3 | 0;
}

function _sbrk(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = HEAP32[DYNAMICTOP_PTR >> 2] | 0;
 i3 = i2 + i1 | 0;
 if ((i1 | 0) > 0 & (i3 | 0) < (i2 | 0) | (i3 | 0) < 0) {
  abortOnCannotGrowMemory() | 0;
  ___setErrNo(12);
  return -1;
 }
 HEAP32[DYNAMICTOP_PTR >> 2] = i3;
 if ((i3 | 0) > (getTotalMemory() | 0)) if (!(enlargeMemory() | 0)) {
  HEAP32[DYNAMICTOP_PTR >> 2] = i2;
  ___setErrNo(12);
  return -1;
 }
 return i2 | 0;
}

function __ZTv0_n12_NSt3__214basic_ifstreamIcNS_11char_traitsIcEEED1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0;
 HEAP32[i2 >> 2] = 3732;
 i1 = i2 + 108 | 0;
 HEAP32[i1 >> 2] = 3752;
 __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev(i2 + 8 | 0);
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev(i2, 3764);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev(i1);
 return;
}

function __ZNSt3__212_GLOBAL__N_112throw_helperISt12out_of_rangeEEvRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i2;
 i2 = HEAP32[3353] | 0;
 HEAP32[i3 >> 2] = (HEAP8[i1 + 11 >> 0] | 0) < 0 ? HEAP32[i1 >> 2] | 0 : i1;
 _fprintf(i2, 72655, i3) | 0;
 _abort();
}

function __ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i5;
 HEAP32[i6 >> 2] = i4;
 i4 = ___uselocale(i2) | 0;
 i2 = _vsscanf(i1, i3, i6) | 0;
 if (i4 | 0) ___uselocale(i4) | 0;
 STACKTOP = i5;
 return i2 | 0;
}

function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endIPS3_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_j(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i4 = i1 + 4 | 0;
 i1 = i3 - i2 | 0;
 if ((i1 | 0) > 0) {
  _memcpy(HEAP32[i4 >> 2] | 0, i2 | 0, i1 | 0) | 0;
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + (i1 >>> 2 << 2);
 }
 return;
}

function __ZNKSt3__25ctypeIwE10do_toupperEPwPKw(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i1 = i2;
 while (1) {
  if ((i1 | 0) == (i3 | 0)) break;
  i2 = HEAP32[i1 >> 2] | 0;
  if (i2 >>> 0 < 128) {
   i4 = __ZNSt3__25ctypeIcE21__classic_upper_tableEv() | 0;
   i5 = HEAP32[i4 + (HEAP32[i1 >> 2] << 2) >> 2] | 0;
  } else i5 = i2;
  HEAP32[i1 >> 2] = i5;
  i1 = i1 + 4 | 0;
 }
 return i3 | 0;
}

function __ZNKSt3__25ctypeIwE10do_tolowerEPwPKw(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i1 = i2;
 while (1) {
  if ((i1 | 0) == (i3 | 0)) break;
  i2 = HEAP32[i1 >> 2] | 0;
  if (i2 >>> 0 < 128) {
   i4 = __ZNSt3__25ctypeIcE21__classic_lower_tableEv() | 0;
   i5 = HEAP32[i4 + (HEAP32[i1 >> 2] << 2) >> 2] | 0;
  } else i5 = i2;
  HEAP32[i1 >> 2] = i5;
  i1 = i1 + 4 | 0;
 }
 return i3 | 0;
}

function __ZN11RenderQueueC2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 HEAP8[i1 + 76 >> 0] = 0;
 i2 = i1 + 80 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 HEAP8[i2 + 12 >> 0] = 0;
 HEAP32[i1 + 100 >> 2] = 0;
 HEAP32[i1 + 104 >> 2] = 0;
 HEAP32[i1 + 96 >> 2] = i1 + 100;
 i2 = i1 + 108 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 HEAP32[i2 + 12 >> 2] = 0;
 return;
}

function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b(i1, HEAP32[i2 + 8 >> 2] | 0, i6) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, i2, i3, i4, i5);
 return;
}

function __ZN7CityMap12getTileValueERK8CityTile(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, f4 = f0;
 i2 = HEAP32[i1 + 72 >> 2] | 0;
 i3 = i2 >>> 1 & 1;
 f4 = Math_fround(Math_fround(((i2 & 4 | 0) == 0 ? i3 + 1 | 0 : i3 | 2) + (i2 >>> 3 & 1) | 0) * Math_fround(.25));
 return Math_fround(Math_fround(Math_fround(Math_fround(1.0) - Math_fround(Math_fround(HEAP32[i1 + 80 >> 2] | 0) / Math_fround(255.0))) * f4) + Math_fround(0.0));
}

function __Z29ImGui_ImplGlfw_ScrollCallbackP10GLFWwindowdd(i1, d2, d3) {
 i1 = i1 | 0;
 d2 = +d2;
 d3 = +d3;
 var f4 = f0, i5 = 0, f6 = f0;
 i1 = __ZN5ImGui5GetIOEv() | 0;
 f4 = Math_fround(d2);
 i5 = i1 + 228 | 0;
 f6 = Math_fround(Math_fround(HEAPF32[i5 >> 2]) + f4);
 HEAPF32[i5 >> 2] = f6;
 f6 = Math_fround(d3);
 i5 = i1 + 224 | 0;
 f4 = Math_fround(Math_fround(HEAPF32[i5 >> 2]) + f6);
 HEAPF32[i5 >> 2] = f4;
 return;
}

function _shl(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = i1 + 4 | 0;
 if (i2 >>> 0 > 31) {
  i4 = HEAP32[i1 >> 2] | 0;
  HEAP32[i3 >> 2] = i4;
  HEAP32[i1 >> 2] = 0;
  i5 = i2 + -32 | 0;
  i6 = 0;
  i7 = i4;
 } else {
  i5 = i2;
  i6 = HEAP32[i1 >> 2] | 0;
  i7 = HEAP32[i3 >> 2] | 0;
 }
 HEAP32[i3 >> 2] = i6 >>> (32 - i5 | 0) | i7 << i5;
 HEAP32[i1 >> 2] = i6 << i5;
 return;
}

function _shr(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = i1 + 4 | 0;
 if (i2 >>> 0 > 31) {
  i4 = HEAP32[i3 >> 2] | 0;
  HEAP32[i1 >> 2] = i4;
  HEAP32[i3 >> 2] = 0;
  i5 = i2 + -32 | 0;
  i6 = 0;
  i7 = i4;
 } else {
  i5 = i2;
  i6 = HEAP32[i3 >> 2] | 0;
  i7 = HEAP32[i1 >> 2] | 0;
 }
 HEAP32[i1 >> 2] = i6 << 32 - i5 | i7 >>> i5;
 HEAP32[i3 >> 2] = i6 >>> i5;
 return;
}

function _getint(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 if (!(_isdigit(HEAP8[HEAP32[i1 >> 2] >> 0] | 0) | 0)) i2 = 0; else {
  i3 = 0;
  while (1) {
   i4 = HEAP32[i1 >> 2] | 0;
   i5 = (i3 * 10 | 0) + -48 + (HEAP8[i4 >> 0] | 0) | 0;
   i6 = i4 + 1 | 0;
   HEAP32[i1 >> 2] = i6;
   if (!(_isdigit(HEAP8[i6 >> 0] | 0) | 0)) {
    i2 = i5;
    break;
   } else i3 = i5;
  }
 }
 return i2 | 0;
}
function _fmt_o(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 if ((i1 | 0) == 0 & (i2 | 0) == 0) i4 = i3; else {
  i5 = i3;
  i3 = i2;
  i2 = i1;
  while (1) {
   i1 = i5 + -1 | 0;
   HEAP8[i1 >> 0] = i2 & 7 | 48;
   i2 = _bitshift64Lshr(i2 | 0, i3 | 0, 3) | 0;
   i3 = tempRet0;
   if ((i2 | 0) == 0 & (i3 | 0) == 0) {
    i4 = i1;
    break;
   } else i5 = i1;
  }
 }
 return i4 | 0;
}

function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 HEAP8[i1 >> 0] = 0;
 HEAP32[i1 + 4 >> 2] = i2;
 i3 = i2 + (HEAP32[(HEAP32[i2 >> 2] | 0) + -12 >> 2] | 0) | 0;
 if (!(HEAP32[i3 + 16 >> 2] | 0)) {
  i2 = HEAP32[i3 + 72 >> 2] | 0;
  if (i2 | 0) __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i2) | 0;
  HEAP8[i1 >> 0] = 1;
 }
 return;
}

function __ZNSt3__28ios_base16__call_callbacksENS0_5eventE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = i1 + 32 | 0;
 i4 = i1 + 36 | 0;
 i5 = HEAP32[i1 + 40 >> 2] | 0;
 while (1) {
  if (!i5) break;
  i6 = i5 + -1 | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[i3 >> 2] | 0) + (i6 << 2) >> 2] & 15](i2, i1, HEAP32[(HEAP32[i4 >> 2] | 0) + (i6 << 2) >> 2] | 0);
  i5 = i6;
 }
 return;
}

function _png_read_filter_row_up(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = HEAP32[i1 + 4 >> 2] | 0;
 if (!i4) return; else {
  i5 = i2;
  i6 = 0;
  i7 = i3;
 }
 while (1) {
  HEAP8[i5 >> 0] = (HEAPU8[i7 >> 0] | 0) + (HEAPU8[i5 >> 0] | 0);
  i6 = i6 + 1 | 0;
  if ((i6 | 0) == (i4 | 0)) break; else {
   i5 = i5 + 1 | 0;
   i7 = i7 + 1 | 0;
  }
 }
 return;
}

function _copysign(d1, d2) {
 d1 = +d1;
 d2 = +d2;
 var i3 = 0, i4 = 0, i5 = 0;
 HEAPF64[tempDoublePtr >> 3] = d1;
 i3 = HEAP32[tempDoublePtr >> 2] | 0;
 i4 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAPF64[tempDoublePtr >> 3] = d2;
 i5 = HEAP32[tempDoublePtr + 4 >> 2] & -2147483648 | i4 & 2147483647;
 HEAP32[tempDoublePtr >> 2] = i3;
 HEAP32[tempDoublePtr + 4 >> 2] = i5;
 return +(+HEAPF64[tempDoublePtr >> 3]);
}

function _twobyte_strstr(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = (HEAPU8[i2 >> 0] | 0) << 8 | (HEAPU8[i2 + 1 >> 0] | 0);
 i2 = HEAPU8[i1 >> 0] | 0;
 i4 = i1;
 while (1) {
  i1 = i4 + 1 | 0;
  i5 = HEAP8[i1 >> 0] | 0;
  if (!(i5 << 24 >> 24)) break;
  i2 = i2 << 8 & 65280 | i5 & 255;
  if ((i2 | 0) == (i3 | 0)) break; else i4 = i1;
 }
 return (i5 << 24 >> 24 ? i4 : 0) | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 if ((i1 | 0) != (i2 | 0)) {
  i3 = HEAP8[i2 + 11 >> 0] | 0;
  i4 = i3 << 24 >> 24 < 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(i1, i4 ? HEAP32[i2 >> 2] | 0 : i2, i4 ? HEAP32[i2 + 4 >> 2] | 0 : i3 & 255) | 0;
 }
 return i1 | 0;
}

function ___muldsi3(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = i1 & 65535;
 i4 = i2 & 65535;
 i5 = Math_imul(i4, i3) | 0;
 i6 = i1 >>> 16;
 i1 = (i5 >>> 16) + (Math_imul(i4, i6) | 0) | 0;
 i4 = i2 >>> 16;
 i2 = Math_imul(i4, i3) | 0;
 return (tempRet0 = (i1 >>> 16) + (Math_imul(i4, i6) | 0) + (((i1 & 65535) + i2 | 0) >>> 16) | 0, i1 + i2 << 16 | i5 & 65535 | 0) | 0;
}

function __ZNSt3__218__libcpp_refstringC2EPKc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = _strlen(i2) | 0;
 i4 = __Znwj(i3 + 13 | 0) | 0;
 HEAP32[i4 >> 2] = i3;
 HEAP32[i4 + 4 >> 2] = i3;
 HEAP32[i4 + 8 >> 2] = 0;
 i5 = __ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE(i4) | 0;
 _memcpy(i5 | 0, i2 | 0, i3 + 1 | 0) | 0;
 HEAP32[i1 >> 2] = i5;
 return;
}

function __ZNKSt3__25ctypeIwE9do_narrowEPKwS3_cPc(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0;
 i1 = (i3 - i2 | 0) >>> 2;
 i6 = i5;
 i5 = i2;
 while (1) {
  if ((i5 | 0) == (i3 | 0)) break;
  i7 = HEAP32[i5 >> 2] | 0;
  HEAP8[i6 >> 0] = i7 >>> 0 < 128 ? i7 & 255 : i4;
  i6 = i6 + 1 | 0;
  i5 = i5 + 4 | 0;
 }
 return i2 + (i1 << 2) | 0;
}

function _png_chunk_benign_error(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224);
 i4 = i3;
 if (!(HEAP32[i1 + 212 >> 2] & 1048576)) _png_chunk_error(i1, i2); else {
  _png_format_buffer(HEAP32[i1 + 376 >> 2] | 0, i4, i2);
  _png_warning(i1, i4);
  STACKTOP = i3;
  return;
 }
}

function __ZNSt3__26locale14__install_ctorERKS0_PNS0_5facetEl(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 if (!i3) i5 = HEAP32[i2 >> 2] | 0; else {
  i6 = __Znwj(160) | 0;
  __ZNSt3__26locale5__impC2ERKS1_PNS0_5facetEl(i6, HEAP32[i2 >> 2] | 0, i3, i4);
  i5 = i6;
 }
 HEAP32[i1 >> 2] = i5;
 __ZNSt3__214__shared_count12__add_sharedEv(i5);
 return;
}

function __ZNSt3__28numpunctIwEC2Ej(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 4 >> 2] = i2 + -1;
 HEAP32[i1 >> 2] = 20740;
 HEAP32[i1 + 8 >> 2] = 46;
 HEAP32[i1 + 12 >> 2] = 44;
 i2 = i1 + 16 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i2 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 return;
}

function __ZNSt3__211__stdoutbufIwE5imbueERKNS_6localeE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 127](i1) | 0;
 i3 = __ZNKSt3__26locale9use_facetERNS0_2idE(i2, 5846988) | 0;
 HEAP32[i1 + 36 >> 2] = i3;
 i2 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] & 127](i3) | 0) & 1;
 HEAP8[i1 + 44 >> 0] = i2;
 return;
}

function __ZNSt3__211__stdoutbufIcE5imbueERKNS_6localeE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 127](i1) | 0;
 i3 = __ZNKSt3__26locale9use_facetERNS0_2idE(i2, 5846980) | 0;
 HEAP32[i1 + 36 >> 2] = i3;
 i2 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] & 127](i3) | 0) & 1;
 HEAP8[i1 + 44 >> 0] = i2;
 return;
}

function _png_chunk_warning(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224);
 i4 = i3;
 if (!i1) {
  _png_warning(0, i2);
  STACKTOP = i3;
  return;
 } else {
  _png_format_buffer(HEAP32[i1 + 376 >> 2] | 0, i4, i2);
  _png_warning(i1, i4);
  STACKTOP = i3;
  return;
 }
}

function __ZNSt3__28numpunctIcEC2Ej(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 4 >> 2] = i2 + -1;
 HEAP32[i1 >> 2] = 20700;
 HEAP8[i1 + 8 >> 0] = 46;
 HEAP8[i1 + 9 >> 0] = 44;
 i2 = i1 + 12 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i2 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 return;
}

function _calloc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 if (!i1) i3 = 0; else {
  i4 = Math_imul(i2, i1) | 0;
  if ((i2 | i1) >>> 0 > 65535) i3 = ((i4 >>> 0) / (i1 >>> 0) | 0 | 0) == (i2 | 0) ? i4 : -1; else i3 = i4;
 }
 i4 = _malloc(i3) | 0;
 if (!i4) return i4 | 0;
 if (!(HEAP32[i4 + -4 >> 2] & 3)) return i4 | 0;
 _memset(i4 | 0, 0, i3 | 0) | 0;
 return i4 | 0;
}

function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b(i1, HEAP32[i2 + 8 >> 2] | 0, 0) | 0) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, i2, i3, i4);
 return;
}

function _memmove(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 if ((i2 | 0) < (i1 | 0) & (i1 | 0) < (i2 + i3 | 0)) {
  i4 = i1;
  i2 = i2 + i3 | 0;
  i1 = i1 + i3 | 0;
  while ((i3 | 0) > 0) {
   i1 = i1 - 1 | 0;
   i2 = i2 - 1 | 0;
   i3 = i3 - 1 | 0;
   HEAP8[i1 >> 0] = HEAP8[i2 >> 0] | 0;
  }
  i1 = i4;
 } else _memcpy(i1, i2, i3) | 0;
 return i1 | 0;
}

function __ZSt9terminatev() {
 var i1 = 0, i2 = 0;
 i1 = ___cxa_get_globals_fast() | 0;
 if (i1 | 0) {
  i2 = HEAP32[i1 >> 2] | 0;
  if (i2 | 0) {
   i1 = i2 + 48 | 0;
   if ((HEAP32[i1 >> 2] & -256 | 0) == 1126902528 ? (HEAP32[i1 + 4 >> 2] | 0) == 1129074247 : 0) __ZSt11__terminatePFvvE(HEAP32[i2 + 12 >> 2] | 0);
  }
 }
 __ZSt11__terminatePFvvE(__ZSt13get_terminatev() | 0);
}

function _write(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i5 + 8 >> 2] = i3;
 i3 = ___syscall_ret(___syscall4(4, i5 | 0) | 0) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function __ZNSt3__218__libcpp_refstringD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 if (__ZNKSt3__218__libcpp_refstring15__uses_refcountEv(i1) | 0) {
  i2 = __ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_1994(HEAP32[i1 >> 2] | 0) | 0;
  i1 = i2 + 8 | 0;
  i3 = HEAP32[i1 >> 2] | 0;
  HEAP32[i1 >> 2] = i3 + -1;
  if ((i3 + -1 | 0) < 0) __ZdlPv(i2);
 }
 return;
}

function _read(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i5 + 8 >> 2] = i3;
 i3 = ___syscall_ret(___syscall3(3, i5 | 0) | 0) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function ___uflow(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i2;
 if (!(___toread(i1) | 0)) if ((FUNCTION_TABLE_iiii[HEAP32[i1 + 32 >> 2] & 31](i1, i3, 1) | 0) == 1) i4 = HEAPU8[i3 >> 0] | 0; else i4 = -1; else i4 = -1;
 STACKTOP = i2;
 return i4 | 0;
}

function __ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 HEAP32[i1 >> 2] = 3732;
 i2 = i1 + 108 | 0;
 HEAP32[i2 >> 2] = 3752;
 __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev(i1 + 8 | 0);
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev(i1, 3764);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev(i2);
 __ZdlPv(i1);
 return;
}

function _png_malloc_warn(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 if (!i1) {
  i3 = 0;
  return i3 | 0;
 }
 if (i2 | 0) {
  i4 = HEAP32[i1 + 720 >> 2] | 0;
  if (!i4) i5 = _malloc(i2) | 0; else i5 = FUNCTION_TABLE_iii[i4 & 31](i1, i2) | 0;
  if (i5 | 0) {
   i3 = i5;
   return i3 | 0;
  }
 }
 _png_warning(i1, 59106);
 i3 = 0;
 return i3 | 0;
}

function _png_calloc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 if (!i1) {
  i3 = 0;
  return i3 | 0;
 }
 if (!i2) _png_error(i1, 59106);
 i4 = HEAP32[i1 + 720 >> 2] | 0;
 if (!i4) i5 = _malloc(i2) | 0; else i5 = FUNCTION_TABLE_iii[i4 & 31](i1, i2) | 0;
 if (!i5) _png_error(i1, 59106);
 _memset(i5 | 0, 0, i2 | 0) | 0;
 i3 = i5;
 return i3 | 0;
}

function ___tandf(d1, i2) {
 d1 = +d1;
 i2 = i2 | 0;
 var d3 = 0.0, d4 = 0.0, d5 = 0.0, d6 = 0.0;
 d3 = d1 * d1;
 d4 = d3 * d3;
 d5 = d3 * d1;
 d6 = d5 * (d3 * .13339200271297674 + .3333313950307914) + d1 + d5 * d4 * (d3 * .024528318116654728 + .05338123784456704 + d4 * (d3 * .009465647849436732 + .002974357433599673));
 return Math_fround(i2 | 0 ? -1.0 / d6 : d6);
}

function ___unlist_locked_file(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 if (HEAP32[i1 + 68 >> 2] | 0) {
  i2 = HEAP32[i1 + 116 >> 2] | 0;
  i3 = i1 + 112 | 0;
  if (i2 | 0) HEAP32[i2 + 112 >> 2] = HEAP32[i3 >> 2];
  i1 = HEAP32[i3 >> 2] | 0;
  if (!i1) i4 = (___pthread_self_679() | 0) + 232 | 0; else i4 = i1 + 116 | 0;
  HEAP32[i4 >> 2] = i2;
 }
 return;
}

function __ZN7CityMap14checkRoadTilesEii(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 __ZN7CityMap13checkRoadTileEii(i1, i2, i3);
 __ZN7CityMap13checkRoadTileEii(i1, i2, i3 + 1 | 0);
 __ZN7CityMap13checkRoadTileEii(i1, i2, i3 + -1 | 0);
 __ZN7CityMap13checkRoadTileEii(i1, i2 + -1 | 0, i3);
 __ZN7CityMap13checkRoadTileEii(i1, i2 + 1 | 0, i3);
 return;
}

function __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = i1 + 8 | 0;
 i1 = i2;
 i2 = HEAP32[i3 >> 2] | 0;
 do {
  HEAP32[i2 >> 2] = 0;
  i2 = (HEAP32[i3 >> 2] | 0) + 4 | 0;
  HEAP32[i3 >> 2] = i2;
  i1 = i1 + -1 | 0;
 } while ((i1 | 0) != 0);
 return;
}

function _png_malloc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 if (!i1) {
  i3 = 0;
  return i3 | 0;
 }
 if (!i2) _png_error(i1, 59106);
 i4 = HEAP32[i1 + 720 >> 2] | 0;
 if (!i4) i5 = _malloc(i2) | 0; else i5 = FUNCTION_TABLE_iii[i4 & 31](i1, i2) | 0;
 if (!i5) _png_error(i1, 59106); else {
  i3 = i5;
  return i3 | 0;
 }
 return 0;
}

function __ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 HEAP32[i1 >> 2] = 3732;
 i2 = i1 + 108 | 0;
 HEAP32[i2 >> 2] = 3752;
 __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev(i1 + 8 | 0);
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev(i1, 3764);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev(i2);
 return;
}

function __ZNSt3__212_GLOBAL__N_110as_integerIiNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEET_RKS7_RKT0_Pji(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return __ZNSt3__212_GLOBAL__N_117as_integer_helperIlNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFlPKcPPciEEET_RKS7_RKT0_PjiT1_(i1, i2, i3, i4) | 0;
}

function __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0;
 i5 = i3 + 8 | 0;
 FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 15](i1, i2, HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, 0, i4);
 return;
}

function _close(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i2;
 i4 = _dummy_169(i1) | 0;
 HEAP32[i3 >> 2] = i4;
 i4 = ___syscall6(6, i3 | 0) | 0;
 i3 = ___syscall_ret((i4 | 0) == -4 ? 0 : i4) | 0;
 STACKTOP = i2;
 return i3 | 0;
}

function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = i1 + 4 | 0;
 i1 = i2;
 i2 = HEAP32[i3 >> 2] | 0;
 do {
  HEAP32[i2 >> 2] = 0;
  i2 = (HEAP32[i3 >> 2] | 0) + 4 | 0;
  HEAP32[i3 >> 2] = i2;
  i1 = i1 + -1 | 0;
 } while ((i1 | 0) != 0);
 return;
}

function ___stdio_close(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i2;
 i4 = _dummy_169(HEAP32[i1 + 60 >> 2] | 0) | 0;
 HEAP32[i3 >> 2] = i4;
 i4 = ___syscall_ret(___syscall6(6, i3 | 0) | 0) | 0;
 STACKTOP = i2;
 return i4 | 0;
}

function ___fseeko(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 if ((HEAP32[i1 + 76 >> 2] | 0) > -1) {
  i4 = (___lockfile(i1) | 0) == 0;
  i5 = ___fseeko_unlocked(i1, i2, i3) | 0;
  if (i4) i6 = i5; else {
   ___unlockfile(i1);
   i6 = i5;
  }
 } else i6 = ___fseeko_unlocked(i1, i2, i3) | 0;
 return i6 | 0;
}

function _png_sig_cmp(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 if (i3 >>> 0 > 8) i4 = 8; else if (!i3) {
  i5 = -1;
  return i5 | 0;
 } else i4 = i3;
 if (i2 >>> 0 > 7) {
  i5 = -1;
  return i5 | 0;
 }
 i5 = _memcmp(i1 + i2 | 0, 64372 + i2 | 0, (i4 + i2 | 0) >>> 0 > 8 ? 8 - i2 | 0 : i4) | 0;
 return i5 | 0;
}

function ___cxa_get_globals_fast() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 if (!(_pthread_once(5847104, 3) | 0)) {
  i2 = _pthread_getspecific(HEAP32[1461777] | 0) | 0;
  STACKTOP = i1;
  return i2 | 0;
 } else _abort_message(72949, i1);
 return 0;
}

function __ZNKSt3__25ctypeIcE9do_narrowEPKcS3_cPc(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i5;
 i5 = i2;
 while (1) {
  if ((i5 | 0) == (i3 | 0)) break;
  i2 = HEAP8[i5 >> 0] | 0;
  HEAP8[i1 >> 0] = i2 << 24 >> 24 > -1 ? i2 : i4;
  i1 = i1 + 1 | 0;
  i5 = i5 + 1 | 0;
 }
 return i3 | 0;
}

function _png_image_error(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _png_safecat(i1 + 32 | 0, 64, 0, i2) | 0;
 i2 = i1 + 28 | 0;
 HEAP32[i2 >> 2] = HEAP32[i2 >> 2] | 2;
 if (!i1) return 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (!i2) return 0;
 if (HEAP32[i2 + 8 >> 2] | 0) return 0;
 _png_safe_execute(i1, 68, i1) | 0;
 HEAP32[i1 >> 2] = 0;
 return 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 HEAP32[i1 >> 2] = 17732;
 __ZNSt3__26localeC2Ev(i1 + 4 | 0);
 i2 = i1 + 8 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 HEAP32[i2 + 12 >> 2] = 0;
 HEAP32[i2 + 16 >> 2] = 0;
 HEAP32[i2 + 20 >> 2] = 0;
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 HEAP32[i1 >> 2] = 17668;
 __ZNSt3__26localeC2Ev(i1 + 4 | 0);
 i2 = i1 + 8 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 HEAP32[i2 + 12 >> 2] = 0;
 HEAP32[i2 + 16 >> 2] = 0;
 HEAP32[i2 + 20 >> 2] = 0;
 return;
}

function __ZN15ImGuiTextBuffer7appendfEPKcz(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4;
 HEAP32[i5 >> 2] = i3;
 __ZN15ImGuiTextBuffer8appendfvEPKcPi(i1, i2, i5);
 STACKTOP = i4;
 return;
}

function __ZNSt3__25ctypeIcEC2EPKtbj(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 HEAP32[i1 + 4 >> 2] = i4 + -1;
 HEAP32[i1 >> 2] = 20648;
 i4 = i1 + 8 | 0;
 HEAP32[i4 >> 2] = i2;
 HEAP8[i1 + 12 >> 0] = i3 & 1;
 if (!i2) {
  i2 = __ZNSt3__25ctypeIcE13classic_tableEv() | 0;
  HEAP32[i4 >> 2] = i2;
 }
 return;
}

function __ZNKSt3__212_GLOBAL__N_111__fake_bindclEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = HEAP32[i1 + 4 >> 2] | 0;
 i3 = HEAP32[i1 + 8 >> 2] | 0;
 i4 = (HEAP32[i1 >> 2] | 0) + (i3 >> 1) | 0;
 if (!(i3 & 1)) i5 = i2; else i5 = HEAP32[(HEAP32[i4 >> 2] | 0) + i2 >> 2] | 0;
 FUNCTION_TABLE_vi[i5 & 255](i4);
 return;
}

function __ZN9MenuBuild11drawLoadingEii(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i1;
 HEAP32[i4 >> 2] = i2;
 HEAP32[i4 + 4 >> 2] = i3;
 __ZN5ImGui4TextEPKcz(26265, i4);
 STACKTOP = i1;
 return;
}

function __ZN12RenderSystem14enableVertexUVEi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 if ((HEAP32[i1 + 40 >> 2] | 0) == (i2 | 0)) {
  i2 = i1 + 104 | 0;
  _glEnableVertexAttribArray(HEAP32[i2 >> 2] | 0);
  i3 = 1;
  i4 = HEAP32[i2 >> 2] | 0;
 } else {
  i3 = 0;
  i4 = 0;
 }
 HEAP32[i1 + 76 >> 2] = i4;
 return i3 | 0;
}

function _png_zalloc(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 if (!i1) {
  i4 = 0;
  return i4 | 0;
 }
 if ((4294967295 / (i3 >>> 0) | 0) >>> 0 > i2 >>> 0) {
  i4 = _png_malloc_warn(i1, Math_imul(i3, i2) | 0) | 0;
  return i4 | 0;
 } else {
  _png_warning(i1, 60485);
  i4 = 0;
  return i4 | 0;
 }
 return 0;
}

function ___munmap(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i4 + 4 >> 2] = i2;
 i2 = ___syscall_ret(___syscall91(91, i4 | 0) | 0) | 0;
 STACKTOP = i3;
 return i2 | 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i6 = i1;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i6 + 4 >> 2] = 0;
 i6 = i1 + 8 | 0;
 HEAP32[i6 >> 2] = -1;
 HEAP32[i6 + 4 >> 2] = -1;
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i6 = i1;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i6 + 4 >> 2] = 0;
 i6 = i1 + 8 | 0;
 HEAP32[i6 >> 2] = -1;
 HEAP32[i6 + 4 >> 2] = -1;
 return;
}

function _stat(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i4 + 4 >> 2] = i2;
 i2 = ___syscall_ret(___syscall195(195, i4 | 0) | 0) | 0;
 STACKTOP = i3;
 return i2 | 0;
}

function __Z22ImGui_ImplOpenGL3_InitPKc(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = (i1 | 0) == 0 ? 56185 : i1;
 if ((_strlen(i2) | 0) < 30) {
  _strcpy(5847255, i2) | 0;
  i2 = 5847255 + (_strlen(5847255) | 0) | 0;
  HEAP8[i2 >> 0] = 10;
  HEAP8[i2 + 1 >> 0] = 0;
  return 1;
 } else ___assert_fail(56187, 56273, 54, 56347);
 return 0;
}

function _sn_write(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i4 = i1 + 20 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 i6 = (HEAP32[i1 + 16 >> 2] | 0) - i5 | 0;
 i1 = i6 >>> 0 > i3 >>> 0 ? i3 : i6;
 _memcpy(i5 | 0, i2 | 0, i1 | 0) | 0;
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + i1;
 return i3 | 0;
}

function __ZN5ImGui13CreateContextEP11ImFontAtlas(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
 i2 = __ZL13MallocWrapperjPv(14696, 0) | 0;
 __ZN12ImGuiContextC2EP11ImFontAtlas(i2, i1);
 if (!(HEAP32[1460598] | 0)) HEAP32[1460598] = i2;
 __ZN5ImGui10InitializeEP12ImGuiContext(i2);
 return i2 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 _free(i1);
 if (!(_pthread_setspecific(HEAP32[1461777] | 0, 0) | 0)) {
  STACKTOP = i2;
  return;
 } else _abort_message(73048, i2);
}

function __ZNKSt3__27collateIwE7do_hashEPKwS3_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i1 = 0;
 i4 = i2;
 while (1) {
  if ((i4 | 0) == (i3 | 0)) break;
  i2 = (HEAP32[i4 >> 2] | 0) + (i1 << 4) | 0;
  i5 = i2 & -268435456;
  i1 = (i5 >>> 24 | i5) ^ i2;
  i4 = i4 + 4 | 0;
 }
 return i1 | 0;
}

function _snprintf(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i5;
 HEAP32[i6 >> 2] = i4;
 i4 = _vsnprintf(i1, i2, i3, i6) | 0;
 STACKTOP = i5;
 return i4 | 0;
}

function __ZNKSt3__27collateIcE7do_hashEPKcS3_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i1 = 0;
 i4 = i2;
 while (1) {
  if ((i4 | 0) == (i3 | 0)) break;
  i2 = (i1 << 4) + (HEAP8[i4 >> 0] | 0) | 0;
  i5 = i2 & -268435456;
  i1 = (i5 >>> 24 | i5) ^ i2;
  i4 = i4 + 1 | 0;
 }
 return i1 | 0;
}

function _png_chunk_error(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224);
 i4 = i3;
 if (!i1) _png_error(0, i2); else {
  _png_format_buffer(HEAP32[i1 + 376 >> 2] | 0, i4, i2);
  _png_error(i1, i4);
 }
}

function _png_set_tRNS_to_alpha(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 if (!i1) return;
 i2 = i1 + 212 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if (!(i3 & 64)) {
  HEAP32[i2 >> 2] = i3 | 16384;
  i3 = i1 + 216 | 0;
  HEAP32[i3 >> 2] = HEAP32[i3 >> 2] | 33558528;
  return;
 } else {
  _png_app_error(i1, 58866);
  return;
 }
}

function __ZNSt3__28ios_baseD2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 17652;
 __ZNSt3__28ios_base16__call_callbacksENS0_5eventE(i1, 0);
 __ZNSt3__26localeD2Ev(i1 + 28 | 0);
 _free(HEAP32[i1 + 32 >> 2] | 0);
 _free(HEAP32[i1 + 36 >> 2] | 0);
 _free(HEAP32[i1 + 48 >> 2] | 0);
 _free(HEAP32[i1 + 60 >> 2] | 0);
 return;
}

function _png_handle_IEND(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 i2 = i1 + 208 | 0;
 i4 = HEAP32[i2 >> 2] | 0;
 if ((i4 & 5 | 0) != 5) _png_chunk_error(i1, 61181);
 HEAP32[i2 >> 2] = i4 | 24;
 _png_crc_finish(i1, i3) | 0;
 if (!i3) return;
 _png_chunk_benign_error(i1, 61194);
 return;
}

function _png_set_strip_alpha(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 if (!i1) return;
 i2 = i1 + 212 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if (!(i3 & 64)) {
  HEAP32[i2 >> 2] = i3 | 16384;
  i3 = i1 + 216 | 0;
  HEAP32[i3 >> 2] = HEAP32[i3 >> 2] | 262144;
  return;
 } else {
  _png_app_error(i1, 58866);
  return;
 }
}

function _png_set_expand_16(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 if (!i1) return;
 i2 = i1 + 212 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if (!(i3 & 64)) {
  HEAP32[i2 >> 2] = i3 | 16384;
  i3 = i1 + 216 | 0;
  HEAP32[i3 >> 2] = HEAP32[i3 >> 2] | 33559040;
  return;
 } else {
  _png_app_error(i1, 58866);
  return;
 }
}

function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 if ((HEAP32[i2 + 4 >> 2] | 0) == (i3 | 0)) {
  i3 = i2 + 28 | 0;
  if ((HEAP32[i3 >> 2] | 0) != 1) HEAP32[i3 >> 2] = i4;
 }
 return;
}

function _png_set_scale_16(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 if (!i1) return;
 i2 = i1 + 212 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if (!(i3 & 64)) {
  HEAP32[i2 >> 2] = i3 | 16384;
  i3 = i1 + 216 | 0;
  HEAP32[i3 >> 2] = HEAP32[i3 >> 2] | 67108864;
  return;
 } else {
  _png_app_error(i1, 58866);
  return;
 }
}

function _png_set_gray_to_rgb(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 if (!i1) return;
 i2 = i1 + 212 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if (!(i3 & 64)) {
  HEAP32[i2 >> 2] = i3 | 16384;
  i3 = i1 + 216 | 0;
  HEAP32[i3 >> 2] = HEAP32[i3 >> 2] | 20480;
  return;
 } else {
  _png_app_error(i1, 58866);
  return;
 }
}

function _png_set_pHYs(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 if ((i1 | 0) == 0 | (i2 | 0) == 0) return;
 HEAP32[i2 + 192 >> 2] = i3;
 HEAP32[i2 + 196 >> 2] = i4;
 HEAP8[i2 + 200 >> 0] = i5;
 i5 = i2 + 8 | 0;
 HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 128;
 return;
}

function _png_set_oFFs(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 if ((i1 | 0) == 0 | (i2 | 0) == 0) return;
 HEAP32[i2 + 180 >> 2] = i3;
 HEAP32[i2 + 184 >> 2] = i4;
 HEAP8[i2 + 188 >> 0] = i5;
 i5 = i2 + 8 | 0;
 HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 256;
 return;
}

function ___shlim(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 HEAP32[i1 + 104 >> 2] = i2;
 i3 = HEAP32[i1 + 8 >> 2] | 0;
 i4 = HEAP32[i1 + 4 >> 2] | 0;
 i5 = i3 - i4 | 0;
 HEAP32[i1 + 108 >> 2] = i5;
 HEAP32[i1 + 100 >> 2] = (i2 | 0) != 0 & (i5 | 0) > (i2 | 0) ? i4 + i2 | 0 : i3;
 return;
}

function __ZNKSt3__27codecvtIwc11__mbstate_tE13do_max_lengthEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = HEAP32[i1 + 8 >> 2] | 0;
 if (!i2) i3 = 1; else {
  i1 = ___uselocale(i2) | 0;
  i2 = ___ctype_get_mb_cur_max() | 0;
  if (!i1) i3 = i2; else {
   ___uselocale(i1) | 0;
   i3 = i2;
  }
 }
 return i3 | 0;
}

function _png_set_expand(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 if (!i1) return;
 i2 = i1 + 212 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if (!(i3 & 64)) {
  HEAP32[i2 >> 2] = i3 | 16384;
  i3 = i1 + 216 | 0;
  HEAP32[i3 >> 2] = HEAP32[i3 >> 2] | 33558528;
  return;
 } else {
  _png_app_error(i1, 58866);
  return;
 }
}

function _abort_message(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i3;
 HEAP32[i4 >> 2] = i2;
 i2 = HEAP32[3353] | 0;
 _vfprintf(i2, i1, i4) | 0;
 _fputc(10, i2) | 0;
 _abort();
}

function _png_set_read_fn(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if (!i1) return;
 HEAP32[i1 + 188 >> 2] = i2;
 HEAP32[i1 + 184 >> 2] = i3 | 0 ? i3 : 3;
 i3 = i1 + 180 | 0;
 if (HEAP32[i3 >> 2] | 0) {
  HEAP32[i3 >> 2] = 0;
  _png_warning(i1, 60417);
 }
 HEAP32[i1 + 472 >> 2] = 0;
 return;
}

function _png_reciprocal2(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var d3 = 0.0, i4 = 0;
 if ((i1 | 0) != 0 & (i2 | 0) != 0) {
  d3 = +Math_floor(+(1.0e15 / +(i1 | 0) / +(i2 | 0) + .5));
  if (!(!(d3 >= -2147483648.0) | !(d3 <= 2147483647.0))) {
   i4 = ~~d3;
   return i4 | 0;
  }
 }
 i4 = 0;
 return i4 | 0;
}

function __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 HEAP32[i1 >> 2] = 3492;
 i2 = i1 + 32 | 0;
 if ((HEAP8[i2 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[i2 >> 2] | 0);
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZN7CityMap7getTileEjj(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 if ((HEAP32[i1 >> 2] | 0) >>> 0 > i2 >>> 0) if ((HEAP32[i1 + 4 >> 2] | 0) >>> 0 > i3 >>> 0) {
  i4 = i1 + 128 + (i2 * 22528 | 0) + (i3 * 88 | 0) | 0;
  return i4 | 0;
 }
 i4 = i1 + 40 | 0;
 return i4 | 0;
}

function __ZN5ImGui11TextWrappedEPKcz(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i3;
 HEAP32[i4 >> 2] = i2;
 __ZN5ImGui12TextWrappedVEPKcPi(i1, i4);
 STACKTOP = i3;
 return;
}

function _png_malloc_base(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 if (!i2) {
  i3 = 0;
  return i3 | 0;
 }
 if (i1 | 0) {
  i4 = HEAP32[i1 + 720 >> 2] | 0;
  if (i4 | 0) {
   i3 = FUNCTION_TABLE_iii[i4 & 31](i1, i2) | 0;
   return i3 | 0;
  }
 }
 i3 = _malloc(i2) | 0;
 return i3 | 0;
}

function _png_gamma_16bit_correct(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 if ((i1 + -1 | 0) >>> 0 < 65534) {
  i3 = ~~+Math_floor(+(+Math_pow(+(+(i1 | 0) / 65535.0), +(+(i2 | 0) * 1.0e-05)) * 65535.0 + .5)) & 65535;
  return i3 | 0;
 } else {
  i3 = i1 & 65535;
  return i3 | 0;
 }
 return 0;
}

function __ZN5ImGui10SetTooltipEPKcz(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i3;
 HEAP32[i4 >> 2] = i2;
 __ZN5ImGui11SetTooltipVEPKcPi(i1, i4);
 STACKTOP = i3;
 return;
}

function _wmemcpy(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 if (i3 | 0) {
  i4 = i3;
  i3 = i2;
  i2 = i1;
  while (1) {
   i4 = i4 + -1 | 0;
   HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
   if (!i4) break; else {
    i3 = i3 + 4 | 0;
    i2 = i2 + 4 | 0;
   }
  }
 }
 return i1 | 0;
}

function _sprintf(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4;
 HEAP32[i5 >> 2] = i3;
 i3 = _vsprintf(i1, i2, i5) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function _fprintf(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4;
 HEAP32[i5 >> 2] = i3;
 i3 = _vfprintf(i1, i2, i5) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function __ZN11RenderQueue10setDiffuseEN3glm3vecILi3EfLNS0_9qualifierE0EEE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 HEAP8[i1 + 76 >> 0] = 1;
 i3 = i1 + 64 | 0;
 HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 return;
}

function ___uremdi3(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5 | 0;
 ___udivmoddi4(i1, i2, i3, i4, i6) | 0;
 STACKTOP = i5;
 return (tempRet0 = HEAP32[i6 + 4 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i4 = i1;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 i4 = i1 + 8 | 0;
 HEAP32[i4 >> 2] = -1;
 HEAP32[i4 + 4 >> 2] = -1;
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i4 = i1;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 i4 = i1 + 8 | 0;
 HEAP32[i4 >> 2] = -1;
 HEAP32[i4 + 4 >> 2] = -1;
 return;
}

function dynCall_iiiiiiiii(i1, i2, i3, i4, i5, i6, i7, i8, i9) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 return FUNCTION_TABLE_iiiiiiiii[i1 & 15](i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0, i7 | 0, i8 | 0, i9 | 0) | 0;
}

function _sscanf(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4;
 HEAP32[i5 >> 2] = i3;
 i3 = _vsscanf(i1, i2, i5) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function __ZN11MeshManagerC2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 >> 2] = i1 + 4;
 i2 = i1 + 12 | 0;
 i3 = i2 + 36 | 0;
 do {
  HEAP32[i2 >> 2] = 0;
  i2 = i2 + 4 | 0;
 } while ((i2 | 0) < (i3 | 0));
 HEAP32[1460545] = i1;
 return;
}

function __ZNKSt3__28messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i3 = _catopen((HEAP8[i2 + 11 >> 0] | 0) < 0 ? HEAP32[i2 >> 2] | 0 : i2, 1) | 0;
 return i3 >>> ((i3 | 0) != (-1 | 0) & 1) | 0;
}

function __ZNKSt3__28messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i3 = _catopen((HEAP8[i2 + 11 >> 0] | 0) < 0 ? HEAP32[i2 >> 2] | 0 : i2, 1) | 0;
 return i3 >>> ((i3 | 0) != (-1 | 0) & 1) | 0;
}

function _testSetjmp(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 while ((i4 | 0) < (i3 | 0)) {
  i5 = HEAP32[i2 + (i4 << 3) >> 2] | 0;
  if (!i5) break;
  if ((i5 | 0) == (i1 | 0)) return HEAP32[i2 + ((i4 << 3) + 4) >> 2] | 0;
  i4 = i4 + 1 | 0;
 }
 return 0;
}

function _png_gamma_8bit_correct(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 if ((i1 + -1 | 0) >>> 0 < 254) {
  i3 = ~~+Math_floor(+(+Math_pow(+(+(i1 | 0) / 255.0), +(+(i2 | 0) * 1.0e-05)) * 255.0 + .5)) & 255;
  return i3 | 0;
 } else {
  i3 = i1 & 255;
  return i3 | 0;
 }
 return 0;
}

function __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 HEAP32[i1 >> 2] = 3492;
 i2 = i1 + 32 | 0;
 if ((HEAP8[i2 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[i2 >> 2] | 0);
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev(i1);
 return;
}

function __ZNSt3__212_GLOBAL__N_111__fake_bindC2EMNS_6locale2idEFvvEPS3_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = HEAP32[i2 >> 2] | 0;
 i5 = HEAP32[i2 + 4 >> 2] | 0;
 HEAP32[i1 >> 2] = i3;
 HEAP32[i1 + 4 >> 2] = i4;
 HEAP32[i1 + 8 >> 2] = i5;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var i1 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 if (!(_pthread_key_create(5847108, 132) | 0)) {
  STACKTOP = i1;
  return;
 } else _abort_message(72998, i1);
}

function _png_destroy_info_struct(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 if ((i1 | 0) == 0 | (i2 | 0) == 0) return;
 i3 = HEAP32[i2 >> 2] | 0;
 if (!i3) return;
 HEAP32[i2 >> 2] = 0;
 _png_free_data(i1, i3, 32767, -1);
 _memset(i3 | 0, 0, 268) | 0;
 _png_free(i1, i3);
 return;
}

function __Znwj(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = (i1 | 0) == 0 ? 1 : i1;
 while (1) {
  i1 = _malloc(i2) | 0;
  if (i1 | 0) {
   i3 = i1;
   break;
  }
  i1 = __ZSt15get_new_handlerv() | 0;
  if (!i1) {
   i3 = 0;
   break;
  }
  FUNCTION_TABLE_v[i1 & 3]();
 }
 return i3 | 0;
}

function __ZN15CityMapRendererC2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 __ZN11RenderQueueC2Ev(i1);
 __ZN11RenderQueueC2Ev(i1 + 124 | 0);
 i2 = i1 + 248 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 HEAP32[i2 + 12 >> 2] = 0;
 HEAP32[i2 + 16 >> 2] = 0;
 return;
}

function __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 switch (HEAP32[i1 + 4 >> 2] & 74) {
 case 64:
  {
   i2 = 8;
   break;
  }
 case 8:
  {
   i2 = 16;
   break;
  }
 case 0:
  {
   i2 = 0;
   break;
  }
 default:
  i2 = 10;
 }
 return i2 | 0;
}

function __ZNKSt3__210moneypunctIwLb1EE16do_positive_signEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 i2 = 0;
 while (1) {
  if ((i2 | 0) == 3) break;
  HEAP32[i1 + (i2 << 2) >> 2] = 0;
  i2 = i2 + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIwLb0EE16do_positive_signEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 i2 = 0;
 while (1) {
  if ((i2 | 0) == 3) break;
  HEAP32[i1 + (i2 << 2) >> 2] = 0;
  i2 = i2 + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIcLb1EE16do_positive_signEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 i2 = 0;
 while (1) {
  if ((i2 | 0) == 3) break;
  HEAP32[i1 + (i2 << 2) >> 2] = 0;
  i2 = i2 + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIcLb0EE16do_positive_signEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 i2 = 0;
 while (1) {
  if ((i2 | 0) == 3) break;
  HEAP32[i1 + (i2 << 2) >> 2] = 0;
  i2 = i2 + 1 | 0;
 }
 return;
}

function __ZNKSt3__25ctypeIcE8do_widenEPKcS3_Pc(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i4;
 i4 = i2;
 while (1) {
  if ((i4 | 0) == (i3 | 0)) break;
  HEAP8[i1 >> 0] = HEAP8[i4 >> 0] | 0;
  i1 = i1 + 1 | 0;
  i4 = i4 + 1 | 0;
 }
 return i3 | 0;
}

function __ZNKSt3__210moneypunctIwLb1EE14do_curr_symbolEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 i2 = 0;
 while (1) {
  if ((i2 | 0) == 3) break;
  HEAP32[i1 + (i2 << 2) >> 2] = 0;
  i2 = i2 + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIwLb0EE14do_curr_symbolEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 i2 = 0;
 while (1) {
  if ((i2 | 0) == 3) break;
  HEAP32[i1 + (i2 << 2) >> 2] = 0;
  i2 = i2 + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIcLb1EE14do_curr_symbolEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 i2 = 0;
 while (1) {
  if ((i2 | 0) == 3) break;
  HEAP32[i1 + (i2 << 2) >> 2] = 0;
  i2 = i2 + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIcLb0EE14do_curr_symbolEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 i2 = 0;
 while (1) {
  if ((i2 | 0) == 3) break;
  HEAP32[i1 + (i2 << 2) >> 2] = 0;
  i2 = i2 + 1 | 0;
 }
 return;
}

function __ZNSt3__27codecvtIwc11__mbstate_tED2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 HEAP32[i1 >> 2] = 20580;
 i2 = i1 + 8 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if ((i3 | 0) != (__ZNSt3__26__clocEv() | 0)) _freelocale(HEAP32[i2 >> 2] | 0);
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNKSt3__25ctypeIwE8do_widenEPKcS3_Pw(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i4;
 i4 = i2;
 while (1) {
  if ((i4 | 0) == (i3 | 0)) break;
  HEAP32[i1 >> 2] = HEAP8[i4 >> 0];
  i1 = i1 + 4 | 0;
  i4 = i4 + 1 | 0;
 }
 return i3 | 0;
}

function __ZNKSt3__210moneypunctIwLb1EE11do_groupingEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 i2 = 0;
 while (1) {
  if ((i2 | 0) == 3) break;
  HEAP32[i1 + (i2 << 2) >> 2] = 0;
  i2 = i2 + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIwLb0EE11do_groupingEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 i2 = 0;
 while (1) {
  if ((i2 | 0) == 3) break;
  HEAP32[i1 + (i2 << 2) >> 2] = 0;
  i2 = i2 + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIcLb1EE11do_groupingEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 i2 = 0;
 while (1) {
  if ((i2 | 0) == 3) break;
  HEAP32[i1 + (i2 << 2) >> 2] = 0;
  i2 = i2 + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIcLb0EE11do_groupingEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 i2 = 0;
 while (1) {
  if ((i2 | 0) == 3) break;
  HEAP32[i1 + (i2 << 2) >> 2] = 0;
  i2 = i2 + 1 | 0;
 }
 return;
}

function ___muldi3(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i5 = i1;
 i1 = i3;
 i3 = ___muldsi3(i5, i1) | 0;
 i6 = tempRet0;
 return (tempRet0 = (Math_imul(i2, i1) | 0) + (Math_imul(i4, i5) | 0) + i6 | i6 & 0, i3 | 0 | 0) | 0;
}

function __ZN10ImDrawList12PopTextureIDEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = i1 + 72 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if ((i3 | 0) > 0) {
  HEAP32[i2 >> 2] = i3 + -1;
  __ZN10ImDrawList15UpdateTextureIDEv(i1);
  return;
 } else ___assert_fail(38328, 38201, 484, 38353);
}

function _a_ctz_l(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 if (!i1) i2 = 32; else if (!(i1 & 1)) {
  i3 = i1;
  i1 = 0;
  while (1) {
   i4 = i1 + 1 | 0;
   i3 = i3 >>> 1;
   if (i3 & 1 | 0) {
    i2 = i4;
    break;
   } else i1 = i4;
  }
 } else i2 = 0;
 return i2 | 0;
}

function __ZNSt3__28ios_base5imbueERKNS_6localeE(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 i4 = i2 + 28 | 0;
 __ZNSt3__26localeC2ERKS0_(i1, i4);
 __ZNSt3__26localeaSERKS0_(i4, i3) | 0;
 __ZNSt3__28ios_base16__call_callbacksENS0_5eventE(i2, 1);
 return;
}

function __ZNKSt3__27codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 HEAP32[i5 >> 2] = i3;
 HEAP32[i8 >> 2] = i6;
 return 3;
}

function __ZNKSt3__25ctypeIwE5do_isEtw(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 if (i3 >>> 0 < 128) {
  i1 = (__ZNSt3__25ctypeIcE13classic_tableEv() | 0) + (i3 << 1) | 0;
  i4 = (HEAP16[i1 >> 1] & i2) << 16 >> 16 != 0;
 } else i4 = 0;
 return i4 | 0;
}

function __ZN10ImDrawList11PopClipRectEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = i1 + 60 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if ((i3 | 0) > 0) {
  HEAP32[i2 >> 2] = i3 + -1;
  __ZN10ImDrawList14UpdateClipRectEv(i1);
  return;
 } else ___assert_fail(38292, 38201, 471, 38316);
}

function __ZNSt3__214__shared_count16__release_sharedEv(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if ((__ZNSt3__212_GLOBAL__N_19decrementIlEET_RS2_(i1 + 4 | 0) | 0) == -1) {
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] & 255](i1);
  i2 = 1;
 } else i2 = 0;
 return i2 | 0;
}

function __ZNKSt3__27codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 HEAP32[i5 >> 2] = i3;
 HEAP32[i8 >> 2] = i6;
 return 3;
}

function __ZN13ActionManagerC2ER7CityMap(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = i2;
 __ZN8LineToolC2Ev(i1 + 4 | 0);
 HEAP32[i1 + 28 >> 2] = 0;
 HEAP32[i1 + 32 >> 2] = 0;
 HEAP32[i1 + 36 >> 2] = -1;
 HEAP32[i1 + 40 >> 2] = -1;
 HEAP8[i1 + 44 >> 0] = 0;
 return;
}

function __ZNKSt3__25ctypeIcE10do_tolowerEc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 if (i2 << 24 >> 24 > -1) {
  i1 = (__ZNSt3__25ctypeIcE21__classic_lower_tableEv() | 0) + (i2 << 24 >> 24 << 2) | 0;
  i3 = HEAP32[i1 >> 2] & 255;
 } else i3 = i2;
 return i3 | 0;
}

function dynCall_iiiiiiii(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 return FUNCTION_TABLE_iiiiiiii[i1 & 7](i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0, i7 | 0, i8 | 0) | 0;
}

function __ZN13ActionManager12setCursorPosEii(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 i4 = __ZN7CityMap7getTileEjj(HEAP32[i1 >> 2] | 0, i2, i3) | 0;
 HEAP32[i1 + 32 >> 2] = i4;
 HEAP32[i1 + 36 >> 2] = i2;
 HEAP32[i1 + 40 >> 2] = i3;
 return;
}

function _png_set_interlace_handling(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 if (!i1) {
  i2 = 1;
  return i2 | 0;
 }
 if (!(HEAP8[i1 + 432 >> 0] | 0)) {
  i2 = 1;
  return i2 | 0;
 }
 i3 = i1 + 216 | 0;
 HEAP32[i3 >> 2] = HEAP32[i3 >> 2] | 2;
 i2 = 7;
 return i2 | 0;
}

function __ZNKSt3__25ctypeIcE10do_toupperEc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 if (i2 << 24 >> 24 > -1) {
  i1 = (__ZNSt3__25ctypeIcE21__classic_upper_tableEv() | 0) + ((i2 & 255) << 2) | 0;
  i3 = HEAP32[i1 >> 2] & 255;
 } else i3 = i2;
 return i3 | 0;
}

function __ZNKSt3__26locale5__imp9has_facetEl(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = HEAP32[i1 + 8 >> 2] | 0;
 if ((HEAP32[i1 + 12 >> 2] | 0) - i3 >> 2 >>> 0 > i2 >>> 0) i4 = (HEAP32[i3 + (i2 << 2) >> 2] | 0) != 0; else i4 = 0;
 return i4 | 0;
}

function ___ftello(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 if ((HEAP32[i1 + 76 >> 2] | 0) > -1) {
  i2 = (___lockfile(i1) | 0) == 0;
  i3 = ___ftello_unlocked(i1) | 0;
  if (i2) i4 = i3; else i4 = i3;
 } else i4 = ___ftello_unlocked(i1) | 0;
 return i4 | 0;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj(i1, i2, __ZNSt3__211char_traitsIwE6lengthEPKw(i2) | 0) | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(i1, i2, __ZNSt3__211char_traitsIcE6lengthEPKc(i2) | 0) | 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 HEAP32[18503] = 0;
 HEAP32[18502] = 20824;
 __ZNSt3__220__time_get_c_storageIwEC2Ev(74016);
 HEAP32[18502] = 18672;
 HEAP32[18504] = 18720;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 HEAP32[18499] = 0;
 HEAP32[18498] = 20824;
 __ZNSt3__220__time_get_c_storageIcEC2Ev(74e3);
 HEAP32[18498] = 18588;
 HEAP32[18500] = 18636;
 return;
}

function __ZNSt3__26localeaSERKS0_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__214__shared_count12__add_sharedEv(HEAP32[i2 >> 2] | 0);
 __ZNSt3__214__shared_count16__release_sharedEv(HEAP32[i1 >> 2] | 0) | 0;
 HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
 return i1 | 0;
}

function __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev(i1 + 8 | 0, i2 + 12 | 0);
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev(i1, i2 + 4 | 0);
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 var i1 = 0;
 HEAP32[18511] = 0;
 HEAP32[18510] = 20824;
 i1 = __ZNSt3__26__clocEv() | 0;
 HEAP32[18512] = i1;
 HEAP32[18510] = 20060;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 var i1 = 0;
 HEAP32[18507] = 0;
 HEAP32[18506] = 20824;
 i1 = __ZNSt3__26__clocEv() | 0;
 HEAP32[18508] = i1;
 HEAP32[18506] = 20036;
 return;
}

function _png_free_buffer_list(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if (!i3) return;
 HEAP32[i2 >> 2] = 0;
 i2 = i3;
 do {
  i3 = i2;
  i2 = HEAP32[i2 >> 2] | 0;
  _png_free(i1, i3);
 } while ((i2 | 0) != 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(5846956) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(5846948) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(5846940) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(5846932) | 0);
 return;
}

function __ZNKSt3__27codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 return __ZNSt3__2L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE(i3, i4, i5, 1114111, 0) | 0;
}

function __ZNSt3__26locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(5846892) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(5846884) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(5846876) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(5846064) | 0);
 return;
}

function __ZNKSt3__27codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 return __ZNSt3__2L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE(i3, i4, i5, 1114111, 0) | 0;
}

function __ZNSt3__26locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(5845252) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(5845244) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(5845236) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(5845212) | 0);
 return;
}

function __ZNKSt3__25ctypeIwE10do_toupperEw(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 if (i2 >>> 0 < 128) {
  i1 = (__ZNSt3__25ctypeIcE21__classic_upper_tableEv() | 0) + (i2 << 2) | 0;
  i3 = HEAP32[i1 >> 2] | 0;
 } else i3 = i2;
 return i3 | 0;
}

function __ZNKSt3__25ctypeIwE10do_tolowerEw(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 if (i2 >>> 0 < 128) {
  i1 = (__ZNSt3__25ctypeIcE21__classic_lower_tableEv() | 0) + (i2 << 2) | 0;
  i3 = HEAP32[i1 >> 2] | 0;
 } else i3 = i2;
 return i3 | 0;
}

function __ZNSt3__211char_traitsIwE7not_eofEj(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) i2 = ~(__ZNSt3__211char_traitsIwE3eofEv() | 0); else i2 = i1;
 return i2 | 0;
}

function __ZNSt3__211char_traitsIcE7not_eofEi(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) i2 = ~(__ZNSt3__211char_traitsIcE3eofEv() | 0); else i2 = i1;
 return i2 | 0;
}

function _png_longjmp(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 if (i1 | 0) {
  i3 = HEAP32[i1 + 156 >> 2] | 0;
  if (i3 | 0) {
   i4 = HEAP32[i1 + 160 >> 2] | 0;
   if (i4 | 0) FUNCTION_TABLE_vii[i3 & 63](i4, i2);
  }
 }
 _abort();
}

function ___ofl_add(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = ___ofl_lock() | 0;
 HEAP32[i1 + 56 >> 2] = HEAP32[i2 >> 2];
 i3 = HEAP32[i2 >> 2] | 0;
 if (i3 | 0) HEAP32[i3 + 52 >> 2] = i1;
 HEAP32[i2 >> 2] = i1;
 ___ofl_unlock();
 return i1 | 0;
}

function _wmemset(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 if (i3 | 0) {
  i4 = i3;
  i3 = i1;
  while (1) {
   i4 = i4 + -1 | 0;
   HEAP32[i3 >> 2] = i2;
   if (!i4) break; else i3 = i3 + 4 | 0;
  }
 }
 return i1 | 0;
}

function _pntz(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = _a_ctz_l((HEAP32[i1 >> 2] | 0) + -1 | 0) | 0;
 if (!i2) {
  i3 = _a_ctz_l(HEAP32[i1 + 4 >> 2] | 0) | 0;
  return ((i3 | 0) == 0 ? 0 : i3 + 32 | 0) | 0;
 } else return i2 | 0;
 return 0;
}

function _i64Subtract(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0;
 i5 = i2 - i4 | 0;
 i4 = (i5 | 0) >>> 0;
 i4 = (i5 | 0) - (i3 >>> 0 > i1 >>> 0 | 0) >>> 0;
 return (tempRet0 = i4, i1 - i3 >>> 0 | 0) | 0;
}

function ___uselocale(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = (___pthread_self_765() | 0) + 188 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if (i1 | 0) HEAP32[i2 >> 2] = (i1 | 0) == (-1 | 0) ? 5844056 : i1;
 return ((i3 | 0) == 5844056 ? -1 : i3) | 0;
}

function ___sindf(d1) {
 d1 = +d1;
 var d2 = 0.0, d3 = 0.0;
 d2 = d1 * d1;
 d3 = d2 * d1;
 return Math_fround(d3 * (d2 * d2) * (d2 * 2.718311493989822e-06 + -1.9839334836096632e-04) + (d3 * (d2 * .008333329385889463 + -.16666666641626524) + d1));
}

function dynCall_iiiiiii(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 return FUNCTION_TABLE_iiiiiii[i1 & 63](i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0, i7 | 0) | 0;
}

function _png_icc_check_length(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0;
 if (i4 >>> 0 >= 132) {
  i5 = 1;
  return i5 | 0;
 }
 _png_icc_profile_error(i1, i2, i3, i4, 62495);
 i5 = 0;
 return i5 | 0;
}

function _png_free(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 if ((i1 | 0) == 0 | (i2 | 0) == 0) return;
 i3 = HEAP32[i1 + 724 >> 2] | 0;
 if (!i3) {
  _free(i2);
  return;
 } else {
  FUNCTION_TABLE_vii[i3 & 63](i1, i2);
  return;
 }
}

function __ZN13ActionManager9cursorPosEii(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if (!(HEAP8[i1 + 44 >> 0] | 0)) return;
 if ((HEAP32[i1 + 28 >> 2] | 0) <= 0) return;
 __ZN8LineTool8setPointEii(i1 + 4 | 0, i2, i3);
 return;
}

function dynCall_iiiiiid(i1, i2, i3, i4, i5, i6, d7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 d7 = +d7;
 return FUNCTION_TABLE_iiiiiid[i1 & 3](i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0, +d7) | 0;
}

function __ZNK14comma_numpunct11do_groupingEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP8[i1 + 11 >> 0] = 1;
 HEAP8[i1 >> 0] = 3;
 HEAP8[i1 + 1 >> 0] = 0;
 return;
}

function __ZNKSt3__220__time_get_c_storageIwE8__monthsEv(i1) {
 i1 = i1 | 0;
 if (!(HEAP8[73728] | 0)) if (___cxa_guard_acquire(73728) | 0) {
  __ZNSt3__2L12init_wmonthsEv();
  HEAP32[1461675] = 5846412;
 }
 return HEAP32[1461675] | 0;
}

function dynCall_viiiiii(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 FUNCTION_TABLE_viiiiii[i1 & 15](i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0, i7 | 0);
}

function __ZNKSt3__220__time_get_c_storageIcE8__monthsEv(i1) {
 i1 = i1 | 0;
 if (!(HEAP8[73648] | 0)) if (___cxa_guard_acquire(73648) | 0) {
  __ZNSt3__2L11init_monthsEv();
  HEAP32[1461472] = 5845600;
 }
 return HEAP32[1461472] | 0;
}

function __ZSt11__terminatePFvvE(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 FUNCTION_TABLE_v[i1 & 3]();
 _abort_message(73101, i2);
}

function __ZNKSt3__220__time_get_c_storageIwE7__weeksEv(i1) {
 i1 = i1 | 0;
 if (!(HEAP8[73744] | 0)) if (___cxa_guard_acquire(73744) | 0) {
  __ZNSt3__2L11init_wweeksEv();
  HEAP32[1461718] = 5846704;
 }
 return HEAP32[1461718] | 0;
}

function __ZNKSt3__220__time_get_c_storageIwE7__am_pmEv(i1) {
 i1 = i1 | 0;
 if (!(HEAP8[73712] | 0)) if (___cxa_guard_acquire(73712) | 0) {
  __ZNSt3__2L11init_wam_pmEv();
  HEAP32[1461602] = 5846120;
 }
 return HEAP32[1461602] | 0;
}

function __ZNKSt3__220__time_get_c_storageIcE7__weeksEv(i1) {
 i1 = i1 | 0;
 if (!(HEAP8[73664] | 0)) if (___cxa_guard_acquire(73664) | 0) {
  __ZNSt3__2L10init_weeksEv();
  HEAP32[1461515] = 5845892;
 }
 return HEAP32[1461515] | 0;
}

function __ZNKSt3__220__time_get_c_storageIcE7__am_pmEv(i1) {
 i1 = i1 | 0;
 if (!(HEAP8[73632] | 0)) if (___cxa_guard_acquire(73632) | 0) {
  __ZNSt3__2L10init_am_pmEv();
  HEAP32[1461399] = 5845308;
 }
 return HEAP32[1461399] | 0;
}

function _png_create_info_struct(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 if (!i1) i2 = 0; else {
  i3 = _png_malloc_base(i1, 268) | 0;
  if (!i3) i2 = i3; else {
   _memset(i3 | 0, 0, 268) | 0;
   i2 = i3;
  }
 }
 return i2 | 0;
}

function _bitshift64Shl(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if ((i3 | 0) < 32) {
  tempRet0 = i2 << i3 | (i1 & (1 << i3) - 1 << 32 - i3) >>> 32 - i3;
  return i1 << i3;
 }
 tempRet0 = i1 << i3 - 32;
 return 0;
}

function __Z27ImGui_ImplGlfw_CharCallbackP10GLFWwindowj(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = __ZN5ImGui5GetIOEv() | 0;
 if ((i2 + -1 | 0) >>> 0 >= 65535) return;
 __ZN7ImGuiIO17AddInputCharacterEt(i1, i2 & 65535);
 return;
}

function __ZN9PngLoaderC2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = i1 + 4 | 0;
 i3 = i1;
 i1 = i3 + 104 | 0;
 do {
  HEAP32[i3 >> 2] = 0;
  i3 = i3 + 4 | 0;
 } while ((i3 | 0) < (i1 | 0));
 HEAP32[i2 >> 2] = 1;
 return;
}

function __ZL30GetClipboardTextFn_DefaultImplPv(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = HEAP32[1460598] | 0;
 if (!(HEAP32[i1 + 11020 >> 2] | 0)) {
  i2 = 0;
  return i2 | 0;
 }
 i2 = HEAP32[i1 + 11028 >> 2] | 0;
 return i2 | 0;
}

function _bitshift64Lshr(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if ((i3 | 0) < 32) {
  tempRet0 = i2 >>> i3;
  return i1 >>> i3 | (i2 & (1 << i3) - 1) << 32 - i3;
 }
 tempRet0 = 0;
 return i2 >>> i3 - 32 | 0;
}

function _png_image_free(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if (!i1) return;
 i2 = HEAP32[i1 >> 2] | 0;
 if (!i2) return;
 if (HEAP32[i2 + 8 >> 2] | 0) return;
 _png_safe_execute(i1, 68, i1) | 0;
 HEAP32[i1 >> 2] = 0;
 return;
}

function __ZN12RenderSystem9setCursorEii(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var f4 = f0;
 f4 = Math_fround(i2 | 0);
 HEAPF32[i1 >> 2] = f4;
 f4 = Math_fround(i3 | 0);
 HEAPF32[i1 + 4 >> 2] = f4;
 return;
}

function __ZNSt3__211char_traitsIcE6assignEPcjc(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if (i2 | 0) _memset(i1 | 0, (__ZNSt3__211char_traitsIcE11to_int_typeEc(i3) | 0) & 255 | 0, i2 | 0) | 0;
 return i1 | 0;
}

function __Z34ImGui_ImplGlfw_MouseButtonCallbackP10GLFWwindowiii(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 if (!(i2 >>> 0 < 5 & (i3 | 0) == 1)) return;
 HEAP8[5847250 + i2 >> 0] = 1;
 return;
}

function __ZNSt3__26locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(5846996) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(5847004) | 0);
 return;
}

function __ZNKSt3__27codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i2 = i4 - i3 | 0;
 return (i2 >>> 0 < i5 >>> 0 ? i2 : i5) | 0;
}

function _png_read_data(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 i4 = HEAP32[i1 + 184 >> 2] | 0;
 if (!i4) _png_error(i1, 60379); else {
  FUNCTION_TABLE_viii[i4 & 15](i1, i2, i3);
  return;
 }
}

function __ZNSt3__26locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(5846988) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(5846980) | 0);
 return;
}

function __ZNSt3__26localeC2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = __ZNSt3__26locale8__globalEv() | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 HEAP32[i1 >> 2] = i3;
 __ZNSt3__214__shared_count12__add_sharedEv(i3);
 return;
}

function __ZL19rect_original_orderPKvS0_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = HEAP32[i1 + 12 >> 2] | 0;
 i1 = HEAP32[i2 + 12 >> 2] | 0;
 return ((i3 | 0) < (i1 | 0) ? -1 : (i3 | 0) > (i1 | 0) & 1) | 0;
}

function __ZNSt3__25ctypeIcED2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 HEAP32[i1 >> 2] = 20648;
 i2 = HEAP32[i1 + 8 >> 2] | 0;
 if (i2 | 0) if (HEAP8[i1 + 12 >> 0] | 0) __ZdaPv(i2);
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev(i1, 18e3);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev(i1 + 12 | 0);
 return;
}

function _png_set_packing(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if (!i1) return;
 if ((HEAPU8[i1 + 436 >> 0] | 0) >= 8) return;
 i2 = i1 + 216 | 0;
 HEAP32[i2 >> 2] = HEAP32[i2 >> 2] | 4;
 HEAP8[i1 + 437 >> 0] = 8;
 return;
}

function ___cosdf(d1) {
 d1 = +d1;
 var d2 = 0.0;
 d2 = d1 * d1;
 d1 = d2 * d2;
 return Math_fround(1.0 - d2 * .499999997251031 + d1 * .04166662332373906 + d2 * d1 * (d2 * 2.439044879627741e-05 + -.001388676377460993));
}

function __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED2Ev(i1, 17932);
 __ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev(i1 + 4 | 0);
 return;
}

function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev(i1, 17884);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev(i1 + 4 | 0);
 return;
}

function __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED2Ev(i1, 17876);
 __ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev(i1 + 8 | 0);
 return;
}

function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev(i1, 17828);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev(i1 + 8 | 0);
 return;
}

function dynCall_iiiiii(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 return FUNCTION_TABLE_iiiiii[i1 & 31](i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0) | 0;
}

function __ZNKSt3__26locale9use_facetERNS0_2idE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = HEAP32[i1 >> 2] | 0;
 return __ZNKSt3__26locale5__imp9use_facetEl(i3, __ZNSt3__26locale2id5__getEv(i2) | 0) | 0;
}

function __ZNKSt3__26locale9has_facetERNS0_2idE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = HEAP32[i1 >> 2] | 0;
 return __ZNKSt3__26locale5__imp9has_facetEl(i3, __ZNSt3__26locale2id5__getEv(i2) | 0) | 0;
}

function stackAlloc(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + i1 | 0;
 STACKTOP = STACKTOP + 15 & -16;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(i1 | 0);
 return i2 | 0;
}

function __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(5846924) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(5846916) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(5846908) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(5846900) | 0);
 return;
}

function __ZNSt3__26locale8__globalEv() {
 if (!(HEAP8[74240] | 0)) if (___cxa_guard_acquire(74240) | 0) {
  __ZNSt3__26locale5__imp11make_globalEv() | 0;
  HEAP32[1461756] = 5847020;
 }
 return HEAP32[1461756] | 0;
}

function __ZNSt3__26locale7classicEv() {
 if (!(HEAP8[74072] | 0)) if (___cxa_guard_acquire(74072) | 0) {
  __ZNSt3__26locale5__imp12make_classicEv() | 0;
  HEAP32[1461754] = 5847012;
 }
 return HEAP32[1461754] | 0;
}

function _png_set_error_fn(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 if (!i1) return;
 HEAP32[i1 + 176 >> 2] = i2;
 HEAP32[i1 + 168 >> 2] = i3;
 HEAP32[i1 + 172 >> 2] = i4;
 return;
}

function __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b(i1, i2, 0) | 0;
}

function __ZNSt3__27codecvtIwc11__mbstate_tEC2Ej(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 4 >> 2] = i2 + -1;
 HEAP32[i1 >> 2] = 20580;
 i2 = __ZNSt3__26__clocEv() | 0;
 HEAP32[i1 + 8 >> 2] = i2;
 return;
}

function __ZNSt3__26__clocEv() {
 var i1 = 0;
 if (!(HEAP8[73592] | 0)) if (___cxa_guard_acquire(73592) | 0) {
  i1 = ___newlocale(2147483647, 70499, 0) | 0;
  HEAP32[1461299] = i1;
 }
 return HEAP32[1461299] | 0;
}

function _png_set_mem_fn(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 if (!i1) return;
 HEAP32[i1 + 716 >> 2] = i2;
 HEAP32[i1 + 720 >> 2] = i3;
 HEAP32[i1 + 724 >> 2] = i4;
 return;
}

function __ZTv0_n12_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev(i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev(i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZN8ImVectorI13ImDrawChannelED2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[i1 + 8 >> 2] | 0;
 if (!i2) return;
 HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
 __ZL11FreeWrapperPvS_(i2, 0);
 return;
}

function dynCall_iiiiid(i1, i2, i3, i4, i5, d6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 d6 = +d6;
 return FUNCTION_TABLE_iiiiid[i1 & 7](i2 | 0, i3 | 0, i4 | 0, i5 | 0, +d6) | 0;
}

function _png_default_read_data(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if (!i1) return;
 if ((_fread(i2, 1, i3, HEAP32[i1 + 188 >> 2] | 0) | 0) == (i3 | 0)) return; else _png_error(i1, 60406);
}

function __ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev(i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev(i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev(i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev(i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev(i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev(i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev(i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev(i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_8numpunctIwEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(5845228) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_8numpunctIcEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(5845204) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_8messagesIwEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(5846972) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_8messagesIcEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(5846964) | 0);
 return;
}

function __ZN8ImVectorI10ImDrawVertED2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[i1 + 8 >> 2] | 0;
 if (!i2) return;
 HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
 __ZL11FreeWrapperPvS_(i2, 0);
 return;
}

function __ZN11MenuManager8postdrawER13WindowManager(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZN5ImGui6RenderEv();
 __Z32ImGui_ImplOpenGL3_RenderDrawDataP10ImDrawData(__ZN5ImGui11GetDrawDataEv() | 0);
 return;
}

function __ZNSt3__28numpunctIwED2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 20740;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 16 | 0);
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNSt3__28numpunctIcED2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 20700;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 12 | 0);
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7collateIwEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(5845180) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7collateIcEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(5845172) | 0);
 return;
}

function __ZN8ImVectorI9ImDrawCmdED2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[i1 + 8 >> 2] | 0;
 if (!i2) return;
 HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
 __ZL11FreeWrapperPvS_(i2, 0);
 return;
}

function __ZN11MeshManager7loadingEv(i1) {
 i1 = i1 | 0;
 return ((HEAP32[i1 + 16 >> 2] | 0) - (HEAP32[i1 + 12 >> 2] | 0) | 0) >>> 0 < ((HEAP32[i1 + 28 >> 2] | 0) - (HEAP32[i1 + 24 >> 2] | 0) | 0) >>> 0 | 0;
}

function __ZNSt3__26locale5__imp7installINS_5ctypeIwEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(5845220) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_5ctypeIcEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(5845188) | 0);
 return;
}

function dynCall_viiiii(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 FUNCTION_TABLE_viiiii[i1 & 7](i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0);
}

function ___strdup(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = (_strlen(i1) | 0) + 1 | 0;
 i3 = _malloc(i2) | 0;
 if (!i3) i4 = 0; else i4 = _memcpy(i3 | 0, i1 | 0, i2 | 0) | 0;
 return i4 | 0;
}

function __ZN8ImVectorI6ImVec4ED2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[i1 + 8 >> 2] | 0;
 if (!i2) return;
 HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
 __ZL11FreeWrapperPvS_(i2, 0);
 return;
}

function __ZN8ImVectorI6ImVec2ED2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[i1 + 8 >> 2] | 0;
 if (!i2) return;
 HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
 __ZL11FreeWrapperPvS_(i2, 0);
 return;
}

function ___lctrans_impl(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 if (!i2) i3 = 0; else i3 = ___mo_lookup(HEAP32[i2 >> 2] | 0, HEAP32[i2 + 4 >> 2] | 0, i1) | 0;
 return (i3 | 0 ? i3 : i1) | 0;
}

function __ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__210__time_putD2Ev(i1 + 8 | 0);
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__210__time_putD2Ev(i1 + 8 | 0);
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__211char_traitsIwE4moveEPwPKwj(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 if (!i3) i4 = i1; else {
  _wmemmove(i1, i2, i3) | 0;
  i4 = i1;
 }
 return i4 | 0;
}

function _i64Add(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0;
 i5 = i1 + i3 >>> 0;
 return (tempRet0 = i2 + i4 + (i5 >>> 0 < i1 >>> 0 | 0) >>> 0, i5 | 0) | 0;
}

function __ZNSt3__211char_traitsIwE6assignEPwjw(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 if (!i2) i4 = i1; else {
  _wmemset(i1, i3, i2) | 0;
  i4 = i1;
 }
 return i4 | 0;
}

function __ZNSt3__211char_traitsIwE4copyEPwPKwj(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 if (!i3) i4 = i1; else {
  _wmemcpy(i1, i2, i3) | 0;
  i4 = i1;
 }
 return i4 | 0;
}

function __ZNKSt3__210moneypunctIwLb1EE13do_pos_formatEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 >> 0] = 2;
 HEAP8[i1 + 1 >> 0] = 3;
 HEAP8[i1 + 2 >> 0] = 0;
 HEAP8[i1 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__210moneypunctIwLb1EE13do_neg_formatEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 >> 0] = 2;
 HEAP8[i1 + 1 >> 0] = 3;
 HEAP8[i1 + 2 >> 0] = 0;
 HEAP8[i1 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__210moneypunctIwLb0EE13do_pos_formatEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 >> 0] = 2;
 HEAP8[i1 + 1 >> 0] = 3;
 HEAP8[i1 + 2 >> 0] = 0;
 HEAP8[i1 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__210moneypunctIwLb0EE13do_neg_formatEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 >> 0] = 2;
 HEAP8[i1 + 1 >> 0] = 3;
 HEAP8[i1 + 2 >> 0] = 0;
 HEAP8[i1 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__210moneypunctIcLb1EE13do_pos_formatEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 >> 0] = 2;
 HEAP8[i1 + 1 >> 0] = 3;
 HEAP8[i1 + 2 >> 0] = 0;
 HEAP8[i1 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__210moneypunctIcLb1EE13do_neg_formatEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 >> 0] = 2;
 HEAP8[i1 + 1 >> 0] = 3;
 HEAP8[i1 + 2 >> 0] = 0;
 HEAP8[i1 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__210moneypunctIcLb0EE13do_pos_formatEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 >> 0] = 2;
 HEAP8[i1 + 1 >> 0] = 3;
 HEAP8[i1 + 2 >> 0] = 0;
 HEAP8[i1 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__210moneypunctIcLb0EE13do_neg_formatEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 >> 0] = 2;
 HEAP8[i1 + 1 >> 0] = 3;
 HEAP8[i1 + 2 >> 0] = 0;
 HEAP8[i1 + 3 >> 0] = 4;
 return;
}

function __ZN8ImVectorIPvED2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[i1 + 8 >> 2] | 0;
 if (!i2) return;
 HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
 __ZL11FreeWrapperPvS_(i2, 0);
 return;
}

function ___syscall_ret(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 if (i1 >>> 0 > 4294963200) {
  i2 = ___errno_location() | 0;
  HEAP32[i2 >> 2] = 0 - i1;
  i3 = -1;
 } else i3 = i1;
 return i3 | 0;
}

function __ZNSt3__217__call_once_proxyINS_5tupleIJONS_12_GLOBAL__N_111__fake_bindEEEEEEvPv(i1) {
 i1 = i1 | 0;
 __ZNKSt3__212_GLOBAL__N_111__fake_bindclEv(HEAP32[HEAP32[i1 >> 2] >> 2] | 0);
 return;
}

function __ZNKSt3__27codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 HEAP32[i5 >> 2] = i3;
 return 3;
}

function __ZNKSt3__27codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 HEAP32[i5 >> 2] = i3;
 return 3;
}

function __ZN8ImVectorItED2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[i1 + 8 >> 2] | 0;
 if (!i2) return;
 HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
 __ZL11FreeWrapperPvS_(i2, 0);
 return;
}

function __ZNKSt3__27codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 HEAP32[i5 >> 2] = i3;
 return 3;
}

function _png_set_benign_errors(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = i1 + 212 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 HEAP32[i3 >> 2] = i2 | 0 ? i1 | 7340032 : i1 & -7340033;
 return;
}

function _png_get_rowbytes(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 if (!((i1 | 0) != 0 & (i2 | 0) != 0)) {
  i3 = 0;
  return i3 | 0;
 }
 i3 = HEAP32[i2 + 12 >> 2] | 0;
 return i3 | 0;
}

function _png_get_channels(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 if (!((i1 | 0) != 0 & (i2 | 0) != 0)) {
  i3 = 0;
  return i3 | 0;
 }
 i3 = HEAP8[i2 + 29 >> 0] | 0;
 return i3 | 0;
}

function __Z20window_size_callbackP10GLFWwindowii(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = HEAP32[1460597] | 0;
 HEAP32[i1 + 4 >> 2] = i2;
 HEAP32[i1 + 8 >> 2] = i3;
 return;
}

function ___DOUBLE_BITS_561(d1) {
 d1 = +d1;
 var i2 = 0;
 HEAPF64[tempDoublePtr >> 3] = d1;
 i2 = HEAP32[tempDoublePtr >> 2] | 0;
 tempRet0 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 return i2 | 0;
}

function ___DOUBLE_BITS_406(d1) {
 d1 = +d1;
 var i2 = 0;
 HEAPF64[tempDoublePtr >> 3] = d1;
 i2 = HEAP32[tempDoublePtr >> 2] | 0;
 tempRet0 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 return i2 | 0;
}

function __ZNSt3__26localeC2ERKS0_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = HEAP32[i2 >> 2] | 0;
 HEAP32[i1 >> 2] = i3;
 __ZNSt3__214__shared_count12__add_sharedEv(i3);
 return;
}

function b9(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 nullFunc_iiiiiiiii(9);
 return 0;
}

function _png_set_swap(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if (!i1) return;
 if ((HEAP8[i1 + 436 >> 0] | 0) != 16) return;
 i2 = i1 + 216 | 0;
 HEAP32[i2 >> 2] = HEAP32[i2 >> 2] | 16;
 return;
}

function __ZNSt3__211char_traitsIcE7compareEPKcS3_j(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 if (!i3) i4 = 0; else i4 = _memcmp(i1, i2, i3) | 0;
 return i4 | 0;
}

function dynCall_iiiii(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 return FUNCTION_TABLE_iiiii[i1 & 7](i2 | 0, i3 | 0, i4 | 0, i5 | 0) | 0;
}

function __ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__210__time_putD2Ev(i1 + 8 | 0);
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__210__time_putD2Ev(i1 + 8 | 0);
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNKSt3__28numpunctIwE11do_groupingEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_(i1, i2 + 16 | 0);
 return;
}

function __ZNKSt3__28numpunctIcE11do_groupingEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_(i1, i2 + 12 | 0);
 return;
}

function __ZNSt3__210__time_putD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if ((i2 | 0) != (__ZNSt3__26__clocEv() | 0)) _freelocale(HEAP32[i1 >> 2] | 0);
 return;
}

function dynCall_viiii(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 FUNCTION_TABLE_viiii[i1 & 15](i2 | 0, i3 | 0, i4 | 0, i5 | 0);
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i1) {
 i1 = i1 | 0;
 if ((HEAP8[i1 + 8 + 3 >> 0] | 0) < 0) __ZdlPv(HEAP32[i1 >> 2] | 0);
 return;
}

function b8(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 nullFunc_iiiiiiii(8);
 return 0;
}

function _png_reciprocal(i1) {
 i1 = i1 | 0;
 var d2 = 0.0;
 d2 = +Math_floor(+(1.0e10 / +(i1 | 0) + .5));
 return (d2 <= 2147483647.0 & d2 >= -2147483648.0 ? ~~d2 : 0) | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1) {
 i1 = i1 | 0;
 if ((HEAP8[i1 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[i1 >> 2] | 0);
 return;
}

function _strchr(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = ___strchrnul(i1, i2) | 0;
 return ((HEAP8[i3 >> 0] | 0) == (i2 & 255) << 24 >> 24 ? i3 : 0) | 0;
}

function _main(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _emscripten_asm_const_i(0) | 0;
 __Z4initv() | 0;
 _emscripten_set_main_loop(2, 0, 1);
 _glfwTerminate();
 return 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 HEAP32[18497] = 0;
 HEAP32[18496] = 20392;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 HEAP32[18495] = 0;
 HEAP32[18494] = 20364;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 HEAP32[18493] = 0;
 HEAP32[18492] = 20336;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 HEAP32[18491] = 0;
 HEAP32[18490] = 20308;
 return;
}

function __ZNSt3__211char_traitsIcE4moveEPcPKcj(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if (i3 | 0) _memmove(i1 | 0, i2 | 0, i3 | 0) | 0;
 return i1 | 0;
}

function __Z28ImGui_ImplGlfw_InitForOpenGLP10GLFWwindowb(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZL19ImGui_ImplGlfw_InitP10GLFWwindowb13GlfwClientApi(i1, i2);
 return 1;
}

function __ZNSt3__211char_traitsIcE4copyEPcPKcj(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if (i3 | 0) _memcpy(i1 | 0, i2 | 0, i3 | 0) | 0;
 return i1 | 0;
}

function __ZN13ActionManager19cancelActionCommandEv(i1) {
 i1 = i1 | 0;
 HEAP8[i1 + 44 >> 0] = 0;
 HEAP32[i1 + 28 >> 2] = 0;
 __ZN8LineTool5resetEv(i1 + 4 | 0);
 return;
}

function _png_app_warning(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (!(HEAP32[i1 + 212 >> 2] & 2097152)) _png_error(i1, i2); else {
  _png_warning(i1, i2);
  return;
 }
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 HEAP32[18481] = 0;
 HEAP32[18480] = 18536;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 HEAP32[18479] = 0;
 HEAP32[18478] = 18484;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 HEAP32[18477] = 0;
 HEAP32[18476] = 18420;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 HEAP32[18475] = 0;
 HEAP32[18474] = 18356;
 return;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function _png_app_error(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (!(HEAP32[i1 + 212 >> 2] & 4194304)) _png_error(i1, i2); else {
  _png_warning(i1, i2);
  return;
 }
}

function __ZNSt3__28ios_base33__set_badbit_and_consider_rethrowEv(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = i1 + 16 | 0;
 HEAP32[i2 >> 2] = HEAP32[i2 >> 2] | 1;
 return;
}

function __ZThn8_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev(i1 + -8 | 0);
 return;
}

function __ZThn8_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev(i1 + -8 | 0);
 return;
}

function __ZNSt3__26locale2id6__initEv(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[1461300] | 0;
 HEAP32[1461300] = i2 + 1;
 HEAP32[i1 + 4 >> 2] = i2 + 1;
 return;
}

function __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZN5ImGui8GetStyleEv() {
 var i1 = 0;
 i1 = HEAP32[1460598] | 0;
 if (!i1) ___assert_fail(35015, 31803, 2860, 35126); else return i1 + 5356 | 0;
 return 0;
}

function __ZNSt3__26locale5facet16__on_zero_sharedEv(i1) {
 i1 = i1 | 0;
 if (i1 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 255](i1);
 return;
}

function __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__214__ptr_in_rangeIwEEbPKT_S3_S3_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return i2 >>> 0 <= i1 >>> 0 & i1 >>> 0 < i3 >>> 0 | 0;
}

function __ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return i2 >>> 0 <= i1 >>> 0 & i1 >>> 0 < i3 >>> 0 | 0;
}

function __ZNSt3__212_GLOBAL__N_19decrementIlEET_RS2_(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[i1 >> 2] | 0;
 HEAP32[i1 >> 2] = i2 + -1;
 return i2 + -1 | 0;
}

function __ZNSt11logic_errorC2EPKc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 21212;
 __ZNSt3__218__libcpp_refstringC2EPKc(i1 + 4 | 0, i2);
 return;
}

function __ZN11MenuManager7predrawEv(i1) {
 i1 = i1 | 0;
 __Z26ImGui_ImplOpenGL3_NewFramev();
 __Z23ImGui_ImplGlfw_NewFramev();
 __ZN5ImGui8NewFrameEv();
 return;
}

function dynCall_iiii(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return FUNCTION_TABLE_iiii[i1 & 31](i2 | 0, i3 | 0, i4 | 0) | 0;
}

function __ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function ___cxa_guard_acquire(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if ((HEAP8[i1 >> 0] | 0) == 1) i2 = 0; else {
  HEAP8[i1 >> 0] = 1;
  i2 = 1;
 }
 return i2 | 0;
}

function __ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZN8ImVectorI11ImFontGlyphED2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[i1 + 8 >> 2] | 0;
 if (!i2) return;
 __ZN5ImGui7MemFreeEPv(i2);
 return;
}

function ___cxa_is_pointer_type(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if (!i1) i2 = 0; else i2 = (___dynamic_cast(i1, 3080, 3184, 0) | 0) != 0 & 1;
 return i2 | 0;
}

function __ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZN5ImGui5GetIOEv() {
 var i1 = 0;
 i1 = HEAP32[1460598] | 0;
 if (!i1) ___assert_fail(35015, 31803, 2854, 35120); else return i1 + 4 | 0;
 return 0;
}

function _fputs(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = _strlen(i1) | 0;
 return ((_fwrite(i1, 1, i3, i2) | 0) != (i3 | 0)) << 31 >> 31 | 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return __ZNSt3__211char_traitsIwE3eofEv() | 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return __ZNSt3__211char_traitsIcE3eofEv() | 0;
}

function __ZNSt3__26locale5__imp12make_classicEv() {
 __ZNSt3__212_GLOBAL__N_14makeINS_6locale5__impEjEERT_T0_();
 HEAP32[1461753] = 74080;
 return 5847012;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE8overflowEj(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return __ZNSt3__211char_traitsIwE3eofEv() | 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8overflowEi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return __ZNSt3__211char_traitsIcE3eofEv() | 0;
}

function b7(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 nullFunc_iiiiiii(7);
 return 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 17732;
 __ZNSt3__26localeD2Ev(i1 + 4 | 0);
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 17668;
 __ZNSt3__26localeD2Ev(i1 + 4 | 0);
 return;
}

function _wcslen(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = i1;
 while (1) if (!(HEAP32[i2 >> 2] | 0)) break; else i2 = i2 + 4 | 0;
 return i2 - i1 >> 2 | 0;
}

function _png_set_swap_alpha(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if (!i1) return;
 i2 = i1 + 216 | 0;
 HEAP32[i2 >> 2] = HEAP32[i2 >> 2] | 131072;
 return;
}

function b6(i1, i2, i3, i4, i5, d6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 d6 = +d6;
 nullFunc_iiiiiid(6);
 return 0;
}

function dynCall_viii(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 FUNCTION_TABLE_viii[i1 & 15](i2 | 0, i3 | 0, i4 | 0);
}

function ___ctype_get_mb_cur_max() {
 var i1 = 0;
 i1 = (___pthread_self_813() | 0) + 188 | 0;
 return (HEAP32[HEAP32[i1 >> 2] >> 2] | 0 ? 4 : 1) | 0;
}

function _strtoll(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 i4 = _strtox(i1, i2, i3, 0, -2147483648) | 0;
 return i4 | 0;
}

function __ZN5ImGui7MemFreeEPv(i1) {
 i1 = i1 | 0;
 if (i1 | 0) HEAP32[1460599] = (HEAP32[1460599] | 0) + -1;
 __ZL11FreeWrapperPvS_(i1, 0);
 return;
}

function _strtol(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 i4 = _strtox(i1, i2, i3, -2147483648, 0) | 0;
 return i4 | 0;
}

function __ZNSt3__212_GLOBAL__N_17releaseclEPNS_6locale5facetE(i1) {
 i1 = i1 | 0;
 __ZNSt3__214__shared_count16__release_sharedEv(i1) | 0;
 return;
}

function __ZN8ImVectorIfED2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[i1 + 8 >> 2] | 0;
 if (!i2) return;
 __ZN5ImGui7MemFreeEPv(i2);
 return;
}

function _strerror(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = (___pthread_self_55() | 0) + 188 | 0;
 return ___strerror_l(i1, HEAP32[i2 >> 2] | 0) | 0;
}

function __ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNKSt3__26locale5__imp9use_facetEl(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return HEAP32[(HEAP32[i1 + 8 >> 2] | 0) + (i2 << 2) >> 2] | 0;
}

function __ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function b17(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 nullFunc_viiiiii(17);
}

function __ZNSt3__28ios_base5clearEj(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 16 >> 2] = (HEAP32[i1 + 24 >> 2] | 0) == 0 | i2;
 return;
}

function __ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNKSt3__25ctypeIwE9do_narrowEwc(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return (i2 >>> 0 < 128 ? i2 & 255 : i3) | 0;
}

function _strtoull_l(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i4 = _strtoull(i1, i2, i3) | 0;
 return i4 | 0;
}

function _alphasort(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _strcoll((HEAP32[i1 >> 2] | 0) + 11 | 0, (HEAP32[i2 >> 2] | 0) + 11 | 0) | 0;
}

function __ZNKSt3__25ctypeIcE9do_narrowEcc(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return (i2 << 24 >> 24 > -1 ? i2 : i3) | 0;
}

function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return (i1 | 0) == (i2 | 0) | 0;
}

function _strtoull(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 i4 = _strtox(i1, i2, i3, -1, -1) | 0;
 return i4 | 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return i1 | 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6setbufEPci(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return i1 | 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIwc11__mbstate_tEEjEERT_T0_() {
 __ZNSt3__27codecvtIwc11__mbstate_tEC2Ej(73808, 1);
 return;
}

function __ZN10__cxxabiv123__fundamental_type_infoD0Ev(i1) {
 i1 = i1 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function _strtoll_l(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i4 = _strtoll(i1, i2, i3) | 0;
 return i4 | 0;
}

function _png_set_bgr(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if (!i1) return;
 i2 = i1 + 216 | 0;
 HEAP32[i2 >> 2] = HEAP32[i2 >> 2] | 1;
 return;
}

function _swapc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = _llvm_bswap_i32(i1 | 0) | 0;
 return ((i2 | 0) == 0 ? i1 : i3) | 0;
}

function __ZNSt3__26locale5__imp11make_globalEv() {
 __ZNSt3__26localeC2ERKS0_(5847020, __ZNSt3__26locale7classicEv() | 0);
 return 5847020;
}

function __ZN13WindowManagerC2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 + 4 >> 2] = 200;
 HEAP32[i1 + 8 >> 2] = 480;
 HEAP32[1460597] = i1;
 return;
}

function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev(i1) {
 i1 = i1 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZL31ImGui_ImplGlfw_SetClipboardTextPvPKc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _glfwSetClipboardString(i1 | 0, i2 | 0);
 return;
}

function __Z26ImGui_ImplOpenGL3_NewFramev() {
 if (HEAP32[1460874] | 0) return;
 __Z37ImGui_ImplOpenGL3_CreateDeviceObjectsv() | 0;
 return;
}

function ___udivdi3(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return ___udivmoddi4(i1, i2, i3, i4, 0) | 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9underflowEv(i1) {
 i1 = i1 | 0;
 return __ZNSt3__211char_traitsIwE3eofEv() | 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9underflowEv(i1) {
 i1 = i1 | 0;
 return __ZNSt3__211char_traitsIcE3eofEv() | 0;
}

function __ZNSt3__214__shared_count12__add_sharedEv(i1) {
 i1 = i1 | 0;
 __ZNSt3__212_GLOBAL__N_19incrementIlEET_RS2_(i1 + 4 | 0);
 return;
}

function __ZN5ImGui8MemAllocEj(i1) {
 i1 = i1 | 0;
 HEAP32[1460599] = (HEAP32[1460599] | 0) + 1;
 return __ZL13MallocWrapperjPv(i1, 0) | 0;
}

function __ZN11MeshManager7getMeshEi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return HEAP32[(HEAP32[i1 + 12 >> 2] | 0) + (i2 << 2) >> 2] | 0;
}

function __ZN10__cxxabiv120__si_class_type_infoD0Ev(i1) {
 i1 = i1 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function dynCall_vidd(i1, i2, d3, d4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 d3 = +d3;
 d4 = +d4;
 FUNCTION_TABLE_vidd[i1 & 3](i2 | 0, +d3, +d4);
}

function __ZNSt3__27codecvtIwc11__mbstate_tED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__27codecvtIwc11__mbstate_tED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function _wctomb(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 if (!i1) i3 = 0; else i3 = _wcrtomb(i1, i2, 0) | 0;
 return i3 | 0;
}

function _out(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if (!(HEAP32[i1 >> 2] & 32)) ___fwritex(i2, i3, i1) | 0;
 return;
}

function __ZNSt11logic_errorD2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 21212;
 __ZNSt3__218__libcpp_refstringD2Ev(i1 + 4 | 0);
 return;
}

function __ZN10__cxxabiv117__class_type_infoD0Ev(i1) {
 i1 = i1 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function b5(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 nullFunc_iiiiii(5);
 return 0;
}

function ___FLOAT_BITS_444(f1) {
 f1 = Math_fround(f1);
 return (HEAPF32[tempDoublePtr >> 2] = f1, HEAP32[tempDoublePtr >> 2] | 0) | 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDsc11__mbstate_tEEjEERT_T0_() {
 HEAP32[18457] = 0;
 HEAP32[18456] = 20960;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDic11__mbstate_tEEjEERT_T0_() {
 HEAP32[18459] = 0;
 HEAP32[18458] = 21008;
 return;
}

function __ZN5ImGui6ButtonEPKcRK6ImVec2(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return __ZN5ImGui8ButtonExEPKcRK6ImVec2i(i1, i2, 0) | 0;
}

function _llvm_bswap_i32(i1) {
 i1 = i1 | 0;
 return (i1 & 255) << 24 | (i1 >> 8 & 255) << 16 | (i1 >> 16 & 255) << 8 | i1 >>> 24 | 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIcc11__mbstate_tEEjEERT_T0_() {
 HEAP32[18451] = 0;
 HEAP32[18450] = 20912;
 return;
}

function __ZN5ImGui11GetDrawDataEv() {
 var i1 = 0;
 i1 = (HEAP32[1460598] | 0) + 6888 | 0;
 return (HEAP8[i1 >> 0] | 0 ? i1 : 0) | 0;
}

function dynCall_iii(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return FUNCTION_TABLE_iii[i1 & 31](i2 | 0, i3 | 0) | 0;
}

function __ZNSt3__26localeD2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__214__shared_count16__release_sharedEv(HEAP32[i1 >> 2] | 0) | 0;
 return;
}

function __ZNSt3__25ctypeIcE21__classic_upper_tableEv() {
 var i1 = 0;
 i1 = ___ctype_toupper_loc() | 0;
 return HEAP32[i1 >> 2] | 0;
}

function __ZNSt3__25ctypeIcE21__classic_lower_tableEv() {
 var i1 = 0;
 i1 = ___ctype_tolower_loc() | 0;
 return HEAP32[i1 >> 2] | 0;
}

function __ZNSt3__211char_traitsIcE6assignERcRKc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 >> 0] = HEAP8[i2 >> 0] | 0;
 return;
}

function b4(i1, i2, i3, i4, d5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 d5 = +d5;
 nullFunc_iiiiid(4);
 return 0;
}

function __ZNSt3__211char_traitsIwE6assignERwRKw(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
 return;
}

function __ZNKSt3__28ios_base6getlocEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26localeC2ERKS0_(i1, i2 + 28 | 0);
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIcEEDnbjEERT_T0_T1_T2_() {
 __ZNSt3__25ctypeIcEC2EPKtbj(73776, 0, 0, 1);
 return;
}

function __ZNSt3__211__stdoutbufIwED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev(i1);
 return;
}

function __ZNSt3__211__stdoutbufIcED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev(i1);
 return;
}

function __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8max_sizeEv(i1) {
 i1 = i1 | 0;
 return 1073741823;
}

function _mbrlen(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return _mbrtowc(0, i1, i2, i3 | 0 ? i3 : 5844112) | 0;
}

function __ZNSt3__212_GLOBAL__N_19incrementIlEET_RS2_(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb1EEEjEERT_T0_() {
 HEAP32[18489] = 0;
 HEAP32[18488] = 20252;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb0EEEjEERT_T0_() {
 HEAP32[18487] = 0;
 HEAP32[18486] = 20196;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb1EEEjEERT_T0_() {
 HEAP32[18485] = 0;
 HEAP32[18484] = 20140;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb0EEEjEERT_T0_() {
 HEAP32[18483] = 0;
 HEAP32[18482] = 20084;
 return;
}

function __ZNSt3__210__stdinbufIwED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev(i1);
 return;
}

function __ZNSt3__210__stdinbufIcED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev(i1);
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv(i1) {
 i1 = i1 | 0;
 return 2;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv(i1) {
 i1 = i1 | 0;
 return 2;
}

function __ZN7Texture4bindEv(i1) {
 i1 = i1 | 0;
 _glActiveTexture(33984);
 _glBindTexture(3553, HEAP32[i1 >> 2] | 0);
 return;
}

function b16(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 nullFunc_viiiii(16);
}

function _mbsinit(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if (!i1) i2 = 1; else i2 = (HEAP32[i1 >> 2] | 0) == 0 & 1;
 return i2 | 0;
}

function __ZNSt3__27codecvtIDsc11__mbstate_tED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__27codecvtIDic11__mbstate_tED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__217__widen_from_utf8ILj32EED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}

function __ZNSt3__27codecvtIcc11__mbstate_tED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__216__narrow_to_utf8ILj32EED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__210__stdinbufIwE9underflowEv(i1) {
 i1 = i1 | 0;
 return __ZNSt3__210__stdinbufIwE9__getcharEb(i1, 0) | 0;
}

function __ZNSt3__210__stdinbufIcE9underflowEv(i1) {
 i1 = i1 | 0;
 return __ZNSt3__210__stdinbufIcE9__getcharEb(i1, 0) | 0;
}

function ___loc_is_allocated(i1) {
 i1 = i1 | 0;
 return (i1 | 0) != 13848 & ((i1 | 0) != 0 & (i1 | 0) != 5844084) & 1 | 0;
}

function __ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE(i1) {
 i1 = i1 | 0;
 return i1 + 12 | 0;
}

function __ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return (i1 | 0) == (i2 | 0) | 0;
}

function __ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return (i1 | 0) == (i2 | 0) | 0;
}

function dynCall_vii(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 FUNCTION_TABLE_vii[i1 & 63](i2 | 0, i3 | 0);
}

function _vsprintf(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return _vsnprintf(i1, 2147483647, i2, i3) | 0;
}

function _png_reset_crc(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = _crc32(0, 0, 0) | 0;
 HEAP32[i1 + 412 >> 2] = i2;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8messagesIwEEjEERT_T0_() {
 HEAP32[18517] = 0;
 HEAP32[18516] = 20452;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8messagesIcEEjEERT_T0_() {
 HEAP32[18515] = 0;
 HEAP32[18514] = 20420;
 return;
}

function __ZNKSt11logic_error4whatEv(i1) {
 i1 = i1 | 0;
 return __ZNKSt3__218__libcpp_refstring5c_strEv(i1 + 4 | 0) | 0;
}

function _strcoll(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 ___pthread_self_777() | 0;
 return ___strcoll_l(i1, i2, 0) | 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7collateIwEEjEERT_T0_() {
 HEAP32[18443] = 0;
 HEAP32[18442] = 18324;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7collateIcEEjEERT_T0_() {
 HEAP32[18441] = 0;
 HEAP32[18440] = 18292;
 return;
}

function __ZNSt3__210__stdinbufIwE5uflowEv(i1) {
 i1 = i1 | 0;
 return __ZNSt3__210__stdinbufIwE9__getcharEb(i1, 1) | 0;
}

function __ZNSt3__210__stdinbufIcE5uflowEv(i1) {
 i1 = i1 | 0;
 return __ZNSt3__210__stdinbufIcE9__getcharEb(i1, 1) | 0;
}

function __ZN13ActionManager13setNextActionEi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 28 >> 2] = i2;
 return;
}

function __ZSt15get_new_handlerv() {
 var i1 = 0;
 i1 = HEAP32[1461778] | 0;
 HEAP32[1461778] = i1 + 0;
 return i1 | 0;
}

function __ZNSt3__25ctypeIcE13classic_tableEv() {
 var i1 = 0;
 i1 = ___ctype_b_loc() | 0;
 return HEAP32[i1 >> 2] | 0;
}

function __ZNSt3__211__stdoutbufIwED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__211__stdoutbufIwED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__211__stdoutbufIcED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__211__stdoutbufIcED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__210moneypunctIwLb1EED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__210moneypunctIwLb0EED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__210moneypunctIcLb1EED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__210moneypunctIcLb0EED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function _strncpy(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 ___stpncpy(i1, i2, i3) | 0;
 return i1 | 0;
}

function _closedir(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = _close(HEAP32[i1 >> 2] | 0) | 0;
 _free(i1);
 return i2 | 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_6locale5__impEjEERT_T0_() {
 __ZNSt3__26locale5__impC2Ej(74080, 1);
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIwEEjEERT_T0_() {
 HEAP32[18449] = 0;
 HEAP32[18448] = 20844;
 return;
}

function _zcalloc(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return _malloc(Math_imul(i3, i2) | 0) | 0;
}

function _do_read_706(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return ___string_read(i1, i2, i3) | 0;
}

function __ZNSt3__212_GLOBAL__N_17countofIwEEjPKT_S4_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return i2 - i1 >> 2 | 0;
}

function __ZNSt3__210__stdinbufIwED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__210__stdinbufIwED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__210__stdinbufIcED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__210__stdinbufIcED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function b3(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 nullFunc_iiiii(3);
 return 0;
}

function _strcat(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _strcpy(i1 + (_strlen(i1) | 0) | 0, i2) | 0;
 return i1 | 0;
}

function __ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_1994(i1) {
 i1 = i1 | 0;
 return i1 + -12 | 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIwEEjEERT_T0_() {
 __ZNSt3__28numpunctIwEC2Ej(73864, 1);
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIcEEjEERT_T0_() {
 __ZNSt3__28numpunctIcEC2Ej(73840, 1);
 return;
}

function _isxdigit(i1) {
 i1 = i1 | 0;
 return (((i1 | 32) + -97 | 0) >>> 0 < 6 | (_isdigit(i1) | 0) != 0) & 1 | 0;
}

function __ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__28ios_baseD2Ev(i1);
 return;
}

function __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__28ios_baseD2Ev(i1);
 return;
}

function __GLOBAL__sub_I_bind_cpp() {
 __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev(0);
 return;
}

function setThrew(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (!__THREW__) {
  __THREW__ = i1;
  threwValue = i2;
 }
}

function __ZNSt3__26locale5facetD0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__26locale5__impD0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5__impD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZL31ImGui_ImplGlfw_GetClipboardTextPv(i1) {
 i1 = i1 | 0;
 return _glfwGetClipboardString(i1 | 0) | 0;
}

function _strtof_l(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return Math_fround(_strtof(i1, i2));
}

function __ZNSt3__28messagesIwED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__28messagesIcED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__212_GLOBAL__N_17countofIcEEjPKT_S4_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return i2 - i1 | 0;
}

function __ZSt13get_terminatev() {
 var i1 = 0;
 i1 = HEAP32[5280] | 0;
 HEAP32[5280] = i1 + 0;
 return i1 | 0;
}

function __ZNSt3__28numpunctIwED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__28numpunctIwED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__28numpunctIcED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__28numpunctIcED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZN7CityMap12processTreesEv(i1) {
 i1 = i1 | 0;
 __ZN10Simulation10doTreeStepEP7CityMap(i1);
 return;
}

function __ZNSt3__27collateIwED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__27collateIwED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__27collateIcED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__27collateIcED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__25ctypeIwED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZN14comma_numpunctD0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__28numpunctIcED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED2Ev(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}

function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}

function __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED2Ev(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}

function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}

function b15(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 nullFunc_viiii(15);
}

function _catgets(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return i4 | 0;
}

function dynCall_ii(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return FUNCTION_TABLE_ii[i1 & 127](i2 | 0) | 0;
}

function _fseek(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return ___fseeko(i1, i2, i3) | 0;
}

function ___strcoll_l(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return _strcmp(i1, i2) | 0;
}

function ___clang_call_terminate(i1) {
 i1 = i1 | 0;
 ___cxa_begin_catch(i1 | 0) | 0;
 __ZSt9terminatev();
}

function __ZNSt12length_errorD0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt11logic_errorD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNKSt3__28numpunctIwE16do_thousands_sepEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 12 >> 2] | 0;
}

function __ZNKSt3__25ctypeIwE8do_widenEc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return i2 << 24 >> 24 | 0;
}

function __ZN8LineTool5resetEv(i1) {
 i1 = i1 | 0;
 HEAP8[i1 >> 0] = 0;
 HEAP8[i1 + 12 >> 0] = 0;
 return;
}

function _strtold_l(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return +(+_strtold(i1, i2));
}

function __ZNSt3__28ios_baseD0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__28ios_baseD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__25ctypeIcED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__25ctypeIcED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__210moneypunctIwLb1EED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNSt3__210moneypunctIwLb0EED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNSt3__210moneypunctIcLb1EED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNSt3__210moneypunctIcLb0EED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNSt11logic_errorD0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt11logic_errorD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNKSt3__28numpunctIwE16do_decimal_pointEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 8 >> 2] | 0;
}

function __ZNKSt3__28numpunctIcE16do_thousands_sepEv(i1) {
 i1 = i1 | 0;
 return HEAP8[i1 + 9 >> 0] | 0;
}

function __ZNKSt3__28numpunctIcE16do_decimal_pointEv(i1) {
 i1 = i1 | 0;
 return HEAP8[i1 + 8 >> 0] | 0;
}

function __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv(i1) {
 i1 = i1 | 0;
 _abort();
}

function __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i1) {
 i1 = i1 | 0;
 _abort();
}

function __ZN12RenderSystem3endEv(i1) {
 i1 = i1 | 0;
 _glUseProgram(HEAP32[i1 + 40 >> 2] | 0);
 return;
}

function _strtod_l(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return +(+_strtod(i1, i2));
}

function __ZNSt3__220__time_get_c_storageIwEC2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 21092;
 return;
}

function __ZNSt3__220__time_get_c_storageIcEC2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 21056;
 return;
}

function __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv(i1) {
 i1 = i1 | 0;
 _abort();
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9showmanycEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9showmanycEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZN8LineToolC2Ev(i1) {
 i1 = i1 | 0;
 HEAP8[i1 >> 0] = 0;
 HEAP8[i1 + 12 >> 0] = 0;
 return;
}

function establishStackSpace(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 STACKTOP = i1;
 STACK_MAX = i2;
}

function _strtof(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return Math_fround(+_strtox_78(i1, i2, 0));
}

function __ZNKSt3__210moneypunctIwLb1EE16do_thousands_sepEv(i1) {
 i1 = i1 | 0;
 return 2147483647;
}

function __ZNKSt3__210moneypunctIwLb1EE16do_decimal_pointEv(i1) {
 i1 = i1 | 0;
 return 2147483647;
}

function __ZNKSt3__210moneypunctIwLb0EE16do_thousands_sepEv(i1) {
 i1 = i1 | 0;
 return 2147483647;
}

function __ZNKSt3__210moneypunctIwLb0EE16do_decimal_pointEv(i1) {
 i1 = i1 | 0;
 return 2147483647;
}

function runPostSets() {}
function __emscripten_dceable_type_decls() {
 _emscripten_longjmp(0, 0);
}

function __ZNSt3__28messagesIwED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNSt3__28messagesIcED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZL34ImeSetInputScreenPosFn_DefaultImplii(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}

function b2(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 nullFunc_iiii(2);
 return 0;
}

function _isspace(i1) {
 i1 = i1 | 0;
 return ((i1 | 0) == 32 | (i1 + -9 | 0) >>> 0 < 5) & 1 | 0;
}

function __ZNSt8bad_castD0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt8bad_castD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__27collateIwED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNSt3__27collateIcED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4syncEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4syncEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNKSt3__27codecvtIDsc11__mbstate_tE16do_always_noconvEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNKSt3__27codecvtIDic11__mbstate_tE16do_always_noconvEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNKSt3__218__libcpp_refstring5c_strEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 >> 2] | 0;
}

function __ZNKSt3__27codecvtIwc11__mbstate_tE16do_always_noconvEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNKSt3__27codecvtIcc11__mbstate_tE16do_always_noconvEv(i1) {
 i1 = i1 | 0;
 return 1;
}

function __ZN5ImGui14GetMouseCursorEv() {
 return HEAP32[(HEAP32[1460598] | 0) + 7068 >> 2] | 0;
}

function dynCall_vi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 FUNCTION_TABLE_vi[i1 & 255](i2 | 0);
}

function _strcpy(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 ___stpcpy(i1, i2) | 0;
 return i1 | 0;
}

function _freelocale(i1) {
 i1 = i1 | 0;
 if (___loc_is_allocated(i1) | 0) _free(i1);
 return;
}

function ___lctrans(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return ___lctrans_impl(i1, i2) | 0;
}

function __ZNKSt3__27codecvtIDsc11__mbstate_tE13do_max_lengthEv(i1) {
 i1 = i1 | 0;
 return 4;
}

function __ZNKSt3__27codecvtIDic11__mbstate_tE13do_max_lengthEv(i1) {
 i1 = i1 | 0;
 return 4;
}

function __ZNKSt3__25ctypeIcE8do_widenEc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return i2 | 0;
}

function __ZL13MallocWrapperjPv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _malloc(i1) | 0;
}

function _png_gamma_significant(i1) {
 i1 = i1 | 0;
 return (i1 + -95e3 | 0) >>> 0 > 1e4 | 0;
}

function __ZNSt3__211char_traitsIcE12to_char_typeEi(i1) {
 i1 = i1 | 0;
 return i1 & 255 | 0;
}

function __ZNKSt3__27codecvtIcc11__mbstate_tE13do_max_lengthEv(i1) {
 i1 = i1 | 0;
 return 1;
}

function __ZNSt3__211char_traitsIcE11to_int_typeEc(i1) {
 i1 = i1 | 0;
 return i1 & 255 | 0;
}

function __ZNKSt3__27codecvtIDsc11__mbstate_tE11do_encodingEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNKSt3__27codecvtIDic11__mbstate_tE11do_encodingEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNKSt3__210moneypunctIcLb1EE16do_thousands_sepEv(i1) {
 i1 = i1 | 0;
 return 127;
}

function __ZNKSt3__210moneypunctIcLb1EE16do_decimal_pointEv(i1) {
 i1 = i1 | 0;
 return 127;
}

function __ZNKSt3__210moneypunctIcLb0EE16do_thousands_sepEv(i1) {
 i1 = i1 | 0;
 return 127;
}

function __ZNKSt3__210moneypunctIcLb0EE16do_decimal_pointEv(i1) {
 i1 = i1 | 0;
 return 127;
}

function ___getTypeName(i1) {
 i1 = i1 | 0;
 return ___strdup(HEAP32[i1 + 4 >> 2] | 0) | 0;
}

function __ZNSt3__211char_traitsIwE6lengthEPKw(i1) {
 i1 = i1 | 0;
 return _wcslen(i1) | 0;
}

function __ZNSt3__211char_traitsIcE6lengthEPKc(i1) {
 i1 = i1 | 0;
 return _strlen(i1) | 0;
}

function __ZNKSt3__27codecvtIcc11__mbstate_tE11do_encodingEv(i1) {
 i1 = i1 | 0;
 return 1;
}

function _strtold(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return +(+_strtox_78(i1, i2, 2));
}

function __ZNKSt3__28messagesIwE8do_closeEi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}

function __ZNKSt3__28messagesIcE8do_closeEi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}

function __ZNKSt3__218__libcpp_refstring15__uses_refcountEv(i1) {
 i1 = i1 | 0;
 return 1;
}

function _strtod(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return +(+_strtox_78(i1, i2, 1));
}

function __ZL11FreeWrapperPvS_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _free(i1);
 return;
}

function b14(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 nullFunc_viii(14);
}

function __ZNKSt3__210moneypunctIwLb1EE14do_frac_digitsEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNKSt3__210moneypunctIwLb0EE14do_frac_digitsEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNKSt3__210moneypunctIcLb1EE14do_frac_digitsEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNKSt3__210moneypunctIcLb0EE14do_frac_digitsEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNSt3__211char_traitsIwE12to_char_typeEj(i1) {
 i1 = i1 | 0;
 return i1 | 0;
}

function _png_zfree(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _png_free(i1, i2);
 return;
}

function __ZNSt3__211char_traitsIwE11to_int_typeEw(i1) {
 i1 = i1 | 0;
 return i1 | 0;
}

function _isxdigit_l(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _isxdigit(i1) | 0;
}

function _isdigit_l(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _isdigit(i1) | 0;
}

function __ZNSt8bad_castC2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 21252;
 return;
}

function b12(i1, d2, d3) {
 i1 = i1 | 0;
 d2 = +d2;
 d3 = +d3;
 nullFunc_vidd(12);
}

function _copysignl(d1, d2) {
 d1 = +d1;
 d2 = +d2;
 return +(+_copysign(d1, d2));
}

function __ZNK14comma_numpunct16do_thousands_sepEv(i1) {
 i1 = i1 | 0;
 return 32;
}

function _scalbnl(d1, i2) {
 d1 = +d1;
 i2 = i2 | 0;
 return +(+_scalbn(d1, i2));
}

function __ZNK10__cxxabiv116__shim_type_info5noop2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNK10__cxxabiv116__shim_type_info5noop1Ev(i1) {
 i1 = i1 | 0;
 return;
}

function _frexpl(d1, i2) {
 d1 = +d1;
 i2 = i2 | 0;
 return +(+_frexp(d1, i2));
}

function b1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 nullFunc_iii(1);
 return 0;
}

function ___cxx_global_var_init() {
 __ZNSt3__28ios_base4InitC2Ev(0);
 return;
}

function __ZNSt3__221__throw_runtime_errorEPKc(i1) {
 i1 = i1 | 0;
 _abort();
}

function _isprint(i1) {
 i1 = i1 | 0;
 return (i1 + -32 | 0) >>> 0 < 95 | 0;
}

function _isdigit(i1) {
 i1 = i1 | 0;
 return (i1 + -48 | 0) >>> 0 < 10 | 0;
}

function __ZN7TextureC2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 0;
 return;
}

function __ZN10__cxxabiv116__shim_type_infoD2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function _zcfree(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _free(i2);
 return;
}

function _fmodl(d1, d2) {
 d1 = +d1;
 d2 = +d2;
 return +(+_fmod(d1, d2));
}

function __ZN5ImGui17GetCurrentContextEv() {
 return HEAP32[1460598] | 0;
}

function _catopen(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return -1 | 0;
}

function b13(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 nullFunc_vii(13);
}

function __ZNSt3__214__shared_countD2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function dynCall_v(i1) {
 i1 = i1 | 0;
 FUNCTION_TABLE_v[i1 & 3]();
}

function __ZNKSt8bad_cast4whatEv(i1) {
 i1 = i1 | 0;
 return 73174;
}

function __GLOBAL__I_000101() {
 ___cxx_global_var_init();
 return;
}

function __ZNSt3__26locale5facetD2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__212__do_nothingEPv(i1) {
 i1 = i1 | 0;
 return;
}

function __ZN11MeshManager3getEv() {
 return HEAP32[1460545] | 0;
}

function setEmtStackMax(i1) {
 i1 = i1 | 0;
 EMT_STACK_MAX = i1;
}

function emtStackRestore(i1) {
 i1 = i1 | 0;
 EMTSTACKTOP = i1;
}

function _pthread_cond_broadcast(i1) {
 i1 = i1 | 0;
 return 0;
}

function _ftell(i1) {
 i1 = i1 | 0;
 return ___ftello(i1) | 0;
}

function _pthread_mutex_unlock(i1) {
 i1 = i1 | 0;
 return 0;
}

function ___pthread_self_813() {
 return _pthread_self() | 0;
}

function ___pthread_self_777() {
 return _pthread_self() | 0;
}

function ___pthread_self_765() {
 return _pthread_self() | 0;
}

function ___pthread_self_679() {
 return _pthread_self() | 0;
}

function setAsyncState(i1) {
 i1 = i1 | 0;
 asyncState = i1;
}

function ___pthread_self_73() {
 return _pthread_self() | 0;
}

function ___pthread_self_68() {
 return _pthread_self() | 0;
}

function ___pthread_self_63() {
 return _pthread_self() | 0;
}

function ___pthread_self_60() {
 return _pthread_self() | 0;
}

function ___pthread_self_55() {
 return _pthread_self() | 0;
}

function ___ofl_lock() {
 ___lock(5844116);
 return 5844124;
}

function __Z4loopv() {
 __Z5inputv();
 __Z4drawv();
 return;
}

function b0(i1) {
 i1 = i1 | 0;
 nullFunc_ii(0);
 return 0;
}

function _pthread_mutex_lock(i1) {
 i1 = i1 | 0;
 return 0;
}

function __Znaj(i1) {
 i1 = i1 | 0;
 return __Znwj(i1) | 0;
}

function __ZdaPv(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function ___cxa_guard_release(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt9type_infoD2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt9exceptionD2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function stackRestore(i1) {
 i1 = i1 | 0;
 STACKTOP = i1;
}

function __ZdlPv(i1) {
 i1 = i1 | 0;
 _free(i1);
 return;
}

function __ZNSt8bad_castD2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__211char_traitsIwE3eofEv() {
 return -1;
}

function __ZNSt3__211char_traitsIcE3eofEv() {
 return -1;
}

function setTempRet0(i1) {
 i1 = i1 | 0;
 tempRet0 = i1;
}

function ___ofl_unlock() {
 ___unlock(5844116);
 return;
}

function ___cxa_guard_abort(i1) {
 i1 = i1 | 0;
 return;
}

function __ZN9PngLoaderD2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function _dummy_169(i1) {
 i1 = i1 | 0;
 return i1 | 0;
}

function getEmtStackMax() {
 return EMT_STACK_MAX | 0;
}

function ___unlockfile(i1) {
 i1 = i1 | 0;
 return;
}

function ___lockfile(i1) {
 i1 = i1 | 0;
 return 0;
}

function emterpret(i1) {
 i1 = i1 | 0;
 assert(0);
}

function emtStackSave() {
 return EMTSTACKTOP | 0;
}

function b11(i1) {
 i1 = i1 | 0;
 nullFunc_vi(11);
}

function __GLOBAL__sub_I_iostream_cpp() {
 return;
}

function _catclose(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZSt17__throw_bad_allocv() {
 _abort();
}

function ___ctype_toupper_loc() {
 return 14564;
}

function ___ctype_tolower_loc() {
 return 16104;
}

function ___errno_location() {
 return 5844080;
}

function getTempRet0() {
 return tempRet0 | 0;
}

function stackSave() {
 return STACKTOP | 0;
}

function ___ctype_b_loc() {
 return 14560;
}

function _pthread_self() {
 return 13872;
}

function b10() {
 nullFunc_v(10);
}

function _dummy() {
 return;
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_ii = [b0,__ZNKSt3__28numpunctIcE16do_decimal_pointEv,__ZNK14comma_numpunct16do_thousands_sepEv,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5uflowEv,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE9underflowEv,___stdio_close,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9underflowEv,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4syncEv,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9underflowEv,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5uflowEv,__ZNSt3__211__stdoutbufIwE4syncEv,__ZNSt3__211__stdoutbufIcE4syncEv,__ZNSt3__210__stdinbufIwE9underflowEv,__ZNSt3__210__stdinbufIwE5uflowEv,__ZNSt3__210__stdinbufIcE9underflowEv,__ZNSt3__210__stdinbufIcE5uflowEv,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,__ZNKSt3__220__time_get_c_storageIcE7__weeksEv,__ZNKSt3__220__time_get_c_storageIcE8__monthsEv,__ZNKSt3__220__time_get_c_storageIcE7__am_pmEv,__ZNKSt3__220__time_get_c_storageIcE3__cEv,__ZNKSt3__220__time_get_c_storageIcE3__rEv,__ZNKSt3__220__time_get_c_storageIcE3__xEv,__ZNKSt3__220__time_get_c_storageIcE3__XEv
,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,__ZNKSt3__220__time_get_c_storageIwE7__weeksEv,__ZNKSt3__220__time_get_c_storageIwE8__monthsEv,__ZNKSt3__220__time_get_c_storageIwE7__am_pmEv,__ZNKSt3__220__time_get_c_storageIwE3__cEv,__ZNKSt3__220__time_get_c_storageIwE3__rEv,__ZNKSt3__220__time_get_c_storageIwE3__xEv,__ZNKSt3__220__time_get_c_storageIwE3__XEv,__ZNKSt3__210moneypunctIcLb0EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIcLb0EE16do_thousands_sepEv,__ZNKSt3__210moneypunctIcLb0EE14do_frac_digitsEv,__ZNKSt3__210moneypunctIcLb1EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIcLb1EE16do_thousands_sepEv,__ZNKSt3__210moneypunctIcLb1EE14do_frac_digitsEv,__ZNKSt3__210moneypunctIwLb0EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIwLb0EE16do_thousands_sepEv,__ZNKSt3__210moneypunctIwLb0EE14do_frac_digitsEv,__ZNKSt3__210moneypunctIwLb1EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIwLb1EE16do_thousands_sepEv,__ZNKSt3__210moneypunctIwLb1EE14do_frac_digitsEv,__ZNKSt3__27codecvtIDic11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIDic11__mbstate_tE16do_always_noconvEv,__ZNKSt3__27codecvtIDic11__mbstate_tE13do_max_lengthEv,__ZNKSt3__27codecvtIwc11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIwc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__27codecvtIwc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__28numpunctIcE16do_thousands_sepEv,__ZNKSt3__28numpunctIwE16do_decimal_pointEv,__ZNKSt3__28numpunctIwE16do_thousands_sepEv,__ZNKSt3__27codecvtIcc11__mbstate_tE11do_encodingEv
,__ZNKSt3__27codecvtIcc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__27codecvtIcc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__27codecvtIDsc11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIDsc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__27codecvtIDsc11__mbstate_tE13do_max_lengthEv,__ZNKSt11logic_error4whatEv,__ZNKSt8bad_cast4whatEv,__ZL30GetClipboardTextFn_DefaultImplPv,__ZL31ImGui_ImplGlfw_GetClipboardTextPv,_png_image_free_function,_png_image_read_header,_png_image_read_colormap,_png_image_read_colormapped,_png_image_read_direct,_png_image_read_and_map,_png_image_read_composite,_png_image_read_background,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_iii = [b1,__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi,__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE8overflowEi,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8overflowEi,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE8overflowEj,__ZNSt3__211__stdoutbufIwE8overflowEj,__ZNSt3__211__stdoutbufIcE8overflowEi,__ZNSt3__210__stdinbufIwE9pbackfailEj,__ZNSt3__210__stdinbufIcE9pbackfailEi,__ZNKSt3__25ctypeIcE10do_toupperEc,__ZNKSt3__25ctypeIcE10do_tolowerEc,__ZNKSt3__25ctypeIcE8do_widenEc,__ZNKSt3__25ctypeIwE10do_toupperEw,__ZNKSt3__25ctypeIwE10do_tolowerEw,__ZNKSt3__25ctypeIwE8do_widenEc,_alphasort,__ZL19ChildWindowComparerPKvS0_,__ZL19rect_height_comparePKvS0_,__ZL19rect_original_orderPKvS0_,_png_user_version_check,_png_malloc_warn,b1,b1,b1,b1
,b1,b1,b1];
var FUNCTION_TABLE_iiii = [b2,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6setbufEPci,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE6setbufEPci,___stdio_write,___stdio_seek,___stdout_write,___stdio_read,_sn_write,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi,__ZNSt3__211__stdoutbufIwE6xsputnEPKwi,__ZNSt3__211__stdoutbufIcE6xsputnEPKci,__ZNKSt3__27collateIcE7do_hashEPKcS3_,__ZNKSt3__27collateIwE7do_hashEPKwS3_,__ZNKSt3__28messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,__ZNKSt3__28messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,__ZNKSt3__25ctypeIcE10do_toupperEPcPKc,__ZNKSt3__25ctypeIcE10do_tolowerEPcPKc,__ZNKSt3__25ctypeIcE9do_narrowEcc,__ZNKSt3__25ctypeIwE5do_isEtw,__ZNKSt3__25ctypeIwE10do_toupperEPwPKw,__ZNKSt3__25ctypeIwE10do_tolowerEPwPKw,__ZNKSt3__25ctypeIwE9do_narrowEwc,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv,__ZL30SettingsHandlerWindow_ReadOpenP12ImGuiContextP20ImGuiSettingsHandlerPKc
,_png_zalloc,_zcalloc,_do_read_706];
var FUNCTION_TABLE_iiiii = [b3,__ZNKSt3__25ctypeIcE8do_widenEPKcS3_Pc,__ZNKSt3__25ctypeIwE5do_isEPKwS3_Pt,__ZNKSt3__25ctypeIwE10do_scan_isEtPKwS3_,__ZNKSt3__25ctypeIwE11do_scan_notEtPKwS3_,__ZNKSt3__25ctypeIwE8do_widenEPKcS3_Pw,b3,b3];
var FUNCTION_TABLE_iiiiid = [b4,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,b4,b4,b4];
var FUNCTION_TABLE_iiiiii = [b5,__ZNKSt3__27collateIcE10do_compareEPKcS3_S3_S3_,__ZNKSt3__27collateIwE10do_compareEPKwS3_S3_S3_,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,__ZNKSt3__27codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__27codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__27codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__27codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__25ctypeIcE9do_narrowEPKcS3_cPc,__ZNKSt3__25ctypeIwE9do_narrowEPKwS3_cPc,__ZNKSt3__27codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__27codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__27codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__27codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5];
var FUNCTION_TABLE_iiiiiid = [b6,__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,b6];
var FUNCTION_TABLE_iiiiiii = [b7,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm
,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7];
var FUNCTION_TABLE_iiiiiiii = [b8,__ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,__ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b8];
var FUNCTION_TABLE_iiiiiiiii = [b9,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,__ZNKSt3__27codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,__ZNKSt3__27codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,__ZNKSt3__27codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,b9,b9,b9,b9,b9];
var FUNCTION_TABLE_v = [b10,__ZL25default_terminate_handlerv,__Z4loopv,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev];
var FUNCTION_TABLE_vi = [b11,__ZNSt3__28numpunctIcED2Ev,__ZN14comma_numpunctD0Ev,__ZNSt3__26locale5facet16__on_zero_sharedEv,__ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZThn8_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZThn8_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZTv0_n12_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZTv0_n12_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev,__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev,__ZThn8_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev,__ZThn8_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__214basic_ifstreamIcNS_11char_traitsIcEEED1Ev
,__ZTv0_n12_NSt3__214basic_ifstreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__219basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZNSt3__219basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZTv0_n12_NSt3__219basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZTv0_n12_NSt3__219basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED0Ev,__ZNSt3__28ios_baseD2Ev,__ZNSt3__28ios_baseD0Ev,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED0Ev,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED0Ev,__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__211__stdoutbufIwED2Ev,__ZNSt3__211__stdoutbufIwED0Ev,__ZNSt3__211__stdoutbufIcED2Ev,__ZNSt3__211__stdoutbufIcED0Ev,__ZNSt3__210__stdinbufIwED2Ev,__ZNSt3__210__stdinbufIwED0Ev,__ZNSt3__210__stdinbufIcED2Ev,__ZNSt3__210__stdinbufIcED0Ev,__ZNSt3__27collateIcED2Ev
,__ZNSt3__27collateIcED0Ev,__ZNSt3__27collateIwED2Ev,__ZNSt3__27collateIwED0Ev,__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__210moneypunctIcLb0EED2Ev,__ZNSt3__210moneypunctIcLb0EED0Ev,__ZNSt3__210moneypunctIcLb1EED2Ev,__ZNSt3__210moneypunctIcLb1EED0Ev,__ZNSt3__210moneypunctIwLb0EED2Ev,__ZNSt3__210moneypunctIwLb0EED0Ev,__ZNSt3__210moneypunctIwLb1EED2Ev,__ZNSt3__210moneypunctIwLb1EED0Ev,__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev
,__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__28messagesIcED2Ev,__ZNSt3__28messagesIcED0Ev,__ZNSt3__28messagesIwED2Ev,__ZNSt3__28messagesIwED0Ev,__ZNSt3__26locale5facetD2Ev,__ZNSt3__216__narrow_to_utf8ILj32EED0Ev,__ZNSt3__217__widen_from_utf8ILj32EED0Ev,__ZNSt3__27codecvtIwc11__mbstate_tED2Ev,__ZNSt3__27codecvtIwc11__mbstate_tED0Ev,__ZNSt3__26locale5__impD2Ev,__ZNSt3__26locale5__impD0Ev,__ZNSt3__25ctypeIcED2Ev,__ZNSt3__25ctypeIcED0Ev,__ZNSt3__28numpunctIcED0Ev,__ZNSt3__28numpunctIwED2Ev,__ZNSt3__28numpunctIwED0Ev,__ZNSt3__26locale5facetD0Ev,__ZNSt3__25ctypeIwED0Ev,__ZNSt3__27codecvtIcc11__mbstate_tED0Ev,__ZNSt3__27codecvtIDsc11__mbstate_tED0Ev,__ZNSt3__27codecvtIDic11__mbstate_tED0Ev,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev
,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,__ZNSt12length_errorD0Ev,__ZNSt8bad_castD2Ev,__ZNSt8bad_castD0Ev,__ZN10__cxxabiv123__fundamental_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,_png_image_free,__ZNSt3__26locale2id6__initEv,__ZNSt3__217__call_once_proxyINS_5tupleIJONS_12_GLOBAL__N_111__fake_bindEEEEEEvPv,__ZNSt3__212__do_nothingEPv,_free,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11];
var FUNCTION_TABLE_vidd = [b12,__Z19cursor_pos_callbackP10GLFWwindowdd,__Z15scroll_callbackP10GLFWwindowdd,__Z29ImGui_ImplGlfw_ScrollCallbackP10GLFWwindowdd];
var FUNCTION_TABLE_vii = [b13,__ZNK14comma_numpunct11do_groupingEv,__ZNKSt3__28numpunctIcE11do_truenameEv,__ZNKSt3__28numpunctIcE12do_falsenameEv,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE,__ZNSt3__211__stdoutbufIwE5imbueERKNS_6localeE,__ZNSt3__211__stdoutbufIcE5imbueERKNS_6localeE,__ZNSt3__210__stdinbufIwE5imbueERKNS_6localeE,__ZNSt3__210__stdinbufIcE5imbueERKNS_6localeE,__ZNKSt3__210moneypunctIcLb0EE11do_groupingEv,__ZNKSt3__210moneypunctIcLb0EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIcLb0EE16do_positive_signEv,__ZNKSt3__210moneypunctIcLb0EE16do_negative_signEv,__ZNKSt3__210moneypunctIcLb0EE13do_pos_formatEv,__ZNKSt3__210moneypunctIcLb0EE13do_neg_formatEv,__ZNKSt3__210moneypunctIcLb1EE11do_groupingEv,__ZNKSt3__210moneypunctIcLb1EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIcLb1EE16do_positive_signEv,__ZNKSt3__210moneypunctIcLb1EE16do_negative_signEv,__ZNKSt3__210moneypunctIcLb1EE13do_pos_formatEv,__ZNKSt3__210moneypunctIcLb1EE13do_neg_formatEv,__ZNKSt3__210moneypunctIwLb0EE11do_groupingEv,__ZNKSt3__210moneypunctIwLb0EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIwLb0EE16do_positive_signEv,__ZNKSt3__210moneypunctIwLb0EE16do_negative_signEv,__ZNKSt3__210moneypunctIwLb0EE13do_pos_formatEv,__ZNKSt3__210moneypunctIwLb0EE13do_neg_formatEv
,__ZNKSt3__210moneypunctIwLb1EE11do_groupingEv,__ZNKSt3__210moneypunctIwLb1EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIwLb1EE16do_positive_signEv,__ZNKSt3__210moneypunctIwLb1EE16do_negative_signEv,__ZNKSt3__210moneypunctIwLb1EE13do_pos_formatEv,__ZNKSt3__210moneypunctIwLb1EE13do_neg_formatEv,__ZNKSt3__28messagesIcE8do_closeEi,__ZNKSt3__28messagesIwE8do_closeEi,__ZNKSt3__28numpunctIcE11do_groupingEv,__ZNKSt3__28numpunctIwE11do_groupingEv,__ZNKSt3__28numpunctIwE11do_truenameEv,__ZNKSt3__28numpunctIwE12do_falsenameEv,__Z27ImGui_ImplGlfw_CharCallbackP10GLFWwindowj,__ZL30SetClipboardTextFn_DefaultImplPvPKc,__ZL34ImeSetInputScreenPosFn_DefaultImplii,__ZL31ImGui_ImplGlfw_SetClipboardTextPvPKc,_emscripten_longjmp,_png_zfree,_png_free,_png_safe_error,_png_safe_warning,_zcfree,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13];
var FUNCTION_TABLE_viii = [b14,__Z20window_size_callbackP10GLFWwindowii,__ZL30SettingsHandlerWindow_WriteAllP12ImGuiContextP20ImGuiSettingsHandlerP15ImGuiTextBuffer,_png_default_read_data,_png_read_filter_row_sub,_png_read_filter_row_up,_png_read_filter_row_avg,_png_read_filter_row_paeth_multibyte_pixel,_png_read_filter_row_paeth_1byte_pixel,b14,b14,b14,b14,b14,b14,b14];
var FUNCTION_TABLE_viiii = [b15,__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNKSt3__27collateIcE12do_transformEPKcS3_,__ZNKSt3__27collateIwE12do_transformEPKwS3_,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__Z21mouse_button_callbackP10GLFWwindowiii,__ZL30SettingsHandlerWindow_ReadLineP12ImGuiContextP20ImGuiSettingsHandlerPvPKc,__Z34ImGui_ImplGlfw_MouseButtonCallbackP10GLFWwindowiii,_png_set_mem_fn,_png_set_error_fn,b15];
var FUNCTION_TABLE_viiiii = [b16,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__Z26ImGui_ImplGlfw_KeyCallbackP10GLFWwindowiiii,b16,b16,b16];
var FUNCTION_TABLE_viiiiii = [b17,__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj,__ZNKSt3__28messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,__ZNKSt3__28messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b17,b17,b17,b17,b17,b17];

  return { __GLOBAL__I_000101: __GLOBAL__I_000101, __GLOBAL__sub_I_bind_cpp: __GLOBAL__sub_I_bind_cpp, __GLOBAL__sub_I_iostream_cpp: __GLOBAL__sub_I_iostream_cpp, __GLOBAL__sub_I_main_cpp: __GLOBAL__sub_I_main_cpp, ___cxa_can_catch: ___cxa_can_catch, ___cxa_is_pointer_type: ___cxa_is_pointer_type, ___errno_location: ___errno_location, ___getTypeName: ___getTypeName, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, ___uremdi3: ___uremdi3, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _emscripten_replace_memory: _emscripten_replace_memory, _fflush: _fflush, _free: _free, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _llvm_bswap_i32: _llvm_bswap_i32, _main: _main, _malloc: _malloc, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, _pthread_cond_broadcast: _pthread_cond_broadcast, _pthread_mutex_lock: _pthread_mutex_lock, _pthread_mutex_unlock: _pthread_mutex_unlock, _realloc: _realloc, _saveSetjmp: _saveSetjmp, _sbrk: _sbrk, _testSetjmp: _testSetjmp, dynCall_ii: dynCall_ii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiid: dynCall_iiiiid, dynCall_iiiiii: dynCall_iiiiii, dynCall_iiiiiid: dynCall_iiiiiid, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, dynCall_vidd: dynCall_vidd, dynCall_vii: dynCall_vii, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, emtStackRestore: emtStackRestore, emtStackSave: emtStackSave, emterpret: emterpret, establishStackSpace: establishStackSpace, getEmtStackMax: getEmtStackMax, getTempRet0: getTempRet0, runPostSets: runPostSets, setAsyncState: setAsyncState, setEmtStackMax: setEmtStackMax, setTempRet0: setTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real___GLOBAL__I_000101 = asm["__GLOBAL__I_000101"]; asm["__GLOBAL__I_000101"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__I_000101.apply(null, arguments);
};

var real___GLOBAL__sub_I_bind_cpp = asm["__GLOBAL__sub_I_bind_cpp"]; asm["__GLOBAL__sub_I_bind_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_bind_cpp.apply(null, arguments);
};

var real___GLOBAL__sub_I_iostream_cpp = asm["__GLOBAL__sub_I_iostream_cpp"]; asm["__GLOBAL__sub_I_iostream_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_iostream_cpp.apply(null, arguments);
};

var real___GLOBAL__sub_I_main_cpp = asm["__GLOBAL__sub_I_main_cpp"]; asm["__GLOBAL__sub_I_main_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_main_cpp.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_can_catch.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_is_pointer_type.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____getTypeName = asm["___getTypeName"]; asm["___getTypeName"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____getTypeName.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____uremdi3.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__main.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__memmove.apply(null, arguments);
};

var real__pthread_cond_broadcast = asm["_pthread_cond_broadcast"]; asm["_pthread_cond_broadcast"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_cond_broadcast.apply(null, arguments);
};

var real__pthread_mutex_lock = asm["_pthread_mutex_lock"]; asm["_pthread_mutex_lock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_lock.apply(null, arguments);
};

var real__pthread_mutex_unlock = asm["_pthread_mutex_unlock"]; asm["_pthread_mutex_unlock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_unlock.apply(null, arguments);
};

var real__realloc = asm["_realloc"]; asm["_realloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__realloc.apply(null, arguments);
};

var real__saveSetjmp = asm["_saveSetjmp"]; asm["_saveSetjmp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__saveSetjmp.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real__testSetjmp = asm["_testSetjmp"]; asm["_testSetjmp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__testSetjmp.apply(null, arguments);
};

var real_emtStackRestore = asm["emtStackRestore"]; asm["emtStackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_emtStackRestore.apply(null, arguments);
};

var real_emtStackSave = asm["emtStackSave"]; asm["emtStackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_emtStackSave.apply(null, arguments);
};

var real_emterpret = asm["emterpret"]; asm["emterpret"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_emterpret.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_getEmtStackMax = asm["getEmtStackMax"]; asm["getEmtStackMax"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getEmtStackMax.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getTempRet0.apply(null, arguments);
};

var real_setAsyncState = asm["setAsyncState"]; asm["setAsyncState"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setAsyncState.apply(null, arguments);
};

var real_setEmtStackMax = asm["setEmtStackMax"]; asm["setEmtStackMax"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setEmtStackMax.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setTempRet0.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
Module["asm"] = asm;
var __GLOBAL__I_000101 = Module["__GLOBAL__I_000101"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__GLOBAL__I_000101"].apply(null, arguments) };
var __GLOBAL__sub_I_bind_cpp = Module["__GLOBAL__sub_I_bind_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__GLOBAL__sub_I_bind_cpp"].apply(null, arguments) };
var __GLOBAL__sub_I_iostream_cpp = Module["__GLOBAL__sub_I_iostream_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__GLOBAL__sub_I_iostream_cpp"].apply(null, arguments) };
var __GLOBAL__sub_I_main_cpp = Module["__GLOBAL__sub_I_main_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__GLOBAL__sub_I_main_cpp"].apply(null, arguments) };
var ___cxa_can_catch = Module["___cxa_can_catch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___cxa_can_catch"].apply(null, arguments) };
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___cxa_is_pointer_type"].apply(null, arguments) };
var ___errno_location = Module["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___errno_location"].apply(null, arguments) };
var ___getTypeName = Module["___getTypeName"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___getTypeName"].apply(null, arguments) };
var ___muldi3 = Module["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___muldi3"].apply(null, arguments) };
var ___udivdi3 = Module["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___udivdi3"].apply(null, arguments) };
var ___uremdi3 = Module["___uremdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___uremdi3"].apply(null, arguments) };
var _bitshift64Lshr = Module["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_bitshift64Lshr"].apply(null, arguments) };
var _bitshift64Shl = Module["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_bitshift64Shl"].apply(null, arguments) };
var _emscripten_replace_memory = Module["_emscripten_replace_memory"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_emscripten_replace_memory"].apply(null, arguments) };
var _fflush = Module["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_fflush"].apply(null, arguments) };
var _free = Module["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_free"].apply(null, arguments) };
var _i64Add = Module["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_i64Add"].apply(null, arguments) };
var _i64Subtract = Module["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_i64Subtract"].apply(null, arguments) };
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_llvm_bswap_i32"].apply(null, arguments) };
var _main = Module["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_main"].apply(null, arguments) };
var _malloc = Module["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_malloc"].apply(null, arguments) };
var _memcpy = Module["_memcpy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_memcpy"].apply(null, arguments) };
var _memmove = Module["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_memmove"].apply(null, arguments) };
var _memset = Module["_memset"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_memset"].apply(null, arguments) };
var _pthread_cond_broadcast = Module["_pthread_cond_broadcast"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_pthread_cond_broadcast"].apply(null, arguments) };
var _pthread_mutex_lock = Module["_pthread_mutex_lock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_pthread_mutex_lock"].apply(null, arguments) };
var _pthread_mutex_unlock = Module["_pthread_mutex_unlock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_pthread_mutex_unlock"].apply(null, arguments) };
var _realloc = Module["_realloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_realloc"].apply(null, arguments) };
var _saveSetjmp = Module["_saveSetjmp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_saveSetjmp"].apply(null, arguments) };
var _sbrk = Module["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_sbrk"].apply(null, arguments) };
var _testSetjmp = Module["_testSetjmp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_testSetjmp"].apply(null, arguments) };
var emtStackRestore = Module["emtStackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emtStackRestore"].apply(null, arguments) };
var emtStackSave = Module["emtStackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emtStackSave"].apply(null, arguments) };
var emterpret = Module["emterpret"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emterpret"].apply(null, arguments) };
var establishStackSpace = Module["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["establishStackSpace"].apply(null, arguments) };
var getEmtStackMax = Module["getEmtStackMax"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getEmtStackMax"].apply(null, arguments) };
var getTempRet0 = Module["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getTempRet0"].apply(null, arguments) };
var runPostSets = Module["runPostSets"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["runPostSets"].apply(null, arguments) };
var setAsyncState = Module["setAsyncState"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["setAsyncState"].apply(null, arguments) };
var setEmtStackMax = Module["setEmtStackMax"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["setEmtStackMax"].apply(null, arguments) };
var setTempRet0 = Module["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["setTempRet0"].apply(null, arguments) };
var setThrew = Module["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["setThrew"].apply(null, arguments) };
var stackAlloc = Module["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackAlloc"].apply(null, arguments) };
var stackRestore = Module["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackRestore"].apply(null, arguments) };
var stackSave = Module["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackSave"].apply(null, arguments) };
var dynCall_ii = Module["dynCall_ii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_ii"].apply(null, arguments) };
var dynCall_iii = Module["dynCall_iii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iii"].apply(null, arguments) };
var dynCall_iiii = Module["dynCall_iiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiii"].apply(null, arguments) };
var dynCall_iiiii = Module["dynCall_iiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiii"].apply(null, arguments) };
var dynCall_iiiiid = Module["dynCall_iiiiid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiid"].apply(null, arguments) };
var dynCall_iiiiii = Module["dynCall_iiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiii"].apply(null, arguments) };
var dynCall_iiiiiid = Module["dynCall_iiiiiid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiiid"].apply(null, arguments) };
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiiii"].apply(null, arguments) };
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiiiii"].apply(null, arguments) };
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiiiiii"].apply(null, arguments) };
var dynCall_v = Module["dynCall_v"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_v"].apply(null, arguments) };
var dynCall_vi = Module["dynCall_vi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vi"].apply(null, arguments) };
var dynCall_vidd = Module["dynCall_vidd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vidd"].apply(null, arguments) };
var dynCall_vii = Module["dynCall_vii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vii"].apply(null, arguments) };
var dynCall_viii = Module["dynCall_viii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viii"].apply(null, arguments) };
var dynCall_viiii = Module["dynCall_viiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiii"].apply(null, arguments) };
var dynCall_viiiii = Module["dynCall_viiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiii"].apply(null, arguments) };
var dynCall_viiiiii = Module["dynCall_viiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiiii"].apply(null, arguments) };
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["ccall"]) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["cwrap"]) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["getMemory"] = getMemory;
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["addRunDependency"] = addRunDependency;
Module["removeRunDependency"] = removeRunDependency;
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["FS_createFolder"] = FS.createFolder;
Module["FS_createPath"] = FS.createPath;
Module["FS_createDataFile"] = FS.createDataFile;
Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
Module["FS_createLazyFile"] = FS.createLazyFile;
Module["FS_createLink"] = FS.createLink;
Module["FS_createDevice"] = FS.createDevice;
Module["FS_unlink"] = FS.unlink;
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["staticAlloc"]) Module["staticAlloc"] = function() { abort("'staticAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STATIC"]) Object.defineProperty(Module, "ALLOC_STATIC", { get: function() { abort("'ALLOC_STATIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });




/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(Module['thisProgram']);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;

  var initialEmtStackTop = Module['asm']['emtStackSave']();

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we are saving the stack, then do not call exit, we are not
    // really exiting now, just unwinding the JS stack
    if (EmterpreterAsync.state !== 1) {
    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      // an infinite loop keeps the C stack around, but the emterpreter stack must be unwound - we do not want to restore the call stack at infinite loop
      Module['asm'].emtStackRestore(initialEmtStackTop);
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in NO_FILESYSTEM
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = Module['print'];
  var printErr = Module['printErr'];
  var has = false;
  Module['print'] = Module['printErr'] = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    var hasFS = true;
    if (hasFS) {
      ['stdout', 'stderr'].forEach(function(name) {
        var info = FS.analyzePath('/dev/' + name);
        if (!info) return;
        var stream = info.object;
        var rdev = stream.rdev;
        var tty = TTY.ttys[rdev];
        if (tty && tty.output && tty.output.length) {
          has = true;
        }
      });
    }
  } catch(e) {}
  Module['print'] = print;
  Module['printErr'] = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set NO_EXIT_RUNTIME to 0 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      Module.printErr('exit(' + status + ') called, but NO_EXIT_RUNTIME is set, so halting execution but not exiting the runtime or preventing further async execution (build with NO_EXIT_RUNTIME=0, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}









